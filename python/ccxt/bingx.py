# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
import hashlib
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.decimal_to_precision import TICK_SIZE


class bingx(Exchange):

    def describe(self):
        return self.deep_extend(super(bingx, self).describe(), {
            'id': 'bingx',
            'name': 'BingX',
            'countries': ['EU'],
            'rateLimit': 100,
            'version': 'v1',
            'pro': True,
            'has': {
                'CORS': True,
                'spot': True,
                'margin': None,
                'swap': False,
                'future': False,
                'option': False,
                'cancelOrder': True,
                'createDepositAddress': False,
                'createOrder': True,
                'fetchBalance': True,
                'fetchDepositAddress': False,
                'fetchDepositAddresses': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchMarkOHLCV': False,
                'fetchOHLCV': True,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrders': True,
                'fetchOrderBook': True,
                'fetchPositions': True,
                'fetchPremiumIndexOHLCV': False,
                'fetchTicker': True,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'transfer': False,
            },
            'urls': {
                'logo': '',
                'api': {
                    'swap': 'https://api-swap-rest.bingx.com/api',
                    'swap2': 'https://open-api.bingx.com',
                },
                'test': {
                },
                'www': 'https://bingx.com/',
                'doc': [
                    'https://bingx-api.github.io/docs',
                ],
                'fees': [
                    'https://support.bingx.com/hc/en-001/articles/360027240173',
                ],
                'referral': '',
            },
            'api': {
                'swap': {
                    'v1': {
                        'public': {
                            'get': {
                                'market/getAllContracts': 1,
                                'market/getLatestPrice': 1,
                                'market/getMarketDepth': 1,
                                'market/getMarketTrades': 1,
                                'market/getLatestFunding': 1,
                                'market/getHistoryFunding': 1,
                                'market/getLatestKline': 1,
                                'market/getHistoryKlines': 1,
                                'market/getOpenPositions': 1,
                                'market/getTicker': 1,
                            },
                            'post': {
                                'common/server/time': 1,
                            },
                        },
                        'private': {
                            'post': {
                                'user/getBalance': 1,
                                'user/getPositions': 1,
                                'user/trade': 1,
                                'user/oneClickClosePosition': 1,
                                'user/oneClickCloseAllPositions': 1,
                                'user/cancelOrder': 1,
                                'user/batchCancelOrders': 1,
                                'user/cancelAll': 1,
                                'user/pendingOrders': 1,
                                'user/pendingStopOrders': 1,
                                'user/queryOrderStatus': 1,
                                'user/setMarginMode': 1,
                                'user/setLeverage': 1,
                                'user/forceOrders': 1,
                                'user/historyOrders': 1,
                                'user/auth/userDataStream': 1,
                            },
                            'put': {
                                'user/auth/userDataStream': 1,
                            },
                        },
                    },
                },
                'swap2': {
                    'openApi': {
                        'public': {
                            'get': {
                                'swap/v2/quote/klines': 1,
                            },
                        },
                        'private': {
                            'get': {
                                'swap/v2/trade/openOrders': 1,
                                'swap/v2/trade/leverage': 1,
                                'swap/v2/trade/marginType': 1,
                            },
                            'put': {
                                'user/auth/userDataStream': 1,
                            },
                            'post': {
                                'user/auth/userDataStream': 1,
                                'swap/v2/trade/order': 1,
                                'swap/v2/trade/leverage': 1,
                                'swap/v2/trade/marginType': 1,
                            },
                            'delete': {
                                'swap/v2/trade/order': 1,
                                'swap/v2/trade/allOpenOrders': 1,
                            },
                        },
                    },
                },
            },
            'markets': {
                'BTC/EUR': {'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'btc', 'quoteId': 'eur', 'type': 'spot', 'spot': True},
            },
            'fees': {
                'trading': {
                    'tierBased': True,
                    'percentage': True,
                    'maker': self.parse_number('0.0002'),
                    'taker': self.parse_number('0.0004'),
                },
            },
            'precisionMode': TICK_SIZE,
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
            },
            'timeframes': {
                '1m': '1',
                '3m': '3',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '4h': '240',
                '6h': '360',
                '12h': '720',
                '1d': '1D',
                '1w': '1W',
                '1M': '1M',
            },
            'options': {
                'listenKeyRefreshRate': 1200000,  # 20 mins
                'defaultType': 'swap',
                'defaultSubType': 'linear',
            },
            'orderTypes': {
                'market': 'MARKET',
                'limit': 'LIMIT',
                'stop': 'STOP',
                'stoplimit': 'STOP',
                'marketiftouched': 'TAKE_PROFIT_MARKET',
                'limitiftouched': 'TAKE_PROFIT',
            },
            'reverseOrderTypes': {
                'market': 'Market',
                'limit': 'Limit',
                'stop_market': 'Stop',
                'stoplimit': 'StopLimit',
                'take_profit_market': 'Stop',
                'take_profit': 'StopLimit',
                'limit_maker': 'Limit',
            },
            'triggerTypes': {
                'Mark': 'MARK_PRICE',
                'Last': 'CONTRACT_PRICE',
            },
            'timeInForces': {
                'GTC': 'GTC',
                'PO': 'GTX',
                'IOC': 'IOC',
                'FOK': 'FOK',
            },
        })

    def switch_isolated(self, symbol, isIsolated, buyLeverage, sellLeverage, params={}):
        if isIsolated:
            self.set_margin_mode('ISOLATED', symbol, params)
        else:
            self.set_margin_mode('CROSSED', symbol, params)

    def set_margin_mode(self, marginMode, symbol=None, params={}):
        """
        set margin mode to 'cross' or 'isolated'
        :param str marginMode: 'cross' or 'isolated'
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the bitget api endpoint
        :returns dict: response from the exchange
        """
        marginMode = marginMode.lower()
        if marginMode == 'cross':
            marginMode = 'CROSSED'
        if marginMode == 'isolated':
            marginMode = 'ISOLATED'
        if symbol is None:
            raise ArgumentsRequired(self.id + ' setMarginMode() requires a symbol argument')
        if (marginMode != 'ISOLATED') and (marginMode != 'CROSSED'):
            raise ArgumentsRequired(self.id + '(' + marginMode + ') ' + ' setMarginMode() marginMode must be "isolated" or "crossed"')
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'marginType': marginMode,
        }
        params = self.omit(params, ['leverage', 'buyLeverage', 'sellLeverage'])
        try:
            return self.swap2OpenApiPrivatePostSwapV2TradeMarginType(self.extend(request, params))
        except Exception as e:
            if isinstance(e, ExchangeError):
                if str(e).find('80001') >= 0:
                    raise ExchangeError(self.id + ' ' + self.json({'code': 80001, 'msg': 'Cannot switch Margin Type for market with open positions or orders.'}))
            raise e

    def set_leverage(self, leverage, symbol=None, params={}):
        """
        set the level of leverage for a market
        :param float leverage: the rate of leverage
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the bitget api endpoint
        :returns dict: response from the exchange
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' setLeverage() requires a symbol argument')
        buyLeverage = self.safe_number(params, 'buyLeverage', leverage)
        sellLeverage = self.safe_number(params, 'sellLeverage', leverage)
        self.load_markets()
        market = self.market(symbol)
        params = self.omit(params, ['marginMode', 'positionMode'])
        promises = []
        request = {
            'symbol': market['id'],
        }
        if buyLeverage is not None:
            request['leverage'] = self.parse_to_int(buyLeverage)
            request['side'] = 'LONG'
            promises.append(self.swap2OpenApiPrivatePostSwapV2TradeLeverage(self.extend(request, params)))
        if sellLeverage is not None:
            request['leverage'] = self.parse_to_int(sellLeverage)
            request['side'] = 'SHORT'
            promises.append(self.swap2OpenApiPrivatePostSwapV2TradeLeverage(self.extend(request, params)))
        promises = promises
        if len(promises) == 1:
            return promises[0]
        else:
            return promises

    def fetch_account_configuration(self, symbol, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        leverageResponse = self.swap2OpenApiPrivateGetSwapV2TradeLeverage(self.extend(request, params))
        leverageData = self.safe_value(leverageResponse, 'data')
        marginTypeResponse = self.swap2OpenApiPrivateGetSwapV2TradeMarginType(self.extend(request, params))
        marginTypeData = self.safe_value(marginTypeResponse, 'data')
        return self.parse_account_configuration(leverageData, marginTypeData, market)

    def parse_account_configuration(self, leverageData, marginTypeData, market):
        # {
        #     "marginCoin":"USDT",
        #   "locked":0,
        #   "available":13168.86110692,
        #   "crossMaxAvailable":13168.86110692,
        #   "fixedMaxAvailable":13168.86110692,
        #   "maxTransferOut":13168.86110692,
        #   "equity":13178.86110692,
        #   "usdtEquity":13178.861106922,
        #   "btcEquity":0.344746495477,
        #   "crossRiskRate":0,
        #   "crossMarginLeverage":20,
        #   "fixedLongLeverage":20,
        #   "fixedShortLeverage":20,
        #   "marginMode":"crossed",
        #   "holdMode":"double_hold"
        # }
        # marginMode = self.safe_string(data, 'marginMode')
        # isIsolated = (marginMode == 'fixed')
        # leverage = self.safe_float(data, 'crossMarginLeverage')
        # buyLeverage = self.safe_float(data, 'fixedLongLeverage')
        # sellLeverage = self.safe_float(data, 'fixedShortLeverage')
        # marginCoin = self.safe_string(data, 'marginCoin')
        # holdMode = self.safe_string(data, 'holdMode')
        # positionMode = 'hedged'
        # if holdMode == 'single_hold':
        #     positionMode = 'oneway'
        #     if isIsolated:
        #         leverage = buyLeverage
        #     }
        # }
        # accountConfig = {
        #     'info': data,
        #     'markets': {},
        #     'positionMode': positionMode,
        #     'marginMode': 'isolated' if isIsolated else 'cross',
        # }
        # leverageConfigs = accountConfig['markets']
        # leverageConfigs[market['symbol']] = {
        #     'marginMode': 'isolated' if isIsolated else 'cross',
        #     'isIsolated': isIsolated,
        #     'leverage': leverage,
        #     'buyLeverage': buyLeverage,
        #     'sellLeverage': sellLeverage,
        #     'marginCoin': marginCoin,
        #     'positionMode': positionMode,
        # }
        buyLeverage = self.safe_float(leverageData, 'longLeverage')
        sellLeverage = self.safe_float(leverageData, 'shortLeverage')
        maxBuyLeverage = self.safe_float(leverageData, 'maxLongLeverage')
        maxSellLeverage = self.safe_float(leverageData, 'maxShortLeverage')
        marginType = self.safe_string(marginTypeData, 'marginType')
        isIsolated = (marginType == 'ISOLATED')
        accountConfig = {
            'marginMode': 'isolated' if isIsolated else 'cross',
            'positionMode': 'hedged',
            'markets': {},
        }
        leverageConfigs = accountConfig['markets']
        leverageConfigs[market['symbol']] = {
            'buyLeverage': buyLeverage,
            'sellLeverage': sellLeverage,
            'maxBuyLeverage': maxBuyLeverage,
            'maxSellLeverage': maxSellLeverage,
        }
        return accountConfig

    def fetch_contract_markets(self, params={}):
        response = self.swapV1PublicGetMarketGetAllContracts(params)
        #
        #     {
        #         "code":0,
        #         "msg":"Success",
        #         "data":{
        #             "contracts":[
        #                 {
        #                     "contractId":"100",
        #                     "symbol":"BTC-USDT",
        #                     "name":"BTC",
        #                     "size":"0.0001",
        #                     "currency":"USDT",
        #                     "asset":"BTC",
        #                     "pricePrecision":2,
        #                     "volumePrecision":4,
        #                     "feeRate":0.0005,
        #                     "tradeMinLimit":1,
        #                     "maxLongLeverage":100,
        #                     "maxShortLeverage":100,
        #                     "status":1
        #                 }
        #             ]
        #         }
        #     }
        #
        result = []
        data = self.safe_value(response, 'data', {})
        contracts = self.safe_value(data, 'contracts', [])
        for i in range(0, len(contracts)):
            market = contracts[i]
            # should we use contract id id?
            # contractId = self.safe_string(market, 'contractId')
            marketId = self.safe_string(market, 'symbol')
            parts = marketId.split('-')
            baseId = self.safe_string(parts, 0)
            quoteId = self.safe_string(parts, 1)
            settleId = self.safe_string(market, 'currency')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            settle = self.safe_currency_code(settleId)
            symbol = base + '/' + quote + ':' + settle
            status = self.safe_number(market, 'status')
            # contractSize = self.safe_number(market, 'size', 1)
            contractSize = 1
            result.append({
                'id': marketId,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': settle,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': settleId,
                'type': 'swap',
                'spot': False,
                'margin': True,
                'swap': True,
                'future': False,
                'option': False,
                'active': status == 1,
                'contract': True,
                'linear': True,
                'inverse': None,
                'contractSize': contractSize,
                'expiry': None,
                'expiryDatetime': None,
                'strike': None,
                'optionType': None,
                'precision': {
                    'amount': self.parse_number(self.parse_precision(self.safe_string(market, 'volumePrecision'))),
                    'price': self.parse_number(self.parse_precision(self.safe_string(market, 'pricePrecision'))),
                },
                'limits': {
                    'leverage': {
                        'min': None,
                        'max': self.safe_number(market, 'maxLongLeverage'),
                    },
                    'amount': {
                        'min': self.safe_number(market, 'size'),
                        'max': None,
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                },
                'info': market,
            })
        return result

    def fetch_markets(self, params={}):
        """
        retrieves data on all markets for bingx
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns [dict]: an array of objects representing market data
        """
        contract = self.fetch_contract_markets(params)
        return contract

    def parse_balance(self, response):
        result = {'info': response}
        data = self.safe_value(response, 'data', {})
        dataAccount = self.safe_value(data, 'account', {})
        currencies = list(self.currencies.keys())
        for i in range(0, len(currencies)):
            code = currencies[i]
            account = self.account()
            if self.safe_string(dataAccount, 'currency', '') == code:
                account['free'] = self.safe_string(dataAccount, 'availableMargin')
                account['used'] = self.safe_string(dataAccount, 'usedMargin')
                account['total'] = self.safe_string(dataAccount, 'balance')
            result[code] = account
        return self.safe_balance(result)

    def fetch_balance(self, params={}):
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/en/latest/manual.html?#balance-structure>`
        """
        # self.load_markets()
        response = self.swapV1PrivatePostUserGetBalance(params)
        return self.parse_balance(response)

    def fetch_order_book(self, symbol, limit=None, params={}):
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int|None limit: the maximum amount of order book entries to return
        :param dict params: extra parameters specific to the paymium api endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        market = self.market(symbol)
        request = {
            'currency': market['id'],
        }
        response = self.publicGetDataCurrencyDepth(self.extend(request, params))
        return self.parse_order_book(response, market['symbol'], None, 'bids', 'asks', 'price', 'amount')

    def parse_ticker(self, ticker, market=None):
        #
        # {
        #   "symbol": "BTC-USDT",
        #   "priceChange": "10.00",
        #   "priceChangePercent": "10",
        #   "lastPrice": "5738.23",
        #   "lastVolume": "31.21",
        #   "highPrice": "5938.23",
        #   "lowPrice": "5238.23",
        #   "volume": "23211231.13",
        #   "dayVolume": "213124412412.47",
        #   "openPrice": "5828.32"
        # }
        #
        symbol = self.safe_symbol(None, market)
        timestamp = self.milliseconds()
        baseVolume = self.safe_string(ticker, 'volume')
        last = self.safe_string(ticker, 'lastPrice')
        if last == '-':
            last = None
        high = self.safe_string(ticker, 'highPrice')
        if high == '-':
            high = None
        low = self.safe_string(ticker, 'lowPrice')
        if low == '-':
            low = None
        open = self.safe_string(ticker, 'openPrice')
        if open == '-':
            open = None
        percentage = self.safe_string(ticker, 'priceChangePercent')
        if percentage == '-':
            percentage = None
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': last,
            'bidVolume': None,
            'ask': last,
            'askVolume': None,
            'open': open,
            'close': last,
            'last': last,
            'mark': last,
            'previousClose': None,
            'change': None,
            'percentage': percentage,
            'average': None,
            'baseVolume': baseVolume,
            'info': ticker,
        }, market)

    def fetch_ticker(self, symbol, params={}):
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict params: extra parameters specific to the paymium api endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = self.swapV1PublicGetMarketGetTicker(self.extend(request, params))
        #
        # {
        #   "symbol": "BTC-USDT",
        #   "priceChange": "10.00",
        #   "priceChangePercent": "10",
        #   "lastPrice": "5738.23",
        #   "lastVolume": "31.21",
        #   "highPrice": "5938.23",
        #   "lowPrice": "5238.23",
        #   "volume": "23211231.13",
        #   "dayVolume": "213124412412.47",
        #   "openPrice": "5828.32"
        # }
        #
        data = self.safe_value(response, 'data')
        tickers = self.safe_value(data, 'tickers')
        ticker = self.safe_value(tickers, 0)
        return self.parse_ticker(ticker, market)

    def parse_trade(self, trade, market=None):
        timestamp = self.safe_timestamp(trade, 'created_at_int')
        id = self.safe_string(trade, 'uuid')
        market = self.safe_market(None, market)
        side = self.safe_string(trade, 'side')
        price = self.safe_string(trade, 'price')
        amountField = 'traded_' + market['base'].lower()
        amount = self.safe_string(trade, amountField)
        return self.safe_trade({
            'info': trade,
            'id': id,
            'order': None,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': None,
            'side': side,
            'takerOrMaker': None,
            'price': price,
            'amount': amount,
            'cost': None,
            'fee': None,
        }, market)

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        return []
        # """
        #
        #
        # get the list of most recent trades for a particular symbol
        # :param str symbol: unified symbol of the market to fetch trades for
        # :param int|None since: timestamp in ms of the earliest trade to fetch
        # :param int|None limit: the maximum amount of trades to fetch
        # :param dict params: extra parameters specific to the paymium api endpoint
        # :returns [dict]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html?#public-trades>`
        # """
        # self.load_markets()
        # market = self.market(symbol)
        # request = {
        #     'currency': market['id'],
        # }
        # response = self.publicGetDataCurrencyTrades(self.extend(request, params))
        # return self.parse_trades(response, market, since, limit)

    def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        # {
        #     "code": 0,
        #     "data": {
        #     "orders": [
        #         {
        #             "action": "Open",
        #             "avgFilledPrice": 31333.37,
        #             "commission": -0.0009,
        #             "entrustPrice": 31331.25,
        #             "entrustTm": "2021-01-05T09:15:02Z",
        #             "entrustVolume": 0.0001,
        #             "filledVolume": 0.0001,
        #             "orderId": "996273190",
        #             "orderStatus": "Filled",
        #             "profit": 0,
        #             "side": "Bid",
        #             "symbol": "BTC-USDT",
        #             "tradeType": "Market",
        #             "updateTm": "2021-01-05T09:15:15Z"
        #         }
        #     ]
        # },
        #     "message": ""
        # }
        self.load_markets()
        market = None
        request = {}
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        request['lastOrderId'] = 0
        request['length'] = 100
        request['timestamp'] = self.milliseconds() - 0
        response = self.swapV1PrivatePostUserHistoryOrders(self.extend(request, params))
        data = self.safe_value(response, 'data')
        trades = self.safe_value(data, 'orders')
        return self.parse_my_trades(trades, market, since, limit)

    def parse_my_trades(self, trades, market=None, since=None, limit=None, params={}):
        result = []
        for i in range(0, len(trades)):
            filled = self.safe_number(trades[i], 'filledVolume', 0)
            if filled <= 0:
                continue
            action = self.safe_string(trades[i], 'action')
            if action == 'Close':
                continue
            trade = self.extend(self.parse_my_trade(trades[i], market), params)
            result.append(trade)
        result = self.sort_by(result, 'timestamp')
        symbol = market['symbol'] if (market is not None) else None
        tail = (since is None)
        return self.filter_by_symbol_since_limit(result, symbol, since, limit, tail)

    def parse_my_trade(self, trade, market=None):
        # {
        #     'orderId': '1657690927243935744',
        #     'side': 'Ask',
        #     'action': 'Close',
        #     'tradeType': 'Limit',
        #     'entrustVolume': '0.0003',
        #     'entrustPrice': '26337.6',
        #     'filledVolume': '0',
        #     'avgFilledPrice': '0',
        #     'entrustTm': '2023-05-14T10:14:50Z',
        #     'symbol': 'BTC-USDT',
        #     'profit': '0',
        #     'commission': '0',
        #     'updateTm': '2023-05-14T10:14:50Z',
        #     'orderStatus': 'Cancelled'
        # }
        marketId = self.safe_string(trade, 'symbol')
        market = self.safe_market(marketId)
        symbol = market['symbol']
        rawSide = self.safe_string(trade, 'side')
        id = self.safe_string(trade, 'orderId')
        action = self.safe_string(trade, 'action')
        type = self.safe_string(trade, 'tradeType')
        ePrice = self.safe_string(trade, 'entrustPrice')
        filled = self.safe_string(trade, 'filledVolume')
        avgFilledPrice = self.safe_string(trade, 'avgFilledPrice')
        entrustTm = self.safe_string(trade, 'entrustTm')
        timestamp = self.parse_date(entrustTm)
        profit = self.safe_string(trade, 'profit')
        commission = self.safe_string(trade, 'commission')
        status = self.safe_string(trade, 'orderStatus')
        isClose = False
        if action == 'Close':
            isClose = True
        side = None
        if rawSide == 'Bid':
            side = 'buy'
        else:
            side = 'sell'
        takerOrMaker = None
        tradeType = self.safe_string(trade, 'tradeType')
        if tradeType == 'Market':
            takerOrMaker = 'taker'
        else:
            takerOrMaker = 'maker'
        cost = 0.00045
        if takerOrMaker == 'taker':
            cost = 0.00075
        return self.safe_order({
            'info': trade,
            'id': id,
            'symbol': symbol,
            'side': side,
            'type': type,
            'filled': filled,
            'amount': filled,
            'average': avgFilledPrice,
            'takerOrMaker': takerOrMaker,
            'price': ePrice,
            'profit': profit,
            'fees': commission,
            'status': status,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'isClose': isClose,
            'fee': {
                'currency': market['quote'],
                'cost': cost,
            },
        })

    def create_order(self, symbol, type, side, amount, price=None, params={}):
        """
        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float|None price: the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict params: extra parameters specific to the paymium api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        # quick order:
        #
        # BTC/USDT:USDT
        # limit
        # buy
        # 4.0
        # 29116.0
        # {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        #
        # limit order:
        #
        # BTC/USDT:USDT
        # limit
        # buy
        # 4.0
        # 28520.0
        # {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        #
        # no post = 'timeInForce': 'GTC',
        #
        # SL
        #
        # BTC/USDT:USDT
        # stop
        # sell
        # 20.0
        # None
        # {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        #
        # TP
        #
        # BTC/USDT:USDT
        # stop
        # sell
        # 20.0
        # None
        # {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        #
        # LIMIT TP
        #
        # BTC/USDT:USDT
        # stopLimit
        # sell
        # 4.0
        # 33000.0
        # {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        self.load_markets()
        market = self.market(symbol)
        #
        triggerPrice = self.safe_value_2(params, 'stopPrice', 'triggerPrice')
        triggerType = self.safe_value_2(params, 'trigger', 'workingType')
        # isTriggerOrder = triggerPrice is not None
        isStopLossOrder = None
        isTakeProfitOrder = None
        reduceOnly = self.safe_value_2(params, 'close', 'reduceOnly', False)
        basePrice = self.safe_value(params, 'basePrice')
        positionSide = None
        if not reduceOnly:
            if side == 'buy':
                positionSide = 'LONG'
            else:
                positionSide = 'SHORT'
        else:
            if side == 'buy':
                positionSide = 'SHORT'
            else:
                positionSide = 'LONG'
        if triggerPrice is not None and basePrice is not None:
            # triggerOrder is NOT stopOrder
            # type = 'market'
            if reduceOnly:
                if side == 'buy':
                    if triggerPrice > basePrice:
                        isStopLossOrder = True
                    else:
                        isTakeProfitOrder = True
                else:
                    if triggerPrice < basePrice:
                        isStopLossOrder = True
                    else:
                        isTakeProfitOrder = True
            else:
                if side == 'buy':
                    if triggerPrice < basePrice:
                        isStopLossOrder = True
                    else:
                        isTakeProfitOrder = True
                else:
                    if triggerPrice > basePrice:
                        isStopLossOrder = True
                    else:
                        isTakeProfitOrder = True
        #
        convertedType = type.upper()
        if type == 'stop':
            if isTakeProfitOrder:
                convertedType = 'TRIGGER_MARKET'
            elif isStopLossOrder:
                convertedType = 'TRIGGER_MARKET'
            else:
                raise ArgumentsRequired('unknown order direction for TP/SL')
        if type == 'stopLimit':
            convertedType = 'TRIGGER_LIMIT'
        convertedSide = side.upper()
        request = {
            'symbol': market['id'],
            'type': convertedType,
            'side': convertedSide,
            'quantity': amount,
            'positionSide': positionSide,
        }
        if type == 'stop' or type == 'stopLimit':
            triggerBy = 'MARK_PRICE'
            if triggerType == 'Index':
                triggerBy = 'INDEX_PRICE'
            elif triggerType == 'Last':
                triggerBy = 'CONTRACT_PRICE'
            request['workingType'] = triggerBy
        if triggerPrice is not None:
            request['stopPrice'] = self.price_to_precision(symbol, triggerPrice)
            if convertedType == 'TRIGGER_LIMIT':
                request['price'] = self.price_to_precision(symbol, price)
        elif triggerPrice is None and convertedType == 'TRIGGER_LIMIT':
            request['price'] = basePrice
            request['stopPrice'] = basePrice
        elif (type == 'limit' or type == 'stopLimit') and (triggerPrice is None):
            request['price'] = self.price_to_precision(symbol, price)
        isMarketOrder = type == 'market'
        exchangeSpecificParam = self.safe_string_2(params, 'force', 'timeInForce')
        postOnly = self.is_post_only(isMarketOrder, exchangeSpecificParam == 'PO', params)
        if postOnly:
            request['timeInForce'] = 'PostOnly'
        # response = self.swap2OpenApiPrivatePostSwapV2TradeOrder(self.extend(request, params))
        response = self.swap2OpenApiPrivatePostSwapV2TradeOrder(request)
        # console.log('response', response)
        data = self.safe_value(response, 'data')
        order = self.safe_value(data, 'order')
        # parsedOrder = self.parse_order(order, market)
        # patchedOrder = self.extend(parsedOrder, params)
        # patchedOrder = self.extend(patchedOrder, {
        #     'price': price,
        #     'amount': amount,
        #     'side': side,
        #     'type': type,
        # })
        return self.parse_order(order, market)

    def cancel_all_orders(self, symbol=None, params={}):
        """
        cancel all open orders in a market
        see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#cancelall
        :param str symbol: unified market symbol of the market to cancel orders in
        :param dict params: extra parameters specific to the phemex api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelAllOrders() requires a symbol argument')
        self.load_markets()
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = self.swap2OpenApiPrivateDeleteSwapV2TradeAllOpenOrders(request)
        return response

    def cancel_order(self, id, symbol=None, params={}):
        """
        cancels an open order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict params: extra parameters specific to the bitget api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'orderId': id,
        }
        response = self.swap2OpenApiPrivateDeleteSwapV2TradeOrder(request)
        return self.parse_order(response, market)

    def fetch_positions(self, symbols=None, params={}):
        """
        fetch all open positions
        :param [str]|None symbols: list of unified market symbols
        :param dict params: extra parameters specific to the bybit api endpoint
        :returns [dict]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        response = self.swapV1PrivatePostUserGetPositions()
        data = self.safe_value(response, 'data', {})
        positions = self.safe_value(data, 'positions', [])
        result = []
        for i in range(0, len(positions)):
            result.append(self.parse_position(positions[i]))
        return result

    def parse_position(self, position, market=None):
        #
        #
        # {
        #     "positionId": "1650546544279240704",
        #     "symbol": "BTC-USDT",
        #     "currency": "",
        #     "volume": 0.001,
        #     "availableVolume": 0.001,
        #     "positionSide": "short",
        #     "marginMode": "cross",
        #     "avgPrice": 27124.5,
        #     "liquidatedPrice": 0.0,
        #     "margin": 2.9386,
        #     "leverage": 5.0,
        #     "pnlRate": -45.83,
        #     "unrealisedPNL": -2.4863,
        #     "realisedPNL": 0.0126
        # }
        #
        marketId = self.safe_string(position, 'symbol')
        market = self.safe_market(marketId, market)
        timestamp = self.safe_integer(position, 'cTime')
        marginMode = self.safe_string_lower(position, 'marginMode')
        hedged = True
        side = self.safe_string_lower(position, 'positionSide')
        contracts = self.safe_float(position, 'volume')
        liquidation = self.safe_number(position, 'liquidatedPrice')
        if side == 'short':
            contracts = -1 * contracts
        if liquidation == 0:
            liquidation = None
        initialMargin = self.safe_number(position, 'margin')
        return {
            'info': position,
            'id': market['symbol'] + ':' + side,
            'symbol': market['symbol'],
            'notional': None,
            'marginMode': marginMode,
            'liquidationPrice': liquidation,
            'entryPrice': self.safe_number(position, 'avgPrice'),
            'unrealizedPnl': self.safe_number_2(position, 'unrealisedPNL', 'unrealizedPL'),
            'realizedPnl': self.safe_number_2(position, 'realisedPNL', 'realizedPL'),
            'percentage': None,
            'contracts': contracts,
            'contractSize': self.safe_number(market, 'contractSize'),
            'side': side,
            'hedged': hedged,
            'timestamp': timestamp,
            'markPrice': self.safe_number(position, 'markPrice'),
            'datetime': self.iso8601(timestamp),
            'maintenanceMargin': None,
            'maintenanceMarginPercentage': None,
            'collateral': self.safe_number(position, 'margin'),
            'initialMargin': initialMargin,
            'initialMarginPercentage': None,
            'leverage': self.safe_number(position, 'leverage'),
            'marginRatio': None,
        }

    def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=None, params={}):
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        see https://bybit-exchange.github.io/docs/v5/market/kline
        see https://bybit-exchange.github.io/docs/v5/market/mark-kline
        see https://bybit-exchange.github.io/docs/v5/market/index-kline
        see https://bybit-exchange.github.io/docs/v5/market/preimum-index-kline
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int|None since: timestamp in ms of the earliest candle to fetch
        :param int|None limit: the maximum amount of candles to fetch
        :param dict params: extra parameters specific to the bybit api endpoint
        :returns [[int]]: A list of candles ordered, open, high, low, close, volume
        """
        self.check_required_symbol('fetchOHLCV', symbol)
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        if limit is None:
            limit = 200  # default is 340 when requested with `since`
        if since is not None:
            request['startTime'] = since
        klineType = self.safe_string(self.timeframes, timeframe, timeframe)
        request['interval'] = timeframe
        if limit is not None:
            # request['limit'] = limit  # max 1000, default 1000
            if klineType == '1':
                request['endTime'] = since + limit * 60 * 1000
            elif klineType == '3':
                request['endTime'] = since + limit * 3 * 60 * 1000
            elif klineType == '5':
                request['endTime'] = since + limit * 5 * 60 * 1000
            elif klineType == '15':
                request['endTime'] = since + limit * 15 * 60 * 1000
            elif klineType == '30':
                request['endTime'] = since + limit * 30 * 60 * 1000
            elif klineType == '60':
                request['endTime'] = since + limit * 60 * 60 * 1000
            elif klineType == '120':
                request['endTime'] = since + limit * 120 * 60 * 1000
            elif klineType == '240':
                request['endTime'] = since + limit * 240 * 60 * 1000
            elif klineType == '360':
                request['endTime'] = since + limit * 360 * 60 * 1000
            elif klineType == '720':
                request['endTime'] = since + limit * 720 * 60 * 1000
            elif klineType == '1D':
                request['endTime'] = since + limit * 24 * 60 * 60 * 1000
            elif klineType == '1W':
                request['endTime'] = since + limit * 7 * 24 * 60 * 60 * 1000
            elif klineType == '1M':
                request['endTime'] = since + limit * 30 * 24 * 60 * 60 * 1000
            else:
                request['endTime'] = since + limit * 60 * 1000
        # print('==========')
        # print('fetchOHLCV', symbol, timeframe, since, limit, params, klineType)
        # print('now', +new Date(), new Date())
        # print('startTs', +new Date(request['startTime']), new Date(request['startTime']))
        # print('endTs', +new Date(request['endTime']), new Date(request['endTime']))
        response = self.swap2OpenApiPublicGetSwapV2QuoteKlines(self.extend(request, params))
        # print('lastCandleTs', len(response.data[response.data) - +new Date(len(+response.data[response.data) - 1].time) if 1] else 'none', len(response.data[response.data) - 1] ? new Date(len(+response.data[response.data) - 1].time) : 'none')
        # print('response', response)
        ohlcvs = self.safe_value(response, 'data', [])
        if len(ohlcvs) > 0:
            # BEGIN Patching last candle
            lastRequest = self.omit(request, ['startTime', 'endTime'])
            lastCandleResponse = self.swap2OpenApiPublicGetSwapV2QuoteKlines(self.extend(lastRequest, params))
            lastOhlcv = self.safe_value(lastCandleResponse, 'data', {})
            lastOhlcvTime = self.safe_integer(lastOhlcv, 'time')
            # console.log('loht', lastOhlcvTime, new Date(lastOhlcvTime))
            lastOhlcvFromArrayTime = self.safe_integer(ohlcvs[-1:], 'time')
            if lastOhlcvTime >= lastOhlcvFromArrayTime:
                ohlcvs.append(lastOhlcv)
            # END Patching last candle
        return self.parse_ohlcvs(ohlcvs, market, timeframe, since, limit)

    def parse_ohlcvs(self, ohlcvs, market=None, timeframe='1m', since=None, limit=None):
        results = []
        for i in range(0, len(ohlcvs)):
            results.append(self.parse_ohlcv(ohlcvs[i], market))
        sorted = self.sort_by(results, 0)
        tail = (since is None)
        return self.filter_by_since_limit(sorted, since, limit, 0, tail)

    def parse_ohlcv(self, ohlcv, market=None):
        return [
            self.safe_integer(ohlcv, 'time'),  # timestamp
            self.safe_number(ohlcv, 'open'),  # open
            self.safe_number(ohlcv, 'high'),  # high
            self.safe_number(ohlcv, 'low'),  # low
            self.safe_number(ohlcv, 'close'),  # close
            self.safe_number(ohlcv, 'volume'),  # volume
        ]

    def parse_order_status(self, status):
        statuses = {
            'pending': 'open',
            'new': 'open',
            'partially_filled': 'open',
            'filled': 'closed',
            'canceled': 'canceled',
            'pending_cancel': 'canceling',  # currently unused
            'rejected': 'rejected',
            'expired': 'expired',
        }
        return self.safe_string(statuses, status, status)

    def parse_stop_trigger(self, status):
        statuses = {
            'market_price': 'mark',
            'mark_price': 'mark',
            'fill_price': 'last',
            'contract_price': 'last',
            'index_price': 'index',
        }
        return self.safe_string(statuses, status, status)

    def parse_order_type(self, type):
        types = {
            'limit': 'limit',
            'market': 'market',
            'stop_market': 'stop',
            'take_profit_market': 'stop',
            'take_profit_limit': 'stopLimit',
            'trigger_limit': 'stopLimit',
            'trigger_market': 'stop',
        }
        return self.safe_string_lower(types, type, type)

    def parse_order(self, order, market=None):
        # {
        #     "code": 0,
        #     "msg": "",
        #     "data": {
        #       "orders": [
        #         {
        #           "symbol": "BTC-USDT",
        #           "orderId": 1651880171474731000,
        #           "side": "SELL",
        #           "positionSide": "LONG",
        #           "type": "TAKE_PROFIT_MARKET",
        #           "origQty": "0.0020",
        #           "price": "0.0",
        #           "executedQty": "0.0000",
        #           "avgPrice": "0.0",
        #           "cumQuote": "0",
        #           "stopPrice": "35000.0",
        #           "profit": "0.0",
        #           "commission": "0.0",
        #           "status": "NEW",
        #           "time": 1682673897986,
        #           "updateTime": 1682673897986
        #         },
        #         {
        #           "symbol": "BTC-USDT",
        #           "orderId": 1651880171445371000,
        #           "side": "SELL",
        #           "positionSide": "LONG",
        #           "type": "STOP_MARKET",
        #           "origQty": "0.0020",
        #           "price": "0.0",
        #           "executedQty": "0.0000",
        #           "avgPrice": "28259.0",
        #           "cumQuote": "0",
        #           "stopPrice": "27000.0",
        #           "profit": "0.0",
        #           "commission": "0.0",
        #           "status": "NEW",
        #           "time": 1682673897979,
        #           "updateTime": 1682673897979
        #         },
        #         {
        #           "symbol": "BTC-USDT",
        #           "orderId": 1651287406772699100,
        #           "side": "BUY",
        #           "positionSide": "LONG",
        #           "type": "LIMIT",
        #           "origQty": "0.0001",
        #           "price": "25000.0",
        #           "executedQty": "0.0000",
        #           "avgPrice": "0.0",
        #           "cumQuote": "0",
        #           "stopPrice": "",
        #           "profit": "0.0",
        #           "commission": "0.0",
        #           "status": "PENDING",
        #           "time": 1682532572000,
        #           "updateTime": 1682532571000
        #         },
        #         {
        #           "symbol": "BTC-USDT",
        #           "orderId": 1651006482122227700,
        #           "side": "BUY",
        #           "positionSide": "LONG",
        #           "type": "LIMIT",
        #           "origQty": "0.0001",
        #           "price": "25000.0",
        #           "executedQty": "0.0000",
        #           "avgPrice": "0.0",
        #           "cumQuote": "0",
        #           "stopPrice": "",
        #           "profit": "0.0",
        #           "commission": "0.0",
        #           "status": "PENDING",
        #           "time": 1682465594000,
        #           "updateTime": 1682465594000
        #         }
        #       ]
        #     }
        #   }
        marketId = self.safe_string(order, 'symbol')
        market = self.safe_market(marketId)
        symbol = market['symbol']
        id = self.safe_string(order, 'orderId')
        price = self.safe_string(order, 'price')
        amount = self.safe_float(order, 'origQty')
        filled = self.safe_float(order, 'executedQty')
        cost = self.safe_string(order, 'executedQty')
        average = self.safe_string(order, 'avgPrice')
        type = self.parse_order_type(self.safe_string_lower(order, 'type'))
        timestamp = self.safe_integer(order, 'time')
        rawStopTrigger = self.safe_string_lower_2(order, 'trigger', 'workingType')
        trigger = self.parse_stop_trigger(rawStopTrigger)
        side = self.safe_string_lower(order, 'side')
        positionSide = self.safe_string_lower(order, 'positionSide')
        reduceOnly = False
        if side == 'buy':
            if positionSide == 'long':
                reduceOnly = False
            else:
                reduceOnly = True
        else:
            if positionSide == 'long':
                reduceOnly = True
            else:
                reduceOnly = False
        close = reduceOnly
        # order type LIMIT, MARKET, STOP_MARKET, TAKE_PROFIT_MARKET, TRIGGER_LIMIT, TRIGGER_MARKET
        # if rawStopTrigger:
        #     if type == 'market':
        #         type = 'stop'
        #     else:
        #         type = 'stopLimit'
        #     }
        # else:
        #     if type == 'market':
        #         type = 'market'
        #     else:
        #         type = 'limit'
        #     }
        # }
        clientOrderId = self.safe_string(order, 'orderId')
        fee = self.safe_string(order, 'comission')
        rawStatus = self.safe_string_lower(order, 'status')
        status = self.parse_order_status(rawStatus)
        lastTradeTimestamp = self.safe_integer(order, 'updateTime')
        timeInForce = self.safe_string(order, 'timeInForce')
        postOnly = timeInForce == 'PostOnly'
        stopPrice = self.safe_number(order, 'stopPrice')
        return self.safe_order({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': 'GTC',
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'average': average,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': None,
            'status': status,
            'fee': fee,
            'trades': None,
            'reduceOnly': reduceOnly,  # TEALSTREET
            'close': close,  # TEALSTREET
            'trigger': trigger,  # TEALSTREET
        }, market)

    def fetch_open_orders_v2(self, symbol=None, since=None, limit=None, params={}):
        """
        fetch all unfilled currently open orders
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch open orders for
        :param int|None limit: the maximum number of  open orders structures to retrieve
        :param dict params: extra parameters specific to the bybit api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        response = self.swap2OpenApiPrivateGetSwapV2TradeOpenOrders()
        data = self.safe_value(response, 'data', {})
        orders = self.safe_value(data, 'orders', [])
        result = []
        for i in range(0, len(orders)):
            result.append(self.parse_order(orders[i]))
        return result

    def fetch_orders(self, symbol=None, since=None, limit=None, params={}):
        return self.fetch_open_orders_v2(symbol, since, limit, params)

    def sign(self, path, section='public', method='GET', params={}, headers=None, body=None):
        type = section[0]
        version = section[1]
        access = section[2]
        rawPath = path
        url = self.implode_hostname(self.urls['api'][type])
        url += '/' + version + '/' + path
        path = self.implode_params(path, params)
        params = self.omit(params, self.extract_params(path))
        params = self.keysort(params)
        if access == 'private':
            self.check_required_credentials()
            isOpenApi = url.find('/v2/') >= 0
            isUserDataStreamEp = url.find('userDataStream') >= 0
            if isOpenApi or isUserDataStreamEp:
                params = self.extend(params, {
                    'timestamp': self.milliseconds() - 0,
                })
                params = self.keysort(params)
                paramString = self.rawencode(params)
                signature = self.hmac(self.encode(paramString), self.encode(self.secret), hashlib.sha256)
                params = self.extend(params, {
                    'signature': signature,
                })
                headers = {
                    'X-BX-APIKEY': self.apiKey,
                }
            else:
                params = self.extend(params, {
                    'apiKey': self.apiKey,
                    'timestamp': self.milliseconds() - 0,
                })
                params = self.keysort(params)
                # ACTUAL SIGNATURE GENERATION
                paramString = self.rawencode(params)
                originString = method + '/api/' + version + '/' + rawPath + paramString
                signature = self.hmac(self.encode(originString), self.encode(self.secret), hashlib.sha256, 'base64')
                # ACTUAL SIGNATURE GENERATION
                params = self.extend(params, {
                    'sign': signature,
                })
        if params:
            url += '?' + self.urlencode(params)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if not response:
            return  # fallback to default error handler
        errorCode = self.safe_integer(response, 'code')
        # in theory 80012 is Service Unavailable, but returned on lev charges :/
        if errorCode is not None and errorCode > 0 and errorCode != 80012:
            raise ExchangeError(self.id + ' ' + self.json(response))
