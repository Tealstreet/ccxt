# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
import hashlib
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.errors import AuthenticationError
from ccxt.base.decimal_to_precision import TICK_SIZE
from ccxt.base.precise import Precise


class blofin(Exchange):

    def describe(self):
        return self.deep_extend(super(blofin, self).describe(), {
            'id': 'blofin',
            'name': 'Blofin',
            'countries': ['KY'],  # Cayman Islands
            'rateLimit': 100,
            'version': 'v1',
            'certified': False,
            'pro': True,
            'hostname': 'blofin.com',
            'has': {
                'CORS': None,
                'spot': False,
                'margin': False,
                'swap': True,
                'future': False,
                'option': False,
                'addMargin': False,
                'borrowMargin': False,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'cancelWithdraw': False,  # exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs: https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                'createDepositAddress': False,
                'createMarketOrder': False,
                'createOrder': True,
                'createReduceOnlyOrder': True,
                'createStopLimitOrder': False,
                'createStopMarketOrder': False,
                'createStopOrder': False,
                'fetchAccounts': True,
                'fetchBalance': True,
                'fetchCanceledOrders': False,
                'fetchClosedOrder': False,
                'fetchClosedOrders': False,
                'fetchCurrencies': True,
                'fetchDepositAddress': False,
                'fetchDeposits': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchLedger': True,
                'fetchLeverage': True,
                'fetchMarginMode': False,
                'fetchMarkets': True,
                'fetchMarkOHLCV': False,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrder': False,
                'fetchOpenOrders': False,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchOrderTrades': True,
                'fetchPosition': True,
                'fetchPositionMode': False,
                'fetchPositions': True,
                'fetchPremiumIndexOHLCV': False,
                'fetchStatus': False,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': False,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransactions': False,
                'fetchTransfers': False,
                'fetchWithdrawals': False,
                'reduceMargin': False,
                'repayMargin': False,
                'setLeverage': True,
                'setMargin': False,
                'transfer': False,
                'withdraw': False,
            },
            'timeframes': {
                '1m': '1',
                '3m': '3',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '2h',
                '4h': '4h',
                '8h': '8h',
                '12h': '12h',
                '1d': '1D',
                '3d': '3D',
                '1w': '1W',
                '1M': '1M',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
                'api': {
                    'rest': 'https://openapi.blofin.com',
                },
                'www': 'https://blofin.com/',
                'doc': [
                    'https://docs.blofin.com/',
                ],
            },
            'api': {
                'v1': {
                    'public': {
                        'get': {
                            'market/instruments': 1,
                            'market/tickers': 1,
                        },
                    },
                    'private': {
                        'get': {
                            'account/leverage-info': 1,
                            # 'client/token': 1,
                            # 'order/{oid}': 1,
                            # 'client/order/{client_order_id}': 1,
                            # 'orders': 1,
                            # 'orderbook/{symbol}': 1,
                            # 'client/trade/{tid}': 1,
                            # 'order/{oid}/trades': 1,
                            # 'client/trades': 1,
                            # 'client/info': 60,
                            # 'asset/deposit': 10,
                            # 'asset/history': 60,
                            # 'sub_account/all': 60,
                            # 'sub_account/assets': 60,
                            # 'token_interest': 60,
                            # 'token_interest/{token}': 60,
                            # 'interest/history': 60,
                            # 'interest/repay': 60,
                            # 'funding_fee/history': 30,
                            # 'positions': 3.33,  # 30 requests per 10 seconds
                            # 'position/{symbol}': 3.33,
                        },
                        'post': {
                            'order': 5,  # 2 requests per 1 second per symbol
                            'asset/main_sub_transfer': 30,  # 20 requests per 60 seconds
                            'asset/withdraw': 30,  # implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#token-withdraw
                            'interest/repay': 60,
                            'client/account_mode': 120,
                            'client/leverage': 120,
                        },
                        'delete': {
                            'order': 1,
                            'client/order': 1,
                            'orders': 1,
                            'asset/withdraw': 120,  # implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                        },
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': True,
                    'percentage': True,
                    'maker': self.parse_number('0.0002'),
                    'taker': self.parse_number('0.0005'),
                },
            },
            'options': {
                'createMarketBuyOrderRequiresPrice': True,
                # these network aliases require manual mapping here
                'network-aliases-for-tokens': {
                    'HT': 'ERC20',
                    'OMG': 'ERC20',
                    'UATOM': 'ATOM',
                    'ZRX': 'ZRX',
                },
                'networks': {
                    'TRX': 'TRON',
                    'TRC20': 'TRON',
                    'ERC20': 'ETH',
                    'BEP20': 'BSC',
                },
                # override defaultNetworkCodePriorities for a specific currency
                'defaultNetworkCodeForCurrencies': {
                    # 'USDT': 'TRC20',
                    # 'BTC': 'BTC',
                },
                'transfer': {
                    'fillResponseFromRequest': True,
                },
                'brokerId': 'ab82cb09-cfec-4473-80a3-b740779d0644',
            },
            'commonCurrencies': {},
            'exceptions': {
                'exact': {
                    '-1000': ExchangeError,  # {"code": -1000,  "message": "An unknown error occurred while processing the request"}
                    '-1001': AuthenticationError,  # {"code": -1001,  "message": "The api key or secret is in wrong format"}
                    '-1002': AuthenticationError,  # {"code": -1002,  "message": "API key or secret is invalid, it may because key have insufficient permission or the key is expired/revoked."}
                    '-1003': RateLimitExceeded,  # {"code": -1003,  "message": "Rate limit exceed."}
                    '-1004': BadRequest,  # {"code": -1004,  "message": "An unknown parameter was sent."}
                    '-1005': BadRequest,  # {"code": -1005,  "message": "Some parameters are in wrong format for api."}
                    '-1006': BadRequest,  # {"code": -1006,  "message": "The data is not found in server."}
                    '-1007': BadRequest,  # {"code": -1007,  "message": "The data is already exists or your request is duplicated."}
                    '-1008': InvalidOrder,  # {"code": -1008,  "message": "The quantity of settlement is too high than you can request."}
                    '-1009': BadRequest,  # {"code": -1009,  "message": "Can not request withdrawal settlement, you need to deposit other arrears first."}
                    '-1011': ExchangeError,  # {"code": -1011,  "message": "Can not place/cancel orders, it may because internal network error. Please try again in a few seconds."}
                    '-1012': BadRequest,  # {"code": -1012,  "message": "Amount is required for buy market orders when margin disabled."}  The place/cancel order request is rejected by internal module, it may because the account is in liquidation or other internal errors. Please try again in a few seconds."}
                    '-1101': InvalidOrder,  # {"code": -1101,  "message": "The risk exposure for client is too high, it may cause by sending too big order or the leverage is too low. please refer to client info to check the current exposure."}
                    '-1102': InvalidOrder,  # {"code": -1102,  "message": "The order value(price * size) is too small."}
                    '-1103': InvalidOrder,  # {"code": -1103,  "message": "The order price is not following the tick size rule for the symbol."}
                    '-1104': InvalidOrder,  # {"code": -1104,  "message": "The order quantity is not following the step size rule for the symbol."}
                    '-1105': InvalidOrder,  # {"code": -1105,  "message": "Price is X% too high or X% too low from the mid price."}
                },
                'broad': {
                    'symbol must not be blank': BadRequest,  # when sending 'cancelOrder' without symbol [-1005]
                    'The token is not supported': BadRequest,  # when getting incorrect token's deposit address [-1005]
                    'Your order and symbol are not valid or already canceled': BadRequest,  # actual response whensending 'cancelOrder' for already canceled id [-1006]
                    'Insufficient WOO. Please enable margin trading for leverage trading': BadRequest,  # when selling insufficent token [-1012]
                },
            },
            'precisionMode': TICK_SIZE,
        })

    async def fetch_markets(self, params={}):
        response = await self.v1PublicGetMarketInstruments(params)
        data = self.safe_value(response, 'data', [])
        return self.parse_markets(data)

    def parse_markets(self, markets):
        result = []
        for i in range(0, len(markets)):
            result.append(self.parse_market(markets[i]))
        return result

    def parse_market(self, market):
        id = self.safe_string(market, 'instId')
        type = 'future'
        contract = True
        baseId = self.safe_string(market, 'baseCurrency')
        quoteId = self.safe_string(market, 'quoteCurrency')
        contactType = self.safe_string(market, 'contractType')
        settleId = self.safe_string_2(market, 'settleCcy', 'quoteCurrency')  # safe to assume that on blofin quote == settle for linear markets -- rayana
        settle = self.safe_currency_code(settleId)
        base = self.safe_currency_code(baseId)
        quote = self.safe_currency_code(quoteId)
        symbol = base + '/' + quote
        expiry = None
        if contract:
            symbol = symbol + ':' + settle
            expiry = self.safe_integer(market, 'expireTime')
        tickSize = self.safe_string(market, 'tickSize')
        minAmountString = self.safe_string(market, 'minSize')
        minAmount = self.parse_number(minAmountString)
        fees = self.safe_value_2(self.fees, type, 'trading', {})
        precisionPrice = self.parse_number(tickSize)
        maxLeverage = self.safe_string(market, 'maxLeverage', '1')
        maxLeverage = Precise.string_max(maxLeverage, '1')
        return self.extend(fees, {
            'id': id,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': settleId,
            'type': type,
            'spot': False,
            'margin': False,
            'swap': False,
            'future': True,
            'option': False,
            'active': True,
            'contract': contract,
            'linear': contactType == 'linear',
            'inverse': contactType == 'inverse',
            'contractSize': self.safe_number(market, 'contractValue') if contract else None,
            'expiry': expiry,
            'expiryDatetime': self.iso8601(expiry),
            'strike': None,
            'optionType': None,
            'precision': {
                'amount': self.safe_number(market, 'lotSize'),
                'price': precisionPrice,
            },
            'limits': {
                'leverage': {
                    'min': self.parse_number('1'),
                    'max': self.parse_number(maxLeverage),
                },
                'amount': {
                    'min': minAmount,
                    'max': None,
                },
                'price': {
                    'min': precisionPrice,
                    'max': None,
                },
                'cost': {
                    'min': None,
                    'max': None,
                },
            },
            'info': market,
        })

    def parse_ticker(self, ticker, market=None):
        #
        #     {
        #         "instType": "SPOT",
        #         "instId": "ETH-BTC",
        #         "last": "0.07319",
        #         "lastSz": "0.044378",
        #         "askPx": "0.07322",
        #         "askSz": "4.2",
        #         "bidPx": "0.0732",
        #         "bidSz": "6.050058",
        #         "open24h": "0.07801",
        #         "high24h": "0.07975",
        #         "low24h": "0.06019",
        #         "volCcy24h": "11788.887619",
        #         "vol24h": "167493.829229",
        #         "ts": "1621440583784",
        #         "sodUtc0": "0.07872",
        #         "sodUtc8": "0.07345"
        #     }
        #
        timestamp = self.safe_integer(ticker, 'ts')
        marketId = self.safe_string(ticker, 'instId')
        market = self.safe_market(marketId, market, '-')
        symbol = market['symbol']
        last = self.safe_string(ticker, 'last')
        open = self.safe_string(ticker, 'open24h')
        spot = self.safe_value(market, 'spot', False)
        quoteVolume = self.safe_string(ticker, 'volCcy24h') if spot else None
        baseVolume = self.safe_string(ticker, 'vol24h')
        high = self.safe_string(ticker, 'high24h')
        low = self.safe_string(ticker, 'low24h')
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': self.safe_string(ticker, 'bidPx'),
            'bidVolume': self.safe_string(ticker, 'bidSz'),
            'ask': self.safe_string(ticker, 'askPx'),
            'askVolume': self.safe_string(ticker, 'askSz'),
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market)

    async def fetch_ticker(self, symbol, params={}):
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict params: extra parameters specific to the okx api endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        response = await self.v1PublicGetMarketTickers()
        data = self.safe_value(response, 'data', [])
        for i in range(0, len(data)):
            if data[i]['instId'] == market['id']:
                return self.parse_ticker(data[i], market)

    async def fetch_tickers_by_type(self, type, symbols=None, params={}):
        await self.load_markets()
        response = await self.v1PublicGetMarketTickers()
        tickers = self.safe_value(response, 'data', [])
        return self.parse_tickers(tickers, symbols)

    async def fetch_tickers(self, symbols=None, params={}):
        """
        fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        :param [str]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict params: extra parameters specific to the okx api endpoint
        :returns dict: a dictionary of `ticker structures <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        await self.load_markets()
        symbols = self.market_symbols(symbols)
        first = self.safe_string(symbols, 0)
        market = None
        if first is not None:
            market = self.market(first)
        type, query = self.handle_market_type_and_params('fetchTickers', market, params)
        return await self.fetch_tickers_by_type(type, symbols, query)

    async def fetch_trades(self, symbol, since=None, limit=None, params={}):
        """
        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int|None since: timestamp in ms of the earliest trade to fetch
        :param int|None limit: the maximum amount of trades to fetch
        :param dict params: extra parameters specific to the woo api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html?#public-trades>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchTrades() requires a symbol argument')
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        response = await self.v1PublicGetMarketTrades(self.extend(request, params))
        #
        # {
        #     success: True,
        #     rows: [
        #         {
        #             symbol: "SPOT_BTC_USDT",
        #             side: "SELL",
        #             executed_price: 46222.35,
        #             executed_quantity: 0.0012,
        #             executed_timestamp: "1641241162.329"
        #         },
        #         {
        #             symbol: "SPOT_BTC_USDT",
        #             side: "SELL",
        #             executed_price: 46222.35,
        #             executed_quantity: 0.0012,
        #             executed_timestamp: "1641241162.329"
        #         },
        #         {
        #             symbol: "SPOT_BTC_USDT",
        #             side: "BUY",
        #             executed_price: 46224.32,
        #             executed_quantity: 0.00039,
        #             executed_timestamp: "1641241162.287"
        #         },
        #         ...
        #      ]
        # }
        #
        resultResponse = self.safe_value(response, 'rows', {})
        return self.parse_trades(resultResponse, market, since, limit)

    def parse_trade(self, trade, market=None):
        #
        # public/market_trades
        #
        #     {
        #         symbol: "SPOT_BTC_USDT",
        #         side: "SELL",
        #         executed_price: 46222.35,
        #         executed_quantity: 0.0012,
        #         executed_timestamp: "1641241162.329"
        #     }
        #
        # fetchOrderTrades, fetchOrder
        #
        #     {
        #         id: '99119876',
        #         symbol: 'SPOT_WOO_USDT',
        #         fee: '0.0024',
        #         side: 'BUY',
        #         executed_timestamp: '1641481113.084',
        #         order_id: '87001234',
        #         order_tag: 'default', <-- self param only in "fetchOrderTrades"
        #         executed_price: '1',
        #         executed_quantity: '12',
        #         fee_asset: 'WOO',
        #         is_maker: '1'
        #     }
        #
        isFromFetchOrder = ('id' in trade)
        timestamp = self.safe_timestamp(trade, 'executed_timestamp')
        marketId = self.safe_string(trade, 'symbol')
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        price = self.safe_string(trade, 'executed_price')
        amount = self.safe_string(trade, 'executed_quantity')
        order_id = self.safe_string(trade, 'order_id')
        fee = self.parse_token_and_fee_temp(trade, 'fee_asset', 'fee')
        cost = Precise.string_mul(price, amount)
        side = self.safe_string_lower(trade, 'side')
        id = self.safe_string(trade, 'id')
        takerOrMaker = None
        if isFromFetchOrder:
            isMaker = self.safe_string(trade, 'is_maker') == '1'
            takerOrMaker = 'maker' if isMaker else 'taker'
        return self.safe_trade({
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'order': order_id,
            'takerOrMaker': takerOrMaker,
            'type': None,
            'fee': fee,
            'info': trade,
        }, market)

    def parse_token_and_fee_temp(self, item, feeTokenKey, feeAmountKey):
        feeCost = self.safe_string(item, feeAmountKey)
        fee = None
        if feeCost is not None:
            feeCurrencyId = self.safe_string(item, feeTokenKey)
            feeCurrencyCode = self.safe_currency_code(feeCurrencyId)
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            }
        return fee

    async def create_order(self, symbol, type, side, amount, price=None, params={}):
        """
        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float|None price: the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        # quick order:
        #
        # BTC/USDT:USDT
        # limit
        # buy
        # 4.0
        # 29116.0
        # {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        #
        # limit order:
        #
        # BTC/USDT:USDT
        # limit
        # buy
        # 4.0
        # 28520.0
        # {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        #
        # no post = 'timeInForce': 'GTC',
        #
        # SL
        #
        # BTC/USDT:USDT
        # stop
        # sell
        # 20.0
        # None
        # {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        #
        # TP
        #
        # BTC/USDT:USDT
        # stop
        # sell
        # 20.0
        # None
        # {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        #
        # LIMIT TP
        #
        # BTC/USDT:USDT
        # stopLimit
        # sell
        # 4.0
        # 33000.0
        # {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        reduceOnly = self.safe_value_2(params, 'reduceOnly', 'close')
        orderType = type.upper()
        if orderType == 'STOP' or orderType == 'STOPLIMIT':
            await self.load_markets()
            market = self.market(symbol)
            orderSide = side.upper()
            algoOrderType = 'MARKET'
            if orderType != 'STOP':
                algoOrderType = 'LIMIT'
            triggerPrice = self.safe_value_2(params, 'stopPrice', 'triggerPrice')
            request = {
                'symbol': market['id'],
                'algoType': 'STOP',
                'type': algoOrderType,
                'side': orderSide,
            }
            if reduceOnly:
                request['reduceOnly'] = reduceOnly
            if price is not None:
                request['price'] = self.price_to_precision(symbol, price)
            request['triggerPrice'] = triggerPrice
            request['quantity'] = self.amount_to_precision(symbol, amount)
            params = self.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce'])
            # response = await self.v3PrivatePostAlgoOrder(self.extend(request, params))
            brokerId = self.safe_string(self.options, 'brokerId')
            if brokerId is not None:
                request['brokerId'] = brokerId
            response = await self.v3PrivatePostAlgoOrder(request)
            # {
            #     success: True,
            #     timestamp: '1641383206.489',
            #     order_id: '86980774',
            #     order_type: 'LIMIT',
            #     order_price: '1',  # null for 'MARKET' order
            #     order_quantity: '12',  # null for 'MARKET' order
            #     order_amount: null,  # NOT-null for 'MARKET' order
            #     client_order_id: '0'
            # }
            # response -> data -> rows -> [0]
            data = self.safe_value(response, 'data')
            rows = self.safe_value(data, 'rows', [])
            # return self.extend(
            #     self.parse_order(rows[0], market),
            #     {'type': type}
            # )
            return self.extend(
                self.parse_order(rows[0], market),
                {'status': 'open'}
            )
        else:
            await self.load_markets()
            market = self.market(symbol)
            orderSide = side.upper()
            request = {
                'symbol': market['id'],
                'order_type': orderType,  # LIMIT/MARKET/IOC/FOK/POST_ONLY/ASK/BID
                'side': orderSide,
            }
            isMarket = orderType == 'MARKET'
            timeInForce = self.safe_string_lower(params, 'timeInForce')
            postOnly = self.is_post_only(isMarket, None, params)
            if postOnly:
                request['order_type'] = 'POST_ONLY'
            elif timeInForce == 'fok':
                request['order_type'] = 'FOK'
            elif timeInForce == 'ioc':
                request['order_type'] = 'IOC'
            if reduceOnly:
                request['reduce_only'] = reduceOnly
            if price is not None:
                request['order_price'] = self.price_to_precision(symbol, price)
            request['order_quantity'] = self.amount_to_precision(symbol, amount)
            clientOrderId = self.safe_string_2(params, 'clOrdID', 'clientOrderId')
            if clientOrderId is not None:
                request['client_order_id'] = clientOrderId
            brokerId = self.safe_string(self.options, 'brokerId')
            if brokerId is not None:
                request['broker_id'] = brokerId
            params = self.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce'])
            response = await self.v1PrivatePostOrder(self.extend(request, params))
            # {
            #     success: True,
            #     timestamp: '1641383206.489',
            #     order_id: '86980774',
            #     order_type: 'LIMIT',
            #     order_price: '1',  # null for 'MARKET' order
            #     order_quantity: '12',  # null for 'MARKET' order
            #     order_amount: null,  # NOT-null for 'MARKET' order
            #     client_order_id: '0'
            # }
            return self.extend(
                self.parse_order(response, market),
                {'type': type, 'status': 'open'}
            )

    async def edit_order(self, id, symbol, type, side, amount, price=None, params={}):
        """
        edit a trade order
        :param str id: order id
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float|None price: the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'oid': id,
            # 'quantity': self.amount_to_precision(symbol, amount),
            # 'price': self.price_to_precision(symbol, price),
        }
        if price is not None and type != 'stop':
            request['price'] = self.price_to_precision(symbol, price)
        triggerPrice = self.safe_value_2(params, 'stopPrice', 'triggerPrice')
        if triggerPrice is not None:
            request['triggerPrice'] = triggerPrice
        if amount is not None:
            request['quantity'] = self.amount_to_precision(symbol, amount)
        method = 'v3PrivatePutOrderOid'
        if self.maybe_algo_order_id(id):
            method = 'v3PrivatePutAlgoOrderOid'
        response = await getattr(self, method)(self.extend(request, params))
        #
        #     {
        #         "code": 0,
        #         "data": {
        #             "status": "string",
        #             "success": True
        #         },
        #         "message": "string",
        #         "success": True,
        #         "timestamp": 0
        #     }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_order(data, market)

    def maybe_algo_order_id(self, id):
        stringId = self.number_to_string(id)
        if len(stringId) < 9:
            return True
        return False

    async def cancel_order(self, id, symbol=None, params={}):
        """
        cancels an open order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        await self.load_markets()
        if self.maybe_algo_order_id(id):
            return self.cancel_algo_order(id, symbol, params)
        else:
            return self.cancel_regular_order(id, symbol, params)

    async def cancel_algo_order(self, id, symbol=None, params={}):
        request = {}
        request['oid'] = id
        market = None
        if symbol is not None:
            market = self.market(symbol)
        request['symbol'] = market['id']
        response = await self.v3PrivateDeleteAlgoOrderOid(self.extend(request, params))
        #
        # {success: True, status: 'CANCEL_SENT'}
        #
        extendParams = {'symbol': symbol}
        extendParams['id'] = id
        return self.extend(self.parse_order(response), extendParams)

    async def cancel_regular_order(self, id, symbol=None, params={}):
        request = {}
        clientOrderIdUnified = self.safe_string_2(params, 'clOrdID', 'clientOrderId')
        clientOrderIdExchangeSpecific = self.safe_string_2(params, 'client_order_id', clientOrderIdUnified)
        isByClientOrder = clientOrderIdExchangeSpecific is not None
        if isByClientOrder:
            request['client_order_id'] = clientOrderIdExchangeSpecific
            params = self.omit(params, ['clOrdID', 'clientOrderId', 'client_order_id'])
        else:
            request['order_id'] = id
        market = None
        if symbol is not None:
            market = self.market(symbol)
        request['symbol'] = market['id']
        response = await self.v1PrivateDeleteOrder(self.extend(request, params))
        #
        # {success: True, status: 'CANCEL_SENT'}
        #
        extendParams = {'symbol': symbol}
        if isByClientOrder:
            extendParams['client_order_id'] = clientOrderIdExchangeSpecific
        else:
            extendParams['id'] = id
        return self.extend(self.parse_order(response), extendParams)

    async def cancel_all_orders(self, symbol=None, params={}):
        """
        cancel all open orders in a market
        :param str|None symbol: unified market symbol
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: an list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' canelOrders() requires a symbol argument')
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.v1PrivateDeleteOrders(self.extend(request, params))
        await self.v3PrivateDeleteAlgoOrdersPending(self.extend(request, params))
        #
        #     {
        #         "success":true,
        #         "status":"CANCEL_ALL_SENT"
        #     }
        #
        return response

    async def fetch_order(self, id, symbol=None, params={}):
        """
        fetches information on an order made by the user
        :param str|None symbol: unified symbol of the market the order was made in
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        market = self.market(symbol) if (symbol is not None) else None
        request = {}
        clientOrderId = self.safe_string_2(params, 'clOrdID', 'clientOrderId')
        chosenSpotMethod = None
        if self.maybe_algo_order_id(id):
            chosenSpotMethod = 'v3PrivateDeleteAlgoOrderOid'
        elif clientOrderId:
            chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId'
            request['client_order_id'] = clientOrderId
        else:
            chosenSpotMethod = 'v1PrivateGetOrderOid'
            request['oid'] = id
        response = await getattr(self, chosenSpotMethod)(self.extend(request, params))
        #
        # {
        #     success: True,
        #     symbol: 'SPOT_WOO_USDT',
        #     status: 'FILLED',  # FILLED, NEW
        #     side: 'BUY',
        #     created_time: '1641480933.000',
        #     order_id: '87541111',
        #     order_tag: 'default',
        #     price: '1',
        #     type: 'LIMIT',
        #     quantity: '12',
        #     amount: null,
        #     visible: '12',
        #     executed: '12',  # or any partial amount
        #     total_fee: '0.0024',
        #     fee_asset: 'WOO',
        #     client_order_id: null,
        #     average_executed_price: '1',
        #     Transactions: [
        #       {
        #         id: '99111647',
        #         symbol: 'SPOT_WOO_USDT',
        #         fee: '0.0024',
        #         side: 'BUY',
        #         executed_timestamp: '1641482113.084',
        #         order_id: '87541111',
        #         executed_price: '1',
        #         executed_quantity: '12',
        #         fee_asset: 'WOO',
        #         is_maker: '1'
        #       }
        #     ]
        # }
        #
        return self.parse_order(response, market)

    async def fetch_orders(self, symbol=None, since=None, limit=None, params={}):
        """
        fetches information on multiple orders made by the user
        :param str|None symbol: unified market symbol of the market orders were made in
        :param int|None since: the earliest time in ms to fetch orders for
        :param int|None limit: the maximum number of  orde structures to retrieve
        :param dict params: extra parameters specific to the woo api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        if since is not None:
            request['start_t'] = since
        request['size'] = 500
        request['status'] = 'INCOMPLETE'
        ordersResponse = await self.v1PrivateGetOrders(self.extend(request, params))
        #
        #     {
        #         "success":true,
        #         "meta":{
        #             "total":1,
        #             "records_per_page":100,
        #             "current_page":1
        #         },
        #         "rows":[
        #             {
        #                 "symbol":"PERP_BTC_USDT",
        #                 "status":"FILLED",
        #                 "side":"SELL",
        #                 "created_time":"1611617776.000",
        #                 "updated_time":"1611617776.000",
        #                 "order_id":52121167,
        #                 "order_tag":"default",
        #                 "price":null,
        #                 "type":"MARKET",
        #                 "quantity":0.002,
        #                 "amount":null,
        #                 "visible":0,
        #                 "executed":0.002,
        #                 "total_fee":0.01732885,
        #                 "fee_asset":"USDT",
        #                 "client_order_id":null,
        #                 "average_executed_price":28881.41
        #             }
        #         ]
        #     }
        #
        ordersData = self.safe_value(ordersResponse, 'rows')
        total = 0
        algoOrdersRows = []
        for i in range(0, 50):
            request['size'] = 50
            request['page'] = i + 1
            algoOrdersResponse = await self.v3PrivateGetAlgoOrders(self.extend(request, params))
            algoOrdersData = self.safe_value(algoOrdersResponse, 'data')
            algoOrdersMeta = self.safe_value(algoOrdersData, 'meta')
            newRows = self.safe_value(algoOrdersData, 'rows')
            total = total + len(newRows)
            algoOrdersRows = self.array_concat(algoOrdersRows, newRows)
            knownTotal = self.safe_integer(algoOrdersMeta, 'total')
            if total >= knownTotal:
                break
        allOrdersData = self.array_concat(ordersData, algoOrdersRows)
        return self.parse_orders(allOrdersData, market, since, limit, params)

    def parse_time_in_force(self, timeInForce):
        timeInForces = {
            'ioc': 'IOC',
            'fok': 'FOK',
            'post_only': 'PO',
        }
        return self.safe_string(timeInForces, timeInForce, None)

    def parse_order_type(self, type, algoType=None):
        if algoType is not None:
            if algoType == 'take_profit':
                if type == 'market':
                    return 'stop'
                else:
                    return 'stopLimit'
        # LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE
        types = {
            'limit': 'limit',
            'market': 'market',
            'post_only': 'limit',
            'ioc': 'limit',
            'fok': 'limit',
            'liquidate': 'limit',
            # 'stop_market': 'stop',
            # 'take_profit_market': 'stop',
            # 'take_profit_limit': 'stopLimit',
            # 'trigger_limit': 'stopLimit',
            # 'trigger_market': 'stop',
        }
        return self.safe_string_lower(types, type, type)

    def parse_order(self, order, market=None):
        isAlgoOrder = 'algoType' in order
        if isAlgoOrder:
            return self.parse_algo_order(order, market)
        else:
            return self.parse_regular_order(order, market)

    def parse_regular_order(self, order, market=None):
        #
        # Possible input functions:
        # * createOrder
        # * cancelOrder
        # * fetchOrder
        # * fetchOrders
        # isFromFetchOrder = ('order_tag' in order); TO_DO
        timestamp = self.safe_timestamp_2(order, 'timestamp', 'created_time')
        orderId = self.safe_string_2(order, 'order_id', 'orderId')
        clientOrderId = self.safe_string_2(order, 'client_order_id', 'clientOrderId')  # Somehow, self always returns 0 for limit order
        marketId = self.safe_string(order, 'symbol')
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        price = self.safe_string_2(order, 'order_price', 'price')
        amount = self.safe_string_2(order, 'order_quantity', 'quantity')  # This is base amount
        cost = self.safe_string_2(order, 'order_amount', 'amount')  # This is quote amount
        orderType = self.parse_order_type(self.safe_string_lower_2(order, 'order_type', 'type'))
        status = self.safe_value(order, 'status')
        side = self.safe_string_lower(order, 'side')
        type = self.safe_string_upper(order, 'type')
        postOnly = type == 'POST_ONLY'
        filled = self.safe_value(order, 'executed')
        average = self.safe_string_2(order, 'average_executed_price', 'executedPrice')
        remaining = Precise.string_sub(cost, filled)
        fee = self.safe_value_2(order, 'total_fee', 'totalFee')
        feeCurrency = self.safe_string_2(order, 'fee_asset', 'feeAsset')
        transactions = self.safe_value(order, 'Transactions')
        return self.safe_order({
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'status': self.parse_order_status(status),
            'symbol': symbol,
            'type': orderType,
            'timeInForce': self.parse_time_in_force(orderType),
            'postOnly': postOnly,
            'reduceOnly': self.safe_value(order, 'reduce_only'),
            'side': side,
            'price': price,
            'stopPrice': None,
            'triggerPrice': None,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,  # TO_DO
            'cost': cost,
            'trades': transactions,
            'fee': {
                'cost': fee,
                'currency': feeCurrency,
            },
            'info': order,
        }, market)

    def parse_algo_order(self, order, market=None):
        #
        # Possible input functions:
        # * createOrder
        # * cancelOrder
        # * fetchOrder
        # * fetchOrders
        # isFromFetchOrder = ('order_tag' in order); TO_DO
        timestamp = self.safe_timestamp_2(order, 'timestamp', 'createdTime')
        orderId = self.safe_string(order, 'algoOrderId')
        clientOrderId = self.safe_string(order, 'clientOrderId')  # Somehow, self always returns 0 for limit order
        marketId = self.safe_string(order, 'symbol')
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        price = self.safe_string_2(order, 'price', 'triggerPrice')
        stopPrice = self.safe_string_2(order, 'triggerPrice', 'price')
        amount = self.safe_string_2(order, 'order_quantity', 'quantity')  # This is base amount
        cost = self.safe_string_2(order, 'order_amount', 'amount')  # This is quote amount
        orderType = self.parse_order_type(self.safe_string_lower_2(order, 'order_type', 'type'), self.safe_string_lower(order, 'algoType'))
        tsOrderType = orderType
        if orderType == 'market':
            tsOrderType = 'stop'
        status = self.safe_value(order, 'algoStatus')
        side = self.safe_string_lower(order, 'side')
        filled = self.safe_value(order, 'executed')
        average = self.safe_string(order, 'average_executed_price')
        remaining = Precise.string_sub(cost, filled)
        fee = self.safe_value(order, 'totalFee')
        feeCurrency = self.safe_string(order, 'feeAsset')
        transactions = self.safe_value(order, 'Transactions')
        return self.safe_order({
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'status': self.parse_order_status(status),
            'symbol': symbol,
            'type': tsOrderType,
            'timeInForce': self.parse_time_in_force(orderType),
            'postOnly': None,  # TO_DO
            'reduceOnly': self.safe_value(order, 'reduceOnly'),
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': None,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,  # TO_DO
            'cost': cost,
            'trades': transactions,
            'fee': {
                'cost': fee,
                'currency': feeCurrency,
            },
            'info': order,
            # TEALSTREET
            'reduce': self.safe_value(order, 'reduceOnly'),
            'trigger': 'Mark',
            # we don't know self from api
            # 'close': self.safe_value(order, 'closeOnTrigger'),
            # TEALSTREET
        }, market)

    def parse_order_status(self, status):
        if status is not None:
            statuses = {
                'NEW': 'open',
                'FILLED': 'closed',
                'CANCEL_SENT': 'canceled',
                'CANCEL_ALL_SENT': 'canceled',
                'CANCELLED': 'canceled',
                'PARTIAL_FILLED': 'open',
                'REJECTED': 'rejected',
                'INCOMPLETE': 'open',
                'REPLACED': 'open',
                'COMPLETED': 'closed',
            }
            return self.safe_string(statuses, status, status)
        return status

    async def fetch_order_book(self, symbol, limit=None, params={}):
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int|None limit: the maximum amount of order book entries to return
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        if limit is not None:
            limit = min(limit, 1000)
            request['max_level'] = limit
        response = await self.v1PrivateGetOrderbookSymbol(self.extend(request, params))
        #
        # {
        #   success: True,
        #   timestamp: '1641562961192',
        #   asks: [
        #     {price: '0.921', quantity: '76.01'},
        #     {price: '0.933', quantity: '477.10'},
        #     ...
        #   ],
        #   bids: [
        #     {price: '0.940', quantity: '13502.47'},
        #     {price: '0.932', quantity: '43.91'},
        #     ...
        #   ]
        # }
        #
        timestamp = self.safe_integer(response, 'timestamp')
        return self.parse_order_book(response, symbol, timestamp, 'bids', 'asks', 'price', 'quantity')

    async def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'resolution': self.timeframes[timeframe],
            'from': since / 1000,
        }
        parsedTimeFrame = self.parse_timeframe(timeframe)
        duration = parsedTimeFrame * 1000 * limit
        to = self.sum(since, duration)
        request['to'] = to / 1000
        response = await self.v1PublicGetTvHistory(self.extend(request, params))
        res = []
        if response.s == 'ok':
            length = len(response.t)
            for i in range(0, length):
                res.append([
                    response.t[i] * 1000,
                    response.o[i],
                    response.h[i],
                    response.l[i],
                    response.c[i],
                    response.v[i],
                ])
        else:
            raise(response.s)
        return res

    def parse_ohlcv(self, ohlcv, market=None):
        # example response in fetchOHLCV
        return [
            self.safe_integer(ohlcv, 'start_timestamp'),
            self.safe_number(ohlcv, 'open'),
            self.safe_number(ohlcv, 'high'),
            self.safe_number(ohlcv, 'low'),
            self.safe_number(ohlcv, 'close'),
            self.safe_number(ohlcv, 'volume'),
        ]

    async def fetch_order_trades(self, id, symbol=None, since=None, limit=None, params={}):
        """
        fetch all the trades made from a single order
        :param str id: order id
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch trades for
        :param int|None limit: the maximum number of trades to retrieve
        :param dict params: extra parameters specific to the woo api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        await self.load_markets()
        market = None
        if symbol is not None:
            market = self.market(symbol)
        request = {
            'oid': id,
        }
        response = await self.v1PrivateGetOrderOidTrades(self.extend(request, params))
        # {
        #     success: True,
        #     rows: [
        #       {
        #         id: '99111647',
        #         symbol: 'SPOT_WOO_USDT',
        #         fee: '0.0024',
        #         side: 'BUY',
        #         executed_timestamp: '1641482113.084',
        #         order_id: '87541111',
        #         order_tag: 'default',
        #         executed_price: '1',
        #         executed_quantity: '12',
        #         fee_asset: 'WOO',
        #         is_maker: '1'
        #       }
        #     ]
        # }
        trades = self.safe_value(response, 'rows', [])
        return self.parse_trades(trades, market, since, limit, params)

    async def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        """
        fetch all trades made by the user
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch trades for
        :param int|None limit: the maximum number of trades structures to retrieve
        :param dict params: extra parameters specific to the woo api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        await self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        if since is not None:
            request['start_t'] = since
        response = await self.v1PrivateGetClientTrades(self.extend(request, params))
        # {
        #     "success": True,
        #     "meta": {
        #         "records_per_page": 25,
        #         "current_page": 1
        #     },
        #     "rows": [
        #         {
        #             "id": 5,
        #             "symbol": "SPOT_BTC_USDT",
        #             "order_id": 211,
        #             "order_tag": "default",
        #             "executed_price": 10892.84,
        #             "executed_quantity": 0.002,
        #             "is_maker": 0,
        #             "side": "SELL",
        #             "fee": 0,
        #             "fee_asset": "USDT",
        #             "executed_timestamp": "1566264290.250"
        #         },
        #         ...
        #     ]
        # }
        trades = self.safe_value(response, 'rows', [])
        return self.parse_trades(trades, market, since, limit, params)

    async def fetch_accounts(self, params={}):
        """
        fetch all the accounts associated with a profile
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: a dictionary of `account structures <https://docs.ccxt.com/#/?id=account-structure>` indexed by the account type
        """
        response = await self.v1PrivateGetSubAccountAssets(params)
        #
        #     {
        #         rows: [{
        #                 application_id: '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
        #                 account: 'Main',
        #                 usdt_balance: '4.0'
        #             },
        #             {
        #                 application_id: '432952aa-a401-4e26-aff6-972920aebba3',
        #                 account: 'subaccount',
        #                 usdt_balance: '1.0'
        #             }
        #         ],
        #         success: True
        #     }
        #
        rows = self.safe_value(response, 'rows', [])
        return self.parse_accounts(rows, params)

    def parse_account(self, account):
        #
        #     {
        #         application_id: '336952aa-a401-4e26-aff6-972920aebba3',
        #         account: 'subaccount',
        #         usdt_balance: '1.0',
        #     }
        #
        accountId = self.safe_string(account, 'account')
        return {
            'info': account,
            'id': self.safe_string(account, 'application_id'),
            'name': accountId,
            'code': None,
            'type': accountId == 'main' if 'Main' else 'subaccount',
        }

    async def fetch_balance(self, params={}):
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        see https://docs.woo.org/#get-current-holding-get-balance-new
        :param dict params: extra parameters specific to the woo api endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/en/latest/manual.html?#balance-structure>`
        """
        await self.load_markets()
        response = await self.v3PrivateGetBalances(params)
        #
        #     {
        #         "success": True,
        #         "data": {
        #             "holding": [
        #                 {
        #                     "token": "0_token",
        #                     "holding": 1,
        #                     "frozen": 0,
        #                     "staked": 0,
        #                     "unbonding": 0,
        #                     "vault": 0,
        #                     "interest": 0,
        #                     "pendingShortQty": 0,
        #                     "pendingLongQty": 0,
        #                     "availableBalance": 0,
        #                     "updatedTime": 312321.121
        #                 }
        #             ]
        #         },
        #         "timestamp": 1673323746259
        #     }
        #
        data = self.safe_value(response, 'data')
        return self.parse_balance(data)

    def parse_balance(self, response):
        result = {
            'info': response,
        }
        balances = self.safe_value(response, 'holding', [])
        for i in range(0, len(balances)):
            balance = balances[i]
            code = self.safe_currency_code(self.safe_string(balance, 'token'))
            account = self.account()
            account['total'] = self.safe_string(balance, 'holding')
            account['free'] = self.safe_string(balance, 'availableBalance')
            result[code] = account
        return self.safe_balance(result)

    def get_currency_from_chaincode(self, networkizedCode, currency):
        if currency is not None:
            return currency
        else:
            parts = networkizedCode.split('_')
            partsLength = len(parts)
            firstPart = self.safe_string(parts, 0)
            currencyId = self.safe_string(parts, 1, firstPart)
            if partsLength > 2:
                currencyId += '_' + self.safe_string(parts, 2)
            currency = self.safe_currency(currencyId)
        return currency

    def nonce(self):
        return self.milliseconds()

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        isArray = isinstance(params, list)
        request = '/api/' + self.version + '/' + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        url = self.implode_hostname(self.urls['api']['rest']) + request
        # type = self.getPathAuthenticationType(path)
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        elif api == 'private':
            self.check_required_credentials()
            timestamp = self.iso8601(self.milliseconds())
            headers = {
                'ACCESS-KEY': self.apiKey,
                'ACCESS-PASSPHRASE': self.password,
                'ACCESS-TIMESTAMP': timestamp,
                'ACCESS-NONCE': self.nonce(),
                # 'OK-FROM': '',
                # 'OK-TO': '',
                # 'OK-LIMIT': '',
            }
            auth = timestamp + method + request
            if method == 'GET':
                if query:
                    urlencodedQuery = '?' + self.urlencode(query)
                    url += urlencodedQuery
                    auth += urlencodedQuery
            else:
                if isArray or query:
                    body = self.json(query)
                    auth += body
                headers['Content-Type'] = 'application/json'
            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')
            headers['ACCESS-SIGN'] = signature
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if not response:
            return  # fallback to default error handler
        #
        #     400 Bad Request {"success":false,"code":-1012,"message":"Amount is required for buy market orders when margin disabled."}
        #
        success = self.safe_value(response, 'success')
        errorCode = self.safe_string(response, 'code')
        if not success:
            feedback = self.id + ' ' + self.json(response)
            self.throw_broadly_matched_exception(self.exceptions['broad'], body, feedback)
            self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, feedback)

    def parse_income(self, income, market=None):
        #
        #     {
        #         "id":666666,
        #         "symbol":"PERP_BTC_USDT",
        #         "funding_rate":0.00001198,
        #         "mark_price":28941.04000000,
        #         "funding_fee":0.00069343,
        #         "payment_type":"Pay",
        #         "status":"COMPLETED",
        #         "created_time":"1653616000.666",
        #         "updated_time":"1653616000.605"
        #     }
        #
        marketId = self.safe_string(income, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        amount = self.safe_number(income, 'funding_fee')
        code = self.safe_currency_code('USD')
        id = self.safe_string(income, 'id')
        timestamp = self.safe_timestamp(income, 'updated_time')
        rate = self.safe_number(income, 'funding_rate')
        return {
            'info': income,
            'symbol': symbol,
            'code': code,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'id': id,
            'amount': amount,
            'rate': rate,
        }

    async def fetch_leverage(self, symbol, params={}):
        await self.load_markets()
        response = await self.v1PrivateGetAccountLeverageInfo(params)
        result = self.safe_value(response, 'data')
        leverage = self.safe_number(result, 'leverage')
        marginMode = self.safe_string(result, 'marginMode')
        return {
            'info': response,
            'leverage': leverage,
            'marginMode': marginMode,
        }

    async def set_leverage(self, leverage, symbol=None, params={}):
        await self.load_markets()
        if (leverage != 1) and (leverage != 2) and (leverage != 3) and (leverage != 4) and (leverage != 5) and (leverage != 10) and (leverage != 15) and (leverage != 20) and (leverage != 50):
            raise BadRequest(self.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50')
        request = {
            'leverage': leverage,
        }
        return await self.v1PrivatePostClientLeverage(self.extend(request, params))

    async def fetch_position(self, symbol=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.v1PrivateGetPositionSymbol(self.extend(request, params))
        #
        #     {
        #         "symbol":"PERP_ETC_USDT",
        #         "holding":0.0,
        #         "pnl_24_h":0,
        #         "settle_price":0.0,
        #         "average_open_price":0,
        #         "success":true,
        #         "mark_price":22.6955,
        #         "pending_short_qty":0.0,
        #         "pending_long_qty":0.0,
        #         "fee_24_h":0,
        #         "timestamp":"1652231044.920"
        #     }
        #
        return self.parse_position(response, market)

    async def fetch_positions(self, symbols=None, params={}):
        await self.load_markets()
        response = await self.v3PrivateGetPositions(params)
        #
        #     {
        #         "success": True,
        #         "data": {
        #             "positions": [
        #                 {
        #                     "symbol": "0_symbol",
        #                     "holding": 1,
        #                     "pendingLongQty": 0,
        #                     "pendingShortQty": 1,
        #                     "settlePrice": 1,
        #                     "averageOpenPrice": 1,
        #                     "pnl24H": 1,
        #                     "fee24H": 1,
        #                     "markPrice": 1,
        #                     "estLiqPrice": 1,
        #                     "timestamp": 12321321
        #                 }
        #             ]
        #         },
        #         "timestamp": 1673323880342
        #     }
        #
        result = self.safe_value(response, 'data', {})
        positions = self.safe_value(result, 'positions', [])
        return self.parse_positions(positions, symbols)

    def parse_position(self, position, market=None):
        #
        #     {
        #         "symbol": "0_symbol",
        #         "holding": 1,
        #         "pendingLongQty": 0,
        #         "pendingShortQty": 1,
        #         "settlePrice": 1,
        #         "averageOpenPrice": 1,
        #         "pnl24H": 1,
        #         "fee24H": 1,
        #         "markPrice": 1,
        #         "estLiqPrice": 1,
        #         "timestamp": 12321321
        #     }
        #
        contract = self.safe_string(position, 'symbol')
        market = self.safe_market(contract, market)
        size = self.safe_string(position, 'holding')
        side = None
        if Precise.string_gt(size, '0'):
            side = 'long'
        else:
            side = 'short'
        contractSize = self.safe_string(market, 'contractSize')
        markPrice = self.safe_string(position, 'markPrice')
        timestamp = self.safe_timestamp(position, 'timestamp')
        entryPrice = self.safe_string(position, 'averageOpenPrice')
        priceDifference = Precise.string_sub(markPrice, entryPrice)
        unrealisedPnl = Precise.string_mul(priceDifference, size)
        return {
            'info': position,
            'id': market['symbol'] + ':' + side,
            'symbol': market['symbol'],
            'notional': None,
            'marginMode': 'cross',
            'liquidationPrice': self.safe_number(position, 'estLiqPrice'),
            'entryPrice': self.parse_number(entryPrice),
            'realizedPnl': self.safe_string(position, 'pnl24H'),
            'unrealizedPnl': self.parse_number(unrealisedPnl),
            'percentage': None,
            'contracts': self.parse_number(size),
            'contractSize': self.parse_number(contractSize),
            'markPrice': self.parse_number(markPrice),
            'side': side,
            'hedged': False,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'maintenanceMargin': None,
            'maintenanceMarginPercentage': None,
            'collateral': None,
            'initialMargin': None,
            'initialMarginPercentage': None,
            'leverage': None,
            'marginRatio': None,
        }

    def default_network_code_for_currency(self, code):
        currencyItem = self.currency(code)
        networks = currencyItem['networks']
        networkKeys = list(networks.keys())
        for i in range(0, len(networkKeys)):
            network = networkKeys[i]
            if network == 'ETH':
                return network
        # if it was not returned according to above options, then return the first network of currency
        return self.safe_value(networkKeys, 0)

    async def fetch_account_configuration(self, symbol, params={}):
        await self.load_markets()
        market = self.market(symbol)
        leverageInfo = await self.fetch_leverage(market['id'])
        leverage = self.safe_integer(leverageInfo, 'leverage')
        accountConfig = {
            'marginMode': 'cross',
            'positionMode': 'oneway',
            'markets': {},
            'leverage': leverage,
        }
        leverageConfigs = accountConfig['markets']
        leverageConfigs[market['symbol']] = {
            'leverage': leverage,
            'buyLeverage': leverage,
            'sellLeverage': leverage,
        }
        return accountConfig
