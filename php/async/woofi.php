<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\ArgumentsRequired;
use ccxt\BadRequest;
use ccxt\Precise;
use React\Async;

class woofi extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'woofi',
            'name' => 'WOOFI',
            'countries' => array( 'KY' ), // Cayman Islands
            'rateLimit' => 100,
            'version' => 'v1',
            'certified' => false,
            'pro' => true,
            'hostname' => 'dex.woo.org',
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'borrowMargin' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelWithdraw' => false, // exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs => https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                'createDepositAddress' => false,
                'createMarketOrder' => false,
                'createOrder' => true,
                'createReduceOnlyOrder' => true,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchCanceledOrders' => false,
                'fetchClosedOrder' => false,
                'fetchClosedOrders' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDeposits' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => false,
                'fetchLedger' => true,
                'fetchLeverage' => true,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrder' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => true,
                'fetchPosition' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => false,
                'fetchTicker' => false,
                'fetchTickers' => false,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactions' => true,
                'fetchTransfers' => true,
                'fetchWithdrawals' => true,
                'reduceMargin' => false,
                'repayMargin' => true,
                'setLeverage' => true,
                'setMargin' => false,
                'transfer' => true,
                'withdraw' => true, // exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs => https://kronosresearch.github.io/wootrade-documents/#token-withdraw
            ),
            'timeframes' => array(
                '1m' => '1',
                '3m' => '3',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '2h' => '2h',
                '4h' => '4h',
                '8h' => '8h',
                '12h' => '12h',
                '1d' => '1D',
                '3d' => '3D',
                '1w' => '1W',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
                'api' => array(
                    'pub' => 'https://api-evm.orderly.org',
                    'public' => 'https://api-evm.orderly.org',
                    'private' => 'https://api-evm.orderly.org',
                ),
                'test' => array(
                    'pub' => 'https://testnet-api-evm.orderly.org',
                    'public' => 'https://testnet-api-evm.orderly.org',
                    'private' => 'https://testnet-api-evm.orderly.org',
                ),
                'www' => 'https://woo.org/',
                'doc' => array(
                    'https://docs.woo.org/',
                ),
                'fees' => array(
                    'https://support.woo.org/hc/en-001/articles/4404611795353--Trading-Fees',
                ),
                'referral' => 'https://referral.woo.org/BAJS6oNmZb3vi3RGA',
            ),
            'api' => array(
                'v1' => array(
                    'pub' => array(
                        'get' => array(
                            'hist/kline' => 10,
                            'hist/trades' => 1,
                        ),
                    ),
                    'public' => array(
                        'get' => array(
                            'info' => 1,
                            'info/{symbol}' => 1,
                            'system_info' => 1,
                            'kline' => 1,
                            'market_trades' => 1,
                            'token' => 1,
                            'token_network' => 1,
                            'funding_rates' => 1,
                            'funding_rate/{symbol}' => 1,
                            'funding_rate_history' => 1,
                            'futures' => 1,
                            'futures/{symbol}' => 1,
                            'tv/history' => 1,
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'client/token' => 1,
                            'order/{oid}' => 1,
                            'client/order/{client_order_id}' => 1,
                            'orders' => 1,
                            'orderbook/{symbol}' => 1,
                            'client/trade/{tid}' => 1,
                            'order/{oid}/trades' => 1,
                            'client/trades' => 1,
                            'client/info' => 60,
                            'asset/deposit' => 10,
                            'asset/history' => 60,
                            'sub_account/all' => 60,
                            'sub_account/assets' => 60,
                            'token_interest' => 60,
                            'token_interest/{token}' => 60,
                            'interest/history' => 60,
                            'interest/repay' => 60,
                            'funding_fee/history' => 30,
                            'positions' => 3.33, // 30 requests per 10 seconds
                            'position/{symbol}' => 3.33,
                            'client/holding' => 1,
                            'algo/order/{oid}' => 1,
                            'algo/orders' => 1,
                            'balances' => 1,
                            'accountinfo' => 60,
                            'buypower' => 1,
                        ),
                        'post' => array(
                            'order' => 5, // 2 requests per 1 second per symbol
                            'asset/main_sub_transfer' => 30, // 20 requests per 60 seconds
                            'asset/withdraw' => 30,  // implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#token-withdraw
                            'interest/repay' => 60,
                            'client/account_mode' => 120,
                            'client/leverage' => 120,
                            'algo/order' => 5,
                        ),
                        'put' => array(
                            'order/{oid}' => 2,
                            'order/client/{oid}' => 2,
                            'algo/order/{oid}' => 2,
                            'algo/order/client/{oid}' => 2,
                        ),
                        'delete' => array(
                            'order' => 1,
                            'client/order' => 1,
                            'orders' => 1,
                            'asset/withdraw' => 120,  // implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                            'algo/order/{oid}' => 1,
                            'algo/orders/pending' => 1,
                            'algo/orders/pending/{symbol}' => 1,
                            'orders/pending' => 1,
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0002'),
                    'taker' => $this->parse_number('0.0005'),
                ),
            ),
            'options' => array(
                'createMarketBuyOrderRequiresPrice' => true,
                // these network aliases require manual mapping here
                'network-aliases-for-tokens' => array(
                    'HT' => 'ERC20',
                    'OMG' => 'ERC20',
                    'UATOM' => 'ATOM',
                    'ZRX' => 'ZRX',
                ),
                'networks' => array(
                    'TRX' => 'TRON',
                    'TRC20' => 'TRON',
                    'ERC20' => 'ETH',
                    'BEP20' => 'BSC',
                ),
                // override defaultNetworkCodePriorities for a specific currency
                'defaultNetworkCodeForCurrencies' => array(
                    // 'USDT' => 'TRC20',
                    // 'BTC' => 'BTC',
                ),
                'transfer' => array(
                    'fillResponseFromRequest' => true,
                ),
                'brokerId' => 'ab82cb09-cfec-4473-80a3-b740779d0644',
            ),
            'commonCurrencies' => array(),
            'exceptions' => array(
                'exact' => array(
                    '-1000' => '\\ccxt\\ExchangeError', // array( "code" => -1000,  "message" => "An unknown error occurred while processing the request" )
                    '-1001' => '\\ccxt\\AuthenticationError', // array( "code" => -1001,  "message" => "The api key or secret is in wrong format" )
                    '-1002' => '\\ccxt\\AuthenticationError', // array( "code" => -1002,  "message" => "API key or secret is invalid, it may because key have insufficient permission or the key is expired/revoked." )
                    '-1003' => '\\ccxt\\RateLimitExceeded', // array( "code" => -1003,  "message" => "Rate limit exceed." )
                    '-1004' => '\\ccxt\\BadRequest', // array( "code" => -1004,  "message" => "An unknown parameter was sent." )
                    '-1005' => '\\ccxt\\BadRequest', // array( "code" => -1005,  "message" => "Some parameters are in wrong format for api." )
                    '-1006' => '\\ccxt\\BadRequest', // array( "code" => -1006,  "message" => "The data is not found in server." )
                    '-1007' => '\\ccxt\\BadRequest', // array( "code" => -1007,  "message" => "The data is already exists or your request is duplicated." )
                    '-1008' => '\\ccxt\\InvalidOrder', // array( "code" => -1008,  "message" => "The quantity of settlement is too high than you can request." )
                    '-1009' => '\\ccxt\\BadRequest', // array( "code" => -1009,  "message" => "Can not request withdrawal settlement, you need to deposit other arrears first." )
                    '-1011' => '\\ccxt\\ExchangeError', // array( "code" => -1011,  "message" => "Can not place/cancel orders, it may because internal network error. Please try again in a few seconds." )
                    '-1012' => '\\ccxt\\BadRequest', // array( "code" => -1012,  "message" => "Amount is required for buy market orders when margin disabled.")  The place/cancel order request is rejected by internal module, it may because the account is in liquidation or other internal errors. Please try again in a few seconds." }
                    '-1101' => '\\ccxt\\InvalidOrder', // array( "code" => -1101,  "message" => "The risk exposure for client is too high, it may cause by sending too big order or the leverage is too low. please refer to client info to check the current exposure." )
                    '-1102' => '\\ccxt\\InvalidOrder', // array( "code" => -1102,  "message" => "The order value (price * size) is too small." )
                    '-1103' => '\\ccxt\\InvalidOrder', // array( "code" => -1103,  "message" => "The order price is not following the tick size rule for the symbol." )
                    '-1104' => '\\ccxt\\InvalidOrder', // array( "code" => -1104,  "message" => "The order quantity is not following the step size rule for the symbol." )
                    '-1105' => '\\ccxt\\InvalidOrder', // array( "code" => -1105,  "message" => "Price is X% too high or X% too low from the mid price." )
                ),
                'broad' => array(
                    'symbol must not be blank' => '\\ccxt\\BadRequest', // when sending 'cancelOrder' without symbol [-1005]
                    'The token is not supported' => '\\ccxt\\BadRequest', // when getting incorrect token's deposit address [-1005]
                    'Your order and symbol are not valid or already canceled' => '\\ccxt\\BadRequest', // actual response whensending 'cancelOrder' for already canceled id [-1006]
                    'Insufficient WOO. Please enable margin trading for leverage trading' => '\\ccxt\\BadRequest', // when selling insufficent token [-1012]
                ),
            ),
            'precisionMode' => TICK_SIZE,
        ));
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves $data on all markets for woo
             * @param {array} $params extra parameters specific to the exchange api endpoint
             * @return {[array]} an array of objects representing $market $data
             */
            $response = Async\await($this->v1PublicGetInfo ($params));
            //
            // {
            //     $rows => [
            //         array(
            //             $symbol => "SPOT_AAVE_USDT",
            //             quote_min => 0,
            //             quote_max => 100000,
            //             quote_tick => 0.01,
            //             base_min => 0.01,
            //             base_max => 7284,
            //             base_tick => 0.0001,
            //             min_notional => 10,
            //             price_range => 0.1,
            //             created_time => "0",
            //             updated_time => "1639107647.988",
            //             is_stable => 0
            //         ),
            //         ...
            //     success => true
            // }
            //
            $result = array();
            $data = $this->safe_value($response, 'data', array());
            $rows = $this->safe_value($data, 'rows', array());
            for ($i = 0; $i < count($rows); $i++) {
                $market = $rows[$i];
                $marketId = $this->safe_string($market, 'symbol');
                $parts = explode('_', $marketId);
                $marketType = $this->safe_string_lower($parts, 0);
                $isSpot = $marketType === 'spot';
                $isSwap = $marketType === 'perp';
                $baseId = $this->safe_string($parts, 1);
                $quoteId = $this->safe_string($parts, 2);
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $settleId = null;
                $settle = null;
                $symbol = $base . '/' . $quote;
                $contractSize = null;
                $linear = null;
                if ($isSpot) {
                    continue;
                }
                if ($isSwap) {
                    $settleId = $this->safe_string($parts, 2);
                    $settle = $this->safe_currency_code($settleId);
                    $symbol = $base . '/' . $quote . ':' . $settle;
                    $contractSize = $this->parse_number('1');
                    $marketType = 'swap';
                    $linear = true;
                }
                $result[] = array(
                    'id' => $marketId,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => $settle,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => $settleId,
                    'type' => $marketType,
                    'spot' => $isSpot,
                    'margin' => true,
                    'swap' => $isSwap,
                    'future' => false,
                    'option' => false,
                    'active' => null,
                    'contract' => $isSwap,
                    'linear' => $linear,
                    'inverse' => null,
                    'contractSize' => $contractSize,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->safe_number($market, 'base_tick'),
                        'price' => $this->safe_number($market, 'quote_tick'),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'base_min'),
                            'max' => $this->safe_number($market, 'base_max'),
                        ),
                        'price' => array(
                            'min' => $this->safe_number($market, 'quote_min'),
                            'max' => $this->safe_number($market, 'quote_max'),
                        ),
                        'cost' => array(
                            'min' => $this->safe_number($market, 'min_notional'),
                            'max' => null,
                        ),
                    ),
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int|null} $since timestamp in ms of the earliest trade to fetch
             * @param {int|null} $limit the maximum amount of trades to fetch
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchTrades() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->v1PublicGetMarketTrades (array_merge($request, $params)));
            //
            // {
            //     success => true,
            //     rows => array(
            //         array(
            //             $symbol => "SPOT_BTC_USDT",
            //             side => "SELL",
            //             executed_price => 46222.35,
            //             executed_quantity => 0.0012,
            //             executed_timestamp => "1641241162.329"
            //         ),
            //         array(
            //             $symbol => "SPOT_BTC_USDT",
            //             side => "SELL",
            //             executed_price => 46222.35,
            //             executed_quantity => 0.0012,
            //             executed_timestamp => "1641241162.329"
            //         ),
            //         array(
            //             $symbol => "SPOT_BTC_USDT",
            //             side => "BUY",
            //             executed_price => 46224.32,
            //             executed_quantity => 0.00039,
            //             executed_timestamp => "1641241162.287"
            //         ),
            //         ...
            //      )
            // }
            //
            $resultResponse = $this->safe_value($response, 'rows', array());
            return $this->parse_trades($resultResponse, $market, $since, $limit);
        }) ();
    }

    public function parse_trade($trade, $market = null) {
        //
        // public/market_trades
        //
        //     {
        //         $symbol => "SPOT_BTC_USDT",
        //         $side => "SELL",
        //         executed_price => 46222.35,
        //         executed_quantity => 0.0012,
        //         executed_timestamp => "1641241162.329"
        //     }
        //
        // fetchOrderTrades, fetchOrder
        //
        //     {
        //         $id => '99119876',
        //         $symbol => 'SPOT_WOO_USDT',
        //         $fee => '0.0024',
        //         $side => 'BUY',
        //         executed_timestamp => '1641481113.084',
        //         $order_id => '87001234',
        //         order_tag => 'default', <-- this param only in "fetchOrderTrades"
        //         executed_price => '1',
        //         executed_quantity => '12',
        //         fee_asset => 'WOO',
        //         is_maker => '1'
        //     }
        //
        $isFromFetchOrder = (is_array($trade) && array_key_exists('id', $trade));
        $timestamp = $this->safe_timestamp($trade, 'executed_timestamp');
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $price = $this->safe_string($trade, 'executed_price');
        $amount = $this->safe_string($trade, 'executed_quantity');
        $order_id = $this->safe_string($trade, 'order_id');
        $fee = $this->parse_token_and_fee_temp($trade, 'fee_asset', 'fee');
        $cost = Precise::string_mul($price, $amount);
        $side = $this->safe_string_lower($trade, 'side');
        $id = $this->safe_string($trade, 'id');
        $takerOrMaker = null;
        if ($isFromFetchOrder) {
            $isMaker = $this->safe_string($trade, 'is_maker') === '1';
            $takerOrMaker = $isMaker ? 'maker' : 'taker';
        }
        return $this->safe_trade(array(
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'order' => $order_id,
            'takerOrMaker' => $takerOrMaker,
            'type' => null,
            'fee' => $fee,
            'info' => $trade,
        ), $market);
    }

    public function parse_token_and_fee_temp($item, $feeTokenKey, $feeAmountKey) {
        $feeCost = $this->safe_string($item, $feeAmountKey);
        $fee = null;
        if ($feeCost !== null) {
            $feeCurrencyId = $this->safe_string($item, $feeTokenKey);
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrencyCode,
            );
        }
        return $fee;
    }

    public function fetch_currencies($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches all available currencies on an exchange
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} an associative dictionary of currencies
             */
            $result = array();
            $tokenResponse = Async\await($this->v1PublicGetToken ($params));
            //
            // {
            //     rows => array(
            //         array(
            //             token => "ETH_USDT",
            //             fullname => "Tether",
            //             decimals => 6,
            //             balance_token => "USDT",
            //             created_time => "0",
            //             updated_time => "0"
            //         ),
            //         array(
            //             token => "BSC_USDT",
            //             fullname => "Tether",
            //             decimals => 18,
            //             balance_token => "USDT",
            //             created_time => "0",
            //             updated_time => "0"
            //         ),
            //         array(
            //             token => "ZEC",
            //             fullname => "ZCash",
            //             decimals => 8,
            //             balance_token => "ZEC",
            //             created_time => "0",
            //             updated_time => "0"
            //         ),
            //         ...
            //     ),
            //     success => true
            // }
            //
            // only make one request for currrencies...
            // $tokenNetworkResponse = Async\await($this->v1PublicGetTokenNetwork ($params));
            //
            // {
            //     rows => array(
            //         array(
            //             protocol => "ERC20",
            //             token => "USDT",
            //             $name => "Ethereum",
            //             minimum_withdrawal => 30,
            //             withdrawal_fee => 25,
            //             allow_deposit => 1,
            //             allow_withdraw => 1
            //         ),
            //         array(
            //             protocol => "TRC20",
            //             token => "USDT",
            //             $name => "Tron",
            //             minimum_withdrawal => 30,
            //             withdrawal_fee => 1,
            //             allow_deposit => 1,
            //             allow_withdraw => 1
            //         ),
            //         ...
            //     ),
            //     success => true
            // }
            //
            $tokenRows = $this->safe_value($tokenResponse, 'rows', array());
            $networksByCurrencyId = $this->group_by($tokenRows, 'balance_token');
            $currencyIds = is_array($networksByCurrencyId) ? array_keys($networksByCurrencyId) : array();
            for ($i = 0; $i < count($currencyIds); $i++) {
                $currencyId = $currencyIds[$i];
                $networks = $networksByCurrencyId[$currencyId];
                $code = $this->safe_currency_code($currencyId);
                $name = null;
                $minPrecision = null;
                $resultingNetworks = array();
                for ($j = 0; $j < count($networks); $j++) {
                    $network = $networks[$j];
                    $name = $this->safe_string($network, 'fullname');
                    $networkId = $this->safe_string($network, 'token');
                    $splitted = explode('_', $networkId);
                    $unifiedNetwork = $splitted[0];
                    $precision = $this->parse_precision($this->safe_string($network, 'decimals'));
                    if ($precision !== null) {
                        $minPrecision = ($minPrecision === null) ? $precision : Precise::string_min($precision, $minPrecision);
                    }
                    $resultingNetworks[$unifiedNetwork] = array(
                        'id' => $networkId,
                        'network' => $unifiedNetwork,
                        'limits' => array(
                            'withdraw' => array(
                                'min' => null,
                                'max' => null,
                            ),
                            'deposit' => array(
                                'min' => null,
                                'max' => null,
                            ),
                        ),
                        'active' => null,
                        'deposit' => null,
                        'withdraw' => null,
                        'fee' => null,
                        'precision' => $this->parse_number($precision),
                        'info' => $network,
                    );
                }
                $result[$code] = array(
                    'id' => $currencyId,
                    'name' => $name,
                    'code' => $code,
                    'precision' => $this->parse_number($minPrecision),
                    'active' => null,
                    'fee' => null,
                    'networks' => $resultingNetworks,
                    'deposit' => null,
                    'withdraw' => null,
                    'limits' => array(
                        'deposit' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'info' => $networks,
                );
            }
            return $result;
        }) ();
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float|null} $price the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            // quick order:
            //
            // BTC/USDT:USDT
            // limit
            // buy
            // 4.0
            // 29116.0
            // array('positionMode' => 'unknown', 'timeInForce' => 'PO', 'reduceOnly' => False)
            //
            // limit order:
            //
            // BTC/USDT:USDT
            // limit
            // buy
            // 4.0
            // 28520.0
            // array('positionMode' => 'unknown', 'timeInForce' => 'PO', 'reduceOnly' => False)
            //
            // no post = 'timeInForce' => 'GTC',
            //
            // SL
            //
            // BTC/USDT:USDT
            // stop
            // sell
            // 20.0
            // None
            // array('positionMode' => 'unknown', 'stopPrice' => 27663.0, 'timeInForce' => 'GTC', 'trigger' => 'Last', 'close' => True, 'basePrice' => 29024.0)
            //
            // TP
            //
            // BTC/USDT:USDT
            // stop
            // sell
            // 20.0
            // None
            // array('positionMode' => 'unknown', 'stopPrice' => 30150.0, 'timeInForce' => 'GTC', 'trigger' => 'Last', 'close' => True, 'basePrice' => 29024.0)
            //
            // LIMIT TP
            //
            // BTC/USDT:USDT
            // stopLimit
            // sell
            // 4.0
            // 33000.0
            // array('positionMode' => 'unknown', 'stopPrice' => 32000.0, 'timeInForce' => 'GTC', 'trigger' => 'Last', 'close' => True, 'basePrice' => 29024.0)
            $reduceOnly = $this->safe_value_2($params, 'reduceOnly', 'close');
            $orderType = strtoupper($type);
            if ($orderType === 'STOP' || $orderType === 'STOPLIMIT') {
                Async\await($this->load_markets());
                $market = $this->market($symbol);
                $orderSide = strtoupper($side);
                $algoOrderType = 'MARKET';
                if ($orderType !== 'STOP') {
                    $algoOrderType = 'LIMIT';
                }
                $triggerPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
                $request = array(
                    'symbol' => $market['id'],
                    'algoType' => 'STOP',
                    'type' => $algoOrderType,
                    'side' => $orderSide,
                );
                if ($reduceOnly) {
                    $request['reduceOnly'] = $reduceOnly;
                }
                if ($price !== null) {
                    $request['price'] = $this->price_to_precision($symbol, $price);
                }
                $request['triggerPrice'] = $triggerPrice;
                $request['quantity'] = $this->amount_to_precision($symbol, $amount);
                $params = $this->omit($params, array( 'clOrdID', 'clientOrderId', 'postOnly', 'timeInForce' ));
                // $response = Async\await($this->v1PrivatePostAlgoOrder (array_merge($request, $params)));
                $brokerId = $this->safe_string($this->options, 'brokerId');
                if ($brokerId !== null) {
                    $request['brokerId'] = $brokerId;
                }
                $response = Async\await($this->v1PrivatePostAlgoOrder ($request));
                // {
                //     success => true,
                //     timestamp => '1641383206.489',
                //     order_id => '86980774',
                //     order_type => 'LIMIT',
                //     order_price => '1', // null for 'MARKET' order
                //     order_quantity => '12', // null for 'MARKET' order
                //     order_amount => null, // NOT-null for 'MARKET' order
                //     client_order_id => '0'
                // }
                // $response -> $data -> $rows -> [0]
                $data = $this->safe_value($response, 'data');
                $rows = $this->safe_value($data, 'rows', array());
                // return array_merge(
                //     $this->parse_order($rows[0], $market),
                //     array( 'type' => $type )
                // );
                return array_merge(
                    $this->parse_order($rows[0], $market),
                    array( 'status' => 'open' )
                );
            } else {
                Async\await($this->load_markets());
                $market = $this->market($symbol);
                $orderSide = strtoupper($side);
                $request = array(
                    'symbol' => $market['id'],
                    'order_type' => $orderType, // LIMIT/MARKET/IOC/FOK/POST_ONLY/ASK/BID
                    'side' => $orderSide,
                );
                $isMarket = $orderType === 'MARKET';
                $timeInForce = $this->safe_string_lower($params, 'timeInForce');
                $postOnly = $this->is_post_only($isMarket, null, $params);
                if ($postOnly) {
                    $request['order_type'] = 'POST_ONLY';
                } elseif ($timeInForce === 'fok') {
                    $request['order_type'] = 'FOK';
                } elseif ($timeInForce === 'ioc') {
                    $request['order_type'] = 'IOC';
                }
                if ($reduceOnly) {
                    $request['reduce_only'] = $reduceOnly;
                }
                if ($price !== null) {
                    $request['order_price'] = $this->price_to_precision($symbol, $price);
                }
                $request['order_quantity'] = $this->amount_to_precision($symbol, $amount);
                $clientOrderId = $this->safe_string_2($params, 'clOrdID', 'clientOrderId');
                if ($clientOrderId !== null) {
                    $request['client_order_id'] = $clientOrderId;
                }
                $brokerId = $this->safe_string($this->options, 'brokerId');
                if ($brokerId !== null) {
                    $request['broker_id'] = $brokerId;
                }
                $params = $this->omit($params, array( 'clOrdID', 'clientOrderId', 'postOnly', 'timeInForce' ));
                $response = Async\await($this->v1PrivatePostOrder (array_merge($request, $params)));
                // {
                //     success => true,
                //     timestamp => '1641383206.489',
                //     order_id => '86980774',
                //     order_type => 'LIMIT',
                //     order_price => '1', // null for 'MARKET' order
                //     order_quantity => '12', // null for 'MARKET' order
                //     order_amount => null, // NOT-null for 'MARKET' order
                //     client_order_id => '0'
                // }
                return array_merge(
                    $this->parse_order($response, $market),
                    array( 'type' => $type, 'status' => 'open' )
                );
            }
        }) ();
    }

    public function edit_order($id, $symbol, $type, $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $type, $side, $amount, $price, $params) {
            /**
             * edit a trade order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float|null} $price the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'oid' => $id,
                // 'quantity' => $this->amount_to_precision($symbol, $amount),
                // 'price' => $this->price_to_precision($symbol, $price),
            );
            if ($price !== null && $type !== 'stop') {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $triggerPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
            if ($triggerPrice !== null) {
                $request['triggerPrice'] = $triggerPrice;
            }
            if ($amount !== null) {
                $request['quantity'] = $this->amount_to_precision($symbol, $amount);
            }
            $method = 'v1PrivatePutOrderOid';
            if ($this->maybe_algo_order_id($id)) {
                $method = 'v1PrivatePutAlgoOrderOid';
            }
            $response = Async\await($this->$method (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "status" => "string",
            //             "success" => true
            //         ),
            //         "message" => "string",
            //         "success" => true,
            //         "timestamp" => 0
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function maybe_algo_order_id($id) {
        $stringId = $this->number_to_string($id);
        if (strlen($stringId) < 9) {
            return true;
        }
        return false;
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the market the order was made in
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            if ($this->maybe_algo_order_id($id)) {
                return $this->cancel_algo_order($id, $symbol, $params);
            } else {
                return $this->cancel_regular_order($id, $symbol, $params);
            }
        }) ();
    }

    public function cancel_algo_order($id, $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            $request = array();
            $request['oid'] = $id;
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
            }
            $request['symbol'] = $market['id'];
            $response = Async\await($this->v1PrivateDeleteAlgoOrderOid (array_merge($request, $params)));
            //
            // array( success => true, status => 'CANCEL_SENT' )
            //
            $extendParams = array( 'symbol' => $symbol );
            $extendParams['id'] = $id;
            return array_merge($this->parse_order($response), $extendParams);
        }) ();
    }

    public function cancel_regular_order($id, $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            $request = array();
            $clientOrderIdUnified = $this->safe_string_2($params, 'clOrdID', 'clientOrderId');
            $clientOrderIdExchangeSpecific = $this->safe_string_2($params, 'client_order_id', $clientOrderIdUnified);
            $isByClientOrder = $clientOrderIdExchangeSpecific !== null;
            if ($isByClientOrder) {
                $request['client_order_id'] = $clientOrderIdExchangeSpecific;
                $params = $this->omit($params, array( 'clOrdID', 'clientOrderId', 'client_order_id' ));
            } else {
                $request['order_id'] = $id;
            }
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
            }
            $request['symbol'] = $market['id'];
            $response = Async\await($this->v1PrivateDeleteOrder (array_merge($request, $params)));
            //
            // array( success => true, status => 'CANCEL_SENT' )
            //
            $extendParams = array( 'symbol' => $symbol );
            if ($isByClientOrder) {
                $extendParams['client_order_id'] = $clientOrderIdExchangeSpecific;
            } else {
                $extendParams['id'] = $id;
            }
            return array_merge($this->parse_order($response), $extendParams);
        }) ();
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders in a $market
             * @param {string|null} $symbol unified $market $symbol
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} an list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' canelOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->v1PrivateDeleteOrders (array_merge($request, $params)));
            Async\await($this->v1PrivateDeleteAlgoOrdersPending (array_merge($request, $params)));
            //
            //     {
            //         "success":true,
            //         "status":"CANCEL_ALL_SENT"
            //     }
            //
            return $response;
        }) ();
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @param {string|null} $symbol unified $symbol of the $market the order was made in
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = ($symbol !== null) ? $this->market($symbol) : null;
            $request = array();
            $clientOrderId = $this->safe_string_2($params, 'clOrdID', 'clientOrderId');
            $chosenSpotMethod = null;
            if ($this->maybe_algo_order_id($id)) {
                $chosenSpotMethod = 'v1PrivateDeleteAlgoOrderOid';
            } elseif ($clientOrderId) {
                $chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
                $request['client_order_id'] = $clientOrderId;
            } else {
                $chosenSpotMethod = 'v1PrivateGetOrderOid';
                $request['oid'] = $id;
            }
            $response = Async\await($this->$chosenSpotMethod (array_merge($request, $params)));
            //
            // {
            //     success => true,
            //     $symbol => 'SPOT_WOO_USDT',
            //     status => 'FILLED', // FILLED, NEW
            //     side => 'BUY',
            //     created_time => '1641480933.000',
            //     order_id => '87541111',
            //     order_tag => 'default',
            //     price => '1',
            //     type => 'LIMIT',
            //     quantity => '12',
            //     amount => null,
            //     visible => '12',
            //     executed => '12', // or any partial amount
            //     total_fee => '0.0024',
            //     fee_asset => 'WOO',
            //     client_order_id => null,
            //     average_executed_price => '1',
            //     Transactions => array(
            //       {
            //         $id => '99111647',
            //         $symbol => 'SPOT_WOO_USDT',
            //         fee => '0.0024',
            //         side => 'BUY',
            //         executed_timestamp => '1641482113.084',
            //         order_id => '87541111',
            //         executed_price => '1',
            //         executed_quantity => '12',
            //         fee_asset => 'WOO',
            //         is_maker => '1'
            //       }
            //     )
            // }
            //
            return $this->parse_order($response, $market);
        }) ();
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple orders made by the user
             * @param {string|null} $symbol unified $market $symbol of the $market orders were made in
             * @param {int|null} $since the earliest time in ms to fetch orders for
             * @param {int|null} $limit the maximum number of  orde structures to retrieve
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($since !== null) {
                $request['start_t'] = $since;
            }
            $request['size'] = 500;
            $request['status'] = 'INCOMPLETE';
            $ordersResponse = Async\await($this->v1PrivateGetOrders (array_merge($request, $params)));
            //
            //     {
            //         "success":true,
            //         "meta":array(
            //             "total":1,
            //             "records_per_page":100,
            //             "current_page":1
            //         ),
            //         "rows":array(
            //             {
            //                 "symbol":"PERP_BTC_USDT",
            //                 "status":"FILLED",
            //                 "side":"SELL",
            //                 "created_time":"1611617776.000",
            //                 "updated_time":"1611617776.000",
            //                 "order_id":52121167,
            //                 "order_tag":"default",
            //                 "price":null,
            //                 "type":"MARKET",
            //                 "quantity":0.002,
            //                 "amount":null,
            //                 "visible":0,
            //                 "executed":0.002,
            //                 "total_fee":0.01732885,
            //                 "fee_asset":"USDT",
            //                 "client_order_id":null,
            //                 "average_executed_price":28881.41
            //             }
            //         )
            //     }
            //
            $ordersData = $this->safe_value($ordersResponse, 'data', array());
            $ordersRows = $this->safe_value($ordersData, 'rows', array());
            $total = 0;
            $algoOrdersRows = array();
            for ($i = 0; $i < 50; $i++) {
                $request['size'] = 50;
                $request['page'] = $i + 1;
                $request['algo_type'] = 'STOP';
                $algoOrdersResponse = Async\await($this->v1PrivateGetAlgoOrders (array_merge($request, $params)));
                $algoOrdersData = $this->safe_value($algoOrdersResponse, 'data');
                $algoOrdersMeta = $this->safe_value($algoOrdersData, 'meta');
                $newRows = $this->safe_value($algoOrdersData, 'rows');
                $total = $total . count($newRows);
                $algoOrdersRows = $this->array_concat($algoOrdersRows, $newRows);
                $knownTotal = $this->safe_integer($algoOrdersMeta, 'total');
                if ($total >= $knownTotal) {
                    break;
                }
            }
            $allOrdersData = $this->array_concat($ordersRows, $algoOrdersRows);
            return $this->parse_orders($allOrdersData, $market, $since, $limit, $params);
        }) ();
    }

    public function parse_time_in_force($timeInForce) {
        $timeInForces = array(
            'ioc' => 'IOC',
            'fok' => 'FOK',
            'post_only' => 'PO',
        );
        return $this->safe_string($timeInForces, $timeInForce, null);
    }

    public function parse_order_type($type, $algoType = null) {
        if ($algoType !== null) {
            if ($algoType === 'take_profit') {
                if ($type === 'market') {
                    return 'stop';
                } else {
                    return 'stopLimit';
                }
            }
        }
        // LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE
        $types = array(
            'limit' => 'limit',
            'market' => 'market',
            'post_only' => 'limit',
            'ioc' => 'limit',
            'fok' => 'limit',
            'liquidate' => 'limit',
            // 'stop_market' => 'stop',
            // 'take_profit_market' => 'stop',
            // 'take_profit_limit' => 'stopLimit',
            // 'trigger_limit' => 'stopLimit',
            // 'trigger_market' => 'stop',
        );
        return $this->safe_string_lower($types, $type, $type);
    }

    public function parse_order($order, $market = null) {
        $isAlgoOrder = 'algoType' in $order;
        if ($isAlgoOrder) {
            return $this->parse_algo_order($order, $market);
        } else {
            return $this->parse_regular_order($order, $market);
        }
    }

    public function parse_regular_order($order, $market = null) {
        //
        // Possible input functions:
        // * createOrder
        // * cancelOrder
        // * fetchOrder
        // * fetchOrders
        // $isFromFetchOrder = (is_array($order) && array_key_exists('order_tag', $order)); TO_DO
        $timestamp = $this->safe_timestamp_2($order, 'timestamp', 'created_time');
        $orderId = $this->safe_string_2($order, 'order_id', 'orderId');
        $clientOrderId = $this->safe_string_2($order, 'client_order_id', 'clientOrderId'); // Somehow, this always returns 0 for limit $order
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $price = $this->safe_string_2($order, 'order_price', 'price');
        $amount = $this->safe_string_2($order, 'order_quantity', 'quantity'); // This is base $amount
        $cost = $this->safe_string_2($order, 'order_amount', 'amount'); // This is quote $amount
        $orderType = $this->parse_order_type($this->safe_string_lower_2($order, 'order_type', 'type'));
        $status = $this->safe_value($order, 'status');
        $side = $this->safe_string_lower($order, 'side');
        $type = $this->safe_string_upper($order, 'type');
        $postOnly = $type === 'POST_ONLY';
        $filled = $this->safe_value($order, 'executed');
        $average = $this->safe_string_2($order, 'average_executed_price', 'executedPrice');
        $remaining = Precise::string_sub($cost, $filled);
        $fee = $this->safe_value_2($order, 'total_fee', 'totalFee');
        $feeCurrency = $this->safe_string_2($order, 'fee_asset', 'feeAsset');
        $transactions = $this->safe_value($order, 'Transactions');
        return $this->safe_order(array(
            'id' => $orderId,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'status' => $this->parse_order_status($status),
            'symbol' => $symbol,
            'type' => $orderType,
            'timeInForce' => $this->parse_time_in_force($orderType),
            'postOnly' => $postOnly,
            'reduceOnly' => $this->safe_value($order, 'reduce_only'),
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining, // TO_DO
            'cost' => $cost,
            'trades' => $transactions,
            'fee' => array(
                'cost' => $fee,
                'currency' => $feeCurrency,
            ),
            'info' => $order,
        ), $market);
    }

    public function parse_algo_order($order, $market = null) {
        //
        // Possible input functions:
        // * createOrder
        // * cancelOrder
        // * fetchOrder
        // * fetchOrders
        // $isFromFetchOrder = (is_array($order) && array_key_exists('order_tag', $order)); TO_DO
        $timestamp = $this->safe_timestamp_2($order, 'timestamp', 'createdTime');
        $orderId = $this->safe_string($order, 'algoOrderId');
        $clientOrderId = $this->safe_string($order, 'clientOrderId'); // Somehow, this always returns 0 for limit $order
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $price = $this->safe_string_2($order, 'price', 'triggerPrice');
        $stopPrice = $this->safe_string_2($order, 'triggerPrice', 'price');
        $amount = $this->safe_string_2($order, 'order_quantity', 'quantity'); // This is base $amount
        $cost = $this->safe_string_2($order, 'order_amount', 'amount'); // This is quote $amount
        $orderType = $this->parse_order_type($this->safe_string_lower_2($order, 'order_type', 'type'), $this->safe_string_lower($order, 'algoType'));
        $tsOrderType = $orderType;
        if ($orderType === 'market') {
            $tsOrderType = 'stop';
        }
        $status = $this->safe_value($order, 'algoStatus');
        $side = $this->safe_string_lower($order, 'side');
        $filled = $this->safe_value($order, 'executed');
        $average = $this->safe_string($order, 'average_executed_price');
        $remaining = Precise::string_sub($cost, $filled);
        $fee = $this->safe_value($order, 'totalFee');
        $feeCurrency = $this->safe_string($order, 'feeAsset');
        $transactions = $this->safe_value($order, 'Transactions');
        return $this->safe_order(array(
            'id' => $orderId,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'status' => $this->parse_order_status($status),
            'symbol' => $symbol,
            'type' => $tsOrderType,
            'timeInForce' => $this->parse_time_in_force($orderType),
            'postOnly' => null, // TO_DO
            'reduceOnly' => $this->safe_value($order, 'reduceOnly'),
            'side' => $side,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'triggerPrice' => null,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining, // TO_DO
            'cost' => $cost,
            'trades' => $transactions,
            'fee' => array(
                'cost' => $fee,
                'currency' => $feeCurrency,
            ),
            'info' => $order,
            // TEALSTREET
            'reduce' => $this->safe_value($order, 'reduceOnly'),
            'trigger' => 'Mark',
            // we don't know this from api
            // 'close' => $this->safe_value($order, 'closeOnTrigger'),
            // TEALSTREET
        ), $market);
    }

    public function parse_order_status($status) {
        if ($status !== null) {
            $statuses = array(
                'NEW' => 'open',
                'FILLED' => 'closed',
                'CANCEL_SENT' => 'canceled',
                'CANCEL_ALL_SENT' => 'canceled',
                'CANCELLED' => 'canceled',
                'PARTIAL_FILLED' => 'open',
                'REJECTED' => 'rejected',
                'INCOMPLETE' => 'open',
                'REPLACED' => 'open',
                'COMPLETED' => 'closed',
            );
            return $this->safe_string($statuses, $status, $status);
        }
        return $status;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int|null} $limit the maximum amount of order book entries to return
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $limit = min ($limit, 1000);
                $request['max_level'] = $limit;
            }
            $response = Async\await($this->v1PrivateGetOrderbookSymbol (array_merge($request, $params)));
            //
            // {
            //   success => true,
            //   $timestamp => '1641562961192',
            //   asks => array(
            //     array( price => '0.921', quantity => '76.01' ),
            //     array( price => '0.933', quantity => '477.10' ),
            //     ...
            //   ),
            //   bids => array(
            //     array( price => '0.940', quantity => '13502.47' ),
            //     array( price => '0.932', quantity => '43.91' ),
            //     ...
            //   )
            // }
            //
            $timestamp = $this->safe_integer($response, 'timestamp');
            return $this->parse_order_book($response, $symbol, $timestamp, 'bids', 'asks', 'price', 'quantity');
        }) ();
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'resolution' => $this->timeframes[$timeframe],
                'from' => $since / 1000,
            );
            $parsedTimeFrame = $this->parse_timeframe($timeframe);
            $duration = $parsedTimeFrame * 1000 * $limit;
            $to = $this->sum($since, $duration);
            $request['to'] = $to / 1000;
            $response = Async\await($this->v1PublicGetTvHistory (array_merge($request, $params)));
            $res = array();
            if ($response->s === 'ok') {
                $length = count($response->t);
                for ($i = 0; $i < $length; $i++) {
                    $res[] = [
                        $response->t[$i] * 1000,
                        $response->o[$i],
                        $response->h[$i],
                        $response->l[$i],
                        $response->c[$i],
                        $response->v[$i],
                    ];
                }
            } else {
                throw $($response->s);
            }
            return $res;
        }) ();
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        // example response in fetchOHLCV
        return array(
            $this->safe_integer($ohlcv, 'start_timestamp'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $since, $limit, $params) {
            /**
             * fetch all the $trades made from a single order
             * @param {string} $id order $id
             * @param {string|null} $symbol unified $market $symbol
             * @param {int|null} $since the earliest time in ms to fetch $trades for
             * @param {int|null} $limit the maximum number of $trades to retrieve
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?$id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
            }
            $request = array(
                'oid' => $id,
            );
            $response = Async\await($this->v1PrivateGetOrderOidTrades (array_merge($request, $params)));
            // {
            //     success => true,
            //     rows => array(
            //       {
            //         $id => '99111647',
            //         $symbol => 'SPOT_WOO_USDT',
            //         fee => '0.0024',
            //         side => 'BUY',
            //         executed_timestamp => '1641482113.084',
            //         order_id => '87541111',
            //         order_tag => 'default',
            //         executed_price => '1',
            //         executed_quantity => '12',
            //         fee_asset => 'WOO',
            //         is_maker => '1'
            //       }
            //     )
            // }
            $trades = $this->safe_value($response, 'rows', array());
            return $this->parse_trades($trades, $market, $since, $limit, $params);
        }) ();
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all $trades made by the user
             * @param {string|null} $symbol unified $market $symbol
             * @param {int|null} $since the earliest time in ms to fetch $trades for
             * @param {int|null} $limit the maximum number of $trades structures to retrieve
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($since !== null) {
                $request['start_t'] = $since;
            }
            $response = Async\await($this->v1PrivateGetClientTrades (array_merge($request, $params)));
            // {
            //     "success" => true,
            //     "meta" => array(
            //         "records_per_page" => 25,
            //         "current_page" => 1
            //     ),
            //     "rows" => array(
            //         array(
            //             "id" => 5,
            //             "symbol" => "SPOT_BTC_USDT",
            //             "order_id" => 211,
            //             "order_tag" => "default",
            //             "executed_price" => 10892.84,
            //             "executed_quantity" => 0.002,
            //             "is_maker" => 0,
            //             "side" => "SELL",
            //             "fee" => 0,
            //             "fee_asset" => "USDT",
            //             "executed_timestamp" => "1566264290.250"
            //         ),
            //         ...
            //     )
            // }
            $trades = $this->safe_value($response, 'rows', array());
            return $this->parse_trades($trades, $market, $since, $limit, $params);
        }) ();
    }

    public function fetch_accounts($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch all the accounts associated with a profile
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=account-structure account structures~ indexed by the account type
             */
            $response = Async\await($this->v1PrivateGetSubAccountAssets ($params));
            //
            //     {
            //         $rows => [array(
            //                 application_id => '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
            //                 account => 'Main',
            //                 usdt_balance => '4.0'
            //             ),
            //             {
            //                 application_id => '432952aa-a401-4e26-aff6-972920aebba3',
            //                 account => 'subaccount',
            //                 usdt_balance => '1.0'
            //             }
            //         ],
            //         success => true
            //     }
            //
            $rows = $this->safe_value($response, 'rows', array());
            return $this->parse_accounts($rows, $params);
        }) ();
    }

    public function parse_account($account) {
        //
        //     {
        //         application_id => '336952aa-a401-4e26-aff6-972920aebba3',
        //         $account => 'subaccount',
        //         usdt_balance => '1.0',
        //     }
        //
        $accountId = $this->safe_string($account, 'account');
        return array(
            'info' => $account,
            'id' => $this->safe_string($account, 'application_id'),
            'name' => $accountId,
            'code' => null,
            'type' => $accountId === 'Main' ? 'main' : 'subaccount',
        );
    }

    public function fetch_balance($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @see https://docs.woo.org/#get-current-holding-get-balance-new
             * @param {array} $params extra parameters specific to the woo api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->v1PrivateGetClientHolding ($params));
            //
            //     {
            //         "success" => true,
            //         "data" => {
            //             "holding" => array(
            //                 array(
            //                     "token" => "0_token",
            //                     "holding" => 1,
            //                     "frozen" => 0,
            //                     "staked" => 0,
            //                     "unbonding" => 0,
            //                     "vault" => 0,
            //                     "interest" => 0,
            //                     "pendingShortQty" => 0,
            //                     "pendingLongQty" => 0,
            //                     "availableBalance" => 0,
            //                     "updatedTime" => 312321.121
            //                 }
            //             )
            //         ),
            //         "timestamp" => 1673323746259
            //     }
            //
            $data = $this->safe_value($response, 'data');
            return $this->parse_balance($data);
        }) ();
    }

    public function parse_balance($response) {
        $result = array(
            'info' => $response,
        );
        $balances = $this->safe_value($response, 'holding', array());
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $code = $this->safe_currency_code($this->safe_string($balance, 'token'));
            $account = $this->account();
            $account['total'] = $this->safe_string($balance, 'holding');
            $account['free'] = $this->safe_string($balance, 'availableBalance');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $section = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $version = $section[0];
        $access = $section[1];
        $isUdfPath = $path === 'tv/history';
        $pathWithParams = $this->implode_params($path, $params);
        $url = $this->implode_hostname($this->urls['api'][$access]);
        if ($isUdfPath) {
            $url .= '/';
        } else {
            $url .= '/' . $version . '/';
        }
        $params = $this->omit($params, $this->extract_params($path));
        $params = $this->keysort($params);
        if ($access === 'public') {
            if ($isUdfPath) {
                $url .= $pathWithParams;
            } else {
                $url .= $access . '/' . $pathWithParams;
            }
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        } elseif ($access === 'pub') {
            $url .= $pathWithParams;
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        } else {
            $this->check_required_credentials();
            $auth = '';
            $ts = (string) $this->nonce();
            $url .= $pathWithParams;
            $headers = array(
                'orderly-key' => $this->apiKey,
                'orderly-account-id' => $this->uid,
                'orderly-timestamp' => $ts,
            );
            if ($version === 'v1') {
                $auth = $ts . $method . '/' . $version . '/' . $pathWithParams;
                if ($method === 'POST' || $method === 'PUT' || $method === 'DELETE') {
                    $body = $this->json($params);
                    $auth .= $body;
                } else {
                    if ($params) {
                        $query = $this->urlencode($params);
                        $url .= '?' . $query;
                        $auth .= '?' . $query;
                    }
                }
                $headers['content-type'] = 'application/json';
            } else {
                $auth = $this->urlencode($params);
                if ($method === 'POST' || $method === 'PUT' || $method === 'DELETE') {
                    $body = $auth;
                } else {
                    $url .= '?' . $auth;
                }
                $auth .= '|' . $ts;
                $headers['content-type'] = 'application/x-www-form-urlencoded';
            }
            // $headers['orderly-signature'] = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256');
            $signer = new Signer ($this->uid, $this->secret);
            $headers['orderly-signature'] = $signer->sign_request ($auth);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            return; // fallback to default error handler
        }
        //
        //     400 Bad Request array("success":false,"code":-1012,"message":"Amount is required for buy market orders when margin disabled.")
        //
        $success = $this->safe_value($response, 'success');
        $errorCode = $this->safe_string($response, 'code');
        if (!$success) {
            $feedback = $this->id . ' ' . $this->json($response);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
        }
    }

    public function parse_income($income, $market = null) {
        //
        //     {
        //         "id":666666,
        //         "symbol":"PERP_BTC_USDT",
        //         "funding_rate":0.00001198,
        //         "mark_price":28941.04000000,
        //         "funding_fee":0.00069343,
        //         "payment_type":"Pay",
        //         "status":"COMPLETED",
        //         "created_time":"1653616000.666",
        //         "updated_time":"1653616000.605"
        //     }
        //
        $marketId = $this->safe_string($income, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $amount = $this->safe_number($income, 'funding_fee');
        $code = $this->safe_currency_code('USD');
        $id = $this->safe_string($income, 'id');
        $timestamp = $this->safe_timestamp($income, 'updated_time');
        $rate = $this->safe_number($income, 'funding_rate');
        return array(
            'info' => $income,
            'symbol' => $symbol,
            'code' => $code,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'id' => $id,
            'amount' => $amount,
            'rate' => $rate,
        );
    }

    public function fetch_funding_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($since !== null) {
                $request['start_t'] = $since;
            }
            $response = Async\await($this->v1PrivateGetFundingFeeHistory (array_merge($request, $params)));
            //
            //     {
            //         "rows":array(
            //             {
            //                 "id":666666,
            //                 "symbol":"PERP_BTC_USDT",
            //                 "funding_rate":0.00001198,
            //                 "mark_price":28941.04000000,
            //                 "funding_fee":0.00069343,
            //                 "payment_type":"Pay",
            //                 "status":"COMPLETED",
            //                 "created_time":"1653616000.666",
            //                 "updated_time":"1653616000.605"
            //             }
            //         ),
            //         "meta":array(
            //             "total":235,
            //             "records_per_page":25,
            //             "current_page":1
            //         ),
            //         "success":true
            //     }
            //
            $result = $this->safe_value($response, 'rows', array());
            return $this->parse_incomes($result, $market, $since, $limit);
        }) ();
    }

    public function parse_funding_rate($fundingRate, $market = null) {
        //
        //         {
        //             "symbol":"PERP_AAVE_USDT",
        //             "est_funding_rate":-0.00003447,
        //             "est_funding_rate_timestamp":1653633959001,
        //             "last_funding_rate":-0.00002094,
        //             "last_funding_rate_timestamp":1653631200000,
        //             "next_funding_time":1653634800000
        //         }
        //
        //
        $symbol = $this->safe_string($fundingRate, 'symbol');
        $market = $this->market($symbol);
        $nextFundingTimestamp = $this->safe_integer($fundingRate, 'next_funding_time');
        $estFundingRateTimestamp = $this->safe_integer($fundingRate, 'est_funding_rate_timestamp');
        $lastFundingRateTimestamp = $this->safe_integer($fundingRate, 'last_funding_rate_timestamp');
        return array(
            'info' => $fundingRate,
            'symbol' => $market['symbol'],
            'markPrice' => null,
            'indexPrice' => null,
            'interestRate' => $this->parse_number('0'),
            'estimatedSettlePrice' => null,
            'timestamp' => $estFundingRateTimestamp,
            'datetime' => $this->iso8601($estFundingRateTimestamp),
            'fundingRate' => $this->safe_number($fundingRate, 'est_funding_rate'),
            'fundingTimestamp' => $nextFundingTimestamp,
            'fundingDatetime' => $this->iso8601($nextFundingTimestamp),
            'nextFundingRate' => null,
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => $this->safe_number($fundingRate, 'last_funding_rate'),
            'previousFundingTimestamp' => $lastFundingRateTimestamp,
            'previousFundingDatetime' => $this->iso8601($lastFundingRateTimestamp),
        );
    }

    public function fetch_funding_rate($symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->v1PublicGetFundingRateSymbol (array_merge($request, $params)));
            //
            //     {
            //         "success":true,
            //         "timestamp":1653640572711,
            //         "symbol":"PERP_BTC_USDT",
            //         "est_funding_rate":0.00000738,
            //         "est_funding_rate_timestamp":1653640559003,
            //         "last_funding_rate":0.00000629,
            //         "last_funding_rate_timestamp":1653638400000,
            //         "next_funding_time":1653642000000
            //     }
            //
            return $this->parse_funding_rate($response, $market);
        }) ();
    }

    public function fetch_funding_rates($symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $response = Async\await($this->v1PublicGetFundingRates ($params));
            //
            //     {
            //         "success":true,
            //         "rows":array(
            //             {
            //                 "symbol":"PERP_AAVE_USDT",
            //                 "est_funding_rate":-0.00003447,
            //                 "est_funding_rate_timestamp":1653633959001,
            //                 "last_funding_rate":-0.00002094,
            //                 "last_funding_rate_timestamp":1653631200000,
            //                 "next_funding_time":1653634800000
            //             }
            //         ),
            //         "timestamp":1653633985646
            //     }
            //
            $rows = $this->safe_value($response, 'rows', array());
            $result = $this->parse_funding_rates($rows);
            return $this->filter_by_array($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_funding_rate_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array();
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $symbol = $market['symbol'];
                $request['symbol'] = $market['id'];
            }
            if ($since !== null) {
                $request['start_t'] = $this->parse_to_int($since / 1000);
            }
            $response = Async\await($this->v1PublicGetFundingRateHistory (array_merge($request, $params)));
            //
            //     {
            //         "success":true,
            //         "meta":array(
            //             "total":2464,
            //             "records_per_page":25,
            //             "current_page":1
            //         ),
            //         "rows":array(
            //             {
            //                 "symbol":"PERP_BTC_USDT",
            //                 "funding_rate":0.00000629,
            //                 "funding_rate_timestamp":1653638400000,
            //                 "next_funding_time":1653642000000
            //             }
            //         ),
            //         "timestamp":1653640814885
            //     }
            //
            $result = $this->safe_value($response, 'rows');
            $rates = array();
            for ($i = 0; $i < count($result); $i++) {
                $entry = $result[$i];
                $marketId = $this->safe_string($entry, 'symbol');
                $timestamp = $this->safe_integer($entry, 'funding_rate_timestamp');
                $rates[] = array(
                    'info' => $entry,
                    'symbol' => $this->safe_symbol($marketId),
                    'fundingRate' => $this->safe_number($entry, 'funding_rate'),
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                );
            }
            $sorted = $this->sort_by($rates, 'timestamp');
            return $this->filter_by_symbol_since_limit($sorted, $symbol, $since, $limit);
        }) ();
    }

    public function fetch_leverage($symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            Async\await($this->load_markets());
            $response = Async\await($this->v1PrivateGetClientInfo ($params));
            //
            //     {
            //         "success" => true,
            //         "data" => array(
            //             "applicationId" => "dsa",
            //             "account" => "dsa",
            //             "alias" => "haha",
            //             "accountMode" => "MARGIN",
            //             "leverage" => 1,
            //             "takerFeeRate" => 1,
            //             "makerFeeRate" => 1,
            //             "interestRate" => 1,
            //             "futuresTakerFeeRate" => 1,
            //             "futuresMakerFeeRate" => 1,
            //             "otpauth" => true,
            //             "marginRatio" => 1,
            //             "openMarginRatio" => 1,
            //             "initialMarginRatio" => 1,
            //             "maintenanceMarginRatio" => 1,
            //             "totalCollateral" => 1,
            //             "freeCollateral" => 1,
            //             "totalAccountValue" => 1,
            //             "totalVaultValue" => 1,
            //             "totalStakingValue" => 1
            //         ),
            //         "timestamp" => 1673323685109
            //     }
            //
            $result = $this->safe_value($response, 'data');
            $leverage = $this->safe_number($result, 'leverage');
            return array(
                'info' => $response,
                'leverage' => $leverage,
            );
        }) ();
    }

    public function set_leverage($leverage, $symbol = null, $params = array ()) {
        return Async\async(function () use ($leverage, $symbol, $params) {
            Async\await($this->load_markets());
            if (($leverage !== 1) && ($leverage !== 2) && ($leverage !== 3) && ($leverage !== 4) && ($leverage !== 5) && ($leverage !== 10) && ($leverage !== 15) && ($leverage !== 20) && ($leverage !== 50)) {
                throw new BadRequest($this->id . ' $leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
            }
            $request = array(
                'leverage' => $leverage,
            );
            return Async\await($this->v1PrivatePostClientLeverage (array_merge($request, $params)));
        }) ();
    }

    public function fetch_position($symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->v1PrivateGetPositionSymbol (array_merge($request, $params)));
            //
            //     {
            //         "symbol":"PERP_ETC_USDT",
            //         "holding":0.0,
            //         "pnl_24_h":0,
            //         "settle_price":0.0,
            //         "average_open_price":0,
            //         "success":true,
            //         "mark_price":22.6955,
            //         "pending_short_qty":0.0,
            //         "pending_long_qty":0.0,
            //         "fee_24_h":0,
            //         "timestamp":"1652231044.920"
            //     }
            //
            return $this->parse_position($response, $market);
        }) ();
    }

    public function fetch_positions($symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            Async\await($this->load_markets());
            $response = Async\await($this->v1PrivateGetPositions ($params));
            //
            //     {
            //         "success" => true,
            //         "data" => {
            //             "positions" => array(
            //                 array(
            //                     "symbol" => "0_symbol",
            //                     "holding" => 1,
            //                     "pendingLongQty" => 0,
            //                     "pendingShortQty" => 1,
            //                     "settlePrice" => 1,
            //                     "averageOpenPrice" => 1,
            //                     "pnl24H" => 1,
            //                     "fee24H" => 1,
            //                     "markPrice" => 1,
            //                     "estLiqPrice" => 1,
            //                     "timestamp" => 12321321
            //                 }
            //             )
            //         ),
            //         "timestamp" => 1673323880342
            //     }
            //
            $result = $this->safe_value($response, 'data', array());
            $positions = $this->safe_value($result, 'positions', array());
            return $this->parse_positions($positions, $symbols);
        }) ();
    }

    public function parse_position($position, $market = null) {
        //
        //     {
        //         "symbol" => "0_symbol",
        //         "holding" => 1,
        //         "pendingLongQty" => 0,
        //         "pendingShortQty" => 1,
        //         "settlePrice" => 1,
        //         "averageOpenPrice" => 1,
        //         "pnl24H" => 1,
        //         "fee24H" => 1,
        //         "markPrice" => 1,
        //         "estLiqPrice" => 1,
        //         "timestamp" => 12321321
        //     }
        //
        $contract = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($contract, $market);
        $size = $this->safe_string($position, 'holding');
        $side = null;
        if (Precise::string_gt($size, '0')) {
            $side = 'long';
        } else {
            $side = 'short';
        }
        $contractSize = $this->safe_string($market, 'contractSize');
        $markPrice = $this->safe_string($position, 'markPrice');
        $timestamp = $this->safe_timestamp($position, 'timestamp');
        $entryPrice = $this->safe_string($position, 'averageOpenPrice');
        $priceDifference = Precise::string_sub($markPrice, $entryPrice);
        $unrealisedPnl = Precise::string_mul($priceDifference, $size);
        return array(
            'info' => $position,
            'id' => $market['symbol'] . ':' . $side,
            'symbol' => $market['symbol'],
            'notional' => null,
            'marginMode' => 'cross',
            'liquidationPrice' => $this->safe_number($position, 'estLiqPrice'),
            'entryPrice' => $this->parse_number($entryPrice),
            'realizedPnl' => $this->safe_string($position, 'pnl24H'),
            'unrealizedPnl' => $this->parse_number($unrealisedPnl),
            'percentage' => null,
            'contracts' => $this->parse_number($size),
            'contractSize' => $this->parse_number($contractSize),
            'markPrice' => $this->parse_number($markPrice),
            'side' => $side,
            'hedged' => false,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'maintenanceMargin' => null,
            'maintenanceMarginPercentage' => null,
            'collateral' => null,
            'initialMargin' => null,
            'initialMarginPercentage' => null,
            'leverage' => null,
            'marginRatio' => null,
        );
    }

    public function default_network_code_for_currency($code) {
        $currencyItem = $this->currency($code);
        $networks = $currencyItem['networks'];
        $networkKeys = is_array($networks) ? array_keys($networks) : array();
        for ($i = 0; $i < count($networkKeys); $i++) {
            $network = $networkKeys[$i];
            if ($network === 'ETH') {
                return $network;
            }
        }
        // if it was not returned according to above options, then return the first $network of currency
        return $this->safe_value($networkKeys, 0);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} $params extra parameters specific to the paymium api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->v1PublicGetFuturesSymbol (array_merge($request, $params)));
            //
            // {
            //   "symbol" => "BTC-USDT",
            //   "priceChange" => "10.00",
            //   "priceChangePercent" => "10",
            //   "lastPrice" => "5738.23",
            //   "lastVolume" => "31.21",
            //   "highPrice" => "5938.23",
            //   "lowPrice" => "5238.23",
            //   "volume" => "23211231.13",
            //   "dayVolume" => "213124412412.47",
            //   "openPrice" => "5828.32"
            // }
            //
            $ticker = $this->safe_value($response, 'info');
            return $this->parse_ticker($ticker, $market);
        }) ();
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // {
        //   "symbol" => "PERP_BTC_USDT",
        //   "index_price" => 56727.31344564,
        //   "mark_price" => 56727.31344564,
        //   "est_funding_rate" => 0.12345689,
        //   "last_funding_rate" => 0.12345689,
        //   "next_funding_time" => 1567411795000,
        //   "open_interest" => 0.12345689,
        //   "24h_open" => 0.16112,
        //   "24h_close" => 0.32206,
        //   "24h_high" => 0.33000,
        //   "24h_low" => 0.14251,
        //   "24h_volume" => 89040821.98,
        //   "24h_amount" => 22493062.21
        // }
        //
        $symbol = $this->safe_symbol(null, $market);
        $timestamp = $this->milliseconds();
        $baseVolume = $this->safe_string($ticker, '24h_volume');
        $openFloat = $this->safe_float($ticker, '24h_open');
        $currentFloat = $this->safe_float($ticker, 'index_price');
        $percentage = $currentFloat / $openFloat * 100;
        $last = $this->safe_string($ticker, 'index_price');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, '24h_high'),
            'low' => $this->safe_string($ticker, '24h_low'),
            'bid' => $this->safe_string($ticker, 'index_price'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'index_price'),
            'askVolume' => null,
            'open' => $this->safe_string($ticker, '24h_open'),
            'close' => $last,
            'last' => $last,
            'mark' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->number_to_string($percentage),
            'average' => null,
            'baseVolume' => $baseVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_account_configuration($symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $leverageInfo = Async\await($this->fetch_leverage($market['id']));
            $leverage = $this->safe_integer($leverageInfo, 'leverage');
            $accountConfig = array(
                'marginMode' => 'cross',
                'positionMode' => 'oneway',
                'markets' => array(),
                'leverage' => $leverage,
            );
            $leverageConfigs = $accountConfig['markets'];
            $leverageConfigs[$market['symbol']] = array(
                'leverage' => $leverage,
                'buyLeverage' => $leverage,
                'sellLeverage' => $leverage,
            );
            return $accountConfig;
        }) ();
    }
}
