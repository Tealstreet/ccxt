<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import

class blofin extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'blofin',
            'name' => 'Blofin',
            'countries' => array( 'KY' ), // Cayman Islands
            'rateLimit' => 100,
            'version' => 'v1',
            'certified' => false,
            'pro' => true,
            'hostname' => 'blofin.com',
            'has' => array(
                'CORS' => null,
                'spot' => false,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'borrowMargin' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelWithdraw' => false, // exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs => https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                'createDepositAddress' => false,
                'createMarketOrder' => false,
                'createOrder' => true,
                'createReduceOnlyOrder' => true,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchCanceledOrders' => false,
                'fetchClosedOrder' => false,
                'fetchClosedOrders' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchLedger' => true,
                'fetchLeverage' => true,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrder' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => true,
                'fetchPosition' => false,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => false,
                'reduceMargin' => false,
                'repayMargin' => false,
                'setLeverage' => true,
                'setMargin' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1H',
                '2h' => '2H',
                '4h' => '4H',
                '6h' => '6H',
                '12h' => '12H',
                '1d' => '1D',
                '1w' => '1W',
                '1M' => '1M',
                '3M' => '3M',
                '6M' => '6M',
                '1y' => '1Y',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
                'api' => array(
                    'rest' => 'https://openapi.blofin.com',
                ),
                'www' => 'https://blofin.com/',
                'doc' => array(
                    'https://docs.blofin.com/',
                ),
            ),
            'api' => array(
                'v1' => array(
                    'public' => array(
                        'get' => array(
                            'market/instruments' => 1,
                            'market/tickers' => 1,
                            'market/candles' => 1,
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'account/leverage-info' => 1,
                            'asset/balances' => 1,
                            'account/positions' => 1,
                            'trade/orders-pending' => 1,
                            'trade/orders-tpsl-pending' => 1,
                            // 'client/token' => 1,
                            // 'order/{oid}' => 1,
                            // 'client/order/{client_order_id}' => 1,
                            // 'orders' => 1,
                            // 'orderbook/{symbol}' => 1,
                            // 'client/trade/{tid}' => 1,
                            // 'order/{oid}/trades' => 1,
                            // 'client/trades' => 1,
                            // 'client/info' => 60,
                            // 'asset/deposit' => 10,
                            // 'asset/history' => 60,
                            // 'sub_account/all' => 60,
                            // 'sub_account/assets' => 60,
                            // 'token_interest' => 60,
                            // 'token_interest/{token}' => 60,
                            // 'interest/history' => 60,
                            // 'interest/repay' => 60,
                            // 'funding_fee/history' => 30,
                            // 'positions' => 3.33, // 30 requests per 10 seconds
                            // 'position/{symbol}' => 3.33,
                        ),
                        'post' => array(
                            'order' => 5, // 2 requests per 1 second per symbol
                            'asset/main_sub_transfer' => 30, // 20 requests per 60 seconds
                            'asset/withdraw' => 30,  // implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#token-withdraw
                            'interest/repay' => 60,
                            'client/account_mode' => 120,
                            'client/leverage' => 120,
                        ),
                        'delete' => array(
                            'order' => 1,
                            'client/order' => 1,
                            'orders' => 1,
                            'asset/withdraw' => 120,  // implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0002'),
                    'taker' => $this->parse_number('0.0005'),
                ),
            ),
            'options' => array(
                'createMarketBuyOrderRequiresPrice' => true,
                // these network aliases require manual mapping here
                'network-aliases-for-tokens' => array(
                    'HT' => 'ERC20',
                    'OMG' => 'ERC20',
                    'UATOM' => 'ATOM',
                    'ZRX' => 'ZRX',
                ),
                'networks' => array(
                    'TRX' => 'TRON',
                    'TRC20' => 'TRON',
                    'ERC20' => 'ETH',
                    'BEP20' => 'BSC',
                ),
                // override defaultNetworkCodePriorities for a specific currency
                'defaultNetworkCodeForCurrencies' => array(
                    // 'USDT' => 'TRC20',
                    // 'BTC' => 'BTC',
                ),
                'transfer' => array(
                    'fillResponseFromRequest' => true,
                ),
                'brokerId' => 'ab82cb09-cfec-4473-80a3-b740779d0644',
            ),
            'commonCurrencies' => array(),
            'exceptions' => array(
                'exact' => array(
                    '-1000' => '\\ccxt\\ExchangeError', // array( "code" => -1000,  "message" => "An unknown error occurred while processing the request" )
                    '-1001' => '\\ccxt\\AuthenticationError', // array( "code" => -1001,  "message" => "The api key or secret is in wrong format" )
                    '-1002' => '\\ccxt\\AuthenticationError', // array( "code" => -1002,  "message" => "API key or secret is invalid, it may because key have insufficient permission or the key is expired/revoked." )
                    '-1003' => '\\ccxt\\RateLimitExceeded', // array( "code" => -1003,  "message" => "Rate limit exceed." )
                    '-1004' => '\\ccxt\\BadRequest', // array( "code" => -1004,  "message" => "An unknown parameter was sent." )
                    '-1005' => '\\ccxt\\BadRequest', // array( "code" => -1005,  "message" => "Some parameters are in wrong format for api." )
                    '-1006' => '\\ccxt\\BadRequest', // array( "code" => -1006,  "message" => "The data is not found in server." )
                    '-1007' => '\\ccxt\\BadRequest', // array( "code" => -1007,  "message" => "The data is already exists or your request is duplicated." )
                    '-1008' => '\\ccxt\\InvalidOrder', // array( "code" => -1008,  "message" => "The quantity of settlement is too high than you can request." )
                    '-1009' => '\\ccxt\\BadRequest', // array( "code" => -1009,  "message" => "Can not request withdrawal settlement, you need to deposit other arrears first." )
                    '-1011' => '\\ccxt\\ExchangeError', // array( "code" => -1011,  "message" => "Can not place/cancel orders, it may because internal network error. Please try again in a few seconds." )
                    '-1012' => '\\ccxt\\BadRequest', // array( "code" => -1012,  "message" => "Amount is required for buy market orders when margin disabled.")  The place/cancel order request is rejected by internal module, it may because the account is in liquidation or other internal errors. Please try again in a few seconds." }
                    '-1101' => '\\ccxt\\InvalidOrder', // array( "code" => -1101,  "message" => "The risk exposure for client is too high, it may cause by sending too big order or the leverage is too low. please refer to client info to check the current exposure." )
                    '-1102' => '\\ccxt\\InvalidOrder', // array( "code" => -1102,  "message" => "The order value (price * size) is too small." )
                    '-1103' => '\\ccxt\\InvalidOrder', // array( "code" => -1103,  "message" => "The order price is not following the tick size rule for the symbol." )
                    '-1104' => '\\ccxt\\InvalidOrder', // array( "code" => -1104,  "message" => "The order quantity is not following the step size rule for the symbol." )
                    '-1105' => '\\ccxt\\InvalidOrder', // array( "code" => -1105,  "message" => "Price is X% too high or X% too low from the mid price." )
                ),
                'broad' => array(
                    'symbol must not be blank' => '\\ccxt\\BadRequest', // when sending 'cancelOrder' without symbol [-1005]
                    'The token is not supported' => '\\ccxt\\BadRequest', // when getting incorrect token's deposit address [-1005]
                    'Your order and symbol are not valid or already canceled' => '\\ccxt\\BadRequest', // actual response whensending 'cancelOrder' for already canceled id [-1006]
                    'Insufficient WOO. Please enable margin trading for leverage trading' => '\\ccxt\\BadRequest', // when selling insufficent token [-1012]
                ),
            ),
            'precisionMode' => TICK_SIZE,
        ));
    }

    public function fetch_markets($params = array ()) {
        $response = $this->v1PublicGetMarketInstruments ($params);
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_markets($data);
    }

    public function parse_markets($markets) {
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $result[] = $this->parse_market($markets[$i]);
        }
        return $result;
    }

    public function parse_market($market) {
        $marketId = $this->safe_string($market, 'instId');
        $parts = explode('-', $marketId);
        $baseId = $this->safe_string($parts, 0);
        $quoteId = $this->safe_string($parts, 1);
        $settleId = 'USDT';
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $settle = $this->safe_currency_code($settleId);
        // $symbol = $base . '/' . $quote . ':' . $settle;
        $symbol = $marketId;
        // $status = $this->safe_number($market, 'status');
        // $contractSize = $this->safe_number($market, 'size', 1);
        // $contractSize = 1;
        $tickSize = $this->safe_string($market, 'tickSize');
        $minAmountString = $this->safe_string($market, 'minSize');
        $minAmount = $this->parse_number($minAmountString);
        $precisionPrice = $this->parse_number($tickSize);
        $maxLeverage = $this->safe_string($market, 'maxLeverage', '1');
        $maxLeverage = Precise::string_max($maxLeverage, '1');
        return array(
            'id' => $marketId,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $settle,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $settleId,
            'type' => 'swap',
            'spot' => false,
            'margin' => true,
            'swap' => true,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => true,
            'linear' => true,
            'inverse' => null,
            'contractSize' => $this->safe_number($market, 'contractValue'),
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $this->safe_number($market, 'lotSize'),
                'price' => $this->parse_number($this->safe_string($market, 'tickSize')),
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => $this->parse_number($maxLeverage),
                ),
                'amount' => array(
                    'min' => $minAmount,
                    'max' => null,
                ),
                'price' => array(
                    'min' => $precisionPrice,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'info' => $this->deep_extend($market, array( 'symbol' => $symbol )),
        );
        // $id = $this->safe_string($market, 'instId');
        // $type = 'future';
        // $contract = true;
        // $baseId = $this->safe_string($market, 'baseCurrency');
        // $quoteId = $this->safe_string($market, 'quoteCurrency');
        // $contactType = $this->safe_string($market, 'contractType');
        // $settleId = $this->safe_string_2($market, 'settleCcy', 'quoteCurrency'); // safe to assume that on blofin $quote == $settle for linear markets -- rayana
        // $settle = $this->safe_currency_code($settleId);
        // $base = $this->safe_currency_code($baseId);
        // $quote = $this->safe_currency_code($quoteId);
        // $symbol = $base . '/' . $quote;
        // $expiry = null;
        // if ($contract) {
        //     $symbol = $symbol . ':' . $settle;
        //     $expiry = $this->safe_integer($market, 'expireTime');
        // }
        // $tickSize = $this->safe_string($market, 'tickSize');
        // $minAmountString = $this->safe_string($market, 'minSize');
        // $minAmount = $this->parse_number($minAmountString);
        // $fees = $this->safe_value_2($this->fees, $type, 'trading', array());
        // $precisionPrice = $this->parse_number($tickSize);
        // $maxLeverage = $this->safe_string($market, 'maxLeverage', '1');
        // $maxLeverage = Precise::string_max($maxLeverage, '1');
        // return array_merge($fees, array(
        //     'id' => $id,
        //     'symbol' => $symbol,
        //     'base' => $base,
        //     'quote' => $quote,
        //     'settle' => $settle,
        //     'baseId' => $baseId,
        //     'quoteId' => $quoteId,
        //     'settleId' => $settleId,
        //     'type' => $type,
        //     'spot' => false,
        //     'margin' => false,
        //     'swap' => false,
        //     'future' => true,
        //     'option' => false,
        //     'active' => true,
        //     'contract' => $contract,
        //     'linear' => $contactType === 'linear',
        //     'inverse' => $contactType === 'inverse',
        //     'contractSize' => $contract ? $this->safe_number($market, 'contractValue') : null,
        //     'expiry' => $expiry,
        //     'expiryDatetime' => $this->iso8601($expiry),
        //     'strike' => null,
        //     'optionType' => null,
        //     'precision' => array(
        //         'amount' => $this->safe_number($market, 'lotSize'),
        //         'price' => $precisionPrice,
        //     ),
        //     'limits' => array(
        //         'leverage' => array(
        //             'min' => $this->parse_number('1'),
        //             'max' => $this->parse_number($maxLeverage),
        //         ),
        //         'amount' => array(
        //             'min' => $minAmount,
        //             'max' => null,
        //         ),
        //         'price' => array(
        //             'min' => $precisionPrice,
        //             'max' => null,
        //         ),
        //         'cost' => array(
        //             'min' => null,
        //             'max' => null,
        //         ),
        //     ),
        //     'info' => $market,
        // ));
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         "instType" => "SPOT",
        //         "instId" => "ETH-BTC",
        //         "last" => "0.07319",
        //         "lastSz" => "0.044378",
        //         "askPx" => "0.07322",
        //         "askSz" => "4.2",
        //         "bidPx" => "0.0732",
        //         "bidSz" => "6.050058",
        //         "open24h" => "0.07801",
        //         "high24h" => "0.07975",
        //         "low24h" => "0.06019",
        //         "volCcy24h" => "11788.887619",
        //         "vol24h" => "167493.829229",
        //         "ts" => "1621440583784",
        //         "sodUtc0" => "0.07872",
        //         "sodUtc8" => "0.07345"
        //     }
        //
        $timestamp = $this->safe_integer($ticker, 'ts');
        $marketId = $this->safe_string($ticker, 'instId');
        $market = $this->safe_market($marketId, $market, '-');
        $symbol = $market['symbol'];
        $last = $this->safe_string($ticker, 'last');
        $open = $this->safe_string($ticker, 'open24h');
        $spot = $this->safe_value($market, 'spot', false);
        $quoteVolume = $spot ? $this->safe_string($ticker, 'volCurrency24h') : null;
        $baseVolume = $this->safe_string($ticker, 'vol24h');
        $high = $this->safe_string($ticker, 'high24h');
        $low = $this->safe_string($ticker, 'low24h');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => $this->safe_string($ticker, 'bidPrice'),
            'bidVolume' => $this->safe_string($ticker, 'bidSize'),
            'ask' => $this->safe_string($ticker, 'askPrice'),
            'askVolume' => $this->safe_string($ticker, 'askSize'),
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} $params extra parameters specific to the okx api endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $response = $this->v1PublicGetMarketTickers ();
        $data = $this->safe_value($response, 'data', array());
        for ($i = 0; $i < count($data); $i++) {
            if ($data[$i]['instId'] === $market['id']) {
                return $this->parse_ticker($data[$i], $market);
            }
        }
    }

    public function fetch_tickers_by_type($type, $symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->v1PublicGetMarketTickers ();
        $tickers = $this->safe_value($response, 'data', array());
        return $this->parse_tickers($tickers, $symbols);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each $market
         * @param {[string]|null} $symbols unified $symbols of the markets to fetch the ticker for, all $market tickers are returned if not assigned
         * @param {array} $params extra parameters specific to the okx api endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $first = $this->safe_string($symbols, 0);
        $market = null;
        if ($first !== null) {
            $market = $this->market($first);
        }
        list($type, $query) = $this->handle_market_type_and_params('fetchTickers', $market, $params);
        return $this->fetch_tickers_by_type($type, $symbols, $query);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent trades for a particular $symbol
         * @param {string} $symbol unified $symbol of the $market to fetch trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of trades to fetch
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchTrades() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PublicGetMarketTrades (array_merge($request, $params));
        //
        // {
        //     success => true,
        //     rows => array(
        //         array(
        //             $symbol => "SPOT_BTC_USDT",
        //             side => "SELL",
        //             executed_price => 46222.35,
        //             executed_quantity => 0.0012,
        //             executed_timestamp => "1641241162.329"
        //         ),
        //         array(
        //             $symbol => "SPOT_BTC_USDT",
        //             side => "SELL",
        //             executed_price => 46222.35,
        //             executed_quantity => 0.0012,
        //             executed_timestamp => "1641241162.329"
        //         ),
        //         array(
        //             $symbol => "SPOT_BTC_USDT",
        //             side => "BUY",
        //             executed_price => 46224.32,
        //             executed_quantity => 0.00039,
        //             executed_timestamp => "1641241162.287"
        //         ),
        //         ...
        //      )
        // }
        //
        $resultResponse = $this->safe_value($response, 'rows', array());
        return $this->parse_trades($resultResponse, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //
        // public fetchTrades
        //
        //     {
        //         "instId" => "ETH-BTC",
        //         "side" => "sell",
        //         "sz" => "0.119501",
        //         "px" => "0.07065",
        //         "tradeId" => "15826757",
        //         "ts" => "1621446178316"
        //     }
        //
        // private fetchMyTrades
        //
        //     {
        //         "side" => "buy",
        //         "fillSz" => "0.007533",
        //         "fillPx" => "2654.98",
        //         "fee" => "-0.000007533",
        //         "ordId" => "317321390244397056",
        //         "instType" => "SPOT",
        //         "instId" => "ETH-USDT",
        //         "clOrdId" => "",
        //         "posSide" => "net",
        //         "billId" => "317321390265368576",
        //         "tag" => "0",
        //         "execType" => "T",
        //         "tradeId" => "107601752",
        //         "feeCcy" => "ETH",
        //         "ts" => "1621927314985"
        //     }
        //
        $id = $this->safe_string($trade, 'tradeId');
        $marketId = $this->safe_string($trade, 'instId');
        $market = $this->safe_market($marketId, $market, '-');
        $symbol = $market['symbol'];
        $timestamp = $this->safe_integer($trade, 'ts');
        $price = $this->safe_string_2($trade, 'fillPx', 'price');
        $amount = $this->safe_string_2($trade, 'fillSz', 'size');
        $side = $this->safe_string($trade, 'side');
        $orderId = $this->safe_string($trade, 'ordId');
        $feeCostString = $this->safe_string($trade, 'fee');
        $fee = null;
        if ($feeCostString !== null) {
            $feeCostSigned = Precise::string_neg($feeCostString);
            $feeCurrencyId = $this->safe_string($trade, 'feeCurrency');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            if ($feeCurrencyCode === null) {
                $feeCurrencyCode = 'USDT';
            }
            $fee = array(
                'cost' => $feeCostSigned,
                'currency' => $feeCurrencyCode,
            );
        }
        $takerOrMaker = $this->safe_string($trade, 'execType');
        if ($takerOrMaker === 'T') {
            $takerOrMaker = 'taker';
        } elseif ($takerOrMaker === 'M') {
            $takerOrMaker = 'maker';
        }
        return $this->safe_trade(array(
            'info' => $this->deep_extend($trade, array( 'symbol' => $marketId )),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => $orderId,
            'type' => null,
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function parse_token_and_fee_temp($item, $feeTokenKey, $feeAmountKey) {
        $feeCost = $this->safe_string($item, $feeAmountKey);
        $fee = null;
        if ($feeCost !== null) {
            $feeCurrencyId = $this->safe_string($item, $feeTokenKey);
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrencyCode,
            );
        }
        return $fee;
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        /**
         * create a trade order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float|null} $price the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        // quick order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 29116.0
        // array('positionMode' => 'unknown', 'timeInForce' => 'PO', 'reduceOnly' => False)
        //
        // limit order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 28520.0
        // array('positionMode' => 'unknown', 'timeInForce' => 'PO', 'reduceOnly' => False)
        //
        // no post = 'timeInForce' => 'GTC',
        //
        // SL
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // array('positionMode' => 'unknown', 'stopPrice' => 27663.0, 'timeInForce' => 'GTC', 'trigger' => 'Last', 'close' => True, 'basePrice' => 29024.0)
        //
        // TP
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // array('positionMode' => 'unknown', 'stopPrice' => 30150.0, 'timeInForce' => 'GTC', 'trigger' => 'Last', 'close' => True, 'basePrice' => 29024.0)
        //
        // LIMIT TP
        //
        // BTC/USDT:USDT
        // stopLimit
        // sell
        // 4.0
        // 33000.0
        // array('positionMode' => 'unknown', 'stopPrice' => 32000.0, 'timeInForce' => 'GTC', 'trigger' => 'Last', 'close' => True, 'basePrice' => 29024.0)
        $reduceOnly = $this->safe_value_2($params, 'reduceOnly', 'close');
        $orderType = strtoupper($type);
        if ($orderType === 'STOP' || $orderType === 'STOPLIMIT') {
            $this->load_markets();
            $market = $this->market($symbol);
            $orderSide = strtoupper($side);
            $algoOrderType = 'MARKET';
            if ($orderType !== 'STOP') {
                $algoOrderType = 'LIMIT';
            }
            $triggerPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
            $request = array(
                'symbol' => $market['id'],
                'algoType' => 'STOP',
                'type' => $algoOrderType,
                'side' => $orderSide,
            );
            if ($reduceOnly) {
                $request['reduceOnly'] = $reduceOnly;
            }
            if ($price !== null) {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $request['triggerPrice'] = $triggerPrice;
            $request['quantity'] = $this->amount_to_precision($symbol, $amount);
            $params = $this->omit($params, array( 'clOrdID', 'clientOrderId', 'postOnly', 'timeInForce' ));
            // $response = $this->v3PrivatePostAlgoOrder (array_merge($request, $params));
            $brokerId = $this->safe_string($this->options, 'brokerId');
            if ($brokerId !== null) {
                $request['brokerId'] = $brokerId;
            }
            $response = $this->v3PrivatePostAlgoOrder ($request);
            // {
            //     success => true,
            //     timestamp => '1641383206.489',
            //     order_id => '86980774',
            //     order_type => 'LIMIT',
            //     order_price => '1', // null for 'MARKET' order
            //     order_quantity => '12', // null for 'MARKET' order
            //     order_amount => null, // NOT-null for 'MARKET' order
            //     client_order_id => '0'
            // }
            // $response -> $data -> $rows -> [0]
            $data = $this->safe_value($response, 'data');
            $rows = $this->safe_value($data, 'rows', array());
            // return array_merge(
            //     $this->parse_order($rows[0], $market),
            //     array( 'type' => $type )
            // );
            return array_merge(
                $this->parse_order($rows[0], $market),
                array( 'status' => 'open' )
            );
        } else {
            $this->load_markets();
            $market = $this->market($symbol);
            $orderSide = strtoupper($side);
            $request = array(
                'symbol' => $market['id'],
                'order_type' => $orderType, // LIMIT/MARKET/IOC/FOK/POST_ONLY/ASK/BID
                'side' => $orderSide,
            );
            $isMarket = $orderType === 'MARKET';
            $timeInForce = $this->safe_string_lower($params, 'timeInForce');
            $postOnly = $this->is_post_only($isMarket, null, $params);
            if ($postOnly) {
                $request['order_type'] = 'POST_ONLY';
            } elseif ($timeInForce === 'fok') {
                $request['order_type'] = 'FOK';
            } elseif ($timeInForce === 'ioc') {
                $request['order_type'] = 'IOC';
            }
            if ($reduceOnly) {
                $request['reduce_only'] = $reduceOnly;
            }
            if ($price !== null) {
                $request['order_price'] = $this->price_to_precision($symbol, $price);
            }
            $request['order_quantity'] = $this->amount_to_precision($symbol, $amount);
            $clientOrderId = $this->safe_string_2($params, 'clOrdID', 'clientOrderId');
            if ($clientOrderId !== null) {
                $request['client_order_id'] = $clientOrderId;
            }
            $brokerId = $this->safe_string($this->options, 'brokerId');
            if ($brokerId !== null) {
                $request['broker_id'] = $brokerId;
            }
            $params = $this->omit($params, array( 'clOrdID', 'clientOrderId', 'postOnly', 'timeInForce' ));
            $response = $this->v1PrivatePostOrder (array_merge($request, $params));
            // {
            //     success => true,
            //     timestamp => '1641383206.489',
            //     order_id => '86980774',
            //     order_type => 'LIMIT',
            //     order_price => '1', // null for 'MARKET' order
            //     order_quantity => '12', // null for 'MARKET' order
            //     order_amount => null, // NOT-null for 'MARKET' order
            //     client_order_id => '0'
            // }
            return array_merge(
                $this->parse_order($response, $market),
                array( 'type' => $type, 'status' => 'open' )
            );
        }
    }

    public function edit_order($id, $symbol, $type, $side, $amount, $price = null, $params = array ()) {
        /**
         * edit a trade order
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float|null} $price the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'oid' => $id,
            // 'quantity' => $this->amount_to_precision($symbol, $amount),
            // 'price' => $this->price_to_precision($symbol, $price),
        );
        if ($price !== null && $type !== 'stop') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $triggerPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
        if ($triggerPrice !== null) {
            $request['triggerPrice'] = $triggerPrice;
        }
        if ($amount !== null) {
            $request['quantity'] = $this->amount_to_precision($symbol, $amount);
        }
        $method = 'v3PrivatePutOrderOid';
        if ($this->maybe_algo_order_id($id)) {
            $method = 'v3PrivatePutAlgoOrderOid';
        }
        $response = $this->$method (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "status" => "string",
        //             "success" => true
        //         ),
        //         "message" => "string",
        //         "success" => true,
        //         "timestamp" => 0
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data, $market);
    }

    public function maybe_algo_order_id($id) {
        $stringId = $this->number_to_string($id);
        if (strlen($stringId) < 9) {
            return true;
        }
        return false;
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        if ($this->maybe_algo_order_id($id)) {
            return $this->cancel_algo_order($id, $symbol, $params);
        } else {
            return $this->cancel_regular_order($id, $symbol, $params);
        }
    }

    public function cancel_algo_order($id, $symbol = null, $params = array ()) {
        $request = array();
        $request['oid'] = $id;
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request['symbol'] = $market['id'];
        $response = $this->v3PrivateDeleteAlgoOrderOid (array_merge($request, $params));
        //
        // array( success => true, status => 'CANCEL_SENT' )
        //
        $extendParams = array( 'symbol' => $symbol );
        $extendParams['id'] = $id;
        return array_merge($this->parse_order($response), $extendParams);
    }

    public function cancel_regular_order($id, $symbol = null, $params = array ()) {
        $request = array();
        $clientOrderIdUnified = $this->safe_string_2($params, 'clOrdID', 'clientOrderId');
        $clientOrderIdExchangeSpecific = $this->safe_string_2($params, 'client_order_id', $clientOrderIdUnified);
        $isByClientOrder = $clientOrderIdExchangeSpecific !== null;
        if ($isByClientOrder) {
            $request['client_order_id'] = $clientOrderIdExchangeSpecific;
            $params = $this->omit($params, array( 'clOrdID', 'clientOrderId', 'client_order_id' ));
        } else {
            $request['order_id'] = $id;
        }
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request['symbol'] = $market['id'];
        $response = $this->v1PrivateDeleteOrder (array_merge($request, $params));
        //
        // array( success => true, status => 'CANCEL_SENT' )
        //
        $extendParams = array( 'symbol' => $symbol );
        if ($isByClientOrder) {
            $extendParams['client_order_id'] = $clientOrderIdExchangeSpecific;
        } else {
            $extendParams['id'] = $id;
        }
        return array_merge($this->parse_order($response), $extendParams);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        /**
         * cancel all open orders in a $market
         * @param {string|null} $symbol unified $market $symbol
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} an list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' canelOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->v1PrivateDeleteOrders (array_merge($request, $params));
        $this->v3PrivateDeleteAlgoOrdersPending (array_merge($request, $params));
        //
        //     {
        //         "success":true,
        //         "status":"CANCEL_ALL_SENT"
        //     }
        //
        return $response;
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         * @param {string|null} $symbol unified $symbol of the $market the order was made in
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $market = ($symbol !== null) ? $this->market($symbol) : null;
        $request = array();
        $clientOrderId = $this->safe_string_2($params, 'clOrdID', 'clientOrderId');
        $chosenSpotMethod = null;
        if ($this->maybe_algo_order_id($id)) {
            $chosenSpotMethod = 'v3PrivateDeleteAlgoOrderOid';
        } elseif ($clientOrderId) {
            $chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
            $request['client_order_id'] = $clientOrderId;
        } else {
            $chosenSpotMethod = 'v1PrivateGetOrderOid';
            $request['oid'] = $id;
        }
        $response = $this->$chosenSpotMethod (array_merge($request, $params));
        //
        // {
        //     success => true,
        //     $symbol => 'SPOT_WOO_USDT',
        //     status => 'FILLED', // FILLED, NEW
        //     side => 'BUY',
        //     created_time => '1641480933.000',
        //     order_id => '87541111',
        //     order_tag => 'default',
        //     price => '1',
        //     type => 'LIMIT',
        //     quantity => '12',
        //     amount => null,
        //     visible => '12',
        //     executed => '12', // or any partial amount
        //     total_fee => '0.0024',
        //     fee_asset => 'WOO',
        //     client_order_id => null,
        //     average_executed_price => '1',
        //     Transactions => array(
        //       {
        //         $id => '99111647',
        //         $symbol => 'SPOT_WOO_USDT',
        //         fee => '0.0024',
        //         side => 'BUY',
        //         executed_timestamp => '1641482113.084',
        //         order_id => '87541111',
        //         executed_price => '1',
        //         executed_quantity => '12',
        //         fee_asset => 'WOO',
        //         is_maker => '1'
        //       }
        //     )
        // }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        throw new NotSupported($this->id . ' fetchOrders() is not supported yet');
    }

    public function parse_order($order, $market = null) {
        //
        // createOrder
        //
        //     {
        //         "clOrdId" => "oktswap6",
        //         "ordId" => "312269865356374016",
        //         "tag" => "",
        //         "sCode" => "0",
        //         "sMsg" => ""
        //     }
        //
        // Spot and Swap fetchOrder, fetchOpenOrders
        //
        //     {
        //         "accFillSz" => "0",
        //         "avgPx" => "",
        //         "cTime" => "1621910749815",
        //         "category" => "normal",
        //         "ccy" => "",
        //         "clOrdId" => "",
        //         "fee" => "0",
        //         "feeCcy" => "ETH",
        //         "fillPx" => "",
        //         "fillSz" => "0",
        //         "fillTime" => "",
        //         "instId" => "ETH-USDT",
        //         "instType" => "SPOT",
        //         "lever" => "",
        //         "ordId" => "317251910906576896",
        //         "ordType" => "limit",
        //         "pnl" => "0",
        //         "posSide" => "net",
        //         "px" => "2000",
        //         "rebate" => "0",
        //         "rebateCcy" => "USDT",
        //         "side" => "buy",
        //         "slOrdPx" => "",
        //         "slTriggerPx" => "",
        //         "state" => "live",
        //         "sz" => "0.001",
        //         "tag" => "",
        //         "tdMode" => "cash",
        //         "tpOrdPx" => "",
        //         "tpTriggerPx" => "",
        //         "tradeId" => "",
        //         "uTime" => "1621910749815"
        //     }
        //
        // Algo Order fetchOpenOrders, fetchCanceledOrders, fetchClosedOrders
        //
        //     {
        //         "activePx" => "",
        //         "activePxType" => "",
        //         "actualPx" => "",
        //         "actualSide" => "buy",
        //         "actualSz" => "0",
        //         "algoId" => "431375349042380800",
        //         "cTime" => "1649119897778",
        //         "callbackRatio" => "",
        //         "callbackSpread" => "",
        //         "ccy" => "",
        //         "ctVal" => "0.01",
        //         "instId" => "BTC-USDT-SWAP",
        //         "instType" => "SWAP",
        //         "last" => "46538.9",
        //         "lever" => "125",
        //         "moveTriggerPx" => "",
        //         "notionalUsd" => "467.059",
        //         "ordId" => "",
        //         "ordPx" => "50000",
        //         "ordType" => "trigger",
        //         "posSide" => "long",
        //         "pxLimit" => "",
        //         "pxSpread" => "",
        //         "pxVar" => "",
        //         "side" => "buy",
        //         "slOrdPx" => "",
        //         "slTriggerPx" => "",
        //         "slTriggerPxType" => "",
        //         "state" => "live",
        //         "sz" => "1",
        //         "szLimit" => "",
        //         "tag" => "",
        //         "tdMode" => "isolated",
        //         "tgtCcy" => "",
        //         "timeInterval" => "",
        //         "tpOrdPx" => "",
        //         "tpTriggerPx" => "",
        //         "tpTriggerPxType" => "",
        //         "triggerPx" => "50000",
        //         "triggerPxType" => "last",
        //         "triggerTime" => "",
        //         "uly" => "BTC-USDT"
        //     }
        //
        $id = $this->safe_string_2($order, 'tpslId', 'orderId');
        $timestamp = $this->safe_integer($order, 'createTime');
        $lastTradeTimestamp = $this->safe_integer($order, 'updateTime');
        $side = $this->safe_string($order, 'side');
        $type = $this->safe_string($order, 'orderType');
        $postOnly = null;
        $timeInForce = null;
        if ($type === 'post_only') {
            $postOnly = true;
            $type = 'limit';
        } elseif ($type === 'fok') {
            $timeInForce = 'FOK';
            $type = 'limit';
        } elseif ($type === 'ioc') {
            $timeInForce = 'IOC';
            $type = 'limit';
        }
        $marketId = $this->safe_string($order, 'instId');
        $market = $this->safe_market($marketId, $market);
        $symbol = $marketId;
        $filled = $this->safe_string($order, 'filledSize');
        $price = $this->safe_string_2($order, 'px', 'price');
        $average = $this->safe_string($order, 'averagePrice');
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $feeCostString = $this->safe_string($order, 'fee');
        $amount = null;
        // $cost = null;
        // spot $market buy => "sz" can refer either to base currency units or to quote currency units
        // see documentation => https://www.okx.com/docs-v5/en/#rest-api-trade-place-$order
        // $defaultTgtCcy = $this->safe_string($this->options, 'tgtCcy', 'base_ccy');
        // $tgtCcy = $this->safe_string($order, 'tgtCcy', $defaultTgtCcy);
        // $instType = $this->safe_string($order, 'instType');
        // "sz" refers to the trade currency $amount
        $amount = $this->safe_string($order, 'size');
        $fee = null;
        if ($feeCostString !== null) {
            $feeCostSigned = Precise::string_neg($feeCostString);
            $feeCurrencyId = 'USDT';
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $this->parse_number($feeCostSigned),
                'currency' => $feeCurrencyCode,
            );
        }
        $clientOrderId = $this->safe_string($order, 'clientOrderId');
        if (($clientOrderId !== null) && (strlen($clientOrderId) < 1)) {
            $clientOrderId = null; // fix empty $clientOrderId string
        }
        $stopLossPrice = $this->safe_number_2($order, 'slTriggerPrice', 'slOrderPrice');
        $takeProfitPrice = $this->safe_number_2($order, 'tpTriggerPrice', 'tpOrderPrice');
        $stopPrice = $this->safe_number_n($order, array( 'price' ));
        $reduceOnlyRaw = $this->safe_string($order, 'reduceOnly');
        $reduceOnly = false;
        if ($reduceOnly !== null) {
            $reduceOnly = ($reduceOnlyRaw === 'true');
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'stopLossPrice' => $stopLossPrice,
            'takeProfitPrice' => $takeProfitPrice,
            'stopPrice' => $stopPrice,
            'triggerPrice' => $stopPrice,
            'average' => $average,
            'cost' => null,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => $fee,
            'trades' => null,
            'reduceOnly' => $reduceOnly,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'canceled' => 'canceled',
            'order_failed' => 'canceled',
            'live' => 'open',
            'partially_filled' => 'open',
            'filled' => 'closed',
            'effective' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'instType' => 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'uly' => currency['id'],
            // 'instId' => $market['id'],
            // 'ordType' => 'limit', // $market, $limit, post_only, fok, ioc, comma-separated, stop orders => conditional, oco, trigger, move_order_stop, iceberg, or twap
            // 'state' => 'live', // live, partially_filled
            // 'after' => orderId,
            // 'before' => orderId,
            // 'limit' => $limit, // default 100, max 100
            'limit' => 100,
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instId'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $query = $this->omit($params, array( 'method', 'stop' ));
        $response = $this->v1PrivateGetTradeOrdersPending (array_merge($request, $query));
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_orders($data, $market, $since, $limit);
    }

    public function fetch_open_stop_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'instType' => 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'uly' => currency['id'],
            // 'instId' => $market['id'],
            // 'ordType' => 'limit', // $market, $limit, post_only, fok, ioc, comma-separated, stop orders => conditional, oco, trigger, move_order_stop, iceberg, or twap
            // 'state' => 'live', // live, partially_filled
            // 'after' => orderId,
            // 'before' => orderId,
            // 'limit' => $limit, // default 100, max 100
            'limit' => 100,
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instId'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $query = $this->omit($params, array( 'method', 'stop' ));
        $response = $this->v1PrivateGetTradeOrdersTpslPending (array_merge($request, $query));
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_orders($data, $market, $since, $limit);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $limit = min ($limit, 1000);
            $request['max_level'] = $limit;
        }
        $response = $this->v1PrivateGetOrderbookSymbol (array_merge($request, $params));
        //
        // {
        //   success => true,
        //   $timestamp => '1641562961192',
        //   asks => array(
        //     array( price => '0.921', quantity => '76.01' ),
        //     array( price => '0.933', quantity => '477.10' ),
        //     ...
        //   ),
        //   bids => array(
        //     array( price => '0.940', quantity => '13502.47' ),
        //     array( price => '0.932', quantity => '43.91' ),
        //     ...
        //   )
        // }
        //
        $timestamp = $this->safe_integer($response, 'timestamp');
        return $this->parse_order_book($response, $symbol, $timestamp, 'bids', 'asks', 'price', 'quantity');
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     array(
        //         "1678928760000", // timestamp
        //         "24341.4", // open
        //         "24344", // high
        //         "24313.2", // low
        //         "24323", // close
        //         "628", // contract volume
        //         "2.5819", // base volume
        //         "62800", // quote volume
        //         "0" // candlestick state
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 7),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $params = $this->omit($params, 'price');
        $options = $this->safe_value($this->options, 'fetchOHLCV', array());
        $timezone = $this->safe_string($options, 'timezone', 'UTC');
        if ($limit === null) {
            $limit = 100;
        }
        $duration = $this->parse_timeframe($timeframe);
        $bar = $this->safe_string($this->timeframes, $timeframe, $timeframe);
        if (($timezone === 'UTC') && ($duration >= 21600)) { // if utc and $timeframe >= 6h
            $bar .= strtolower($timezone);
        }
        $request = array(
            'instId' => $market['id'],
            'bar' => $bar,
            'limit' => $limit,
        );
        if ($since !== null) {
            $durationInMilliseconds = $duration * 1000;
            $startTime = max ($since - 1, 0);
            $request['before'] = $startTime;
            $request['after'] = $this->sum($startTime, $durationInMilliseconds * $limit);
        }
        $until = $this->safe_integer($params, 'until');
        if ($until !== null) {
            $request['after'] = $until;
            $params = $this->omit($params, 'until');
        }
        $params = $this->omit($params, 'type');
        $response = $this->v1PublicGetMarketCandles (array_merge($request, $params));
        //
        //     {
        //         "code" => "0",
        //         "msg" => "",
        //         "data" => [
        //             ["1678928760000","24341.4","24344","24313.2","24323","628","2.5819","62800","0"],
        //             ["1678928700000","24324.1","24347.6","24321.7","24341.4","2565","10.5401","256500","1"],
        //             ["1678928640000","24300.2","24324.1","24288","24324.1","3304","13.5937","330400","1"],
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all the $trades made from a single order
         * @param {string} $id order $id
         * @param {string|null} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch $trades for
         * @param {int|null} $limit the maximum number of $trades to retrieve
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?$id=trade-structure trade structures~
         */
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'oid' => $id,
        );
        $response = $this->v1PrivateGetOrderOidTrades (array_merge($request, $params));
        // {
        //     success => true,
        //     rows => array(
        //       {
        //         $id => '99111647',
        //         $symbol => 'SPOT_WOO_USDT',
        //         fee => '0.0024',
        //         side => 'BUY',
        //         executed_timestamp => '1641482113.084',
        //         order_id => '87541111',
        //         order_tag => 'default',
        //         executed_price => '1',
        //         executed_quantity => '12',
        //         fee_asset => 'WOO',
        //         is_maker => '1'
        //       }
        //     )
        // }
        $trades = $this->safe_value($response, 'rows', array());
        return $this->parse_trades($trades, $market, $since, $limit, $params);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all $trades made by the user
         * @param {string|null} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch $trades for
         * @param {int|null} $limit the maximum number of $trades structures to retrieve
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
         */
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['start_t'] = $since;
        }
        $response = $this->v1PrivateGetClientTrades (array_merge($request, $params));
        // {
        //     "success" => true,
        //     "meta" => array(
        //         "records_per_page" => 25,
        //         "current_page" => 1
        //     ),
        //     "rows" => array(
        //         array(
        //             "id" => 5,
        //             "symbol" => "SPOT_BTC_USDT",
        //             "order_id" => 211,
        //             "order_tag" => "default",
        //             "executed_price" => 10892.84,
        //             "executed_quantity" => 0.002,
        //             "is_maker" => 0,
        //             "side" => "SELL",
        //             "fee" => 0,
        //             "fee_asset" => "USDT",
        //             "executed_timestamp" => "1566264290.250"
        //         ),
        //         ...
        //     )
        // }
        $trades = $this->safe_value($response, 'rows', array());
        return $this->parse_trades($trades, $market, $since, $limit, $params);
    }

    public function fetch_accounts($params = array ()) {
        /**
         * fetch all the accounts associated with a profile
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=account-structure account structures~ indexed by the account type
         */
        $response = $this->v1PrivateGetSubAccountAssets ($params);
        //
        //     {
        //         $rows => [array(
        //                 application_id => '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
        //                 account => 'Main',
        //                 usdt_balance => '4.0'
        //             ),
        //             {
        //                 application_id => '432952aa-a401-4e26-aff6-972920aebba3',
        //                 account => 'subaccount',
        //                 usdt_balance => '1.0'
        //             }
        //         ],
        //         success => true
        //     }
        //
        $rows = $this->safe_value($response, 'rows', array());
        return $this->parse_accounts($rows, $params);
    }

    public function parse_account($account) {
        //
        //     {
        //         application_id => '336952aa-a401-4e26-aff6-972920aebba3',
        //         $account => 'subaccount',
        //         usdt_balance => '1.0',
        //     }
        //
        $accountId = $this->safe_string($account, 'account');
        return array(
            'info' => $account,
            'id' => $this->safe_string($account, 'application_id'),
            'name' => $accountId,
            'code' => null,
            'type' => $accountId === 'Main' ? 'main' : 'subaccount',
        );
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://docs.woo.org/#get-current-holding-get-balance-new
         * @param {array} $params extra parameters specific to the woo api endpoint
         * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $this->load_markets();
        $response = $this->v1PrivateGetAssetBalances (array(
            'accountType' => 'futures',
        ));
        //
        //     {
        //         "success" => true,
        //         "data" => {
        //             "holding" => array(
        //                 array(
        //                     "token" => "0_token",
        //                     "holding" => 1,
        //                     "frozen" => 0,
        //                     "staked" => 0,
        //                     "unbonding" => 0,
        //                     "vault" => 0,
        //                     "interest" => 0,
        //                     "pendingShortQty" => 0,
        //                     "pendingLongQty" => 0,
        //                     "availableBalance" => 0,
        //                     "updatedTime" => 312321.121
        //                 }
        //             )
        //         ),
        //         "timestamp" => 1673323746259
        //     }
        //
        return $this->parse_balance($response);
    }

    public function parse_balance($response) {
        $result = array(
            'info' => $response,
        );
        $balances = $this->safe_value($response, 'data', array());
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $code = $this->safe_currency_code($this->safe_string($balance, 'currency'));
            $account = $this->account();
            $account['total'] = $this->safe_string($balance, 'balance');
            $account['free'] = Precise::string_add($this->safe_string($balance, 'available'), $this->safe_string($balance, 'bonus'));
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function get_currency_from_chaincode($networkizedCode, $currency) {
        if ($currency !== null) {
            return $currency;
        } else {
            $parts = explode('_', $networkizedCode);
            $partsLength = count($parts);
            $firstPart = $this->safe_string($parts, 0);
            $currencyId = $this->safe_string($parts, 1, $firstPart);
            if ($partsLength > 2) {
                $currencyId .= '_' . $this->safe_string($parts, 2);
            }
            $currency = $this->safe_currency($currencyId);
        }
        return $currency;
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $isArray = gettype($params) === 'array' && array_keys($params) === array_keys(array_keys($params));
        $request = '/api/' . $this->version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->implode_hostname($this->urls['api']['rest']) . $request;
        // $type = $this->getPathAuthenticationType ($path);
        if ($api[1] === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } elseif ($api[1] === 'private') {
            $this->check_required_credentials();
            $timestamp = $this->number_to_string($this->milliseconds());
            $nonce = $this->uuid();
            $headers = array(
                'ACCESS-KEY' => $this->apiKey,
                'ACCESS-PASSPHRASE' => $this->password,
                'ACCESS-TIMESTAMP' => $timestamp,
                'ACCESS-NONCE' => $nonce,
                // 'OK-FROM' => '',
                // 'OK-TO' => '',
                // 'OK-LIMIT' => '',
            );
            $auth = $request . $method . $timestamp . $nonce;
            if ($method === 'GET') {
                if ($query) {
                    $urlencodedQuery = '?' . $this->urlencode($query);
                    $url .= $urlencodedQuery;
                    $auth = $request . $urlencodedQuery . $method . $timestamp . $nonce;
                }
            } else {
                if ($isArray || $query) {
                    $body = $this->json($query);
                    $auth .= $body;
                }
                $headers['Content-Type'] = 'application/json';
            }
            $signature = $this->binary_to_base64($this->encode($this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256', 'hex')));
            $headers['ACCESS-SIGN'] = $signature;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            return; // fallback to default error handler
        }
        //
        //     400 Bad Request array("success":false,"code":-1012,"message":"Amount is required for buy market orders when margin disabled.")
        //
        $success = $this->safe_value($response, 'success');
        $errorCode = $this->safe_string($response, 'code');
        if (!$success) {
            $feedback = $this->id . ' ' . $this->json($response);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
        }
    }

    public function parse_income($income, $market = null) {
        //
        //     {
        //         "id":666666,
        //         "symbol":"PERP_BTC_USDT",
        //         "funding_rate":0.00001198,
        //         "mark_price":28941.04000000,
        //         "funding_fee":0.00069343,
        //         "payment_type":"Pay",
        //         "status":"COMPLETED",
        //         "created_time":"1653616000.666",
        //         "updated_time":"1653616000.605"
        //     }
        //
        $marketId = $this->safe_string($income, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $amount = $this->safe_number($income, 'funding_fee');
        $code = $this->safe_currency_code('USD');
        $id = $this->safe_string($income, 'id');
        $timestamp = $this->safe_timestamp($income, 'updated_time');
        $rate = $this->safe_number($income, 'funding_rate');
        return array(
            'info' => $income,
            'symbol' => $symbol,
            'code' => $code,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'id' => $id,
            'amount' => $amount,
            'rate' => $rate,
        );
    }

    public function fetch_leverage($symbol, $params = array ()) {
        $this->load_markets();
        $response = $this->v1PrivateGetAccountLeverageInfo ($params);
        $result = $this->safe_value($response, 'data');
        $leverage = $this->safe_number($result, 'leverage');
        $marginMode = $this->safe_string($result, 'marginMode');
        return array(
            'info' => $response,
            'leverage' => $leverage,
            'marginMode' => $marginMode,
        );
    }

    public function set_leverage($leverage, $symbol = null, $params = array ()) {
        $this->load_markets();
        if (($leverage !== 1) && ($leverage !== 2) && ($leverage !== 3) && ($leverage !== 4) && ($leverage !== 5) && ($leverage !== 10) && ($leverage !== 15) && ($leverage !== 20) && ($leverage !== 50)) {
            throw new BadRequest($this->id . ' $leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
        }
        $request = array(
            'leverage' => $leverage,
        );
        return $this->v1PrivatePostClientLeverage (array_merge($request, $params));
    }

    public function fetch_positions($symbols = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'instType' => 'MARGIN', // optional string, MARGIN, SWAP, FUTURES, OPTION
            // 'instId' => $market['id'], // optional string, e.g. 'BTC-USD-190927-5000-C'
            // 'posId' => '307173036051017730', // optional string, Single or multiple position IDs (no more than 20) separated with commas
        );
        if ($symbols !== null) {
            $marketIds = array();
            for ($i = 0; $i < count($symbols); $i++) {
                $entry = $symbols[$i];
                $market = $this->market($entry);
                $marketIds[] = $market['id'];
            }
            $marketIdsLength = count($marketIds);
            if ($marketIdsLength > 0) {
                $request['instId'] = implode(',', $marketIds);
            }
        }
        $response = $this->v1PrivateGetAccountPositions (array_merge($request, $params));
        $positions = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($positions); $i++) {
            $result[] = $this->parse_position($positions[$i]);
        }
        return $this->filter_by_array($result, 'symbol', $symbols, false);
    }

    public function parse_position($position, $market = null) {
        //
        //     {
        //       "adl" => "3",
        //       "availPos" => "1",
        //       "avgPx" => "34131.1",
        //       "cTime" => "1627227626502",
        //       "ccy" => "USDT",
        //       "deltaBS" => "",
        //       "deltaPA" => "",
        //       "gammaBS" => "",
        //       "gammaPA" => "",
        //       "imr" => "170.66093041794787",
        //       "instId" => "BTC-USDT-SWAP",
        //       "instType" => "SWAP",
        //       "interest" => "0",
        //       "last" => "34134.4",
        //       "lever" => "2",
        //       "liab" => "",
        //       "liabCcy" => "",
        //       "liqPx" => "12608.959083877446",
        //       "margin" => "",
        //       "mgnMode" => "cross",
        //       "mgnRatio" => "140.49930117599155",
        //       "mmr" => "1.3652874433435829",
        //       "notionalUsd" => "341.5130010779638",
        //       "optVal" => "",
        //       "pos" => "1",
        //       "posCcy" => "",
        //       "posId" => "339552508062380036",
        //       "posSide" => "long",
        //       "thetaBS" => "",
        //       "thetaPA" => "",
        //       "tradeId" => "98617799",
        //       "uTime" => "1627227626502",
        //       "upl" => "0.0108608358957281",
        //       "uplRatio" => "0.0000636418743944",
        //       "vegaBS" => "",
        //       "vegaPA" => ""
        //     }
        //
        $marketId = $this->safe_string($position, 'instId');
        $market = $this->safe_market($marketId, $market);
        // $symbol = $market['symbol'];
        $symbol = $marketId;
        $contractsString = $this->safe_string($position, 'positions');
        $contracts = null;
        if ($contractsString !== null) {
            $contracts = $this->parse_number($contractsString);
        }
        $notionalString = $this->safe_string($position, 'notionalUsd');
        $notional = $this->parse_number($notionalString);
        $marginType = $this->safe_string($position, 'marginMode');
        $initialMarginString = null;
        $entryPriceString = $this->safe_string($position, 'averagePrice');
        $unrealizedPnlString = $this->safe_string($position, 'unrealizedPnl');
        if ($marginType === 'cross') {
            $initialMarginString = $this->safe_string($position, 'initialMargin');
        }
        //  else {
        //     // $initialMarginString = $this->safe_string($position, 'margin');
        // }
        $maintenanceMarginString = $this->safe_string($position, 'maintenanceMargin');
        $maintenanceMargin = $this->parse_number($maintenanceMarginString);
        $initialMarginPercentage = null;
        $maintenanceMarginPercentage = null;
        if ($market['inverse']) {
            $notionalValue = Precise::string_div(
                Precise::string_mul($contractsString, $market['contractSize']),
                $entryPriceString
            );
            $maintenanceMarginPercentage = Precise::string_div($maintenanceMarginString, $notionalValue);
            $initialMarginPercentage = $this->parse_number(
                Precise::string_div($initialMarginString, $notionalValue, 4)
            );
        } else {
            $maintenanceMarginPercentage = Precise::string_div($maintenanceMarginString, $notionalString);
            $initialMarginPercentage = $this->parse_number(
                Precise::string_div($initialMarginString, $notionalString, 4)
            );
        }
        $rounder = '0.00005'; // round to closest 0.01%
        $maintenanceMarginPercentage = $this->parse_number(
            Precise::string_div(Precise::string_add($maintenanceMarginPercentage, $rounder), '1', 4)
        );
        $collateralString = Precise::string_add($initialMarginString, $unrealizedPnlString);
        $liquidationPrice = $this->safe_number($position, 'liquidationPrice');
        $percentageString = $this->safe_string($position, 'unrealizedPnlRatio');
        $percentage = $this->parse_number(Precise::string_mul($percentageString, '100'));
        $side = $this->safe_string($position, 'positionSide');
        if ($side === 'net') {
            $side = Precise::string_gt($contractsString, '0') ? 'long' : 'short';
        }
        if ($side === 'short' && Precise::string_gt($contractsString, '0')) {
            $contracts = $contracts * -1;
        }
        $timestamp = $this->safe_integer($position, 'updateTime');
        $leverage = $this->safe_integer($position, 'leverage');
        $marginRatio = $this->parse_number(
            Precise::string_div($maintenanceMarginString, $collateralString, 4)
        );
        $id = $symbol . ':' . $side . ':' . $marginType;
        $status = 'closed';
        if ($contractsString !== '0') {
            $status = 'open';
        }
        return array(
            'id' => $id,
            'info' => $this->deep_extend($position, array( 'symbol' => $symbol )),
            'symbol' => $symbol,
            'notional' => $notional,
            'marginType' => $marginType,
            'liquidationPrice' => $liquidationPrice,
            'entryPrice' => $this->parse_number($entryPriceString),
            'unrealizedPnl' => $this->parse_number($unrealizedPnlString),
            'percentage' => $percentage,
            'contracts' => $contracts,
            'contractSize' => $this->parse_number($market['contractSize']),
            'side' => $side,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'maintenanceMargin' => $maintenanceMargin,
            'maintenanceMarginPercentage' => $maintenanceMarginPercentage,
            'collateral' => $this->parse_number($collateralString),
            'initialMargin' => $this->parse_number($initialMarginString),
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentage),
            'leverage' => $leverage,
            'marginRatio' => $marginRatio,
            'isolated' => $marginType !== 'cross',
            'status' => $status,
            'tradeMode' => 'oneway',
            // 'info' => info,
            // 'id' => $id,
            // 'symbol' => $symbol,
            // 'timestamp' => $timestamp,
            // 'datetime' => datetime,
            // 'isolated' => isolated,
            // 'hedged' => hedged,
            // 'side' => $side,
            // 'contracts' => $contracts,
            // 'price' => price,
            // 'markPrice' => markPrice,
            // 'notional' => $notional,
            // 'leverage' => $leverage,
            // 'initialMargin' => initialMargin,
            // 'maintenanceMargin' => $maintenanceMargin,
            // 'initialMarginPercentage' => $initialMarginPercentage,
            // 'maintenanceMarginPercentage' => $maintenanceMarginPercentage,
            // 'unrealizedPnl' => unrealizedPnl,
            // 'pnl' => pnl,
            // 'liquidationPrice' => $liquidationPrice,
            // 'status' => $status,
            // 'entryPrice' => entryPrice,
            // 'marginRatio' => $marginRatio,
            // 'collateral' => collateral,
            // 'marginType' => $marginType,
            // 'percentage' => $percentage,
            // 'maxLeverage' => maxLeverage,
            // 'tradeMode' => tradeMode,
        );
    }

    public function fetch_account_configuration($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $leverageInfo = $this->fetch_leverage($market['id']);
        $leverage = $this->safe_integer($leverageInfo, 'leverage');
        $accountConfig = array(
            'marginMode' => 'cross',
            'positionMode' => 'oneway',
            'markets' => array(),
            'leverage' => $leverage,
        );
        $leverageConfigs = $accountConfig['markets'];
        $leverageConfigs[$market['symbol']] = array(
            'leverage' => $leverage,
            'buyLeverage' => $leverage,
            'sellLeverage' => $leverage,
        );
        return $accountConfig;
    }
}
