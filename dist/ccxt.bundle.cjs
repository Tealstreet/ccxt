'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var require$$1 = require('assert');
var require$$1$1 = require('buffer');
var zlib = require('zlib');
var WebSocket = require('ws');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$1);
var WebSocket__default = /*#__PURE__*/_interopDefaultLegacy(WebSocket);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRegister$C (path, loader) {
	DYNAMIC_REQUIRE_LOADERS[path] = loader;
}

var DYNAMIC_REQUIRE_LOADERS = Object.create(null);
var DYNAMIC_REQUIRE_CACHE = Object.create(null);
var DYNAMIC_REQUIRE_SHORTS = Object.create(null);
var DEFAULT_PARENT_MODULE = {
	id: '<' + 'rollup>', exports: {}, parent: undefined, filename: null, loaded: false, children: [], paths: []
};
var CHECKED_EXTENSIONS = ['', '.js', '.json'];

function normalize (path) {
	path = path.replace(/\\/g, '/');
	var parts = path.split('/');
	var slashed = parts[0] === '';
	for (var i = 1; i < parts.length; i++) {
		if (parts[i] === '.' || parts[i] === '') {
			parts.splice(i--, 1);
		}
	}
	for (var i = 1; i < parts.length; i++) {
		if (parts[i] !== '..') continue;
		if (i > 0 && parts[i - 1] !== '..' && parts[i - 1] !== '.') {
			parts.splice(--i, 2);
			i--;
		}
	}
	path = parts.join('/');
	if (slashed && path[0] !== '/')
	  path = '/' + path;
	else if (path.length === 0)
	  path = '.';
	return path;
}

function join () {
	if (arguments.length === 0)
	  return '.';
	var joined;
	for (var i = 0; i < arguments.length; ++i) {
	  var arg = arguments[i];
	  if (arg.length > 0) {
		if (joined === undefined)
		  joined = arg;
		else
		  joined += '/' + arg;
	  }
	}
	if (joined === undefined)
	  return '.';

	return joined;
}

function isPossibleNodeModulesPath (modulePath) {
	var c0 = modulePath[0];
	if (c0 === '/' || c0 === '\\') return false;
	var c1 = modulePath[1], c2 = modulePath[2];
	if ((c0 === '.' && (!c1 || c1 === '/' || c1 === '\\')) ||
		(c0 === '.' && c1 === '.' && (!c2 || c2 === '/' || c2 === '\\'))) return false;
	if (c1 === ':' && (c2 === '/' || c2 === '\\'))
		return false;
	return true;
}

function dirname (path) {
  if (path.length === 0)
    return '.';

  var i = path.length - 1;
  while (i > 0) {
    var c = path.charCodeAt(i);
    if ((c === 47 || c === 92) && i !== path.length - 1)
      break;
    i--;
  }

  if (i > 0)
    return path.substr(0, i);

  if (path.chartCodeAt(0) === 47 || path.chartCodeAt(0) === 92)
    return path.charAt(0);

  return '.';
}

function commonjsResolveImpl (path, originalModuleDir, testCache) {
	var shouldTryNodeModules = isPossibleNodeModulesPath(path);
	path = normalize(path);
	var relPath;
	if (path[0] === '/') {
		originalModuleDir = '/';
	}
	while (true) {
		if (!shouldTryNodeModules) {
			relPath = originalModuleDir ? normalize(originalModuleDir + '/' + path) : path;
		} else if (originalModuleDir) {
			relPath = normalize(originalModuleDir + '/node_modules/' + path);
		} else {
			relPath = normalize(join('node_modules', path));
		}

		if (relPath.endsWith('/..')) {
			break; // Travelled too far up, avoid infinite loop
		}

		for (var extensionIndex = 0; extensionIndex < CHECKED_EXTENSIONS.length; extensionIndex++) {
			var resolvedPath = relPath + CHECKED_EXTENSIONS[extensionIndex];
			if (DYNAMIC_REQUIRE_CACHE[resolvedPath]) {
				return resolvedPath;
			}
			if (DYNAMIC_REQUIRE_SHORTS[resolvedPath]) {
			  return resolvedPath;
			}
			if (DYNAMIC_REQUIRE_LOADERS[resolvedPath]) {
				return resolvedPath;
			}
		}
		if (!shouldTryNodeModules) break;
		var nextDir = normalize(originalModuleDir + '/..');
		if (nextDir === originalModuleDir) break;
		originalModuleDir = nextDir;
	}
	return null;
}

function commonjsResolve (path, originalModuleDir) {
	var resolvedPath = commonjsResolveImpl(path, originalModuleDir);
	if (resolvedPath !== null) {
		return resolvedPath;
	}
	return require.resolve(path);
}

function commonjsRequire (path, originalModuleDir) {
	var resolvedPath = commonjsResolveImpl(path, originalModuleDir);
	if (resolvedPath !== null) {
    var cachedModule = DYNAMIC_REQUIRE_CACHE[resolvedPath];
    if (cachedModule) return cachedModule.exports;
    var shortTo = DYNAMIC_REQUIRE_SHORTS[resolvedPath];
    if (shortTo) {
      cachedModule = DYNAMIC_REQUIRE_CACHE[shortTo];
      if (cachedModule)
        return cachedModule.exports;
      resolvedPath = commonjsResolveImpl(shortTo, null);
    }
    var loader = DYNAMIC_REQUIRE_LOADERS[resolvedPath];
    if (loader) {
      DYNAMIC_REQUIRE_CACHE[resolvedPath] = cachedModule = {
        id: resolvedPath,
        filename: resolvedPath,
        path: dirname(resolvedPath),
        exports: {},
        parent: DEFAULT_PARENT_MODULE,
        loaded: false,
        children: [],
        paths: [],
        require: function (path, base) {
          return commonjsRequire(path, (base === undefined || base === null) ? cachedModule.path : base);
        }
      };
      try {
        loader.call(commonjsGlobal, cachedModule, cachedModule.exports);
      } catch (error) {
        delete DYNAMIC_REQUIRE_CACHE[resolvedPath];
        throw error;
      }
      cachedModule.loaded = true;
      return cachedModule.exports;
    }	}
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

commonjsRequire.cache = DYNAMIC_REQUIRE_CACHE;
commonjsRequire.resolve = commonjsResolve;

const commonjsRegister$B = commonjsRegister$C;
commonjsRegister$B("/$$rollup_base$$/js/src/static_dependencies/BN/bn.cjs", function (module, exports) {
(function (module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val)
            throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () { };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) {
            return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    module.exports = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        Buffer = require('buffer').Buffer;
    }
    catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) {
            return true;
        }
        return num !== null && typeof num === 'object' &&
            num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
            return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
            return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
            return this._initNumber(number, base, endian);
        }
        if (typeof number === 'object') {
            return this._initArray(number, base, endian);
        }
        if (base === 'hex') {
            base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
        }
        if (base === 16) {
            this._parseHex(number, start);
        }
        else {
            this._parseBase(number, base, start);
        }
        if (number[0] === '-') {
            this.negative = 1;
        }
        this._strip();
        if (endian !== 'le')
            return;
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [number & 0x3ffffff];
            this.length = 1;
        }
        else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
            ];
            this.length = 2;
        }
        else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le')
            return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === 'be') {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                    off -= 26;
                    j++;
                }
            }
        }
        else if (endian === 'le') {
            for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                    off -= 26;
                    j++;
                }
            }
        }
        return this._strip();
    };
    function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        var z = 0;
        for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r <<= 4;
            var b;
            // 'a' - 'f'
            if (c >= 49 && c <= 54) {
                b = c - 49 + 0xa;
                // 'A' - 'F'
            }
            else if (c >= 17 && c <= 22) {
                b = c - 17 + 0xa;
                // '0' - '9'
            }
            else {
                b = c;
            }
            r |= b;
            z |= b;
        }
        assert(!(z & 0xf0), 'Invalid character in ' + str);
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
        }
        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
            w = parseHex(number, i, i + 6);
            this.words[j] |= (w << off) & 0x3ffffff;
            // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
            this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        if (i + 6 !== start) {
            w = parseHex(number, start, i + 6);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) {
                b = c - 49 + 0xa;
                // 'A'
            }
            else if (c >= 17) {
                b = c - 17 + 0xa;
                // '0' - '9'
            }
            else {
                b = c;
            }
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;
        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
            limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
            }
            else {
                this._iaddn(word);
            }
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for (i = 0; i < mod; i++) {
                pow *= base;
            }
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
            }
            else {
                this._iaddn(word);
            }
        }
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype._move = function _move(dest) {
        dest.words = this.words;
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
            this.words[this.length++] = 0;
        }
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
        }
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
        }
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    }
    else {
        BN.prototype.inspect = inspect;
    }
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */
    var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
    ];
    var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                    out = zeros[6 - word.length] + word + out;
                }
                else {
                    out = word + out;
                }
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) {
                out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
                out = '0' + out;
            }
            if (this.negative !== 0) {
                out = '-' + out;
            }
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) {
                    out = zeros[groupSize - r.length] + r + out;
                }
                else {
                    out = r + out;
                }
            }
            if (this.isZero()) {
                out = '0' + out;
            }
            while (out.length % padding !== 0) {
                out = '0' + out;
            }
            if (this.negative !== 0) {
                out = '-' + out;
            }
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
            ret += this.words[1] * 0x4000000;
        }
        else if (this.length === 3 && this.words[2] === 0x01) {
            // NOTE: at this stage it is known that the top bit is set
            ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        }
        else if (this.length > 2) {
            assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
            return this.toArrayLike(Buffer, endian, length);
        };
    }
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
            var word = (this.words[i] << shift) | carry;
            res[position++] = word & 0xff;
            if (position < res.length) {
                res[position++] = (word >> 8) & 0xff;
            }
            if (position < res.length) {
                res[position++] = (word >> 16) & 0xff;
            }
            if (shift === 6) {
                if (position < res.length) {
                    res[position++] = (word >> 24) & 0xff;
                }
                carry = 0;
                shift = 0;
            }
            else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
                res[position++] = 0;
            }
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
            var word = (this.words[i] << shift) | carry;
            res[position--] = word & 0xff;
            if (position >= 0) {
                res[position--] = (word >> 8) & 0xff;
            }
            if (position >= 0) {
                res[position--] = (word >> 16) & 0xff;
            }
            if (shift === 6) {
                if (position >= 0) {
                    res[position--] = (word >> 24) & 0xff;
                }
                carry = 0;
                shift = 0;
            }
            else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
                res[position--] = 0;
            }
        }
    };
    if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
        };
    }
    else {
        BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
            }
            if (t >= 0x40) {
                r += 7;
                t >>>= 7;
            }
            if (t >= 0x8) {
                r += 4;
                t >>>= 4;
            }
            if (t >= 0x02) {
                r += 2;
                t >>>= 2;
            }
            return r + t;
        };
    }
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0)
            return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) {
            r++;
        }
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
            var off = (bit / 26) | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] >>> wbit) & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
            return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26)
                break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
            this.negative ^= 1;
        }
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
            this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length)
            return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
            return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
            b = num;
        }
        else {
            b = this;
        }
        for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length)
            return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
            return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        }
        else {
            a = num;
            b = this;
        }
        for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
            for (; i < a.length; i++) {
                this.words[i] = a.words[i];
            }
        }
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
            return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
            return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
            bytesNeeded--;
        }
        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 0x3ffffff;
        }
        // Handle the residue
        if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
            this.words[off] = this.words[off] | (1 << wbit);
        }
        else {
            this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
            // positive + negative
        }
        else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        }
        else {
            a = num;
            b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
            // Copy the rest of the words
        }
        else if (a !== this) {
            for (; i < a.length; i++) {
                this.words[i] = a.words[i];
            }
        }
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        }
        else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length)
            return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
            // -this - num = -(this + num)
        }
        else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        }
        else {
            a = num;
            b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
                this.words[i] = a.words[i];
            }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
            this.negative = 1;
        }
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) {
            out.words[k] = carry | 0;
        }
        else {
            out.length--;
        }
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) {
        comb10MulTo = smallMulTo;
    }
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) {
            out.words[k] = carry;
        }
        else {
            out.length--;
        }
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
        }
        else if (len < 63) {
            res = smallMulTo(this, num, out);
        }
        else if (len < 1024) {
            res = bigMulTo(this, num, out);
        }
        else {
            res = jumboMulTo(this, num, out);
        }
        return res;
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
            num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += (w / 0x4000000) | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
            return new BN(1);
        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0)
                break;
        }
        if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                if (w[i] === 0)
                    continue;
                res = res.mul(q);
            }
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;
        if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
                this.words[i] = 0;
            }
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
            h = (hint - (hint % 26)) / 26;
        }
        else {
            h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
            }
        }
        else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = (carry << (26 - r)) | (word >>> r);
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s)
            return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) {
            return this;
        }
        if (r !== 0) {
            s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0)
            return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) {
                this.words[i + 1] = 1;
            }
            else {
                this.words[i + 1]++;
            }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0)
            return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        }
        else {
            // Carry
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
            }
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - ((right / 0x4000000) | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0)
            return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
            }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) {
                q.words[m] = 1;
            }
        }
        for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min((qj / bhi) | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                    a.negative ^= 1;
                }
            }
            if (q) {
                q.words[j] = qj;
            }
        }
        if (q) {
            q._strip();
        }
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) {
            a.iushrn(shift);
        }
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
            return {
                div: new BN(0),
                mod: new BN(0)
            };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') {
                div = res.div.neg();
            }
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                    mod.iadd(num);
                }
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') {
                div = res.div.neg();
            }
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                    mod.isub(num);
                }
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
            return {
                div: new BN(0),
                mod: this
            };
        }
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') {
                return {
                    div: this.divn(num.words[0]),
                    mod: null
                };
            }
            if (mode === 'mod') {
                return {
                    div: null,
                    mod: new BN(this.modrn(num.words[0]))
                };
            }
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero())
            return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0))
            return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
            num = -num;
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
            num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = (w / num) | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
            x = x.umod(p);
        }
        else {
            x = x.clone();
        }
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
            if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
            if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            }
            else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
            a = a.umod(p);
        }
        else {
            a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
            if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                    if (x1.isOdd()) {
                        x1.iadd(delta);
                    }
                    x1.iushrn(1);
                }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
            if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                    if (x2.isOdd()) {
                        x2.iadd(delta);
                    }
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            }
            else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) {
            res = x1;
        }
        else {
            res = x2;
        }
        if (res.cmpn(0) < 0) {
            res.iadd(p);
        }
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
            return num.abs();
        if (num.isZero())
            return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while (a.isEven()) {
                a.iushrn(1);
            }
            while (b.isEven()) {
                b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            }
            else if (r === 0 || b.cmpn(1) === 0) {
                break;
            }
            a.isub(b);
        } while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
            return -1;
        if (this.negative === 0 && negative)
            return 1;
        this._strip();
        var res;
        if (this.length > 1) {
            res = 1;
        }
        else {
            if (negative) {
                num = -num;
            }
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
            return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
            return -1;
        if (this.negative === 0 && num.negative !== 0)
            return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
            return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length)
            return 1;
        if (this.length < num.length)
            return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b)
                continue;
            if (a < b) {
                res = -1;
            }
            else if (a > b) {
                res = 1;
            }
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        }
        else if (cmp > 0) {
            r.isub(this.p);
        }
        else {
            r._strip();
        }
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
            input.length -= 10;
        }
        else {
            input.length -= 9;
        }
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
                num.length--;
            }
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) {
            num.words[num.length++] = carry;
        }
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name])
            return primes[name];
        var prime;
        if (name === 'k256') {
            prime = new K256();
        }
        else if (name === 'p224') {
            prime = new P224();
        }
        else if (name === 'p192') {
            prime = new P192();
        }
        else if (name === 'p25519') {
            prime = new P25519();
        }
        else {
            throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        }
        else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime)
            return this.prime.ireduce(a)._forceRed(this);
        a.umod(this.m)._forceRed(this)._move(a);
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
            return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
        }
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
        }
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
            res.iadd(this.m);
        }
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
            res.iadd(this.m);
        }
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
            return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
            }
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        }
        else {
            return this.imod(inv);
        }
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
            return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
            return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
            start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                    res = this.sqr(res);
                }
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0))
                    continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
            this.shift += 26 - (this.shift % 26);
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
        }
        else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
        }
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
            return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
        }
        else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
        }
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module);

});

const commonjsRegister$A = commonjsRegister$C;
commonjsRegister$A("/$$rollup_base$$/js/src/static_dependencies/crypto-js/crypto-js.cjs", function (module, exports) {
(function (root, factory) {
    if (typeof exports === "object") {
        // CommonJS
        module.exports = exports = factory();
    }
    else {
        // Global (browser)
        root.CryptoJS = factory();
    }
}(this, function () {
    /**
     * CryptoJS core components.
     */
    var CryptoJS = CryptoJS || (function (Math, undefined$1) {
        /*
         * Local polyfil of Object.create
         */
        var create = Object.create || (function () {
            function F() { }
            return function (obj) {
                var subtype;
                F.prototype = obj;
                subtype = new F();
                F.prototype = null;
                return subtype;
            };
        }());
        /**
         * CryptoJS namespace.
         */
        var C = {};
        /**
         * Library namespace.
         */
        var C_lib = C.lib = {};
        /**
         * Base object for prototypal inheritance.
         */
        var Base = C_lib.Base = (function () {
            return {
                /**
                 * Creates a new object that inherits from this object.
                 *
                 * @param {Object} overrides Properties to copy into the new object.
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         field: 'value',
                 *
                 *         method: function () {
                 *         }
                 *     });
                 */
                extend: function (overrides) {
                    // Spawn
                    var subtype = create(this);
                    // Augment
                    if (overrides) {
                        subtype.mixIn(overrides);
                    }
                    // Create default initializer
                    if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                        subtype.init = function () {
                            subtype.$super.init.apply(this, arguments);
                        };
                    }
                    // Initializer's prototype is the subtype object
                    subtype.init.prototype = subtype;
                    // Reference supertype
                    subtype.$super = this;
                    return subtype;
                },
                /**
                 * Extends this object and runs the init method.
                 * Arguments to create() will be passed to init().
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var instance = MyType.create();
                 */
                create: function () {
                    var instance = this.extend();
                    instance.init.apply(instance, arguments);
                    return instance;
                },
                /**
                 * Initializes a newly created object.
                 * Override this method to add some logic when your objects are created.
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         init: function () {
                 *             // ...
                 *         }
                 *     });
                 */
                init: function () {
                },
                /**
                 * Copies properties into this object.
                 *
                 * @param {Object} properties The properties to mix in.
                 *
                 * @example
                 *
                 *     MyType.mixIn({
                 *         field: 'value'
                 *     });
                 */
                mixIn: function (properties) {
                    for (var propertyName in properties) {
                        if (properties.hasOwnProperty(propertyName)) {
                            this[propertyName] = properties[propertyName];
                        }
                    }
                    // IE won't copy toString using the loop above
                    if (properties.hasOwnProperty('toString')) {
                        this.toString = properties.toString;
                    }
                },
                /**
                 * Creates a copy of this object.
                 *
                 * @return {Object} The clone.
                 *
                 * @example
                 *
                 *     var clone = instance.clone();
                 */
                clone: function () {
                    return this.init.prototype.extend(this);
                }
            };
        }());
        /**
         * An array of 32-bit words.
         *
         * @property {Array} words The array of 32-bit words.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */
        var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: function (words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined$1) {
                    this.sigBytes = sigBytes;
                }
                else {
                    this.sigBytes = words.length * 4;
                }
            },
            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: function (encoder) {
                return (encoder || Hex).stringify(this);
            },
            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: function (wordArray) {
                // Shortcuts
                var thisWords = this.words;
                var thatWords = wordArray.words;
                var thisSigBytes = this.sigBytes;
                var thatSigBytes = wordArray.sigBytes;
                // Clamp excess bits
                this.clamp();
                // Concat
                if (thisSigBytes % 4) {
                    // Copy one byte at a time
                    for (var i = 0; i < thatSigBytes; i++) {
                        var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                        thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
                    }
                }
                else {
                    // Copy one word at a time
                    for (var i = 0; i < thatSigBytes; i += 4) {
                        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
                    }
                }
                this.sigBytes += thatSigBytes;
                // Chainable
                return this;
            },
            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: function () {
                // Shortcuts
                var words = this.words;
                var sigBytes = this.sigBytes;
                // Clamp
                words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
                words.length = Math.ceil(sigBytes / 4);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: function () {
                var clone = Base.clone.call(this);
                clone.words = this.words.slice(0);
                return clone;
            },
            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: function (nBytes) {
                var words = [];
                var r = (function (m_w) {
                    var m_w = m_w;
                    var m_z = 0x3ade68b1;
                    var mask = 0xffffffff;
                    return function () {
                        m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
                        m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
                        var result = ((m_z << 0x10) + m_w) & mask;
                        result /= 0x100000000;
                        result += 0.5;
                        return result * (Math.random() > .5 ? 1 : -1);
                    };
                });
                for (var i = 0, rcache; i < nBytes; i += 4) {
                    var _r = r((rcache || Math.random()) * 0x100000000);
                    rcache = _r() * 0x3ade67b7;
                    words.push((_r() * 0x100000000) | 0);
                }
                return new WordArray.init(words, nBytes);
            }
        });
        /**
         * Encoder namespace.
         */
        var C_enc = C.enc = {};
        /**
         * Hex encoding strategy.
         */
        var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var hexChars = [];
                for (var i = 0; i < sigBytes; i++) {
                    var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    hexChars.push((bite >>> 4).toString(16));
                    hexChars.push((bite & 0x0f).toString(16));
                }
                return hexChars.join('');
            },
            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: function (hexStr) {
                // Shortcut
                var hexStrLength = hexStr.length;
                // Convert
                var words = [];
                for (var i = 0; i < hexStrLength; i += 2) {
                    words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
                }
                return new WordArray.init(words, hexStrLength / 2);
            }
        };
        /**
         * Latin1 encoding strategy.
         */
        var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var latin1Chars = [];
                for (var i = 0; i < sigBytes; i++) {
                    var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    latin1Chars.push(String.fromCharCode(bite));
                }
                return latin1Chars.join('');
            },
            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: function (latin1Str) {
                // Shortcut
                var latin1StrLength = latin1Str.length;
                // Convert
                var words = [];
                for (var i = 0; i < latin1StrLength; i++) {
                    words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
                }
                return new WordArray.init(words, latin1StrLength);
            }
        };
        /**
         * UTF-8 encoding strategy.
         */
        var Utf8 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: function (wordArray) {
                try {
                    return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                }
                catch (e) {
                    throw new Error('Malformed UTF-8 data');
                }
            },
            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: function (utf8Str) {
                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
        };
        /**
         * Abstract buffered block algorithm template.
         *
         * The property blockSize must be implemented in a concrete subtype.
         *
         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
         */
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: function () {
                // Initial values
                this._data = new WordArray.init();
                this._nDataBytes = 0;
            },
            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: function (data) {
                // Convert string to WordArray, else assume WordArray already
                if (typeof data == 'string') {
                    data = Utf8.parse(data);
                }
                // Append
                this._data.concat(data);
                this._nDataBytes += data.sigBytes;
            },
            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: function (doFlush) {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var dataSigBytes = data.sigBytes;
                var blockSize = this.blockSize;
                var blockSizeBytes = blockSize * 4;
                // Count blocks ready
                var nBlocksReady = dataSigBytes / blockSizeBytes;
                if (doFlush) {
                    // Round up to include partial blocks
                    nBlocksReady = Math.ceil(nBlocksReady);
                }
                else {
                    // Round down to include only full blocks,
                    // less the number of blocks that must remain in the buffer
                    nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                }
                // Count words ready
                var nWordsReady = nBlocksReady * blockSize;
                // Count bytes ready
                var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
                // Process blocks
                if (nWordsReady) {
                    for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                        // Perform concrete-algorithm logic
                        this._doProcessBlock(dataWords, offset);
                    }
                    // Remove processed words
                    var processedWords = dataWords.splice(0, nWordsReady);
                    data.sigBytes -= nBytesReady;
                }
                // Return processed words
                return new WordArray.init(processedWords, nBytesReady);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: function () {
                var clone = Base.clone.call(this);
                clone._data = this._data.clone();
                return clone;
            },
            _minBufferSize: 0
        });
        /**
         * Abstract hasher template.
         *
         * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
         */
        C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),
            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: function (cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);
                // Set initial values
                this.reset();
            },
            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: function () {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);
                // Perform concrete-hasher logic
                this._doReset();
            },
            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: function (messageUpdate) {
                // Append
                this._append(messageUpdate);
                // Update the hash
                this._process();
                // Chainable
                return this;
            },
            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: function (messageUpdate) {
                // Final message update
                if (messageUpdate) {
                    this._append(messageUpdate);
                }
                // Perform concrete-hasher logic
                var hash = this._doFinalize();
                return hash;
            },
            blockSize: 512 / 32,
            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: function (hasher) {
                return function (message, cfg) {
                    return new hasher.init(cfg).finalize(message);
                };
            },
            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: function (hasher) {
                return function (message, key) {
                    return new C_algo.HMAC.init(hasher, key).finalize(message);
                };
            }
        });
        /**
         * Algorithm namespace.
         */
        var C_algo = C.algo = {};
        return C;
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
         * Base64 encoding strategy.
         */
        C_enc.Base64 = {
            /**
             * Converts a word array to a Base64 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Base64 string.
             *
             * @static
             *
             * @example
             *
             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                var map = this._map;
                // Clamp excess bits
                wordArray.clamp();
                // Convert
                var base64Chars = [];
                for (var i = 0; i < sigBytes; i += 3) {
                    var byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
                    var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;
                    var triplet = (byte1 << 16) | (byte2 << 8) | byte3;
                    for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
                        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
                    }
                }
                // Add padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    while (base64Chars.length % 4) {
                        base64Chars.push(paddingChar);
                    }
                }
                return base64Chars.join('');
            },
            /**
             * Converts a Base64 string to a word array.
             *
             * @param {string} base64Str The Base64 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
             */
            parse: function (base64Str) {
                // Shortcuts
                var base64StrLength = base64Str.length;
                var map = this._map;
                var reverseMap = this._reverseMap;
                if (!reverseMap) {
                    reverseMap = this._reverseMap = [];
                    for (var j = 0; j < map.length; j++) {
                        reverseMap[map.charCodeAt(j)] = j;
                    }
                }
                // Ignore padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    var paddingIndex = base64Str.indexOf(paddingChar);
                    if (paddingIndex !== -1) {
                        base64StrLength = paddingIndex;
                    }
                }
                // Convert
                return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for (var i = 0; i < base64StrLength; i++) {
                if (i % 4) {
                    var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
                    var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
                    nBytes++;
                }
            }
            return WordArray.create(words, nBytes);
        }
    }());
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Constants table
        var T = [];
        // Compute constants
        (function () {
            for (var i = 0; i < 64; i++) {
                T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
            }
        }());
        /**
         * MD5 hash algorithm.
         */
        var MD5 = C_algo.MD5 = Hasher.extend({
            _doReset: function () {
                this._hash = new WordArray.init([
                    0x67452301, 0xefcdab89,
                    0x98badcfe, 0x10325476
                ]);
            },
            _doProcessBlock: function (M, offset) {
                // Swap endian
                for (var i = 0; i < 16; i++) {
                    // Shortcuts
                    var offset_i = offset + i;
                    var M_offset_i = M[offset_i];
                    M[offset_i] = ((((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                        (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00));
                }
                // Shortcuts
                var H = this._hash.words;
                var M_offset_0 = M[offset + 0];
                var M_offset_1 = M[offset + 1];
                var M_offset_2 = M[offset + 2];
                var M_offset_3 = M[offset + 3];
                var M_offset_4 = M[offset + 4];
                var M_offset_5 = M[offset + 5];
                var M_offset_6 = M[offset + 6];
                var M_offset_7 = M[offset + 7];
                var M_offset_8 = M[offset + 8];
                var M_offset_9 = M[offset + 9];
                var M_offset_10 = M[offset + 10];
                var M_offset_11 = M[offset + 11];
                var M_offset_12 = M[offset + 12];
                var M_offset_13 = M[offset + 13];
                var M_offset_14 = M[offset + 14];
                var M_offset_15 = M[offset + 15];
                // Working varialbes
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                // Computation
                a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                b = FF(b, c, d, a, M_offset_15, 22, T[15]);
                a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                b = GG(b, c, d, a, M_offset_12, 20, T[31]);
                a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                b = HH(b, c, d, a, M_offset_2, 23, T[47]);
                a = II(a, b, c, d, M_offset_0, 6, T[48]);
                d = II(d, a, b, c, M_offset_7, 10, T[49]);
                c = II(c, d, a, b, M_offset_14, 15, T[50]);
                b = II(b, c, d, a, M_offset_5, 21, T[51]);
                a = II(a, b, c, d, M_offset_12, 6, T[52]);
                d = II(d, a, b, c, M_offset_3, 10, T[53]);
                c = II(c, d, a, b, M_offset_10, 15, T[54]);
                b = II(b, c, d, a, M_offset_1, 21, T[55]);
                a = II(a, b, c, d, M_offset_8, 6, T[56]);
                d = II(d, a, b, c, M_offset_15, 10, T[57]);
                c = II(c, d, a, b, M_offset_6, 15, T[58]);
                b = II(b, c, d, a, M_offset_13, 21, T[59]);
                a = II(a, b, c, d, M_offset_4, 6, T[60]);
                d = II(d, a, b, c, M_offset_11, 10, T[61]);
                c = II(c, d, a, b, M_offset_2, 15, T[62]);
                b = II(b, c, d, a, M_offset_9, 21, T[63]);
                // Intermediate hash value
                H[0] = (H[0] + a) | 0;
                H[1] = (H[1] + b) | 0;
                H[2] = (H[2] + c) | 0;
                H[3] = (H[3] + d) | 0;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
                var nBitsTotalL = nBitsTotal;
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = ((((nBitsTotalH << 8) | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
                    (((nBitsTotalH << 24) | (nBitsTotalH >>> 8)) & 0xff00ff00));
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = ((((nBitsTotalL << 8) | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
                    (((nBitsTotalL << 24) | (nBitsTotalL >>> 8)) & 0xff00ff00));
                data.sigBytes = (dataWords.length + 1) * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var hash = this._hash;
                var H = hash.words;
                // Swap endian
                for (var i = 0; i < 4; i++) {
                    // Shortcut
                    var H_i = H[i];
                    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                        (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                }
                // Return final computed hash
                return hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        function FF(a, b, c, d, x, s, t) {
            var n = a + ((b & c) | (~b & d)) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        function GG(a, b, c, d, x, s, t) {
            var n = a + ((b & d) | (c & ~d)) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        function HH(a, b, c, d, x, s, t) {
            var n = a + (b ^ c ^ d) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        function II(a, b, c, d, x, s, t) {
            var n = a + (c ^ (b | ~d)) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.MD5('message');
         *     var hash = CryptoJS.MD5(wordArray);
         */
        C.MD5 = Hasher._createHelper(MD5);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacMD5(message, key);
         */
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Reusable object
        var W = [];
        /**
         * SHA-1 hash algorithm.
         */
        var SHA1 = C_algo.SHA1 = Hasher.extend({
            _doReset: function () {
                this._hash = new WordArray.init([
                    0x67452301, 0xefcdab89,
                    0x98badcfe, 0x10325476,
                    0xc3d2e1f0
                ]);
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var H = this._hash.words;
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                // Computation
                for (var i = 0; i < 80; i++) {
                    if (i < 16) {
                        W[i] = M[offset + i] | 0;
                    }
                    else {
                        var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                        W[i] = (n << 1) | (n >>> 31);
                    }
                    var t = ((a << 5) | (a >>> 27)) + e + W[i];
                    if (i < 20) {
                        t += ((b & c) | (~b & d)) + 0x5a827999;
                    }
                    else if (i < 40) {
                        t += (b ^ c ^ d) + 0x6ed9eba1;
                    }
                    else if (i < 60) {
                        t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
                    }
                    else /* if (i < 80) */ {
                        t += (b ^ c ^ d) - 0x359d3e2a;
                    }
                    e = d;
                    d = c;
                    c = (b << 30) | (b >>> 2);
                    b = a;
                    a = t;
                }
                // Intermediate hash value
                H[0] = (H[0] + a) | 0;
                H[1] = (H[1] + b) | 0;
                H[2] = (H[2] + c) | 0;
                H[3] = (H[3] + d) | 0;
                H[4] = (H[4] + e) | 0;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Return final computed hash
                return this._hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA1('message');
         *     var hash = CryptoJS.SHA1(wordArray);
         */
        C.SHA1 = Hasher._createHelper(SHA1);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA1(message, key);
         */
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
    }());
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Initialization and round constants tables
        var H = [];
        var K = [];
        // Compute constants
        (function () {
            function isPrime(n) {
                var sqrtN = Math.sqrt(n);
                for (var factor = 2; factor <= sqrtN; factor++) {
                    if (!(n % factor)) {
                        return false;
                    }
                }
                return true;
            }
            function getFractionalBits(n) {
                return ((n - (n | 0)) * 0x100000000) | 0;
            }
            var n = 2;
            var nPrime = 0;
            while (nPrime < 64) {
                if (isPrime(n)) {
                    if (nPrime < 8) {
                        H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
                    }
                    K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
                    nPrime++;
                }
                n++;
            }
        }());
        // Reusable object
        var W = [];
        /**
         * SHA-256 hash algorithm.
         */
        var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: function () {
                this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var H = this._hash.words;
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                var f = H[5];
                var g = H[6];
                var h = H[7];
                // Computation
                for (var i = 0; i < 64; i++) {
                    if (i < 16) {
                        W[i] = M[offset + i] | 0;
                    }
                    else {
                        var gamma0x = W[i - 15];
                        var gamma0 = ((gamma0x << 25) | (gamma0x >>> 7)) ^
                            ((gamma0x << 14) | (gamma0x >>> 18)) ^
                            (gamma0x >>> 3);
                        var gamma1x = W[i - 2];
                        var gamma1 = ((gamma1x << 15) | (gamma1x >>> 17)) ^
                            ((gamma1x << 13) | (gamma1x >>> 19)) ^
                            (gamma1x >>> 10);
                        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                    }
                    var ch = (e & f) ^ (~e & g);
                    var maj = (a & b) ^ (a & c) ^ (b & c);
                    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
                    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));
                    var t1 = h + sigma1 + ch + K[i] + W[i];
                    var t2 = sigma0 + maj;
                    h = g;
                    g = f;
                    f = e;
                    e = (d + t1) | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = (t1 + t2) | 0;
                }
                // Intermediate hash value
                H[0] = (H[0] + a) | 0;
                H[1] = (H[1] + b) | 0;
                H[2] = (H[2] + c) | 0;
                H[3] = (H[3] + d) | 0;
                H[4] = (H[4] + e) | 0;
                H[5] = (H[5] + f) | 0;
                H[6] = (H[6] + g) | 0;
                H[7] = (H[7] + h) | 0;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Return final computed hash
                return this._hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA256('message');
         *     var hash = CryptoJS.SHA256(wordArray);
         */
        C.SHA256 = Hasher._createHelper(SHA256);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA256(message, key);
         */
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
         * UTF-16 BE encoding strategy.
         */
        C_enc.Utf16 = C_enc.Utf16BE = {
            /**
             * Converts a word array to a UTF-16 BE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 BE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var utf16Chars = [];
                for (var i = 0; i < sigBytes; i += 2) {
                    var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
                    utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join('');
            },
            /**
             * Converts a UTF-16 BE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 BE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
             */
            parse: function (utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;
                // Convert
                var words = [];
                for (var i = 0; i < utf16StrLength; i++) {
                    words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
                }
                return WordArray.create(words, utf16StrLength * 2);
            }
        };
        /**
         * UTF-16 LE encoding strategy.
         */
        C_enc.Utf16LE = {
            /**
             * Converts a word array to a UTF-16 LE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 LE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var utf16Chars = [];
                for (var i = 0; i < sigBytes; i += 2) {
                    var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
                    utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join('');
            },
            /**
             * Converts a UTF-16 LE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 LE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
             */
            parse: function (utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;
                // Convert
                var words = [];
                for (var i = 0; i < utf16StrLength; i++) {
                    words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
                }
                return WordArray.create(words, utf16StrLength * 2);
            }
        };
        function swapEndian(word) {
            return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
        }
    }());
    (function () {
        // Check if typed arrays are supported
        if (typeof ArrayBuffer != 'function') {
            return;
        }
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        // Reference original init
        var superInit = WordArray.init;
        // Augment WordArray.init to handle typed arrays
        var subInit = WordArray.init = function (typedArray) {
            // Convert buffers to uint8
            if (typedArray instanceof ArrayBuffer) {
                typedArray = new Uint8Array(typedArray);
            }
            // Convert other array views to uint8
            if (typedArray instanceof Int8Array ||
                (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
                typedArray instanceof Int16Array ||
                typedArray instanceof Uint16Array ||
                typedArray instanceof Int32Array ||
                typedArray instanceof Uint32Array ||
                typedArray instanceof Float32Array ||
                typedArray instanceof Float64Array) {
                typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
            }
            // Handle Uint8Array
            if (typedArray instanceof Uint8Array) {
                // Shortcut
                var typedArrayByteLength = typedArray.byteLength;
                // Extract bytes
                var words = [];
                for (var i = 0; i < typedArrayByteLength; i++) {
                    words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
                }
                // Initialize this word array
                superInit.call(this, words, typedArrayByteLength);
            }
            else {
                // Else call normal init
                superInit.apply(this, arguments);
            }
        };
        subInit.prototype = WordArray;
    }());
    /** @preserve
    (c) 2012 by Cédric Mesnil. All rights reserved.

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

        - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Constants table
        var _zl = WordArray.create([
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
            1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ]);
        var _zr = WordArray.create([
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
            6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
            8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ]);
        var _sl = WordArray.create([
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
            7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
            11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
            11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
            9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ]);
        var _sr = WordArray.create([
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
            9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
            9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
            15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
            8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ]);
        var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
        var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);
        /**
         * RIPEMD160 hash algorithm.
         */
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
            _doReset: function () {
                this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
            },
            _doProcessBlock: function (M, offset) {
                // Swap endian
                for (var i = 0; i < 16; i++) {
                    // Shortcuts
                    var offset_i = offset + i;
                    var M_offset_i = M[offset_i];
                    // Swap
                    M[offset_i] = ((((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                        (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00));
                }
                // Shortcut
                var H = this._hash.words;
                var hl = _hl.words;
                var hr = _hr.words;
                var zl = _zl.words;
                var zr = _zr.words;
                var sl = _sl.words;
                var sr = _sr.words;
                // Working variables
                var al, bl, cl, dl, el;
                var ar, br, cr, dr, er;
                ar = al = H[0];
                br = bl = H[1];
                cr = cl = H[2];
                dr = dl = H[3];
                er = el = H[4];
                // Computation
                var t;
                for (var i = 0; i < 80; i += 1) {
                    t = (al + M[offset + zl[i]]) | 0;
                    if (i < 16) {
                        t += f1(bl, cl, dl) + hl[0];
                    }
                    else if (i < 32) {
                        t += f2(bl, cl, dl) + hl[1];
                    }
                    else if (i < 48) {
                        t += f3(bl, cl, dl) + hl[2];
                    }
                    else if (i < 64) {
                        t += f4(bl, cl, dl) + hl[3];
                    }
                    else { // if (i<80) {
                        t += f5(bl, cl, dl) + hl[4];
                    }
                    t = t | 0;
                    t = rotl(t, sl[i]);
                    t = (t + el) | 0;
                    al = el;
                    el = dl;
                    dl = rotl(cl, 10);
                    cl = bl;
                    bl = t;
                    t = (ar + M[offset + zr[i]]) | 0;
                    if (i < 16) {
                        t += f5(br, cr, dr) + hr[0];
                    }
                    else if (i < 32) {
                        t += f4(br, cr, dr) + hr[1];
                    }
                    else if (i < 48) {
                        t += f3(br, cr, dr) + hr[2];
                    }
                    else if (i < 64) {
                        t += f2(br, cr, dr) + hr[3];
                    }
                    else { // if (i<80) {
                        t += f1(br, cr, dr) + hr[4];
                    }
                    t = t | 0;
                    t = rotl(t, sr[i]);
                    t = (t + er) | 0;
                    ar = er;
                    er = dr;
                    dr = rotl(cr, 10);
                    cr = br;
                    br = t;
                }
                // Intermediate hash value
                t = (H[1] + cl + dr) | 0;
                H[1] = (H[2] + dl + er) | 0;
                H[2] = (H[3] + el + ar) | 0;
                H[3] = (H[4] + al + br) | 0;
                H[4] = (H[0] + bl + cr) | 0;
                H[0] = t;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = ((((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
                    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00));
                data.sigBytes = (dataWords.length + 1) * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var hash = this._hash;
                var H = hash.words;
                // Swap endian
                for (var i = 0; i < 5; i++) {
                    // Shortcut
                    var H_i = H[i];
                    // Swap
                    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                        (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                }
                // Return final computed hash
                return hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        function f1(x, y, z) {
            return ((x) ^ (y) ^ (z));
        }
        function f2(x, y, z) {
            return (((x) & (y)) | ((~x) & (z)));
        }
        function f3(x, y, z) {
            return (((x) | (~(y))) ^ (z));
        }
        function f4(x, y, z) {
            return (((x) & (z)) | ((y) & (~(z))));
        }
        function f5(x, y, z) {
            return ((x) ^ ((y) | (~(z))));
        }
        function rotl(x, n) {
            return (x << n) | (x >>> (32 - n));
        }
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.RIPEMD160('message');
         *     var hash = CryptoJS.RIPEMD160(wordArray);
         */
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
         */
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        /**
         * HMAC algorithm.
         */
        C_algo.HMAC = Base.extend({
            /**
             * Initializes a newly created HMAC.
             *
             * @param {Hasher} hasher The hash algorithm to use.
             * @param {WordArray|string} key The secret key.
             *
             * @example
             *
             *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
             */
            init: function (hasher, key) {
                // Init hasher
                hasher = this._hasher = new hasher.init();
                // Convert string to WordArray, else assume WordArray already
                if (typeof key == 'string') {
                    key = Utf8.parse(key);
                }
                // Shortcuts
                var hasherBlockSize = hasher.blockSize;
                var hasherBlockSizeBytes = hasherBlockSize * 4;
                // Allow arbitrary length keys
                if (key.sigBytes > hasherBlockSizeBytes) {
                    key = hasher.finalize(key);
                }
                // Clamp excess bits
                key.clamp();
                // Clone key for inner and outer pads
                var oKey = this._oKey = key.clone();
                var iKey = this._iKey = key.clone();
                // Shortcuts
                var oKeyWords = oKey.words;
                var iKeyWords = iKey.words;
                // XOR keys with pad constants
                for (var i = 0; i < hasherBlockSize; i++) {
                    oKeyWords[i] ^= 0x5c5c5c5c;
                    iKeyWords[i] ^= 0x36363636;
                }
                oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
                // Set initial values
                this.reset();
            },
            /**
             * Resets this HMAC to its initial state.
             *
             * @example
             *
             *     hmacHasher.reset();
             */
            reset: function () {
                // Shortcut
                var hasher = this._hasher;
                // Reset
                hasher.reset();
                hasher.update(this._iKey);
            },
            /**
             * Updates this HMAC with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {HMAC} This HMAC instance.
             *
             * @example
             *
             *     hmacHasher.update('message');
             *     hmacHasher.update(wordArray);
             */
            update: function (messageUpdate) {
                this._hasher.update(messageUpdate);
                // Chainable
                return this;
            },
            /**
             * Finalizes the HMAC computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The HMAC.
             *
             * @example
             *
             *     var hmac = hmacHasher.finalize();
             *     var hmac = hmacHasher.finalize('message');
             *     var hmac = hmacHasher.finalize(wordArray);
             */
            finalize: function (messageUpdate) {
                // Shortcut
                var hasher = this._hasher;
                // Compute HMAC
                var innerHash = hasher.finalize(messageUpdate);
                hasher.reset();
                var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
                return hmac;
            }
        });
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        /**
         * Password-Based Key Derivation Function 2 algorithm.
         */
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hasher to use. Default: SHA1
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
                keySize: 128 / 32,
                hasher: SHA1,
                iterations: 1
            }),
            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.PBKDF2.create();
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
             */
            init: function (cfg) {
                this.cfg = this.cfg.extend(cfg);
            },
            /**
             * Computes the Password-Based Key Derivation Function 2.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function (password, salt) {
                // Shortcut
                var cfg = this.cfg;
                // Init HMAC
                var hmac = HMAC.create(cfg.hasher, password);
                // Initial values
                var derivedKey = WordArray.create();
                var blockIndex = WordArray.create([0x00000001]);
                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var blockIndexWords = blockIndex.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;
                // Generate key
                while (derivedKeyWords.length < keySize) {
                    var block = hmac.update(salt).finalize(blockIndex);
                    hmac.reset();
                    // Shortcuts
                    var blockWords = block.words;
                    var blockWordsLength = blockWords.length;
                    // Iterations
                    var intermediate = block;
                    for (var i = 1; i < iterations; i++) {
                        intermediate = hmac.finalize(intermediate);
                        hmac.reset();
                        // Shortcut
                        var intermediateWords = intermediate.words;
                        // XOR intermediate with block
                        for (var j = 0; j < blockWordsLength; j++) {
                            blockWords[j] ^= intermediateWords[j];
                        }
                    }
                    derivedKey.concat(block);
                    blockIndexWords[0]++;
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
            }
        });
        /**
         * Computes the Password-Based Key Derivation Function 2.
         *
         * @param {WordArray|string} password The password.
         * @param {WordArray|string} salt A salt.
         * @param {Object} cfg (Optional) The configuration options to use for this computation.
         *
         * @return {WordArray} The derived key.
         *
         * @static
         *
         * @example
         *
         *     var key = CryptoJS.PBKDF2(password, salt);
         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
         */
        C.PBKDF2 = function (password, salt, cfg) {
            return PBKDF2.create(cfg).compute(password, salt);
        };
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        /**
         * This key derivation function is meant to conform with EVP_BytesToKey.
         * www.openssl.org/docs/crypto/EVP_BytesToKey.html
         */
        var EvpKDF = C_algo.EvpKDF = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hash algorithm to use. Default: MD5
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
                keySize: 128 / 32,
                hasher: MD5,
                iterations: 1
            }),
            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.EvpKDF.create();
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
             */
            init: function (cfg) {
                this.cfg = this.cfg.extend(cfg);
            },
            /**
             * Derives a key from a password.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function (password, salt) {
                // Shortcut
                var cfg = this.cfg;
                // Init hasher
                var hasher = cfg.hasher.create();
                // Initial values
                var derivedKey = WordArray.create();
                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;
                // Generate key
                while (derivedKeyWords.length < keySize) {
                    if (block) {
                        hasher.update(block);
                    }
                    var block = hasher.update(password).finalize(salt);
                    hasher.reset();
                    // Iterations
                    for (var i = 1; i < iterations; i++) {
                        block = hasher.finalize(block);
                        hasher.reset();
                    }
                    derivedKey.concat(block);
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
            }
        });
        /**
         * Derives a key from a password.
         *
         * @param {WordArray|string} password The password.
         * @param {WordArray|string} salt A salt.
         * @param {Object} cfg (Optional) The configuration options to use for this computation.
         *
         * @return {WordArray} The derived key.
         *
         * @static
         *
         * @example
         *
         *     var key = CryptoJS.EvpKDF(password, salt);
         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
         */
        C.EvpKDF = function (password, salt, cfg) {
            return EvpKDF.create(cfg).compute(password, salt);
        };
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        /**
         * SHA-224 hash algorithm.
         */
        var SHA224 = C_algo.SHA224 = SHA256.extend({
            _doReset: function () {
                this._hash = new WordArray.init([
                    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
                ]);
            },
            _doFinalize: function () {
                var hash = SHA256._doFinalize.call(this);
                hash.sigBytes -= 4;
                return hash;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA224('message');
         *     var hash = CryptoJS.SHA224(wordArray);
         */
        C.SHA224 = SHA256._createHelper(SHA224);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA224(message, key);
         */
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
    }());
    (function (undefined$1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        /**
         * x64 namespace.
         */
        var C_x64 = C.x64 = {};
        /**
         * A 64-bit word.
         */
        C_x64.Word = Base.extend({
            /**
             * Initializes a newly created 64-bit word.
             *
             * @param {number} high The high 32 bits.
             * @param {number} low The low 32 bits.
             *
             * @example
             *
             *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
             */
            init: function (high, low) {
                this.high = high;
                this.low = low;
            }
            /**
             * Bitwise NOTs this word.
             *
             * @return {X64Word} A new x64-Word object after negating.
             *
             * @example
             *
             *     var negated = x64Word.not();
             */
            // not: function () {
            // var high = ~this.high;
            // var low = ~this.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise ANDs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to AND with this word.
             *
             * @return {X64Word} A new x64-Word object after ANDing.
             *
             * @example
             *
             *     var anded = x64Word.and(anotherX64Word);
             */
            // and: function (word) {
            // var high = this.high & word.high;
            // var low = this.low & word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise ORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to OR with this word.
             *
             * @return {X64Word} A new x64-Word object after ORing.
             *
             * @example
             *
             *     var ored = x64Word.or(anotherX64Word);
             */
            // or: function (word) {
            // var high = this.high | word.high;
            // var low = this.low | word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise XORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to XOR with this word.
             *
             * @return {X64Word} A new x64-Word object after XORing.
             *
             * @example
             *
             *     var xored = x64Word.xor(anotherX64Word);
             */
            // xor: function (word) {
            // var high = this.high ^ word.high;
            // var low = this.low ^ word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Shifts this word n bits to the left.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftL(25);
             */
            // shiftL: function (n) {
            // if (n < 32) {
            // var high = (this.high << n) | (this.low >>> (32 - n));
            // var low = this.low << n;
            // } else {
            // var high = this.low << (n - 32);
            // var low = 0;
            // }
            // return X64Word.create(high, low);
            // },
            /**
             * Shifts this word n bits to the right.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftR(7);
             */
            // shiftR: function (n) {
            // if (n < 32) {
            // var low = (this.low >>> n) | (this.high << (32 - n));
            // var high = this.high >>> n;
            // } else {
            // var low = this.high >>> (n - 32);
            // var high = 0;
            // }
            // return X64Word.create(high, low);
            // },
            /**
             * Rotates this word n bits to the left.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotL(25);
             */
            // rotL: function (n) {
            // return this.shiftL(n).or(this.shiftR(64 - n));
            // },
            /**
             * Rotates this word n bits to the right.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotR(7);
             */
            // rotR: function (n) {
            // return this.shiftR(n).or(this.shiftL(64 - n));
            // },
            /**
             * Adds this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to add with this word.
             *
             * @return {X64Word} A new x64-Word object after adding.
             *
             * @example
             *
             *     var added = x64Word.add(anotherX64Word);
             */
            // add: function (word) {
            // var low = (this.low + word.low) | 0;
            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
            // var high = (this.high + word.high + carry) | 0;
            // return X64Word.create(high, low);
            // }
        });
        /**
         * An array of 64-bit words.
         *
         * @property {Array} words The array of CryptoJS.x64.Word objects.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */
        C_x64.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.x64.WordArray.create();
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ]);
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ], 10);
             */
            init: function (words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined$1) {
                    this.sigBytes = sigBytes;
                }
                else {
                    this.sigBytes = words.length * 8;
                }
            },
            /**
             * Converts this 64-bit word array to a 32-bit word array.
             *
             * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
             *
             * @example
             *
             *     var x32WordArray = x64WordArray.toX32();
             */
            toX32: function () {
                // Shortcuts
                var x64Words = this.words;
                var x64WordsLength = x64Words.length;
                // Convert
                var x32Words = [];
                for (var i = 0; i < x64WordsLength; i++) {
                    var x64Word = x64Words[i];
                    x32Words.push(x64Word.high);
                    x32Words.push(x64Word.low);
                }
                return X32WordArray.create(x32Words, this.sigBytes);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {X64WordArray} The clone.
             *
             * @example
             *
             *     var clone = x64WordArray.clone();
             */
            clone: function () {
                var clone = Base.clone.call(this);
                // Clone "words" array
                var words = clone.words = this.words.slice(0);
                // Clone each X64Word object
                var wordsLength = words.length;
                for (var i = 0; i < wordsLength; i++) {
                    words[i] = words[i].clone();
                }
                return clone;
            }
        });
    }());
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        // Constants tables
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        // Compute Constants
        (function () {
            // Compute rho offset constants
            var x = 1, y = 0;
            for (var t = 0; t < 24; t++) {
                RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;
                var newX = y % 5;
                var newY = (2 * x + 3 * y) % 5;
                x = newX;
                y = newY;
            }
            // Compute pi index constants
            for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                    PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
                }
            }
            // Compute round constants
            var LFSR = 0x01;
            for (var i = 0; i < 24; i++) {
                var roundConstantMsw = 0;
                var roundConstantLsw = 0;
                for (var j = 0; j < 7; j++) {
                    if (LFSR & 0x01) {
                        var bitPosition = (1 << j) - 1;
                        if (bitPosition < 32) {
                            roundConstantLsw ^= 1 << bitPosition;
                        }
                        else /* if (bitPosition >= 32) */ {
                            roundConstantMsw ^= 1 << (bitPosition - 32);
                        }
                    }
                    // Compute next LFSR
                    if (LFSR & 0x80) {
                        // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                        LFSR = (LFSR << 1) ^ 0x71;
                    }
                    else {
                        LFSR <<= 1;
                    }
                }
                ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
            }
        }());
        // Reusable objects for temporary values
        var T = [];
        (function () {
            for (var i = 0; i < 25; i++) {
                T[i] = X64Word.create();
            }
        }());
        /**
         * SHA-3 hash algorithm.
         */
        var SHA3 = C_algo.SHA3 = Hasher.extend({
            /**
             * Configuration options.
             *
             * @property {number} outputLength
             *   The desired number of bits in the output hash.
             *   Only values permitted are: 224, 256, 384, 512.
             *   Default: 512
             */
            cfg: Hasher.cfg.extend({
                outputLength: 512
            }),
            _doReset: function () {
                var state = this._state = [];
                for (var i = 0; i < 25; i++) {
                    state[i] = new X64Word.init();
                }
                this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function (M, offset) {
                // Shortcuts
                var state = this._state;
                var nBlockSizeLanes = this.blockSize / 2;
                // Absorb
                for (var i = 0; i < nBlockSizeLanes; i++) {
                    // Shortcuts
                    var M2i = M[offset + 2 * i];
                    var M2i1 = M[offset + 2 * i + 1];
                    // Swap endian
                    M2i = ((((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff) |
                        (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00));
                    M2i1 = ((((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff) |
                        (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00));
                    // Absorb message into state
                    var lane = state[i];
                    lane.high ^= M2i1;
                    lane.low ^= M2i;
                }
                // Rounds
                for (var round = 0; round < 24; round++) {
                    // Theta
                    for (var x = 0; x < 5; x++) {
                        // Mix column lanes
                        var tMsw = 0, tLsw = 0;
                        for (var y = 0; y < 5; y++) {
                            var lane = state[x + 5 * y];
                            tMsw ^= lane.high;
                            tLsw ^= lane.low;
                        }
                        // Temporary values
                        var Tx = T[x];
                        Tx.high = tMsw;
                        Tx.low = tLsw;
                    }
                    for (var x = 0; x < 5; x++) {
                        // Shortcuts
                        var Tx4 = T[(x + 4) % 5];
                        var Tx1 = T[(x + 1) % 5];
                        var Tx1Msw = Tx1.high;
                        var Tx1Lsw = Tx1.low;
                        // Mix surrounding columns
                        var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
                        var tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
                        for (var y = 0; y < 5; y++) {
                            var lane = state[x + 5 * y];
                            lane.high ^= tMsw;
                            lane.low ^= tLsw;
                        }
                    }
                    // Rho Pi
                    for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                        // Shortcuts
                        var lane = state[laneIndex];
                        var laneMsw = lane.high;
                        var laneLsw = lane.low;
                        var rhoOffset = RHO_OFFSETS[laneIndex];
                        // Rotate lanes
                        if (rhoOffset < 32) {
                            var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
                            var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
                        }
                        else /* if (rhoOffset >= 32) */ {
                            var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
                            var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
                        }
                        // Transpose lanes
                        var TPiLane = T[PI_INDEXES[laneIndex]];
                        TPiLane.high = tMsw;
                        TPiLane.low = tLsw;
                    }
                    // Rho pi at x = y = 0
                    var T0 = T[0];
                    var state0 = state[0];
                    T0.high = state0.high;
                    T0.low = state0.low;
                    // Chi
                    for (var x = 0; x < 5; x++) {
                        for (var y = 0; y < 5; y++) {
                            // Shortcuts
                            var laneIndex = x + 5 * y;
                            var lane = state[laneIndex];
                            var TLane = T[laneIndex];
                            var Tx1Lane = T[((x + 1) % 5) + 5 * y];
                            var Tx2Lane = T[((x + 2) % 5) + 5 * y];
                            // Mix rows
                            lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
                            lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);
                        }
                    }
                    // Iota
                    var lane = state[0];
                    var roundConstant = ROUND_CONSTANTS[round];
                    lane.high ^= roundConstant.high;
                    lane.low ^= roundConstant.low;
                }
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                var blockSizeBits = this.blockSize * 32;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
                dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var state = this._state;
                var outputLengthBytes = this.cfg.outputLength / 8;
                var outputLengthLanes = outputLengthBytes / 8;
                // Squeeze
                var hashWords = [];
                for (var i = 0; i < outputLengthLanes; i++) {
                    // Shortcuts
                    var lane = state[i];
                    var laneMsw = lane.high;
                    var laneLsw = lane.low;
                    // Swap endian
                    laneMsw = ((((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff) |
                        (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00));
                    laneLsw = ((((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff) |
                        (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00));
                    // Squeeze state to retrieve hash
                    hashWords.push(laneLsw);
                    hashWords.push(laneMsw);
                }
                // Return final computed hash
                return new WordArray.init(hashWords, outputLengthBytes);
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                var state = clone._state = this._state.slice(0);
                for (var i = 0; i < 25; i++) {
                    state[i] = state[i].clone();
                }
                return clone;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA3('message');
         *     var hash = CryptoJS.SHA3(wordArray);
         */
        C.SHA3 = Hasher._createHelper(SHA3);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA3(message, key);
         */
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
            return X64Word.create.apply(X64Word, arguments);
        }
        // Constants
        var K = [
            X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
            X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
            X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
            X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
            X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
            X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
            X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
            X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
            X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
            X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
            X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
            X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
            X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
            X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
            X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
            X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
            X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
            X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
            X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
            X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
            X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
            X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
            X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
            X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
            X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
            X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
            X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
            X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
            X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
            X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
            X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
            X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
            X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
            X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
            X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
            X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
            X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
            X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
            X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
            X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
        ];
        // Reusable objects
        var W = [];
        (function () {
            for (var i = 0; i < 80; i++) {
                W[i] = X64Word_create();
            }
        }());
        /**
         * SHA-512 hash algorithm.
         */
        var SHA512 = C_algo.SHA512 = Hasher.extend({
            _doReset: function () {
                this._hash = new X64WordArray.init([
                    new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
                    new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
                    new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
                    new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
                ]);
            },
            _doProcessBlock: function (M, offset) {
                // Shortcuts
                var H = this._hash.words;
                var H0 = H[0];
                var H1 = H[1];
                var H2 = H[2];
                var H3 = H[3];
                var H4 = H[4];
                var H5 = H[5];
                var H6 = H[6];
                var H7 = H[7];
                var H0h = H0.high;
                var H0l = H0.low;
                var H1h = H1.high;
                var H1l = H1.low;
                var H2h = H2.high;
                var H2l = H2.low;
                var H3h = H3.high;
                var H3l = H3.low;
                var H4h = H4.high;
                var H4l = H4.low;
                var H5h = H5.high;
                var H5l = H5.low;
                var H6h = H6.high;
                var H6l = H6.low;
                var H7h = H7.high;
                var H7l = H7.low;
                // Working variables
                var ah = H0h;
                var al = H0l;
                var bh = H1h;
                var bl = H1l;
                var ch = H2h;
                var cl = H2l;
                var dh = H3h;
                var dl = H3l;
                var eh = H4h;
                var el = H4l;
                var fh = H5h;
                var fl = H5l;
                var gh = H6h;
                var gl = H6l;
                var hh = H7h;
                var hl = H7l;
                // Rounds
                for (var i = 0; i < 80; i++) {
                    // Shortcut
                    var Wi = W[i];
                    // Extend message
                    if (i < 16) {
                        var Wih = Wi.high = M[offset + i * 2] | 0;
                        var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                    }
                    else {
                        // Gamma0
                        var gamma0x = W[i - 15];
                        var gamma0xh = gamma0x.high;
                        var gamma0xl = gamma0x.low;
                        var gamma0h = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
                        var gamma0l = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
                        // Gamma1
                        var gamma1x = W[i - 2];
                        var gamma1xh = gamma1x.high;
                        var gamma1xl = gamma1x.low;
                        var gamma1h = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
                        var gamma1l = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
                        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                        var Wi7 = W[i - 7];
                        var Wi7h = Wi7.high;
                        var Wi7l = Wi7.low;
                        var Wi16 = W[i - 16];
                        var Wi16h = Wi16.high;
                        var Wi16l = Wi16.low;
                        var Wil = gamma0l + Wi7l;
                        var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
                        var Wil = Wil + gamma1l;
                        var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
                        var Wil = Wil + Wi16l;
                        var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);
                        Wi.high = Wih;
                        Wi.low = Wil;
                    }
                    var chh = (eh & fh) ^ (~eh & gh);
                    var chl = (el & fl) ^ (~el & gl);
                    var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
                    var majl = (al & bl) ^ (al & cl) ^ (bl & cl);
                    var sigma0h = ((ah >>> 28) | (al << 4)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
                    var sigma0l = ((al >>> 28) | (ah << 4)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
                    var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
                    var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));
                    // t1 = h + sigma1 + ch + K[i] + W[i]
                    var Ki = K[i];
                    var Kih = Ki.high;
                    var Kil = Ki.low;
                    var t1l = hl + sigma1l;
                    var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
                    var t1l = t1l + chl;
                    var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
                    var t1l = t1l + Kil;
                    var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
                    var t1l = t1l + Wil;
                    var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);
                    // t2 = sigma0 + maj
                    var t2l = sigma0l + majl;
                    var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);
                    // Update working variables
                    hh = gh;
                    hl = gl;
                    gh = fh;
                    gl = fl;
                    fh = eh;
                    fl = el;
                    el = (dl + t1l) | 0;
                    eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
                    dh = ch;
                    dl = cl;
                    ch = bh;
                    cl = bl;
                    bh = ah;
                    bl = al;
                    al = (t1l + t2l) | 0;
                    ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
                }
                // Intermediate hash value
                H0l = H0.low = (H0l + al);
                H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
                H1l = H1.low = (H1l + bl);
                H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
                H2l = H2.low = (H2l + cl);
                H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
                H3l = H3.low = (H3l + dl);
                H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
                H4l = H4.low = (H4l + el);
                H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
                H5l = H5.low = (H5l + fl);
                H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
                H6l = H6.low = (H6l + gl);
                H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
                H7l = H7.low = (H7l + hl);
                H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Convert hash to 32-bit word array before returning
                var hash = this._hash.toX32();
                // Return final computed hash
                return hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            },
            blockSize: 1024 / 32
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA512('message');
         *     var hash = CryptoJS.SHA512(wordArray);
         */
        C.SHA512 = Hasher._createHelper(SHA512);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA512(message, key);
         */
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        /**
         * SHA-384 hash algorithm.
         */
        var SHA384 = C_algo.SHA384 = SHA512.extend({
            _doReset: function () {
                this._hash = new X64WordArray.init([
                    new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
                    new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
                    new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
                    new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
                ]);
            },
            _doFinalize: function () {
                var hash = SHA512._doFinalize.call(this);
                hash.sigBytes -= 16;
                return hash;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA384('message');
         *     var hash = CryptoJS.SHA384(wordArray);
         */
        C.SHA384 = SHA512._createHelper(SHA384);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA384(message, key);
         */
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
    }());
    /**
     * Cipher core components.
     */
    CryptoJS.lib.Cipher || (function (undefined$1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        /**
         * Abstract base cipher template.
         *
         * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
         * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
         * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
         * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
         */
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             *
             * @property {WordArray} iv The IV to use for this operation.
             */
            cfg: Base.extend(),
            /**
             * Creates this cipher in encryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
             */
            createEncryptor: function (key, cfg) {
                return this.create(this._ENC_XFORM_MODE, key, cfg);
            },
            /**
             * Creates this cipher in decryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
             */
            createDecryptor: function (key, cfg) {
                return this.create(this._DEC_XFORM_MODE, key, cfg);
            },
            /**
             * Initializes a newly created cipher.
             *
             * @param {number} xformMode Either the encryption or decryption transormation mode constant.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
             */
            init: function (xformMode, key, cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);
                // Store transform mode and key
                this._xformMode = xformMode;
                this._key = key;
                // Set initial values
                this.reset();
            },
            /**
             * Resets this cipher to its initial state.
             *
             * @example
             *
             *     cipher.reset();
             */
            reset: function () {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);
                // Perform concrete-cipher logic
                this._doReset();
            },
            /**
             * Adds data to be encrypted or decrypted.
             *
             * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
             *
             * @return {WordArray} The data after processing.
             *
             * @example
             *
             *     var encrypted = cipher.process('data');
             *     var encrypted = cipher.process(wordArray);
             */
            process: function (dataUpdate) {
                // Append
                this._append(dataUpdate);
                // Process available blocks
                return this._process();
            },
            /**
             * Finalizes the encryption or decryption process.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
             *
             * @return {WordArray} The data after final processing.
             *
             * @example
             *
             *     var encrypted = cipher.finalize();
             *     var encrypted = cipher.finalize('data');
             *     var encrypted = cipher.finalize(wordArray);
             */
            finalize: function (dataUpdate) {
                // Final data update
                if (dataUpdate) {
                    this._append(dataUpdate);
                }
                // Perform concrete-cipher logic
                var finalProcessedData = this._doFinalize();
                return finalProcessedData;
            },
            keySize: 128 / 32,
            ivSize: 128 / 32,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            /**
             * Creates shortcut functions to a cipher's object interface.
             *
             * @param {Cipher} cipher The cipher to create a helper for.
             *
             * @return {Object} An object with encrypt and decrypt shortcut functions.
             *
             * @static
             *
             * @example
             *
             *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
             */
            _createHelper: (function () {
                function selectCipherStrategy(key) {
                    if (typeof key == 'string') {
                        return PasswordBasedCipher;
                    }
                    else {
                        return SerializableCipher;
                    }
                }
                return function (cipher) {
                    return {
                        encrypt: function (message, key, cfg) {
                            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                        },
                        decrypt: function (ciphertext, key, cfg) {
                            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                        }
                    };
                };
            }())
        });
        /**
         * Abstract base stream cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
         */
        C_lib.StreamCipher = Cipher.extend({
            _doFinalize: function () {
                // Process partial blocks
                var finalProcessedBlocks = this._process(!!'flush');
                return finalProcessedBlocks;
            },
            blockSize: 1
        });
        /**
         * Mode namespace.
         */
        var C_mode = C.mode = {};
        /**
         * Abstract base block cipher mode template.
         */
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
            /**
             * Creates this mode for encryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
             */
            createEncryptor: function (cipher, iv) {
                return this.Encryptor.create(cipher, iv);
            },
            /**
             * Creates this mode for decryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
             */
            createDecryptor: function (cipher, iv) {
                return this.Decryptor.create(cipher, iv);
            },
            /**
             * Initializes a newly created mode.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
             */
            init: function (cipher, iv) {
                this._cipher = cipher;
                this._iv = iv;
            }
        });
        /**
         * Cipher Block Chaining mode.
         */
        var CBC = C_mode.CBC = (function () {
            /**
             * Abstract base CBC mode.
             */
            var CBC = BlockCipherMode.extend();
            /**
             * CBC encryptor.
             */
            CBC.Encryptor = CBC.extend({
                /**
                 * Processes the data block at offset.
                 *
                 * @param {Array} words The data words to operate on.
                 * @param {number} offset The offset where the block starts.
                 *
                 * @example
                 *
                 *     mode.processBlock(data.words, offset);
                 */
                processBlock: function (words, offset) {
                    // Shortcuts
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    // XOR and encrypt
                    xorBlock.call(this, words, offset, blockSize);
                    cipher.encryptBlock(words, offset);
                    // Remember this block to use with next block
                    this._prevBlock = words.slice(offset, offset + blockSize);
                }
            });
            /**
             * CBC decryptor.
             */
            CBC.Decryptor = CBC.extend({
                /**
                 * Processes the data block at offset.
                 *
                 * @param {Array} words The data words to operate on.
                 * @param {number} offset The offset where the block starts.
                 *
                 * @example
                 *
                 *     mode.processBlock(data.words, offset);
                 */
                processBlock: function (words, offset) {
                    // Shortcuts
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    // Remember this block to use with next block
                    var thisBlock = words.slice(offset, offset + blockSize);
                    // Decrypt and XOR
                    cipher.decryptBlock(words, offset);
                    xorBlock.call(this, words, offset, blockSize);
                    // This block becomes the previous block
                    this._prevBlock = thisBlock;
                }
            });
            function xorBlock(words, offset, blockSize) {
                // Shortcut
                var iv = this._iv;
                // Choose mixing block
                if (iv) {
                    var block = iv;
                    // Remove IV for subsequent blocks
                    this._iv = undefined$1;
                }
                else {
                    var block = this._prevBlock;
                }
                // XOR blocks
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= block[i];
                }
            }
            return CBC;
        }());
        /**
         * Padding namespace.
         */
        var C_pad = C.pad = {};
        /**
         * PKCS #5/7 padding strategy.
         */
        var Pkcs7 = C_pad.Pkcs7 = {
            /**
             * Pads data using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to pad.
             * @param {number} blockSize The multiple that the data should be padded to.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
             */
            pad: function (data, blockSize) {
                // Shortcut
                var blockSizeBytes = blockSize * 4;
                // Count padding bytes
                var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                // Create padding word
                var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;
                // Create padding
                var paddingWords = [];
                for (var i = 0; i < nPaddingBytes; i += 4) {
                    paddingWords.push(paddingWord);
                }
                var padding = WordArray.create(paddingWords, nPaddingBytes);
                // Add padding
                data.concat(padding);
            },
            /**
             * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to unpad.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.unpad(wordArray);
             */
            unpad: function (data) {
                // Get number of padding bytes from last byte
                var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
                // Remove padding
                data.sigBytes -= nPaddingBytes;
            }
        };
        /**
         * Abstract base block cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
         */
        C_lib.BlockCipher = Cipher.extend({
            /**
             * Configuration options.
             *
             * @property {Mode} mode The block mode to use. Default: CBC
             * @property {Padding} padding The padding strategy to use. Default: Pkcs7
             */
            cfg: Cipher.cfg.extend({
                mode: CBC,
                padding: Pkcs7
            }),
            reset: function () {
                // Reset cipher
                Cipher.reset.call(this);
                // Shortcuts
                var cfg = this.cfg;
                var iv = cfg.iv;
                var mode = cfg.mode;
                // Reset block mode
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    var modeCreator = mode.createEncryptor;
                }
                else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                    var modeCreator = mode.createDecryptor;
                    // Keep at least one block in the buffer for unpadding
                    this._minBufferSize = 1;
                }
                if (this._mode && this._mode.__creator == modeCreator) {
                    this._mode.init(this, iv && iv.words);
                }
                else {
                    this._mode = modeCreator.call(mode, this, iv && iv.words);
                    this._mode.__creator = modeCreator;
                }
            },
            _doProcessBlock: function (words, offset) {
                this._mode.processBlock(words, offset);
            },
            _doFinalize: function () {
                // Shortcut
                var padding = this.cfg.padding;
                // Finalize
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    // Pad data
                    padding.pad(this._data, this.blockSize);
                    // Process final blocks
                    var finalProcessedBlocks = this._process(!!'flush');
                }
                else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                    // Process final blocks
                    var finalProcessedBlocks = this._process(!!'flush');
                    // Unpad data
                    padding.unpad(finalProcessedBlocks);
                }
                return finalProcessedBlocks;
            },
            blockSize: 128 / 32
        });
        /**
         * A collection of cipher parameters.
         *
         * @property {WordArray} ciphertext The raw ciphertext.
         * @property {WordArray} key The key to this ciphertext.
         * @property {WordArray} iv The IV used in the ciphering operation.
         * @property {WordArray} salt The salt used with a key derivation function.
         * @property {Cipher} algorithm The cipher algorithm.
         * @property {Mode} mode The block mode used in the ciphering operation.
         * @property {Padding} padding The padding scheme used in the ciphering operation.
         * @property {number} blockSize The block size of the cipher.
         * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
         */
        var CipherParams = C_lib.CipherParams = Base.extend({
            /**
             * Initializes a newly created cipher params object.
             *
             * @param {Object} cipherParams An object with any of the possible cipher parameters.
             *
             * @example
             *
             *     var cipherParams = CryptoJS.lib.CipherParams.create({
             *         ciphertext: ciphertextWordArray,
             *         key: keyWordArray,
             *         iv: ivWordArray,
             *         salt: saltWordArray,
             *         algorithm: CryptoJS.algo.AES,
             *         mode: CryptoJS.mode.CBC,
             *         padding: CryptoJS.pad.PKCS7,
             *         blockSize: 4,
             *         formatter: CryptoJS.format.OpenSSL
             *     });
             */
            init: function (cipherParams) {
                this.mixIn(cipherParams);
            },
            /**
             * Converts this cipher params object to a string.
             *
             * @param {Format} formatter (Optional) The formatting strategy to use.
             *
             * @return {string} The stringified cipher params.
             *
             * @throws Error If neither the formatter nor the default formatter is set.
             *
             * @example
             *
             *     var string = cipherParams + '';
             *     var string = cipherParams.toString();
             *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
             */
            toString: function (formatter) {
                return (formatter || this.formatter).stringify(this);
            }
        });
        /**
         * Format namespace.
         */
        var C_format = C.format = {};
        /**
         * OpenSSL formatting strategy.
         */
        var OpenSSLFormatter = C_format.OpenSSL = {
            /**
             * Converts a cipher params object to an OpenSSL-compatible string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The OpenSSL-compatible string.
             *
             * @static
             *
             * @example
             *
             *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
             */
            stringify: function (cipherParams) {
                // Shortcuts
                var ciphertext = cipherParams.ciphertext;
                var salt = cipherParams.salt;
                // Format
                if (salt) {
                    var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
                }
                else {
                    var wordArray = ciphertext;
                }
                return wordArray.toString(Base64);
            },
            /**
             * Converts an OpenSSL-compatible string to a cipher params object.
             *
             * @param {string} openSSLStr The OpenSSL-compatible string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
             */
            parse: function (openSSLStr) {
                // Parse base64
                var ciphertext = Base64.parse(openSSLStr);
                // Shortcut
                var ciphertextWords = ciphertext.words;
                // Test for salt
                if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                    // Extract salt
                    var salt = WordArray.create(ciphertextWords.slice(2, 4));
                    // Remove salt from ciphertext
                    ciphertextWords.splice(0, 4);
                    ciphertext.sigBytes -= 16;
                }
                return CipherParams.create({ ciphertext: ciphertext, salt: salt });
            }
        };
        /**
         * A cipher wrapper that returns ciphertext as a serializable cipher params object.
         */
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
            /**
             * Configuration options.
             *
             * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
             */
            cfg: Base.extend({
                format: OpenSSLFormatter
            }),
            /**
             * Encrypts a message.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            encrypt: function (cipher, message, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Encrypt
                var encryptor = cipher.createEncryptor(key, cfg);
                var ciphertext = encryptor.finalize(message);
                // Shortcut
                var cipherCfg = encryptor.cfg;
                // Create and return serializable cipher params
                return CipherParams.create({
                    ciphertext: ciphertext,
                    key: key,
                    iv: cipherCfg.iv,
                    algorithm: cipher,
                    mode: cipherCfg.mode,
                    padding: cipherCfg.padding,
                    blockSize: cipher.blockSize,
                    formatter: cfg.format
                });
            },
            /**
             * Decrypts serialized ciphertext.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            decrypt: function (cipher, ciphertext, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);
                // Decrypt
                var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
                return plaintext;
            },
            /**
             * Converts serialized ciphertext to CipherParams,
             * else assumed CipherParams already and returns ciphertext unchanged.
             *
             * @param {CipherParams|string} ciphertext The ciphertext.
             * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
             *
             * @return {CipherParams} The unserialized ciphertext.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
             */
            _parse: function (ciphertext, format) {
                if (typeof ciphertext == 'string') {
                    return format.parse(ciphertext, this);
                }
                else {
                    return ciphertext;
                }
            }
        });
        /**
         * Key derivation function namespace.
         */
        var C_kdf = C.kdf = {};
        /**
         * OpenSSL key derivation function.
         */
        var OpenSSLKdf = C_kdf.OpenSSL = {
            /**
             * Derives a key and IV from a password.
             *
             * @param {string} password The password to derive from.
             * @param {number} keySize The size in words of the key to generate.
             * @param {number} ivSize The size in words of the IV to generate.
             * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
             *
             * @return {CipherParams} A cipher params object with the key, IV, and salt.
             *
             * @static
             *
             * @example
             *
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
             */
            execute: function (password, keySize, ivSize, salt) {
                // Generate random salt
                if (!salt) {
                    salt = WordArray.random(64 / 8);
                }
                // Derive key and IV
                var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
                // Separate key and IV
                var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                key.sigBytes = keySize * 4;
                // Return params
                return CipherParams.create({ key: key, iv: iv, salt: salt });
            }
        };
        /**
         * A serializable cipher wrapper that derives the key from a password,
         * and returns ciphertext as a serializable cipher params object.
         */
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
            /**
             * Configuration options.
             *
             * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
             */
            cfg: SerializableCipher.cfg.extend({
                kdf: OpenSSLKdf
            }),
            /**
             * Encrypts a message using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
             */
            encrypt: function (cipher, message, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
                // Add IV to config
                cfg.iv = derivedParams.iv;
                // Encrypt
                var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
                // Mix in derived params
                ciphertext.mixIn(derivedParams);
                return ciphertext;
            },
            /**
             * Decrypts serialized ciphertext using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
             */
            decrypt: function (cipher, ciphertext, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);
                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
                // Add IV to config
                cfg.iv = derivedParams.iv;
                // Decrypt
                var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
                return plaintext;
            }
        });
    }());
    /**
     * Cipher Feedback block mode.
     */
    CryptoJS.mode.CFB = (function () {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                // Remember this block to use with next block
                this._prevBlock = words.slice(offset, offset + blockSize);
            }
        });
        CFB.Decryptor = CFB.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                // Remember this block to use with next block
                var thisBlock = words.slice(offset, offset + blockSize);
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                // This block becomes the previous block
                this._prevBlock = thisBlock;
            }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
            // Shortcut
            var iv = this._iv;
            // Generate keystream
            if (iv) {
                var keystream = iv.slice(0);
                // Remove IV for subsequent blocks
                this._iv = undefined;
            }
            else {
                var keystream = this._prevBlock;
            }
            cipher.encryptBlock(keystream, 0);
            // Encrypt
            for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
            }
        }
        return CFB;
    }());
    /**
     * Electronic Codebook block mode.
     */
    CryptoJS.mode.ECB = (function () {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
            processBlock: function (words, offset) {
                this._cipher.encryptBlock(words, offset);
            }
        });
        ECB.Decryptor = ECB.extend({
            processBlock: function (words, offset) {
                this._cipher.decryptBlock(words, offset);
            }
        });
        return ECB;
    }());
    /**
     * ANSI X.923 padding strategy.
     */
    CryptoJS.pad.AnsiX923 = {
        pad: function (data, blockSize) {
            // Shortcuts
            var dataSigBytes = data.sigBytes;
            var blockSizeBytes = blockSize * 4;
            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
            // Compute last byte position
            var lastBytePos = dataSigBytes + nPaddingBytes - 1;
            // Pad
            data.clamp();
            data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
            data.sigBytes += nPaddingBytes;
        },
        unpad: function (data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
            // Remove padding
            data.sigBytes -= nPaddingBytes;
        }
    };
    /**
     * ISO 10126 padding strategy.
     */
    CryptoJS.pad.Iso10126 = {
        pad: function (data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;
            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            // Pad
            data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
                concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function (data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
            // Remove padding
            data.sigBytes -= nPaddingBytes;
        }
    };
    /**
     * ISO/IEC 9797-1 Padding Method 2.
     */
    CryptoJS.pad.Iso97971 = {
        pad: function (data, blockSize) {
            // Add 0x80 byte
            data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));
            // Zero pad the rest
            CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function (data) {
            // Remove zero padding
            CryptoJS.pad.ZeroPadding.unpad(data);
            // Remove one more byte -- the 0x80 byte
            data.sigBytes--;
        }
    };
    /**
     * Output Feedback block mode.
     */
    CryptoJS.mode.OFB = (function () {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var keystream = this._keystream;
                // Generate keystream
                if (iv) {
                    keystream = this._keystream = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                cipher.encryptBlock(keystream, 0);
                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
    }());
    /**
     * A noop padding strategy.
     */
    CryptoJS.pad.NoPadding = {
        pad: function () {
        },
        unpad: function () {
        }
    };
    (function (undefined$1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        C_format.Hex = {
            /**
             * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The hexadecimally encoded string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
             */
            stringify: function (cipherParams) {
                return cipherParams.ciphertext.toString(Hex);
            },
            /**
             * Converts a hexadecimally encoded ciphertext string to a cipher params object.
             *
             * @param {string} input The hexadecimally encoded string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
             */
            parse: function (input) {
                var ciphertext = Hex.parse(input);
                return CipherParams.create({ ciphertext: ciphertext });
            }
        };
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        // Lookup tables
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        // Compute lookup tables
        (function () {
            // Compute double table
            var d = [];
            for (var i = 0; i < 256; i++) {
                if (i < 128) {
                    d[i] = i << 1;
                }
                else {
                    d[i] = (i << 1) ^ 0x11b;
                }
            }
            // Walk GF(2^8)
            var x = 0;
            var xi = 0;
            for (var i = 0; i < 256; i++) {
                // Compute sbox
                var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
                sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
                SBOX[x] = sx;
                INV_SBOX[sx] = x;
                // Compute multiplication
                var x2 = d[x];
                var x4 = d[x2];
                var x8 = d[x4];
                // Compute sub bytes, mix columns tables
                var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
                SUB_MIX_0[x] = (t << 24) | (t >>> 8);
                SUB_MIX_1[x] = (t << 16) | (t >>> 16);
                SUB_MIX_2[x] = (t << 8) | (t >>> 24);
                SUB_MIX_3[x] = t;
                // Compute inv sub bytes, inv mix columns tables
                var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
                INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
                INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
                INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);
                INV_SUB_MIX_3[sx] = t;
                // Compute next counter
                if (!x) {
                    x = xi = 1;
                }
                else {
                    x = x2 ^ d[d[d[x8 ^ x2]]];
                    xi ^= d[d[xi]];
                }
            }
        }());
        // Precomputed Rcon lookup
        var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
        /**
         * AES block cipher algorithm.
         */
        var AES = C_algo.AES = BlockCipher.extend({
            _doReset: function () {
                // Skip reset of nRounds has been set before and key did not change
                if (this._nRounds && this._keyPriorReset === this._key) {
                    return;
                }
                // Shortcuts
                var key = this._keyPriorReset = this._key;
                var keyWords = key.words;
                var keySize = key.sigBytes / 4;
                // Compute number of rounds
                var nRounds = this._nRounds = keySize + 6;
                // Compute number of key schedule rows
                var ksRows = (nRounds + 1) * 4;
                // Compute key schedule
                var keySchedule = this._keySchedule = [];
                for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                    if (ksRow < keySize) {
                        keySchedule[ksRow] = keyWords[ksRow];
                    }
                    else {
                        var t = keySchedule[ksRow - 1];
                        if (!(ksRow % keySize)) {
                            // Rot word
                            t = (t << 8) | (t >>> 24);
                            // Sub word
                            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                            // Mix Rcon
                            t ^= RCON[(ksRow / keySize) | 0] << 24;
                        }
                        else if (keySize > 6 && ksRow % keySize == 4) {
                            // Sub word
                            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                        }
                        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                    }
                }
                // Compute inv key schedule
                var invKeySchedule = this._invKeySchedule = [];
                for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                    var ksRow = ksRows - invKsRow;
                    if (invKsRow % 4) {
                        var t = keySchedule[ksRow];
                    }
                    else {
                        var t = keySchedule[ksRow - 4];
                    }
                    if (invKsRow < 4 || ksRow <= 4) {
                        invKeySchedule[invKsRow] = t;
                    }
                    else {
                        invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
                            INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                    }
                }
            },
            encryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
            },
            decryptBlock: function (M, offset) {
                // Swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
                this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                // Inv swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
            },
            _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                // Shortcut
                var nRounds = this._nRounds;
                // Get input, add round key
                var s0 = M[offset] ^ keySchedule[0];
                var s1 = M[offset + 1] ^ keySchedule[1];
                var s2 = M[offset + 2] ^ keySchedule[2];
                var s3 = M[offset + 3] ^ keySchedule[3];
                // Key schedule row counter
                var ksRow = 4;
                // Rounds
                for (var round = 1; round < nRounds; round++) {
                    // Shift rows, sub bytes, mix columns, add round key
                    var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                    var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                    var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                    var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                    // Update state
                    s0 = t0;
                    s1 = t1;
                    s2 = t2;
                    s3 = t3;
                }
                // Shift rows, sub bytes, add round key
                var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                // Set output
                M[offset] = t0;
                M[offset + 1] = t1;
                M[offset + 2] = t2;
                M[offset + 3] = t3;
            },
            keySize: 256 / 32
        });
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
         */
        C.AES = BlockCipher._createHelper(AES);
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        // Permuted Choice 1 constants
        var PC1 = [
            57, 49, 41, 33, 25, 17, 9, 1,
            58, 50, 42, 34, 26, 18, 10, 2,
            59, 51, 43, 35, 27, 19, 11, 3,
            60, 52, 44, 36, 63, 55, 47, 39,
            31, 23, 15, 7, 62, 54, 46, 38,
            30, 22, 14, 6, 61, 53, 45, 37,
            29, 21, 13, 5, 28, 20, 12, 4
        ];
        // Permuted Choice 2 constants
        var PC2 = [
            14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32
        ];
        // Cumulative bit shift constants
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        // SBOXes and round permutation constants
        var SBOX_P = [
            {
                0x0: 0x808200,
                0x10000000: 0x8000,
                0x20000000: 0x808002,
                0x30000000: 0x2,
                0x40000000: 0x200,
                0x50000000: 0x808202,
                0x60000000: 0x800202,
                0x70000000: 0x800000,
                0x80000000: 0x202,
                0x90000000: 0x800200,
                0xa0000000: 0x8200,
                0xb0000000: 0x808000,
                0xc0000000: 0x8002,
                0xd0000000: 0x800002,
                0xe0000000: 0x0,
                0xf0000000: 0x8202,
                0x8000000: 0x0,
                0x18000000: 0x808202,
                0x28000000: 0x8202,
                0x38000000: 0x8000,
                0x48000000: 0x808200,
                0x58000000: 0x200,
                0x68000000: 0x808002,
                0x78000000: 0x2,
                0x88000000: 0x800200,
                0x98000000: 0x8200,
                0xa8000000: 0x808000,
                0xb8000000: 0x800202,
                0xc8000000: 0x800002,
                0xd8000000: 0x8002,
                0xe8000000: 0x202,
                0xf8000000: 0x800000,
                0x1: 0x8000,
                0x10000001: 0x2,
                0x20000001: 0x808200,
                0x30000001: 0x800000,
                0x40000001: 0x808002,
                0x50000001: 0x8200,
                0x60000001: 0x200,
                0x70000001: 0x800202,
                0x80000001: 0x808202,
                0x90000001: 0x808000,
                0xa0000001: 0x800002,
                0xb0000001: 0x8202,
                0xc0000001: 0x202,
                0xd0000001: 0x800200,
                0xe0000001: 0x8002,
                0xf0000001: 0x0,
                0x8000001: 0x808202,
                0x18000001: 0x808000,
                0x28000001: 0x800000,
                0x38000001: 0x200,
                0x48000001: 0x8000,
                0x58000001: 0x800002,
                0x68000001: 0x2,
                0x78000001: 0x8202,
                0x88000001: 0x8002,
                0x98000001: 0x800202,
                0xa8000001: 0x202,
                0xb8000001: 0x808200,
                0xc8000001: 0x800200,
                0xd8000001: 0x0,
                0xe8000001: 0x8200,
                0xf8000001: 0x808002
            },
            {
                0x0: 0x40084010,
                0x1000000: 0x4000,
                0x2000000: 0x80000,
                0x3000000: 0x40080010,
                0x4000000: 0x40000010,
                0x5000000: 0x40084000,
                0x6000000: 0x40004000,
                0x7000000: 0x10,
                0x8000000: 0x84000,
                0x9000000: 0x40004010,
                0xa000000: 0x40000000,
                0xb000000: 0x84010,
                0xc000000: 0x80010,
                0xd000000: 0x0,
                0xe000000: 0x4010,
                0xf000000: 0x40080000,
                0x800000: 0x40004000,
                0x1800000: 0x84010,
                0x2800000: 0x10,
                0x3800000: 0x40004010,
                0x4800000: 0x40084010,
                0x5800000: 0x40000000,
                0x6800000: 0x80000,
                0x7800000: 0x40080010,
                0x8800000: 0x80010,
                0x9800000: 0x0,
                0xa800000: 0x4000,
                0xb800000: 0x40080000,
                0xc800000: 0x40000010,
                0xd800000: 0x84000,
                0xe800000: 0x40084000,
                0xf800000: 0x4010,
                0x10000000: 0x0,
                0x11000000: 0x40080010,
                0x12000000: 0x40004010,
                0x13000000: 0x40084000,
                0x14000000: 0x40080000,
                0x15000000: 0x10,
                0x16000000: 0x84010,
                0x17000000: 0x4000,
                0x18000000: 0x4010,
                0x19000000: 0x80000,
                0x1a000000: 0x80010,
                0x1b000000: 0x40000010,
                0x1c000000: 0x84000,
                0x1d000000: 0x40004000,
                0x1e000000: 0x40000000,
                0x1f000000: 0x40084010,
                0x10800000: 0x84010,
                0x11800000: 0x80000,
                0x12800000: 0x40080000,
                0x13800000: 0x4000,
                0x14800000: 0x40004000,
                0x15800000: 0x40084010,
                0x16800000: 0x10,
                0x17800000: 0x40000000,
                0x18800000: 0x40084000,
                0x19800000: 0x40000010,
                0x1a800000: 0x40004010,
                0x1b800000: 0x80010,
                0x1c800000: 0x0,
                0x1d800000: 0x4010,
                0x1e800000: 0x40080010,
                0x1f800000: 0x84000
            },
            {
                0x0: 0x104,
                0x100000: 0x0,
                0x200000: 0x4000100,
                0x300000: 0x10104,
                0x400000: 0x10004,
                0x500000: 0x4000004,
                0x600000: 0x4010104,
                0x700000: 0x4010000,
                0x800000: 0x4000000,
                0x900000: 0x4010100,
                0xa00000: 0x10100,
                0xb00000: 0x4010004,
                0xc00000: 0x4000104,
                0xd00000: 0x10000,
                0xe00000: 0x4,
                0xf00000: 0x100,
                0x80000: 0x4010100,
                0x180000: 0x4010004,
                0x280000: 0x0,
                0x380000: 0x4000100,
                0x480000: 0x4000004,
                0x580000: 0x10000,
                0x680000: 0x10004,
                0x780000: 0x104,
                0x880000: 0x4,
                0x980000: 0x100,
                0xa80000: 0x4010000,
                0xb80000: 0x10104,
                0xc80000: 0x10100,
                0xd80000: 0x4000104,
                0xe80000: 0x4010104,
                0xf80000: 0x4000000,
                0x1000000: 0x4010100,
                0x1100000: 0x10004,
                0x1200000: 0x10000,
                0x1300000: 0x4000100,
                0x1400000: 0x100,
                0x1500000: 0x4010104,
                0x1600000: 0x4000004,
                0x1700000: 0x0,
                0x1800000: 0x4000104,
                0x1900000: 0x4000000,
                0x1a00000: 0x4,
                0x1b00000: 0x10100,
                0x1c00000: 0x4010000,
                0x1d00000: 0x104,
                0x1e00000: 0x10104,
                0x1f00000: 0x4010004,
                0x1080000: 0x4000000,
                0x1180000: 0x104,
                0x1280000: 0x4010100,
                0x1380000: 0x0,
                0x1480000: 0x10004,
                0x1580000: 0x4000100,
                0x1680000: 0x100,
                0x1780000: 0x4010004,
                0x1880000: 0x10000,
                0x1980000: 0x4010104,
                0x1a80000: 0x10104,
                0x1b80000: 0x4000004,
                0x1c80000: 0x4000104,
                0x1d80000: 0x4010000,
                0x1e80000: 0x4,
                0x1f80000: 0x10100
            },
            {
                0x0: 0x80401000,
                0x10000: 0x80001040,
                0x20000: 0x401040,
                0x30000: 0x80400000,
                0x40000: 0x0,
                0x50000: 0x401000,
                0x60000: 0x80000040,
                0x70000: 0x400040,
                0x80000: 0x80000000,
                0x90000: 0x400000,
                0xa0000: 0x40,
                0xb0000: 0x80001000,
                0xc0000: 0x80400040,
                0xd0000: 0x1040,
                0xe0000: 0x1000,
                0xf0000: 0x80401040,
                0x8000: 0x80001040,
                0x18000: 0x40,
                0x28000: 0x80400040,
                0x38000: 0x80001000,
                0x48000: 0x401000,
                0x58000: 0x80401040,
                0x68000: 0x0,
                0x78000: 0x80400000,
                0x88000: 0x1000,
                0x98000: 0x80401000,
                0xa8000: 0x400000,
                0xb8000: 0x1040,
                0xc8000: 0x80000000,
                0xd8000: 0x400040,
                0xe8000: 0x401040,
                0xf8000: 0x80000040,
                0x100000: 0x400040,
                0x110000: 0x401000,
                0x120000: 0x80000040,
                0x130000: 0x0,
                0x140000: 0x1040,
                0x150000: 0x80400040,
                0x160000: 0x80401000,
                0x170000: 0x80001040,
                0x180000: 0x80401040,
                0x190000: 0x80000000,
                0x1a0000: 0x80400000,
                0x1b0000: 0x401040,
                0x1c0000: 0x80001000,
                0x1d0000: 0x400000,
                0x1e0000: 0x40,
                0x1f0000: 0x1000,
                0x108000: 0x80400000,
                0x118000: 0x80401040,
                0x128000: 0x0,
                0x138000: 0x401000,
                0x148000: 0x400040,
                0x158000: 0x80000000,
                0x168000: 0x80001040,
                0x178000: 0x40,
                0x188000: 0x80000040,
                0x198000: 0x1000,
                0x1a8000: 0x80001000,
                0x1b8000: 0x80400040,
                0x1c8000: 0x1040,
                0x1d8000: 0x80401000,
                0x1e8000: 0x400000,
                0x1f8000: 0x401040
            },
            {
                0x0: 0x80,
                0x1000: 0x1040000,
                0x2000: 0x40000,
                0x3000: 0x20000000,
                0x4000: 0x20040080,
                0x5000: 0x1000080,
                0x6000: 0x21000080,
                0x7000: 0x40080,
                0x8000: 0x1000000,
                0x9000: 0x20040000,
                0xa000: 0x20000080,
                0xb000: 0x21040080,
                0xc000: 0x21040000,
                0xd000: 0x0,
                0xe000: 0x1040080,
                0xf000: 0x21000000,
                0x800: 0x1040080,
                0x1800: 0x21000080,
                0x2800: 0x80,
                0x3800: 0x1040000,
                0x4800: 0x40000,
                0x5800: 0x20040080,
                0x6800: 0x21040000,
                0x7800: 0x20000000,
                0x8800: 0x20040000,
                0x9800: 0x0,
                0xa800: 0x21040080,
                0xb800: 0x1000080,
                0xc800: 0x20000080,
                0xd800: 0x21000000,
                0xe800: 0x1000000,
                0xf800: 0x40080,
                0x10000: 0x40000,
                0x11000: 0x80,
                0x12000: 0x20000000,
                0x13000: 0x21000080,
                0x14000: 0x1000080,
                0x15000: 0x21040000,
                0x16000: 0x20040080,
                0x17000: 0x1000000,
                0x18000: 0x21040080,
                0x19000: 0x21000000,
                0x1a000: 0x1040000,
                0x1b000: 0x20040000,
                0x1c000: 0x40080,
                0x1d000: 0x20000080,
                0x1e000: 0x0,
                0x1f000: 0x1040080,
                0x10800: 0x21000080,
                0x11800: 0x1000000,
                0x12800: 0x1040000,
                0x13800: 0x20040080,
                0x14800: 0x20000000,
                0x15800: 0x1040080,
                0x16800: 0x80,
                0x17800: 0x21040000,
                0x18800: 0x40080,
                0x19800: 0x21040080,
                0x1a800: 0x0,
                0x1b800: 0x21000000,
                0x1c800: 0x1000080,
                0x1d800: 0x40000,
                0x1e800: 0x20040000,
                0x1f800: 0x20000080
            },
            {
                0x0: 0x10000008,
                0x100: 0x2000,
                0x200: 0x10200000,
                0x300: 0x10202008,
                0x400: 0x10002000,
                0x500: 0x200000,
                0x600: 0x200008,
                0x700: 0x10000000,
                0x800: 0x0,
                0x900: 0x10002008,
                0xa00: 0x202000,
                0xb00: 0x8,
                0xc00: 0x10200008,
                0xd00: 0x202008,
                0xe00: 0x2008,
                0xf00: 0x10202000,
                0x80: 0x10200000,
                0x180: 0x10202008,
                0x280: 0x8,
                0x380: 0x200000,
                0x480: 0x202008,
                0x580: 0x10000008,
                0x680: 0x10002000,
                0x780: 0x2008,
                0x880: 0x200008,
                0x980: 0x2000,
                0xa80: 0x10002008,
                0xb80: 0x10200008,
                0xc80: 0x0,
                0xd80: 0x10202000,
                0xe80: 0x202000,
                0xf80: 0x10000000,
                0x1000: 0x10002000,
                0x1100: 0x10200008,
                0x1200: 0x10202008,
                0x1300: 0x2008,
                0x1400: 0x200000,
                0x1500: 0x10000000,
                0x1600: 0x10000008,
                0x1700: 0x202000,
                0x1800: 0x202008,
                0x1900: 0x0,
                0x1a00: 0x8,
                0x1b00: 0x10200000,
                0x1c00: 0x2000,
                0x1d00: 0x10002008,
                0x1e00: 0x10202000,
                0x1f00: 0x200008,
                0x1080: 0x8,
                0x1180: 0x202000,
                0x1280: 0x200000,
                0x1380: 0x10000008,
                0x1480: 0x10002000,
                0x1580: 0x2008,
                0x1680: 0x10202008,
                0x1780: 0x10200000,
                0x1880: 0x10202000,
                0x1980: 0x10200008,
                0x1a80: 0x2000,
                0x1b80: 0x202008,
                0x1c80: 0x200008,
                0x1d80: 0x0,
                0x1e80: 0x10000000,
                0x1f80: 0x10002008
            },
            {
                0x0: 0x100000,
                0x10: 0x2000401,
                0x20: 0x400,
                0x30: 0x100401,
                0x40: 0x2100401,
                0x50: 0x0,
                0x60: 0x1,
                0x70: 0x2100001,
                0x80: 0x2000400,
                0x90: 0x100001,
                0xa0: 0x2000001,
                0xb0: 0x2100400,
                0xc0: 0x2100000,
                0xd0: 0x401,
                0xe0: 0x100400,
                0xf0: 0x2000000,
                0x8: 0x2100001,
                0x18: 0x0,
                0x28: 0x2000401,
                0x38: 0x2100400,
                0x48: 0x100000,
                0x58: 0x2000001,
                0x68: 0x2000000,
                0x78: 0x401,
                0x88: 0x100401,
                0x98: 0x2000400,
                0xa8: 0x2100000,
                0xb8: 0x100001,
                0xc8: 0x400,
                0xd8: 0x2100401,
                0xe8: 0x1,
                0xf8: 0x100400,
                0x100: 0x2000000,
                0x110: 0x100000,
                0x120: 0x2000401,
                0x130: 0x2100001,
                0x140: 0x100001,
                0x150: 0x2000400,
                0x160: 0x2100400,
                0x170: 0x100401,
                0x180: 0x401,
                0x190: 0x2100401,
                0x1a0: 0x100400,
                0x1b0: 0x1,
                0x1c0: 0x0,
                0x1d0: 0x2100000,
                0x1e0: 0x2000001,
                0x1f0: 0x400,
                0x108: 0x100400,
                0x118: 0x2000401,
                0x128: 0x2100001,
                0x138: 0x1,
                0x148: 0x2000000,
                0x158: 0x100000,
                0x168: 0x401,
                0x178: 0x2100400,
                0x188: 0x2000001,
                0x198: 0x2100000,
                0x1a8: 0x0,
                0x1b8: 0x2100401,
                0x1c8: 0x100401,
                0x1d8: 0x400,
                0x1e8: 0x2000400,
                0x1f8: 0x100001
            },
            {
                0x0: 0x8000820,
                0x1: 0x20000,
                0x2: 0x8000000,
                0x3: 0x20,
                0x4: 0x20020,
                0x5: 0x8020820,
                0x6: 0x8020800,
                0x7: 0x800,
                0x8: 0x8020000,
                0x9: 0x8000800,
                0xa: 0x20800,
                0xb: 0x8020020,
                0xc: 0x820,
                0xd: 0x0,
                0xe: 0x8000020,
                0xf: 0x20820,
                0x80000000: 0x800,
                0x80000001: 0x8020820,
                0x80000002: 0x8000820,
                0x80000003: 0x8000000,
                0x80000004: 0x8020000,
                0x80000005: 0x20800,
                0x80000006: 0x20820,
                0x80000007: 0x20,
                0x80000008: 0x8000020,
                0x80000009: 0x820,
                0x8000000a: 0x20020,
                0x8000000b: 0x8020800,
                0x8000000c: 0x0,
                0x8000000d: 0x8020020,
                0x8000000e: 0x8000800,
                0x8000000f: 0x20000,
                0x10: 0x20820,
                0x11: 0x8020800,
                0x12: 0x20,
                0x13: 0x800,
                0x14: 0x8000800,
                0x15: 0x8000020,
                0x16: 0x8020020,
                0x17: 0x20000,
                0x18: 0x0,
                0x19: 0x20020,
                0x1a: 0x8020000,
                0x1b: 0x8000820,
                0x1c: 0x8020820,
                0x1d: 0x20800,
                0x1e: 0x820,
                0x1f: 0x8000000,
                0x80000010: 0x20000,
                0x80000011: 0x800,
                0x80000012: 0x8020020,
                0x80000013: 0x20820,
                0x80000014: 0x20,
                0x80000015: 0x8020000,
                0x80000016: 0x8000000,
                0x80000017: 0x8000820,
                0x80000018: 0x8020820,
                0x80000019: 0x8000020,
                0x8000001a: 0x8000800,
                0x8000001b: 0x0,
                0x8000001c: 0x20800,
                0x8000001d: 0x820,
                0x8000001e: 0x20020,
                0x8000001f: 0x8020800
            }
        ];
        // Masks that select the SBOX input
        var SBOX_MASK = [
            0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
            0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
        ];
        /**
         * DES block cipher algorithm.
         */
        var DES = C_algo.DES = BlockCipher.extend({
            _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                // Select 56 bits according to PC1
                var keyBits = [];
                for (var i = 0; i < 56; i++) {
                    var keyBitPos = PC1[i] - 1;
                    keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
                }
                // Assemble 16 subkeys
                var subKeys = this._subKeys = [];
                for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                    // Create subkey
                    var subKey = subKeys[nSubKey] = [];
                    // Shortcut
                    var bitShift = BIT_SHIFTS[nSubKey];
                    // Select 48 bits according to PC2
                    for (var i = 0; i < 24; i++) {
                        // Select from the left 28 key bits
                        subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);
                        // Select from the right 28 key bits
                        subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
                    }
                    // Since each subkey is applied to an expanded 32-bit input,
                    // the subkey can be broken into 8 values scaled to 32-bits,
                    // which allows the key to be used without expansion
                    subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
                    for (var i = 1; i < 7; i++) {
                        subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
                    }
                    subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
                }
                // Compute inverse subkeys
                var invSubKeys = this._invSubKeys = [];
                for (var i = 0; i < 16; i++) {
                    invSubKeys[i] = subKeys[15 - i];
                }
            },
            encryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._subKeys);
            },
            decryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._invSubKeys);
            },
            _doCryptBlock: function (M, offset, subKeys) {
                // Get input
                this._lBlock = M[offset];
                this._rBlock = M[offset + 1];
                // Initial permutation
                exchangeLR.call(this, 4, 0x0f0f0f0f);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeLR.call(this, 1, 0x55555555);
                // Rounds
                for (var round = 0; round < 16; round++) {
                    // Shortcuts
                    var subKey = subKeys[round];
                    var lBlock = this._lBlock;
                    var rBlock = this._rBlock;
                    // Feistel function
                    var f = 0;
                    for (var i = 0; i < 8; i++) {
                        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                    }
                    this._lBlock = rBlock;
                    this._rBlock = lBlock ^ f;
                }
                // Undo swap from last round
                var t = this._lBlock;
                this._lBlock = this._rBlock;
                this._rBlock = t;
                // Final permutation
                exchangeLR.call(this, 1, 0x55555555);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeLR.call(this, 4, 0x0f0f0f0f);
                // Set output
                M[offset] = this._lBlock;
                M[offset + 1] = this._rBlock;
            },
            keySize: 64 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
        });
        // Swap bits across the left and right words
        function exchangeLR(offset, mask) {
            var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
            this._rBlock ^= t;
            this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
            var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
            this._lBlock ^= t;
            this._rBlock ^= t << offset;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
         */
        C.DES = BlockCipher._createHelper(DES);
        /**
         * Triple-DES block cipher algorithm.
         */
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
            _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                // Create DES instances
                this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
                this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
                this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
            },
            encryptBlock: function (M, offset) {
                this._des1.encryptBlock(M, offset);
                this._des2.decryptBlock(M, offset);
                this._des3.encryptBlock(M, offset);
            },
            decryptBlock: function (M, offset) {
                this._des3.decryptBlock(M, offset);
                this._des2.encryptBlock(M, offset);
                this._des1.decryptBlock(M, offset);
            },
            keySize: 192 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
        });
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
         */
        C.TripleDES = BlockCipher._createHelper(TripleDES);
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        /**
         * RC4 stream cipher algorithm.
         */
        var RC4 = C_algo.RC4 = StreamCipher.extend({
            _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                var keySigBytes = key.sigBytes;
                // Init sbox
                var S = this._S = [];
                for (var i = 0; i < 256; i++) {
                    S[i] = i;
                }
                // Key setup
                for (var i = 0, j = 0; i < 256; i++) {
                    var keyByteIndex = i % keySigBytes;
                    var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;
                    j = (j + S[i] + keyByte) % 256;
                    // Swap
                    var t = S[i];
                    S[i] = S[j];
                    S[j] = t;
                }
                // Counters
                this._i = this._j = 0;
            },
            _doProcessBlock: function (M, offset) {
                M[offset] ^= generateKeystreamWord.call(this);
            },
            keySize: 256 / 32,
            ivSize: 0
        });
        function generateKeystreamWord() {
            // Shortcuts
            var S = this._S;
            var i = this._i;
            var j = this._j;
            // Generate keystream word
            var keystreamWord = 0;
            for (var n = 0; n < 4; n++) {
                i = (i + 1) % 256;
                j = (j + S[i]) % 256;
                // Swap
                var t = S[i];
                S[i] = S[j];
                S[j] = t;
                keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
            }
            // Update counters
            this._i = i;
            this._j = j;
            return keystreamWord;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
         */
        C.RC4 = StreamCipher._createHelper(RC4);
        /**
         * Modified RC4 stream cipher algorithm.
         */
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
            /**
             * Configuration options.
             *
             * @property {number} drop The number of keystream words to drop. Default 192
             */
            cfg: RC4.cfg.extend({
                drop: 192
            }),
            _doReset: function () {
                RC4._doReset.call(this);
                // Drop
                for (var i = this.cfg.drop; i > 0; i--) {
                    generateKeystreamWord.call(this);
                }
            }
        });
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
         */
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
    }());
    /** @preserve
     * Counter block mode compatible with  Dr Brian Gladman fileenc.c
     * derived from CryptoJS.mode.CTR
     * Jan Hruby jhruby.web@gmail.com
     */
    CryptoJS.mode.CTRGladman = (function () {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
            if (((word >> 24) & 0xff) === 0xff) { //overflow
                var b1 = (word >> 16) & 0xff;
                var b2 = (word >> 8) & 0xff;
                var b3 = word & 0xff;
                if (b1 === 0xff) // overflow b1
                 {
                    b1 = 0;
                    if (b2 === 0xff) {
                        b2 = 0;
                        if (b3 === 0xff) {
                            b3 = 0;
                        }
                        else {
                            ++b3;
                        }
                    }
                    else {
                        ++b2;
                    }
                }
                else {
                    ++b1;
                }
                word = 0;
                word += (b1 << 16);
                word += (b2 << 8);
                word += b3;
            }
            else {
                word += (0x01 << 24);
            }
            return word;
        }
        function incCounter(counter) {
            if ((counter[0] = incWord(counter[0])) === 0) {
                // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
                counter[1] = incWord(counter[1]);
            }
            return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;
                // Generate keystream
                if (iv) {
                    counter = this._counter = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                incCounter(counter);
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);
                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];
        /**
         * Rabbit stream cipher algorithm
         */
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
            _doReset: function () {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;
                // Swap endian
                for (var i = 0; i < 4; i++) {
                    K[i] = (((K[i] << 8) | (K[i] >>> 24)) & 0x00ff00ff) |
                        (((K[i] << 24) | (K[i] >>> 8)) & 0xff00ff00);
                }
                // Generate initial state values
                var X = this._X = [
                    K[0], (K[3] << 16) | (K[2] >>> 16),
                    K[1], (K[0] << 16) | (K[3] >>> 16),
                    K[2], (K[1] << 16) | (K[0] >>> 16),
                    K[3], (K[2] << 16) | (K[1] >>> 16)
                ];
                // Generate initial counter values
                var C = this._C = [
                    (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                    (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                    (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                    (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                ];
                // Carry bit
                this._b = 0;
                // Iterate the system four times
                for (var i = 0; i < 4; i++) {
                    nextState.call(this);
                }
                // Modify the counters
                for (var i = 0; i < 8; i++) {
                    C[i] ^= X[(i + 4) & 7];
                }
                // IV setup
                if (iv) {
                    // Shortcuts
                    var IV = iv.words;
                    var IV_0 = IV[0];
                    var IV_1 = IV[1];
                    // Generate four subvectors
                    var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                    var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                    var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                    var i3 = (i2 << 16) | (i0 & 0x0000ffff);
                    // Modify counter values
                    C[0] ^= i0;
                    C[1] ^= i1;
                    C[2] ^= i2;
                    C[3] ^= i3;
                    C[4] ^= i0;
                    C[5] ^= i1;
                    C[6] ^= i2;
                    C[7] ^= i3;
                    // Iterate the system four times
                    for (var i = 0; i < 4; i++) {
                        nextState.call(this);
                    }
                }
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var X = this._X;
                // Iterate the system
                nextState.call(this);
                // Generate four keystream words
                S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);
                for (var i = 0; i < 4; i++) {
                    // Swap endian
                    S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                        (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);
                    // Encrypt
                    M[offset + i] ^= S[i];
                }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
        });
        function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C;
            // Save old counter values
            for (var i = 0; i < 8; i++) {
                C_[i] = C[i];
            }
            // Calculate new counter values
            C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
            C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
            C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
            C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
            C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
            C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
            C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
            C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
            this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;
            // Calculate the g-values
            for (var i = 0; i < 8; i++) {
                var gx = X[i] + C[i];
                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;
                // Calculate high and low result of squaring
                var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);
                // High XOR low
                G[i] = gh ^ gl;
            }
            // Calculate new state values
            X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
            X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
            X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
            X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
            X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
            X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
            X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
            X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
         */
        C.Rabbit = StreamCipher._createHelper(Rabbit);
    }());
    /**
     * Counter block mode.
     */
    CryptoJS.mode.CTR = (function () {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;
                // Generate keystream
                if (iv) {
                    counter = this._counter = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);
                // Increment counter
                counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;
                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];
        /**
         * Rabbit stream cipher algorithm.
         *
         * This is a legacy version that neglected to convert the key to little-endian.
         * This error doesn't affect the cipher's security,
         * but it does affect its compatibility with other implementations.
         */
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
            _doReset: function () {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;
                // Generate initial state values
                var X = this._X = [
                    K[0], (K[3] << 16) | (K[2] >>> 16),
                    K[1], (K[0] << 16) | (K[3] >>> 16),
                    K[2], (K[1] << 16) | (K[0] >>> 16),
                    K[3], (K[2] << 16) | (K[1] >>> 16)
                ];
                // Generate initial counter values
                var C = this._C = [
                    (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                    (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                    (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                    (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                ];
                // Carry bit
                this._b = 0;
                // Iterate the system four times
                for (var i = 0; i < 4; i++) {
                    nextState.call(this);
                }
                // Modify the counters
                for (var i = 0; i < 8; i++) {
                    C[i] ^= X[(i + 4) & 7];
                }
                // IV setup
                if (iv) {
                    // Shortcuts
                    var IV = iv.words;
                    var IV_0 = IV[0];
                    var IV_1 = IV[1];
                    // Generate four subvectors
                    var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                    var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                    var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                    var i3 = (i2 << 16) | (i0 & 0x0000ffff);
                    // Modify counter values
                    C[0] ^= i0;
                    C[1] ^= i1;
                    C[2] ^= i2;
                    C[3] ^= i3;
                    C[4] ^= i0;
                    C[5] ^= i1;
                    C[6] ^= i2;
                    C[7] ^= i3;
                    // Iterate the system four times
                    for (var i = 0; i < 4; i++) {
                        nextState.call(this);
                    }
                }
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var X = this._X;
                // Iterate the system
                nextState.call(this);
                // Generate four keystream words
                S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);
                for (var i = 0; i < 4; i++) {
                    // Swap endian
                    S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                        (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);
                    // Encrypt
                    M[offset + i] ^= S[i];
                }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
        });
        function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C;
            // Save old counter values
            for (var i = 0; i < 8; i++) {
                C_[i] = C[i];
            }
            // Calculate new counter values
            C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
            C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
            C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
            C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
            C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
            C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
            C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
            C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
            this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;
            // Calculate the g-values
            for (var i = 0; i < 8; i++) {
                var gx = X[i] + C[i];
                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;
                // Calculate high and low result of squaring
                var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);
                // High XOR low
                G[i] = gh ^ gl;
            }
            // Calculate new state values
            X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
            X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
            X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
            X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
            X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
            X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
            X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
            X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
         */
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
    }());
    /**
     * Zero padding strategy.
     */
    CryptoJS.pad.ZeroPadding = {
        pad: function (data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;
            // Pad
            data.clamp();
            data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
        },
        unpad: function (data) {
            // Shortcut
            var dataWords = data.words;
            // Unpad
            var i = data.sigBytes - 1;
            while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
                i--;
            }
            data.sigBytes = i + 1;
        }
    };
    return CryptoJS;
}));

});

const commonjsRegister$z = commonjsRegister$C;
commonjsRegister$z("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic.cjs", function (module, exports) {
var elliptic = exports;
// hello ladies ;)
function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () { };
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
}
elliptic.inherits = inherits;
elliptic.version = '6.5.0';
elliptic.utils = commonjsRequire("./elliptic/utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib");
elliptic.curve = commonjsRequire("./elliptic/curve/index.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib");
elliptic.curves = commonjsRequire("./elliptic/curves.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib");
// Protocols
elliptic.ec = commonjsRequire("./elliptic/ec/index.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib");
elliptic.eddsa = commonjsRequire("./elliptic/eddsa/index.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib");

});

const commonjsRegister$y = commonjsRegister$C;
commonjsRegister$y("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve/base.cjs", function (module, exports) {
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var elliptic = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
    }
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;
        for (var k = j + doubles.step - 1; k >= j; k--)
            nafW = (nafW << 1) + naf[k];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
            var nafW = repr[j];
            if (nafW === i)
                b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i)
                b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var k = 0; i >= 0 && naf[i] === 0; i--)
            k++;
        if (i >= 0)
            k++;
        acc = acc.dblp(k);
        if (i < 0)
            break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0)
                acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
            else
                acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        }
        else {
            // J +- J
            if (z > 0)
                acc = acc.add(wnd[(z - 1) >> 1]);
            else
                acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    for (var i = 0; i < len; i++) {
        var p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a]);
            naf[b] = getNAF(coeffs[b], wndWidth[b]);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            null,
            null,
            points[b] /* 7 */
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        }
        else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            -1,
            -5,
            -7,
            0,
            7,
            5,
            1,
            3 /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (var j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
            var zero = true;
            for (var j = 0; j < len; j++) {
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0)
                    zero = false;
            }
            if (!zero)
                break;
            k++;
            i--;
        }
        if (i >= 0)
            k++;
        acc = acc.dblp(k);
        if (i < 0)
            break;
        for (var j = 0; j < len; j++) {
            var z = tmp[j];
            var p;
            if (z === 0)
                continue;
            else if (z > 0)
                p = wnd[j][(z - 1) >> 1];
            else if (z < 0)
                p = wnd[j][(-z - 1) >> 1].neg();
            if (p.type === 'affine')
                acc = acc.mixedAdd(p);
            else
                acc = acc.add(p);
        }
    }
    // Zeroify references
    for (var i = 0; i < len; i++)
        wnd[i] = null;
    if (jacobianResult)
        return acc;
    else
        return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq( /*other*/) {
    throw new Error('Not implemented');
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
            assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
            assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    }
    else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
        bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact)
        return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
    return [0x04].concat(x, this.getY().toArray('be', len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
        return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
        return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
        return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
            acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
        r = r.dbl();
    return r;
};

});

const commonjsRegister$x = commonjsRegister$C;
commonjsRegister$x("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve/edwards.cjs", function (module, exports) {
var curve = commonjsRequire("./index.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var elliptic = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var inherits = elliptic.inherits;
var Base = curve.base;
var assert = elliptic.utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
        return num.redNeg();
    else
        return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
        return num;
    else
        return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
        x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red)
        y = y.toRed(this.red);
    // x^2 = (y^2 - 1) / (d y^2 + 1)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.one);
    var rhs = y2.redMul(this.d).redAdd(this.one);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd)
            throw new Error('invalid point');
        else
            return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    if (x.isOdd() !== odd)
        x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
        return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    }
    else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
            this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne)
                this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
        this.y.cmp(this.z) === 0;
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
        // E = a * C
        var e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        }
        else {
            // H = Z1^2
            var h = this.z.redSqr();
            // J = F - 2 * H
            var j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    }
    else {
        // E = C + D
        var e = c.redAdd(d);
        // H = (c * Z1)^2
        var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
        // J = E - 2 * H
        var j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
        return this;
    // Double in extended coordinates
    if (this.curve.extended)
        return this._extDbl();
    else
        return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    }
    else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity())
        return p;
    if (p.isInfinity())
        return this;
    if (this.curve.extended)
        return this._extAdd(p);
    else
        return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
    else
        return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne)
        return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
        this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other ||
        this.getX().cmp(other.getX()) === 0 &&
            this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
        return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
            return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
            return true;
    }
    return false;
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

});

const commonjsRegister$w = commonjsRegister$C;
commonjsRegister$w("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve/index.cjs", function (module, exports) {
var curve = exports;
curve.base = commonjsRequire("./base.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
curve.short = commonjsRequire("./short.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
curve.mont = commonjsRequire("./mont.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
curve.edwards = commonjsRequire("./edwards.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");

});

const commonjsRegister$v = commonjsRegister$C;
commonjsRegister$v("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve/mont.cjs", function (module, exports) {
var curve = commonjsRequire("./index.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var inherits = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve").inherits;
var Base = curve.base;
var elliptic = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var utils = elliptic.utils;
function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    }
    else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
    // No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
    for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
            a = a.diffAdd(b, c);
            // N * Q = 2 * ((N / 2) * Q + Q))
            b = b.dbl();
        }
        else {
            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
            b = a.diffAdd(b, c);
            // N * Q + Q = 2 * ((N / 2) * Q + Q)
            a = a.dbl();
        }
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

});

const commonjsRegister$u = commonjsRegister$C;
commonjsRegister$u("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve/short.cjs", function (module, exports) {
var curve = commonjsRequire("./index.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var elliptic = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curve");
var inherits = elliptic.inherits;
var Base = curve.base;
var assert = elliptic.utils.assert;
function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
    }
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
    }
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
        }
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
        basis = conf.basis.map(function (vec) {
            return {
                a: new BN(vec.a, 16),
                b: new BN(vec.b, 16)
            };
        });
    }
    else {
        basis = this._getEndoBasis(lambda);
    }
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [l1, l2];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        }
        else if (a1 && ++i === 2) {
            break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
        x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
        return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();
            if (split.k1.negative) {
                split.k1.ineg();
                p = p.neg(true);
            }
            if (split.k2.negative) {
                split.k2.ineg();
                beta = beta.neg(true);
            }
            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
        }
        return res;
    };
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    }
    else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
        return;
    var pre = this.precomputed;
    if (pre && pre.beta)
        return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function (p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
        return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
        obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
        return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
        return p;
    // P + O = P
    if (p.inf)
        return this;
    // P + P = 2P
    if (this.eq(p))
        return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p))
        return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf)
        return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
    else
        return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
    else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p ||
        this.inf === p.inf &&
            (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
        return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function (p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf)
        return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    }
    else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
        return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
        return p;
    // P + O = P
    if (p.isInfinity())
        return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
        else
            return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
        return p.toJ();
    // P + O = P
    if (p.isInfinity())
        return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
        else
            return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
        return this;
    if (this.isInfinity())
        return this;
    if (!pow)
        return this.dbl();
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (var i = 0; i < pow; i++)
            r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
            jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
        return this;
    if (this.curve.zeroA)
        return this._zeroDbl();
    else if (this.curve.threeA)
        return this._threeDbl();
    else
        return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    }
    else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    }
    else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
        return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
        return this.eq(p.toJ());
    if (this === p)
        return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
        return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
            return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
            return true;
    }
    return false;
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

});

const commonjsRegister$t = commonjsRegister$C;
commonjsRegister$t("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/curves.cjs", function (module, exports) {
var curves = exports;
var elliptic = commonjsRequire("../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic");
var assert = elliptic.utils.assert;
function PresetCurve(options) {
    if (options.type === 'short')
        this.curve = new elliptic.curve.short(options);
    else if (options.type === 'edwards')
        this.curve = new elliptic.curve.edwards(options);
    else
        this.curve = new elliptic.curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function () {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: 'SHA256',
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
    ]
});
defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: 'SHA256',
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
    ]
});
defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: 'SHA256',
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
    ]
});
defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
        '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
        'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: 'SHA384',
    gRed: false,
    g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
            '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
            '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
    ]
});
defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
        '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
        '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
        'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: 'SHA512',
    gRed: false,
    g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
            '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
            'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
            '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
            '3fad0761 353c7086 a272c240 88be9476 9fd16650'
    ]
});
defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: 'SHA256',
    gRed: false,
    g: [
        '9'
    ]
});
defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: 'SHA256',
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658'
    ]
});
var pre;
try {
    pre = require('./precomputed/secp256k1.cjs');
}
catch (e) {
    pre = undefined;
}
defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: 'SHA256',
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre
    ]
});

});

const commonjsRegister$s = commonjsRegister$C;
commonjsRegister$s("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec/index.cjs", function (module, exports) {
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var HmacDRBG = commonjsRequire("../../hmac-drbg/hmac-drbg.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var elliptic = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var utils = elliptic.utils;
var assert = utils.assert;
var KeyPair = commonjsRequire("./key.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var Signature = commonjsRequire("./signature.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
function EC(options) {
    if (!(this instanceof EC))
        return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);
        options = elliptic.curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof elliptic.curves.PresetCurve)
        options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
        options = {};
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || null,
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    do {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
            continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    } while (true);
};
EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
        msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
    else
        return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options)
        options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: options['extraEntropy'] ? bkey.concat(options['extraEntropy']) : bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; true; iter++) {
        var k = options.k ?
            options.k(iter) :
            new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
            continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
            continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
            continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
            continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
            (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
            return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    var p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
        return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
        r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null)
        return signature.recoveryParam;
    for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        }
        catch (e) {
            continue;
        }
        if (Qprime.eq(Q))
            return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

});

const commonjsRegister$r = commonjsRegister$C;
commonjsRegister$r("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec/key.cjs", function (module, exports) {
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var elliptic = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var utils = elliptic.utils;
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
        return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
        return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };
    return { result: true, reason: null };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
    if (!enc)
        return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
        return this.priv.toString(16, 2);
    else
        return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
            assert(key.x, 'Need x coordinate');
        }
        else if (this.ec.curve.type === 'short' ||
            this.ec.curve.type === 'edwards') {
            assert(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
        ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

});

const commonjsRegister$q = commonjsRegister$C;
commonjsRegister$q("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec/signature.cjs", function (module, exports) {
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var elliptic = commonjsRequire("../../elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/ec");
var utils = elliptic.utils;
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature)
        return options;
    //if (this._importDER(options, enc))
    //  return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined)
        this.recoveryParam = null;
    else
        this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

});

const commonjsRegister$p = commonjsRegister$C;
commonjsRegister$p("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa/index.cjs", function (module, exports) {
var curves = commonjsRequire("../curves.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
var utils = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = commonjsRequire("./key.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
var Signature = commonjsRequire("./signature.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
const BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
const CryptoJS = commonjsRequire("../../../../crypto-js/crypto-js.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
function byteArrayToWordArray(ba) {
    const wa = [];
    for (let i = 0; i < ba.length; i++) {
        wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);
    }
    return CryptoJS.lib.WordArray.create(wa, ba.length);
}
function EDDSA(curveName) {
    assert(curveName === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA))
        return new EDDSA(curveName);
    var curve = curves[curveName].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.byteArrayToWordArray = byteArrayToWordArray;
    //this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.secret(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message);
    s_ = s_.mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};
/**
 * @param {Array|String} message - message bytes
 * @param {Array|String|KeyPair} secret - secret bytes or a keypair
 * @returns {Signature} - signature
 */
EDDSA.prototype.signModified = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    // convert between curve25519 and ed25519 keys
    const secretLE = new BN(key.secret(), 16, 'le');
    const pubKey = this.encodePoint(this.g.mul(secretLE));
    const signBit = pubKey[31] & 0x80;
    var r = this.hashInt(key.secret(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    let s_ = this.hashInt(Rencoded, pubKey, message);
    s_ = s_.mul(secretLE);
    var S = r.add(s_).umod(this.curve.n);
    var Sencoded = S.toArray('le', 32);
    Sencoded[31] |= signBit;
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded, Sencoded: Sencoded });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    let toHash = Array.from(arguments).reduce((a, b) => a.concat(b));
    toHash = byteArrayToWordArray(toHash);
    const digest = CryptoJS['SHA512'](toHash).toString(CryptoJS.enc.Hex);
    return utils.intFromLE(digest).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
        return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

});

const commonjsRegister$o = commonjsRegister$C;
commonjsRegister$o("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa/key.cjs", function (module, exports) {
var utils = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
    else
        this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair)
        return pub;
    return new KeyPair(eddsa, { pub: pub });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair)
        return secret;
    return new KeyPair(eddsa, { secret: secret });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.signModified = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.signModified(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

});

const commonjsRegister$n = commonjsRegister$C;
commonjsRegister$n("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa/signature.cjs", function (module, exports) {
var BN = commonjsRequire("../../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
var utils = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/eddsa");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object')
        sig = parseBytes(sig);
    if (Array.isArray(sig)) {
        sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength)
        };
    }
    assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R))
        this._R = sig.R;
    if (sig.S instanceof BN)
        this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = Signature;

});

const commonjsRegister$m = commonjsRegister$C;
commonjsRegister$m("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/precomputed/secp256k1.cjs", function (module, exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
            ]
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
            ]
        ]
    }
};

});

const commonjsRegister$l = commonjsRegister$C;
commonjsRegister$l("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic/utils.cjs", function (module, exports) {
var utils = exports;
var BN = commonjsRequire("../../../BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic");
utils.assert = function (condition, errorMessage) {
    if (!condition) {
        throw new Error(errorMessage);
    }
};
// Represent num in a w-NAF form
function getNAF(num, w) {
    var naf = [];
    var ws = 1 << (w + 1);
    var k = num.clone();
    while (k.cmpn(1) >= 0) {
        var z;
        if (k.isOdd()) {
            var mod = k.andln(ws - 1);
            if (mod > (ws >> 1) - 1)
                z = (ws >> 1) - mod;
            else
                z = mod;
            k.isubn(z);
        }
        else {
            z = 0;
        }
        naf.push(z);
        // Optimization, shift by word if possible
        var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
        for (var i = 1; i < shift; i++)
            naf.push(0);
        k.iushrn(shift);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        []
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
            m14 = -1;
        if (m24 === 3)
            m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
            u1 = 0;
        }
        else {
            var m8 = (k1.andln(7) + d1) & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
                u1 = -m14;
            else
                u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
            u2 = 0;
        }
        else {
            var m8 = (k2.andln(7) + d2) & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
                u2 = -m24;
            else
                u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
            this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;
// used to convert `CryptoJS` wordArrays into `crypto` hex buffers
function wordToByteArray(word, length) {
    var ba = [], xFF = 0xFF;
    if (length > 0)
        ba.push(word >>> 24);
    if (length > 1)
        ba.push((word >>> 16) & xFF);
    if (length > 2)
        ba.push((word >>> 8) & xFF);
    if (length > 3)
        ba.push(word & xFF);
    return ba;
}
function wordArrayToBuffer(wordArray) {
    let length = undefined;
    if (wordArray.hasOwnProperty("sigBytes") && wordArray.hasOwnProperty("words")) {
        length = wordArray.sigBytes;
        wordArray = wordArray.words;
    }
    else {
        throw Error('Argument not a wordArray');
    }
    const result = [];
    let bytes = [];
    let i = 0;
    while (length > 0) {
        bytes = wordToByteArray(wordArray[i], Math.min(4, length));
        length -= bytes.length;
        result.push(bytes);
        i++;
    }
    return [].concat.apply([], result);
}
utils.wordArrayToBuffer = wordArrayToBuffer;
// https://github.com/indutny/minimalistic-crypto-utils/blob/master/lib/utils.js
// moved here to remove the dep
function toArray(msg, enc) {
    if (Array.isArray(msg))
        return msg.slice();
    if (!msg)
        return [];
    var res = [];
    if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
            msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
    else {
        for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 0xff;
            if (hi)
                res.push(hi, lo);
            else
                res.push(lo);
        }
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1)
        return '0' + word;
    else
        return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
        return toHex(arr);
    else
        return arr;
};

});

const commonjsRegister$k = commonjsRegister$C;
commonjsRegister$k("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/hmac-drbg/hmac-drbg.cjs", function (module, exports) {
var CryptoJS = commonjsRequire("../../../crypto-js/crypto-js.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/hmac-drbg");
var assert = commonjsRequire("../elliptic/utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/hmac-drbg").assert;
var utils = commonjsRequire("../elliptic/utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/hmac-drbg");
// some static stuff
const ONE = CryptoJS.enc.Utf8.parse('\x01');
const ZERO = CryptoJS.enc.Utf8.parse('\x00');
function byteArrayToWordArray(ba) {
    const wa = [];
    for (let i = 0; i < ba.length; i++) {
        wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);
    }
    return CryptoJS.lib.WordArray.create(wa, ba.length);
}
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.slice(3, 6); // only support SHAXXX hashes
    this.minEntropy = options.minEntropy || 192;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    this.byteArrayToWordArray = byteArrayToWordArray;
    var entropy = options.entropy;
    var nonce = options.nonce;
    var pers = [];
    assert(entropy.length >= (this.minEntropy / 8), 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = async function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new CryptoJS.lib.WordArray.init();
    this.V = new CryptoJS.lib.WordArray.init();
    const magicNumber = (1 << 24) + (1 << 16) + (1 << 8) + 1;
    this.V.words = Array(this.outLen / 32).fill(magicNumber);
    this.V.sigBytes = 32;
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new CryptoJS.lib.WordArray.init();
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac();
    kmac.concat(this.V);
    kmac.concat(ZERO);
    if (seed)
        kmac.concat(this.byteArrayToWordArray(seed));
    this.K = CryptoJS['Hmac' + this.hash](kmac, this.K);
    this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);
    if (!seed)
        return;
    kmac = this._hmac();
    kmac.concat(this.V);
    kmac.concat(ONE);
    kmac.concat(this.byteArrayToWordArray(seed));
    this.K = CryptoJS['Hmac' + this.hash](kmac, this.K);
    this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        add = entropyEnc;
        entropyEnc = null;
    }
    //entropy = utils.toArray(entropy, entropyEnc);
    //add = utils.toArray(add, addEnc);
    assert(entropy.length >= (this.minEntropy / 8), 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = CryptoJS.enc.Utf8.parse(add);
        this._update(add);
    }
    var res = new CryptoJS.lib.WordArray.init();
    while (res.sigBytes < len) {
        this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);
        res.concat(this.V);
    }
    this._update(add);
    this._reseed++;
    return utils.wordArrayToBuffer(res);
};

});

const commonjsRegister$j = commonjsRegister$C;
commonjsRegister$j("/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber/errors.cjs", function (module, exports) {
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
module.exports = {
    newInvalidAsn1Error: function (msg) {
        var e = new Error();
        e.name = 'InvalidAsn1Error';
        e.message = msg || '';
        return e;
    }
};

});

const commonjsRegister$i = commonjsRegister$C;
commonjsRegister$i("/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber/index.cjs", function (module, exports) {
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
var errors = commonjsRequire("./errors.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber");
var types = commonjsRequire("./types.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber");
var Reader = commonjsRequire("./reader.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber");
// --- Exports
module.exports = {
    Reader: Reader,
};
for (var t in types) {
    if (types.hasOwnProperty(t))
        module.exports[t] = types[t];
}
for (var e in errors) {
    if (errors.hasOwnProperty(e))
        module.exports[e] = errors[e];
}

});

const commonjsRegister$h = commonjsRegister$C;
commonjsRegister$h("/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber/reader.cjs", function (module, exports) {
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
var assert = require$$1__default["default"];
// var Buffer = require('safer-buffer').Buffer;
var ASN1 = commonjsRequire("./types.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber");
var errors = commonjsRequire("./errors.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber");
// --- Globals
var newInvalidAsn1Error = errors.newInvalidAsn1Error;
// --- API
function Reader(data) {
    if (!data || !Buffer.isBuffer(data))
        throw new TypeError('data must be a node Buffer');
    this._buf = data;
    this._size = data.length;
    // These hold the "current" state
    this._len = 0;
    this._offset = 0;
}
Object.defineProperty(Reader.prototype, 'length', {
    enumerable: true,
    get: function () { return (this._len); }
});
Object.defineProperty(Reader.prototype, 'offset', {
    enumerable: true,
    get: function () { return (this._offset); }
});
Object.defineProperty(Reader.prototype, 'remain', {
    get: function () { return (this._size - this._offset); }
});
Object.defineProperty(Reader.prototype, 'buffer', {
    get: function () { return (this._buf.slice(this._offset)); }
});
/**
 * Reads a single byte and advances offset; you can pass in `true` to make this
 * a "peek" operation (i.e., get the byte, but don't advance the offset).
 *
 * @param {Boolean} peek true means don't move offset.
 * @return {Number} the next byte, null if not enough data.
 */
Reader.prototype.readByte = function (peek) {
    if (this._size - this._offset < 1)
        return null;
    var b = this._buf[this._offset] & 0xff;
    if (!peek)
        this._offset += 1;
    return b;
};
Reader.prototype.peek = function () {
    return this.readByte(true);
};
/**
 * Reads a (potentially) variable length off the BER buffer.  This call is
 * not really meant to be called directly, as callers have to manipulate
 * the internal buffer afterwards.
 *
 * As a result of this call, you can call `Reader.length`, until the
 * next thing called that does a readLength.
 *
 * @return {Number} the amount of offset to advance the buffer.
 * @throws {InvalidAsn1Error} on bad ASN.1
 */
Reader.prototype.readLength = function (offset) {
    if (offset === undefined)
        offset = this._offset;
    if (offset >= this._size)
        return null;
    var lenB = this._buf[offset++] & 0xff;
    if (lenB === null)
        return null;
    if ((lenB & 0x80) === 0x80) {
        lenB &= 0x7f;
        if (lenB === 0)
            throw newInvalidAsn1Error('Indefinite length not supported');
        if (lenB > 4)
            throw newInvalidAsn1Error('encoding too long');
        if (this._size - offset < lenB)
            return null;
        this._len = 0;
        for (var i = 0; i < lenB; i++)
            this._len = (this._len << 8) + (this._buf[offset++] & 0xff);
    }
    else {
        // Wasn't a variable length
        this._len = lenB;
    }
    return offset;
};
/**
 * Parses the next sequence in this BER buffer.
 *
 * To get the length of the sequence, call `Reader.length`.
 *
 * @return {Number} the sequence's tag.
 */
Reader.prototype.readSequence = function (tag) {
    var seq = this.peek();
    if (seq === null)
        return null;
    if (tag !== undefined && tag !== seq)
        throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
            ': got 0x' + seq.toString(16));
    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
        return null;
    this._offset = o;
    return seq;
};
Reader.prototype.readInt = function () {
    return this._readTag(ASN1.Integer);
};
Reader.prototype.readBoolean = function () {
    return (this._readTag(ASN1.Boolean) === 0 ? false : true);
};
Reader.prototype.readEnumeration = function () {
    return this._readTag(ASN1.Enumeration);
};
Reader.prototype.readString = function (tag, retbuf) {
    if (!tag)
        tag = ASN1.OctetString;
    var b = this.peek();
    if (b === null)
        return null;
    if (b !== tag)
        throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
            ': got 0x' + b.toString(16));
    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
        return null;
    if (this.length > this._size - o)
        return null;
    this._offset = o;
    if (this.length === 0)
        return retbuf ? Buffer.alloc(0) : '';
    var str = this._buf.slice(this._offset, this._offset + this.length);
    this._offset += this.length;
    return retbuf ? str : str.toString('utf8');
};
Reader.prototype.readOID = function (tag) {
    if (!tag)
        tag = ASN1.OID;
    var b = this.readString(tag, true);
    if (b === null)
        return null;
    var values = [];
    var value = 0;
    for (var i = 0; i < b.length; i++) {
        var byte = b[i] & 0xff;
        value <<= 7;
        value += byte & 0x7f;
        if ((byte & 0x80) === 0) {
            values.push(value);
            value = 0;
        }
    }
    value = values.shift();
    values.unshift(value % 40);
    values.unshift((value / 40) >> 0);
    return values.join('.');
};
Reader.prototype._readTag = function (tag) {
    assert.ok(tag !== undefined);
    var b = this.peek();
    if (b === null)
        return null;
    if (b !== tag)
        throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
            ': got 0x' + b.toString(16));
    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
        return null;
    if (this.length > 4)
        throw newInvalidAsn1Error('Integer too long: ' + this.length);
    if (this.length > this._size - o)
        return null;
    this._offset = o;
    var fb = this._buf[this._offset];
    var value = 0;
    for (var i = 0; i < this.length; i++) {
        value <<= 8;
        value |= (this._buf[this._offset++] & 0xff);
    }
    if ((fb & 0x80) === 0x80 && i !== 4)
        value -= (1 << (i * 8));
    return value >> 0;
};
// --- Exported API
module.exports = Reader;

});

const commonjsRegister$g = commonjsRegister$C;
commonjsRegister$g("/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/ber/types.cjs", function (module, exports) {
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
module.exports = {
    EOC: 0,
    Boolean: 1,
    Integer: 2,
    BitString: 3,
    OctetString: 4,
    Null: 5,
    OID: 6,
    ObjectDescriptor: 7,
    External: 8,
    Real: 9,
    Enumeration: 10,
    PDV: 11,
    Utf8String: 12,
    RelativeOID: 13,
    Sequence: 16,
    Set: 17,
    NumericString: 18,
    PrintableString: 19,
    T61String: 20,
    VideotexString: 21,
    IA5String: 22,
    UTCTime: 23,
    GeneralizedTime: 24,
    GraphicString: 25,
    VisibleString: 26,
    GeneralString: 28,
    UniversalString: 29,
    CharacterString: 30,
    BMPString: 31,
    Constructor: 32,
    Context: 128
};

});

const commonjsRegister$f = commonjsRegister$C;
commonjsRegister$f("/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1/index.cjs", function (module, exports) {
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
// If you have no idea what ASN.1 or BER is, see this:
// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc
var Ber = commonjsRequire("./ber/index.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/asn1");
// --- Exported API
module.exports = {
    Ber: Ber,
    BerReader: Ber.Reader,
};

});

const commonjsRegister$e = commonjsRegister$C;
commonjsRegister$e("/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats/components.cjs", function (module, exports) {
commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats")._;
commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats");
module.exports = {
    privateExport: function (key, options) {
        return {
            n: key.n.toBuffer(),
            e: key.e,
            d: key.d.toBuffer(),
            p: key.p.toBuffer(),
            q: key.q.toBuffer(),
            dmp1: key.dmp1.toBuffer(),
            dmq1: key.dmq1.toBuffer(),
            coeff: key.coeff.toBuffer()
        };
    },
    privateImport: function (key, data, options) {
        if (data.n && data.e && data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
            key.setPrivate(data.n, data.e, data.d, data.p, data.q, data.dmp1, data.dmq1, data.coeff);
        }
        else {
            throw Error("Invalid key data");
        }
    },
    publicExport: function (key, options) {
        return {
            n: key.n.toBuffer(),
            e: key.e
        };
    },
    publicImport: function (key, data, options) {
        if (data.n && data.e) {
            key.setPublic(data.n, data.e);
        }
        else {
            throw Error("Invalid key data");
        }
    },
    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        if (data.n && data.e) {
            if (data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
                module.exports.privateImport(key, data);
                return true;
            }
            else {
                module.exports.publicImport(key, data);
                return true;
            }
        }
        return false;
    }
};

});

const commonjsRegister$d = commonjsRegister$C;
commonjsRegister$d("/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats/formats.cjs", function (module, exports) {
commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats")._;
module.exports = {
    pkcs1: commonjsRequire("./pkcs1.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats"),
    pkcs8: commonjsRequire("./pkcs8.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats"),
    components: commonjsRequire("./components.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats"),
    detectAndImport: function (key, data, format) {
        if (format === undefined) {
            for (var scheme in module.exports) {
                if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {
                    return true;
                }
            }
        }
        else if (format) {
            var fmt = formatParse(format);
            if (module.exports[fmt.scheme]) {
                if (fmt.keyType === 'private') {
                    module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);
                }
                else {
                    module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);
                }
            }
            else {
                throw Error('Unsupported key format');
            }
        }
        return false;
    },
};

});

const commonjsRegister$c = commonjsRegister$C;
commonjsRegister$c("/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats/pkcs1.cjs", function (module, exports) {
var ber = commonjsRequire("../asn1/index.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats").Ber;
var _ = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats")._;
var utils = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats");
const PRIVATE_OPENING_BOUNDARY = '-----BEGIN RSA PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END RSA PRIVATE KEY-----';
const PUBLIC_OPENING_BOUNDARY = '-----BEGIN RSA PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END RSA PUBLIC KEY-----';
module.exports = {
    privateExport: function (key, options) {
        options = options || {};
        var n = key.n.toBuffer();
        var d = key.d.toBuffer();
        var p = key.p.toBuffer();
        var q = key.q.toBuffer();
        var dmp1 = key.dmp1.toBuffer();
        var dmq1 = key.dmq1.toBuffer();
        var coeff = key.coeff.toBuffer();
        var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
        var writer = new ber.Writer({ size: length });
        writer.startSequence();
        writer.writeInt(0);
        writer.writeBuffer(n, 2);
        writer.writeInt(key.e);
        writer.writeBuffer(d, 2);
        writer.writeBuffer(p, 2);
        writer.writeBuffer(q, 2);
        writer.writeBuffer(dmp1, 2);
        writer.writeBuffer(dmq1, 2);
        writer.writeBuffer(coeff, 2);
        writer.endSequence();
        if (options.type === 'der') {
            return writer.buffer;
        }
        else {
            return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
        }
    },
    privateImport: function (key, data, options) {
        options = options || {};
        var buffer;
        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }
            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
            else {
                throw Error('Unsupported key format');
            }
        }
        else if (Buffer.isBuffer(data)) {
            buffer = data;
        }
        else {
            throw Error('Unsupported key format');
        }
        var reader = new ber.Reader(buffer);
        reader.readSequence();
        reader.readString(2, true); // just zero
        key.setPrivate(reader.readString(2, true), // modulus
        reader.readString(2, true), // publicExponent
        reader.readString(2, true), // privateExponent
        reader.readString(2, true), // prime1
        reader.readString(2, true), // prime2
        reader.readString(2, true), // exponent1 -- d mod (p1)
        reader.readString(2, true), // exponent2 -- d mod (q-1)
        reader.readString(2, true) // coefficient -- (inverse of q) mod p
        );
    },
    publicExport: function (key, options) {
        options = options || {};
        var n = key.n.toBuffer();
        var length = n.length + 512; // magic
        var bodyWriter = new ber.Writer({ size: length });
        bodyWriter.startSequence();
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.endSequence();
        if (options.type === 'der') {
            return bodyWriter.buffer;
        }
        else {
            return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(bodyWriter.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
        }
    },
    publicImport: function (key, data, options) {
        options = options || {};
        var buffer;
        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }
            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
        }
        else if (Buffer.isBuffer(data)) {
            buffer = data;
        }
        else {
            throw Error('Unsupported key format');
        }
        var body = new ber.Reader(buffer);
        body.readSequence();
        key.setPublic(body.readString(0x02, true), // modulus
        body.readString(0x02, true) // publicExponent
        );
    },
    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        // [\S\s]* matches zero or more of any character
        if (/^[\S\s]*-----BEGIN RSA PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PRIVATE KEY-----[\S\s]*$/g.test(data)) {
            module.exports.privateImport(key, data);
            return true;
        }
        if (/^[\S\s]*-----BEGIN RSA PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PUBLIC KEY-----[\S\s]*$/g.test(data)) {
            module.exports.publicImport(key, data);
            return true;
        }
        return false;
    }
};

});

const commonjsRegister$b = commonjsRegister$C;
commonjsRegister$b("/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats/pkcs8.cjs", function (module, exports) {
var ber = commonjsRequire("../asn1/index.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats").Ber;
var _ = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats")._;
var PUBLIC_RSA_OID = '1.2.840.113549.1.1.1';
var utils = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/formats");
const PRIVATE_OPENING_BOUNDARY = '-----BEGIN PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END PRIVATE KEY-----';
const PUBLIC_OPENING_BOUNDARY = '-----BEGIN PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END PUBLIC KEY-----';
module.exports = {
    privateExport: function (key, options) {
        options = options || {};
        var n = key.n.toBuffer();
        var d = key.d.toBuffer();
        var p = key.p.toBuffer();
        var q = key.q.toBuffer();
        var dmp1 = key.dmp1.toBuffer();
        var dmq1 = key.dmq1.toBuffer();
        var coeff = key.coeff.toBuffer();
        var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
        var bodyWriter = new ber.Writer({ size: length });
        bodyWriter.startSequence();
        bodyWriter.writeInt(0);
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.writeBuffer(d, 2);
        bodyWriter.writeBuffer(p, 2);
        bodyWriter.writeBuffer(q, 2);
        bodyWriter.writeBuffer(dmp1, 2);
        bodyWriter.writeBuffer(dmq1, 2);
        bodyWriter.writeBuffer(coeff, 2);
        bodyWriter.endSequence();
        var writer = new ber.Writer({ size: length });
        writer.startSequence();
        writer.writeInt(0);
        writer.startSequence();
        writer.writeOID(PUBLIC_RSA_OID);
        writer.writeNull();
        writer.endSequence();
        writer.writeBuffer(bodyWriter.buffer, 4);
        writer.endSequence();
        if (options.type === 'der') {
            return writer.buffer;
        }
        else {
            return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
        }
    },
    privateImport: function (key, data, options) {
        options = options || {};
        var buffer;
        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }
            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY)
                    .replace('-----END PRIVATE KEY-----', '')
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
            else {
                throw Error('Unsupported key format');
            }
        }
        else if (Buffer.isBuffer(data)) {
            buffer = data;
        }
        else {
            throw Error('Unsupported key format');
        }
        var reader = new ber.Reader(buffer);
        reader.readSequence();
        reader.readInt(0);
        var header = new ber.Reader(reader.readString(0x30, true));
        if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
            throw Error('Invalid Public key format');
        }
        var body = new ber.Reader(reader.readString(0x04, true));
        body.readSequence();
        body.readString(2, true); // just zero
        key.setPrivate(body.readString(2, true), // modulus
        body.readString(2, true), // publicExponent
        body.readString(2, true), // privateExponent
        body.readString(2, true), // prime1
        body.readString(2, true), // prime2
        body.readString(2, true), // exponent1 -- d mod (p1)
        body.readString(2, true), // exponent2 -- d mod (q-1)
        body.readString(2, true) // coefficient -- (inverse of q) mod p
        );
    },
    publicExport: function (key, options) {
        options = options || {};
        var n = key.n.toBuffer();
        var length = n.length + 512; // magic
        var bodyWriter = new ber.Writer({ size: length });
        bodyWriter.writeByte(0);
        bodyWriter.startSequence();
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.endSequence();
        var writer = new ber.Writer({ size: length });
        writer.startSequence();
        writer.startSequence();
        writer.writeOID(PUBLIC_RSA_OID);
        writer.writeNull();
        writer.endSequence();
        writer.writeBuffer(bodyWriter.buffer, 3);
        writer.endSequence();
        if (options.type === 'der') {
            return writer.buffer;
        }
        else {
            return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
        }
    },
    publicImport: function (key, data, options) {
        options = options || {};
        var buffer;
        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }
            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
        }
        else if (Buffer.isBuffer(data)) {
            buffer = data;
        }
        else {
            throw Error('Unsupported key format');
        }
        var reader = new ber.Reader(buffer);
        reader.readSequence();
        var header = new ber.Reader(reader.readString(0x30, true));
        if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
            throw Error('Invalid Public key format');
        }
        var body = new ber.Reader(reader.readString(0x03, true));
        body.readByte();
        body.readSequence();
        key.setPublic(body.readString(0x02, true), // modulus
        body.readString(0x02, true) // publicExponent
        );
    },
    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        if (/^[\S\s]*-----BEGIN PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PRIVATE KEY-----[\S\s]*$/g.test(data)) {
            module.exports.privateImport(key, data);
            return true;
        }
        if (/^[\S\s]*-----BEGIN PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PUBLIC KEY-----[\S\s]*$/g.test(data)) {
            module.exports.publicImport(key, data);
            return true;
        }
        return false;
    }
};

});

const commonjsRegister$a = commonjsRegister$C;
commonjsRegister$a("/$$rollup_base$$/js/src/static_dependencies/node-rsa/libs/jsbn.cjs", function (module, exports) {
/*
 * Basic JavaScript BN library - subset useful for RSA encryption.
 *
 * Copyright (c) 2003-2005  Tom Wu
 * ~BSD license~
 *
 * Added Node.js Buffers support
 * 2014 rzcoder
 *
 * Deleted some stuff to save bytes
 * frosty00
 */
var _ = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/libs")._;
// Bits per digit
var dbits;
// (public) Constructor
function BigInteger(a, b) {
    if (a != null) {
        if ("number" == typeof a) {
            this.fromNumber(a, b);
        }
        else if (Buffer.isBuffer(a)) {
            this.fromBuffer(a);
        }
        else if (b == null && "string" != typeof a) {
            this.fromByteArray(a);
        }
        else {
            this.fromString(a, b);
        }
    }
}
// return new, unset BigInteger
function nbi() {
    return new BigInteger(null);
}
// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff, xh = x >> 14;
    while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
    }
    return c;
}
// We need to select the fastest one that works in this environment.
//if (j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
//	BigInteger.prototype.am = am2;
//	dbits = 30;
//} else if (j_lm && (navigator.appName != "Netscape")) {
//	BigInteger.prototype.am = am1;
//	dbits = 26;
//} else { // Mozilla/Netscape seems to prefer am3
//	BigInteger.prototype.am = am3;
//	dbits = 28;
//}
// For node.js, we pick am3 with max dbits to 28.
BigInteger.prototype.am = am3;
dbits = 28;
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1 << dbits) - 1);
BigInteger.prototype.DV = (1 << dbits);
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv)
    BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
    BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
    BI_RC[rr++] = vv;
function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c == null) ? -1 : c;
}
// (protected) copy this to r
function bnpCopyTo(r) {
    for (var i = this.t - 1; i >= 0; --i)
        r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
}
// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = (x < 0) ? -1 : 0;
    if (x > 0)
        this[0] = x;
    else if (x < -1)
        this[0] = x + DV;
    else
        this.t = 0;
}
// return bigint initialized to value
function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
}
// (protected) set from string and radix
function bnpFromString(data, radix, unsigned) {
    var k;
    switch (radix) {
        case 2:
            k = 1;
            break;
        case 4:
            k = 2;
            break;
        case 8:
            k = 3;
            break;
        case 16:
            k = 4;
            break;
        case 32:
            k = 5;
            break;
        case 256:
            k = 8;
            break;
        default:
            this.fromRadix(data, radix);
            return;
    }
    this.t = 0;
    this.s = 0;
    var i = data.length;
    var mi = false;
    var sh = 0;
    while (--i >= 0) {
        var x = (k == 8) ? data[i] & 0xff : intAt(data, i);
        if (x < 0) {
            if (data.charAt(i) == "-")
                mi = true;
            continue;
        }
        mi = false;
        if (sh === 0)
            this[this.t++] = x;
        else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
            this[this.t++] = (x >> (this.DB - sh));
        }
        else
            this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB)
            sh -= this.DB;
    }
    if ((!unsigned) && k == 8 && (data[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0)
            this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
    }
    this.clamp();
    if (mi)
        BigInteger.ZERO.subTo(this, this);
}
function bnpFromByteArray(a, unsigned) {
    this.fromString(a, 256, unsigned);
}
function bnpFromBuffer(a) {
    this.fromString(a, 256, true);
}
// (protected) clamp off excess high words
function bnpClamp() {
    var c = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == c)
        --this.t;
}
// (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0)
        return "-" + this.negate().toString(b);
    var k;
    if (b == 16)
        k = 4;
    else if (b == 8)
        k = 3;
    else if (b == 2)
        k = 1;
    else if (b == 32)
        k = 5;
    else if (b == 4)
        k = 2;
    else
        return this.toRadix(b);
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - (i * this.DB) % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while (i >= 0) {
            if (p < k) {
                d = (this[i] & ((1 << p) - 1)) << (k - p);
                d |= this[--i] >> (p += this.DB - k);
            }
            else {
                d = (this[i] >> (p -= k)) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0)
                m = true;
            if (m)
                r += int2char(d);
        }
    }
    return m ? r : "0";
}
// (public) -this
function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
}
// (public) |this|
function bnAbs() {
    return (this.s < 0) ? this.negate() : this;
}
// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0)
        return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0)
        return (this.s < 0) ? -r : r;
    while (--i >= 0)
        if ((r = this[i] - a[i]) != 0)
            return r;
    return 0;
}
// returns bit length of the integer x
function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
    }
    return r;
}
// (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0)
        return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
}
// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    var i;
    for (i = this.t - 1; i >= 0; --i)
        r[i + n] = this[i];
    for (i = n - 1; i >= 0; --i)
        r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
}
// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for (var i = n; i < this.t; ++i)
        r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
}
// (protected) r = this << n
function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;
    for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = (this[i] >> cbs) | c;
        c = (this[i] & bm) << bs;
    }
    for (i = ds - 1; i >= 0; --i)
        r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
}
// (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
    }
    if (bs > 0)
        r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
}
// (protected) r = this - a
function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1)
        r[i++] = this.DV + c;
    else if (c > 0)
        r[i++] = c;
    r.t = i;
    r.clamp();
}
// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0)
        r[i] = 0;
    for (i = 0; i < y.t; ++i)
        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s)
        BigInteger.ZERO.subTo(r, r);
}
// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while (--i >= 0)
        r[i] = 0;
    for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r[i + x.t] -= x.DV;
            r[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0)
        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
}
// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0)
        return;
    var pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null)
            q.fromInt(0);
        if (r != null)
            this.copyTo(r);
        return;
    }
    if (r == null)
        r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    }
    else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 === 0)
        return;
    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y); // "negative" y so we can replace sub with am later
    while (y.t < ys)
        y[y.t++] = 0;
    while (--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while (r[i] < --qd)
                r.subTo(t, r);
        }
    }
    if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms)
            BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0)
        r.rShiftTo(nsh, r); // Denormalize remainder
    if (ts < 0)
        BigInteger.ZERO.subTo(r, r);
}
// (public) this mod a
function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        a.subTo(r, r);
    return r;
}
// Modular reduction using "classic" algorithm
function Classic(m) {
    this.m = m;
}
function cConvert(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0)
        return x.mod(this.m);
    else
        return x;
}
function cRevert(x) {
    return x;
}
function cReduce(x) {
    x.divRemTo(this.m, null, x);
}
function cMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
function cSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;
// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1)
        return 0;
    var x = this[0];
    if ((x & 1) === 0)
        return 0;
    var y = x & 3; // y == 1/x mod 2^2
    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y > 0) ? this.DV - y : -y;
}
// Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << (m.DB - 15)) - 1;
    this.mt2 = 2 * m.t;
}
// xR mod m
function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        this.m.subTo(r, r);
    return r;
}
// x/R mod m
function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
}
// x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while (x.t <= this.mt2) // pad x so am has enough room later
        x[x.t++] = 0;
    for (var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while (x[j] >= x.DV) {
            x[j] -= x.DV;
            x[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
}
// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
// (protected) true iff this is even
function bnpIsEven() {
    return ((this.t > 0) ? (this[0] & 1) : this.s) === 0;
}
// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
    if (e > 0xffffffff || e < 1)
        return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
    g.copyTo(r);
    while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & (1 << i)) > 0)
            z.mulTo(r2, g, r);
        else {
            var t = r;
            r = r2;
            r2 = t;
        }
    }
    return z.revert(r);
}
// Copyright (c) 2005-2009  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.
// Extended JavaScript BN functions, required for RSA private ops.
// Version 1.1: new BigInteger("0", 10) returns "proper" zero
// Version 1.2: square() API, isProbablePrime fix
//(public)
function bnClone() {
    var r = nbi();
    this.copyTo(r);
    return r;
}
//(public) return value as integer
function bnIntValue() {
    if (this.s < 0) {
        if (this.t == 1)
            return this[0] - this.DV;
        else if (this.t === 0)
            return -1;
    }
    else if (this.t == 1)
        return this[0];
    else if (this.t === 0)
        return 0;
    // assumes 16 < DB < 32
    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
}
//(protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
}
//(public) 0 if this === 0, 1 if this > 0
function bnSigNum() {
    if (this.s < 0)
        return -1;
    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0))
        return 0;
    else
        return 1;
}
//(protected) convert to radix string
function bnpToRadix(b) {
    if (b == null)
        b = 10;
    if (this.signum() === 0 || b < 2 || b > 36)
        return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d, y, z);
    while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
    }
    return z.intValue().toString(b) + r;
}
//(protected) convert from radix string
function bnpFromRadix(s, b) {
    this.fromInt(0);
    if (b == null)
        b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
    for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-" && this.signum() === 0)
                mi = true;
            continue;
        }
        w = b * w + x;
        if (++j >= cs) {
            this.dMultiply(d);
            this.dAddOffset(w, 0);
            j = 0;
            w = 0;
        }
    }
    if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
    }
    if (mi)
        BigInteger.ZERO.subTo(this, this);
}
//(public) convert to bigendian byte array
function bnToByteArray() {
    var i = this.t, r = new Array();
    r[0] = this.s;
    var p = this.DB - (i * this.DB) % 8, d, k = 0;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
            r[k++] = d | (this.s << (this.DB - p));
        while (i >= 0) {
            if (p < 8) {
                d = (this[i] & ((1 << p) - 1)) << (8 - p);
                d |= this[--i] >> (p += this.DB - 8);
            }
            else {
                d = (this[i] >> (p -= 8)) & 0xff;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if ((d & 0x80) != 0)
                d |= -256;
            if (k === 0 && (this.s & 0x80) != (d & 0x80))
                ++k;
            if (k > 0 || d != this.s)
                r[k++] = d;
        }
    }
    return r;
}
/**
 * return Buffer object
 * @param trim {boolean} slice buffer if first element == 0
 * @returns {Buffer}
 */
function bnToBuffer(trimOrSize) {
    var res = Buffer.from(this.toByteArray());
    if (trimOrSize === true && res[0] === 0) {
        res = res.slice(1);
    }
    else if (_.isNumber(trimOrSize)) {
        if (res.length > trimOrSize) {
            for (var i = 0; i < res.length - trimOrSize; i++) {
                if (res[i] !== 0) {
                    return null;
                }
            }
            return res.slice(res.length - trimOrSize);
        }
        else if (res.length < trimOrSize) {
            var padded = Buffer.alloc(trimOrSize);
            padded.fill(0, 0, trimOrSize - res.length);
            res.copy(padded, trimOrSize - res.length);
            return padded;
        }
    }
    return res;
}
function bnEquals(a) {
    return (this.compareTo(a) == 0);
}
function bnMin(a) {
    return (this.compareTo(a) < 0) ? this : a;
}
function bnMax(a) {
    return (this.compareTo(a) > 0) ? this : a;
}
//(protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
    var i, f, m = Math.min(a.t, this.t);
    for (i = 0; i < m; ++i)
        r[i] = op(this[i], a[i]);
    if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i)
            r[i] = op(this[i], f);
        r.t = this.t;
    }
    else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i)
            r[i] = op(f, a[i]);
        r.t = a.t;
    }
    r.s = op(this.s, a.s);
    r.clamp();
}
//(public) this & a
function op_and(x, y) {
    return x & y;
}
function bnAnd(a) {
    var r = nbi();
    this.bitwiseTo(a, op_and, r);
    return r;
}
//(public) this | a
function op_or(x, y) {
    return x | y;
}
function bnOr(a) {
    var r = nbi();
    this.bitwiseTo(a, op_or, r);
    return r;
}
//(public) this ^ a
function op_xor(x, y) {
    return x ^ y;
}
function bnXor(a) {
    var r = nbi();
    this.bitwiseTo(a, op_xor, r);
    return r;
}
//(public) ~this
function bnNot() {
    var r = nbi();
    for (var i = 0; i < this.t; ++i)
        r[i] = this.DM & ~this[i];
    r.t = this.t;
    r.s = ~this.s;
    return r;
}
//return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
    if (x === 0)
        return -1;
    var r = 0;
    if ((x & 0xffff) === 0) {
        x >>= 16;
        r += 16;
    }
    if ((x & 0xff) === 0) {
        x >>= 8;
        r += 8;
    }
    if ((x & 0xf) === 0) {
        x >>= 4;
        r += 4;
    }
    if ((x & 3) === 0) {
        x >>= 2;
        r += 2;
    }
    if ((x & 1) === 0)
        ++r;
    return r;
}
//(public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
    for (var i = 0; i < this.t; ++i)
        if (this[i] != 0)
            return i * this.DB + lbit(this[i]);
    if (this.s < 0)
        return this.t * this.DB;
    return -1;
}
//(protected) r = this + a
function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c += a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c > 0)
        r[i++] = c;
    else if (c < -1)
        r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
}
//(public) this + a
function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
}
//(public) this - a
function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
}
//(public) this * a
function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
}
// (public) this^2
function bnSquare() {
    var r = nbi();
    this.squareTo(r);
    return r;
}
//(public) this / a
function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
}
//(public) this % a
function bnRemainder(a) {
    var r = nbi();
    this.divRemTo(a, null, r);
    return r;
}
//(protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
}
//(protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
    if (n === 0)
        return;
    while (this.t <= w)
        this[this.t++] = 0;
    this[w] += n;
    while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t)
            this[this.t++] = 0;
        ++this[w];
    }
}
//A "null" reducer
function NullExp() {
}
function nNop(x) {
    return x;
}
function nMulTo(x, y, r) {
    x.multiplyTo(y, r);
}
function nSqrTo(x, r) {
    x.squareTo(r);
}
NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;
//(public) this^e
function bnPow(e) {
    return this.exp(e, new NullExp());
}
//(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    r.s = 0; // assumes a,this >= 0
    r.t = i;
    while (i > 0)
        r[--i] = 0;
    var j;
    for (j = r.t - this.t; i < j; ++i)
        r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
    for (j = Math.min(a.t, n); i < j; ++i)
        this.am(0, a[i], r, i, 0, n - i);
    r.clamp();
}
//(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
    --n;
    var i = r.t = this.t + a.t - n;
    r.s = 0; // assumes a,this >= 0
    while (--i >= 0)
        r[i] = 0;
    for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
    r.clamp();
    r.drShiftTo(1, r);
}
//Barrett modular reduction
function Barrett(m) {
    // setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
}
function barrettConvert(x) {
    if (x.s < 0 || x.t > 2 * this.m.t)
        return x.mod(this.m);
    else if (x.compareTo(this.m) < 0)
        return x;
    else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }
}
function barrettRevert(x) {
    return x;
}
//x = x mod m (HAC 14.42)
function barrettReduce(x) {
    x.drShiftTo(this.m.t - 1, this.r2);
    if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
    }
    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
    while (x.compareTo(this.r2) < 0)
        x.dAddOffset(1, this.m.t + 1);
    x.subTo(this.r2, x);
    while (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
}
//r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
//r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;
//(public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
    var i = e.bitLength(), k, r = nbv(1), z;
    if (i <= 0)
        return r;
    else if (i < 18)
        k = 1;
    else if (i < 48)
        k = 3;
    else if (i < 144)
        k = 4;
    else if (i < 768)
        k = 5;
    else
        k = 6;
    if (i < 8)
        z = new Classic(m);
    else if (m.isEven())
        z = new Barrett(m);
    else
        z = new Montgomery(m);
    // precomputation
    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }
    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e[j]) - 1;
    while (j >= 0) {
        if (i >= k1)
            w = (e[j] >> (i - k1)) & km;
        else {
            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
            if (j > 0)
                w |= e[j - 1] >> (this.DB + i - k1);
        }
        n = k;
        while ((w & 1) === 0) {
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) { // ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
        }
        else {
            while (n > 1) {
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0)
                z.sqrTo(r, r2);
            else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }
        while (j >= 0 && (e[j] & (1 << i)) === 0) {
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    return z.revert(r);
}
//(public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
    var x = (this.s < 0) ? this.negate() : this.clone();
    var y = (a.s < 0) ? a.negate() : a.clone();
    if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
    }
    var i = x.getLowestSetBit(), g = y.getLowestSetBit();
    if (g < 0)
        return x;
    if (i < g)
        g = i;
    if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
    }
    while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0)
            x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0)
            y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
            x.subTo(y, x);
            x.rShiftTo(1, x);
        }
        else {
            y.subTo(x, y);
            y.rShiftTo(1, y);
        }
    }
    if (g > 0)
        y.lShiftTo(g, y);
    return y;
}
// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.fromByteArray = bnpFromByteArray;
BigInteger.prototype.fromBuffer = bnpFromBuffer;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;
BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.toBuffer = bnToBuffer;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.int2char = int2char;
// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);
// JSBN-specific extension
BigInteger.prototype.square = bnSquare;
//BigInteger interfaces not implemented in jsbn:
//BigInteger(int signum, byte[] magnitude)
//double doubleValue()
//float floatValue()
//int hashCode()
//long longValue()
//static BigInteger valueOf(long val)
module.exports = BigInteger;

});

const commonjsRegister$9 = commonjsRegister$C;
commonjsRegister$9("/$$rollup_base$$/js/src/static_dependencies/node-rsa/libs/rsa.cjs", function (module, exports) {
/*
 * RSA Encryption / Decryption with PKCS1 v2 Padding.
 *
 * ~MIT License~
 * Contributors:
 * Tom Wu, rzcoder, frosty00
*/
var _ = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/libs")._;
var BigInteger = commonjsRequire("./jsbn.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/libs");
var utils = commonjsRequire("../utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/libs");
var schemes = commonjsRequire("../schemes/schemes.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/libs");
//exports.BigInteger = BigInteger;
module.exports.Key = (function () {
    /**
     * RSA key constructor
     *
     * n - modulus
     * e - publicExponent
     * d - privateExponent
     * p - prime1
     * q - prime2
     * dmp1 - exponent1 -- d mod (p1)
     * dmq1 - exponent2 -- d mod (q-1)
     * coeff - coefficient -- (inverse of q) mod p
     */
    function RSAKey() {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null;
    }
    RSAKey.prototype.setOptions = function (options) {
        var signingSchemeProvider = schemes[options.signingScheme];
        var encryptionSchemeProvider = schemes[options.encryptionScheme];
        if (signingSchemeProvider === encryptionSchemeProvider) {
            this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
        }
        else {
            this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
            this.signingScheme = signingSchemeProvider.makeScheme(this, options);
        }
    };
    /**
     * Set the private key fields N, e, d and CRT params from buffers
     *
     * @param N
     * @param E
     * @param D
     * @param P
     * @param Q
     * @param DP
     * @param DQ
     * @param C
     */
    RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {
        if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {
            this.n = new BigInteger(N);
            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
            this.d = new BigInteger(D);
            if (P && Q && DP && DQ && C) {
                this.p = new BigInteger(P);
                this.q = new BigInteger(Q);
                this.dmp1 = new BigInteger(DP);
                this.dmq1 = new BigInteger(DQ);
                this.coeff = new BigInteger(C);
            }
            this.$$recalculateCache();
        }
        else {
            throw Error("Invalid RSA private key");
        }
    };
    /**
     * private
     * Perform raw private operation on "x": return x^d (mod n)
     *
     * @param x
     * @returns {*}
     */
    RSAKey.prototype.$doPrivate = function (x) {
        if (this.p || this.q) {
            return x.modPow(this.d, this.n);
        }
        // TODO: re-calculate any missing CRT params
        var xp = x.mod(this.p).modPow(this.dmp1, this.p);
        var xq = x.mod(this.q).modPow(this.dmq1, this.q);
        while (xp.compareTo(xq) < 0) {
            xp = xp.add(this.p);
        }
        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
    };
    RSAKey.prototype.sign = function (buffer) {
        return this.signingScheme.sign.apply(this.signingScheme, arguments);
    };
    /**
     * Check if key pair contains private key
     */
    RSAKey.prototype.isPrivate = function () {
        return this.n && this.e && this.d || false;
    };
    Object.defineProperty(RSAKey.prototype, 'keySize', {
        get: function () {
            return this.cache.keyBitLength;
        }
    });
    Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {
        get: function () {
            return this.cache.keyByteLength;
        }
    });
    Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {
        get: function () {
            return this.encryptionScheme.maxMessageLength();
        }
    });
    /**
     * Caching key data
     */
    RSAKey.prototype.$$recalculateCache = function () {
        this.cache = this.cache || {};
        // Bit & byte length
        this.cache.keyBitLength = this.n.bitLength();
        this.cache.keyByteLength = (this.cache.keyBitLength + 6) >> 3;
    };
    return RSAKey;
})();

});

const commonjsRegister$8 = commonjsRegister$C;
commonjsRegister$8("/$$rollup_base$$/js/src/static_dependencies/node-rsa/NodeRSA.cjs", function (module, exports) {
/*!
 * RSA library for Node.js
 *
 * Author: rzcoder
 * License MIT
 */
var rsa = commonjsRequire("./libs/rsa.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa");
var _ = commonjsRequire("./utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa")._;
var schemes = commonjsRequire("./schemes/schemes.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa");
var formats = commonjsRequire("./formats/formats.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa");
module.exports = (function () {
    var SUPPORTED_HASH_ALGORITHMS = {
        browser: ['md5', 'ripemd160', 'sha1', 'sha256', 'sha512']
    };
    var DEFAULT_ENCRYPTION_SCHEME = 'pkcs1';
    var DEFAULT_SIGNING_SCHEME = 'pkcs1';
    var EXPORT_FORMAT_ALIASES = {
        'private': 'pkcs1-private-pem',
        'private-der': 'pkcs1-private-der',
        'public': 'pkcs8-public-pem',
        'public-der': 'pkcs8-public-der',
    };
    /**
     * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}
     * @constructor
     */
    function NodeRSA(key, format, options = undefined) {
        if (!(this instanceof NodeRSA)) {
            return new NodeRSA(key, format, options);
        }
        if (_.isObject(format)) {
            options = format;
            format = undefined;
        }
        this.$options = {
            signingScheme: DEFAULT_SIGNING_SCHEME,
            signingSchemeOptions: {
                hash: 'sha256',
                saltLength: null
            },
            encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,
            encryptionSchemeOptions: {
                hash: 'sha1',
                label: null
            },
            environment: 'browser',
            rsaUtils: this
        };
        this.keyPair = new rsa.Key();
        this.$cache = {};
        if (Buffer.isBuffer(key) || _.isString(key)) {
            this.importKey(key, format);
        }
        else if (_.isObject(key)) {
            this.generateKeyPair(key.b, key.e);
        }
        this.setOptions(options);
    }
    /**
     * Set and validate options for key instance
     * @param options
     */
    NodeRSA.prototype.setOptions = function (options) {
        options = options || {};
        if (options.environment) {
            this.$options.environment = options.environment;
        }
        if (options.signingScheme) {
            if (_.isString(options.signingScheme)) {
                var signingScheme = options.signingScheme.toLowerCase().split('-');
                if (signingScheme.length == 1) {
                    if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {
                        this.$options.signingSchemeOptions = {
                            hash: signingScheme[0]
                        };
                        this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;
                    }
                    else {
                        this.$options.signingScheme = signingScheme[0];
                        this.$options.signingSchemeOptions = {
                            hash: null
                        };
                    }
                }
                else {
                    this.$options.signingSchemeOptions = {
                        hash: signingScheme[1]
                    };
                    this.$options.signingScheme = signingScheme[0];
                }
            }
            else if (_.isObject(options.signingScheme)) {
                this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;
                this.$options.signingSchemeOptions = _.omit(options.signingScheme, 'scheme');
            }
            if (!schemes.isSignature(this.$options.signingScheme)) {
                throw Error('Unsupported signing scheme');
            }
            if (this.$options.signingSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }
        if (options.encryptionScheme) {
            if (_.isString(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();
                this.$options.encryptionSchemeOptions = {};
            }
            else if (_.isObject(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;
                this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, 'scheme');
            }
            if (!schemes.isEncryption(this.$options.encryptionScheme)) {
                throw Error('Unsupported encryption scheme');
            }
            if (this.$options.encryptionSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }
        this.keyPair.setOptions(this.$options);
    };
    /**
     * Importing key
     * @param keyData {string|buffer|Object}
     * @param format {string}
     */
    NodeRSA.prototype.importKey = function (keyData, format) {
        if (!keyData) {
            throw Error("Empty key given");
        }
        if (format) {
            format = EXPORT_FORMAT_ALIASES[format] || format;
        }
        if (!formats.detectAndImport(this.keyPair, keyData, format) && format === undefined) {
            throw Error("Key format must be specified");
        }
        this.$cache = {};
        return this;
    };
    /**
     * Check if key pair contains private key
     */
    NodeRSA.prototype.isPrivate = function () {
        return this.keyPair.isPrivate();
    };
    /**
     * Check if key pair contains public key
     * @param [strict] {boolean} - public key only, return false if have private exponent
     */
    NodeRSA.prototype.isPublic = function (strict) {
        return this.keyPair.isPublic(strict);
    };
    /**
     * Check if key pair doesn't contains any data
     */
    NodeRSA.prototype.isEmpty = function (strict) {
        return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);
    };
    /**
     *  Signing data
     *
     * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {string|Buffer}
     */
    NodeRSA.prototype.sign = function (buffer, encoding, source_encoding) {
        if (!this.isPrivate()) {
            throw Error("This is not private key");
        }
        var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));
        if (encoding && encoding != 'buffer') {
            res = res.toString(encoding);
        }
        return res;
    };
    /**
     * Preparing given data for encrypting/signing. Just make new/return Buffer object.
     *
     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {Buffer}
     */
    NodeRSA.prototype.$getDataForEncrypt = function (buffer, encoding) {
        if (_.isString(buffer) || _.isNumber(buffer)) {
            return Buffer.from('' + buffer, encoding || 'utf8');
        }
        else if (Buffer.isBuffer(buffer)) {
            return buffer;
        }
        else if (_.isObject(buffer)) {
            return Buffer.from(JSON.stringify(buffer));
        }
        else {
            throw Error("Unexpected data type");
        }
    };
    return NodeRSA;
})();

});

const commonjsRegister$7 = commonjsRegister$C;
commonjsRegister$7("/$$rollup_base$$/js/src/static_dependencies/node-rsa/schemes/pkcs1.cjs", function (module, exports) {
/**
 * PKCS1 padding and signature scheme
 */
var BigInteger = commonjsRequire("../libs/jsbn.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/schemes");
var CryptoJS = commonjsRequire("../../crypto-js/crypto-js.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/schemes");
var constants = { RSA_NO_PADDING: 3 };
var Buffer = require$$1__default$1["default"].Buffer;
// require('constants');
var SIGN_INFO_HEAD = {
    md2: Buffer.from('3020300c06082a864886f70d020205000410', 'hex'),
    md5: Buffer.from('3020300c06082a864886f70d020505000410', 'hex'),
    sha1: Buffer.from('3021300906052b0e03021a05000414', 'hex'),
    sha224: Buffer.from('302d300d06096086480165030402040500041c', 'hex'),
    sha256: Buffer.from('3031300d060960864801650304020105000420', 'hex'),
    sha384: Buffer.from('3041300d060960864801650304020205000430', 'hex'),
    sha512: Buffer.from('3051300d060960864801650304020305000440', 'hex'),
    ripemd160: Buffer.from('3021300906052b2403020105000414', 'hex'),
    rmd160: Buffer.from('3021300906052b2403020105000414', 'hex')
};
var SIGN_ALG_TO_HASH_ALIASES = {
    'ripemd160': 'rmd160'
};
var DEFAULT_HASH_FUNCTION = 'sha256';
module.exports = {
    isEncryption: true,
    isSignature: true
};
module.exports.makeScheme = function (key, options) {
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }
    Scheme.prototype.maxMessageLength = function () {
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            return this.key.encryptedDataLength;
        }
        return this.key.encryptedDataLength - 11;
    };
    /**
     * Unpad input Buffer and, if valid, return the Buffer object
     * alg: PKCS#1 (type 2, random)
     * @param buffer
     * @returns {Buffer}
     */
    Scheme.prototype.encUnPad = function (buffer, options) {
        options = options || {};
        var i = 0;
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING treated like JAVA left pad with zero character
            var unPad;
            if (typeof buffer.lastIndexOf == "function") { //patch for old node version
                unPad = buffer.slice(buffer.lastIndexOf('\0') + 1, buffer.length);
            }
            else {
                unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, '\0') + 1, buffer.length);
            }
            return unPad;
        }
        if (buffer.length < 4) {
            return null;
        }
        /* Type 1: zeros padding for private key decrypt */
        if (options.type === 1) {
            if (buffer[0] !== 0 && buffer[1] !== 1) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (buffer[i] != 0xFF || ++i >= buffer.length) {
                    return null;
                }
            }
        }
        else {
            /* random padding for public key decrypt */
            if (buffer[0] !== 0 && buffer[1] !== 2) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (++i >= buffer.length) {
                    return null;
                }
            }
        }
        return buffer.slice(i + 1, buffer.length);
    };
    Scheme.prototype.sign = function (buffer) {
        var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        if (this.options.environment === 'browser') {
            hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;
            var hasher = CryptoJS[hashAlgorithm.toUpperCase()](buffer.toString());
            var asBuffer = wordArrayToBuffer(hasher);
            var paddedHash = this.pkcs1pad(asBuffer, hashAlgorithm);
            var res = this.key.$doPrivate(new BigInteger(paddedHash)).toBuffer(this.key.encryptedDataLength);
            return res;
        }
        else {
            throw new Error('CCXT only supports browser mode :P');
        }
    };
    /**
     * PKCS#1 pad input buffer to max data length
     * @param hashBuf
     * @param hashAlgorithm
     * @returns {*}
     */
    Scheme.prototype.pkcs1pad = function (hashBuf, hashAlgorithm) {
        var digest = SIGN_INFO_HEAD[hashAlgorithm];
        if (!digest) {
            throw Error('Unsupported hash algorithm');
        }
        var data = Buffer.concat([digest, hashBuf]);
        if (data.length + 10 > this.key.encryptedDataLength) {
            throw Error('Key is too short for signing algorithm (' + hashAlgorithm + ')');
        }
        var filled = Buffer.alloc(this.key.encryptedDataLength - data.length - 1);
        filled.fill(0xff, 0, filled.length - 1);
        filled[0] = 1;
        filled[filled.length - 1] = 0;
        var res = Buffer.concat([filled, data]);
        return res;
    };
    return new Scheme(key, options);
};
// used to convert `CryptoJS` wordArrays into `crypto` hex buffers
function wordToByteArray(word, length) {
    var ba = [], xFF = 0xFF;
    if (length > 0)
        ba.push(word >>> 24);
    if (length > 1)
        ba.push((word >>> 16) & xFF);
    if (length > 2)
        ba.push((word >>> 8) & xFF);
    if (length > 3)
        ba.push(word & xFF);
    return ba;
}
function wordArrayToBuffer(wordArray) {
    let length = undefined;
    if (wordArray.hasOwnProperty("sigBytes") && wordArray.hasOwnProperty("words")) {
        length = wordArray.sigBytes;
        wordArray = wordArray.words;
    }
    else {
        throw Error('Argument not a wordArray');
    }
    const result = [];
    let bytes = [];
    let i = 0;
    while (length > 0) {
        bytes = wordToByteArray(wordArray[i], Math.min(4, length));
        length -= bytes.length;
        result.push(bytes);
        i++;
    }
    return new Buffer.from([].concat.apply([], result), 'hex');
}

});

const commonjsRegister$6 = commonjsRegister$C;
commonjsRegister$6("/$$rollup_base$$/js/src/static_dependencies/node-rsa/schemes/schemes.cjs", function (module, exports) {
module.exports = {
    pkcs1: commonjsRequire("./pkcs1.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa/schemes"),
    /**
     * Check if scheme has padding methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isEncryption: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isEncryption;
    },
    /**
     * Check if scheme has sign/verify methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isSignature: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isSignature;
    }
};

});

const commonjsRegister$5 = commonjsRegister$C;
commonjsRegister$5("/$$rollup_base$$/js/src/static_dependencies/node-rsa/utils.cjs", function (module, exports) {
/*
 * Utils functions
 *
 */
/**
 * Break string str each maxLen symbols
 * @param str
 * @param maxLen
 * @returns {string}
 */
module.exports.linebrk = function (str, maxLen) {
    var res = '';
    var i = 0;
    while (i + maxLen < str.length) {
        res += str.substring(i, i + maxLen) + "\n";
        i += maxLen;
    }
    return res + str.substring(i, str.length);
};
/**
 * Trying get a 32-bit unsigned integer from the partial buffer
 * @param buffer
 * @param offset
 * @returns {Number}
 */
module.exports.get32IntFromBuffer = function (buffer, offset) {
    offset = offset || 0;
    var size = 0;
    if ((size = buffer.length - offset) > 0) {
        if (size >= 4) {
            return buffer.readUInt32BE(offset);
        }
        else {
            var res = 0;
            for (var i = offset + size, d = 0; i > offset; i--, d += 2) {
                res += buffer[i - 1] * Math.pow(16, d);
            }
            return res;
        }
    }
    else {
        return NaN;
    }
};
module.exports._ = {
    isObject: function (value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    },
    isString: function (value) {
        return typeof value == 'string' || value instanceof String;
    },
    isNumber: function (value) {
        return typeof value == 'number' || !isNaN(parseFloat(value)) && isFinite(value);
    },
    /**
     * Returns copy of `obj` without `removeProp` field.
     * @param obj
     * @param removeProp
     * @returns Object
     */
    omit: function (obj, removeProp) {
        var newObj = {};
        for (var prop in obj) {
            if (!obj.hasOwnProperty(prop) || prop === removeProp) {
                continue;
            }
            newObj[prop] = obj[prop];
        }
        return newObj;
    }
};
/**
 * Strips everything around the opening and closing lines, including the lines
 * themselves.
 */
module.exports.trimSurroundingText = function (data, opening, closing) {
    var trimStartIndex = 0;
    var trimEndIndex = data.length;
    var openingBoundaryIndex = data.indexOf(opening);
    if (openingBoundaryIndex >= 0) {
        trimStartIndex = openingBoundaryIndex + opening.length;
    }
    var closingBoundaryIndex = data.indexOf(closing, openingBoundaryIndex);
    if (closingBoundaryIndex >= 0) {
        trimEndIndex = closingBoundaryIndex;
    }
    return data.substring(trimStartIndex, trimEndIndex);
};

});

const commonjsRegister$4 = commonjsRegister$C;
commonjsRegister$4("/$$rollup_base$$/js/src/static_dependencies/qs/formats.cjs", function (module, exports) {
var replace = String.prototype.replace;
var percentTwenties = /%20/g;
module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

});

const commonjsRegister$3 = commonjsRegister$C;
commonjsRegister$3("/$$rollup_base$$/js/src/static_dependencies/qs/index.cjs", function (module, exports) {
var stringify = commonjsRequire("./stringify.cjs", "/$$rollup_base$$/js/src/static_dependencies/qs");
var parse = commonjsRequire("./parse.cjs", "/$$rollup_base$$/js/src/static_dependencies/qs");
var formats = commonjsRequire("./formats.cjs", "/$$rollup_base$$/js/src/static_dependencies/qs");
module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

});

const commonjsRegister$2 = commonjsRegister$C;
commonjsRegister$2("/$$rollup_base$$/js/src/static_dependencies/qs/parse.cjs", function (module, exports) {
var utils = commonjsRequire("./utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/qs");
var has = Object.prototype.hasOwnProperty;
var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
};
var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};
// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')
var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                }
                else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }
    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset);
            val = options.strictNullHandling ? null : '';
        }
        else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset);
            val = options.decoder(part.slice(pos + 1), defaults.decoder, charset);
        }
        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(val);
        }
        if (val && options.comma && val.indexOf(',') > -1) {
            val = val.split(',');
        }
        if (has.call(obj, key)) {
            obj[key] = utils.combine(obj[key], val);
        }
        else {
            obj[key] = val;
        }
    }
    return obj;
};
var parseObject = function (chain, val, options) {
    var leaf = val;
    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === '[]' && options.parseArrays) {
            obj = [].concat(leaf);
        }
        else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!options.parseArrays && cleanRoot === '') {
                obj = { 0: leaf };
            }
            else if (!isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)) {
                obj = [];
                obj[index] = leaf;
            }
            else {
                obj[cleanRoot] = leaf;
            }
        }
        leaf = obj;
    }
    return leaf;
};
var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }
    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;
    // The regex chunks
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    // Get the parent
    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    // Stash the parent if it exists
    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(parent);
    }
    // Loop through children appending to the array until we hit depth
    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }
    // If there's a remainder, just add whatever is left
    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }
    return parseObject(keys, val, options);
};
var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults;
    }
    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
    return {
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        depth: typeof opts.depth === 'number' ? opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function (str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    // Iterate over the keys and setup the new object
    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }
    return utils.compact(obj);
};

});

const commonjsRegister$1 = commonjsRegister$C;
commonjsRegister$1("/$$rollup_base$$/js/src/static_dependencies/qs/stringify.cjs", function (module, exports) {
var utils = commonjsRequire("./utils.cjs", "/$$rollup_base$$/js/src/static_dependencies/qs");
var formats = commonjsRequire("./formats.cjs", "/$$rollup_base$$/js/src/static_dependencies/qs");
var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};
var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};
var toISO = Date.prototype.toISOString;
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    formatter: formats.formatters[formats['default']],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};
var stringify = function stringify(// eslint-disable-line func-name-matching
object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    }
    else if (obj instanceof Date) {
        obj = serializeDate(obj);
    }
    else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = obj.join(',');
    }
    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset) : prefix;
        }
        obj = '';
    }
    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === 'undefined') {
        return values;
    }
    var objKeys;
    if (isArray(filter)) {
        objKeys = filter;
    }
    else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (skipNulls && obj[key] === null) {
            continue;
        }
        if (isArray(obj)) {
            pushToArray(values, stringify(obj[key], typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
        }
        else {
            pushToArray(values, stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
        }
    }
    return values;
};
var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }
    if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter = opts.filter;
    }
    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    }
    else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== 'object' || obj === null) {
        return '';
    }
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    }
    else if (opts && 'indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    }
    else {
        arrayFormat = 'indices';
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (!objKeys) {
        objKeys = Object.keys(obj);
    }
    if (options.sort) {
        objKeys.sort(options.sort);
    }
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.formatter, options.encodeValuesOnly, options.charset));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';
    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        }
        else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }
    return joined.length > 0 ? prefix + joined : '';
};

});

const commonjsRegister = commonjsRegister$C;
commonjsRegister("/$$rollup_base$$/js/src/static_dependencies/qs/utils.cjs", function (module, exports) {
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }
    return array;
}());
var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
            var compacted = [];
            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }
            item.obj[item.prop] = compacted;
        }
    }
};
var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }
    return obj;
};
var merge = function merge(target, source, options) {
    if (!source) {
        return target;
    }
    if (typeof source !== 'object') {
        if (isArray(target)) {
            target.push(source);
        }
        else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        }
        else {
            return [target, source];
        }
        return target;
    }
    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }
    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                }
                else {
                    target.push(item);
                }
            }
            else {
                target[i] = item;
            }
        });
        return target;
    }
    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        }
        else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};
var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};
var decode = function (str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    }
    catch (e) {
        return strWithoutPlus;
    }
};
var encode = function encode(str, defaultEncoder, charset) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }
    var string = typeof str === 'string' ? str : String(str);
    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }
    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 0x2D // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }
        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }
        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }
        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }
        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }
    return out;
};
var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];
    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }
    compactQueue(queue);
    return value;
};
var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};
var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};
var combine = function combine(a, b) {
    return [].concat(a, b);
};
module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    merge: merge
};

});

// @ts-nocheck
// ----------------------------------------------------------------------------
// There's been a lot of messing with this code...
// The problem is to satisfy the following requirements:
// - properly detect isNode == true on server side and isNode == false in the browser (on client side)
// - make sure create-react-app, react-starter-kit and other react frameworks work
// - make sure it does not break the browserified version (when linked into a html from a cdn)
// - make sure it does not break the webpacking and babel-transpiled scripts
// - make sure it works in Electron
// - make sure it works with Angular.js
// - make sure it does not break other possible usage scenarios
const isBrowser = typeof window !== 'undefined';
const isElectron = typeof process !== 'undefined' &&
    typeof process.versions !== 'undefined' &&
    typeof process.versions.electron !== 'undefined';
const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && (self instanceof WorkerGlobalScope);
const isWindows = typeof process !== 'undefined' && process.platform === "win32";
const isNode$1 = !(isBrowser || isWebWorker);

/*  ------------------------------------------------------------------------ */
const isNumber = Number.isFinite;
const isInteger = Number.isInteger;
const isArray$1 = Array.isArray;
const hasProps = (o) => ((o !== undefined) && (o !== null));
const isString = (s) => (typeof s === 'string');
const isObject = (o) => ((o !== null) && (typeof o === 'object'));
const isRegExp = (o) => (o instanceof RegExp);
const isDictionary = (o) => (isObject(o) && (Object.getPrototypeOf(o) === Object.prototype) && !isArray$1(o) && !isRegExp(o));
const isStringCoercible = (x) => ((hasProps(x) && x.toString) || isNumber(x));
/*  .............................................   */
const prop = (o, k) => (isObject(o) && o[k] !== '' && o[k] !== null ? o[k] : undefined);
const prop2 = (o, k1, k2) => (!isObject(o)
    ? undefined
    : (o[k1] !== undefined && o[k1] !== '' && o[k1] !== null
        ? o[k1]
        : (o[k2] !== '' && o[k2] !== null
            ? o[k2]
            : undefined)));
const getValueFromKeysInArray = (object, array) => object[array.find((k) => prop(object, k) !== undefined)];
/*  .............................................   */
const asFloat = (x) => ((isNumber(x) || (isString(x) && x.length !== 0)) ? parseFloat(x) : NaN);
const asInteger = (x) => ((isNumber(x) || (isString(x) && x.length !== 0)) ? Math.trunc(Number(x)) : NaN);
/*  .............................................   */
const safeFloat$1 = (o, k, $default) => {
    const n = asFloat(prop(o, k));
    return isNumber(n) ? n : $default;
};
const safeInteger$1 = (o, k, $default) => {
    const n = asInteger(prop(o, k));
    return isNumber(n) ? n : $default;
};
const safeIntegerProduct$1 = (o, k, $factor, $default) => {
    const n = asInteger(prop(o, k));
    return isNumber(n) ? parseInt(n * $factor) : $default;
};
const safeTimestamp$1 = (o, k, $default) => {
    const n = asFloat(prop(o, k));
    return isNumber(n) ? parseInt(n * 1000) : $default;
};
const safeValue$1 = (o, k, $default) => {
    const x = prop(o, k);
    return hasProps(x) ? x : $default;
};
const safeString$1 = (o, k, $default) => {
    const x = prop(o, k);
    return isStringCoercible(x) ? String(x) : $default;
};
const safeStringLower$1 = (o, k, $default) => {
    const x = prop(o, k);
    return isStringCoercible(x) ? String(x).toLowerCase() : $default;
};
const safeStringUpper$1 = (o, k, $default) => {
    const x = prop(o, k);
    return isStringCoercible(x) ? String(x).toUpperCase() : $default;
};
/*  .............................................   */
const safeFloat2$1 = (o, k1, k2, $default) => {
    const n = asFloat(prop2(o, k1, k2));
    return isNumber(n) ? n : $default;
};
const safeInteger2$1 = (o, k1, k2, $default) => {
    const n = asInteger(prop2(o, k1, k2));
    return isNumber(n) ? n : $default;
};
const safeIntegerProduct2$1 = (o, k1, k2, $factor, $default) => {
    const n = asInteger(prop2(o, k1, k2));
    return isNumber(n) ? parseInt(n * $factor) : $default;
};
const safeTimestamp2$1 = (o, k1, k2, $default) => {
    const n = asFloat(prop2(o, k1, k2));
    return isNumber(n) ? parseInt(n * 1000) : $default;
};
const safeValue2$1 = (o, k1, k2, $default) => {
    const x = prop2(o, k1, k2);
    return hasProps(x) ? x : $default;
};
const safeString2$1 = (o, k1, k2, $default) => {
    const x = prop2(o, k1, k2);
    return isStringCoercible(x) ? String(x) : $default;
};
const safeStringLower2$1 = (o, k1, k2, $default) => {
    const x = prop2(o, k1, k2);
    return isStringCoercible(x) ? String(x).toLowerCase() : $default;
};
const safeStringUpper2$1 = (o, k1, k2, $default) => {
    const x = prop2(o, k1, k2);
    return isStringCoercible(x) ? String(x).toUpperCase() : $default;
};
const safeFloatN$1 = (o, k, $default) => {
    const n = asFloat(getValueFromKeysInArray(o, k));
    return isNumber(n) ? n : $default;
};
const safeIntegerN$1 = (o, k, $default) => {
    const n = asInteger(getValueFromKeysInArray(o, k));
    return isNumber(n) ? n : $default;
};
const safeIntegerProductN$1 = (o, k, $factor, $default) => {
    const n = asInteger(getValueFromKeysInArray(o, k));
    return isNumber(n) ? parseInt(n * $factor) : $default;
};
const safeTimestampN$1 = (o, k, $default) => {
    const n = asFloat(getValueFromKeysInArray(o, k));
    return isNumber(n) ? parseInt(n * 1000) : $default;
};
const safeValueN$1 = (o, k, $default) => {
    const x = getValueFromKeysInArray(o, k);
    return hasProps(x) ? x : $default;
};
const safeStringN$1 = (o, k, $default) => {
    const x = getValueFromKeysInArray(o, k);
    return isStringCoercible(x) ? String(x) : $default;
};
const safeStringLowerN$1 = (o, k, $default) => {
    const x = getValueFromKeysInArray(o, k);
    return isStringCoercible(x) ? String(x).toLowerCase() : $default;
};
const safeStringUpperN$1 = (o, k, $default) => {
    const x = getValueFromKeysInArray(o, k);
    return isStringCoercible(x) ? String(x).toUpperCase() : $default;
};
/*  ------------------------------------------------------------------------ */

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
const keys$1 = Object.keys; // eslint-disable-line padding-line-between-statements
const values$1 = (x) => ((!isArray$1(x)) ? Object.values(x) : x); // don't copy arrays if they're already arrays
const index$1 = (x) => new Set(values$1(x));
const extend$1 = (...args) => Object.assign({}, ...args); // NB: side-effect free
const clone$1 = (x) => (isArray$1(x) ? Array.from(x) : extend$1(x)); // clone arrays or objects
// ----------------------------------------------------------------------------
const ordered$1 = (x) => x; // a stub to keep assoc keys in order (in JS it does nothing, it's mostly for Python)
const unique$1 = (x) => Array.from(index$1(x));
const arrayConcat$1 = (a, b) => a.concat(b);
// ------------------------------------------------------------------------
const inArray$1 = (needle, haystack) => haystack.includes(needle);
const toArray$1 = (object) => Object.values(object);
const isEmpty$1 = (object) => {
    if (!object) {
        return true;
    }
    return (Array.isArray(object) ? object : Object.keys(object)).length < 1;
};
const keysort$1 = (x, out = {}) => {
    for (const k of keys$1(x).sort()) {
        out[k] = x[k];
    }
    return out;
};
/*
    Accepts a map/array of objects and a key name to be used as an index:
    array = [
        { someKey: 'value1', anotherKey: 'anotherValue1' },
        { someKey: 'value2', anotherKey: 'anotherValue2' },
        { someKey: 'value3', anotherKey: 'anotherValue3' },
    ]
    key = 'someKey'
    Returns a map:
    {
        value1: { someKey: 'value1', anotherKey: 'anotherValue1' },
        value2: { someKey: 'value2', anotherKey: 'anotherValue2' },
        value3: { someKey: 'value3', anotherKey: 'anotherValue3' },
    }
*/
const groupBy$1 = (x, k, out = {}) => {
    for (const v of values$1(x)) {
        if (k in v) {
            const p = v[k];
            out[p] = out[p] || [];
            out[p].push(v);
        }
    }
    return out;
};
const indexBy$1 = (x, k, out = {}) => {
    for (const v of values$1(x)) {
        if (k in v) {
            out[v[k]] = v;
        }
    }
    return out;
};
const filterBy$1 = (x, k, value = undefined, out = []) => {
    for (const v of values$1(x)) {
        if (v[k] === value) {
            out.push(v);
        }
    }
    return out;
};
const sortBy$1 = (array, key, descending = false, direction = descending ? -1 : 1) => array.sort((a, b) => {
    if (a[key] < b[key]) {
        return -direction;
    }
    else if (a[key] > b[key]) {
        return direction;
    }
    else {
        return 0;
    }
});
const sortBy2$1 = (array, key1, key2, descending = false, direction = descending ? -1 : 1) => array.sort((a, b) => {
    if (a[key1] < b[key1]) {
        return -direction;
    }
    else if (a[key1] > b[key1]) {
        return direction;
    }
    else {
        if (a[key2] < b[key2]) {
            return -direction;
        }
        else if (a[key2] > b[key2]) {
            return direction;
        }
        else {
            return 0;
        }
    }
});
const flatten$1 = function flatten(x, out = []) {
    for (const v of x) {
        if (isArray$1(v)) {
            flatten(v, out);
        }
        else {
            out.push(v);
        }
    }
    return out;
};
const pluck$1 = (x, k) => values$1(x).filter((v) => k in v).map((v) => v[k]);
const omit$1 = (x, ...args) => {
    if (!Array.isArray(x)) {
        const out = clone$1(x);
        for (const k of args) {
            if (isArray$1(k)) { // omit (x, ['a', 'b'])
                for (const kk of k) {
                    delete out[kk];
                }
            }
            else {
                delete out[k]; // omit (x, 'a', 'b')
            }
        }
        return out;
    }
    return x;
};
const sum$1 = (...xs) => {
    const ns = xs.filter(isNumber); // leave only numbers
    return (ns.length > 0) ? ns.reduce((a, b) => a + b, 0) : undefined;
};
const deepExtend$1 = function deepExtend(...xs) {
    let out = undefined;
    for (const x of xs) {
        if (isDictionary(x)) {
            if (!isDictionary(out)) {
                out = {};
            }
            for (const k in x) {
                out[k] = deepExtend(out[k], x[k]);
            }
        }
        else {
            out = x;
        }
    }
    return out;
};
const merge$1 = (target, ...args) => {
    // doesn't overwrite defined keys with undefined
    const overwrite = {};
    const merged = Object.assign({}, ...args);
    const keys = Object.keys(merged);
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (target[key] === undefined) {
            overwrite[key] = merged[key];
        }
    }
    // eslint-disable-next-line
    return Object.assign({}, target, overwrite);
};

// ----------------------------------------------------------------------------
// unCamelCase has to work with the following edge cases
//
//     parseOHLCVs               > parse_ohlcvs
//     safeString2               > safe_string_2
//     safeStringN               > safe_string_n
//     convertOHLCVToTradingView > convert_ohlcv_to_trading_view
//     fetchL2OrderBook          > fetch_l2_order_book
//     stringToBase64            > string_to_base64
//     base64ToString            > base64_to_string
//     parseHTTPResponse         > parse_http_response
//     hasFetchOHLCV             > has_fetch_ohlcv
//
// @ts-nocheck
const unCamelCase$1 = (s) => {
    return s.match(/[A-Z]/) ? s.replace(/[a-z0-9][A-Z]/g, (x) => x[0] + '_' + x[1]).replace(/[A-Z0-9][A-Z0-9][a-z][^$]/g, (x) => x[0] + '_' + x[1] + x[2] + x[3]).replace(/[a-z][0-9]$/g, (x) => x[0] + '_' + x[1]).toLowerCase() : s;
};
const capitalize$1 = (s) => {
    return s.length ? (s.charAt(0).toUpperCase() + s.slice(1)) : s;
};
const strip$1 = (s) => s.replace(/^\s+|\s+$/g, '');
// ----------------------------------------------------------------------------
const uuid$1 = (a) => {
    return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid$1);
};
const uuid16$1 = (a) => {
    return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e5] + 1e2 + 4e2 + 8e3).replace(/[018]/g, uuid16$1);
};
const uuid22$1 = (a) => {
    return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + 1e3 + 4e3 + 8e5).replace(/[018]/g, uuid22$1);
};

// ------------------------------------------------------------------------
//
//  NB: initially, I used objects for options passing:
//
//          decimalToPrecision ('123.456', { digits: 2, round: true, afterPoint: true })
//
//  ...but it turns out it's hard to port that across different languages and it is also
//     probably has a performance penalty -- while it's a performance critical code! So
//     I switched to using named constants instead, as it is actually more readable and
//     succinct, and surely doesn't come with any inherent performance downside:
//
//          decimalToPrecision ('123.456', ROUND, 2, DECIMAL_PLACES)
const ROUND$1 = 0; // rounding mode
const TRUNCATE$1 = 1;
const ROUND_UP = 2;
const ROUND_DOWN = 3;
const DECIMAL_PLACES$1 = 0; // digits counting mode
const SIGNIFICANT_DIGITS = 1;
const TICK_SIZE$1 = 2;
const NO_PADDING$1 = 0; // zero-padding mode
const PAD_WITH_ZERO = 1;
const precisionConstants = {
    ROUND: ROUND$1,
    TRUNCATE: TRUNCATE$1,
    ROUND_UP,
    ROUND_DOWN,
    DECIMAL_PLACES: DECIMAL_PLACES$1,
    SIGNIFICANT_DIGITS,
    TICK_SIZE: TICK_SIZE$1,
    NO_PADDING: NO_PADDING$1,
    PAD_WITH_ZERO,
};
/*  ------------------------------------------------------------------------ */
// See https://stackoverflow.com/questions/1685680/how-to-avoid-scientific-notation-for-large-numbers-in-javascript for discussion
function numberToString$1(x) {
    if (x === undefined)
        return undefined;
    if (typeof x !== 'number')
        return x.toString();
    const s = x.toString();
    if (Math.abs(x) < 1.0) {
        const n_e = s.split('e-');
        const n = n_e[0].replace('.', '');
        const e = parseInt(n_e[1]);
        const neg = (s[0] === '-');
        if (e) {
            x = (neg ? '-' : '') + '0.' + (new Array(e)).join('0') + n.substring(neg);
            return x;
        }
    }
    else {
        const parts = s.split('e');
        if (parts[1]) {
            let e = parseInt(parts[1]);
            const m = parts[0].split('.');
            let part = '';
            if (m[1]) {
                e -= m[1].length;
                part = m[1];
            }
            return m[0] + part + (new Array(e + 1)).join('0');
        }
    }
    return s;
}
//-----------------------------------------------------------------------------
// expects non-scientific notation
const truncate_regExpCache = [];
const truncate_to_string = (num, precision = 0) => {
    num = numberToString$1(num);
    if (precision > 0) {
        const re = truncate_regExpCache[precision] || (truncate_regExpCache[precision] = new RegExp('([-]*\\d+\\.\\d{' + precision + '})(\\d)'));
        const [, result] = num.toString().match(re) || [null, num];
        return result.toString();
    }
    return parseInt(num).toString();
};
const truncate = (num, precision = 0) => parseFloat(truncate_to_string(num, precision));
function precisionFromString$1(str) {
    // support string formats like '1e-4'
    if (str.indexOf('e') > -1) {
        const numStr = str.replace(/\de/, '');
        return parseInt(numStr) * -1;
    }
    // support integer formats (without dot) like '1', '10' etc [Note: bug in decimalToPrecision, so this should not be used atm]
    // if (str.indexOf ('.') === -1) {
    //     return str.length * -1
    // }
    // default strings like '0.0001'
    const split = str.replace(/0+$/g, '').split('.');
    return (split.length > 1) ? (split[1].length) : 0;
}
/*  ------------------------------------------------------------------------ */
const decimalToPrecision$1 = (x, roundingMode, numPrecisionDigits, countingMode = DECIMAL_PLACES$1, paddingMode = NO_PADDING$1) => {
    if (countingMode === TICK_SIZE$1) {
        if (typeof numPrecisionDigits === 'string') {
            numPrecisionDigits = parseFloat(numPrecisionDigits);
        }
        if (numPrecisionDigits <= 0) {
            throw new Error('TICK_SIZE cant be used with negative or zero numPrecisionDigits');
        }
    }
    if (numPrecisionDigits < 0) {
        const toNearest = Math.pow(10, -numPrecisionDigits);
        if (roundingMode === ROUND$1) {
            return (toNearest * decimalToPrecision$1(x / toNearest, roundingMode, 0, countingMode, paddingMode)).toString();
        }
        if (roundingMode === TRUNCATE$1) {
            return (x - (x % toNearest)).toString();
        }
    }
    /*  handle tick size */
    if (countingMode === TICK_SIZE$1) {
        const precisionDigitsString = decimalToPrecision$1(numPrecisionDigits, ROUND$1, 22, DECIMAL_PLACES$1, NO_PADDING$1);
        const newNumPrecisionDigits = precisionFromString$1(precisionDigitsString);
        let missing = x % numPrecisionDigits;
        // See: https://github.com/ccxt/ccxt/pull/6486
        missing = Number(decimalToPrecision$1(missing, ROUND$1, 8, DECIMAL_PLACES$1, NO_PADDING$1));
        const fpError = decimalToPrecision$1(missing / numPrecisionDigits, ROUND$1, Math.max(newNumPrecisionDigits, 8), DECIMAL_PLACES$1, NO_PADDING$1);
        if (precisionFromString$1(fpError) !== 0) {
            if (roundingMode === ROUND$1) {
                if (x > 0) {
                    if (missing >= numPrecisionDigits / 2) {
                        x = x - missing + numPrecisionDigits;
                    }
                    else {
                        x = x - missing;
                    }
                }
                else {
                    if (missing >= numPrecisionDigits / 2) {
                        x = Number(x) - missing;
                    }
                    else {
                        x = Number(x) - missing - numPrecisionDigits;
                    }
                }
            }
            else if (roundingMode === TRUNCATE$1) {
                x = x - missing;
            }
        }
        return decimalToPrecision$1(x, ROUND$1, newNumPrecisionDigits, DECIMAL_PLACES$1, paddingMode);
    }
    /*  Convert to a string (if needed), skip leading minus sign (if any)   */
    const str = numberToString$1(x);
    const isNegative = str[0] === '-';
    const strStart = isNegative ? 1 : 0;
    const strEnd = str.length;
    /*  Find the dot position in the source buffer   */
    for (var strDot = 0; strDot < strEnd; strDot++) {
        if (str[strDot] === '.')
            break;
    }
    const hasDot = strDot < str.length;
    /*  Char code constants         */
    const MINUS = 45;
    const DOT = 46;
    const ZERO = 48;
    const ONE = (ZERO + 1);
    const FIVE = (ZERO + 5);
    const NINE = (ZERO + 9);
    /*  For -123.4567 the `chars` array will hold 01234567 (leading zero is reserved for rounding cases when 099 → 100)    */
    const chars = new Uint8Array((strEnd - strStart) + (hasDot ? 0 : 1));
    chars[0] = ZERO;
    /*  Validate & copy digits, determine certain locations in the resulting buffer  */
    let afterDot = chars.length;
    let digitsStart = -1; // significant digits
    let digitsEnd = -1;
    for (var i = 1, j = strStart; j < strEnd; j++, i++) {
        const c = str.charCodeAt(j);
        if (c === DOT) {
            afterDot = i--;
        }
        else if ((c < ZERO) || (c > NINE)) {
            throw new Error(`${str}: invalid number (contains an illegal character '${str[i - 1]}')`);
        }
        else {
            chars[i] = c;
            if ((c !== ZERO) && (digitsStart < 0))
                digitsStart = i;
        }
    }
    if (digitsStart < 0)
        digitsStart = 1;
    /*  Determine the range to cut  */
    let precisionStart = (countingMode === DECIMAL_PLACES$1) ? afterDot // 0.(0)001234567
        : digitsStart; // 0.00(1)234567
    let precisionEnd = precisionStart
        + numPrecisionDigits;
    /*  Reset the last significant digit index, as it will change during the rounding/truncation.   */
    digitsEnd = -1;
    // Perform rounding/truncation per digit, from digitsEnd to digitsStart, by using the following
    //  algorithm (rounding 999 → 1000, as an example):
    //
    //      step  =          i=3      i=2      i=1      i=0
    //
    //      chars =         0999     0999     0900     1000
    //      memo  =         ---0     --1-     -1--     0---
    let allZeros = true;
    let signNeeded = isNegative;
    for (let i = chars.length - 1, memo = 0; i >= 0; i--) {
        let c = chars[i];
        if (i !== 0) {
            c += memo;
            if (i >= (precisionStart + numPrecisionDigits)) {
                const ceil = (roundingMode === ROUND$1)
                    && (c >= FIVE)
                    && !((c === FIVE) && memo); // prevents rounding of 1.45 to 2
                c = ceil ? (NINE + 1) : ZERO;
            }
            if (c > NINE) {
                c = ZERO;
                memo = 1;
            }
            else
                memo = 0;
        }
        else if (memo)
            c = ONE; // leading extra digit (0900 → 1000)
        chars[i] = c;
        if (c !== ZERO) {
            allZeros = false;
            digitsStart = i;
            digitsEnd = (digitsEnd < 0) ? (i + 1) : digitsEnd;
        }
    }
    /*  Update the precision range, as `digitsStart` may have changed... & the need for a negative sign if it is only 0    */
    if (countingMode === SIGNIFICANT_DIGITS) {
        precisionStart = digitsStart;
        precisionEnd = precisionStart + numPrecisionDigits;
    }
    if (allZeros) {
        signNeeded = false;
    }
    /*  Determine the input character range     */
    const readStart = ((digitsStart >= afterDot) || allZeros) ? (afterDot - 1) : digitsStart; // 0.000(1)234  ----> (0).0001234
    const readEnd = (digitsEnd < afterDot) ? (afterDot) : digitsEnd; // 12(3)000     ----> 123000( )
    /*  Compute various sub-ranges       */
    const nSign = (signNeeded ? 1 : 0); // (-)123.456
    const nBeforeDot = (nSign + (afterDot - readStart)); // (-123).456
    const nAfterDot = Math.max(readEnd - afterDot, 0); // -123.(456)
    const actualLength = (readEnd - readStart); // -(123.456)
    const desiredLength = (paddingMode === NO_PADDING$1)
        ? (actualLength) // -(123.456)
        : (precisionEnd - readStart); // -(123.456    )
    const pad = Math.max(desiredLength - actualLength, 0); //  -123.456(    )
    const padStart = (nBeforeDot + 1 + nAfterDot); //  -123.456( )
    const padEnd = (padStart + pad); //  -123.456     ( )
    const isInteger = (nAfterDot + pad) === 0; //  -123
    /*  Fill the output buffer with characters    */
    const out = new Uint8Array(nBeforeDot + (isInteger ? 0 : 1) + nAfterDot + pad);
    // ------------------------------------------------------------------------------------------ // ---------------------
    if (signNeeded)
        out[0] = MINUS; // -     minus sign
    for (i = nSign, j = readStart; i < nBeforeDot; i++, j++)
        out[i] = chars[j]; // 123   before dot
    if (!isInteger)
        out[nBeforeDot] = DOT; // .     dot
    for (i = nBeforeDot + 1, j = afterDot; i < padStart; i++, j++)
        out[i] = chars[j]; // 456   after dot
    for (i = padStart; i < padEnd; i++)
        out[i] = ZERO; // 000   padding
    /*  Build a string from the output buffer     */
    return String.fromCharCode(...out);
};
function omitZero$1(stringNumber) {
    if (stringNumber === undefined || stringNumber === '') {
        return undefined;
    }
    if (parseFloat(stringNumber) === 0) {
        return undefined;
    }
    return stringNumber;
}
/*  ------------------------------------------------------------------------ */

var CryptoJS = commonjsRequire("/$$rollup_base$$/js/src/static_dependencies/crypto-js/crypto-js.cjs", "/$$rollup_base$$/js/src/static_dependencies/crypto-js");

var qs = commonjsRequire("/$$rollup_base$$/js/src/static_dependencies/qs/index.cjs", "/$$rollup_base$$/js/src/static_dependencies/qs");

var BN = commonjsRequire("/$$rollup_base$$/js/src/static_dependencies/BN/bn.cjs", "/$$rollup_base$$/js/src/static_dependencies/BN");

/* eslint-disable */
/*  ------------------------------------------------------------------------ */
// global vars for base58 encoding
const base58Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
let base58Decoder = null;
let base58Encoder = null;
/*  ------------------------------------------------------------------------ */
// TEALSTREET browser safe to yarn link
const urlencodesafe = (object) => {
    try {
        return qs.stringify(object);
    }
    catch (e) {
        return new URLSearchParams(object).toString();
    }
};
const urlencodeWithArrayRepeatSafe = (object) => {
    try {
        return qs.stringify(object, { arrayFormat: 'repeat' });
    }
    catch (e) {
        return new URLSearchParams(object).toString();
    }
};
const json$1 = (data, params = undefined) => JSON.stringify(data), isJsonEncodedObject$1 = object => ((typeof object === 'string') &&
    (object.length >= 2) &&
    ((object[0] === '{') || (object[0] === '['))), stringToBinary$1 = string => CryptoJS.enc.Latin1.parse(string), stringToBase64$1 = string => CryptoJS.enc.Latin1.parse(string).toString(CryptoJS.enc.Base64), base64ToBinary$1 = string => CryptoJS.enc.Base64.parse(string), base64ToString$1 = string => CryptoJS.enc.Base64.parse(string).toString(CryptoJS.enc.Utf8), binaryToBase64$1 = binary => binary.toString(CryptoJS.enc.Base64), base16ToBinary$1 = string => CryptoJS.enc.Hex.parse(string), binaryToBase16$1 = binary => binary.toString(CryptoJS.enc.Hex), binaryConcat$1 = (...args) => args.reduce((a, b) => a.concat(b)), binaryConcatArray$1 = (arr) => arr.reduce((a, b) => a.concat(b)), urlencode$1 = object => urlencodesafe(object), urlencodeNested$1 = object => qs.stringify(object) // implemented only in python
, urlencodeWithArrayRepeat$1 = urlencodeWithArrayRepeatSafe, rawencode$1 = object => qs.stringify(object, { encode: false }), encode$1 = x => x, decode$1 = x => x
// Url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores
, urlencodeBase64 = base64string => base64string.replace(/[=]+$/, '')
    .replace(/\+/g, '-')
    .replace(/\//g, '_'), numberToLE$1 = (n, padding) => {
    const hexArray = new BN(n).toArray('le', padding);
    return byteArrayToWordArray(hexArray);
}, numberToBE$1 = (n, padding = undefined) => {
    const hexArray = new BN(n).toArray('be', padding);
    return byteArrayToWordArray(hexArray);
}, base58ToBinary$1 = (string) => {
    if (!base58Decoder) {
        base58Decoder = {};
        base58Encoder = {};
        for (let i = 0; i < 58; i++) {
            const c = base58Alphabet[i];
            const bigNum = new BN(i);
            base58Decoder[c] = bigNum;
            base58Encoder[bigNum] = c;
        }
    }
    let result = new BN(0);
    const base = new BN(58);
    for (let i = 0; i < string.length; i++) {
        const character = string[i];
        result.imul(base);
        result.iadd(base58Decoder[character]);
    }
    return byteArrayToWordArray(result.toArray('be'));
}, binaryToBase58 = (wordArray) => {
    if (!base58Encoder) {
        base58Decoder = {};
        base58Encoder = {};
        for (let i = 0; i < 58; i++) {
            const c = base58Alphabet[i];
            const bigNum = new BN(i);
            base58Decoder[c] = bigNum;
            base58Encoder[bigNum] = c;
        }
    }
    const base = new BN(58);
    // hex is only compatible encoding between cryptojs and BN
    const hexString = wordArray.toString(CryptoJS.enc.Hex);
    let result = new BN(hexString, 16);
    let string = [];
    while (!result.isZero()) {
        const { div, mod } = result.divmod(base);
        result = div;
        string.push(base58Encoder[mod]);
    }
    return string.reverse().join('');
};
function byteArrayToWordArray(ba) {
    const wa = [];
    for (let i = 0; i < ba.length; i++) {
        wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);
    }
    return CryptoJS.lib.WordArray.create(wa, ba.length);
}
/*  ------------------------------------------------------------------------ */

var elliptic = commonjsRequire("/$$rollup_base$$/js/src/static_dependencies/elliptic/lib/elliptic.cjs", "/$$rollup_base$$/js/src/static_dependencies/elliptic/lib");

var NodeRSA = commonjsRequire("/$$rollup_base$$/js/src/static_dependencies/node-rsa/NodeRSA.cjs", "/$$rollup_base$$/js/src/static_dependencies/node-rsa");

/* eslint-disable max-classes-per-file */
// import { errorHierarchy } from './errorHierarchy.js';
// Commented out since I'm not sure this is mandatory anymore
// and does not work out of the box with esm
// /*  ------------------------------------------------------------------------ */
// function subclass (BaseClass, classes, namespace = {}) {
//     for (const [className, subclasses] of Object.entries (classes)) {
//         const Class = Object.assign (namespace, {
//         /*  By creating a named property, we trick compiler to assign our class constructor function a name.
//             Otherwise, all our error constructors would be shown as [Function: Error] in the debugger! And
//             the super-useful `e.constructor.name` magic wouldn't work — we then would have no chance to
//             obtain a error type string from an error instance programmatically!                               */
//             [className]: class extends BaseClass {
//                 constructor (message) {
//                     super (message)
//                 /*  A workaround to make `instanceof` work on custom Error classes in transpiled ES5.
//                     See my blog post for the explanation of this hack:
//                     https://medium.com/@xpl/javascript-deriving-from-error-properly-8d2f8f315801        */
//                     this.constructor = Class
//                     this.__proto__   = Class.prototype
//                     this.name        = className
//                     this.message     = message
//                     // https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work
//                     Object.setPrototypeOf (this, Class.prototype)
//                 }
//             }
//         })[className]
//         subclass (Class, subclasses, namespace)
//     }
//     return namespace
// }
class BaseError extends Error {
    constructor(message) {
        super(message);
        this.name = 'BaseError';
    }
}
// Exchange Error errors
class ExchangeError extends Error {
    constructor(message) {
        super(message);
        this.name = 'ExchangeError';
    }
}
class AuthenticationError extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'AuthenticationError';
    }
}
class PermissionDenied extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'PermissionDenied';
    }
}
class AccountNotEnabled extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'AccountNotEnabled';
    }
}
class AccountSuspended extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'AccountSuspended';
    }
}
class ArgumentsRequired extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'ArgumentsRequired';
    }
}
class BadRequest extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'BadRequest';
    }
}
class BadSymbol extends BadRequest {
    constructor(message) {
        super(message);
        this.name = 'BadSymbol';
    }
}
class MarginModeAlreadySet extends BadRequest {
    constructor(message) {
        super(message);
        this.name = 'MarginModeAlreadySet';
    }
}
class BadResponse extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'BadResponse';
    }
}
class NullResponse extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'NullResponse';
    }
}
class InsufficientFunds extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'InsufficientFunds';
    }
}
class InvalidAddress extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'InvalidAddress';
    }
}
class AddressPending extends InvalidAddress {
    constructor(message) {
        super(message);
        this.name = 'AddressPending';
    }
}
class InvalidOrder extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'InvalidOrder';
    }
}
class OrderNotFound extends InvalidOrder {
    constructor(message) {
        super(message);
        this.name = 'OrderNotFound';
    }
}
class OrderNotCached extends InvalidOrder {
    constructor(message) {
        super(message);
        this.name = 'OrderNotCached';
    }
}
class CancelPending extends InvalidOrder {
    constructor(message) {
        super(message);
        this.name = 'CancelPending';
    }
}
class OrderImmediatelyFillable extends InvalidOrder {
    constructor(message) {
        super(message);
        this.name = 'OrderImmediatelyFillable';
    }
}
class OrderNotFillable extends InvalidOrder {
    constructor(message) {
        super(message);
        this.name = 'OrderNotFillable';
    }
}
class DuplicateOrderId extends InvalidOrder {
    constructor(message) {
        super(message);
        this.name = 'DuplicateOrderId';
    }
}
class NotSupported extends ExchangeError {
    constructor(message) {
        super(message);
        this.name = 'NotSupported';
    }
}
// Network error
class NetworkError extends BaseError {
    constructor(message) {
        super(message);
        this.name = 'NetworkError';
    }
}
class DDoSProtection extends NetworkError {
    constructor(message) {
        super(message);
        this.name = 'DDoSProtection';
    }
}
class RateLimitExceeded extends DDoSProtection {
    constructor(message) {
        super(message);
        this.name = 'RateLimitExceeded';
    }
}
class ExchangeNotAvailable extends NetworkError {
    constructor(message) {
        super(message);
        this.name = 'ExchangeNotAvailable';
    }
}
class OnMaintenance extends ExchangeNotAvailable {
    constructor(message) {
        super(message);
        this.name = 'OnMaintenance';
    }
}
class InvalidNonce extends NetworkError {
    constructor(message) {
        super(message);
        this.name = 'InvalidNonce';
    }
}
class RequestTimeout extends NetworkError {
    constructor(message) {
        super(message);
        this.name = 'RequestTimeout';
    }
}
/*  ------------------------------------------------------------------------ */
// export default subclass (
//     // Root class
//     Error,
//     // Derived class hierarchy
//     errorHierarchy
// )
const errors = { BaseError, ExchangeError, PermissionDenied, AccountNotEnabled, AccountSuspended, ArgumentsRequired, BadRequest, BadSymbol, MarginModeAlreadySet, BadResponse, NullResponse, InsufficientFunds, InvalidAddress, InvalidOrder, OrderNotFound, OrderNotCached, CancelPending, OrderImmediatelyFillable, OrderNotFillable, DuplicateOrderId, NotSupported, NetworkError, DDoSProtection, RateLimitExceeded, ExchangeNotAvailable, OnMaintenance, InvalidNonce, RequestTimeout, AuthenticationError, AddressPending };

var errors$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	BaseError: BaseError,
	ExchangeError: ExchangeError,
	PermissionDenied: PermissionDenied,
	AccountNotEnabled: AccountNotEnabled,
	AccountSuspended: AccountSuspended,
	ArgumentsRequired: ArgumentsRequired,
	BadRequest: BadRequest,
	BadSymbol: BadSymbol,
	MarginModeAlreadySet: MarginModeAlreadySet,
	BadResponse: BadResponse,
	NullResponse: NullResponse,
	InsufficientFunds: InsufficientFunds,
	InvalidAddress: InvalidAddress,
	InvalidOrder: InvalidOrder,
	OrderNotFound: OrderNotFound,
	OrderNotCached: OrderNotCached,
	CancelPending: CancelPending,
	OrderImmediatelyFillable: OrderImmediatelyFillable,
	OrderNotFillable: OrderNotFillable,
	DuplicateOrderId: DuplicateOrderId,
	NotSupported: NotSupported,
	NetworkError: NetworkError,
	DDoSProtection: DDoSProtection,
	RateLimitExceeded: RateLimitExceeded,
	ExchangeNotAvailable: ExchangeNotAvailable,
	OnMaintenance: OnMaintenance,
	InvalidNonce: InvalidNonce,
	RequestTimeout: RequestTimeout,
	AuthenticationError: AuthenticationError,
	AddressPending: AddressPending,
	'default': errors
});

/*  ------------------------------------------------------------------------ */
const EC = elliptic.ec;
const EDDSA = elliptic.eddsa;
/*  ------------------------------------------------------------------------ */
const hash$1 = (request, hash = 'md5', digest = 'hex') => {
    const options = {};
    if (hash === 'keccak') {
        hash = 'SHA3';
        options['outputLength'] = 256;
    }
    const result = CryptoJS[hash.toUpperCase()](request, options);
    return (digest === 'binary') ? result : result.toString(CryptoJS.enc[capitalize$1(digest)]);
};
/*  .............................................   */
const hmac$1 = (request, secret, hash = 'sha256', digest = 'hex') => {
    const result = CryptoJS['Hmac' + hash.toUpperCase()](request, secret);
    if (digest) {
        const encoding = (digest === 'binary') ? 'Latin1' : capitalize$1(digest);
        return result.toString(CryptoJS.enc[capitalize$1(encoding)]);
    }
    return result;
};
/*  .............................................   */
function rsa$1(request, secret, alg = 'RS256') {
    const algos = {
        'RS256': 'pkcs1-sha256',
        'RS512': 'pkcs1-sha512',
    };
    if (!(alg in algos)) {
        throw new ExchangeError(alg + ' is not a supported rsa signing algorithm.');
    }
    const algorithm = algos[alg];
    const key = new NodeRSA(secret, {
        'environment': 'browser',
        'signingScheme': algorithm,
    });
    return key.sign(request, 'base64', 'binary');
}
/**
 * @return {string}
 */
function jwt$1(request, secret, alg = 'HS256') {
    const algos = {
        'HS256': 'sha256',
        'HS384': 'sha384',
        'HS512': 'sha512',
    };
    const encodedHeader = urlencodeBase64(stringToBase64$1(JSON.stringify({ 'alg': alg, 'typ': 'JWT' })));
    const encodedData = urlencodeBase64(stringToBase64$1(JSON.stringify(request)));
    const token = [encodedHeader, encodedData].join('.');
    const algoType = alg.slice(0, 2);
    const algorithm = algos[alg];
    let signature = undefined;
    if (algoType === 'HS') {
        signature = urlencodeBase64(hmac$1(token, secret, algorithm, 'base64'));
    }
    else if (algoType === 'RS') {
        signature = urlencodeBase64(rsa$1(token, secret, alg));
    }
    return [token, signature].join('.');
}
function ecdsa$1(request, secret, algorithm = 'p256', hashFunction = undefined, fixedLength = false) {
    let digest = request;
    if (hashFunction !== undefined) {
        digest = hash$1(request, hashFunction, 'hex');
    }
    const curve = new EC(algorithm);
    let signature = curve.sign(digest, secret, 'hex', { 'canonical': true });
    let counter = new BN('0');
    const minimum_size = new BN('1').shln(8 * 31).sub(new BN('1'));
    while (fixedLength && (signature.r.gt(curve.nh) || signature.r.lte(minimum_size) || signature.s.lte(minimum_size))) {
        signature = curve.sign(digest, secret, 'hex', { 'canonical': true, 'extraEntropy': counter.toArray('le', 32) });
        counter = counter.add(new BN('1'));
    }
    return {
        'r': signature.r.toString(16).padStart(64, '0'),
        's': signature.s.toString(16).padStart(64, '0'),
        'v': signature.recoveryParam,
    };
}
function eddsa$1(request, secret, algorithm = 'ed25519') {
    // used for waves.exchange (that's why the output is base58)
    const curve = new EDDSA(algorithm);
    const signature = curve.signModified(request, secret);
    return binaryToBase58(byteArrayToWordArray(signature.toBytes()));
}
/*  ------------------------------------------------------------------------ */
const totp$1 = (secret) => {
    const dec2hex = (s) => ((s < 15.5 ? '0' : '') + Math.round(s).toString(16));
    const hex2dec = (s) => parseInt(s, 16);
    const leftpad = (s, p) => (p + s).slice(-p.length); // both s and p are short strings
    const base32tohex = (base32) => {
        const base32chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
        let bits = '';
        let hex = '';
        for (let i = 0; i < base32.length; i++) {
            const val = base32chars.indexOf(base32.charAt(i).toUpperCase());
            bits += leftpad(val.toString(2), '00000');
        }
        for (let i = 0; i + 4 <= bits.length; i += 4) {
            const chunk = bits.substr(i, 4);
            hex = hex + parseInt(chunk, 2).toString(16);
        }
        return hex;
    };
    const getOTP = (secret) => {
        secret = secret.replace(' ', ''); // support 2fa-secrets with spaces like "4TDV WOGO" → "4TDVWOGO"
        const epoch = Math.round(new Date().getTime() / 1000.0);
        const time = leftpad(dec2hex(Math.floor(epoch / 30)), '0000000000000000');
        const hmacRes = hmac$1(CryptoJS.enc.Hex.parse(time), CryptoJS.enc.Hex.parse(base32tohex(secret)), 'sha1', 'hex');
        const offset = hex2dec(hmacRes.substring(hmacRes.length - 1));
        // eslint-disable-next-line
        let otp = (hex2dec(hmacRes.substr(offset * 2, 8)) & hex2dec('7fffffff')) + '';
        otp = (otp).substr(otp.length - 6, 6);
        return otp;
    };
    return getOTP(secret);
};
/*  ------------------------------------------------------------------------ */
// source: https://stackoverflow.com/a/18639975/1067003
function crc32$1(str, signed = false) {
    const crcTable = '00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D';
    if (crc32$1.table === undefined) {
        crc32$1.table = crcTable.split(' ').map(s => parseInt(s, 16));
    }
    let crc = -1;
    for (let i = 0; i < str.length; i++) {
        // eslint-disable-next-line
        crc = (crc >>> 8) ^ crc32$1.table[(crc ^ str.charCodeAt(i)) & 0xFF];
    }
    // eslint-disable-next-line
    const unsigned = (crc ^ (-1)) >>> 0;
    if (signed && (unsigned >= 0x80000000)) {
        return unsigned - 0x100000000;
    }
    else {
        return unsigned;
    }
}
/*  ------------------------------------------------------------------------ */

// @ts-nocheck
const now$1 = Date.now; // TODO: figure out how to utilize performance.now () properly – it's not as easy as it does not return a unix timestamp...
const microseconds$1 = () => now$1() * 1000; // TODO: utilize performance.now for that purpose
const milliseconds$1 = now$1;
const seconds$1 = () => Math.floor(now$1() / 1000);
const uuidv1$1 = () => {
    const biasSeconds = 12219292800; // seconds from 15th Oct 1572 to Jan 1st 1970
    const bias = biasSeconds * 10000000; // in hundreds of nanoseconds
    const time = microseconds$1() * 10 + bias;
    const timeHex = time.toString(16);
    const arranged = timeHex.slice(7, 15) + timeHex.slice(3, 7) + '1' + timeHex.slice(0, 3);
    // these should be random, but we're not making more than 10 requests per microsecond so who cares
    const clockId = '9696'; // a 14 bit number
    const macAddress = 'ff'.repeat(6);
    return arranged + clockId + macAddress;
};
const setTimeout_original = setTimeout;
const setTimeout_safe = (done, ms, setTimeout = setTimeout_original /* overrideable for mocking purposes */, targetTime = now$1() + ms) => {
    // avoid MAX_INT issue https://github.com/ccxt/ccxt/issues/10761
    if (ms >= 2147483647) {
        throw new Error('setTimeout() function was called with unrealistic value of ' + ms.toString());
    }
    // The built-in setTimeout function can fire its callback earlier than specified, so we
    // need to ensure that it does not happen: sleep recursively until `targetTime` is reached...
    let clearInnerTimeout = () => { };
    let active = true;
    const id = setTimeout(() => {
        active = true;
        const rest = targetTime - now$1();
        if (rest > 0) {
            clearInnerTimeout = setTimeout_safe(done, rest, setTimeout, targetTime); // try sleep more
        }
        else {
            done();
        }
    }, ms);
    return function clear() {
        if (active) {
            active = false; // dunno if IDs are unique on various platforms, so it's better to rely on this flag to exclude the possible cancellation of the wrong timer (if called after completion)
            clearTimeout(id);
        }
        clearInnerTimeout();
    };
};
class TimedOut extends Error {
    constructor() {
        const message = 'timed out';
        super(message);
        this.constructor = TimedOut;
        // // @ts-expect-error
        this.__proto__ = TimedOut.prototype;
        this.message = message;
    }
}
const iso8601$1 = (timestamp) => {
    let _timestampNumber = undefined;
    if (typeof timestamp === 'number') {
        _timestampNumber = Math.floor(timestamp);
    }
    else {
        _timestampNumber = parseInt(timestamp, 10);
    }
    // undefined, null and lots of nasty non-numeric values yield NaN
    if (Number.isNaN(_timestampNumber) || _timestampNumber < 0) {
        return undefined;
    }
    // last line of defence
    try {
        return new Date(_timestampNumber).toISOString();
    }
    catch (e) {
        return undefined;
    }
};
const parse8601$1 = (x) => {
    if (typeof x !== 'string' || !x) {
        return undefined;
    }
    if (x.match(/^[0-9]+$/)) {
        // a valid number in a string, not a date.
        return undefined;
    }
    if (x.indexOf('-') < 0 || x.indexOf(':') < 0) { // no date can be without a dash and a colon
        return undefined;
    }
    // last line of defence
    try {
        const candidate = Date.parse(((x.indexOf('+') >= 0) || (x.slice(-1) === 'Z')) ? x : (x + 'Z').replace(/\s(\d\d):/, 'T$1:'));
        if (Number.isNaN(candidate)) {
            return undefined;
        }
        return candidate;
    }
    catch (e) {
        return undefined;
    }
};
const parseDate$1 = (x) => {
    if (typeof x !== 'string' || !x) {
        return undefined;
    }
    if (x.indexOf('GMT') >= 0) {
        try {
            return Date.parse(x);
        }
        catch (e) {
            return undefined;
        }
    }
    return parse8601$1(x);
};
const rfc2616 = (timestamp = undefined) => new Date(timestamp).toUTCString();
const mdy = (timestamp, infix = '-') => {
    infix = infix || '';
    const date = new Date(timestamp);
    const Y = date.getUTCFullYear().toString();
    let m = date.getUTCMonth() + 1;
    let d = date.getUTCDate();
    m = m < 10 ? ('0' + m) : m.toString();
    d = d < 10 ? ('0' + d) : d.toString();
    return m + infix + d + infix + Y;
};
const ymd$1 = (timestamp, infix, fullYear = true) => {
    infix = infix || '';
    const date = new Date(timestamp);
    const intYear = date.getUTCFullYear();
    const year = fullYear ? intYear : (intYear - 2000);
    const Y = year.toString();
    let m = date.getUTCMonth() + 1;
    let d = date.getUTCDate();
    m = m < 10 ? ('0' + m) : m.toString();
    d = d < 10 ? ('0' + d) : d.toString();
    return Y + infix + m + infix + d;
};
const yymmdd$1 = (timestamp, infix = '') => ymd$1(timestamp, infix, false);
const yyyymmdd$1 = (timestamp, infix = '-') => ymd$1(timestamp, infix, true);
const ymdhms$1 = (timestamp, infix = ' ') => {
    const date = new Date(timestamp);
    const Y = date.getUTCFullYear();
    let m = date.getUTCMonth() + 1;
    let d = date.getUTCDate();
    let H = date.getUTCHours();
    let M = date.getUTCMinutes();
    let S = date.getUTCSeconds();
    m = m < 10 ? ('0' + m) : m;
    d = d < 10 ? ('0' + d) : d;
    H = H < 10 ? ('0' + H) : H;
    M = M < 10 ? ('0' + M) : M;
    S = S < 10 ? ('0' + S) : S;
    return Y + '-' + m + '-' + d + infix + H + ':' + M + ':' + S;
};
const sleep = (ms) => new Promise((resolve) => setTimeout_safe(resolve, ms));
const timeout = async (ms, promise) => {
    let clear = () => { };
    const expires = new Promise((resolve) => (clear = setTimeout_safe(resolve, ms)));
    try {
        return await Promise.race([promise, expires.then(() => {
                throw new TimedOut();
            })]);
    }
    finally {
        clear(); // fixes https://github.com/ccxt/ccxt/issues/749
    }
};

//@ts-nocheck
/*  ------------------------------------------------------------------------ */
class Throttle {
    constructor(config) {
        this.config = {
            'refillRate': 1.0,
            'delay': 0.001,
            'capacity': 1.0,
            'maxCapacity': 2000,
            'tokens': 0,
            'cost': 1.0,
        };
        Object.assign(this.config, config);
        this.queue = [];
        this.running = false;
    }
    async loop() {
        let lastTimestamp = now$1();
        while (this.running) {
            const { resolver, cost } = this.queue[0];
            if (this.config['tokens'] >= 0) {
                this.config['tokens'] -= cost;
                resolver();
                this.queue.shift();
                // contextswitch
                await Promise.resolve();
                if (this.queue.length === 0) {
                    this.running = false;
                }
            }
            else {
                await sleep(this.config['delay'] * 1000);
                const current = now$1();
                const elapsed = current - lastTimestamp;
                lastTimestamp = current;
                const tokens = this.config['tokens'] + (this.config['refillRate'] * elapsed);
                this.config['tokens'] = Math.min(tokens, this.config['capacity']);
            }
        }
    }
}
function throttle$1(config) {
    function inner(cost = undefined, shouldThrottle = true) {
        let resolver;
        const promise = new Promise((resolve, reject) => {
            resolver = resolve;
        });
        if (this.queue.length > this.config['maxCapacity']) {
            throw new Error('throttle queue is over maxCapacity (' + this.config['maxCapacity'].toString() + '), see https://github.com/ccxt/ccxt/issues/11645#issuecomment-1195695526');
        }
        cost = (cost === undefined) ? this.config['cost'] : cost;
        if (shouldThrottle) {
            this.queue.push({ resolver, cost });
        }
        else {
            this.queue.unshift({ resolver, cost });
        }
        if (!this.running) {
            this.running = true;
            this.loop();
        }
        return promise;
    }
    const instance = new Throttle(config);
    const bound = inner.bind(instance);
    // useful for inspecting the tokenBucket
    bound.config = instance.config;
    bound.queue = instance.queue;
    return bound;
}
// ----------------------------------------

//-------------------------------------------------------------------------
// converts timeframe to seconds
const parseTimeframe$1 = (timeframe) => {
    const amount = timeframe.slice(0, -1);
    const unit = timeframe.slice(-1);
    let scale = undefined;
    if (unit === 'y') {
        scale = 60 * 60 * 24 * 365;
    }
    else if (unit === 'M') {
        scale = 60 * 60 * 24 * 30;
    }
    else if (unit === 'w') {
        scale = 60 * 60 * 24 * 7;
    }
    else if (unit === 'd') {
        scale = 60 * 60 * 24;
    }
    else if (unit === 'h') {
        scale = 60 * 60;
    }
    else if (unit === 'm') {
        scale = 60;
    }
    else if (unit === 's') {
        scale = 1;
    }
    else {
        throw new NotSupported('timeframe unit ' + unit + ' is not supported');
    }
    return amount * scale;
};
const roundTimeframe = (timeframe, timestamp, direction = ROUND_DOWN) => {
    const ms = parseTimeframe$1(timeframe) * 1000;
    // Get offset based on timeframe in milliseconds
    const offset = timestamp % ms;
    return timestamp - offset + ((direction === ROUND_UP) ? ms : 0);
};
// given a sorted arrays of trades (recent last) and a timeframe builds an array of OHLCV candles
const buildOHLCVC$1 = (trades, timeframe = '1m', since = -Infinity, limit = Infinity) => {
    const ms = parseTimeframe$1(timeframe) * 1000;
    const ohlcvs = [];
    const [timestamp, /* open */ , high, low, close, volume, count] = [0, 1, 2, 3, 4, 5, 6];
    const oldest = Math.min(trades.length - 1, limit);
    for (let i = 0; i <= oldest; i++) {
        const trade = trades[i];
        if (trade.timestamp < since) {
            continue;
        }
        const openingTime = Math.floor(trade.timestamp / ms) * ms; // shift to the edge of m/h/d (but not M)
        const candle = ohlcvs.length - 1;
        if (candle === -1 || openingTime >= ohlcvs[candle][timestamp] + ms) {
            // moved to a new timeframe -> create a new candle from opening trade
            ohlcvs.push([
                openingTime,
                trade.price,
                trade.price,
                trade.price,
                trade.price,
                trade.amount,
                1, // count
            ]);
        }
        else {
            // still processing the same timeframe -> update opening trade
            ohlcvs[candle][high] = Math.max(ohlcvs[candle][high], trade.price);
            ohlcvs[candle][low] = Math.min(ohlcvs[candle][low], trade.price);
            ohlcvs[candle][close] = trade.price;
            ohlcvs[candle][volume] += trade.amount;
            ohlcvs[candle][count]++;
        } // if
    } // for
    return ohlcvs;
};
const extractParams$1 = (string) => {
    const re = /{([\w-]+)}/g;
    const matches = [];
    let match = re.exec(string);
    while (match) {
        matches.push(match[1]);
        match = re.exec(string);
    }
    return matches;
};
const implodeParams$1 = (string, params) => {
    if (!Array.isArray(params)) {
        const keys = Object.keys(params);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (!Array.isArray(params[key])) {
                string = string.replace('{' + key + '}', params[key]);
            }
        }
    }
    return string;
};
function vwap$1(baseVolume, quoteVolume) {
    return ((baseVolume !== undefined) && (quoteVolume !== undefined) && (baseVolume > 0)) ? (quoteVolume / baseVolume) : undefined;
}
/*  ------------------------------------------------------------------------ */
function aggregate$1(bidasks) {
    const result = {};
    for (let i = 0; i < bidasks.length; i++) {
        const [price, volume] = bidasks[i];
        if (volume > 0) {
            result[price] = (result[price] || 0) + volume;
        }
    }
    return Object.keys(result).map((price) => [parseFloat(price), parseFloat(result[price])]);
}
/*  ------------------------------------------------------------------------ */

/*  ------------------------------------------------------------------------ */
/*  ------------------------------------------------------------------------ */

var functions = /*#__PURE__*/Object.freeze({
	__proto__: null,
	isBrowser: isBrowser,
	isElectron: isElectron,
	isWebWorker: isWebWorker,
	isNode: isNode$1,
	isWindows: isWindows,
	keys: keys$1,
	values: values$1,
	extend: extend$1,
	clone: clone$1,
	index: index$1,
	ordered: ordered$1,
	unique: unique$1,
	arrayConcat: arrayConcat$1,
	inArray: inArray$1,
	toArray: toArray$1,
	isEmpty: isEmpty$1,
	keysort: keysort$1,
	indexBy: indexBy$1,
	groupBy: groupBy$1,
	filterBy: filterBy$1,
	sortBy: sortBy$1,
	sortBy2: sortBy2$1,
	flatten: flatten$1,
	pluck: pluck$1,
	omit: omit$1,
	sum: sum$1,
	deepExtend: deepExtend$1,
	merge: merge$1,
	uuid: uuid$1,
	uuid16: uuid16$1,
	uuid22: uuid22$1,
	unCamelCase: unCamelCase$1,
	capitalize: capitalize$1,
	strip: strip$1,
	isNumber: isNumber,
	isInteger: isInteger,
	isArray: isArray$1,
	isObject: isObject,
	isString: isString,
	isStringCoercible: isStringCoercible,
	isDictionary: isDictionary,
	hasProps: hasProps,
	prop: prop,
	asFloat: asFloat,
	asInteger: asInteger,
	safeFloat: safeFloat$1,
	safeInteger: safeInteger$1,
	safeIntegerProduct: safeIntegerProduct$1,
	safeTimestamp: safeTimestamp$1,
	safeValue: safeValue$1,
	safeString: safeString$1,
	safeStringLower: safeStringLower$1,
	safeStringUpper: safeStringUpper$1,
	safeFloat2: safeFloat2$1,
	safeInteger2: safeInteger2$1,
	safeIntegerProduct2: safeIntegerProduct2$1,
	safeTimestamp2: safeTimestamp2$1,
	safeValue2: safeValue2$1,
	safeString2: safeString2$1,
	safeStringLower2: safeStringLower2$1,
	safeStringUpper2: safeStringUpper2$1,
	safeFloatN: safeFloatN$1,
	safeIntegerN: safeIntegerN$1,
	safeIntegerProductN: safeIntegerProductN$1,
	safeTimestampN: safeTimestampN$1,
	safeValueN: safeValueN$1,
	safeStringN: safeStringN$1,
	safeStringLowerN: safeStringLowerN$1,
	safeStringUpperN: safeStringUpperN$1,
	numberToString: numberToString$1,
	precisionFromString: precisionFromString$1,
	decimalToPrecision: decimalToPrecision$1,
	truncate_to_string: truncate_to_string,
	truncate: truncate,
	omitZero: omitZero$1,
	precisionConstants: precisionConstants,
	ROUND: ROUND$1,
	TRUNCATE: TRUNCATE$1,
	ROUND_UP: ROUND_UP,
	ROUND_DOWN: ROUND_DOWN,
	DECIMAL_PLACES: DECIMAL_PLACES$1,
	SIGNIFICANT_DIGITS: SIGNIFICANT_DIGITS,
	TICK_SIZE: TICK_SIZE$1,
	NO_PADDING: NO_PADDING$1,
	PAD_WITH_ZERO: PAD_WITH_ZERO,
	json: json$1,
	isJsonEncodedObject: isJsonEncodedObject$1,
	stringToBinary: stringToBinary$1,
	stringToBase64: stringToBase64$1,
	base64ToBinary: base64ToBinary$1,
	base64ToString: base64ToString$1,
	binaryToBase64: binaryToBase64$1,
	base16ToBinary: base16ToBinary$1,
	binaryToBase16: binaryToBase16$1,
	binaryConcat: binaryConcat$1,
	binaryConcatArray: binaryConcatArray$1,
	urlencode: urlencode$1,
	urlencodeWithArrayRepeat: urlencodeWithArrayRepeat$1,
	rawencode: rawencode$1,
	encode: encode$1,
	decode: decode$1,
	urlencodeBase64: urlencodeBase64,
	numberToLE: numberToLE$1,
	numberToBE: numberToBE$1,
	base58ToBinary: base58ToBinary$1,
	binaryToBase58: binaryToBase58,
	byteArrayToWordArray: byteArrayToWordArray,
	urlencodeNested: urlencodeNested$1,
	hash: hash$1,
	hmac: hmac$1,
	jwt: jwt$1,
	totp: totp$1,
	rsa: rsa$1,
	ecdsa: ecdsa$1,
	eddsa: eddsa$1,
	crc32: crc32$1,
	now: now$1,
	microseconds: microseconds$1,
	milliseconds: milliseconds$1,
	seconds: seconds$1,
	iso8601: iso8601$1,
	parse8601: parse8601$1,
	rfc2616: rfc2616,
	uuidv1: uuidv1$1,
	parseDate: parseDate$1,
	mdy: mdy,
	ymd: ymd$1,
	yymmdd: yymmdd$1,
	yyyymmdd: yyyymmdd$1,
	ymdhms: ymdhms$1,
	setTimeout_safe: setTimeout_safe,
	sleep: sleep,
	TimedOut: TimedOut,
	timeout: timeout,
	throttle: throttle$1,
	aggregate: aggregate$1,
	parseTimeframe: parseTimeframe$1,
	roundTimeframe: roundTimeframe,
	buildOHLCVC: buildOHLCVC$1,
	implodeParams: implodeParams$1,
	extractParams: extractParams$1,
	vwap: vwap$1
});

function inflate(data) {
    return zlib.inflateRawSync(data).toString();
}
function inflate64(data) {
    return inflate(Buffer.from(data, 'base64'));
}
function gunzip(data) {
    return zlib.gunzipSync(data).toString();
}

const zero = BigInt(0);
const minusOne = BigInt(-1);
const base = BigInt(10);
class Precise {
    constructor(number, decimals = undefined) {
        this.decimals = undefined;
        this.integer = undefined;
        this.base = undefined;
        if (decimals === undefined) {
            let modifier = 0;
            number = number.toLowerCase();
            if (number.indexOf('e') > -1) {
                [number, modifier] = number.split('e');
                modifier = parseInt(modifier.toString());
            }
            const decimalIndex = number.indexOf('.');
            this.decimals = (decimalIndex > -1) ? number.length - decimalIndex - 1 : 0;
            const integerString = number.replace('.', '');
            this.integer = BigInt(integerString);
            this.decimals = this.decimals - modifier;
        }
        else {
            this.integer = number;
            this.decimals = decimals;
        }
    }
    mul(other) {
        // other must be another instance of Precise
        const integerResult = this.integer * other.integer;
        return new Precise(integerResult, this.decimals + other.decimals);
    }
    div(other, precision = 18) {
        const distance = precision - this.decimals + other.decimals;
        let numerator = undefined;
        if (distance === 0) {
            numerator = this.integer;
        }
        else if (distance < 0) {
            const exponent = base ** BigInt(-distance);
            numerator = this.integer / exponent;
        }
        else {
            const exponent = base ** BigInt(distance);
            numerator = this.integer * exponent;
        }
        const result = numerator / other.integer;
        return new Precise(result, precision);
    }
    add(other) {
        if (this.decimals === other.decimals) {
            const integerResult = this.integer + other.integer;
            return new Precise(integerResult, this.decimals);
        }
        else {
            const [smaller, bigger] = (this.decimals > other.decimals) ? [other, this] : [this, other];
            const exponent = bigger.decimals - smaller.decimals;
            const normalised = smaller.integer * (base ** BigInt(exponent));
            const result = normalised + bigger.integer;
            return new Precise(result, bigger.decimals);
        }
    }
    mod(other) {
        const rationizerNumerator = Math.max(-this.decimals + other.decimals, 0);
        const numerator = this.integer * (base ** BigInt(rationizerNumerator));
        const rationizerDenominator = Math.max(-other.decimals + this.decimals, 0);
        const denominator = other.integer * (base ** BigInt(rationizerDenominator));
        const result = numerator % denominator;
        return new Precise(result, rationizerDenominator + other.decimals);
    }
    sub(other) {
        const negative = new Precise(-other.integer, other.decimals);
        return this.add(negative);
    }
    abs() {
        return new Precise(this.integer < 0 ? this.integer * minusOne : this.integer, this.decimals);
    }
    neg() {
        return new Precise(-this.integer, this.decimals);
    }
    min(other) {
        return this.lt(other) ? this : other;
    }
    max(other) {
        return this.gt(other) ? this : other;
    }
    gt(other) {
        const sum = this.sub(other);
        return sum.integer > 0;
    }
    ge(other) {
        const sum = this.sub(other);
        return sum.integer >= 0;
    }
    lt(other) {
        return other.gt(this);
    }
    le(other) {
        return other.ge(this);
    }
    reduce() {
        const string = this.integer.toString();
        const start = string.length - 1;
        if (start === 0) {
            if (string === '0') {
                this.decimals = 0;
            }
            return this;
        }
        let i;
        for (i = start; i >= 0; i--) {
            if (string.charAt(i) !== '0') {
                break;
            }
        }
        const difference = start - i;
        if (difference === 0) {
            return this;
        }
        this.decimals -= difference;
        this.integer = BigInt(string.slice(0, i + 1));
    }
    equals(other) {
        this.reduce();
        other.reduce();
        return (this.decimals === other.decimals) && (this.integer === other.integer);
    }
    toString() {
        this.reduce();
        let sign;
        let abs;
        if (this.integer < 0) {
            sign = '-';
            abs = -this.integer;
        }
        else {
            sign = '';
            abs = this.integer;
        }
        const integerArray = Array.from(abs.toString(Number(base)).padStart(this.decimals, '0'));
        const index = integerArray.length - this.decimals;
        let item;
        if (index === 0) {
            // if we are adding to the front
            item = '0.';
        }
        else if (this.decimals < 0) {
            item = '0'.repeat(-this.decimals);
        }
        else if (this.decimals === 0) {
            item = '';
        }
        else {
            item = '.';
        }
        integerArray.splice(index, 0, item);
        return sign + integerArray.join('');
    }
    static stringMul(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).mul(new Precise(string2)).toString();
    }
    static stringDiv(string1, string2, precision = 18) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        const string2Precise = new Precise(string2);
        if (string2Precise.integer === zero) {
            return undefined;
        }
        return (new Precise(string1)).div(string2Precise, precision).toString();
    }
    static stringAdd(string1, string2) {
        if ((string1 === undefined) && (string2 === undefined)) {
            return undefined;
        }
        if (string1 === undefined) {
            return string2;
        }
        else if (string2 === undefined) {
            return string1;
        }
        return (new Precise(string1)).add(new Precise(string2)).toString();
    }
    static stringSub(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).sub(new Precise(string2)).toString();
    }
    static stringAbs(string) {
        if (string === undefined) {
            return undefined;
        }
        return (new Precise(string)).abs().toString();
    }
    static stringNeg(string) {
        if (string === undefined) {
            return undefined;
        }
        return (new Precise(string)).neg().toString();
    }
    static stringMod(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).mod(new Precise(string2)).toString();
    }
    static stringEquals(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).equals(new Precise(string2));
    }
    static stringEq(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).equals(new Precise(string2));
    }
    static stringMin(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).min(new Precise(string2)).toString();
    }
    static stringMax(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).max(new Precise(string2)).toString();
    }
    static stringGt(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).gt(new Precise(string2));
    }
    static stringGe(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).ge(new Precise(string2));
    }
    static stringLt(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).lt(new Precise(string2));
    }
    static stringLe(string1, string2) {
        if ((string1 === undefined) || (string2 === undefined)) {
            return undefined;
        }
        return (new Precise(string1)).le(new Precise(string2));
    }
}

// @ts-nocheck
function Future() {
    let resolve = undefined, reject = undefined;
    const p = new Promise((resolve_, reject_) => {
        resolve = resolve_;
        reject = reject_;
    });
    p.resolve = function _resolve() {
        // eslint-disable-next-line prefer-rest-params
        resolve.apply(this, arguments);
    };
    p.reject = function _reject() {
        // eslint-disable-next-line prefer-rest-params
        reject.apply(this, arguments);
    };
    return p;
}

class Client {
    constructor(url, onMessageCallback, onErrorCallback, onCloseCallback, onConnectedCallback, config = {}) {
        const defaults = {
            url,
            onMessageCallback,
            onErrorCallback,
            onCloseCallback,
            onConnectedCallback,
            verbose: false,
            protocols: undefined,
            options: undefined,
            futures: {},
            subscriptions: {},
            rejections: {},
            connected: undefined,
            error: undefined,
            connectionStarted: undefined,
            connectionEstablished: undefined,
            isConnected: false,
            connectionTimer: undefined,
            connectionTimeout: 10000,
            pingInterval: undefined,
            ping: undefined,
            keepAlive: 30000,
            maxPingPongMisses: 2.0,
            // timeout is not used atm
            // timeout: 30000, // throw if a request is not satisfied in 30 seconds, false to disable
            connection: undefined,
            startedConnecting: false,
            gunzip: false,
            inflate: false,
        };
        Object.assign(this, deepExtend$1(defaults, config));
        // TEALSTREET
        this.keepAlive = Math.min(this.keepAlive, 5000);
        this.maxPingPongMisses = Math.max(this.maxPingPongMisses, 5);
        // connection-related Future
        this.connected = Future();
    }
    future(messageHash) {
        if (!(messageHash in this.futures)) {
            this.futures[messageHash] = Future();
        }
        const future = this.futures[messageHash];
        if (messageHash in this.rejections) {
            future.reject(this.rejections[messageHash]);
            delete this.rejections[messageHash];
        }
        return future;
    }
    resolve(result, messageHash) {
        if (this.verbose && messageHash === undefined) {
            this.log(new Date(), "resolve received undefined messageHash");
        }
        if (messageHash in this.futures) {
            const promise = this.futures[messageHash];
            promise.resolve(result);
            delete this.futures[messageHash];
        }
        return result;
    }
    reject(result, messageHash = undefined) {
        if (messageHash) {
            if (messageHash in this.futures) {
                const promise = this.futures[messageHash];
                promise.reject(result);
                delete this.futures[messageHash];
            }
            else {
                // in the case that a promise was already fulfilled
                // and the client has not yet called watchMethod to create a new future
                // calling client.reject will do nothing
                // this means the rejection will be ignored and the code will continue executing
                // instead we store the rejection for later
                this.rejections[messageHash] = result;
            }
        }
        else {
            const messageHashes = Object.keys(this.futures);
            for (let i = 0; i < messageHashes.length; i++) {
                this.reject(result, messageHashes[i]);
            }
        }
        return result;
    }
    log(...args) {
        console.log(...args);
        // console.dir (args, { depth: null })
    }
    connect(backoffDelay = 0) {
        throw new NotSupported("connect() not implemented yet");
    }
    isOpen() {
        throw new NotSupported("isOpen() not implemented yet");
    }
    reset(error) {
        this.clearConnectionTimeout();
        this.clearPingInterval();
        this.reject(error);
    }
    onConnectionTimeout() {
        if (!this.isOpen()) {
            const error = new RequestTimeout("Connection to " + this.url + " failed due to a connection timeout");
            this.onError(error);
            this.connection.close(1006);
        }
    }
    setConnectionTimeout() {
        if (this.connectionTimeout) {
            const onConnectionTimeout = this.onConnectionTimeout.bind(this);
            this.connectionTimer = setTimeout(onConnectionTimeout, this.connectionTimeout);
        }
    }
    clearConnectionTimeout() {
        if (this.connectionTimer) {
            this.connectionTimer = clearTimeout(this.connectionTimer);
        }
    }
    setPingInterval() {
        if (this.keepAlive) {
            const onPingInterval = this.onPingInterval.bind(this);
            this.pingInterval = setInterval(onPingInterval, this.keepAlive);
        }
    }
    clearPingInterval() {
        if (this.pingInterval) {
            this.pingInterval = clearInterval(this.pingInterval);
        }
    }
    onPingInterval() {
        if (this.keepAlive && this.isOpen()) {
            const now = milliseconds$1();
            this.lastPong = this.lastPong || now;
            if (this.lastPong + this.keepAlive * this.maxPingPongMisses < now) {
                console.error('ping-pong keepalive missed on time. Doing nothing in CCXT. Handle elsewhere...');
                // this.onError(
                //   new RequestTimeout(
                //     "Connection to " +
                //       this.url +
                //       " timed out due to a ping-pong keepalive missing on time"
                //   )
                // );
            }
            else {
                if (this.ping) {
                    this.send(this.ping(this));
                }
                else if (isNode$1) {
                    // can't do this inside browser
                    // https://stackoverflow.com/questions/10585355/sending-websocket-ping-pong-frame-from-browser
                    this.connection.ping();
                }
                else {
                    // browsers handle ping-pong automatically therefore
                    // in a browser we update lastPong on every call to
                    // this function as if pong just came in to prevent the
                    // client from thinking it's a stalled connection
                    this.lastPong = now;
                }
            }
        }
    }
    onOpen() {
        if (this.verbose) {
            this.log(new Date(), "onOpen");
        }
        this.connectionEstablished = milliseconds$1();
        this.isConnected = true;
        this.connected.resolve(this.url);
        // this.connection.terminate () // debugging
        this.clearConnectionTimeout();
        this.setPingInterval();
        this.onConnectedCallback(this);
    }
    // this method is not used at this time, because in JS the ws client will
    // respond to pings coming from the server with pongs automatically
    // however, some devs may want to track connection states in their app
    onPing() {
        if (this.verbose) {
            this.log(new Date(), "onPing");
        }
    }
    onPong() {
        this.lastPong = milliseconds$1();
        if (this.verbose) {
            this.log(new Date(), "onPong");
        }
    }
    onError(error) {
        if (this.verbose) {
            this.log(new Date(), "onError", error.message);
        }
        if (!(error instanceof BaseError)) {
            // in case of ErrorEvent from node_modules/ws/lib/event-target.js
            error = new NetworkError(error.message);
        }
        this.error = error;
        this.reset(this.error);
        this.onErrorCallback(this, this.error);
    }
    onClose(event) {
        if (this.verbose) {
            this.log(new Date(), "onClose", event);
        }
        if (!this.error) {
            // todo: exception types for server-side disconnects
            // TEALSTREET
            if (NetworkError) {
                this.reset(new NetworkError("connection closed by remote server, closing code " +
                    String(event.code)));
            }
            else {
                this.reset(new Error("connection closed by remote server, closing code " +
                    String(event.code)));
            }
        }
        this.onCloseCallback(this, event);
    }
    // this method is not used at this time
    // but may be used to read protocol-level data like cookies, headers, etc
    onUpgrade(message) {
        if (this.verbose) {
            this.log(new Date(), "onUpgrade");
        }
    }
    send(message) {
        if (this.verbose) {
            this.log(new Date(), "sending", message);
        }
        message = typeof message === "string" ? message : JSON.stringify(message);
        this.connection.send(message);
    }
    close() {
        throw new NotSupported("close() not implemented yet");
    }
    onMessage(message) {
        // if we use onmessage we get MessageEvent objects
        // MessageEvent {isTrusted: true, data: "{"e":"depthUpdate","E":1581358737706,"s":"ETHBTC",…"0.06200000"]],"a":[["0.02261300","0.00000000"]]}", origin: "wss://stream.binance.com:9443", lastEventId: "", source: null, …}
        message = message.data;
        if (message.byteLength !== undefined) {
            if (this.gunzip) {
                message = gunzip(message);
            }
            else if (this.inflate) {
                message = inflate(message);
            }
        }
        try {
            if (message instanceof Buffer) {
                message = message.toString();
            }
            if (isJsonEncodedObject$1(message)) {
                message = JSON.parse(message.replace(/:(\d{15,}),/g, ':"$1",'));
            }
            if (this.verbose) {
                this.log(new Date(), "onMessage", message);
                // unlimited depth
                // this.log (new Date (), 'onMessage', util.inspect (message, false, null, true))
                // this.log (new Date (), 'onMessage', JSON.stringify (message, null, 4))
            }
        }
        catch (e) {
            this.log(new Date(), "onMessage JSON.parse", e);
            // reset with a json encoding error ?
        }
        this.onMessageCallback(this, message);
    }
}

const WebSocketPlatform = isNode$1 ? WebSocket__default["default"] : self.WebSocket;
class WsClient extends Client {
    createConnection() {
        if (this.verbose) {
            this.log(new Date(), "connecting to", this.url);
        }
        this.connectionStarted = milliseconds$1();
        this.setConnectionTimeout();
        const url = this.url.includes('phemex') ? this.url : `${this.url}${this.url.includes("?") ? "&" : "?"}${+new Date()}`;
        const wsClass = safeValue$1(this.options, "wsClass", WebSocketPlatform);
        if (isNode$1) {
            this.connection = new wsClass(url, this.protocols, this.options);
        }
        else {
            this.connection = new wsClass(url, this.protocols);
        }
        this.connection.onopen = this.onOpen.bind(this);
        this.connection.onmessage = this.onMessage.bind(this);
        this.connection.onerror = this.onError.bind(this);
        this.connection.onclose = this.onClose.bind(this);
        if (isNode$1) {
            this.connection
                .on("ping", this.onPing.bind(this))
                .on("pong", this.onPong.bind(this))
                .on("upgrade", this.onUpgrade.bind(this));
        }
        // this.connection.terminate () // debugging
        // this.connection.close () // debugging
    }
    connect(backoffDelay = 0) {
        if (!this.startedConnecting) {
            this.startedConnecting = true;
            // exponential backoff for consequent ws connections if necessary
            if (backoffDelay) {
                sleep(backoffDelay).then(this.createConnection.bind(this));
            }
            else {
                this.createConnection();
            }
        }
        return this.connected;
    }
    isOpen() {
        return this.connection.readyState === WebSocketPlatform.OPEN;
    }
    close() {
        const wsClass = safeValue$1(this.options, "wsClass", WebSocketPlatform);
        if (this.connection instanceof wsClass) {
            return this.connection.close();
        }
    }
}

/* eslint-disable max-classes-per-file */
// @ts-nocheck
// ----------------------------------------------------------------------------
//
// Upto 10x faster after initializing memory for the floating point array
// Author: github.com/frosty00
// Email: carlo.revelli@berkeley.edu
//
function bisectLeft(array, x) {
    let low = 0;
    let high = array.length - 1;
    while (low <= high) {
        const mid = (low + high) >>> 1;
        if (array[mid] - x < 0)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return low;
}
const SIZE = 1024;
const SEED = new Float64Array(new Array(SIZE).fill(Number.MAX_VALUE));
class OrderBookSide extends Array {
    constructor(deltas = [], depth = undefined) {
        super();
        // a string-keyed dictionary of price levels / ids / indices
        Object.defineProperty(this, 'index', {
            __proto__: null,
            value: new Float64Array(SEED),
            writable: true,
        });
        Object.defineProperty(this, 'depth', {
            __proto__: null,
            value: depth || Number.MAX_SAFE_INTEGER,
            writable: true,
        });
        Object.defineProperty(this, 'hidden', {
            __proto__: null,
            value: new Map(),
            writable: true,
        });
        // sort upon initiation
        this.length = 0;
        for (let i = 0; i < deltas.length; i++) {
            this.storeArray(deltas[i].slice()); // slice is muy importante
        }
    }
    storeArray(delta) {
        const price = delta[0];
        const size = delta[1];
        const index_price = this.side ? -price : price;
        const index = bisectLeft(this.index, index_price);
        if (size) {
            if (this.index[index] === index_price) {
                if (index < this.length) {
                    this[index][1] = size;
                }
                else {
                    const entry = this.hidden.get(index_price);
                    entry[1] = size;
                }
            }
            else {
                this.length++;
                this.index.copyWithin(index + 1, index, this.index.length);
                this.index[index] = index_price;
                if (index < this.length) {
                    this.copyWithin(index + 1, index, this.length);
                    this[index] = delta;
                }
                else {
                    this.hidden.set(index_price, delta);
                    this.length--;
                }
                // in the rare case of very large orderbooks being sent
                if (this.length > this.index.length - 1) {
                    const existing = Array.from(this.index);
                    existing.length = this.length * 2;
                    existing.fill(Number.MAX_VALUE, this.index.length);
                    this.index = new Float64Array(existing);
                }
            }
        }
        else if (this.index[index] === index_price) {
            this.index.copyWithin(index, index + 1, this.index.length);
            this.index[this.length + this.hidden.size - 1] = Number.MAX_VALUE;
            if (this.hidden.has(index_price)) {
                this.hidden.delete(index_price);
            }
            else {
                this.copyWithin(index, index + 1, this.length);
                this.length--;
            }
        }
    }
    // index an incoming delta in the string-price-keyed dictionary
    store(price, size) {
        this.storeArray([price, size]);
    }
    // replace stored orders with new values
    limit(n = undefined) {
        if (n < this.length) {
            // we store some hidden stuff for when the book is temporarily limited to the user
            for (let i = n; i < this.length; i++) {
                this.hidden.set(this.index[i], this[i]);
            }
            this.length = n;
        }
        if (this.hidden.size) {
            let end = this.length + this.hidden.size;
            if (n !== undefined) {
                end = Math.min(end, n);
            }
            for (let i = this.length; i < end; i++) {
                this.push(this.hidden.get(this.index[i]));
                this.hidden.delete(this.index[i]);
            }
        }
        if (this.length > this.depth) {
            for (let i = this.depth; i < this.length; i++) {
                this.index[i] = Number.MAX_VALUE;
            }
            this.hidden.clear();
            this.length = this.depth;
        }
    }
}
// ----------------------------------------------------------------------------
// overwrites absolute volumes at price levels
// or deletes price levels based on order counts (3rd value in a bidask delta)
// this class stores vector arrays of values indexed by price
class CountedOrderBookSide extends OrderBookSide {
    store(price, size, count) {
        this.storeArray([price, size, count]);
    }
    storeArray(delta) {
        const price = delta[0];
        const size = delta[1];
        const count = delta[2];
        const index_price = this.side ? -price : price;
        const index = bisectLeft(this.index, index_price);
        if (size && count) {
            if (this.index[index] == index_price) {
                if (index < this.length) {
                    const entry = this[index];
                    entry[1] = size;
                    entry[2] = count;
                }
                else {
                    const entry = this.hidden.get(index_price);
                    entry[1] = size;
                    entry[2] = count;
                }
            }
            else {
                this.length++;
                this.index.copyWithin(index + 1, index, this.index.length);
                this.index[index] = index_price;
                if (index < this.length) {
                    this.copyWithin(index + 1, index, this.length);
                    this[index] = delta;
                }
                else {
                    this.hidden.set(index_price, delta);
                    this.length--;
                }
                // in the rare case of very large orderbooks being sent
                if (this.length > this.index.length - 1) {
                    const existing = Array.from(this.index);
                    existing.length = this.length * 2;
                    existing.fill(Number.MAX_VALUE, this.index.length);
                    this.index = new Float64Array(existing);
                }
            }
        }
        else if (this.index[index] == index_price) {
            this.index.copyWithin(index, index + 1, this.index.length);
            this.index[this.length + this.hidden.size - 1] = Number.MAX_VALUE;
            if (this.hidden.has(index_price)) {
                this.hidden.delete(index_price);
            }
            else {
                this.copyWithin(index, index + 1, this.length);
                this.length--;
            }
        }
    }
}
// ----------------------------------------------------------------------------
// stores vector arrays indexed by id (3rd value in a bidask delta array)
class IndexedOrderBookSide extends Array {
    constructor(deltas = [], depth = Number.MAX_SAFE_INTEGER) {
        super(deltas.length);
        // a string-keyed dictionary of price levels / ids / indices
        Object.defineProperty(this, 'hashmap', {
            __proto__: null,
            value: new Map(),
            writable: true,
        });
        Object.defineProperty(this, 'index', {
            __proto__: null,
            value: new Float64Array(SEED),
            writable: true,
        });
        Object.defineProperty(this, 'depth', {
            __proto__: null,
            value: depth || Number.MAX_SAFE_INTEGER,
            writable: true,
        });
        Object.defineProperty(this, 'hidden', {
            __proto__: null,
            value: new Map(),
            writable: true,
        });
        // sort upon initiation
        for (let i = 0; i < deltas.length; i++) {
            this.length = i;
            this.storeArray(deltas[i].slice()); // slice is muy importante
        }
    }
    store(price, size, id) {
        this.storeArray([price, size, id]);
    }
    storeArray(delta) {
        const price = delta[0];
        const size = delta[1];
        const id = delta[2];
        let index_price;
        if (price !== undefined) {
            index_price = this.side ? -price : price;
        }
        else {
            index_price = undefined;
        }
        if (size) {
            if (this.hashmap.has(id)) {
                const old_price = this.hashmap.get(id);
                index_price = index_price || old_price;
                // in case price is not sent
                delta[0] = Math.abs(index_price);
                if (index_price === old_price) {
                    const index = bisectLeft(this.index, index_price);
                    this.index[index] = index_price;
                    if (index < this.length) {
                        this[index] = delta;
                    }
                    else {
                        this.hidden.set(index_price, delta);
                    }
                    return;
                }
                else {
                    // remove old price from index
                    const old_index = bisectLeft(this.index, old_price);
                    this.index.copyWithin(old_index, old_index + 1, this.index.length);
                    this.index[this.length + this.hidden.size - 1] = Number.MAX_VALUE;
                    if (this.hidden.has(old_price)) {
                        this.hidden.delete(old_price);
                    }
                    else {
                        this.copyWithin(old_index, old_index + 1, this.length);
                        this.length--;
                    }
                }
            }
            // insert new price level
            this.hashmap.set(id, index_price);
            const index = bisectLeft(this.index, index_price);
            // insert new price level into index
            this.length++;
            this.index.copyWithin(index + 1, index, this.index.length);
            this.index[index] = index_price;
            if (index < this.length) {
                this.copyWithin(index + 1, index, this.length);
                this[index] = delta;
            }
            else {
                this.hidden.set(index_price, delta);
                this.length--;
            }
            // in the rare case of very large orderbooks being sent
            if (this.length > this.index.length - 1) {
                const existing = Array.from(this.index);
                existing.length = this.length * 2;
                existing.fill(Number.MAX_VALUE, this.index.length);
                this.index = new Float64Array(existing);
            }
        }
        else if (this.hashmap.has(id)) {
            const old_price = this.hashmap.get(id);
            const index = bisectLeft(this.index, old_price);
            this.index.copyWithin(index, index + 1, this.index.length);
            this.index[this.length - 1] = Number.MAX_VALUE;
            if (this.hidden.has(old_price)) {
                this.hidden.delete(old_price);
            }
            else {
                this.copyWithin(index, index + 1, this.length);
                this.length--;
            }
            this.hashmap.delete(id);
        }
    }
    // replace stored orders with new values
    limit(n = undefined) {
        if (n < this.length) {
            // we store some hidden stuff for when the book is temporarily limited to the user
            for (let i = n; i < this.length; i++) {
                this.hidden.set(this.index[i], this[i]);
            }
            this.length = n;
        }
        if (this.hidden.size) {
            let end = this.length + this.hidden.size;
            if (n !== undefined) {
                end = Math.min(end, n);
            }
            for (let i = this.length; i < end; i++) {
                this.push(this.hidden.get(this.index[i]));
                this.hidden.delete(this.index[i]);
            }
        }
        if (this.length > this.depth) {
            for (let i = this.depth; i < this.length; i++) {
                // diff
                this.hashmap.delete(this.index[i]);
                this.index[i] = Number.MAX_VALUE;
            }
            this.hidden.clear();
            this.length = this.depth;
        }
    }
}
// ----------------------------------------------------------------------------
// a more elegant syntax is possible here, but native inheritance is portable
class Asks extends OrderBookSide {
    get side() { return false; }
}
class Bids extends OrderBookSide {
    get side() { return true; }
}
class CountedAsks extends CountedOrderBookSide {
    get side() { return false; }
}
class CountedBids extends CountedOrderBookSide {
    get side() { return true; }
}
class IndexedAsks extends IndexedOrderBookSide {
    get side() { return false; }
}
class IndexedBids extends IndexedOrderBookSide {
    get side() { return true; }
}

/* eslint-disable max-classes-per-file */
// ----------------------------------------------------------------------------
// overwrites absolute volumes at price levels
class OrderBook {
    constructor(snapshot = {}, depth = undefined) {
        Object.defineProperty(this, 'cache', {
            __proto__: null,
            value: [],
            writable: true,
        });
        depth = depth || Number.MAX_SAFE_INTEGER;
        const defaults = {
            'bids': [],
            'asks': [],
            'timestamp': undefined,
            'datetime': undefined,
            'nonce': undefined,
            'symbol': undefined,
        };
        // merge to this
        const entries = Object.entries(extend$1(defaults, snapshot));
        for (let i = 0; i < entries.length; i++) {
            const [property, value] = entries[i];
            this[property] = value;
        }
        // wrap plain arrays with Bids/Asks classes if necessary
        if (this.asks.constructor.name === 'Array') {
            this.asks = new Asks(this.asks, depth);
        }
        if (this.bids.constructor.name === 'Array') {
            this.bids = new Bids(this.bids, depth);
        }
        if (this.timestamp) {
            this.datetime = iso8601$1(this.timestamp);
        }
    }
    limit(n = undefined) {
        this.asks.limit(n);
        this.bids.limit(n);
        return this;
    }
    update(snapshot) {
        if ((snapshot.nonce !== undefined) &&
            (this.nonce !== undefined) &&
            (snapshot.nonce <= this.nonce)) {
            return this;
        }
        this.nonce = snapshot.nonce;
        this.timestamp = snapshot.timestamp;
        this.datetime = iso8601$1(this.timestamp);
        return this.reset(snapshot);
    }
    reset(snapshot = {}) {
        this.asks.index.fill(Number.MAX_VALUE);
        this.asks.length = 0;
        if (snapshot.asks) {
            for (let i = 0; i < snapshot.asks.length; i++) {
                this.asks.storeArray(snapshot.asks[i]);
            }
        }
        this.bids.index.fill(Number.MAX_VALUE);
        this.bids.length = 0;
        if (snapshot.bids) {
            for (let i = 0; i < snapshot.bids.length; i++) {
                this.bids.storeArray(snapshot.bids[i]);
            }
        }
        this.nonce = snapshot.nonce;
        this.timestamp = snapshot.timestamp;
        this.datetime = iso8601$1(this.timestamp);
        this.symbol = snapshot.symbol;
        return this;
    }
}
// ----------------------------------------------------------------------------
// overwrites absolute volumes at price levels
// or deletes price levels based on order counts (3rd value in a bidask delta)
class CountedOrderBook extends OrderBook {
    constructor(snapshot = {}, depth = undefined) {
        super(extend$1(snapshot, {
            'asks': new CountedAsks(snapshot.asks || [], depth),
            'bids': new CountedBids(snapshot.bids || [], depth),
        }));
    }
}
// ----------------------------------------------------------------------------
// indexed by order ids (3rd value in a bidask delta)
class IndexedOrderBook extends OrderBook {
    constructor(snapshot = {}, depth = undefined) {
        super(extend$1(snapshot, {
            'asks': new IndexedAsks(snapshot.asks || [], depth),
            'bids': new IndexedBids(snapshot.bids || [], depth),
        }));
    }
}

// ----------------------------------------------------------------------------
const { isNode, keys, values, deepExtend, extend, clone, flatten, pluck, unique, indexBy, sortBy, sortBy2, safeFloat2, groupBy, aggregate, uuid, unCamelCase, precisionFromString, throttle, capitalize, now, buildOHLCVC, decimalToPrecision, safeValue, safeValue2, safeString, safeString2, seconds, milliseconds, binaryToBase16, numberToBE, base16ToBinary, stringToBinary, iso8601, omit, isJsonEncodedObject, safeInteger, sum, omitZero, implodeParams, extractParams, json, vwap, merge, binaryConcat, hash, ecdsa, totp, arrayConcat, encode, urlencode, hmac, numberToString, parseTimeframe, safeInteger2, safeStringLower, parse8601, yyyymmdd, safeStringUpper, safeTimestamp, binaryConcatArray, uuidv1, numberToLE, ymdhms, stringToBase64, decode, uuid22, safeIntegerProduct2, safeIntegerProduct, safeStringLower2, yymmdd, base58ToBinary, eddsa, safeTimestamp2, rawencode, keysort, inArray, isEmpty, ordered, jwt, filterBy, uuid16, safeFloat, base64ToBinary, safeStringUpper2, urlencodeWithArrayRepeat, microseconds, binaryToBase64, rsa, strip, toArray, safeFloatN, safeIntegerN, safeIntegerProductN, safeTimestampN, safeValueN, safeStringN, safeStringLowerN, safeStringUpperN, urlencodeNested, parseDate, ymd, isArray, base64ToString, crc32, TRUNCATE, ROUND, DECIMAL_PLACES, NO_PADDING, TICK_SIZE } = functions;
// ----------------------------------------------------------------------------
// move this elsewhere
// ----------------------------------------------------------------------------
class Exchange {
    constructor(userConfig = {}) {
        this.httpAgent = undefined;
        this.httpsAgent = undefined;
        this.agent = undefined;
        this.api = undefined;
        // prepended to URL, like https://proxy.com/https://exchange.com/api...
        this.proxy = '';
        this.origin = '*'; // CORS origin
        this.minFundingAddressLength = 1; // used in checkAddress
        this.substituteCommonCurrencyCodes = true; // reserved
        this.quoteJsonNumbers = true; // treat numbers in json as quoted precise strings
        this.number = Number; // or String (a pointer to a function)
        this.handleContentTypeApplicationZip = false;
        // whether fees should be summed by currency code
        this.reduceFees = true;
        this.validateServerSsl = true;
        this.validateClientSsl = false;
        this.timeout = 10000; // milliseconds
        this.verbose = false;
        this.debug = false;
        this.userAgent = undefined;
        this.twofa = undefined; // two-factor authentication (2FA)
        this.apiKey = undefined;
        this.secret = undefined;
        this.uid = undefined;
        this.login = undefined;
        this.password = undefined;
        this.privateKey = undefined; // a "0x"-prefixed hexstring private key for a wallet
        this.walletAddress = undefined; // a wallet address "0x"-prefixed hexstring
        this.token = undefined; // reserved for HTTP auth in some cases
        this.balance = {};
        this.orderbooks = {};
        this.tickers = {};
        this.orders = undefined;
        this.transactions = {};
        this.positions = {};
        this.urls = {};
        this.requiresWeb3 = false;
        this.requiresEddsa = false;
        this.precision = {};
        this.enableLastJsonResponse = true;
        this.enableLastHttpResponse = true;
        this.enableLastResponseHeaders = true;
        this.last_http_response = undefined;
        this.last_json_response = undefined;
        this.last_response_headers = undefined;
        this.id = undefined;
        this.markets = undefined;
        this.has = {};
        this.status = undefined;
        this.requiredCredentials = undefined;
        this.rateLimit = undefined;
        this.tokenBucket = undefined;
        this.throttle = undefined;
        this.enableRateLimit = undefined;
        this.enableWsRateLimit = undefined;
        this.httpExceptions = undefined;
        this.limits = undefined;
        this.fees = undefined;
        this.markets_by_id = undefined;
        this.symbols = undefined;
        this.ids = undefined;
        this.currencies = undefined;
        this.baseCurrencies = undefined;
        this.quoteCurrencies = undefined;
        this.currencies_by_id = undefined;
        this.codes = undefined;
        this.reloadingMarkets = undefined;
        this.marketsLoading = undefined;
        this.accounts = undefined;
        this.accountsById = undefined;
        this.commonCurrencies = undefined;
        this.hostname = undefined;
        this.precisionMode = undefined;
        this.paddingMode = undefined;
        this.exceptions = {};
        this.timeframes = [];
        this.version = undefined;
        this.marketsByAltname = undefined;
        this.name = undefined;
        this.lastRestRequestTimestamp = undefined;
        this.targetAccount = undefined;
        this.stablePairs = {};
        // WS/PRO options
        this.clients = {};
        this.newUpdates = true;
        this.streaming = {};
        this.deepExtend = deepExtend;
        this.isNode = isNode;
        this.keys = keys;
        this.values = values;
        this.extend = extend;
        this.clone = clone;
        this.flatten = flatten;
        this.pluck = pluck;
        this.unique = unique;
        this.indexBy = indexBy;
        this.sortBy = sortBy;
        this.sortBy2 = sortBy2;
        this.groupBy = groupBy;
        this.aggregate = aggregate;
        this.uuid = uuid;
        this.unCamelCase = unCamelCase;
        this.precisionFromString = precisionFromString;
        this.capitalize = capitalize;
        this.now = now;
        this.buildOHLCVC = buildOHLCVC;
        this.decimalToPrecision = decimalToPrecision;
        this.safeValue = safeValue;
        this.safeValue2 = safeValue2;
        this.safeString = safeString;
        this.safeString2 = safeString2;
        this.safeFloat = safeFloat;
        this.safeFloat2 = safeFloat2;
        this.seconds = seconds;
        this.milliseconds = milliseconds;
        this.binaryToBase16 = binaryToBase16;
        this.numberToBE = numberToBE;
        this.base16ToBinary = base16ToBinary;
        this.stringToBinary = stringToBinary;
        this.iso8601 = iso8601;
        this.omit = omit;
        this.isJsonEncodedObject = isJsonEncodedObject;
        this.safeInteger = safeInteger;
        this.sum = sum;
        this.omitZero = omitZero;
        this.implodeParams = implodeParams;
        this.extractParams = extractParams;
        this.json = json;
        this.vwap = vwap;
        this.merge = merge;
        this.binaryConcat = binaryConcat;
        this.hash = hash;
        this.ecdsa = ecdsa;
        this.totp = totp;
        this.arrayConcat = arrayConcat;
        this.encode = encode;
        this.urlencode = urlencode;
        this.hmac = hmac;
        this.numberToString = numberToString;
        this.parseTimeframe = parseTimeframe;
        this.safeInteger2 = safeInteger2;
        this.safeStringLower = safeStringLower;
        this.parse8601 = parse8601;
        this.yyyymmdd = yyyymmdd;
        this.safeStringUpper = safeStringUpper;
        this.safeTimestamp = safeTimestamp;
        this.binaryConcatArray = binaryConcatArray;
        this.uuidv1 = uuidv1;
        this.numberToLE = numberToLE;
        this.ymdhms = ymdhms;
        this.yymmdd = yymmdd;
        this.stringToBase64 = stringToBase64;
        this.decode = decode;
        this.uuid22 = uuid22;
        this.safeIntegerProduct2 = safeIntegerProduct2;
        this.safeIntegerProduct = safeIntegerProduct;
        this.base58ToBinary = base58ToBinary;
        this.base64ToBinary = base64ToBinary;
        this.eddsa = eddsa;
        this.safeTimestamp2 = safeTimestamp2;
        this.rawencode = rawencode;
        this.keysort = keysort;
        this.inArray = inArray;
        this.safeStringLower2 = safeStringLower2;
        this.safeStringUpper2 = safeStringUpper2;
        this.isEmpty = isEmpty;
        this.ordered = ordered;
        this.jwt = jwt;
        this.filterBy = filterBy;
        this.uuid16 = uuid16;
        this.urlencodeWithArrayRepeat = urlencodeWithArrayRepeat;
        this.microseconds = microseconds;
        this.binaryToBase64 = binaryToBase64;
        this.rsa = rsa;
        this.strip = strip;
        this.toArray = toArray;
        this.safeFloatN = safeFloatN;
        this.safeIntegerN = safeIntegerN;
        this.safeIntegerProductN = safeIntegerProductN;
        this.safeTimestampN = safeTimestampN;
        this.safeValueN = safeValueN;
        this.safeStringN = safeStringN;
        this.safeStringLowerN = safeStringLowerN;
        this.safeStringUpperN = safeStringUpperN;
        this.urlencodeNested = urlencodeNested;
        this.parseDate = parseDate;
        this.ymd = ymd;
        this.isArray = isArray;
        this.base64ToString = base64ToString;
        this.crc32 = crc32;
        this.inflate = inflate;
        this.inflate64 = inflate64;
        this.gunzip = gunzip;
        Object.assign(this, functions);
        //
        //     if (isNode) {
        //         this.nodeVersion = process.version.match (/\d+\.\d+\.\d+/)[0]
        //         this.userAgent = {
        //             'User-Agent': 'ccxt/' + (Exchange as any).ccxtVersion +
        //                 ' (+https://github.com/ccxt/ccxt)' +
        //                 ' Node.js/' + this.nodeVersion + ' (JavaScript)'
        //         }
        //     }
        //
        this.options = this.getDefaultOptions(); // exchange-specific options, if any
        // fetch implementation options (JS only)
        this.fetchOptions = {
        // keepalive: true, // does not work in Chrome, https://github.com/ccxt/ccxt/issues/6368
        };
        // http properties
        this.userAgents = {
            'chrome': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',
            'chrome39': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36',
            'chrome100': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36',
        };
        this.headers = {};
        // prepended to URL, like https://proxy.com/https://exchange.com/api...
        this.proxy = '';
        this.origin = '*'; // CORS origin
        // underlying properties
        this.minFundingAddressLength = 1; // used in checkAddress
        this.substituteCommonCurrencyCodes = true; // reserved
        this.quoteJsonNumbers = true; // treat numbers in json as quoted precise strings
        this.number = Number; // or String (a pointer to a function)
        this.handleContentTypeApplicationZip = false;
        // whether fees should be summed by currency code
        this.reduceFees = true;
        // do not delete this line, it is needed for users to be able to define their own fetchImplementation
        this.fetchImplementation = undefined;
        this.validateServerSsl = true;
        this.validateClientSsl = false;
        // default property values
        this.timeout = 10000; // milliseconds
        this.verbose = false;
        this.debug = false;
        this.userAgent = undefined;
        this.twofa = undefined; // two-factor authentication (2FA)
        // default credentials
        this.apiKey = undefined;
        this.secret = undefined;
        this.uid = undefined;
        this.login = undefined;
        this.password = undefined;
        this.privateKey = undefined; // a "0x"-prefixed hexstring private key for a wallet
        this.walletAddress = undefined; // a wallet address "0x"-prefixed hexstring
        this.token = undefined; // reserved for HTTP auth in some cases
        // placeholders for cached data
        this.balance = {};
        this.orderbooks = {};
        this.tickers = {};
        this.orders = undefined;
        this.trades = {};
        this.transactions = {};
        this.ohlcvs = {};
        this.myTrades = undefined;
        this.positions = {};
        // web3 and cryptography flags
        this.requiresWeb3 = false;
        this.requiresEddsa = false;
        this.precision = {};
        // response handling flags and properties
        this.lastRestRequestTimestamp = 0;
        this.enableLastJsonResponse = true;
        this.enableLastHttpResponse = true;
        this.enableLastResponseHeaders = true;
        this.last_http_response = undefined;
        this.last_json_response = undefined;
        this.last_response_headers = undefined;
        // camelCase and snake_notation support
        const unCamelCaseProperties = (obj = this) => {
            if (obj !== null) {
                const ownPropertyNames = Object.getOwnPropertyNames(obj);
                for (let i = 0; i < ownPropertyNames.length; i++) {
                    const k = ownPropertyNames[i];
                    this[unCamelCase(k)] = this[k];
                }
                unCamelCaseProperties(Object.getPrototypeOf(obj));
            }
        };
        unCamelCaseProperties();
        // merge constructor overrides to this instance
        const configEntries = Object.entries(this.describe()).concat(Object.entries(userConfig));
        for (let i = 0; i < configEntries.length; i++) {
            const [property, value] = configEntries[i];
            if (value && Object.getPrototypeOf(value) === Object.prototype) {
                this[property] = this.deepExtend(this[property], value);
            }
            else {
                this[property] = value;
            }
        }
        // ssl options
        if (!this.validateServerSsl) ;
        // generate old metainfo interface
        const hasKeys = Object.keys(this.has);
        for (let i = 0; i < hasKeys.length; i++) {
            const k = hasKeys[i];
            this['has' + this.capitalize(k)] = !!this.has[k]; // converts 'emulated' to true
        }
        // generate implicit api
        if (this.api) {
            this.defineRestApi(this.api, 'request');
        }
        // init the request rate limiter
        this.initRestRateLimiter();
        // TEALSTREET
        this._loadMarketsPromise = new Promise((resolve, reject) => {
            this._loadMarketsResolve = resolve;
            this._loadMarketsReject = reject;
        });
        // init predefined markets if any
        if (this.markets) {
            this.setMarkets(this.markets);
        }
        this.newUpdates = (this.options.newUpdates !== undefined) ? this.options.newUpdates : true;
    }
    describe() {
        return {
            'id': undefined,
            'name': undefined,
            'countries': undefined,
            'enableRateLimit': true,
            'enableWsRateLimit': true,
            'rateLimit': 2000,
            'certified': false,
            'pro': false,
            'alias': false,
            'has': {
                'publicAPI': true,
                'privateAPI': true,
                'CORS': undefined,
                'spot': undefined,
                'margin': undefined,
                'swap': undefined,
                'future': undefined,
                'option': undefined,
                'addMargin': undefined,
                'cancelAllOrders': undefined,
                'cancelOrder': true,
                'cancelOrders': undefined,
                'createDepositAddress': undefined,
                'createLimitOrder': true,
                'createMarketOrder': true,
                'createOrder': true,
                'createPostOnlyOrder': undefined,
                'createReduceOnlyOrder': undefined,
                'createStopOrder': undefined,
                'createStopLimitOrder': undefined,
                'createStopMarketOrder': undefined,
                'editOrder': 'emulated',
                'fetchAccounts': undefined,
                'fetchBalance': true,
                'fetchBidsAsks': undefined,
                'fetchBorrowInterest': undefined,
                'fetchBorrowRate': undefined,
                'fetchBorrowRateHistory': undefined,
                'fetchBorrowRatesPerSymbol': undefined,
                'fetchBorrowRates': undefined,
                'fetchCanceledOrders': undefined,
                'fetchClosedOrder': undefined,
                'fetchClosedOrders': undefined,
                'fetchCurrencies': 'emulated',
                'fetchDeposit': undefined,
                'fetchDepositAddress': undefined,
                'fetchDepositAddresses': undefined,
                'fetchDepositAddressesByNetwork': undefined,
                'fetchDeposits': undefined,
                'fetchTransactionFee': undefined,
                'fetchTransactionFees': undefined,
                'fetchFundingHistory': undefined,
                'fetchFundingRate': undefined,
                'fetchFundingRateHistory': undefined,
                'fetchFundingRates': undefined,
                'fetchIndexOHLCV': undefined,
                'fetchL2OrderBook': true,
                'fetchLastPrices': undefined,
                'fetchLedger': undefined,
                'fetchLedgerEntry': undefined,
                'fetchLeverageTiers': undefined,
                'fetchMarketLeverageTiers': undefined,
                'fetchMarkets': true,
                'fetchMarkOHLCV': undefined,
                'fetchMyTrades': undefined,
                'fetchOHLCV': 'emulated',
                'fetchOpenInterest': undefined,
                'fetchOpenInterestHistory': undefined,
                'fetchOpenOrder': undefined,
                'fetchOpenOrders': undefined,
                'fetchOrder': undefined,
                'fetchOrderBook': true,
                'fetchOrderBooks': undefined,
                'fetchOrders': undefined,
                'fetchOrderTrades': undefined,
                'fetchPermissions': undefined,
                'fetchPosition': undefined,
                'fetchPositions': undefined,
                'fetchPositionsRisk': undefined,
                'fetchPremiumIndexOHLCV': undefined,
                'fetchStatus': 'emulated',
                'fetchTicker': true,
                'fetchTickers': undefined,
                'fetchTime': undefined,
                'fetchTrades': true,
                'fetchTradingFee': undefined,
                'fetchTradingFees': undefined,
                'fetchTradingLimits': undefined,
                'fetchTransactions': undefined,
                'fetchTransfers': undefined,
                'fetchWithdrawAddresses': undefined,
                'fetchWithdrawal': undefined,
                'fetchWithdrawals': undefined,
                'reduceMargin': undefined,
                'setLeverage': undefined,
                'setMargin': undefined,
                'setMarginMode': undefined,
                'setPositionMode': undefined,
                'signIn': undefined,
                'transfer': undefined,
                'withdraw': undefined,
            },
            'urls': {
                'logo': undefined,
                'api': undefined,
                'www': undefined,
                'doc': undefined,
                'fees': undefined,
            },
            'api': undefined,
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': false,
                'login': false,
                'password': false,
                'twofa': false,
                'privateKey': false,
                'walletAddress': false,
                'token': false, // reserved for HTTP auth in some cases
            },
            'markets': undefined,
            'currencies': {},
            'timeframes': undefined,
            'fees': {
                'trading': {
                    'tierBased': undefined,
                    'percentage': undefined,
                    'taker': undefined,
                    'maker': undefined,
                },
                'funding': {
                    'tierBased': undefined,
                    'percentage': undefined,
                    'withdraw': {},
                    'deposit': {},
                },
            },
            'status': {
                'status': 'ok',
                'updated': undefined,
                'eta': undefined,
                'url': undefined,
            },
            'exceptions': undefined,
            'httpExceptions': {
                '422': ExchangeError,
                '418': DDoSProtection,
                '429': RateLimitExceeded,
                '404': ExchangeNotAvailable,
                '409': ExchangeNotAvailable,
                '410': ExchangeNotAvailable,
                '451': ExchangeNotAvailable,
                '500': ExchangeNotAvailable,
                '501': ExchangeNotAvailable,
                '502': ExchangeNotAvailable,
                '520': ExchangeNotAvailable,
                '521': ExchangeNotAvailable,
                '522': ExchangeNotAvailable,
                '525': ExchangeNotAvailable,
                '526': ExchangeNotAvailable,
                '400': ExchangeNotAvailable,
                '403': ExchangeNotAvailable,
                '405': ExchangeNotAvailable,
                '503': ExchangeNotAvailable,
                '530': ExchangeNotAvailable,
                '408': RequestTimeout,
                '504': RequestTimeout,
                '401': AuthenticationError,
                '407': AuthenticationError,
                '511': AuthenticationError,
            },
            'commonCurrencies': {
                'XBT': 'BTC',
                'BCC': 'BCH',
                'BCHABC': 'BCH',
                'BCHSV': 'BSV',
            },
            'precisionMode': DECIMAL_PLACES,
            'paddingMode': NO_PADDING,
            'limits': {
                'leverage': { 'min': undefined, 'max': undefined },
                'amount': { 'min': undefined, 'max': undefined },
                'price': { 'min': undefined, 'max': undefined },
                'cost': { 'min': undefined, 'max': undefined },
            },
        }; // return
    } // describe ()
    encodeURIComponent(...args) {
        // @ts-expect-error
        return encodeURIComponent(...args);
    }
    checkRequiredVersion(requiredVersion, error = true) {
        let result = true;
        const [major1, minor1, patch1] = requiredVersion.split('.'), [major2, minor2, patch2] = Exchange.ccxtVersion.split('.'), intMajor1 = this.parseToInt(major1), intMinor1 = this.parseToInt(minor1), intPatch1 = this.parseToInt(patch1), intMajor2 = this.parseToInt(major2), intMinor2 = this.parseToInt(minor2), intPatch2 = this.parseToInt(patch2);
        if (intMajor1 > intMajor2) {
            result = false;
        }
        if (intMajor1 === intMajor2) {
            if (intMinor1 > intMinor2) {
                result = false;
            }
            else if (intMinor1 === intMinor2 && intPatch1 > intPatch2) {
                result = false;
            }
        }
        if (!result) {
            if (error) {
                throw new NotSupported('Your current version of CCXT is ' + Exchange.ccxtVersion + ', a newer version ' + requiredVersion + ' is required, please, upgrade your version of CCXT');
            }
            else {
                return error;
            }
        }
        return result;
    }
    checkAddress(address) {
        if (address === undefined) {
            throw new InvalidAddress(this.id + ' address is undefined');
        }
        // check the address is not the same letter like 'aaaaa' nor too short nor has a space
        if ((this.unique(address).length === 1) || address.length < this.minFundingAddressLength || address.includes(' ')) {
            throw new InvalidAddress(this.id + ' address is invalid or has less than ' + this.minFundingAddressLength.toString() + ' characters: "' + this.json(address) + '"');
        }
        return address;
    }
    initRestRateLimiter() {
        if (this.rateLimit === undefined) {
            throw new Error(this.id + '.rateLimit property is not configured');
        }
        this.tokenBucket = this.extend({
            delay: 0.001,
            capacity: 1,
            cost: 1,
            maxCapacity: 1000,
            refillRate: (this.rateLimit > 0) ? 1 / this.rateLimit : Number.MAX_VALUE,
        }, this.tokenBucket);
        this.throttle = throttle(this.tokenBucket);
    }
    setSandboxMode(enabled) {
        if (!!enabled) { // eslint-disable-line no-extra-boolean-cast
            if ('test' in this.urls) {
                if (typeof this.urls['api'] === 'string') {
                    this.urls['apiBackup'] = this.urls['api'];
                    this.urls['api'] = this.urls['test'];
                }
                else {
                    this.urls['apiBackup'] = clone(this.urls['api']);
                    this.urls['api'] = clone(this.urls['test']);
                }
            }
            else {
                throw new NotSupported(this.id + ' does not have a sandbox URL');
            }
        }
        else if ('apiBackup' in this.urls) {
            if (typeof this.urls['api'] === 'string') {
                this.urls['api'] = this.urls['apiBackup'];
            }
            else {
                this.urls['api'] = clone(this.urls['apiBackup']);
            }
        }
    }
    defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths, config = {}) {
        const splitPath = path.split(/[^a-zA-Z0-9]/);
        const camelcaseSuffix = splitPath.map(this.capitalize).join('');
        const underscoreSuffix = splitPath.map((x) => x.trim().toLowerCase()).filter((x) => x.length > 0).join('_');
        const camelcasePrefix = [paths[0]].concat(paths.slice(1).map(this.capitalize)).join('');
        const underscorePrefix = [paths[0]].concat(paths.slice(1).map((x) => x.trim()).filter((x) => x.length > 0)).join('_');
        const camelcase = camelcasePrefix + camelcaseMethod + this.capitalize(camelcaseSuffix);
        const underscore = underscorePrefix + '_' + lowercaseMethod + '_' + underscoreSuffix;
        const typeArgument = (paths.length > 1) ? paths : paths[0];
        // handle call costs here
        const partial = async (params = {}, context = {}) => this[methodName](path, typeArgument, uppercaseMethod, params, undefined, undefined, config, context);
        // const partial = async (params) => this[methodName] (path, typeArgument, uppercaseMethod, params || {})
        this[camelcase] = partial;
        this[underscore] = partial;
    }
    defineRestApi(api, methodName, paths = []) {
        const keys = Object.keys(api);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = api[key];
            const uppercaseMethod = key.toUpperCase();
            const lowercaseMethod = key.toLowerCase();
            const camelcaseMethod = this.capitalize(lowercaseMethod);
            if (Array.isArray(value)) {
                for (let k = 0; k < value.length; k++) {
                    const path = value[k].trim();
                    this.defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths);
                }
                // the options HTTP method conflicts with the 'options' API url path
                // } else if (key.match (/^(?:get|post|put|delete|options|head|patch)$/i)) {
            }
            else if (key.match(/^(?:get|post|put|delete|head|patch)$/i)) {
                const endpoints = Object.keys(value);
                for (let j = 0; j < endpoints.length; j++) {
                    const endpoint = endpoints[j];
                    const path = endpoint.trim();
                    const config = value[endpoint];
                    if (typeof config === 'object') {
                        this.defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths, config);
                    }
                    else if (typeof config === 'number') {
                        this.defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths, { cost: config });
                    }
                    else {
                        throw new NotSupported(this.id + ' defineRestApi() API format is not supported, API leafs must strings, objects or numbers');
                    }
                }
            }
            else {
                this.defineRestApi(value, methodName, paths.concat([key]));
            }
        }
    }
    log(...args) {
        console.log(...args);
    }
    async fetch(url, method = 'GET', headers = undefined, body = undefined) {
        if (isNode && this.userAgent) {
            if (typeof this.userAgent === 'string') {
                headers = this.extend({ 'User-Agent': this.userAgent }, headers);
            }
            else if ((typeof this.userAgent === 'object') && ('User-Agent' in this.userAgent)) {
                headers = this.extend(this.userAgent, headers);
            }
        }
        if (typeof this.proxy === 'function') {
            url = this.proxy(url);
            if (isNode) {
                headers = this.extend({ 'Origin': this.origin }, headers);
            }
        }
        else if (typeof this.proxy === 'string') {
            if (this.proxy.length && isNode) {
                headers = this.extend({ 'Origin': this.origin }, headers);
            }
            url = this.proxy + url;
        }
        headers = this.extend(this.headers, headers);
        headers = this.setHeaders(headers);
        if (this.verbose) {
            this.log("fetch Request:\n", this.id, method, url, "\nRequestHeaders:\n", headers, "\nRequestBody:\n", body, "\n");
        }
        if (this.fetchImplementation === undefined) {
            if (isNode) {
                const module = await Promise.resolve().then(function () { return index; });
                this.AbortError = module.AbortError;
                this.fetchImplementation = module.default;
                this.FetchError = module.FetchError;
            }
            else {
                this.fetchImplementation = self.fetch;
                this.AbortError = DOMException;
                this.FetchError = TypeError;
            }
        }
        // fetchImplementation cannot be called on this. in browsers:
        // TypeError Failed to execute 'fetch' on 'Window': Illegal invocation
        const fetchImplementation = this.fetchImplementation;
        const params = { method, headers, body, timeout: this.timeout };
        if (this.agent) {
            params['agent'] = this.agent;
        }
        else if (this.httpAgent && url.indexOf('http://') === 0) {
            params['agent'] = this.httpAgent;
        }
        else if (this.httpsAgent && url.indexOf('https://') === 0) {
            params['agent'] = this.httpsAgent;
        }
        const controller = new AbortController();
        params['signal'] = controller.signal;
        const timeout = setTimeout(() => {
            controller.abort();
        }, this.timeout);
        try {
            const response = await fetchImplementation(url, this.extend(params, this.fetchOptions));
            clearTimeout(timeout);
            return this.handleRestResponse(response, url, method, headers, body);
        }
        catch (e) {
            if (e instanceof this.AbortError) {
                throw new RequestTimeout(this.id + ' ' + method + ' ' + url + ' request timed out (' + this.timeout + ' ms)');
            }
            else if (e instanceof this.FetchError) {
                throw new NetworkError(this.id + ' ' + method + ' ' + url + ' fetch failed');
            }
            throw e;
        }
    }
    parseJson(jsonString) {
        try {
            if (this.isJsonEncodedObject(jsonString)) {
                return JSON.parse(this.onJsonResponse(jsonString));
            }
        }
        catch (e) {
            // SyntaxError
            return undefined;
        }
    }
    getResponseHeaders(response) {
        const result = {};
        response.headers.forEach((value, key) => {
            key = key.split('-').map((word) => this.capitalize(word)).join('-');
            result[key] = value;
        });
        return result;
    }
    handleRestResponse(response, url, method = 'GET', requestHeaders = undefined, requestBody = undefined) {
        const responseHeaders = this.getResponseHeaders(response);
        if (this.handleContentTypeApplicationZip && (responseHeaders['Content-Type'] === 'application/zip')) {
            const responseBuffer = response.buffer();
            if (this.enableLastResponseHeaders) {
                this.last_response_headers = responseHeaders;
            }
            if (this.enableLastHttpResponse) {
                this.last_http_response = responseBuffer;
            }
            if (this.verbose) {
                this.log("handleRestResponse:\n", this.id, method, url, response.status, response.statusText, "\nResponseHeaders:\n", responseHeaders, "ZIP redacted", "\n");
            }
            // no error handler needed, because it would not be a zip response in case of an error
            return responseBuffer;
        }
        return response.text().then((responseBody) => {
            const bodyText = this.onRestResponse(response.status, response.statusText, url, method, responseHeaders, responseBody, requestHeaders, requestBody);
            const json = this.parseJson(bodyText);
            if (this.enableLastResponseHeaders) {
                this.last_response_headers = responseHeaders;
            }
            if (this.enableLastHttpResponse) {
                this.last_http_response = responseBody;
            }
            if (this.enableLastJsonResponse) {
                this.last_json_response = json;
            }
            if (this.verbose) {
                this.log("handleRestResponse:\n", this.id, method, url, response.status, response.statusText, "\nResponseHeaders:\n", responseHeaders, "\nResponseBody:\n", responseBody, "\n");
            }
            const skipFurtherErrorHandling = this.handleErrors(response.status, response.statusText, url, method, responseHeaders, responseBody, json, requestHeaders, requestBody);
            if (!skipFurtherErrorHandling) {
                this.handleHttpStatusCode(response.status, response.statusText, url, method, responseBody);
            }
            return json || responseBody;
        });
    }
    onRestResponse(statusCode, statusText, url, method, responseHeaders, responseBody, requestHeaders, requestBody) {
        return responseBody.trim();
    }
    onJsonResponse(responseBody) {
        return this.quoteJsonNumbers ? responseBody.replace(/":([+.0-9eE-]+)([,}])/g, '":"$1"$2') : responseBody;
    }
    // TEALSTREET
    setMarketsAndResolve(markets, currencies = undefined) {
        this.setMarkets(markets, currencies);
        this._loadMarketsResolve && this._loadMarketsResolve(this.markets);
        return this.markets;
    }
    async loadMarketsHelper(reload = false, params = {}) {
        if (!reload && this.markets) {
            if (!this.markets_by_id) {
                return this.setMarketsAndResolve(this.markets);
            }
            return this.markets;
        }
        let currencies = undefined;
        // only call if exchange API provides endpoint (true), thus avoid emulated versions ('emulated')
        if (this.has['fetchCurrencies'] === true) {
            currencies = await this.fetchCurrencies();
        }
        const markets = await this.fetchMarkets(params);
        return this.setMarketsAndResolve(markets, currencies);
    }
    loadMarkets(reload = false, params = {}) {
        // this method is async, it returns a promise
        if ((reload && !this.reloadingMarkets) || !this.marketsLoading) {
            this.reloadingMarkets = true;
            this.marketsLoading = this.loadMarketsHelper(reload, params).then((resolved) => {
                this.reloadingMarkets = false;
                return resolved;
            }, (error) => {
                this.reloadingMarkets = false;
                throw error;
            });
        }
        return this._loadMarketsPromise;
    }
    fetchCurrencies(params = {}) {
        // markets are returned as a list
        // currencies are returned as a dict
        // this is for historical reasons
        // and may be changed for consistency later
        return new Promise((resolve, reject) => resolve(this.currencies));
    }
    fetchMarkets(params = {}) {
        // markets are returned as a list
        // currencies are returned as a dict
        // this is for historical reasons
        // and may be changed for consistency later
        return new Promise((resolve, reject) => resolve(Object.values(this.markets)));
    }
    filterBySinceLimit(array, since = undefined, limit = undefined, key = 'timestamp', tail = false) {
        const sinceIsDefined = (since !== undefined && since !== null);
        if (sinceIsDefined) {
            array = array.filter((entry) => entry[key] >= since);
        }
        if (limit !== undefined && limit !== null) {
            array = tail ? array.slice(-limit) : array.slice(0, limit);
        }
        return array;
    }
    filterByValueSinceLimit(array, field, value = undefined, since = undefined, limit = undefined, key = 'timestamp', tail = false) {
        const valueIsDefined = value !== undefined && value !== null;
        const sinceIsDefined = since !== undefined && since !== null;
        // single-pass filter for both symbol and since
        if (valueIsDefined || sinceIsDefined) {
            array = array.filter((entry) => ((valueIsDefined ? (entry[field] === value) : true) &&
                (sinceIsDefined ? (entry[key] >= since) : true)));
        }
        if (limit !== undefined && limit !== null) {
            array = tail ? array.slice(-limit) : array.slice(0, limit);
        }
        return array;
    }
    checkRequiredDependencies() {
        return;
    }
    remove0xPrefix(hexData) {
        if (hexData.slice(0, 2) === '0x') {
            return hexData.slice(2);
        }
        else {
            return hexData;
        }
    }
    hashMessage(message) {
        // takes a hex encoded message
        const binaryMessage = this.base16ToBinary(this.remove0xPrefix(message));
        const prefix = this.stringToBinary('\x19Ethereum Signed Message:\n' + binaryMessage.sigBytes);
        return '0x' + this.hash(this.binaryConcat(prefix, binaryMessage), 'keccak', 'hex');
    }
    signHash(hash, privateKey) {
        const signature = this.ecdsa(hash.slice(-64), privateKey.slice(-64), 'secp256k1', undefined);
        return {
            'r': '0x' + signature['r'],
            's': '0x' + signature['s'],
            'v': 27 + signature['v'],
        };
    }
    signMessage(message, privateKey) {
        return this.signHash(this.hashMessage(message), privateKey.slice(-64));
    }
    signMessageString(message, privateKey) {
        // still takes the input as a hex string
        // same as above but returns a string instead of an object
        const signature = this.signMessage(message, privateKey);
        return signature['r'] + this.remove0xPrefix(signature['s']) + this.binaryToBase16(this.numberToBE(signature['v']));
    }
    parseNumber(value, d = undefined) {
        if (value === undefined) {
            return d;
        }
        else {
            try {
                return this.number(value);
            }
            catch (e) {
                return d;
            }
        }
    }
    checkOrderArguments(market, type, side, amount, price, params) {
        if (price === undefined) {
            if (type === 'limit') {
                throw new ArgumentsRequired(this.id + ' createOrder() requires a price argument for a limit order');
            }
        }
        if (amount <= 0) {
            throw new ArgumentsRequired(this.id + ' createOrder() amount should be above 0');
        }
    }
    handleHttpStatusCode(code, reason, url, method, body) {
        const codeAsString = code.toString();
        if (codeAsString in this.httpExceptions) {
            const ErrorClass = this.httpExceptions[codeAsString];
            throw new ErrorClass(this.id + ' ' + method + ' ' + url + ' ' + codeAsString + ' ' + reason + ' ' + body);
        }
    }
    // method to override
    findTimeframe(timeframe, timeframes = undefined) {
        timeframes = timeframes || this.timeframes;
        const keys = Object.keys(timeframes);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (timeframes[key] === timeframe) {
                return key;
            }
        }
        return undefined;
    }
    formatScientificNotationFTX(n) {
        if (n === 0) {
            return '0e-00';
        }
        return n.toExponential().replace('e-', 'e-0');
    }
    spawn(method, ...args) {
        const future = Future();
        method.apply(this, args).then(future.resolve).catch(future.reject);
        return future;
    }
    delay(timeout, method, ...args) {
        setTimeout(() => {
            this.spawn(method, ...args);
        }, timeout);
    }
    // -----------------------------------------------------------------------
    // -----------------------------------------------------------------------
    // WS/PRO methods
    orderBook(snapshot = {}, depth = Number.MAX_SAFE_INTEGER) {
        return new OrderBook(snapshot, depth);
    }
    indexedOrderBook(snapshot = {}, depth = Number.MAX_SAFE_INTEGER) {
        return new IndexedOrderBook(snapshot, depth);
    }
    countedOrderBook(snapshot = {}, depth = Number.MAX_SAFE_INTEGER) {
        return new CountedOrderBook(snapshot, depth);
    }
    handleMessage(client, message) { } // stub to override
    // ping (client) {} // stub to override
    client(url) {
        this.clients = this.clients || {};
        if (!this.clients[url]) {
            const onMessage = this.handleMessage.bind(this);
            const onError = this.onError.bind(this);
            const onClose = this.onClose.bind(this);
            const onConnected = this.onConnected.bind(this);
            // decide client type here: ws / signalr / socketio
            const wsOptions = this.safeValue(this.options, 'ws', {});
            const options = this.deepExtend(this.streaming, {
                'log': this.log ? this.log.bind(this) : this.log,
                'ping': this.ping ? this.ping.bind(this) : this.ping,
                'verbose': this.verbose,
                'throttle': throttle(this.tokenBucket),
                // add support for proxies
                'options': {
                    'agent': this.agent || this.httpsAgent || this.httpAgent,
                }
            }, wsOptions);
            this.clients[url] = new WsClient(url, onMessage, onError, onClose, onConnected, options);
        }
        return this.clients[url];
    }
    watch(url, messageHash, message = undefined, subscribeHash = undefined, subscription = undefined, shouldThrottle = true) {
        //
        // Without comments the code of this method is short and easy:
        //
        //     const client = this.client (url)
        //     const backoffDelay = 0
        //     const future = client.future (messageHash)
        //     const connected = client.connect (backoffDelay)
        //     connected.then (() => {
        //         if (message && !client.subscriptions[subscribeHash]) {
        //             client.subscriptions[subscribeHash] = true
        //             client.send (message)
        //         }
        //     }).catch ((error) => {})
        //     return future
        //
        // The following is a longer version of this method with comments
        //
        const client = this.client(url);
        // todo: calculate the backoff using the clients cache
        const backoffDelay = 0;
        //
        //  watchOrderBook ---- future ----+---------------+----→ user
        //                                 |               |
        //                                 ↓               ↑
        //                                 |               |
        //                              connect ......→ resolve
        //                                 |               |
        //                                 ↓               ↑
        //                                 |               |
        //                             subscribe -----→ receive
        //
        const future = client.future(messageHash);
        // we intentionally do not use await here to avoid unhandled exceptions
        // the policy is to make sure that 100% of promises are resolved or rejected
        // either with a call to client.resolve or client.reject with
        //  a proper exception class instance
        const connected = client.connect(backoffDelay);
        // the following is executed only if the catch-clause does not
        // catch any connection-level exceptions from the client
        // (connection established successfully)
        connected.then(() => {
            if (!client.subscriptions[subscribeHash]) {
                client.subscriptions[subscribeHash] = subscription || true;
                const options = this.safeValue(this.options, 'ws');
                const cost = this.safeValue(options, 'cost', 1);
                if (message) {
                    if (this.enableWsRateLimit && client.throttle) {
                        // add cost here |
                        //               |
                        //               V
                        client.throttle(cost, shouldThrottle).then(() => {
                            client.send(message);
                        }).catch((e) => { throw e; });
                    }
                    else {
                        client.send(message);
                    }
                }
            }
        });
        return future;
    }
    onConnected(client, message = undefined) {
        // for user hooks
        // console.log ('Connected to', client.url)
    }
    onError(client, error) {
        if (client.url in this.clients && this.clients[client.url].error) {
            if (!this.safeValue(this.clients[client.url].connection, 'willReconnect', false)) {
                delete this.clients[client.url];
            }
            else {
                this.clients[client.url].subscriptions = {};
            }
        }
    }
    onClose(client, error) {
        if (client.error) ;
        else {
            // server disconnected a working connection
            if (this.clients[client.url]) {
                if (!this.safeValue(this.clients[client.url].connection, 'willReconnect', false)) {
                    delete this.clients[client.url];
                }
                else {
                    this.clients[client.url].subscriptions = {};
                }
            }
        }
    }
    async close() {
        const clients = Object.values(this.clients || {});
        for (let i = 0; i < clients.length; i++) {
            const client = clients[i];
            client.subscriptions = {};
            delete this.clients[client.url];
            await client.close();
        }
    }
    reconnect() {
        const clients = Object.values(this.clients || {});
        for (let i = 0; i < clients.length; i++) {
            const client = clients[i];
            if (client.connection) {
                if (this.safeValue(client.connection, 'willReconnect', false)) {
                    // @ts-ignore
                    client.connection.reconnect();
                }
                else {
                    throw new ExchangeError(this.id + ' reconnect() client is not reconnecting client: ' + client);
                }
            }
        }
    }
    handleDelta(bookside, delta, nonce = undefined) {
        //stub
    }
    async loadOrderBook(client, messageHash, symbol, limit = undefined, params = {}) {
        if (!(symbol in this.orderbooks)) {
            client.reject(new ExchangeError(this.id + ' loadOrderBook() orderbook is not initiated'), messageHash);
            return;
        }
        const maxRetries = this.handleOption('watchOrderBook', 'maxRetries', 3);
        let tries = 0;
        try {
            const stored = this.orderbooks[symbol];
            while (tries < maxRetries) {
                const cache = stored.cache;
                const orderBook = await this.fetchOrderBook(symbol, limit, params);
                const index = this.getCacheIndex(orderBook, cache);
                if (index >= 0) {
                    stored.reset(orderBook);
                    this.handleDeltas(stored, cache.slice(index));
                    stored.cache.length = 0;
                    client.resolve(stored, messageHash);
                    return;
                }
                tries++;
            }
            client.reject(new ExchangeError(this.id + ' nonce is behind the cache after ' + maxRetries.toString() + ' tries.'), messageHash);
            delete this.clients[client.url];
        }
        catch (e) {
            client.reject(e, messageHash);
            await this.loadOrderBook(client, messageHash, symbol, limit, params);
        }
    }
    handleDeltas(orderbook, deltas, nonce = undefined) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(orderbook, deltas[i]);
        }
    }
    // eslint-disable-next-line no-unused-vars
    getCacheIndex(orderbook, deltas) {
        // return the first index of the cache that can be applied to the orderbook or -1 if not possible
        return -1;
    }
    /* eslint-enable */
    // ------------------------------------------------------------------------
    // ########################################################################
    // ########################################################################
    // ########################################################################
    // ########################################################################
    // ########                        ########                        ########
    // ########                        ########                        ########
    // ########                        ########                        ########
    // ########                        ########                        ########
    // ########        ########################        ########################
    // ########        ########################        ########################
    // ########        ########################        ########################
    // ########        ########################        ########################
    // ########                        ########                        ########
    // ########                        ########                        ########
    // ########                        ########                        ########
    // ########                        ########                        ########
    // ########################################################################
    // ########################################################################
    // ########################################################################
    // ########################################################################
    // ########        ########        ########                        ########
    // ########        ########        ########                        ########
    // ########        ########        ########                        ########
    // ########        ########        ########                        ########
    // ################        ########################        ################
    // ################        ########################        ################
    // ################        ########################        ################
    // ################        ########################        ################
    // ########        ########        ################        ################
    // ########        ########        ################        ################
    // ########        ########        ################        ################
    // ########        ########        ################        ################
    // ########################################################################
    // ########################################################################
    // ########################################################################
    // ########################################################################
    // ------------------------------------------------------------------------
    // METHODS BELOW THIS LINE ARE TRANSPILED FROM JAVASCRIPT TO PYTHON AND PHP
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        return {};
    }
    async fetchAccounts(params = {}) {
        return undefined;
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        return undefined;
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        return undefined;
    }
    async fetchDepositAddresses(codes = undefined, params = {}) {
        return undefined;
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        return undefined;
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        return undefined;
    }
    async fetchTime(params = {}) {
        return undefined;
    }
    async fetchTradingLimits(symbols = undefined, params = {}) {
        return undefined;
    }
    parseTicker(ticker, market = undefined) {
        return undefined;
    }
    parseDepositAddress(depositAddress, currency = undefined) {
        return undefined;
    }
    parseTrade(trade, market = undefined) {
        return undefined;
    }
    parseTransaction(transaction, currency = undefined) {
        return undefined;
    }
    parseTransfer(transfer, currency = undefined) {
        return undefined;
    }
    parseAccount(account) {
        return undefined;
    }
    parseLedgerEntry(item, currency = undefined) {
        return undefined;
    }
    parseOrder(order, market = undefined) {
        return undefined;
    }
    async fetchBorrowRates(params = {}) {
        return undefined;
    }
    parseMarketLeverageTiers(info, market = undefined) {
        return undefined;
    }
    async fetchLeverageTiers(symbols = undefined, params = {}) {
        return undefined;
    }
    parsePosition(position, market = undefined) {
        return undefined;
    }
    parseFundingRateHistory(info, market = undefined) {
        return undefined;
    }
    parseBorrowInterest(info, market = undefined) {
        return undefined;
    }
    async fetchFundingRates(symbols = undefined, params = {}) {
        return undefined;
    }
    async transfer(code, amount, fromAccount, toAccount, params = {}) {
        return undefined;
    }
    async withdraw(code, amount, address, tag = undefined, params = {}) {
        return undefined;
    }
    async createDepositAddress(code, params = {}) {
        return undefined;
    }
    parseToInt(number) {
        // Solve Common parseInt misuse ex: parseInt ((since / 1000).toString ())
        // using a number as parameter which is not valid in ts
        const stringifiedNumber = number.toString();
        const convertedNumber = parseFloat(stringifiedNumber);
        return parseInt(convertedNumber);
    }
    getDefaultOptions() {
        return {
            'defaultNetworkCodeReplacements': {
                'ETH': { 'ERC20': 'ETH' },
                'TRX': { 'TRC20': 'TRX' },
                'CRO': { 'CRC20': 'CRONOS' },
            },
        };
    }
    safeLedgerEntry(entry, currency = undefined) {
        currency = this.safeCurrency(undefined, currency);
        let direction = this.safeString(entry, 'direction');
        let before = this.safeString(entry, 'before');
        let after = this.safeString(entry, 'after');
        const amount = this.safeString(entry, 'amount');
        if (amount !== undefined) {
            if (before === undefined && after !== undefined) {
                before = Precise.stringSub(after, amount);
            }
            else if (before !== undefined && after === undefined) {
                after = Precise.stringAdd(before, amount);
            }
        }
        if (before !== undefined && after !== undefined) {
            if (direction === undefined) {
                if (Precise.stringGt(before, after)) {
                    direction = 'out';
                }
                if (Precise.stringGt(after, before)) {
                    direction = 'in';
                }
            }
        }
        const fee = this.safeValue(entry, 'fee');
        if (fee !== undefined) {
            fee['cost'] = this.safeNumber(fee, 'cost');
        }
        const timestamp = this.safeInteger(entry, 'timestamp');
        return {
            'id': this.safeString(entry, 'id'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'direction': direction,
            'account': this.safeString(entry, 'account'),
            'referenceId': this.safeString(entry, 'referenceId'),
            'referenceAccount': this.safeString(entry, 'referenceAccount'),
            'type': this.safeString(entry, 'type'),
            'currency': currency['code'],
            'amount': this.parseNumber(amount),
            'before': this.parseNumber(before),
            'after': this.parseNumber(after),
            'status': this.safeString(entry, 'status'),
            'fee': fee,
            'info': entry,
        };
    }
    setMarkets(markets, currencies = undefined) {
        const values = [];
        this.markets_by_id = {};
        // handle marketId conflicts
        // we insert spot markets first
        const marketValues = this.sortBy(this.toArray(markets), 'spot', true);
        for (let i = 0; i < marketValues.length; i++) {
            const value = marketValues[i];
            if (value['id'] in this.markets_by_id) {
                this.markets_by_id[value['id']].push(value);
            }
            else {
                this.markets_by_id[value['id']] = [value];
            }
            const market = this.deepExtend(this.safeMarket(), {
                'precision': this.precision,
                'limits': this.limits,
            }, this.fees['trading'], value);
            values.push(market);
        }
        this.markets = this.indexBy(values, 'symbol');
        const marketsSortedBySymbol = this.keysort(this.markets);
        const marketsSortedById = this.keysort(this.markets_by_id);
        this.symbols = Object.keys(marketsSortedBySymbol);
        this.ids = Object.keys(marketsSortedById);
        if (currencies !== undefined) {
            this.currencies = this.deepExtend(this.currencies, currencies);
        }
        else {
            let baseCurrencies = [];
            let quoteCurrencies = [];
            for (let i = 0; i < values.length; i++) {
                const market = values[i];
                const defaultCurrencyPrecision = (this.precisionMode === DECIMAL_PLACES) ? 8 : this.parseNumber('1e-8');
                const marketPrecision = this.safeValue(market, 'precision', {});
                if ('base' in market) {
                    const currencyPrecision = this.safeValue2(marketPrecision, 'base', 'amount', defaultCurrencyPrecision);
                    const currency = {
                        'id': this.safeString2(market, 'baseId', 'base'),
                        'numericId': this.safeString(market, 'baseNumericId'),
                        'code': this.safeString(market, 'base'),
                        'precision': currencyPrecision,
                    };
                    baseCurrencies.push(currency);
                }
                if ('quote' in market) {
                    const currencyPrecision = this.safeValue2(marketPrecision, 'quote', 'price', defaultCurrencyPrecision);
                    const currency = {
                        'id': this.safeString2(market, 'quoteId', 'quote'),
                        'numericId': this.safeString(market, 'quoteNumericId'),
                        'code': this.safeString(market, 'quote'),
                        'precision': currencyPrecision,
                    };
                    quoteCurrencies.push(currency);
                }
            }
            baseCurrencies = this.sortBy(baseCurrencies, 'code');
            quoteCurrencies = this.sortBy(quoteCurrencies, 'code');
            this.baseCurrencies = this.indexBy(baseCurrencies, 'code');
            this.quoteCurrencies = this.indexBy(quoteCurrencies, 'code');
            const allCurrencies = this.arrayConcat(baseCurrencies, quoteCurrencies);
            const groupedCurrencies = this.groupBy(allCurrencies, 'code');
            const codes = Object.keys(groupedCurrencies);
            const resultingCurrencies = [];
            for (let i = 0; i < codes.length; i++) {
                const code = codes[i];
                const groupedCurrenciesCode = this.safeValue(groupedCurrencies, code, []);
                let highestPrecisionCurrency = this.safeValue(groupedCurrenciesCode, 0);
                for (let j = 1; j < groupedCurrenciesCode.length; j++) {
                    const currentCurrency = groupedCurrenciesCode[j];
                    if (this.precisionMode === TICK_SIZE) {
                        highestPrecisionCurrency = (currentCurrency['precision'] < highestPrecisionCurrency['precision']) ? currentCurrency : highestPrecisionCurrency;
                    }
                    else {
                        highestPrecisionCurrency = (currentCurrency['precision'] > highestPrecisionCurrency['precision']) ? currentCurrency : highestPrecisionCurrency;
                    }
                }
                resultingCurrencies.push(highestPrecisionCurrency);
            }
            const sortedCurrencies = this.sortBy(resultingCurrencies, 'code');
            this.currencies = this.deepExtend(this.currencies, this.indexBy(sortedCurrencies, 'code'));
        }
        this.currencies_by_id = this.indexBy(this.currencies, 'id');
        const currenciesSortedByCode = this.keysort(this.currencies);
        this.codes = Object.keys(currenciesSortedByCode);
        // TEALSTREET
        const markets_by_id_no_spot = {};
        const market_symbols = Object.keys(this.markets_by_id);
        for (let i = 0; i < market_symbols.length; i++) {
            for (let j = 0; j < this.markets_by_id[market_symbols[i]].length; j++) {
                if (this.markets_by_id[market_symbols[i]][j]['type'] !== 'spot') {
                    if (market_symbols[i] in markets_by_id_no_spot) {
                        markets_by_id_no_spot[market_symbols[i]].push(this.markets_by_id[market_symbols[i]][j]);
                    }
                    else {
                        markets_by_id_no_spot[market_symbols[i]] = [this.markets_by_id[market_symbols[i]][j]];
                    }
                }
            }
        }
        this.markets_by_id = markets_by_id_no_spot;
        // TEALSTREET
        return this.markets;
    }
    safeBalance(balance) {
        const balances = this.omit(balance, ['info', 'timestamp', 'datetime', 'free', 'used', 'total']);
        const codes = Object.keys(balances);
        balance['free'] = {};
        balance['used'] = {};
        balance['total'] = {};
        const debtBalance = {};
        for (let i = 0; i < codes.length; i++) {
            const code = codes[i];
            let total = this.safeString(balance[code], 'total');
            let free = this.safeString(balance[code], 'free');
            let used = this.safeString(balance[code], 'used');
            const debt = this.safeString(balance[code], 'debt');
            if ((total === undefined) && (free !== undefined) && (used !== undefined)) {
                total = Precise.stringAdd(free, used);
            }
            if ((free === undefined) && (total !== undefined) && (used !== undefined)) {
                free = Precise.stringSub(total, used);
            }
            if ((used === undefined) && (total !== undefined) && (free !== undefined)) {
                used = Precise.stringSub(total, free);
            }
            balance[code]['free'] = this.parseNumber(free);
            balance[code]['used'] = this.parseNumber(used);
            balance[code]['total'] = this.parseNumber(total);
            balance['free'][code] = balance[code]['free'];
            balance['used'][code] = balance[code]['used'];
            balance['total'][code] = balance[code]['total'];
            if (debt !== undefined) {
                balance[code]['debt'] = this.parseNumber(debt);
                debtBalance[code] = balance[code]['debt'];
            }
        }
        const debtBalanceArray = Object.keys(debtBalance);
        const length = debtBalanceArray.length;
        if (length) {
            balance['debt'] = debtBalance;
        }
        return balance;
    }
    safeOrder(order, market = undefined) {
        // parses numbers as strings
        // * it is important pass the trades as unparsed rawTrades
        let amount = this.omitZero(this.safeString(order, 'amount'));
        let remaining = this.safeString(order, 'remaining');
        let filled = this.safeString(order, 'filled');
        let cost = this.safeString(order, 'cost');
        let average = this.omitZero(this.safeString(order, 'average'));
        let price = this.omitZero(this.safeString(order, 'price'));
        let lastTradeTimeTimestamp = this.safeInteger(order, 'lastTradeTimestamp');
        let symbol = this.safeString(order, 'symbol');
        let side = this.safeString(order, 'side');
        const parseFilled = (filled === undefined);
        const parseCost = (cost === undefined);
        const parseLastTradeTimeTimestamp = (lastTradeTimeTimestamp === undefined);
        const fee = this.safeValue(order, 'fee');
        const parseFee = (fee === undefined);
        const parseFees = this.safeValue(order, 'fees') === undefined;
        const parseSymbol = symbol === undefined;
        const parseSide = side === undefined;
        const shouldParseFees = parseFee || parseFees;
        const fees = this.safeValue(order, 'fees', []);
        let trades = [];
        if (parseFilled || parseCost || shouldParseFees) {
            const rawTrades = this.safeValue(order, 'trades', trades);
            const oldNumber = this.number;
            // we parse trades as strings here!
            this.number = String;
            trades = this.parseTrades(rawTrades, market);
            this.number = oldNumber;
            let tradesLength = 0;
            const isArray = Array.isArray(trades);
            if (isArray) {
                tradesLength = trades.length;
            }
            if (isArray && (tradesLength > 0)) {
                // move properties that are defined in trades up into the order
                if (order['symbol'] === undefined) {
                    order['symbol'] = trades[0]['symbol'];
                }
                if (order['side'] === undefined) {
                    order['side'] = trades[0]['side'];
                }
                if (order['type'] === undefined) {
                    order['type'] = trades[0]['type'];
                }
                if (order['id'] === undefined) {
                    order['id'] = trades[0]['order'];
                }
                if (parseFilled) {
                    filled = '0';
                }
                if (parseCost) {
                    cost = '0';
                }
                for (let i = 0; i < trades.length; i++) {
                    const trade = trades[i];
                    const tradeAmount = this.safeString(trade, 'amount');
                    if (parseFilled && (tradeAmount !== undefined)) {
                        filled = Precise.stringAdd(filled, tradeAmount);
                    }
                    const tradeCost = this.safeString(trade, 'cost');
                    if (parseCost && (tradeCost !== undefined)) {
                        cost = Precise.stringAdd(cost, tradeCost);
                    }
                    if (parseSymbol) {
                        symbol = this.safeString(trade, 'symbol');
                    }
                    if (parseSide) {
                        side = this.safeString(trade, 'side');
                    }
                    const tradeTimestamp = this.safeValue(trade, 'timestamp');
                    if (parseLastTradeTimeTimestamp && (tradeTimestamp !== undefined)) {
                        if (lastTradeTimeTimestamp === undefined) {
                            lastTradeTimeTimestamp = tradeTimestamp;
                        }
                        else {
                            lastTradeTimeTimestamp = Math.max(lastTradeTimeTimestamp, tradeTimestamp);
                        }
                    }
                    if (shouldParseFees) {
                        const tradeFees = this.safeValue(trade, 'fees');
                        if (tradeFees !== undefined) {
                            for (let j = 0; j < tradeFees.length; j++) {
                                const tradeFee = tradeFees[j];
                                fees.push(this.extend({}, tradeFee));
                            }
                        }
                        else {
                            const tradeFee = this.safeValue(trade, 'fee');
                            if (tradeFee !== undefined) {
                                fees.push(this.extend({}, tradeFee));
                            }
                        }
                    }
                }
            }
        }
        if (shouldParseFees) {
            const reducedFees = this.reduceFees ? this.reduceFeesByCurrency(fees) : fees;
            const reducedLength = reducedFees.length;
            for (let i = 0; i < reducedLength; i++) {
                reducedFees[i]['cost'] = this.safeNumber(reducedFees[i], 'cost');
                if ('rate' in reducedFees[i]) {
                    reducedFees[i]['rate'] = this.safeNumber(reducedFees[i], 'rate');
                }
            }
            if (!parseFee && (reducedLength === 0)) {
                fee['cost'] = this.safeNumber(fee, 'cost');
                if ('rate' in fee) {
                    fee['rate'] = this.safeNumber(fee, 'rate');
                }
                reducedFees.push(fee);
            }
            order['fees'] = reducedFees;
            if (parseFee && (reducedLength === 1)) {
                order['fee'] = reducedFees[0];
            }
        }
        if (amount === undefined) {
            // ensure amount = filled + remaining
            if (filled !== undefined && remaining !== undefined) {
                amount = Precise.stringAdd(filled, remaining);
            }
            else if (this.safeString(order, 'status') === 'closed') {
                amount = filled;
            }
        }
        if (filled === undefined) {
            if (amount !== undefined && remaining !== undefined) {
                filled = Precise.stringSub(amount, remaining);
            }
        }
        if (remaining === undefined) {
            if (amount !== undefined && filled !== undefined) {
                remaining = Precise.stringSub(amount, filled);
            }
        }
        // ensure that the average field is calculated correctly
        const inverse = this.safeValue(market, 'inverse', false);
        const contractSize = this.numberToString(this.safeValue(market, 'contractSize', 1));
        // inverse
        // price = filled * contract size / cost
        //
        // linear
        // price = cost / (filled * contract size)
        if (average === undefined) {
            if ((filled !== undefined) && (cost !== undefined) && Precise.stringGt(filled, '0')) {
                const filledTimesContractSize = Precise.stringMul(filled, contractSize);
                if (inverse) {
                    average = Precise.stringDiv(filledTimesContractSize, cost);
                }
                else {
                    average = Precise.stringDiv(cost, filledTimesContractSize);
                }
            }
        }
        // similarly
        // inverse
        // cost = filled * contract size / price
        //
        // linear
        // cost = filled * contract size * price
        const costPriceExists = (average !== undefined) || (price !== undefined);
        if (parseCost && (filled !== undefined) && costPriceExists) {
            let multiplyPrice = undefined;
            if (average === undefined) {
                multiplyPrice = price;
            }
            else {
                multiplyPrice = average;
            }
            // contract trading
            const filledTimesContractSize = Precise.stringMul(filled, contractSize);
            if (inverse) {
                cost = Precise.stringDiv(filledTimesContractSize, multiplyPrice);
            }
            else {
                cost = Precise.stringMul(filledTimesContractSize, multiplyPrice);
            }
        }
        // support for market orders
        const orderType = this.safeValue(order, 'type');
        const emptyPrice = (price === undefined) || Precise.stringEquals(price, '0');
        if (emptyPrice && (orderType === 'market')) {
            price = average;
        }
        // we have trades with string values at this point so we will mutate them
        for (let i = 0; i < trades.length; i++) {
            const entry = trades[i];
            entry['amount'] = this.safeNumber(entry, 'amount');
            entry['price'] = this.safeNumber(entry, 'price');
            entry['cost'] = this.safeNumber(entry, 'cost');
            const fee = this.safeValue(entry, 'fee', {});
            fee['cost'] = this.safeNumber(fee, 'cost');
            if ('rate' in fee) {
                fee['rate'] = this.safeNumber(fee, 'rate');
            }
            entry['fee'] = fee;
        }
        let timeInForce = this.safeString(order, 'timeInForce');
        let postOnly = this.safeValue(order, 'postOnly');
        // timeInForceHandling
        if (timeInForce === undefined) {
            if (this.safeString(order, 'type') === 'market') {
                timeInForce = 'IOC';
            }
            // allow postOnly override
            if (postOnly) {
                timeInForce = 'PO';
            }
        }
        else if (postOnly === undefined) {
            // timeInForce is not undefined here
            postOnly = timeInForce === 'PO';
        }
        const timestamp = this.safeInteger(order, 'timestamp');
        let datetime = this.safeString(order, 'datetime');
        if (datetime === undefined) {
            datetime = this.iso8601(timestamp);
        }
        const triggerPrice = this.parseNumber(this.safeString2(order, 'triggerPrice', 'stopPrice'));
        return this.extend(order, {
            'id': this.safeString(order, 'id'),
            'clientOrderId': this.safeString(order, 'clientOrderId'),
            'timestamp': timestamp,
            'datetime': datetime,
            'symbol': symbol,
            'type': this.safeString(order, 'type'),
            'side': side,
            'lastTradeTimestamp': lastTradeTimeTimestamp,
            'price': this.parseNumber(price),
            'amount': this.parseNumber(amount),
            'cost': this.parseNumber(cost),
            'average': this.parseNumber(average),
            'filled': this.parseNumber(filled),
            'remaining': this.parseNumber(remaining),
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'trades': trades,
            'reduceOnly': this.safeValue(order, 'reduceOnly'),
            'stopPrice': triggerPrice,
            'triggerPrice': triggerPrice,
            'status': this.safeString(order, 'status'),
            'fee': this.safeValue(order, 'fee'),
        });
    }
    parseOrders(orders, market = undefined, since = undefined, limit = undefined, params = {}) {
        //
        // the value of orders is either a dict or a list
        //
        // dict
        //
        //     {
        //         'id1': { ... },
        //         'id2': { ... },
        //         'id3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'id': 'id1', ... },
        //         { 'id': 'id2', ... },
        //         { 'id': 'id3', ... },
        //         ...
        //     ]
        //
        let results = [];
        if (Array.isArray(orders)) {
            for (let i = 0; i < orders.length; i++) {
                const order = this.extend(this.parseOrder(orders[i], market), params);
                results.push(order);
            }
        }
        else {
            const ids = Object.keys(orders);
            for (let i = 0; i < ids.length; i++) {
                const id = ids[i];
                const order = this.extend(this.parseOrder(this.extend({ 'id': id }, orders[id]), market), params);
                results.push(order);
            }
        }
        results = this.sortBy(results, 'timestamp');
        const symbol = (market !== undefined) ? market['symbol'] : undefined;
        const tail = since === undefined;
        return this.filterBySymbolSinceLimit(results, symbol, since, limit, tail);
    }
    calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {
        if (type === 'market' && takerOrMaker === 'maker') {
            throw new ArgumentsRequired(this.id + ' calculateFee() - you have provided incompatible arguments - "market" type order can not be "maker". Change either the "type" or the "takerOrMaker" argument to calculate the fee.');
        }
        const market = this.markets[symbol];
        const feeSide = this.safeString(market, 'feeSide', 'quote');
        let key = 'quote';
        let cost = undefined;
        const amountString = this.numberToString(amount);
        const priceString = this.numberToString(price);
        if (feeSide === 'quote') {
            // the fee is always in quote currency
            cost = Precise.stringMul(amountString, priceString);
        }
        else if (feeSide === 'base') {
            // the fee is always in base currency
            cost = amountString;
        }
        else if (feeSide === 'get') {
            // the fee is always in the currency you get
            cost = amountString;
            if (side === 'sell') {
                cost = Precise.stringMul(cost, priceString);
            }
            else {
                key = 'base';
            }
        }
        else if (feeSide === 'give') {
            // the fee is always in the currency you give
            cost = amountString;
            if (side === 'buy') {
                cost = Precise.stringMul(cost, priceString);
            }
            else {
                key = 'base';
            }
        }
        // for derivatives, the fee is in 'settle' currency
        if (!market['spot']) {
            key = 'settle';
        }
        // even if `takerOrMaker` argument was set to 'maker', for 'market' orders we should forcefully override it to 'taker'
        if (type === 'market') {
            takerOrMaker = 'taker';
        }
        const rate = this.safeString(market, takerOrMaker);
        if (cost !== undefined) {
            cost = Precise.stringMul(cost, rate);
        }
        return {
            'type': takerOrMaker,
            'currency': market[key],
            'rate': this.parseNumber(rate),
            'cost': this.parseNumber(cost),
        };
    }
    safeTrade(trade, market = undefined) {
        const amount = this.safeString(trade, 'amount');
        const price = this.safeString(trade, 'price');
        let cost = this.safeString(trade, 'cost');
        if (cost === undefined) {
            // contract trading
            const contractSize = this.safeString(market, 'contractSize');
            let multiplyPrice = price;
            if (contractSize !== undefined) {
                const inverse = this.safeValue(market, 'inverse', false);
                if (inverse) {
                    multiplyPrice = Precise.stringDiv('1', price);
                }
                multiplyPrice = Precise.stringMul(multiplyPrice, contractSize);
            }
            cost = Precise.stringMul(multiplyPrice, amount);
        }
        const parseFee = this.safeValue(trade, 'fee') === undefined;
        const parseFees = this.safeValue(trade, 'fees') === undefined;
        const shouldParseFees = parseFee || parseFees;
        const fees = [];
        const fee = this.safeValue(trade, 'fee');
        if (shouldParseFees) {
            const reducedFees = this.reduceFees ? this.reduceFeesByCurrency(fees) : fees;
            const reducedLength = reducedFees.length;
            for (let i = 0; i < reducedLength; i++) {
                reducedFees[i]['cost'] = this.safeNumber(reducedFees[i], 'cost');
                if ('rate' in reducedFees[i]) {
                    reducedFees[i]['rate'] = this.safeNumber(reducedFees[i], 'rate');
                }
            }
            if (!parseFee && (reducedLength === 0)) {
                fee['cost'] = this.safeNumber(fee, 'cost');
                if ('rate' in fee) {
                    fee['rate'] = this.safeNumber(fee, 'rate');
                }
                reducedFees.push(fee);
            }
            if (parseFees) {
                trade['fees'] = reducedFees;
            }
            if (parseFee && (reducedLength === 1)) {
                trade['fee'] = reducedFees[0];
            }
            const tradeFee = this.safeValue(trade, 'fee');
            if (tradeFee !== undefined) {
                tradeFee['cost'] = this.safeNumber(tradeFee, 'cost');
                if ('rate' in tradeFee) {
                    tradeFee['rate'] = this.safeNumber(tradeFee, 'rate');
                }
                trade['fee'] = tradeFee;
            }
        }
        trade['amount'] = this.parseNumber(amount);
        trade['price'] = this.parseNumber(price);
        trade['cost'] = this.parseNumber(cost);
        return trade;
    }
    reduceFeesByCurrency(fees) {
        //
        // this function takes a list of fee structures having the following format
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.1' },
        //         { 'currency': 'BTC', 'cost': '0.2'  },
        //         { 'currency': 'BTC', 'cost': '0.2', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.4', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.1 },
        //         { 'currency': 'BTC', 'cost': 0.2 },
        //         { 'currency': 'BTC', 'cost': 0.2, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.4, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        // and returns a reduced fee list, where fees are summed per currency and rate (if any)
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.3'  },
        //         { 'currency': 'BTC', 'cost': '0.6', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string  = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.3  },
        //         { 'currency': 'BTC', 'cost': 0.6, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        const reduced = {};
        for (let i = 0; i < fees.length; i++) {
            const fee = fees[i];
            const feeCurrencyCode = this.safeString(fee, 'currency');
            if (feeCurrencyCode !== undefined) {
                const rate = this.safeString(fee, 'rate');
                const cost = this.safeValue(fee, 'cost');
                if (Precise.stringEq(cost, '0')) {
                    // omit zero cost fees
                    continue;
                }
                if (!(feeCurrencyCode in reduced)) {
                    reduced[feeCurrencyCode] = {};
                }
                const rateKey = (rate === undefined) ? '' : rate;
                if (rateKey in reduced[feeCurrencyCode]) {
                    reduced[feeCurrencyCode][rateKey]['cost'] = Precise.stringAdd(reduced[feeCurrencyCode][rateKey]['cost'], cost);
                }
                else {
                    reduced[feeCurrencyCode][rateKey] = {
                        'currency': feeCurrencyCode,
                        'cost': cost,
                    };
                    if (rate !== undefined) {
                        reduced[feeCurrencyCode][rateKey]['rate'] = rate;
                    }
                }
            }
        }
        let result = [];
        const feeValues = Object.values(reduced);
        for (let i = 0; i < feeValues.length; i++) {
            const reducedFeeValues = Object.values(feeValues[i]);
            result = this.arrayConcat(result, reducedFeeValues);
        }
        return result;
    }
    safeTicker(ticker, market = undefined) {
        let open = this.safeValue(ticker, 'open');
        let close = this.safeValue(ticker, 'close');
        let last = this.safeValue(ticker, 'last');
        let change = this.safeValue(ticker, 'change');
        let percentage = this.safeValue(ticker, 'percentage');
        let average = this.safeValue(ticker, 'average');
        let vwap = this.safeValue(ticker, 'vwap');
        const baseVolume = this.safeValue(ticker, 'baseVolume');
        const quoteVolume = this.safeValue(ticker, 'quoteVolume');
        if (vwap === undefined) {
            vwap = Precise.stringDiv(quoteVolume, baseVolume);
        }
        if ((last !== undefined) && (close === undefined)) {
            close = last;
        }
        else if ((last === undefined) && (close !== undefined)) {
            last = close;
        }
        if ((last !== undefined) && (open !== undefined)) {
            if (change === undefined) {
                change = Precise.stringSub(last, open);
            }
            if (average === undefined) {
                average = Precise.stringDiv(Precise.stringAdd(last, open), '2');
            }
        }
        if ((percentage === undefined) && (change !== undefined) && (open !== undefined) && Precise.stringGt(open, '0')) {
            percentage = Precise.stringMul(Precise.stringDiv(change, open), '100');
        }
        if ((change === undefined) && (percentage !== undefined) && (open !== undefined)) {
            change = Precise.stringDiv(Precise.stringMul(percentage, open), '100');
        }
        if ((open === undefined) && (last !== undefined) && (change !== undefined)) {
            open = Precise.stringSub(last, change);
        }
        // timestamp and symbol operations don't belong in safeTicker
        // they should be done in the derived classes
        return this.extend(ticker, {
            'bid': this.safeNumber(ticker, 'bid'),
            'bidVolume': this.safeNumber(ticker, 'bidVolume'),
            'ask': this.safeNumber(ticker, 'ask'),
            'askVolume': this.safeNumber(ticker, 'askVolume'),
            'high': this.safeNumber(ticker, 'high'),
            'low': this.safeNumber(ticker, 'low'),
            'open': this.parseNumber(open),
            'close': this.parseNumber(close),
            'last': this.parseNumber(last),
            'change': this.parseNumber(change),
            'percentage': this.parseNumber(percentage),
            'average': this.parseNumber(average),
            'vwap': this.parseNumber(vwap),
            'baseVolume': this.parseNumber(baseVolume),
            'quoteVolume': this.parseNumber(quoteVolume),
            'previousClose': this.safeNumber(ticker, 'previousClose'),
        });
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        if (!this.has['fetchTrades']) {
            throw new NotSupported(this.id + ' fetchOHLCV() is not supported yet');
        }
        await this.loadMarkets();
        const trades = await this.fetchTrades(symbol, since, limit, params);
        const ohlcvc = this.buildOHLCVC(trades, timeframe, since, limit);
        const result = [];
        for (let i = 0; i < ohlcvc.length; i++) {
            result.push([
                this.safeInteger(ohlcvc[i], 0),
                this.safeNumber(ohlcvc[i], 1),
                this.safeNumber(ohlcvc[i], 2),
                this.safeNumber(ohlcvc[i], 3),
                this.safeNumber(ohlcvc[i], 4),
                this.safeNumber(ohlcvc[i], 5),
            ]);
        }
        return result;
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' watchOHLCV() is not supported yet');
    }
    convertTradingViewToOHLCV(ohlcvs, timestamp = 't', open = 'o', high = 'h', low = 'l', close = 'c', volume = 'v', ms = false) {
        const result = [];
        const timestamps = this.safeValue(ohlcvs, timestamp, []);
        const opens = this.safeValue(ohlcvs, open, []);
        const highs = this.safeValue(ohlcvs, high, []);
        const lows = this.safeValue(ohlcvs, low, []);
        const closes = this.safeValue(ohlcvs, close, []);
        const volumes = this.safeValue(ohlcvs, volume, []);
        for (let i = 0; i < timestamps.length; i++) {
            result.push([
                ms ? this.safeInteger(timestamps, i) : this.safeTimestamp(timestamps, i),
                this.safeValue(opens, i),
                this.safeValue(highs, i),
                this.safeValue(lows, i),
                this.safeValue(closes, i),
                this.safeValue(volumes, i),
            ]);
        }
        return result;
    }
    convertOHLCVToTradingView(ohlcvs, timestamp = 't', open = 'o', high = 'h', low = 'l', close = 'c', volume = 'v', ms = false) {
        const result = {};
        result[timestamp] = [];
        result[open] = [];
        result[high] = [];
        result[low] = [];
        result[close] = [];
        result[volume] = [];
        for (let i = 0; i < ohlcvs.length; i++) {
            const ts = ms ? ohlcvs[i][0] : this.parseToInt(ohlcvs[i][0] / 1000);
            result[timestamp].push(ts);
            result[open].push(ohlcvs[i][1]);
            result[high].push(ohlcvs[i][2]);
            result[low].push(ohlcvs[i][3]);
            result[close].push(ohlcvs[i][4]);
            result[volume].push(ohlcvs[i][5]);
        }
        return result;
    }
    marketIds(symbols) {
        if (symbols === undefined) {
            return symbols;
        }
        const result = [];
        for (let i = 0; i < symbols.length; i++) {
            result.push(this.marketId(symbols[i]));
        }
        return result;
    }
    marketSymbols(symbols) {
        if (symbols === undefined) {
            return symbols;
        }
        const result = [];
        for (let i = 0; i < symbols.length; i++) {
            result.push(this.symbol(symbols[i]));
        }
        return result;
    }
    marketCodes(codes) {
        if (codes === undefined) {
            return codes;
        }
        const result = [];
        for (let i = 0; i < codes.length; i++) {
            result.push(this.commonCurrencyCode(codes[i]));
        }
        return result;
    }
    parseBidsAsks(bidasks, priceKey = 0, amountKey = 1) {
        bidasks = this.toArray(bidasks);
        const result = [];
        for (let i = 0; i < bidasks.length; i++) {
            result.push(this.parseBidAsk(bidasks[i], priceKey, amountKey));
        }
        return result;
    }
    async fetchL2OrderBook(symbol, limit = undefined, params = {}) {
        const orderbook = await this.fetchOrderBook(symbol, limit, params);
        return this.extend(orderbook, {
            'asks': this.sortBy(this.aggregate(orderbook['asks']), 0),
            'bids': this.sortBy(this.aggregate(orderbook['bids']), 0, true),
        });
    }
    filterBySymbol(objects, symbol = undefined) {
        if (symbol === undefined) {
            return objects;
        }
        const result = [];
        for (let i = 0; i < objects.length; i++) {
            const objectSymbol = this.safeString(objects[i], 'symbol');
            if (objectSymbol === symbol) {
                result.push(objects[i]);
            }
        }
        return result;
    }
    parseOHLCV(ohlcv, market = undefined) {
        if (Array.isArray(ohlcv)) {
            return [
                this.safeInteger(ohlcv, 0),
                this.safeNumber(ohlcv, 1),
                this.safeNumber(ohlcv, 2),
                this.safeNumber(ohlcv, 3),
                this.safeNumber(ohlcv, 4),
                this.safeNumber(ohlcv, 5), // volume
            ];
        }
        return ohlcv;
    }
    getNetwork(network, code) {
        network = network.toUpperCase();
        const aliases = {
            'ETHEREUM': 'ETH',
            'ETHER': 'ETH',
            'ERC20': 'ETH',
            'ETH': 'ETH',
            'TRC20': 'TRX',
            'TRON': 'TRX',
            'TRX': 'TRX',
            'BEP20': 'BSC',
            'BSC': 'BSC',
            'HRC20': 'HT',
            'HECO': 'HT',
            'SPL': 'SOL',
            'SOL': 'SOL',
            'TERRA': 'LUNA',
            'LUNA': 'LUNA',
            'POLYGON': 'MATIC',
            'MATIC': 'MATIC',
            'EOS': 'EOS',
            'WAVES': 'WAVES',
            'AVALANCHE': 'AVAX',
            'AVAX': 'AVAX',
            'QTUM': 'QTUM',
            'CHZ': 'CHZ',
            'NEO': 'NEO',
            'ONT': 'ONT',
            'RON': 'RON',
        };
        if (network === code) {
            return network;
        }
        else if (network in aliases) {
            return aliases[network];
        }
        else {
            throw new NotSupported(this.id + ' network ' + network + ' is not yet supported');
        }
    }
    networkCodeToId(networkCode, currencyCode = undefined) {
        /**
         * @ignore
         * @method
         * @name exchange#networkCodeToId
         * @description tries to convert the provided networkCode (which is expected to be an unified network code) to a network id. In order to achieve this, derived class needs to have 'options->networks' defined.
         * @param {string} networkCode unified network code
         * @param {string|undefined} currencyCode unified currency code, but this argument is not required by default, unless there is an exchange (like huobi) that needs an override of the method to be able to pass currencyCode argument additionally
         * @returns {[string|undefined]} exchange-specific network id
         */
        const networkIdsByCodes = this.safeValue(this.options, 'networks', {});
        let networkId = this.safeString(networkIdsByCodes, networkCode);
        // for example, if 'ETH' is passed for networkCode, but 'ETH' key not defined in `options->networks` object
        if (networkId === undefined) {
            if (currencyCode === undefined) {
                // if currencyCode was not provided, then we just set passed value to networkId
                networkId = networkCode;
            }
            else {
                // if currencyCode was provided, then we try to find if that currencyCode has a replacement (i.e. ERC20 for ETH)
                const defaultNetworkCodeReplacements = this.safeValue(this.options, 'defaultNetworkCodeReplacements', {});
                if (currencyCode in defaultNetworkCodeReplacements) {
                    // if there is a replacement for the passed networkCode, then we use it to find network-id in `options->networks` object
                    const replacementObject = defaultNetworkCodeReplacements[currencyCode]; // i.e. { 'ERC20': 'ETH' }
                    const keys = Object.keys(replacementObject);
                    for (let i = 0; i < keys.length; i++) {
                        const key = keys[i];
                        const value = replacementObject[key];
                        // if value matches to provided unified networkCode, then we use it's key to find network-id in `options->networks` object
                        if (value === networkCode) {
                            networkId = this.safeString(networkIdsByCodes, key);
                            break;
                        }
                    }
                }
                // if it wasn't found, we just set the provided value to network-id
                if (networkId === undefined) {
                    networkId = networkCode;
                }
            }
        }
        return networkId;
    }
    networkIdToCode(networkId, currencyCode = undefined) {
        /**
         * @ignore
         * @method
         * @name exchange#networkIdToCode
         * @description tries to convert the provided exchange-specific networkId to an unified network Code. In order to achieve this, derived class needs to have 'options->networksById' defined.
         * @param {string} networkId unified network code
         * @param {string|undefined} currencyCode unified currency code, but this argument is not required by default, unless there is an exchange (like huobi) that needs an override of the method to be able to pass currencyCode argument additionally
         * @returns {[string|undefined]} unified network code
         */
        const networkCodesByIds = this.safeValue(this.options, 'networksById', {});
        let networkCode = this.safeString(networkCodesByIds, networkId, networkId);
        // replace mainnet network-codes (i.e. ERC20->ETH)
        if (currencyCode !== undefined) {
            const defaultNetworkCodeReplacements = this.safeValue(this.options, 'defaultNetworkCodeReplacements', {});
            if (currencyCode in defaultNetworkCodeReplacements) {
                const replacementObject = this.safeValue(defaultNetworkCodeReplacements, currencyCode, {});
                networkCode = this.safeString(replacementObject, networkCode, networkCode);
            }
        }
        return networkCode;
    }
    networkCodesToIds(networkCodes = undefined) {
        /**
         * @ignore
         * @method
         * @name exchange#networkCodesToIds
         * @description tries to convert the provided networkCode (which is expected to be an unified network code) to a network id. In order to achieve this, derived class needs to have 'options->networks' defined.
         * @param {[string]|undefined} networkCodes unified network codes
         * @returns {[string|undefined]} exchange-specific network ids
         */
        if (networkCodes === undefined) {
            return undefined;
        }
        const ids = [];
        for (let i = 0; i < networkCodes.length; i++) {
            const networkCode = networkCodes[i];
            ids.push(this.networkCodeToId(networkCode));
        }
        return ids;
    }
    handleNetworkCodeAndParams(params) {
        const networkCodeInParams = this.safeString2(params, 'networkCode', 'network');
        if (networkCodeInParams !== undefined) {
            params = this.omit(params, ['networkCode', 'network']);
        }
        // if it was not defined by user, we should not set it from 'defaultNetworks', because handleNetworkCodeAndParams is for only request-side and thus we do not fill it with anything. We can only use 'defaultNetworks' after parsing response-side
        return [networkCodeInParams, params];
    }
    defaultNetworkCode(currencyCode) {
        let defaultNetworkCode = undefined;
        const defaultNetworks = this.safeValue(this.options, 'defaultNetworks', {});
        if (currencyCode in defaultNetworks) {
            // if currency had set its network in "defaultNetworks", use it
            defaultNetworkCode = defaultNetworks[currencyCode];
        }
        else {
            // otherwise, try to use the global-scope 'defaultNetwork' value (even if that network is not supported by currency, it doesn't make any problem, this will be just used "at first" if currency supports this network at all)
            const defaultNetwork = this.safeValue(this.options, 'defaultNetwork');
            if (defaultNetwork !== undefined) {
                defaultNetworkCode = defaultNetwork;
            }
        }
        return defaultNetworkCode;
    }
    selectNetworkCodeFromUnifiedNetworks(currencyCode, networkCode, indexedNetworkEntries) {
        return this.selectNetworkKeyFromNetworks(currencyCode, networkCode, indexedNetworkEntries, true);
    }
    selectNetworkIdFromRawNetworks(currencyCode, networkCode, indexedNetworkEntries) {
        return this.selectNetworkKeyFromNetworks(currencyCode, networkCode, indexedNetworkEntries, false);
    }
    selectNetworkKeyFromNetworks(currencyCode, networkCode, indexedNetworkEntries, isIndexedByUnifiedNetworkCode = false) {
        // this method is used against raw & unparse network entries, which are just indexed by network id
        let chosenNetworkId = undefined;
        const availableNetworkIds = Object.keys(indexedNetworkEntries);
        const responseNetworksLength = availableNetworkIds.length;
        if (networkCode !== undefined) {
            if (responseNetworksLength === 0) {
                throw new NotSupported(this.id + ' - ' + networkCode + ' network did not return any result for ' + currencyCode);
            }
            else {
                // if networkCode was provided by user, we should check it after response, as the referenced exchange doesn't support network-code during request
                const networkId = isIndexedByUnifiedNetworkCode ? networkCode : this.networkCodeToId(networkCode, currencyCode);
                if (networkId in indexedNetworkEntries) {
                    chosenNetworkId = networkId;
                }
                else {
                    throw new NotSupported(this.id + ' - ' + networkId + ' network was not found for ' + currencyCode + ', use one of ' + availableNetworkIds.join(', '));
                }
            }
        }
        else {
            if (responseNetworksLength === 0) {
                throw new NotSupported(this.id + ' - no networks were returned for ' + currencyCode);
            }
            else {
                // if networkCode was not provided by user, then we try to use the default network (if it was defined in "defaultNetworks"), otherwise, we just return the first network entry
                const defaultNetworkCode = this.defaultNetworkCode(currencyCode);
                const defaultNetworkId = isIndexedByUnifiedNetworkCode ? defaultNetworkCode : this.networkCodeToId(defaultNetworkCode, currencyCode);
                chosenNetworkId = (defaultNetworkId in indexedNetworkEntries) ? defaultNetworkId : availableNetworkIds[0];
            }
        }
        return chosenNetworkId;
    }
    safeNumber2(dictionary, key1, key2, d = undefined) {
        const value = this.safeString2(dictionary, key1, key2);
        return this.parseNumber(value, d);
    }
    parseOrderBook(orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1) {
        const bids = this.parseBidsAsks(this.safeValue(orderbook, bidsKey, []), priceKey, amountKey);
        const asks = this.parseBidsAsks(this.safeValue(orderbook, asksKey, []), priceKey, amountKey);
        return {
            'symbol': symbol,
            'bids': this.sortBy(bids, 0, true),
            'asks': this.sortBy(asks, 0),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'nonce': undefined,
        };
    }
    parseOHLCVs(ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        const results = [];
        for (let i = 0; i < ohlcvs.length; i++) {
            results.push(this.parseOHLCV(ohlcvs[i], market));
        }
        const sorted = this.sortBy(results, 0);
        const tail = (since === undefined);
        return this.filterBySinceLimit(sorted, since, limit, 0, tail);
    }
    parseLeverageTiers(response, symbols = undefined, marketIdKey = undefined) {
        // marketIdKey should only be undefined when response is a dictionary
        symbols = this.marketSymbols(symbols);
        const tiers = {};
        for (let i = 0; i < response.length; i++) {
            const item = response[i];
            const id = this.safeString(item, marketIdKey);
            const market = this.safeMarket(id, undefined, undefined, this.safeString(this.options, 'defaultType'));
            const symbol = market['symbol'];
            const contract = this.safeValue(market, 'contract', false);
            if (contract && ((symbols === undefined) || this.inArray(symbol, symbols))) {
                tiers[symbol] = this.parseMarketLeverageTiers(item, market);
            }
        }
        return tiers;
    }
    async loadTradingLimits(symbols = undefined, reload = false, params = {}) {
        if (this.has['fetchTradingLimits']) {
            if (reload || !('limitsLoaded' in this.options)) {
                const response = await this.fetchTradingLimits(symbols);
                for (let i = 0; i < symbols.length; i++) {
                    const symbol = symbols[i];
                    this.markets[symbol] = this.deepExtend(this.markets[symbol], response[symbol]);
                }
                this.options['limitsLoaded'] = this.milliseconds();
            }
        }
        return this.markets;
    }
    parsePositions(positions, symbols = undefined, params = {}) {
        symbols = this.marketSymbols(symbols);
        positions = this.toArray(positions);
        const result = [];
        for (let i = 0; i < positions.length; i++) {
            const position = this.extend(this.parsePosition(positions[i], undefined), params);
            result.push(position);
        }
        return this.filterByArray(result, 'symbol', symbols, false);
    }
    parseAccounts(accounts, params = {}) {
        accounts = this.toArray(accounts);
        const result = [];
        for (let i = 0; i < accounts.length; i++) {
            const account = this.extend(this.parseAccount(accounts[i]), params);
            result.push(account);
        }
        return result;
    }
    parseTrades(trades, market = undefined, since = undefined, limit = undefined, params = {}) {
        trades = this.toArray(trades);
        let result = [];
        for (let i = 0; i < trades.length; i++) {
            const trade = this.extend(this.parseTrade(trades[i], market), params);
            result.push(trade);
        }
        result = this.sortBy2(result, 'timestamp', 'id');
        const symbol = (market !== undefined) ? market['symbol'] : undefined;
        const tail = (since === undefined);
        return this.filterBySymbolSinceLimit(result, symbol, since, limit, tail);
    }
    parseTransactions(transactions, currency = undefined, since = undefined, limit = undefined, params = {}) {
        transactions = this.toArray(transactions);
        let result = [];
        for (let i = 0; i < transactions.length; i++) {
            const transaction = this.extend(this.parseTransaction(transactions[i], currency), params);
            result.push(transaction);
        }
        result = this.sortBy(result, 'timestamp');
        const code = (currency !== undefined) ? currency['code'] : undefined;
        const tail = (since === undefined);
        return this.filterByCurrencySinceLimit(result, code, since, limit, tail);
    }
    parseTransfers(transfers, currency = undefined, since = undefined, limit = undefined, params = {}) {
        transfers = this.toArray(transfers);
        let result = [];
        for (let i = 0; i < transfers.length; i++) {
            const transfer = this.extend(this.parseTransfer(transfers[i], currency), params);
            result.push(transfer);
        }
        result = this.sortBy(result, 'timestamp');
        const code = (currency !== undefined) ? currency['code'] : undefined;
        const tail = (since === undefined);
        return this.filterByCurrencySinceLimit(result, code, since, limit, tail);
    }
    parseLedger(data, currency = undefined, since = undefined, limit = undefined, params = {}) {
        let result = [];
        const arrayData = this.toArray(data);
        for (let i = 0; i < arrayData.length; i++) {
            const itemOrItems = this.parseLedgerEntry(arrayData[i], currency);
            if (Array.isArray(itemOrItems)) {
                for (let j = 0; j < itemOrItems.length; j++) {
                    result.push(this.extend(itemOrItems[j], params));
                }
            }
            else {
                result.push(this.extend(itemOrItems, params));
            }
        }
        result = this.sortBy(result, 'timestamp');
        const code = (currency !== undefined) ? currency['code'] : undefined;
        const tail = (since === undefined);
        return this.filterByCurrencySinceLimit(result, code, since, limit, tail);
    }
    nonce() {
        return this.seconds();
    }
    setHeaders(headers) {
        return headers;
    }
    marketId(symbol) {
        const market = this.market(symbol);
        if (market !== undefined) {
            return market['id'];
        }
        return symbol;
    }
    symbol(symbol) {
        const market = this.market(symbol);
        return this.safeString(market, 'symbol', symbol);
    }
    resolvePath(path, params) {
        return [
            this.implodeParams(path, params),
            this.omit(params, this.extractParams(path)),
        ];
    }
    filterByArray(objects, key, values = undefined, indexed = true) {
        objects = this.toArray(objects);
        // return all of them if no values were passed
        if (values === undefined || !values) {
            return indexed ? this.indexBy(objects, key) : objects;
        }
        const results = [];
        for (let i = 0; i < objects.length; i++) {
            if (this.inArray(objects[i][key], values)) {
                results.push(objects[i]);
            }
        }
        return indexed ? this.indexBy(results, key) : results;
    }
    async fetch2(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined, config = {}, context = {}) {
        if (this.enableRateLimit) {
            const cost = this.calculateRateLimiterCost(api, method, path, params, config, context);
            await this.throttle(cost);
        }
        this.lastRestRequestTimestamp = this.milliseconds();
        const request = this.sign(path, api, method, params, headers, body);
        return await this.fetch(request['url'], request['method'], request['headers'], request['body']);
    }
    async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined, config = {}, context = {}) {
        return await this.fetch2(path, api, method, params, headers, body, config, context);
    }
    async loadAccounts(reload = false, params = {}) {
        if (reload) {
            this.accounts = await this.fetchAccounts(params);
        }
        else {
            if (this.accounts) {
                return this.accounts;
            }
            else {
                this.accounts = await this.fetchAccounts(params);
            }
        }
        this.accountsById = this.indexBy(this.accounts, 'id');
        return this.accounts;
    }
    async fetchOHLCVC(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        if (!this.has['fetchTrades']) {
            throw new NotSupported(this.id + ' fetchOHLCV() is not supported yet');
        }
        await this.loadMarkets();
        const trades = await this.fetchTrades(symbol, since, limit, params);
        return this.buildOHLCVC(trades, timeframe, since, limit);
    }
    parseTradingViewOHLCV(ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        const result = this.convertTradingViewToOHLCV(ohlcvs);
        return this.parseOHLCVs(result, market, timeframe, since, limit);
    }
    async editLimitBuyOrder(id, symbol, amount, price = undefined, params = {}) {
        return await this.editLimitOrder(id, symbol, 'buy', amount, price, params);
    }
    async editLimitSellOrder(id, symbol, amount, price = undefined, params = {}) {
        return await this.editLimitOrder(id, symbol, 'sell', amount, price, params);
    }
    async editLimitOrder(id, symbol, side, amount, price = undefined, params = {}) {
        return await this.editOrder(id, symbol, 'limit', side, amount, price, params);
    }
    async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
        await this.cancelOrder(id, symbol);
        return await this.createOrder(symbol, type, side, amount, price, params);
    }
    async fetchPermissions(params = {}) {
        throw new NotSupported(this.id + ' fetchPermissions() is not supported yet');
    }
    async fetchPosition(symbol, params = {}) {
        throw new NotSupported(this.id + ' fetchPosition() is not supported yet');
    }
    async fetchPositions(symbols = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchPositions() is not supported yet');
    }
    async fetchPositionsRisk(symbols = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchPositionsRisk() is not supported yet');
    }
    async fetchBidsAsks(symbols = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchBidsAsks() is not supported yet');
    }
    parseBidAsk(bidask, priceKey = 0, amountKey = 1) {
        const price = this.safeNumber(bidask, priceKey);
        const amount = this.safeNumber(bidask, amountKey);
        return [price, amount];
    }
    safeCurrency(currencyId, currency = undefined) {
        if ((currencyId === undefined) && (currency !== undefined)) {
            return currency;
        }
        if ((this.currencies_by_id !== undefined) && (currencyId in this.currencies_by_id) && (this.currencies_by_id[currencyId] !== undefined)) {
            return this.currencies_by_id[currencyId];
        }
        let code = currencyId;
        if (currencyId !== undefined) {
            code = this.commonCurrencyCode(currencyId.toUpperCase());
        }
        return {
            'id': currencyId,
            'code': code,
        };
    }
    safeMarket(marketId = undefined, market = undefined, delimiter = undefined, marketType = undefined) {
        const result = {
            'id': marketId,
            'symbol': marketId,
            'base': undefined,
            'quote': undefined,
            'baseId': undefined,
            'quoteId': undefined,
            'active': undefined,
            'type': undefined,
            'linear': undefined,
            'inverse': undefined,
            'spot': false,
            'swap': false,
            'future': false,
            'option': false,
            'margin': false,
            'contract': false,
            'contractSize': undefined,
            'expiry': undefined,
            'expiryDatetime': undefined,
            'optionType': undefined,
            'strike': undefined,
            'settle': undefined,
            'settleId': undefined,
            'precision': {
                'amount': undefined,
                'price': undefined,
            },
            'limits': {
                'amount': {
                    'min': undefined,
                    'max': undefined,
                },
                'price': {
                    'min': undefined,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'info': undefined,
        };
        if (marketId !== undefined) {
            if ((this.markets_by_id !== undefined) && (marketId in this.markets_by_id)) {
                const markets = this.markets_by_id[marketId];
                const numMarkets = markets.length;
                if (numMarkets === 1) {
                    return markets[0];
                }
                else {
                    if (marketType === undefined) {
                        throw new ArgumentsRequired(this.id + ' safeMarket() requires a fourth argument for ' + marketId + ' to disambiguate between different markets with the same market id');
                    }
                    for (let i = 0; i < markets.length; i++) {
                        const market = markets[i];
                        if (market[marketType]) {
                            return market;
                        }
                    }
                }
            }
            else if (delimiter !== undefined) {
                const parts = marketId.split(delimiter);
                const partsLength = parts.length;
                if (partsLength === 2) {
                    result['baseId'] = this.safeString(parts, 0);
                    result['quoteId'] = this.safeString(parts, 1);
                    result['base'] = this.safeCurrencyCode(result['baseId']);
                    result['quote'] = this.safeCurrencyCode(result['quoteId']);
                    result['symbol'] = result['base'] + '/' + result['quote'];
                    return result;
                }
                else {
                    return result;
                }
            }
        }
        if (market !== undefined) {
            return market;
        }
        return result;
    }
    checkRequiredCredentials(error = true) {
        const keys = Object.keys(this.requiredCredentials);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (this.requiredCredentials[key] && !this[key]) {
                if (error) {
                    throw new AuthenticationError(this.id + ' requires "' + key + '" credential');
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    oath() {
        if (this.twofa !== undefined) {
            return this.totp(this.twofa);
        }
        else {
            throw new ExchangeError(this.id + ' exchange.twofa has not been set for 2FA Two-Factor Authentication');
        }
    }
    async fetchBalance(params = {}) {
        throw new NotSupported(this.id + ' fetchBalance() is not supported yet');
    }
    async watchBalance(params = {}) {
        throw new NotSupported(this.id + ' watchBalance() is not supported yet');
    }
    async fetchPartialBalance(part, params = {}) {
        const balance = await this.fetchBalance(params);
        return balance[part];
    }
    async fetchFreeBalance(params = {}) {
        return await this.fetchPartialBalance('free', params);
    }
    async fetchUsedBalance(params = {}) {
        return await this.fetchPartialBalance('used', params);
    }
    async fetchTotalBalance(params = {}) {
        return await this.fetchPartialBalance('total', params);
    }
    async fetchStatus(params = {}) {
        if (this.has['fetchTime']) {
            const time = await this.fetchTime(params);
            this.status = this.extend(this.status, {
                'updated': time,
            });
        }
        if (!('info' in this.status)) {
            this.status['info'] = undefined;
        }
        return this.status;
    }
    async fetchFundingFee(code, params = {}) {
        const warnOnFetchFundingFee = this.safeValue(this.options, 'warnOnFetchFundingFee', true);
        if (warnOnFetchFundingFee) {
            throw new NotSupported(this.id + ' fetchFundingFee() method is deprecated, it will be removed in July 2022, please, use fetchTransactionFee() or set exchange.options["warnOnFetchFundingFee"] = false to suppress this warning');
        }
        return await this.fetchTransactionFee(code, params);
    }
    async fetchFundingFees(codes = undefined, params = {}) {
        const warnOnFetchFundingFees = this.safeValue(this.options, 'warnOnFetchFundingFees', true);
        if (warnOnFetchFundingFees) {
            throw new NotSupported(this.id + ' fetchFundingFees() method is deprecated, it will be removed in July 2022. Please, use fetchTransactionFees() or set exchange.options["warnOnFetchFundingFees"] = false to suppress this warning');
        }
        return await this.fetchTransactionFees(codes, params);
    }
    async fetchTransactionFee(code, params = {}) {
        if (!this.has['fetchTransactionFees']) {
            throw new NotSupported(this.id + ' fetchTransactionFee() is not supported yet');
        }
        return await this.fetchTransactionFees([code], params);
    }
    async fetchTransactionFees(codes = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchTransactionFees() is not supported yet');
    }
    async fetchDepositWithdrawFees(codes = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchDepositWithdrawFees() is not supported yet');
    }
    async fetchDepositWithdrawFee(code, params = {}) {
        if (!this.has['fetchDepositWithdrawFees']) {
            throw new NotSupported(this.id + ' fetchDepositWithdrawFee() is not supported yet');
        }
        const fees = await this.fetchDepositWithdrawFees([code], params);
        return this.safeValue(fees, code);
    }
    getSupportedMapping(key, mapping = {}) {
        if (key in mapping) {
            return mapping[key];
        }
        else {
            throw new NotSupported(this.id + ' ' + key + ' does not have a value in mapping');
        }
    }
    async fetchBorrowRate(code, params = {}) {
        await this.loadMarkets();
        if (!this.has['fetchBorrowRates']) {
            throw new NotSupported(this.id + ' fetchBorrowRate() is not supported yet');
        }
        const borrowRates = await this.fetchBorrowRates(params);
        const rate = this.safeValue(borrowRates, code);
        if (rate === undefined) {
            throw new ExchangeError(this.id + ' fetchBorrowRate() could not find the borrow rate for currency code ' + code);
        }
        return rate;
    }
    handleOptionAndParams(params, methodName, optionName, defaultValue = undefined) {
        // This method can be used to obtain method specific properties, i.e: this.handleOptionAndParams (params, 'fetchPosition', 'marginMode', 'isolated')
        const defaultOptionName = 'default' + this.capitalize(optionName); // we also need to check the 'defaultXyzWhatever'
        // check if params contain the key
        let value = this.safeValue2(params, optionName, defaultOptionName);
        if (value !== undefined) {
            params = this.omit(params, [optionName, defaultOptionName]);
        }
        else {
            // check if exchange has properties for this method
            const exchangeWideMethodOptions = this.safeValue(this.options, methodName);
            if (exchangeWideMethodOptions !== undefined) {
                // check if the option is defined in this method's props
                value = this.safeValue2(exchangeWideMethodOptions, optionName, defaultOptionName);
            }
            if (value === undefined) {
                // if it's still undefined, check if global exchange-wide option exists
                value = this.safeValue2(this.options, optionName, defaultOptionName);
            }
            // if it's still undefined, use the default value
            value = (value !== undefined) ? value : defaultValue;
        }
        return [value, params];
    }
    handleOption(methodName, optionName, defaultValue = undefined) {
        // eslint-disable-next-line no-unused-vars
        const [result, empty] = this.handleOptionAndParams({}, methodName, optionName, defaultValue);
        return result;
    }
    handleMarketTypeAndParams(methodName, market = undefined, params = {}) {
        const defaultType = this.safeString2(this.options, 'defaultType', 'type', 'spot');
        const methodOptions = this.safeValue(this.options, methodName);
        let methodType = defaultType;
        if (methodOptions !== undefined) {
            if (typeof methodOptions === 'string') {
                methodType = methodOptions;
            }
            else {
                methodType = this.safeString2(methodOptions, 'defaultType', 'type', methodType);
            }
        }
        const marketType = (market === undefined) ? methodType : market['type'];
        const type = this.safeString2(params, 'defaultType', 'type', marketType);
        params = this.omit(params, ['defaultType', 'type']);
        return [type, params];
    }
    handleSubTypeAndParams(methodName, market = undefined, params = {}, defaultValue = undefined) {
        let subType = undefined;
        // if set in params, it takes precedence
        const subTypeInParams = this.safeString2(params, 'subType', 'defaultSubType');
        // avoid omitting if it's not present
        if (subTypeInParams !== undefined) {
            subType = subTypeInParams;
            params = this.omit(params, ['subType', 'defaultSubType']);
        }
        else {
            // at first, check from market object
            if (market !== undefined) {
                if (market['linear']) {
                    subType = 'linear';
                }
                else if (market['inverse']) {
                    subType = 'inverse';
                }
            }
            // if it was not defined in market object
            if (subType === undefined) {
                const values = this.handleOptionAndParams(undefined, methodName, 'subType', defaultValue); // no need to re-test params here
                subType = values[0];
            }
        }
        return [subType, params];
    }
    handleMarginModeAndParams(methodName, params = {}, defaultValue = undefined) {
        /**
         * @ignore
         * @method
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[string|undefined, object]} the marginMode in lowercase as specified by params["marginMode"], params["defaultMarginMode"] this.options["marginMode"] or this.options["defaultMarginMode"]
         */
        return this.handleOptionAndParams(params, methodName, 'marginMode', defaultValue);
    }
    throwExactlyMatchedException(exact, string, message) {
        if (string in exact) {
            throw new exact[string](message);
        }
    }
    throwBroadlyMatchedException(broad, string, message) {
        const broadKey = this.findBroadlyMatchedKey(broad, string);
        if (broadKey !== undefined) {
            throw new broad[broadKey](message);
        }
    }
    findBroadlyMatchedKey(broad, string) {
        // a helper for matching error strings exactly vs broadly
        const keys = Object.keys(broad);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (string !== undefined) { // #issues/12698
                if (string.indexOf(key) >= 0) {
                    return key;
                }
            }
        }
        return undefined;
    }
    handleErrors(statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {
        // it is a stub method that must be overrided in the derived exchange classes
        // throw new NotSupported (this.id + ' handleErrors() not implemented yet');
        return undefined;
    }
    calculateRateLimiterCost(api, method, path, params, config = {}, context = {}) {
        return this.safeValue(config, 'cost', 1);
    }
    async fetchTicker(symbol, params = {}) {
        if (this.has['fetchTickers']) {
            await this.loadMarkets();
            const market = this.market(symbol);
            symbol = market['symbol'];
            const tickers = await this.fetchTickers([symbol], params);
            const ticker = this.safeValue(tickers, symbol);
            if (ticker === undefined) {
                throw new NullResponse(this.id + ' fetchTickers() could not find a ticker for ' + symbol);
            }
            else {
                return ticker;
            }
        }
        else {
            throw new NotSupported(this.id + ' fetchTicker() is not supported yet');
        }
    }
    async watchTicker(symbol, params = {}) {
        throw new NotSupported(this.id + ' watchTicker() is not supported yet');
    }
    async fetchTickers(symbols = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchTickers() is not supported yet');
    }
    async watchTickers(symbols = undefined, params = {}) {
        throw new NotSupported(this.id + ' watchTickers() is not supported yet');
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchOrder() is not supported yet');
    }
    async fetchOrderStatus(id, symbol = undefined, params = {}) {
        const order = await this.fetchOrder(id, symbol, params);
        return order['status'];
    }
    async fetchUnifiedOrder(order, params = {}) {
        return await this.fetchOrder(this.safeValue(order, 'id'), this.safeValue(order, 'symbol'), params);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        throw new NotSupported(this.id + ' createOrder() is not supported yet');
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        throw new NotSupported(this.id + ' cancelOrder() is not supported yet');
    }
    async cancelUnifiedOrder(order, params = {}) {
        return this.cancelOrder(this.safeValue(order, 'id'), this.safeValue(order, 'symbol'), params);
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchOrders() is not supported yet');
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' watchOrders() is not supported yet');
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchOpenOrders() is not supported yet');
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchClosedOrders() is not supported yet');
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchMyTrades() is not supported yet');
    }
    async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' watchMyTrades() is not supported yet');
    }
    async fetchTransactions(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchTransactions() is not supported yet');
    }
    async fetchDeposits(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchDeposits() is not supported yet');
    }
    async fetchWithdrawals(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchWithdrawals() is not supported yet');
    }
    parseLastPrice(price, market = undefined) {
        throw new NotSupported(this.id + ' parseLastPrice() is not supported yet');
    }
    async fetchDepositAddress(code, params = {}) {
        if (this.has['fetchDepositAddresses']) {
            const depositAddresses = await this.fetchDepositAddresses([code], params);
            const depositAddress = this.safeValue(depositAddresses, code);
            if (depositAddress === undefined) {
                throw new InvalidAddress(this.id + ' fetchDepositAddress() could not find a deposit address for ' + code + ', make sure you have created a corresponding deposit address in your wallet on the exchange website');
            }
            else {
                return depositAddress;
            }
        }
        else {
            throw new NotSupported(this.id + ' fetchDepositAddress() is not supported yet');
        }
    }
    account() {
        return {
            'free': undefined,
            'used': undefined,
            'total': undefined,
        };
    }
    commonCurrencyCode(currency) {
        if (!this.substituteCommonCurrencyCodes) {
            return currency;
        }
        return this.safeString(this.commonCurrencies, currency, currency);
    }
    currency(code) {
        if (this.currencies === undefined) {
            throw new ExchangeError(this.id + ' currencies not loaded');
        }
        if (typeof code === 'string') {
            if (code in this.currencies) {
                return this.currencies[code];
            }
            else if (code in this.currencies_by_id) {
                return this.currencies_by_id[code];
            }
        }
        throw new ExchangeError(this.id + ' does not have currency code ' + code);
    }
    marketHelper(symbol) {
        if (typeof symbol === 'string') {
            if (symbol in this.markets) {
                return this.markets[symbol];
            }
            else if (symbol in this.markets_by_id) {
                const markets = this.markets_by_id[symbol];
                const defaultType = this.safeString2(this.options, 'defaultType', 'defaultSubType', 'spot');
                for (let i = 0; i < markets.length; i++) {
                    const market = markets[i];
                    if (market[defaultType]) {
                        return market;
                    }
                }
                return markets[0];
            }
        }
    }
    market(symbol) {
        // symbol = symbol + ':USDT';
        if (this.markets === undefined) {
            throw new ExchangeError(this.id + ' markets not loaded');
        }
        if (this.markets_by_id === undefined) {
            throw new ExchangeError(this.id + ' markets not loaded');
        }
        // TEALSTREET patch for backwards compatability
        // this.marketHelper (symbol.split (':')[0]);
        let foundMarket = this.marketHelper(symbol);
        if (foundMarket) {
            return foundMarket;
        }
        const marketStem = symbol.split(':')[0];
        const marketParts = marketStem.split('/');
        if (marketParts.length === 2) {
            foundMarket = this.marketHelper(marketParts[0] + '/' + marketParts[1] + ':' + marketParts[1]);
        }
        if (foundMarket) {
            return foundMarket;
        }
        foundMarket = this.marketHelper(marketStem + ':USDT') || this.marketHelper(marketStem + ':BTC') || this.marketHelper(marketStem);
        if (foundMarket) {
            return foundMarket;
        }
        // eslint-disable-next-line no-console
        // console.log (symbol);
        // eslint-disable-next-line no-console
        // console.log (this.markets);
        throw new BadSymbol(this.id + ' does not have market symbol ' + symbol);
    }
    handleWithdrawTagAndParams(tag, params) {
        if (typeof tag === 'object') {
            params = this.extend(tag, params);
            tag = undefined;
        }
        if (tag === undefined) {
            tag = this.safeString(params, 'tag');
            if (tag !== undefined) {
                params = this.omit(params, 'tag');
            }
        }
        return [tag, params];
    }
    async createLimitOrder(symbol, side, amount, price, params = {}) {
        return await this.createOrder(symbol, 'limit', side, amount, price, params);
    }
    async createMarketOrder(symbol, side, amount, price = undefined, params = {}) {
        return await this.createOrder(symbol, 'market', side, amount, price, params);
    }
    async createLimitBuyOrder(symbol, amount, price, params = {}) {
        return await this.createOrder(symbol, 'limit', 'buy', amount, price, params);
    }
    async createLimitSellOrder(symbol, amount, price, params = {}) {
        return await this.createOrder(symbol, 'limit', 'sell', amount, price, params);
    }
    async createMarketBuyOrder(symbol, amount, params = {}) {
        return await this.createOrder(symbol, 'market', 'buy', amount, undefined, params);
    }
    async createMarketSellOrder(symbol, amount, params = {}) {
        return await this.createOrder(symbol, 'market', 'sell', amount, undefined, params);
    }
    costToPrecision(symbol, cost) {
        const market = this.market(symbol);
        return this.decimalToPrecision(cost, TRUNCATE, market['precision']['price'], this.precisionMode, this.paddingMode);
    }
    priceToPrecision(symbol, price) {
        const market = this.market(symbol);
        const result = this.decimalToPrecision(price, ROUND, market['precision']['price'], this.precisionMode, this.paddingMode);
        if (result === '0') {
            throw new ArgumentsRequired(this.id + ' price of ' + market['symbol'] + ' must be greater than minimum price precision of ' + this.numberToString(market['precision']['price']));
        }
        return result;
    }
    amountToPrecision(symbol, amount) {
        const market = this.market(symbol);
        const result = this.decimalToPrecision(amount, TRUNCATE, market['precision']['amount'], this.precisionMode, this.paddingMode);
        if (result === '0') {
            throw new ArgumentsRequired(this.id + ' amount of ' + market['symbol'] + ' must be greater than minimum amount precision of ' + this.numberToString(market['precision']['amount']));
        }
        return result;
    }
    feeToPrecision(symbol, fee) {
        const market = this.market(symbol);
        return this.decimalToPrecision(fee, ROUND, market['precision']['price'], this.precisionMode, this.paddingMode);
    }
    currencyToPrecision(code, fee, networkCode = undefined) {
        const currency = this.currencies[code];
        let precision = this.safeValue(currency, 'precision');
        if (networkCode !== undefined) {
            const networks = this.safeValue(currency, 'networks', {});
            const networkItem = this.safeValue(networks, networkCode, {});
            precision = this.safeValue(networkItem, 'precision', precision);
        }
        if (precision === undefined) {
            return fee;
        }
        else {
            return this.decimalToPrecision(fee, ROUND, precision, this.precisionMode, this.paddingMode);
        }
    }
    safeNumber(obj, key, defaultNumber = undefined) {
        const value = this.safeString(obj, key);
        return this.parseNumber(value, defaultNumber);
    }
    safeNumberN(object, arr, defaultNumber = undefined) {
        const value = this.safeStringN(object, arr);
        return this.parseNumber(value, defaultNumber);
    }
    parsePrecision(precision) {
        /**
         * @ignore
         * @method
         * @param {string} precision The number of digits to the right of the decimal
         * @returns {string} a string number equal to 1e-precision
         */
        if (precision === undefined) {
            return undefined;
        }
        const precisionNumber = parseInt(precision);
        let parsedPrecision = '0.';
        for (let i = 0; i < precisionNumber - 1; i++) {
            parsedPrecision = parsedPrecision + '0';
        }
        return parsedPrecision + '1';
    }
    async loadTimeDifference(params = {}) {
        const serverTime = await this.fetchTime(params);
        const after = this.milliseconds();
        this.options['timeDifference'] = after - serverTime;
        return this.options['timeDifference'];
    }
    implodeHostname(url) {
        return this.implodeParams(url, { 'hostname': this.hostname });
    }
    async fetchMarketLeverageTiers(symbol, params = {}) {
        if (this.has['fetchLeverageTiers']) {
            const market = await this.market(symbol);
            if (!market['contract']) {
                throw new BadSymbol(this.id + ' fetchMarketLeverageTiers() supports contract markets only');
            }
            const tiers = await this.fetchLeverageTiers([symbol]);
            return this.safeValue(tiers, symbol);
        }
        else {
            throw new NotSupported(this.id + ' fetchMarketLeverageTiers() is not supported yet');
        }
    }
    async createPostOnlyOrder(symbol, type, side, amount, price, params = {}) {
        if (!this.has['createPostOnlyOrder']) {
            throw new NotSupported(this.id + 'createPostOnlyOrder() is not supported yet');
        }
        const query = this.extend(params, { 'postOnly': true });
        return await this.createOrder(symbol, type, side, amount, price, query);
    }
    async createReduceOnlyOrder(symbol, type, side, amount, price, params = {}) {
        if (!this.has['createReduceOnlyOrder']) {
            throw new NotSupported(this.id + 'createReduceOnlyOrder() is not supported yet');
        }
        const query = this.extend(params, { 'reduceOnly': true });
        return await this.createOrder(symbol, type, side, amount, price, query);
    }
    async createStopOrder(symbol, type, side, amount, price = undefined, stopPrice = undefined, params = {}) {
        if (!this.has['createStopOrder']) {
            throw new NotSupported(this.id + ' createStopOrder() is not supported yet');
        }
        if (stopPrice === undefined) {
            throw new ArgumentsRequired(this.id + ' create_stop_order() requires a stopPrice argument');
        }
        const query = this.extend(params, { 'stopPrice': stopPrice });
        return await this.createOrder(symbol, type, side, amount, price, query);
    }
    async createStopLimitOrder(symbol, side, amount, price, stopPrice, params = {}) {
        if (!this.has['createStopLimitOrder']) {
            throw new NotSupported(this.id + ' createStopLimitOrder() is not supported yet');
        }
        const query = this.extend(params, { 'stopPrice': stopPrice });
        return await this.createOrder(symbol, 'limit', side, amount, price, query);
    }
    async createStopMarketOrder(symbol, side, amount, stopPrice, params = {}) {
        if (!this.has['createStopMarketOrder']) {
            throw new NotSupported(this.id + ' createStopMarketOrder() is not supported yet');
        }
        const query = this.extend(params, { 'stopPrice': stopPrice });
        return await this.createOrder(symbol, 'market', side, amount, undefined, query);
    }
    safeCurrencyCode(currencyId, currency = undefined) {
        currency = this.safeCurrency(currencyId, currency);
        return currency['code'];
    }
    filterBySymbolSinceLimit(array, symbol = undefined, since = undefined, limit = undefined, tail = false) {
        return this.filterByValueSinceLimit(array, 'symbol', symbol, since, limit, 'timestamp', tail);
    }
    filterByCurrencySinceLimit(array, code = undefined, since = undefined, limit = undefined, tail = false) {
        return this.filterByValueSinceLimit(array, 'currency', code, since, limit, 'timestamp', tail);
    }
    parseLastPrices(pricesData, symbols = undefined, params = {}) {
        //
        // the value of tickers is either a dict or a list
        //
        // dict
        //
        //     {
        //         'marketId1': { ... },
        //         'marketId2': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'market': 'marketId1', ... },
        //         { 'market': 'marketId2', ... },
        //         ...
        //     ]
        //
        const results = [];
        if (Array.isArray(pricesData)) {
            for (let i = 0; i < pricesData.length; i++) {
                const priceData = this.extend(this.parseLastPrice(pricesData[i]), params);
                results.push(priceData);
            }
        }
        else {
            const marketIds = Object.keys(pricesData);
            for (let i = 0; i < marketIds.length; i++) {
                const marketId = marketIds[i];
                const market = this.safeMarket(marketId);
                const priceData = this.extend(this.parseLastPrice(pricesData[marketId], market), params);
                results.push(priceData);
            }
        }
        symbols = this.marketSymbols(symbols);
        return this.filterByArray(results, 'symbol', symbols);
    }
    parseTickers(tickers, symbols = undefined, params = {}) {
        //
        // the value of tickers is either a dict or a list
        //
        // dict
        //
        //     {
        //         'marketId1': { ... },
        //         'marketId2': { ... },
        //         'marketId3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'market': 'marketId1', ... },
        //         { 'market': 'marketId2', ... },
        //         { 'market': 'marketId3', ... },
        //         ...
        //     ]
        //
        const results = [];
        if (Array.isArray(tickers)) {
            for (let i = 0; i < tickers.length; i++) {
                const ticker = this.extend(this.parseTicker(tickers[i]), params);
                results.push(ticker);
            }
        }
        else {
            const marketIds = Object.keys(tickers);
            for (let i = 0; i < marketIds.length; i++) {
                const marketId = marketIds[i];
                const market = this.safeMarket(marketId);
                const ticker = this.extend(this.parseTicker(tickers[marketId], market), params);
                results.push(ticker);
            }
        }
        symbols = this.marketSymbols(symbols);
        return this.filterByArray(results, 'symbol', symbols);
    }
    parseDepositAddresses(addresses, codes = undefined, indexed = true, params = {}) {
        let result = [];
        for (let i = 0; i < addresses.length; i++) {
            const address = this.extend(this.parseDepositAddress(addresses[i]), params);
            result.push(address);
        }
        if (codes !== undefined) {
            result = this.filterByArray(result, 'currency', codes, false);
        }
        if (indexed) {
            return this.indexBy(result, 'currency');
        }
        return result;
    }
    parseBorrowInterests(response, market = undefined) {
        const interests = [];
        for (let i = 0; i < response.length; i++) {
            const row = response[i];
            interests.push(this.parseBorrowInterest(row, market));
        }
        return interests;
    }
    parseFundingRateHistories(response, market = undefined, since = undefined, limit = undefined) {
        const rates = [];
        for (let i = 0; i < response.length; i++) {
            const entry = response[i];
            rates.push(this.parseFundingRateHistory(entry, market));
        }
        const sorted = this.sortBy(rates, 'timestamp');
        const symbol = (market === undefined) ? undefined : market['symbol'];
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    safeSymbol(marketId, market = undefined, delimiter = undefined, marketType = undefined) {
        market = this.safeMarket(marketId, market, delimiter, marketType);
        return market['symbol'];
    }
    parseFundingRate(contract, market = undefined) {
        throw new NotSupported(this.id + ' parseFundingRate() is not supported yet');
    }
    parseFundingRates(response, market = undefined) {
        const result = {};
        for (let i = 0; i < response.length; i++) {
            const parsed = this.parseFundingRate(response[i], market);
            result[parsed['symbol']] = parsed;
        }
        return result;
    }
    isTriggerOrder(params) {
        const isTrigger = this.safeValue2(params, 'trigger', 'stop');
        if (isTrigger) {
            params = this.omit(params, ['trigger', 'stop']);
        }
        return [isTrigger, params];
    }
    isPostOnly(isMarketOrder, exchangeSpecificParam, params = {}) {
        /**
         * @ignore
         * @method
         * @param {string} type Order type
         * @param {boolean} exchangeSpecificParam exchange specific postOnly
         * @param {object} params exchange specific params
         * @returns {boolean} true if a post only order, false otherwise
         */
        const timeInForce = this.safeStringUpper(params, 'timeInForce');
        let postOnly = this.safeValue2(params, 'postOnly', 'post_only', false);
        // we assume timeInForce is uppercase from safeStringUpper (params, 'timeInForce')
        const ioc = timeInForce === 'IOC';
        const fok = timeInForce === 'FOK';
        const timeInForcePostOnly = timeInForce === 'PO';
        postOnly = postOnly || timeInForcePostOnly || exchangeSpecificParam;
        if (postOnly) {
            if (ioc || fok) {
                throw new InvalidOrder(this.id + ' postOnly orders cannot have timeInForce equal to ' + timeInForce);
            }
            else if (isMarketOrder) {
                throw new InvalidOrder(this.id + ' market orders cannot be postOnly');
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    }
    async fetchLastPrices(params = {}) {
        throw new NotSupported(this.id + ' fetchLastPrices() is not supported yet');
    }
    async fetchTradingFees(params = {}) {
        throw new NotSupported(this.id + ' fetchTradingFees() is not supported yet');
    }
    async fetchTradingFee(symbol, params = {}) {
        if (!this.has['fetchTradingFees']) {
            throw new NotSupported(this.id + ' fetchTradingFee() is not supported yet');
        }
        return await this.fetchTradingFees(params);
    }
    parseOpenInterest(interest, market = undefined) {
        throw new NotSupported(this.id + ' parseOpenInterest () is not supported yet');
    }
    parseOpenInterests(response, market = undefined, since = undefined, limit = undefined) {
        const interests = [];
        for (let i = 0; i < response.length; i++) {
            const entry = response[i];
            const interest = this.parseOpenInterest(entry, market);
            interests.push(interest);
        }
        const sorted = this.sortBy(interests, 'timestamp');
        const symbol = this.safeString(market, 'symbol');
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    async fetchFundingRate(symbol, params = {}) {
        if (this.has['fetchFundingRates']) {
            await this.loadMarkets();
            const market = this.market(symbol);
            if (!market['contract']) {
                throw new BadSymbol(this.id + ' fetchFundingRate() supports contract markets only');
            }
            const rates = await this.fetchFundingRates([symbol], params);
            const rate = this.safeValue(rates, symbol);
            if (rate === undefined) {
                throw new NullResponse(this.id + ' fetchFundingRate () returned no data for ' + symbol);
            }
            else {
                return rate;
            }
        }
        else {
            throw new NotSupported(this.id + ' fetchFundingRate () is not supported yet');
        }
    }
    async fetchMarkOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name exchange#fetchMarkOHLCV
         * @description fetches historical mark price candlestick data containing the open, high, low, and close price of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
         */
        if (this.has['fetchMarkOHLCV']) {
            const request = {
                'price': 'mark',
            };
            return await this.fetchOHLCV(symbol, timeframe, since, limit, this.extend(request, params));
        }
        else {
            throw new NotSupported(this.id + ' fetchMarkOHLCV () is not supported yet');
        }
    }
    async fetchIndexOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name exchange#fetchIndexOHLCV
         * @description fetches historical index price candlestick data containing the open, high, low, and close price of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
         */
        if (this.has['fetchIndexOHLCV']) {
            const request = {
                'price': 'index',
            };
            return await this.fetchOHLCV(symbol, timeframe, since, limit, this.extend(request, params));
        }
        else {
            throw new NotSupported(this.id + ' fetchIndexOHLCV () is not supported yet');
        }
    }
    async fetchPremiumIndexOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name exchange#fetchPremiumIndexOHLCV
         * @description fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
         */
        if (this.has['fetchPremiumIndexOHLCV']) {
            const request = {
                'price': 'premiumIndex',
            };
            return await this.fetchOHLCV(symbol, timeframe, since, limit, this.extend(request, params));
        }
        else {
            throw new NotSupported(this.id + ' fetchPremiumIndexOHLCV () is not supported yet');
        }
    }
    handleTimeInForce(params = {}) {
        /**
         * @ignore
         * @method
         * * Must add timeInForce to this.options to use this method
         * @return {string} returns the exchange specific value for timeInForce
         */
        const timeInForce = this.safeStringUpper(params, 'timeInForce'); // supported values GTC, IOC, PO
        if (timeInForce !== undefined) {
            const exchangeValue = this.safeString(this.options['timeInForce'], timeInForce);
            if (exchangeValue === undefined) {
                throw new ExchangeError(this.id + ' does not support timeInForce "' + timeInForce + '"');
            }
            return exchangeValue;
        }
        return undefined;
    }
    convertTypeToAccount(account) {
        /**
         * @ignore
         * @method
         * * Must add accountsByType to this.options to use this method
         * @param {string} account key for account name in this.options['accountsByType']
         * @returns the exchange specific account name or the isolated margin id for transfers
         */
        const accountsByType = this.safeValue(this.options, 'accountsByType', {});
        const lowercaseAccount = account.toLowerCase();
        if (lowercaseAccount in accountsByType) {
            return accountsByType[lowercaseAccount];
        }
        else if ((account in this.markets) || (account in this.markets_by_id)) {
            const market = this.market(account);
            return market['id'];
        }
        else {
            return account;
        }
    }
    checkRequiredArgument(methodName, argument, argumentName, options = []) {
        /**
         * @ignore
         * @method
         * @param {string} argument the argument to check
         * @param {string} argumentName the name of the argument to check
         * @param {string} methodName the name of the method that the argument is being checked for
         * @param {[string]} options a list of options that the argument can be
         * @returns {undefined}
         */
        const optionsLength = options.length;
        if ((argument === undefined) || ((optionsLength > 0) && (!(this.inArray(argument, options))))) {
            const messageOptions = options.join(', ');
            let message = this.id + ' ' + methodName + '() requires a ' + argumentName + ' argument';
            if (messageOptions !== '') {
                message += ', one of ' + '(' + messageOptions + ')';
            }
            throw new ArgumentsRequired(message);
        }
    }
    checkRequiredMarginArgument(methodName, symbol, marginMode) {
        /**
         * @ignore
         * @method
         * @param {string} symbol unified symbol of the market
         * @param {string} methodName name of the method that requires a symbol
         * @param {string} marginMode is either 'isolated' or 'cross'
         */
        if ((marginMode === 'isolated') && (symbol === undefined)) {
            throw new ArgumentsRequired(this.id + ' ' + methodName + '() requires a symbol argument for isolated margin');
        }
        else if ((marginMode === 'cross') && (symbol !== undefined)) {
            throw new ArgumentsRequired(this.id + ' ' + methodName + '() cannot have a symbol argument for cross margin');
        }
    }
    checkRequiredSymbol(methodName, symbol) {
        /**
         * @ignore
         * @method
         * @param {string} symbol unified symbol of the market
         * @param {string} methodName name of the method that requires a symbol
         */
        this.checkRequiredArgument(methodName, symbol, 'symbol');
    }
    parseDepositWithdrawFees(response, codes = undefined, currencyIdKey = undefined) {
        /**
         * @ignore
         * @method
         * @param {[object]|object} response unparsed response from the exchange
         * @param {[string]|undefined} codes the unified currency codes to fetch transactions fees for, returns all currencies when undefined
         * @param {str|undefined} currencyIdKey *should only be undefined when response is a dictionary* the object key that corresponds to the currency id
         * @returns {object} objects with withdraw and deposit fees, indexed by currency codes
         */
        const depositWithdrawFees = {};
        codes = this.marketCodes(codes);
        const isArray = Array.isArray(response);
        let responseKeys = response;
        if (!isArray) {
            responseKeys = Object.keys(response);
        }
        for (let i = 0; i < responseKeys.length; i++) {
            const entry = responseKeys[i];
            const dictionary = isArray ? entry : response[entry];
            const currencyId = isArray ? this.safeString(dictionary, currencyIdKey) : entry;
            const currency = this.safeValue(this.currencies_by_id, currencyId);
            const code = this.safeString(currency, 'code', currencyId);
            if ((codes === undefined) || (this.inArray(code, codes))) {
                depositWithdrawFees[code] = this.parseDepositWithdrawFee(dictionary, currency);
            }
        }
        return depositWithdrawFees;
    }
    parseDepositWithdrawFee(fee, currency = undefined) {
        throw new NotSupported(this.id + ' parseDepositWithdrawFee() is not supported yet');
    }
    depositWithdrawFee(info) {
        return {
            'info': info,
            'withdraw': {
                'fee': undefined,
                'percentage': undefined,
            },
            'deposit': {
                'fee': undefined,
                'percentage': undefined,
            },
            'networks': {},
        };
    }
    assignDefaultDepositWithdrawFees(fee, currency = undefined) {
        /**
         * @ignore
         * @method
         * @description Takes a depositWithdrawFee structure and assigns the default values for withdraw and deposit
         * @param {object} fee A deposit withdraw fee structure
         * @param {object} currency A currency structure, the response from this.currency ()
         * @returns {object} A deposit withdraw fee structure
         */
        const networkKeys = Object.keys(fee['networks']);
        const numNetworks = networkKeys.length;
        if (numNetworks === 1) {
            fee['withdraw'] = fee['networks'][networkKeys[0]]['withdraw'];
            fee['deposit'] = fee['networks'][networkKeys[0]]['deposit'];
            return fee;
        }
        const currencyCode = this.safeString(currency, 'code');
        for (let i = 0; i < numNetworks; i++) {
            const network = networkKeys[i];
            if (network === currencyCode) {
                fee['withdraw'] = fee['networks'][networkKeys[i]]['withdraw'];
                fee['deposit'] = fee['networks'][networkKeys[i]]['deposit'];
            }
        }
        return fee;
    }
    parseIncome(info, market = undefined) {
        throw new NotSupported(this.id + ' parseIncome () is not supported yet');
    }
    parseIncomes(incomes, market = undefined, since = undefined, limit = undefined) {
        /**
         * @ignore
         * @method
         * @description parses funding fee info from exchange response
         * @param {[object]} incomes each item describes once instance of currency being received or paid
         * @param {object|undefined} market ccxt market
         * @param {int|undefined} since when defined, the response items are filtered to only include items after this timestamp
         * @param {int|undefined} limit limits the number of items in the response
         * @returns {[object]} an array of [funding history structures]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
         */
        const result = [];
        for (let i = 0; i < incomes.length; i++) {
            const entry = incomes[i];
            const parsed = this.parseIncome(entry, market);
            result.push(parsed);
        }
        const sorted = this.sortBy(result, 'timestamp');
        return this.filterBySinceLimit(sorted, since, limit);
    }
    getMarketFromSymbols(symbols = undefined) {
        if (symbols === undefined) {
            return undefined;
        }
        const firstMarket = this.safeString(symbols, 0);
        const market = this.market(firstMarket);
        return market;
    }
    rejectAllClients() {
        const clientMap = this.clients || {};
        const clients = Object.values(clientMap);
        for (let i = 0; i < clients.length; i++) {
            const client = clients[i];
            try {
                client.reject();
            }
            catch (e) {
                if (this.verbose) {
                    // eslint-disable-next-line no-console
                    console.log(e);
                }
            }
            client.reject();
        }
    }
    async setLeverage(symbol, buyLeverage, sellLeverage, params = {}) {
        throw new NotSupported(this.id + ' setLeverage() is not supported yet');
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        throw new NotSupported(this.id + ' setPositionMode() is not supported yet');
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        throw new NotSupported(this.id + ' setMarginMode() is not supported yet');
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        return {};
    }
    getUrl() {
        return this.urls['api']['ws'];
    }
    createClientFuture(url, messageHash) {
        url = url || this.getUrl();
        const client = this.client(url);
        return client.future(messageHash);
    }
    async watchHeartbeat() {
        const messageHash = 'ping';
        const url = this.getUrl();
        return await this.createClientFuture(url, messageHash);
    }
    handlePong(client, message) {
        client.lastPong = this.milliseconds();
        client.resolve('pong', 'ping');
        return message;
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class binance$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'binance',
            'name': 'Binance',
            'countries': ['JP', 'MT'],
            'rateLimit': 50,
            'certified': true,
            'pro': true,
            // new metainfo interface
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': true,
                'swap': true,
                'future': true,
                'option': undefined,
                'addMargin': true,
                'borrowMargin': true,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'cancelOrders': undefined,
                'createDepositAddress': false,
                'createOrder': true,
                'createPostOnlyOrder': true,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': true,
                'createStopMarketOrder': false,
                'createStopOrder': true,
                'editOrder': true,
                'fetchAccounts': undefined,
                'fetchBalance': true,
                'fetchBidsAsks': true,
                'fetchBorrowInterest': true,
                'fetchBorrowRate': true,
                'fetchBorrowRateHistories': false,
                'fetchBorrowRateHistory': true,
                'fetchBorrowRates': false,
                'fetchBorrowRatesPerSymbol': false,
                'fetchCanceledOrders': false,
                'fetchClosedOrder': false,
                'fetchClosedOrders': 'emulated',
                'fetchCurrencies': true,
                'fetchDeposit': false,
                'fetchDepositAddress': true,
                'fetchDepositAddresses': false,
                'fetchDepositAddressesByNetwork': false,
                'fetchDeposits': true,
                'fetchDepositWithdrawFee': 'emulated',
                'fetchDepositWithdrawFees': true,
                'fetchFundingHistory': true,
                'fetchFundingRate': true,
                'fetchFundingRateHistory': true,
                'fetchFundingRates': true,
                'fetchIndexOHLCV': true,
                'fetchL3OrderBook': undefined,
                'fetchLastPrices': true,
                'fetchLedger': true,
                'fetchLeverage': false,
                'fetchLeverageTiers': true,
                'fetchMarketLeverageTiers': 'emulated',
                'fetchMarkets': true,
                'fetchMarkOHLCV': true,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenInterest': true,
                'fetchOpenInterestHistory': true,
                'fetchOpenOrder': false,
                'fetchOpenOrders': true,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrderBooks': false,
                'fetchOrders': true,
                'fetchOrderTrades': true,
                'fetchPosition': undefined,
                'fetchPositions': true,
                'fetchPositionsRisk': true,
                'fetchPremiumIndexOHLCV': false,
                'fetchSettlementHistory': true,
                'fetchStatus': true,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': true,
                'fetchTrades': true,
                'fetchTradingFee': true,
                'fetchTradingFees': true,
                'fetchTradingLimits': undefined,
                'fetchTransactionFee': undefined,
                'fetchTransactionFees': true,
                'fetchTransactions': false,
                'fetchTransfers': true,
                'fetchWithdrawal': false,
                'fetchWithdrawals': true,
                'fetchWithdrawalWhitelist': false,
                'reduceMargin': true,
                'repayMargin': true,
                'setLeverage': true,
                'setMargin': false,
                'setMarginMode': true,
                'setPositionMode': true,
                'signIn': false,
                'transfer': true,
                'withdraw': true,
            },
            'timeframes': {
                '1s': '1s',
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '2h': '2h',
                '4h': '4h',
                '6h': '6h',
                '8h': '8h',
                '12h': '12h',
                '1d': '1d',
                '3d': '3d',
                '1w': '1w',
                '1M': '1M',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
                'test': {
                    'dapiPublic': 'https://testnet.binancefuture.com/dapi/v1',
                    'dapiPrivate': 'https://testnet.binancefuture.com/dapi/v1',
                    'dapiPrivateV2': 'https://testnet.binancefuture.com/dapi/v2',
                    'fapiPublic': 'https://testnet.binancefuture.com/fapi/v1',
                    'fapiPrivate': 'https://testnet.binancefuture.com/fapi/v1',
                    'fapiPrivateV2': 'https://testnet.binancefuture.com/fapi/v2',
                    'public': 'https://testnet.binance.vision/api/v3',
                    'private': 'https://testnet.binance.vision/api/v3',
                    'v1': 'https://testnet.binance.vision/api/v1',
                },
                'api': {
                    'wapi': 'https://api.binance.com/wapi/v3',
                    'sapi': 'https://api.binance.com/sapi/v1',
                    'sapiV2': 'https://api.binance.com/sapi/v2',
                    'sapiV3': 'https://api.binance.com/sapi/v3',
                    'sapiV4': 'https://api.binance.com/sapi/v4',
                    'dapiPublic': 'https://dapi.binance.com/dapi/v1',
                    'dapiPrivate': 'https://dapi.binance.com/dapi/v1',
                    'eapiPublic': 'https://eapi.binance.com/eapi/v1',
                    'eapiPrivate': 'https://eapi.binance.com/eapi/v1',
                    'dapiPrivateV2': 'https://dapi.binance.com/dapi/v2',
                    'dapiData': 'https://dapi.binance.com/futures/data',
                    'fapiPublic': 'https://fapi.binance.com/fapi/v1',
                    'fapiPrivate': 'https://fapi.binance.com/fapi/v1',
                    'fapiData': 'https://fapi.binance.com/futures/data',
                    'fapiPrivateV2': 'https://fapi.binance.com/fapi/v2',
                    'public': 'https://api.binance.com/api/v3',
                    'private': 'https://api.binance.com/api/v3',
                    'v1': 'https://api.binance.com/api/v1',
                },
                'www': 'https://www.binance.com',
                'referral': {
                    'url': 'https://accounts.binance.com/en/register?ref=D7YA7CLY',
                    'discount': 0.1,
                },
                'doc': [
                    'https://binance-docs.github.io/apidocs/spot/en',
                ],
                'api_management': 'https://www.binance.com/en/usercenter/settings/api-management',
                'fees': 'https://www.binance.com/en/fee/schedule',
            },
            'api': {
                // the API structure below will need 3-layer apidefs
                'sapi': {
                    // IP (api) = 1200 per minute => (rateLimit = 50)
                    // IP (sapi) request rate limit of 12 000 per minute
                    // 1 IP (sapi) => cost = 0.1
                    // 10 IP (sapi) => cost = 1
                    // UID (sapi) request rate limit of 180 000 per minute
                    // 1 UID (sapi) => cost = 1200 / 180 000 = 0.006667
                    'get': {
                        'system/status': 0.1,
                        // these endpoints require this.apiKey
                        'accountSnapshot': 240,
                        'margin/asset': 1,
                        'margin/pair': 1,
                        'margin/allAssets': 0.1,
                        'margin/allPairs': 0.1,
                        'margin/priceIndex': 1,
                        // these endpoints require this.apiKey + this.secret
                        'asset/assetDividend': 1,
                        'asset/dribblet': 0.1,
                        'asset/transfer': 0.1,
                        'asset/assetDetail': 0.1,
                        'asset/tradeFee': 0.1,
                        'asset/ledger-transfer/cloud-mining/queryByPage': 4,
                        'margin/loan': 1,
                        'margin/repay': 1,
                        'margin/account': 1,
                        'margin/transfer': 0.1,
                        'margin/interestHistory': 0.1,
                        'margin/forceLiquidationRec': 0.1,
                        'margin/order': 1,
                        'margin/openOrders': 1,
                        'margin/allOrders': 20,
                        'margin/myTrades': 1,
                        'margin/maxBorrowable': 5,
                        'margin/maxTransferable': 5,
                        'margin/tradeCoeff': 1,
                        'margin/isolated/transfer': 0.1,
                        'margin/isolated/account': 1,
                        'margin/isolated/pair': 1,
                        'margin/isolated/allPairs': 1,
                        'margin/isolated/accountLimit': 0.1,
                        'margin/interestRateHistory': 0.1,
                        'margin/orderList': 1,
                        'margin/allOrderList': 20,
                        'margin/openOrderList': 1,
                        'margin/crossMarginData': { 'cost': 0.1, 'noCoin': 0.5 },
                        'margin/isolatedMarginData': { 'cost': 0.1, 'noCoin': 1 },
                        'margin/isolatedMarginTier': 0.1,
                        'margin/rateLimit/order': 2,
                        'margin/dribblet': 0.1,
                        'margin/crossMarginCollateralRatio': 10,
                        'margin/exchange-small-liability': 0.6667,
                        'margin/exchange-small-liability-history': 0.6667,
                        'margin/next-hourly-interest-rate': 0.6667,
                        'loan/income': 40,
                        'loan/ongoing/orders': 40,
                        'loan/ltv/adjustment/history': 40,
                        'loan/borrow/history': 40,
                        'loan/repay/history': 40,
                        'loan/loanable/data': 40,
                        'loan/collateral/data': 40,
                        'loan/repay/collateral/rate': 600,
                        'loan/vip/ongoing/orders': 40,
                        'loan/vip/repay/history': 40,
                        'loan/vip/collateral/account': 600,
                        'fiat/orders': 600.03,
                        'fiat/payments': 0.1,
                        'futures/transfer': 1,
                        'futures/loan/borrow/history': 1,
                        'futures/loan/repay/history': 1,
                        'futures/loan/wallet': 1,
                        'futures/loan/adjustCollateral/history': 1,
                        'futures/loan/liquidationHistory': 1,
                        'rebate/taxQuery': 20.001,
                        // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
                        'capital/config/getall': 1,
                        'capital/deposit/address': 1,
                        'capital/deposit/hisrec': 0.1,
                        'capital/deposit/subAddress': 0.1,
                        'capital/deposit/subHisrec': 0.1,
                        'capital/withdraw/history': 0.1,
                        'capital/contract/convertible-coins': 4.0002,
                        'convert/tradeFlow': 0.6667,
                        'convert/exchangeInfo': 50,
                        'convert/assetInfo': 10,
                        'convert/orderStatus': 0.6667,
                        'account/status': 0.1,
                        'account/apiTradingStatus': 0.1,
                        'account/apiRestrictions/ipRestriction': 0.1,
                        'bnbBurn': 0.1,
                        // 'sub-account/assets': 1, (v3 endpoint)
                        'sub-account/futures/account': 1,
                        'sub-account/futures/accountSummary': 0.1,
                        'sub-account/futures/positionRisk': 1,
                        'sub-account/futures/internalTransfer': 0.1,
                        'sub-account/list': 0.1,
                        'sub-account/margin/account': 1,
                        'sub-account/margin/accountSummary': 1,
                        'sub-account/spotSummary': 0.1,
                        'sub-account/status': 1,
                        'sub-account/sub/transfer/history': 0.1,
                        'sub-account/transfer/subUserHistory': 0.1,
                        'sub-account/universalTransfer': 0.1,
                        'sub-account/apiRestrictions/ipRestriction/thirdPartyList': 1,
                        'managed-subaccount/asset': 0.1,
                        'managed-subaccount/accountSnapshot': 240,
                        'managed-subaccount/queryTransLogForInvestor': 0.1,
                        'managed-subaccount/queryTransLogForTradeParent': 0.1,
                        'managed-subaccount/fetch-future-asset': 0.1,
                        'managed-subaccount/marginAsset': 0.1,
                        // lending endpoints
                        'lending/daily/product/list': 0.1,
                        'lending/daily/userLeftQuota': 0.1,
                        'lending/daily/userRedemptionQuota': 0.1,
                        'lending/daily/token/position': 0.1,
                        'lending/union/account': 0.1,
                        'lending/union/purchaseRecord': 0.1,
                        'lending/union/redemptionRecord': 0.1,
                        'lending/union/interestHistory': 0.1,
                        'lending/project/list': 0.1,
                        'lending/project/position/list': 0.1,
                        // mining endpoints
                        'mining/pub/algoList': 0.1,
                        'mining/pub/coinList': 0.1,
                        'mining/worker/detail': 0.5,
                        'mining/worker/list': 0.5,
                        'mining/payment/list': 0.5,
                        'mining/statistics/user/status': 0.5,
                        'mining/statistics/user/list': 0.5,
                        'mining/payment/uid': 0.5,
                        // liquid swap endpoints
                        'bswap/pools': 0.1,
                        'bswap/liquidity': { 'cost': 0.1, 'noPoolId': 1 },
                        'bswap/liquidityOps': 20.001,
                        'bswap/quote': 1.00005,
                        'bswap/swap': 20.001,
                        'bswap/poolConfigure': 1.00005,
                        'bswap/addLiquidityPreview': 1.00005,
                        'bswap/removeLiquidityPreview': 1.00005,
                        'bswap/unclaimedRewards': 6.667,
                        'bswap/claimedHistory': 6.667,
                        // leveraged token endpoints
                        'blvt/tokenInfo': 0.1,
                        'blvt/subscribe/record': 0.1,
                        'blvt/redeem/record': 0.1,
                        'blvt/userLimit': 0.1,
                        // broker api TODO (NOT IN DOCS)
                        'apiReferral/ifNewUser': 1,
                        'apiReferral/customization': 1,
                        'apiReferral/userCustomization': 1,
                        'apiReferral/rebate/recentRecord': 1,
                        'apiReferral/rebate/historicalRecord': 1,
                        'apiReferral/kickback/recentRecord': 1,
                        'apiReferral/kickback/historicalRecord': 1,
                        // brokerage API TODO https://binance-docs.github.io/Brokerage-API/General/ does not state ratelimits
                        'broker/subAccountApi': 1,
                        'broker/subAccount': 1,
                        'broker/subAccountApi/commission/futures': 1,
                        'broker/subAccountApi/commission/coinFutures': 1,
                        'broker/info': 1,
                        'broker/transfer': 1,
                        'broker/transfer/futures': 1,
                        'broker/rebate/recentRecord': 1,
                        'broker/rebate/historicalRecord': 1,
                        'broker/subAccount/bnbBurn/status': 1,
                        'broker/subAccount/depositHist': 1,
                        'broker/subAccount/spotSummary': 1,
                        'broker/subAccount/marginSummary': 1,
                        'broker/subAccount/futuresSummary': 1,
                        'broker/rebate/futures/recentRecord': 1,
                        'broker/subAccountApi/ipRestriction': 1,
                        'broker/universalTransfer': 1,
                        // v2 not supported yet
                        // GET /sapi/v2/broker/subAccount/futuresSummary
                        'account/apiRestrictions': 0.1,
                        // c2c / p2p
                        'c2c/orderMatch/listUserOrderHistory': 0.1,
                        // nft endpoints
                        'nft/history/transactions': 20.001,
                        'nft/history/deposit': 20.001,
                        'nft/history/withdraw': 20.001,
                        'nft/user/getAsset': 20.001,
                        'pay/transactions': 20.001,
                        'giftcard/verify': 0.1,
                        'giftcard/cryptography/rsa-public-key': 0.1,
                        'giftcard/buyCode/token-limit': 0.1,
                        'algo/futures/openOrders': 0.1,
                        'algo/futures/historicalOrders': 0.1,
                        'algo/futures/subOrders': 0.1,
                        'portfolio/account': 0.1,
                        'portfolio/collateralRate': 5,
                        'portfolio/pmLoan': 3.3335,
                        'portfolio/interest-history': 0.6667,
                        'portfolio/interest-rate': 0.6667,
                        // staking
                        'staking/productList': 0.1,
                        'staking/position': 0.1,
                        'staking/stakingRecord': 0.1,
                        'staking/personalLeftQuota': 0.1,
                    },
                    'post': {
                        'asset/dust': 1,
                        'asset/dust-btc': 0.1,
                        'asset/transfer': 0.1,
                        'asset/get-funding-asset': 0.1,
                        'asset/convert-transfer': 0.033335,
                        'asset/convert-transfer/queryByPage': 0.033335,
                        'account/disableFastWithdrawSwitch': 0.1,
                        'account/enableFastWithdrawSwitch': 0.1,
                        // 'account/apiRestrictions/ipRestriction': 1, discontinued
                        // 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
                        'capital/withdraw/apply': 4.0002,
                        'capital/contract/convertible-coins': 4.0002,
                        'margin/transfer': 1,
                        'margin/loan': 20.001,
                        'margin/repay': 20.001,
                        'margin/order': 0.040002,
                        'margin/order/oco': 0.040002,
                        'margin/exchange-small-liability': 20.001,
                        // 'margin/isolated/create': 1, discontinued
                        'margin/isolated/transfer': 4.0002,
                        'margin/isolated/account': 2.0001,
                        'bnbBurn': 0.1,
                        'sub-account/virtualSubAccount': 0.1,
                        'sub-account/margin/transfer': 4.0002,
                        'sub-account/margin/enable': 0.1,
                        'sub-account/futures/enable': 0.1,
                        'sub-account/futures/transfer': 0.1,
                        'sub-account/futures/internalTransfer': 0.1,
                        'sub-account/transfer/subToSub': 0.1,
                        'sub-account/transfer/subToMaster': 0.1,
                        'sub-account/universalTransfer': 0.1,
                        // v2 not supported yet
                        // 'sub-account/subAccountApi/ipRestriction': 20,
                        'managed-subaccount/deposit': 0.1,
                        'managed-subaccount/withdraw': 0.1,
                        'userDataStream': 0.1,
                        'userDataStream/isolated': 0.1,
                        'futures/transfer': 0.1,
                        // lending
                        'lending/customizedFixed/purchase': 0.1,
                        'lending/daily/purchase': 0.1,
                        'lending/daily/redeem': 0.1,
                        // liquid swap endpoints
                        'bswap/liquidityAdd': 60,
                        'bswap/liquidityRemove': 60,
                        'bswap/swap': 60,
                        'bswap/claimRewards': 6.667,
                        // leveraged token endpoints
                        'blvt/subscribe': 0.1,
                        'blvt/redeem': 0.1,
                        // brokerage API TODO: NO MENTION OF RATELIMITS IN BROKERAGE DOCS
                        'apiReferral/customization': 1,
                        'apiReferral/userCustomization': 1,
                        'apiReferral/rebate/historicalRecord': 1,
                        'apiReferral/kickback/historicalRecord': 1,
                        'broker/subAccount': 1,
                        'broker/subAccount/margin': 1,
                        'broker/subAccount/futures': 1,
                        'broker/subAccountApi': 1,
                        'broker/subAccountApi/permission': 1,
                        'broker/subAccountApi/commission': 1,
                        'broker/subAccountApi/commission/futures': 1,
                        'broker/subAccountApi/commission/coinFutures': 1,
                        'broker/transfer': 1,
                        'broker/transfer/futures': 1,
                        'broker/rebate/historicalRecord': 1,
                        'broker/subAccount/bnbBurn/spot': 1,
                        'broker/subAccount/bnbBurn/marginInterest': 1,
                        'broker/subAccount/blvt': 1,
                        'broker/subAccountApi/ipRestriction': 1,
                        'broker/subAccountApi/ipRestriction/ipList': 1,
                        'broker/universalTransfer': 1,
                        'broker/subAccountApi/permission/universalTransfer': 1,
                        'broker/subAccountApi/permission/vanillaOptions': 1,
                        //
                        'giftcard/createCode': 0.1,
                        'giftcard/redeemCode': 0.1,
                        'giftcard/buyCode': 0.1,
                        'algo/futures/newOrderVp': 20.001,
                        'algo/futures/newOrderTwap': 20.001,
                        // staking
                        'staking/purchase': 0.1,
                        'staking/redeem': 0.1,
                        'staking/setAutoStaking': 0.1,
                        'portfolio/repay': 20.001,
                        'loan/borrow': 40,
                        'loan/repay': 40,
                        'loan/adjust/ltv': 40,
                        'loan/customize/margin_call': 40,
                        'loan/vip/repay': 40,
                        'convert/getQuote': 20.001,
                        'convert/acceptQuote': 3.3335,
                    },
                    'put': {
                        'userDataStream': 0.1,
                        'userDataStream/isolated': 0.1,
                    },
                    'delete': {
                        // 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
                        'margin/openOrders': 0.1,
                        'margin/order': 0.0066667,
                        'margin/orderList': 0.0066667,
                        'margin/isolated/account': 2.0001,
                        'userDataStream': 0.1,
                        'userDataStream/isolated': 0.1,
                        // brokerage API TODO NO MENTION OF RATELIMIT IN BROKERAGE DOCS
                        'broker/subAccountApi': 1,
                        'broker/subAccountApi/ipRestriction/ipList': 1,
                        'algo/futures/order': 0.1,
                    },
                },
                'sapiV2': {
                    'get': {
                        'sub-account/futures/account': 0.1,
                        'sub-account/futures/positionRisk': 0.1,
                    },
                },
                'sapiV3': {
                    'get': {
                        'sub-account/assets': 1,
                    },
                    'post': {
                        'asset/getUserAsset': 0.5,
                    },
                },
                'sapiV4': {
                    'get': {
                        'sub-account/assets': 1,
                    },
                },
                // deprecated
                'wapi': {
                    'post': {
                        'withdraw': 1,
                        'sub-account/transfer': 1,
                    },
                    'get': {
                        'depositHistory': 1,
                        'withdrawHistory': 1,
                        'depositAddress': 1,
                        'accountStatus': 1,
                        'systemStatus': 1,
                        'apiTradingStatus': 1,
                        'userAssetDribbletLog': 1,
                        'tradeFee': 1,
                        'assetDetail': 1,
                        'sub-account/list': 1,
                        'sub-account/transfer/history': 1,
                        'sub-account/assets': 1,
                    },
                },
                'dapiPublic': {
                    'get': {
                        'ping': 1,
                        'time': 1,
                        'exchangeInfo': 1,
                        'depth': { 'cost': 2, 'byLimit': [[50, 2], [100, 5], [500, 10], [1000, 20]] },
                        'trades': 5,
                        'historicalTrades': 20,
                        'aggTrades': 20,
                        'premiumIndex': 10,
                        'fundingRate': 1,
                        'klines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'continuousKlines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'indexPriceKlines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'markPriceKlines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'ticker/24hr': { 'cost': 1, 'noSymbol': 40 },
                        'ticker/price': { 'cost': 1, 'noSymbol': 2 },
                        'ticker/bookTicker': { 'cost': 1, 'noSymbol': 2 },
                        'openInterest': 1,
                        'pmExchangeInfo': 1,
                    },
                },
                'dapiData': {
                    'get': {
                        'openInterestHist': 1,
                        'topLongShortAccountRatio': 1,
                        'topLongShortPositionRatio': 1,
                        'globalLongShortAccountRatio': 1,
                        'takerBuySellVol': 1,
                        'basis': 1,
                    },
                },
                'dapiPrivate': {
                    'get': {
                        'positionSide/dual': 30,
                        'order': 1,
                        'openOrder': 1,
                        'openOrders': { 'cost': 1, 'noSymbol': 5 },
                        'allOrders': { 'cost': 20, 'noSymbol': 40 },
                        'balance': 1,
                        'account': 5,
                        'positionMargin/history': 1,
                        'positionRisk': 1,
                        'userTrades': { 'cost': 20, 'noSymbol': 40 },
                        'income': 20,
                        'leverageBracket': 1,
                        'forceOrders': { 'cost': 20, 'noSymbol': 50 },
                        'adlQuantile': 5,
                        'orderAmendment': 1,
                        'pmAccountInfo': 5,
                    },
                    'post': {
                        'positionSide/dual': 1,
                        'order': 4,
                        'batchOrders': 5,
                        'countdownCancelAll': 10,
                        'leverage': 1,
                        'marginType': 1,
                        'positionMargin': 1,
                        'listenKey': 1,
                    },
                    'put': {
                        'listenKey': 1,
                        'order': 1,
                        'batchOrders': 5,
                    },
                    'delete': {
                        'order': 1,
                        'allOpenOrders': 1,
                        'batchOrders': 5,
                        'listenKey': 1,
                    },
                },
                'dapiPrivateV2': {
                    'get': {
                        'leverageBracket': 1,
                    },
                },
                'fapiPublic': {
                    'get': {
                        'ping': 1,
                        'time': 1,
                        'exchangeInfo': 1,
                        'depth': { 'cost': 2, 'byLimit': [[50, 2], [100, 5], [500, 10], [1000, 20]] },
                        'trades': 5,
                        'historicalTrades': 20,
                        'aggTrades': 20,
                        'klines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'continuousKlines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'markPriceKlines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'indexPriceKlines': { 'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]] },
                        'fundingRate': 1,
                        'premiumIndex': 1,
                        'ticker/24hr': { 'cost': 1, 'noSymbol': 40 },
                        'ticker/price': { 'cost': 1, 'noSymbol': 2 },
                        'ticker/bookTicker': { 'cost': 1, 'noSymbol': 2 },
                        'openInterest': 1,
                        'indexInfo': 1,
                        'apiTradingStatus': { 'cost': 1, 'noSymbol': 10 },
                        'lvtKlines': 1,
                        'pmExchangeInfo': 1,
                    },
                },
                'fapiData': {
                    'get': {
                        'openInterestHist': 1,
                        'topLongShortAccountRatio': 1,
                        'topLongShortPositionRatio': 1,
                        'globalLongShortAccountRatio': 1,
                        'takerlongshortRatio': 1,
                    },
                },
                'fapiPrivate': {
                    'get': {
                        'forceOrders': { 'cost': 20, 'noSymbol': 50 },
                        'allOrders': 5,
                        'openOrder': 1,
                        'openOrders': 1,
                        'order': 1,
                        'account': 5,
                        'balance': 5,
                        'leverageBracket': 1,
                        'positionMargin/history': 1,
                        'positionRisk': 5,
                        'positionSide/dual': 30,
                        'userTrades': 5,
                        'income': 30,
                        'commissionRate': 20,
                        'apiTradingStatus': 1,
                        'multiAssetsMargin': 30,
                        // broker endpoints
                        'apiReferral/ifNewUser': 1,
                        'apiReferral/customization': 1,
                        'apiReferral/userCustomization': 1,
                        'apiReferral/traderNum': 1,
                        'apiReferral/overview': 1,
                        'apiReferral/tradeVol': 1,
                        'apiReferral/rebateVol': 1,
                        'apiReferral/traderSummary': 1,
                        'adlQuantile': 5,
                        'pmAccountInfo': 5,
                    },
                    'post': {
                        'batchOrders': 5,
                        'positionSide/dual': 1,
                        'positionMargin': 1,
                        'marginType': 1,
                        'order': 4,
                        'leverage': 1,
                        'listenKey': 1,
                        'countdownCancelAll': 10,
                        'multiAssetsMargin': 1,
                        // broker endpoints
                        'apiReferral/customization': 1,
                        'apiReferral/userCustomization': 1,
                    },
                    'put': {
                        'listenKey': 1,
                    },
                    'delete': {
                        'batchOrders': 1,
                        'order': 1,
                        'allOpenOrders': 1,
                        'listenKey': 1,
                    },
                },
                'fapiPrivateV2': {
                    'get': {
                        'account': 1,
                        'balance': 1,
                        'positionRisk': 1,
                    },
                },
                'eapiPublic': {
                    'get': {
                        'ping': 1,
                        'time': 1,
                        'exchangeInfo': 1,
                        'index': 1,
                        'ticker': 5,
                        'mark': 5,
                        'depth': 1,
                        'klines': 1,
                        'trades': 5,
                        'historicalTrades': 20,
                        'exerciseHistory': 3,
                        'openInterest': 3,
                    },
                },
                'eapiPrivate': {
                    'get': {
                        'account': 3,
                        'position': 5,
                        'openOrders': { 'cost': 1, 'noSymbol': 40 },
                        'historyOrders': 3,
                        'userTrades': 5,
                        'exerciseRecord': 5,
                        'bill': 1,
                        'marginAccount': 3,
                        'mmp': 1,
                        'countdownCancelAll': 1,
                        'order': 1,
                    },
                    'post': {
                        'order': 1,
                        'batchOrders': 5,
                        'listenKey': 1,
                        'mmpSet': 1,
                        'mmpReset': 1,
                        'countdownCancelAll': 1,
                        'countdownCancelAllHeartBeat': 10,
                    },
                    'put': {
                        'listenKey': 1,
                    },
                    'delete': {
                        'order': 1,
                        'batchOrders': 1,
                        'allOpenOrders': 1,
                        'allOpenOrdersByUnderlying': 1,
                        'listenKey': 1,
                    },
                },
                'public': {
                    'get': {
                        'ping': 1,
                        'time': 1,
                        'depth': { 'cost': 1, 'byLimit': [[100, 1], [500, 5], [1000, 10], [5000, 50]] },
                        'trades': 1,
                        'aggTrades': 1,
                        'historicalTrades': 5,
                        'klines': 1,
                        'ticker/24hr': { 'cost': 1, 'noSymbol': 40 },
                        'ticker/price': { 'cost': 1, 'noSymbol': 2 },
                        'ticker/bookTicker': { 'cost': 1, 'noSymbol': 2 },
                        'exchangeInfo': 10,
                    },
                    'put': {
                        'userDataStream': 1,
                    },
                    'post': {
                        'userDataStream': 1,
                    },
                    'delete': {
                        'userDataStream': 1,
                    },
                },
                'private': {
                    'get': {
                        'allOrderList': 10,
                        'openOrderList': 3,
                        'orderList': 2,
                        'order': 2,
                        'openOrders': { 'cost': 3, 'noSymbol': 40 },
                        'allOrders': 10,
                        'account': 10,
                        'myTrades': 10,
                        'rateLimit/order': 20,
                        'myPreventedMatches': 1,
                    },
                    'post': {
                        'order/oco': 1,
                        'order': 1,
                        'order/cancelReplace': 1,
                        'order/test': 1,
                    },
                    'delete': {
                        'openOrders': 1,
                        'orderList': 1,
                        'order': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'feeSide': 'get',
                    'tierBased': false,
                    'percentage': true,
                    'taker': this.parseNumber('0.001'),
                    'maker': this.parseNumber('0.001'),
                },
                'linear': {
                    'trading': {
                        'feeSide': 'quote',
                        'tierBased': true,
                        'percentage': true,
                        'taker': this.parseNumber('0.000400'),
                        'maker': this.parseNumber('0.000200'),
                        'tiers': {
                            'taker': [
                                [this.parseNumber('0'), this.parseNumber('0.000400')],
                                [this.parseNumber('250'), this.parseNumber('0.000400')],
                                [this.parseNumber('2500'), this.parseNumber('0.000350')],
                                [this.parseNumber('7500'), this.parseNumber('0.000320')],
                                [this.parseNumber('22500'), this.parseNumber('0.000300')],
                                [this.parseNumber('50000'), this.parseNumber('0.000270')],
                                [this.parseNumber('100000'), this.parseNumber('0.000250')],
                                [this.parseNumber('200000'), this.parseNumber('0.000220')],
                                [this.parseNumber('400000'), this.parseNumber('0.000200')],
                                [this.parseNumber('750000'), this.parseNumber('0.000170')],
                            ],
                            'maker': [
                                [this.parseNumber('0'), this.parseNumber('0.000200')],
                                [this.parseNumber('250'), this.parseNumber('0.000160')],
                                [this.parseNumber('2500'), this.parseNumber('0.000140')],
                                [this.parseNumber('7500'), this.parseNumber('0.000120')],
                                [this.parseNumber('22500'), this.parseNumber('0.000100')],
                                [this.parseNumber('50000'), this.parseNumber('0.000080')],
                                [this.parseNumber('100000'), this.parseNumber('0.000060')],
                                [this.parseNumber('200000'), this.parseNumber('0.000040')],
                                [this.parseNumber('400000'), this.parseNumber('0.000020')],
                                [this.parseNumber('750000'), this.parseNumber('0')],
                            ],
                        },
                    },
                },
                'inverse': {
                    'trading': {
                        'feeSide': 'base',
                        'tierBased': true,
                        'percentage': true,
                        'taker': this.parseNumber('0.000500'),
                        'maker': this.parseNumber('0.000100'),
                        'tiers': {
                            'taker': [
                                [this.parseNumber('0'), this.parseNumber('0.000500')],
                                [this.parseNumber('250'), this.parseNumber('0.000450')],
                                [this.parseNumber('2500'), this.parseNumber('0.000400')],
                                [this.parseNumber('7500'), this.parseNumber('0.000300')],
                                [this.parseNumber('22500'), this.parseNumber('0.000250')],
                                [this.parseNumber('50000'), this.parseNumber('0.000240')],
                                [this.parseNumber('100000'), this.parseNumber('0.000240')],
                                [this.parseNumber('200000'), this.parseNumber('0.000240')],
                                [this.parseNumber('400000'), this.parseNumber('0.000240')],
                                [this.parseNumber('750000'), this.parseNumber('0.000240')],
                            ],
                            'maker': [
                                [this.parseNumber('0'), this.parseNumber('0.000100')],
                                [this.parseNumber('250'), this.parseNumber('0.000080')],
                                [this.parseNumber('2500'), this.parseNumber('0.000050')],
                                [this.parseNumber('7500'), this.parseNumber('0.0000030')],
                                [this.parseNumber('22500'), this.parseNumber('0')],
                                [this.parseNumber('50000'), this.parseNumber('-0.000050')],
                                [this.parseNumber('100000'), this.parseNumber('-0.000060')],
                                [this.parseNumber('200000'), this.parseNumber('-0.000070')],
                                [this.parseNumber('400000'), this.parseNumber('-0.000080')],
                                [this.parseNumber('750000'), this.parseNumber('-0.000090')],
                            ],
                        },
                    },
                },
                'option': {},
            },
            'commonCurrencies': {
                'BCC': 'BCC',
                'YOYO': 'YOYOW',
            },
            'precisionMode': DECIMAL_PLACES$1,
            // exchange-specific options
            'options': {
                'sandboxMode': false,
                'fetchMarkets': [
                    'spot',
                    'linear',
                    'inverse', // allows CORS in browsers
                    // 'option', // does not allow CORS, enable outside of the browser only
                ],
                'fetchCurrencies': true,
                // 'fetchTradesMethod': 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades, eapiPublicGetTrades
                'defaultTimeInForce': 'GTC',
                'defaultType': 'spot',
                'defaultSubType': undefined,
                'hasAlreadyAuthenticatedSuccessfully': false,
                'warnOnFetchOpenOrdersWithoutSymbol': true,
                // not an error
                // https://github.com/ccxt/ccxt/issues/11268
                // https://github.com/ccxt/ccxt/pull/11624
                // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
                // binanceusdm
                'throwMarginModeAlreadySet': false,
                'fetchPositions': 'positionRisk',
                'recvWindow': 10 * 1000,
                'timeDifference': 0,
                'adjustForTimeDifference': false,
                'newOrderRespType': {
                    'market': 'FULL',
                    'limit': 'FULL', // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)
                },
                'quoteOrderQty': true,
                'broker': {
                    'spot': 'x-R4BD3S82',
                    'margin': 'x-R4BD3S82',
                    'future': 'x-xcKtGhcu',
                    'delivery': 'x-xcKtGhcu',
                },
                'accountsByType': {
                    'main': 'MAIN',
                    'spot': 'MAIN',
                    'funding': 'FUNDING',
                    'margin': 'MARGIN',
                    'cross': 'MARGIN',
                    'future': 'UMFUTURE',
                    'delivery': 'CMFUTURE',
                    'linear': 'UMFUTURE',
                    'inverse': 'CMFUTURE',
                },
                'accountsById': {
                    'MAIN': 'spot',
                    'FUNDING': 'funding',
                    'MARGIN': 'margin',
                    'UMFUTURE': 'linear',
                    'CMFUTURE': 'inverse',
                },
                'networks': {
                    'ERC20': 'ETH',
                    'TRC20': 'TRX',
                    'BEP2': 'BNB',
                    'BEP20': 'BSC',
                    'OMNI': 'OMNI',
                    'EOS': 'EOS',
                    'SPL': 'SOL',
                },
                // keeping this object for backward-compatibility
                'reverseNetworks': {
                    'tronscan.org': 'TRC20',
                    'etherscan.io': 'ERC20',
                    'bscscan.com': 'BSC',
                    'explorer.binance.org': 'BEP2',
                    'bithomp.com': 'XRP',
                    'bloks.io': 'EOS',
                    'stellar.expert': 'XLM',
                    'blockchair.com/bitcoin': 'BTC',
                    'blockchair.com/bitcoin-cash': 'BCH',
                    'blockchair.com/ecash': 'XEC',
                    'explorer.litecoin.net': 'LTC',
                    'explorer.avax.network': 'AVAX',
                    'solscan.io': 'SOL',
                    'polkadot.subscan.io': 'DOT',
                    'dashboard.internetcomputer.org': 'ICP',
                    'explorer.chiliz.com': 'CHZ',
                    'cardanoscan.io': 'ADA',
                    'mainnet.theoan.com': 'AION',
                    'algoexplorer.io': 'ALGO',
                    'explorer.ambrosus.com': 'AMB',
                    'viewblock.io/zilliqa': 'ZIL',
                    'viewblock.io/arweave': 'AR',
                    'explorer.ark.io': 'ARK',
                    'atomscan.com': 'ATOM',
                    'www.mintscan.io': 'CTK',
                    'explorer.bitcoindiamond.org': 'BCD',
                    'btgexplorer.com': 'BTG',
                    'bts.ai': 'BTS',
                    'explorer.celo.org': 'CELO',
                    'explorer.nervos.org': 'CKB',
                    'cerebro.cortexlabs.ai': 'CTXC',
                    'chainz.cryptoid.info': 'VIA',
                    'explorer.dcrdata.org': 'DCR',
                    'digiexplorer.info': 'DGB',
                    'dock.subscan.io': 'DOCK',
                    'dogechain.info': 'DOGE',
                    'explorer.elrond.com': 'EGLD',
                    'blockscout.com': 'ETC',
                    'explore-fetchhub.fetch.ai': 'FET',
                    'filfox.info': 'FIL',
                    'fio.bloks.io': 'FIO',
                    'explorer.firo.org': 'FIRO',
                    'neoscan.io': 'NEO',
                    'ftmscan.com': 'FTM',
                    'explorer.gochain.io': 'GO',
                    'block.gxb.io': 'GXS',
                    'hash-hash.info': 'HBAR',
                    'www.hiveblockexplorer.com': 'HIVE',
                    'explorer.helium.com': 'HNT',
                    'tracker.icon.foundation': 'ICX',
                    'www.iostabc.com': 'IOST',
                    'explorer.iota.org': 'IOTA',
                    'iotexscan.io': 'IOTX',
                    'irishub.iobscan.io': 'IRIS',
                    'kava.mintscan.io': 'KAVA',
                    'scope.klaytn.com': 'KLAY',
                    'kmdexplorer.io': 'KMD',
                    'kusama.subscan.io': 'KSM',
                    'explorer.lto.network': 'LTO',
                    'polygonscan.com': 'POLYGON',
                    'explorer.ont.io': 'ONT',
                    'minaexplorer.com': 'MINA',
                    'nanolooker.com': 'NANO',
                    'explorer.nebulas.io': 'NAS',
                    'explorer.nbs.plus': 'NBS',
                    'explorer.nebl.io': 'NEBL',
                    'nulscan.io': 'NULS',
                    'nxscan.com': 'NXS',
                    'explorer.harmony.one': 'ONE',
                    'explorer.poa.network': 'POA',
                    'qtum.info': 'QTUM',
                    'explorer.rsk.co': 'RSK',
                    'www.oasisscan.com': 'ROSE',
                    'ravencoin.network': 'RVN',
                    'sc.tokenview.com': 'SC',
                    'secretnodes.com': 'SCRT',
                    'explorer.skycoin.com': 'SKY',
                    'steemscan.com': 'STEEM',
                    'explorer.stacks.co': 'STX',
                    'www.thetascan.io': 'THETA',
                    'scan.tomochain.com': 'TOMO',
                    'explore.vechain.org': 'VET',
                    'explorer.vite.net': 'VITE',
                    'www.wanscan.org': 'WAN',
                    'wavesexplorer.com': 'WAVES',
                    'wax.eosx.io': 'WAXP',
                    'waltonchain.pro': 'WTC',
                    'chain.nem.ninja': 'XEM',
                    'verge-blockchain.info': 'XVG',
                    'explorer.yoyow.org': 'YOYOW',
                    'explorer.zcha.in': 'ZEC',
                    'explorer.zensystem.io': 'ZEN',
                },
                'networksById': {
                    'tronscan.org': 'TRC20',
                    'etherscan.io': 'ERC20',
                    'bscscan.com': 'BSC',
                    'explorer.binance.org': 'BEP2',
                    'bithomp.com': 'XRP',
                    'bloks.io': 'EOS',
                    'stellar.expert': 'XLM',
                    'blockchair.com/bitcoin': 'BTC',
                    'blockchair.com/bitcoin-cash': 'BCH',
                    'blockchair.com/ecash': 'XEC',
                    'explorer.litecoin.net': 'LTC',
                    'explorer.avax.network': 'AVAX',
                    'solscan.io': 'SOL',
                    'polkadot.subscan.io': 'DOT',
                    'dashboard.internetcomputer.org': 'ICP',
                    'explorer.chiliz.com': 'CHZ',
                    'cardanoscan.io': 'ADA',
                    'mainnet.theoan.com': 'AION',
                    'algoexplorer.io': 'ALGO',
                    'explorer.ambrosus.com': 'AMB',
                    'viewblock.io/zilliqa': 'ZIL',
                    'viewblock.io/arweave': 'AR',
                    'explorer.ark.io': 'ARK',
                    'atomscan.com': 'ATOM',
                    'www.mintscan.io': 'CTK',
                    'explorer.bitcoindiamond.org': 'BCD',
                    'btgexplorer.com': 'BTG',
                    'bts.ai': 'BTS',
                    'explorer.celo.org': 'CELO',
                    'explorer.nervos.org': 'CKB',
                    'cerebro.cortexlabs.ai': 'CTXC',
                    'chainz.cryptoid.info': 'VIA',
                    'explorer.dcrdata.org': 'DCR',
                    'digiexplorer.info': 'DGB',
                    'dock.subscan.io': 'DOCK',
                    'dogechain.info': 'DOGE',
                    'explorer.elrond.com': 'EGLD',
                    'blockscout.com': 'ETC',
                    'explore-fetchhub.fetch.ai': 'FET',
                    'filfox.info': 'FIL',
                    'fio.bloks.io': 'FIO',
                    'explorer.firo.org': 'FIRO',
                    'neoscan.io': 'NEO',
                    'ftmscan.com': 'FTM',
                    'explorer.gochain.io': 'GO',
                    'block.gxb.io': 'GXS',
                    'hash-hash.info': 'HBAR',
                    'www.hiveblockexplorer.com': 'HIVE',
                    'explorer.helium.com': 'HNT',
                    'tracker.icon.foundation': 'ICX',
                    'www.iostabc.com': 'IOST',
                    'explorer.iota.org': 'IOTA',
                    'iotexscan.io': 'IOTX',
                    'irishub.iobscan.io': 'IRIS',
                    'kava.mintscan.io': 'KAVA',
                    'scope.klaytn.com': 'KLAY',
                    'kmdexplorer.io': 'KMD',
                    'kusama.subscan.io': 'KSM',
                    'explorer.lto.network': 'LTO',
                    'polygonscan.com': 'POLYGON',
                    'explorer.ont.io': 'ONT',
                    'minaexplorer.com': 'MINA',
                    'nanolooker.com': 'NANO',
                    'explorer.nebulas.io': 'NAS',
                    'explorer.nbs.plus': 'NBS',
                    'explorer.nebl.io': 'NEBL',
                    'nulscan.io': 'NULS',
                    'nxscan.com': 'NXS',
                    'explorer.harmony.one': 'ONE',
                    'explorer.poa.network': 'POA',
                    'qtum.info': 'QTUM',
                    'explorer.rsk.co': 'RSK',
                    'www.oasisscan.com': 'ROSE',
                    'ravencoin.network': 'RVN',
                    'sc.tokenview.com': 'SC',
                    'secretnodes.com': 'SCRT',
                    'explorer.skycoin.com': 'SKY',
                    'steemscan.com': 'STEEM',
                    'explorer.stacks.co': 'STX',
                    'www.thetascan.io': 'THETA',
                    'scan.tomochain.com': 'TOMO',
                    'explore.vechain.org': 'VET',
                    'explorer.vite.net': 'VITE',
                    'www.wanscan.org': 'WAN',
                    'wavesexplorer.com': 'WAVES',
                    'wax.eosx.io': 'WAXP',
                    'waltonchain.pro': 'WTC',
                    'chain.nem.ninja': 'XEM',
                    'verge-blockchain.info': 'XVG',
                    'explorer.yoyow.org': 'YOYOW',
                    'explorer.zcha.in': 'ZEC',
                    'explorer.zensystem.io': 'ZEN',
                },
                'impliedNetworks': {
                    'ETH': { 'ERC20': 'ETH' },
                    'TRX': { 'TRC20': 'TRX' },
                },
                'legalMoney': {
                    'MXN': true,
                    'UGX': true,
                    'SEK': true,
                    'CHF': true,
                    'VND': true,
                    'AED': true,
                    'DKK': true,
                    'KZT': true,
                    'HUF': true,
                    'PEN': true,
                    'PHP': true,
                    'USD': true,
                    'TRY': true,
                    'EUR': true,
                    'NGN': true,
                    'PLN': true,
                    'BRL': true,
                    'ZAR': true,
                    'KES': true,
                    'ARS': true,
                    'RUB': true,
                    'AUD': true,
                    'NOK': true,
                    'CZK': true,
                    'GBP': true,
                    'UAH': true,
                    'GHS': true,
                    'HKD': true,
                    'CAD': true,
                    'INR': true,
                    'JPY': true,
                    'NZD': true,
                },
                'legalMoneyCurrenciesById': {
                    'BUSD': 'USD',
                },
            },
            // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2
            'exceptions': {
                'exact': {
                    'System is under maintenance.': OnMaintenance,
                    'System abnormality': ExchangeError,
                    'You are not authorized to execute this request.': PermissionDenied,
                    'API key does not exist': AuthenticationError,
                    'Order would trigger immediately.': OrderImmediatelyFillable,
                    'Stop price would trigger immediately.': OrderImmediatelyFillable,
                    'Order would immediately match and take.': OrderImmediatelyFillable,
                    'Account has insufficient balance for requested action.': InsufficientFunds,
                    'Rest API trading is not enabled.': ExchangeNotAvailable,
                    "You don't have permission.": PermissionDenied,
                    'Market is closed.': ExchangeNotAvailable,
                    'Too many requests. Please try again later.': DDoSProtection,
                    'This action is disabled on this account.': AccountSuspended,
                    'This type of sub-account exceeds the maximum number limit': BadRequest,
                    'This symbol is not permitted for this account.': PermissionDenied,
                    '-1000': ExchangeNotAvailable,
                    '-1001': ExchangeNotAvailable,
                    '-1002': AuthenticationError,
                    '-1003': RateLimitExceeded,
                    '-1004': DDoSProtection,
                    '-1005': PermissionDenied,
                    '-1006': BadResponse,
                    '-1007': RequestTimeout,
                    '-1010': BadResponse,
                    '-1011': PermissionDenied,
                    '-1013': InvalidOrder,
                    '-1014': InvalidOrder,
                    '-1015': RateLimitExceeded,
                    '-1016': ExchangeNotAvailable,
                    '-1020': BadRequest,
                    '-1021': InvalidNonce,
                    '-1022': AuthenticationError,
                    '-1023': BadRequest,
                    '-1099': AuthenticationError,
                    '-1100': BadRequest,
                    '-1101': BadRequest,
                    '-1102': BadRequest,
                    '-1103': BadRequest,
                    '-1104': BadRequest,
                    '-1105': BadRequest,
                    '-1106': BadRequest,
                    '-1108': BadRequest,
                    '-1109': AuthenticationError,
                    '-1110': BadRequest,
                    '-1111': BadRequest,
                    '-1112': InvalidOrder,
                    '-1113': BadRequest,
                    '-1114': BadRequest,
                    '-1115': BadRequest,
                    '-1116': BadRequest,
                    '-1117': BadRequest,
                    '-1118': BadRequest,
                    '-1119': BadRequest,
                    '-1120': BadRequest,
                    '-1121': BadSymbol,
                    '-1125': AuthenticationError,
                    '-1127': BadRequest,
                    '-1128': BadRequest,
                    '-1130': BadRequest,
                    '-1131': BadRequest,
                    '-1135': BadRequest,
                    '-1136': BadRequest,
                    '-2008': AuthenticationError,
                    '-2010': ExchangeError,
                    '-2011': OrderNotFound,
                    '-2013': OrderNotFound,
                    '-2014': AuthenticationError,
                    '-2015': AuthenticationError,
                    '-2016': BadRequest,
                    '-2018': InsufficientFunds,
                    '-2019': InsufficientFunds,
                    '-2020': OrderNotFillable,
                    '-2021': OrderImmediatelyFillable,
                    '-2022': InvalidOrder,
                    '-2023': InsufficientFunds,
                    '-2024': InsufficientFunds,
                    '-2025': InvalidOrder,
                    '-2026': InvalidOrder,
                    '-2027': InvalidOrder,
                    '-2028': InsufficientFunds,
                    '-3000': ExchangeError,
                    '-3001': AuthenticationError,
                    '-3002': BadSymbol,
                    '-3003': BadRequest,
                    '-3004': ExchangeError,
                    '-3005': InsufficientFunds,
                    '-3006': InsufficientFunds,
                    '-3007': ExchangeError,
                    '-3008': InsufficientFunds,
                    '-3009': BadRequest,
                    '-3010': BadRequest,
                    '-3011': BadRequest,
                    '-3012': InsufficientFunds,
                    '-3013': BadRequest,
                    '-3014': AccountSuspended,
                    '-3015': BadRequest,
                    '-3016': BadRequest,
                    '-3017': ExchangeError,
                    '-3018': AccountSuspended,
                    '-3019': AccountSuspended,
                    '-3020': InsufficientFunds,
                    '-3021': BadRequest,
                    '-3022': AccountSuspended,
                    '-3023': BadRequest,
                    '-3024': ExchangeError,
                    '-3025': BadRequest,
                    '-3026': BadRequest,
                    '-3027': BadSymbol,
                    '-3028': BadSymbol,
                    '-3029': ExchangeError,
                    '-3036': AccountSuspended,
                    '-3037': ExchangeError,
                    '-3038': BadRequest,
                    '-3041': InsufficientFunds,
                    '-3042': BadRequest,
                    '-3043': BadRequest,
                    '-3044': DDoSProtection,
                    '-3045': ExchangeError,
                    '-3999': ExchangeError,
                    '-4001': BadRequest,
                    '-4002': BadRequest,
                    '-4003': BadRequest,
                    '-4004': AuthenticationError,
                    '-4005': RateLimitExceeded,
                    '-4006': BadRequest,
                    '-4007': BadRequest,
                    '-4008': BadRequest,
                    '-4010': BadRequest,
                    '-4011': BadRequest,
                    '-4012': BadRequest,
                    '-4013': AuthenticationError,
                    '-4014': PermissionDenied,
                    '-4015': ExchangeError,
                    '-4016': PermissionDenied,
                    '-4017': PermissionDenied,
                    '-4018': BadSymbol,
                    '-4019': BadSymbol,
                    '-4021': BadRequest,
                    '-4022': BadRequest,
                    '-4023': ExchangeError,
                    '-4024': InsufficientFunds,
                    '-4025': InsufficientFunds,
                    '-4026': InsufficientFunds,
                    '-4027': ExchangeError,
                    '-4028': BadRequest,
                    '-4029': BadRequest,
                    '-4030': ExchangeError,
                    '-4031': ExchangeError,
                    '-4032': ExchangeError,
                    '-4033': BadRequest,
                    '-4034': ExchangeError,
                    '-4035': PermissionDenied,
                    '-4036': BadRequest,
                    '-4037': ExchangeError,
                    '-4038': ExchangeError,
                    '-4039': BadRequest,
                    '-4040': BadRequest,
                    '-4041': ExchangeError,
                    '-4042': ExchangeError,
                    '-4043': BadRequest,
                    '-4044': BadRequest,
                    '-4045': ExchangeError,
                    '-4046': AuthenticationError,
                    '-4047': BadRequest,
                    '-5001': BadRequest,
                    '-5002': InsufficientFunds,
                    '-5003': InsufficientFunds,
                    '-5004': BadRequest,
                    '-5005': InsufficientFunds,
                    '-5006': BadRequest,
                    '-5007': BadRequest,
                    '-5008': InsufficientFunds,
                    '-5009': BadRequest,
                    '-5010': ExchangeError,
                    '-5011': BadRequest,
                    '-5012': ExchangeError,
                    '-5013': InsufficientFunds,
                    '-5021': BadRequest,
                    '-6001': BadRequest,
                    '-6003': BadRequest,
                    '-6004': ExchangeError,
                    '-6005': InvalidOrder,
                    '-6006': BadRequest,
                    '-6007': BadRequest,
                    '-6008': BadRequest,
                    '-6009': RateLimitExceeded,
                    '-6011': BadRequest,
                    '-6012': InsufficientFunds,
                    '-6013': ExchangeError,
                    '-6014': BadRequest,
                    '-6015': BadRequest,
                    '-6016': BadRequest,
                    '-6017': BadRequest,
                    '-6018': BadRequest,
                    '-6019': AuthenticationError,
                    '-6020': BadRequest,
                    '-7001': BadRequest,
                    '-7002': BadRequest,
                    '-9000': InsufficientFunds,
                    '-10017': BadRequest,
                    '-11008': InsufficientFunds,
                    '-12014': RateLimitExceeded,
                    '-13000': BadRequest,
                    '-13001': BadRequest,
                    '-13002': BadRequest,
                    '-13003': BadRequest,
                    '-13004': BadRequest,
                    '-13005': BadRequest,
                    '-13006': InvalidOrder,
                    '-13007': AuthenticationError,
                    '-21001': BadRequest,
                    '-21002': BadRequest,
                    '-21003': BadRequest,
                    '100001003': AuthenticationError,
                    '200003903': AuthenticationError, // {"code":200003903,"msg":"Your identity verification has been rejected. Please complete identity verification again."}
                },
                'broad': {
                    'has no operation privilege': PermissionDenied,
                    'MAX_POSITION': InvalidOrder, // {"code":-2010,"msg":"Filter failure: MAX_POSITION"}
                },
            },
        });
    }
    isInverse(type, subType = undefined) {
        if (subType === undefined) {
            return type === 'delivery';
        }
        else {
            return subType === 'inverse';
        }
    }
    isLinear(type, subType = undefined) {
        if (subType === undefined) {
            return (type === 'future') || (type === 'swap');
        }
        else {
            return subType === 'linear';
        }
    }
    setSandboxMode(enable) {
        super.setSandboxMode(enable);
        this.options['sandboxMode'] = enable;
    }
    convertExpireDate(date) {
        // parse YYMMDD to timestamp
        const year = date.slice(0, 2);
        const month = date.slice(2, 4);
        const day = date.slice(4, 6);
        const reconstructedDate = '20' + year + '-' + month + '-' + day + 'T00:00:00Z';
        return reconstructedDate;
    }
    createExpiredOptionMarket(symbol) {
        // support expired option contracts
        const settle = 'USDT';
        const optionParts = symbol.split('-');
        const symbolBase = symbol.split('/');
        let base = undefined;
        if (symbol.indexOf('/') > -1) {
            base = this.safeString(symbolBase, 0);
        }
        else {
            base = this.safeString(optionParts, 0);
        }
        const expiry = this.safeString(optionParts, 1);
        const strike = this.safeString(optionParts, 2);
        const optionType = this.safeString(optionParts, 3);
        const datetime = this.convertExpireDate(expiry);
        const timestamp = this.parse8601(datetime);
        return {
            'id': base + '-' + expiry + '-' + strike + '-' + optionType,
            'symbol': base + '/' + settle + ':' + settle + '-' + expiry + '-' + strike + '-' + optionType,
            'base': base,
            'quote': settle,
            'baseId': base,
            'quoteId': settle,
            'active': undefined,
            'type': 'option',
            'linear': undefined,
            'inverse': undefined,
            'spot': false,
            'swap': false,
            'future': false,
            'option': true,
            'margin': false,
            'contract': true,
            'contractSize': undefined,
            'expiry': timestamp,
            'expiryDatetime': datetime,
            'optionType': (optionType === 'C') ? 'call' : 'put',
            'strike': strike,
            'settle': settle,
            'settleId': settle,
            'precision': {
                'amount': undefined,
                'price': undefined,
            },
            'limits': {
                'amount': {
                    'min': undefined,
                    'max': undefined,
                },
                'price': {
                    'min': undefined,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'info': undefined,
        };
    }
    market(symbol) {
        if (this.markets === undefined) {
            throw new ExchangeError(this.id + ' markets not loaded');
        }
        // defaultType has legacy support on binance
        let defaultType = this.safeString(this.options, 'defaultType');
        const defaultSubType = this.safeString(this.options, 'defaultSubType');
        const isLegacyLinear = defaultType === 'future';
        const isLegacyInverse = defaultType === 'delivery';
        const isLegacy = isLegacyLinear || isLegacyInverse;
        if (typeof symbol === 'string') {
            if (symbol in this.markets) {
                const market = this.markets[symbol];
                // begin diff
                if (isLegacy && market['spot']) {
                    const settle = isLegacyLinear ? market['quote'] : market['base'];
                    const futuresSymbol = symbol + ':' + settle;
                    if (futuresSymbol in this.markets) {
                        return this.markets[futuresSymbol];
                    }
                }
                else {
                    return market;
                }
                // end diff
            }
            else if (symbol in this.markets_by_id) {
                const markets = this.markets_by_id[symbol];
                // begin diff
                if (isLegacyLinear) {
                    defaultType = 'linear';
                }
                else if (isLegacyInverse) {
                    defaultType = 'inverse';
                }
                else if (defaultType === undefined) {
                    defaultType = defaultSubType;
                }
                // end diff
                for (let i = 0; i < markets.length; i++) {
                    const market = markets[i];
                    if (market[defaultType]) {
                        return market;
                    }
                }
                return markets[0];
            }
            else if ((symbol.indexOf('/') > -1) && (symbol.indexOf(':') < 0)) {
                // support legacy symbols
                const [base, quote] = symbol.split('/');
                const settle = (quote === 'USD') ? base : quote;
                const futuresSymbol = symbol + ':' + settle;
                if (futuresSymbol in this.markets) {
                    return this.markets[futuresSymbol];
                }
            }
            else if ((symbol.indexOf('-C') > -1) || (symbol.indexOf('-P') > -1)) { // both exchange-id and unified symbols are supported this way regardless of the defaultType
                return this.createExpiredOptionMarket(symbol);
            }
        }
        throw new BadSymbol(this.id + ' does not have market symbol ' + symbol);
    }
    safeMarket(marketId = undefined, market = undefined, delimiter = undefined, marketType = undefined) {
        const isOption = (marketId !== undefined) && ((marketId.indexOf('-C') > -1) || (marketId.indexOf('-P') > -1));
        if (isOption && !(marketId in this.markets_by_id)) {
            // handle expired option contracts
            return this.createExpiredOptionMarket(marketId);
        }
        return super.safeMarket(marketId, market, delimiter, marketType);
    }
    costToPrecision(symbol, cost) {
        return this.decimalToPrecision(cost, TRUNCATE$1, this.markets[symbol]['precision']['quote'], this.precisionMode, this.paddingMode);
    }
    currencyToPrecision(code, fee, networkCode = undefined) {
        // info is available in currencies only if the user has configured his api keys
        if (this.safeValue(this.currencies[code], 'precision') !== undefined) {
            return this.decimalToPrecision(fee, TRUNCATE$1, this.currencies[code]['precision'], this.precisionMode, this.paddingMode);
        }
        else {
            return this.numberToString(fee);
        }
    }
    nonce() {
        return this.milliseconds() - this.options['timeDifference'];
    }
    async fetchTime(params = {}) {
        /**
         * @method
         * @name binance#fetchTime
         * @description fetches the current integer timestamp in milliseconds from the exchange server
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {int} the current integer timestamp in milliseconds from the exchange server
         */
        const defaultType = this.safeString2(this.options, 'fetchTime', 'defaultType', 'spot');
        const type = this.safeString(params, 'type', defaultType);
        const query = this.omit(params, 'type');
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchTime', undefined, params);
        let method = 'publicGetTime';
        if (this.isLinear(type, subType)) {
            method = 'fapiPublicGetTime';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPublicGetTime';
        }
        const response = await this[method](query);
        return this.safeInteger(response, 'serverTime');
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name binance#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} an associative dictionary of currencies
         */
        const fetchCurrenciesEnabled = this.safeValue(this.options, 'fetchCurrencies');
        if (!fetchCurrenciesEnabled) {
            return undefined;
        }
        // this endpoint requires authentication
        // while fetchCurrencies is a public API method by design
        // therefore we check the keys here
        // and fallback to generating the currencies from the markets
        if (!this.checkRequiredCredentials(false)) {
            return undefined;
        }
        // sandbox/testnet does not support sapi endpoints
        const apiBackup = this.safeString(this.urls, 'apiBackup');
        if (apiBackup !== undefined) {
            return undefined;
        }
        const response = await this.sapiGetCapitalConfigGetall(params);
        const result = {};
        for (let i = 0; i < response.length; i++) {
            //
            //    {
            //        "coin": "LINK",
            //        "depositAllEnable": true,
            //        "withdrawAllEnable": true,
            //        "name": "ChainLink",
            //        "free": "0",
            //        "locked": "0",
            //        "freeze": "0",
            //        "withdrawing": "0",
            //        "ipoing": "0",
            //        "ipoable": "0",
            //        "storage": "0",
            //        "isLegalMoney": false,
            //        "trading": true,
            //        "networkList": [
            //            {
            //                "network": "BSC",
            //                "coin": "LINK",
            //                "withdrawIntegerMultiple": "0.00000001",
            //                "isDefault": false,
            //                "depositEnable": true,
            //                "withdrawEnable": true,
            //                "depositDesc": "",
            //                "withdrawDesc": "",
            //                "specialTips": "",
            //                "specialWithdrawTips": "The network you have selected is BSC. Please ensure that the withdrawal address supports the Binance Smart Chain network. You will lose your assets if the chosen platform does not support retrievals.",
            //                "name": "BNB Smart Chain (BEP20)",
            //                "resetAddressStatus": false,
            //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
            //                "addressRule": "",
            //                "memoRegex": "",
            //                "withdrawFee": "0.012",
            //                "withdrawMin": "0.024",
            //                "withdrawMax": "9999999999.99999999",
            //                "minConfirm": "15",
            //                "unLockConfirm": "0",
            //                "sameAddress": false,
            //                "estimatedArrivalTime": "5",
            //                "busy": false,
            //                "country": "AE,BINANCE_BAHRAIN_BSC"
            //            },
            //            {
            //                "network": "BNB",
            //                "coin": "LINK",
            //                "withdrawIntegerMultiple": "0.00000001",
            //                "isDefault": false,
            //                "depositEnable": true,
            //                "withdrawEnable": true,
            //                "depositDesc": "",
            //                "withdrawDesc": "",
            //                "specialTips": "Both a MEMO and an Address are required to successfully deposit your LINK BEP2 tokens to Binance.",
            //                "specialWithdrawTips": "",
            //                "name": "BNB Beacon Chain (BEP2)",
            //                "resetAddressStatus": false,
            //                "addressRegex": "^(bnb1)[0-9a-z]{38}$",
            //                "addressRule": "",
            //                "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
            //                "withdrawFee": "0.002",
            //                "withdrawMin": "0.01",
            //                "withdrawMax": "10000000000",
            //                "minConfirm": "1",
            //                "unLockConfirm": "0",
            //                "sameAddress": true,
            //                "estimatedArrivalTime": "5",
            //                "busy": false,
            //                "country": "AE,BINANCE_BAHRAIN_BSC"
            //            },
            //            {
            //                "network": "ETH",
            //                "coin": "LINK",
            //                "withdrawIntegerMultiple": "0.00000001",
            //                "isDefault": true,
            //                "depositEnable": true,
            //                "withdrawEnable": true,
            //                "depositDesc": "",
            //                "withdrawDesc": "",
            //                "name": "Ethereum (ERC20)",
            //                "resetAddressStatus": false,
            //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
            //                "addressRule": "",
            //                "memoRegex": "",
            //                "withdrawFee": "0.55",
            //                "withdrawMin": "1.1",
            //                "withdrawMax": "10000000000",
            //                "minConfirm": "12",
            //                "unLockConfirm": "0",
            //                "sameAddress": false,
            //                "estimatedArrivalTime": "5",
            //                "busy": false,
            //                "country": "AE,BINANCE_BAHRAIN_BSC"
            //            }
            //        ]
            //    }
            //
            const entry = response[i];
            const id = this.safeString(entry, 'coin');
            const name = this.safeString(entry, 'name');
            const code = this.safeCurrencyCode(id);
            let minPrecision = undefined;
            let isWithdrawEnabled = true;
            let isDepositEnabled = true;
            const networkList = this.safeValue(entry, 'networkList', []);
            const fees = {};
            let fee = undefined;
            for (let j = 0; j < networkList.length; j++) {
                const networkItem = networkList[j];
                const network = this.safeString(networkItem, 'network');
                // const name = this.safeString (networkItem, 'name');
                const withdrawFee = this.safeNumber(networkItem, 'withdrawFee');
                const depositEnable = this.safeValue(networkItem, 'depositEnable');
                const withdrawEnable = this.safeValue(networkItem, 'withdrawEnable');
                isDepositEnabled = isDepositEnabled || depositEnable;
                isWithdrawEnabled = isWithdrawEnabled || withdrawEnable;
                fees[network] = withdrawFee;
                const isDefault = this.safeValue(networkItem, 'isDefault');
                if (isDefault || (fee === undefined)) {
                    fee = withdrawFee;
                }
                const precisionTick = this.safeString(networkItem, 'withdrawIntegerMultiple');
                // avoid zero values, which are mostly from fiat or leveraged tokens : https://github.com/ccxt/ccxt/pull/14902#issuecomment-1271636731
                // so, when there is zero instead of i.e. 0.001, then we skip those cases, because we don't know the precision - it might be because of network is suspended or other reasons
                if (!Precise.stringEq(precisionTick, '0')) {
                    minPrecision = (minPrecision === undefined) ? precisionTick : Precise.stringMin(minPrecision, precisionTick);
                }
            }
            const trading = this.safeValue(entry, 'trading');
            const active = (isWithdrawEnabled && isDepositEnabled && trading);
            let maxDecimalPlaces = undefined;
            if (minPrecision !== undefined) {
                maxDecimalPlaces = parseInt(this.numberToString(this.precisionFromString(minPrecision)));
            }
            result[code] = {
                'id': id,
                'name': name,
                'code': code,
                'precision': maxDecimalPlaces,
                'info': entry,
                'active': active,
                'deposit': isDepositEnabled,
                'withdraw': isWithdrawEnabled,
                'networks': networkList,
                'fee': fee,
                'fees': fees,
                'limits': this.limits,
            };
        }
        return result;
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name binance#fetchMarkets
         * @description retrieves data on all markets for binance
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        let promises = [];
        const rawFetchMarkets = this.safeValue(this.options, 'fetchMarkets', ['spot', 'linear', 'inverse']);
        const sandboxMode = this.safeValue(this.options, 'sandboxMode', false);
        const fetchMarkets = [];
        for (let i = 0; i < rawFetchMarkets.length; i++) {
            const type = rawFetchMarkets[i];
            if (type === 'option' && sandboxMode) {
                continue;
            }
            fetchMarkets.push(type);
        }
        for (let i = 0; i < fetchMarkets.length; i++) {
            const marketType = fetchMarkets[i];
            if (marketType === 'spot') {
                promises.push(this.publicGetExchangeInfo(params));
            }
            else if (marketType === 'linear') {
                promises.push(this.fapiPublicGetExchangeInfo(params));
            }
            else if (marketType === 'inverse') {
                promises.push(this.dapiPublicGetExchangeInfo(params));
            }
            else if (marketType === 'option') {
                promises.push(this.eapiPublicGetExchangeInfo(params));
            }
            else {
                throw new ExchangeError(this.id + ' fetchMarkets() this.options fetchMarkets "' + marketType + '" is not a supported market type');
            }
        }
        promises = await Promise.all(promises);
        const spotMarkets = this.safeValue(this.safeValue(promises, 0), 'symbols', []);
        const futureMarkets = this.safeValue(this.safeValue(promises, 1), 'symbols', []);
        const deliveryMarkets = this.safeValue(this.safeValue(promises, 2), 'symbols', []);
        const optionMarkets = this.safeValue(this.safeValue(promises, 3), 'optionSymbols', []);
        let markets = spotMarkets;
        markets = this.arrayConcat(markets, futureMarkets);
        markets = this.arrayConcat(markets, deliveryMarkets);
        markets = this.arrayConcat(markets, optionMarkets);
        //
        // spot / margin
        //
        //     {
        //         "timezone":"UTC",
        //         "serverTime":1575416692969,
        //         "rateLimits":[
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
        //             {"rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":100},
        //             {"rateLimitType":"ORDERS","interval":"DAY","intervalNum":1,"limit":200000}
        //         ],
        //         "exchangeFilters":[],
        //         "symbols":[
        //             {
        //                 "symbol":"ETHBTC",
        //                 "status":"TRADING",
        //                 "baseAsset":"ETH",
        //                 "baseAssetPrecision":8,
        //                 "quoteAsset":"BTC",
        //                 "quotePrecision":8,
        //                 "baseCommissionPrecision":8,
        //                 "quoteCommissionPrecision":8,
        //                 "orderTypes":["LIMIT","LIMIT_MAKER","MARKET","STOP_LOSS_LIMIT","TAKE_PROFIT_LIMIT"],
        //                 "icebergAllowed":true,
        //                 "ocoAllowed":true,
        //                 "quoteOrderQtyMarketAllowed":true,
        //                 "allowTrailingStop":false,
        //                 "isSpotTradingAllowed":true,
        //                 "isMarginTradingAllowed":true,
        //                 "filters":[
        //                     {"filterType":"PRICE_FILTER","minPrice":"0.00000100","maxPrice":"100000.00000000","tickSize":"0.00000100"},
        //                     {"filterType":"PERCENT_PRICE","multiplierUp":"5","multiplierDown":"0.2","avgPriceMins":5},
        //                     {"filterType":"LOT_SIZE","minQty":"0.00100000","maxQty":"100000.00000000","stepSize":"0.00100000"},
        //                     {"filterType":"MIN_NOTIONAL","minNotional":"0.00010000","applyToMarket":true,"avgPriceMins":5},
        //                     {"filterType":"ICEBERG_PARTS","limit":10},
        //                     {"filterType":"MARKET_LOT_SIZE","minQty":"0.00000000","maxQty":"63100.00000000","stepSize":"0.00000000"},
        //                     {"filterType":"MAX_NUM_ORDERS","maxNumOrders":200},
        //                     {"filterType":"MAX_NUM_ALGO_ORDERS","maxNumAlgoOrders":5}
        //                 ],
        //                 "permissions":["SPOT","MARGIN"]}
        //             },
        //         ],
        //     }
        //
        // futures/usdt-margined (fapi)
        //
        //     {
        //         "timezone":"UTC",
        //         "serverTime":1575417244353,
        //         "rateLimits":[
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":1200}
        //         ],
        //         "exchangeFilters":[],
        //         "symbols":[
        //             {
        //                 "symbol":"BTCUSDT",
        //                 "status":"TRADING",
        //                 "maintMarginPercent":"2.5000",
        //                 "requiredMarginPercent":"5.0000",
        //                 "baseAsset":"BTC",
        //                 "quoteAsset":"USDT",
        //                 "pricePrecision":2,
        //                 "quantityPrecision":3,
        //                 "baseAssetPrecision":8,
        //                 "quotePrecision":8,
        //                 "filters":[
        //                     {"minPrice":"0.01","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.01"},
        //                     {"stepSize":"0.001","filterType":"LOT_SIZE","maxQty":"1000","minQty":"0.001"},
        //                     {"stepSize":"0.001","filterType":"MARKET_LOT_SIZE","maxQty":"1000","minQty":"0.001"},
        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
        //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
        //                 ],
        //                 "orderTypes":["LIMIT","MARKET","STOP"],
        //                 "timeInForce":["GTC","IOC","FOK","GTX"]
        //             }
        //         ]
        //     }
        //
        // delivery/coin-margined (dapi)
        //
        //     {
        //         "timezone": "UTC",
        //         "serverTime": 1597667052958,
        //         "rateLimits": [
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":6000},
        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":6000}
        //         ],
        //         "exchangeFilters": [],
        //         "symbols": [
        //             {
        //                 "symbol": "BTCUSD_200925",
        //                 "pair": "BTCUSD",
        //                 "contractType": "CURRENT_QUARTER",
        //                 "deliveryDate": 1601020800000,
        //                 "onboardDate": 1590739200000,
        //                 "contractStatus": "TRADING",
        //                 "contractSize": 100,
        //                 "marginAsset": "BTC",
        //                 "maintMarginPercent": "2.5000",
        //                 "requiredMarginPercent": "5.0000",
        //                 "baseAsset": "BTC",
        //                 "quoteAsset": "USD",
        //                 "pricePrecision": 1,
        //                 "quantityPrecision": 0,
        //                 "baseAssetPrecision": 8,
        //                 "quotePrecision": 8,
        //                 "equalQtyPrecision": 4,
        //                 "filters": [
        //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
        //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"stepSize":"0","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
        //                     {"multiplierDown":"0.9500","multiplierUp":"1.0500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
        //                 ],
        //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
        //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
        //             },
        //             {
        //                 "symbol": "BTCUSD_PERP",
        //                 "pair": "BTCUSD",
        //                 "contractType": "PERPETUAL",
        //                 "deliveryDate": 4133404800000,
        //                 "onboardDate": 1596006000000,
        //                 "contractStatus": "TRADING",
        //                 "contractSize": 100,
        //                 "marginAsset": "BTC",
        //                 "maintMarginPercent": "2.5000",
        //                 "requiredMarginPercent": "5.0000",
        //                 "baseAsset": "BTC",
        //                 "quoteAsset": "USD",
        //                 "pricePrecision": 1,
        //                 "quantityPrecision": 0,
        //                 "baseAssetPrecision": 8,
        //                 "quotePrecision": 8,
        //                 "equalQtyPrecision": 4,
        //                 "filters": [
        //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
        //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"stepSize":"1","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
        //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
        //                 ],
        //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
        //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
        //             }
        //         ]
        //     }
        //
        // options (eapi)
        //
        //     {
        //         "timezone": "UTC",
        //         "serverTime": 1675912490405,
        //         "optionContracts": [
        //             {
        //                 "id": 1,
        //                 "baseAsset": "SOL",
        //                 "quoteAsset": "USDT",
        //                 "underlying": "SOLUSDT",
        //                 "settleAsset": "USDT"
        //             },
        //             ...
        //         ],
        //         "optionAssets": [
        //             {"id":1,"name":"USDT"}
        //         ],
        //         "optionSymbols": [
        //             {
        //                 "contractId": 3,
        //                 "expiryDate": 1677225600000,
        //                 "filters": [
        //                     {"filterType":"PRICE_FILTER","minPrice":"724.6","maxPrice":"919.2","tickSize":"0.1"},
        //                     {"filterType":"LOT_SIZE","minQty":"0.01","maxQty":"1000","stepSize":"0.01"}
        //                 ],
        //                 "id": 2474,
        //                 "symbol": "ETH-230224-800-C",
        //                 "side": "CALL",
        //                 "strikePrice": "800.00000000",
        //                 "underlying": "ETHUSDT",
        //                 "unit": 1,
        //                 "makerFeeRate": "0.00020000",
        //                 "takerFeeRate": "0.00020000",
        //                 "minQty": "0.01",
        //                 "maxQty": "1000",
        //                 "initialMargin": "0.15000000",
        //                 "maintenanceMargin": "0.07500000",
        //                 "minInitialMargin": "0.10000000",
        //                 "minMaintenanceMargin": "0.05000000",
        //                 "priceScale": 1,
        //                 "quantityScale": 2,
        //                 "quoteAsset": "USDT"
        //             },
        //             ...
        //         ],
        //         "rateLimits": [
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":400},
        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":100},
        //             {"rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":30}
        //         ]
        //     }
        //
        if (this.options['adjustForTimeDifference']) {
            await this.loadTimeDifference();
        }
        const result = [];
        for (let i = 0; i < markets.length; i++) {
            result.push(this.parseMarket(markets[i]));
        }
        return result;
    }
    parseMarket(market) {
        let swap = false;
        let future = false;
        let option = false;
        const underlying = this.safeString(market, 'underlying');
        const id = this.safeString(market, 'symbol');
        const optionParts = id.split('-');
        const optionBase = this.safeString(optionParts, 0);
        const lowercaseId = this.safeStringLower(market, 'symbol');
        const baseId = this.safeString(market, 'baseAsset', optionBase);
        const quoteId = this.safeString(market, 'quoteAsset');
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        const contractType = this.safeString(market, 'contractType');
        let contract = ('contractType' in market);
        let expiry = this.safeInteger2(market, 'deliveryDate', 'expiryDate');
        let settleId = this.safeString(market, 'marginAsset');
        if ((contractType === 'PERPETUAL') || (expiry === 4133404800000)) { // some swap markets do not have contract type, eg: BTCST
            expiry = undefined;
            swap = true;
        }
        else if (underlying !== undefined) {
            contract = true;
            option = true;
            settleId = (settleId === undefined) ? 'USDT' : settleId;
        }
        else {
            future = true;
        }
        const settle = this.safeCurrencyCode(settleId);
        const spot = !contract;
        const filters = this.safeValue(market, 'filters', []);
        const filtersByType = this.indexBy(filters, 'filterType');
        const status = this.safeString2(market, 'status', 'contractStatus');
        let contractSize = undefined;
        let fees = this.fees;
        let linear = undefined;
        let inverse = undefined;
        const strike = this.safeInteger(market, 'strikePrice');
        let symbol = base + '/' + quote;
        if (contract) {
            if (swap) {
                symbol = symbol + ':' + settle;
            }
            else if (future) {
                symbol = symbol + ':' + settle + '-' + this.yymmdd(expiry);
            }
            else if (option) {
                symbol = symbol + ':' + settle + '-' + this.yymmdd(expiry) + '-' + this.numberToString(strike) + '-' + this.safeString(optionParts, 3);
            }
            contractSize = this.safeNumber2(market, 'contractSize', 'unit', this.parseNumber('1'));
            linear = settle === quote;
            inverse = settle === base;
            const feesType = linear ? 'linear' : 'inverse';
            fees = this.safeValue(this.fees, feesType, {});
        }
        let active = (status === 'TRADING');
        if (spot) {
            const permissions = this.safeValue(market, 'permissions', []);
            for (let j = 0; j < permissions.length; j++) {
                if (permissions[j] === 'TRD_GRP_003') {
                    active = false;
                    break;
                }
            }
        }
        const isMarginTradingAllowed = this.safeValue(market, 'isMarginTradingAllowed', false);
        let unifiedType = undefined;
        if (spot) {
            unifiedType = 'spot';
        }
        else if (swap) {
            unifiedType = 'swap';
        }
        else if (future) {
            unifiedType = 'future';
        }
        else if (option) {
            unifiedType = 'option';
            active = undefined;
        }
        const entry = {
            'id': id,
            'lowercaseId': lowercaseId,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': settleId,
            'type': unifiedType,
            'spot': spot,
            'margin': spot && isMarginTradingAllowed,
            'swap': swap,
            'future': future,
            'option': option,
            'active': active,
            'contract': contract,
            'linear': linear,
            'inverse': inverse,
            'taker': fees['trading']['taker'],
            'maker': fees['trading']['maker'],
            'contractSize': contractSize,
            'expiry': expiry,
            'expiryDatetime': this.iso8601(expiry),
            'strike': strike,
            'optionType': this.safeStringLower(market, 'side'),
            'precision': {
                'amount': this.safeInteger2(market, 'quantityPrecision', 'quantityScale'),
                'price': this.safeInteger2(market, 'pricePrecision', 'priceScale'),
                'base': this.safeInteger(market, 'baseAssetPrecision'),
                'quote': this.safeInteger(market, 'quotePrecision'),
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': undefined,
                },
                'amount': {
                    'min': this.safeNumber(market, 'minQty'),
                    'max': this.safeNumber(market, 'maxQty'),
                },
                'price': {
                    'min': undefined,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'info': market,
        };
        if ('PRICE_FILTER' in filtersByType) {
            const filter = this.safeValue(filtersByType, 'PRICE_FILTER', {});
            // PRICE_FILTER reports zero values for maxPrice
            // since they updated filter types in November 2018
            // https://github.com/ccxt/ccxt/issues/4286
            // therefore limits['price']['max'] doesn't have any meaningful value except undefined
            entry['limits']['price'] = {
                'min': this.safeNumber(filter, 'minPrice'),
                'max': this.safeNumber(filter, 'maxPrice'),
            };
            entry['precision']['price'] = this.precisionFromString(filter['tickSize']);
        }
        if ('LOT_SIZE' in filtersByType) {
            const filter = this.safeValue(filtersByType, 'LOT_SIZE', {});
            const stepSize = this.safeString(filter, 'stepSize');
            entry['precision']['amount'] = this.precisionFromString(stepSize);
            entry['limits']['amount'] = {
                'min': this.safeNumber(filter, 'minQty'),
                'max': this.safeNumber(filter, 'maxQty'),
            };
        }
        if ('MARKET_LOT_SIZE' in filtersByType) {
            const filter = this.safeValue(filtersByType, 'MARKET_LOT_SIZE', {});
            entry['limits']['market'] = {
                'min': this.safeNumber(filter, 'minQty'),
                'max': this.safeNumber(filter, 'maxQty'),
            };
        }
        if ('MIN_NOTIONAL' in filtersByType) {
            const filter = this.safeValue(filtersByType, 'MIN_NOTIONAL', {});
            entry['limits']['cost']['min'] = this.safeNumber2(filter, 'minNotional', 'notional');
        }
        return entry;
    }
    parseBalanceHelper(entry) {
        const account = this.account();
        account['used'] = this.safeString(entry, 'locked');
        account['free'] = this.safeString(entry, 'free');
        const interest = this.safeString(entry, 'interest');
        const debt = this.safeString(entry, 'borrowed');
        account['debt'] = Precise.stringAdd(debt, interest);
        return account;
    }
    parseBalance(response, type = undefined, marginMode = undefined) {
        const result = {
            'info': response,
        };
        let timestamp = undefined;
        const isolated = marginMode === 'isolated';
        const cross = (type === 'margin') || (marginMode === 'cross');
        if (!isolated && ((type === 'spot') || cross)) {
            timestamp = this.safeInteger(response, 'updateTime');
            const balances = this.safeValue2(response, 'balances', 'userAssets', []);
            for (let i = 0; i < balances.length; i++) {
                const balance = balances[i];
                const currencyId = this.safeString(balance, 'asset');
                const code = this.safeCurrencyCode(currencyId);
                const account = this.account();
                account['free'] = this.safeString(balance, 'free');
                account['used'] = this.safeString(balance, 'locked');
                if (cross) {
                    const debt = this.safeString(balance, 'borrowed');
                    const interest = this.safeString(balance, 'interest');
                    account['debt'] = Precise.stringAdd(debt, interest);
                }
                result[code] = account;
            }
        }
        else if (isolated) {
            const assets = this.safeValue(response, 'assets');
            for (let i = 0; i < assets.length; i++) {
                const asset = assets[i];
                const marketId = this.safeValue(asset, 'symbol');
                const symbol = this.safeSymbol(marketId, undefined, undefined, 'spot');
                const base = this.safeValue(asset, 'baseAsset', {});
                const quote = this.safeValue(asset, 'quoteAsset', {});
                const baseCode = this.safeCurrencyCode(this.safeString(base, 'asset'));
                const quoteCode = this.safeCurrencyCode(this.safeString(quote, 'asset'));
                const subResult = {};
                subResult[baseCode] = this.parseBalanceHelper(base);
                subResult[quoteCode] = this.parseBalanceHelper(quote);
                result[symbol] = this.safeBalance(subResult);
            }
        }
        else if (type === 'savings') {
            const positionAmountVos = this.safeValue(response, 'positionAmountVos', []);
            for (let i = 0; i < positionAmountVos.length; i++) {
                const entry = positionAmountVos[i];
                const currencyId = this.safeString(entry, 'asset');
                const code = this.safeCurrencyCode(currencyId);
                const account = this.account();
                const usedAndTotal = this.safeString(entry, 'amount');
                account['total'] = usedAndTotal;
                account['used'] = usedAndTotal;
                result[code] = account;
            }
        }
        else if (type === 'funding') {
            for (let i = 0; i < response.length; i++) {
                const entry = response[i];
                const account = this.account();
                const currencyId = this.safeString(entry, 'asset');
                const code = this.safeCurrencyCode(currencyId);
                account['free'] = this.safeString(entry, 'free');
                const frozen = this.safeString(entry, 'freeze');
                const withdrawing = this.safeString(entry, 'withdrawing');
                const locked = this.safeString(entry, 'locked');
                account['used'] = Precise.stringAdd(frozen, Precise.stringAdd(locked, withdrawing));
                result[code] = account;
            }
        }
        else {
            let balances = response;
            if (!Array.isArray(response)) {
                balances = this.safeValue(response, 'assets', []);
            }
            for (let i = 0; i < balances.length; i++) {
                const balance = balances[i];
                const currencyId = this.safeString(balance, 'asset');
                const code = this.safeCurrencyCode(currencyId);
                const account = this.account();
                account['free'] = this.safeString(balance, 'availableBalance');
                account['used'] = this.safeString(balance, 'initialMargin');
                account['total'] = this.safeString2(balance, 'marginBalance', 'balance');
                result[code] = account;
            }
        }
        result['timestamp'] = timestamp;
        result['datetime'] = this.iso8601(timestamp);
        return isolated ? result : this.safeBalance(result);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name binance#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string|undefined} params.type 'future', 'delivery', 'savings', 'funding', or 'spot'
         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for margin trading, uses this.options.defaultMarginMode if not passed, defaults to undefined/None/null
         * @param {[string]|undefined} params.symbols unified market symbols, only used in isolated margin mode
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const defaultType = this.safeString2(this.options, 'fetchBalance', 'defaultType', 'spot');
        let type = this.safeString(params, 'type', defaultType);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchBalance', undefined, params);
        const [marginMode, query] = this.handleMarginModeAndParams('fetchBalance', params);
        let method = 'privateGetAccount';
        const request = {};
        if (this.isLinear(type, subType)) {
            const options = this.safeValue(this.options, type, {});
            const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});
            method = this.safeString(fetchBalanceOptions, 'method', 'fapiPrivateV2GetAccount');
            type = 'linear';
        }
        else if (this.isInverse(type, subType)) {
            const options = this.safeValue(this.options, type, {});
            const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});
            method = this.safeString(fetchBalanceOptions, 'method', 'dapiPrivateGetAccount');
            type = 'inverse';
        }
        else if (marginMode === 'isolated') {
            method = 'sapiGetMarginIsolatedAccount';
            const paramSymbols = this.safeValue(params, 'symbols');
            if (paramSymbols !== undefined) {
                let symbols = '';
                if (Array.isArray(paramSymbols)) {
                    symbols = this.marketId(paramSymbols[0]);
                    for (let i = 1; i < paramSymbols.length; i++) {
                        const symbol = paramSymbols[i];
                        const id = this.marketId(symbol);
                        symbols += ',' + id;
                    }
                }
                else {
                    symbols = paramSymbols;
                }
                request['symbols'] = symbols;
            }
        }
        else if ((type === 'margin') || (marginMode === 'cross')) {
            method = 'sapiGetMarginAccount';
        }
        else if (type === 'savings') {
            method = 'sapiGetLendingUnionAccount';
        }
        else if (type === 'funding') {
            method = 'sapiPostAssetGetFundingAsset';
        }
        const requestParams = this.omit(query, ['type', 'symbols']);
        const response = await this[method](this.extend(request, requestParams));
        //
        // spot
        //
        //     {
        //         makerCommission: 10,
        //         takerCommission: 10,
        //         buyerCommission: 0,
        //         sellerCommission: 0,
        //         canTrade: true,
        //         canWithdraw: true,
        //         canDeposit: true,
        //         updateTime: 1575357359602,
        //         accountType: "MARGIN",
        //         balances: [
        //             { asset: "BTC", free: "0.00219821", locked: "0.00000000"  },
        //         ]
        //     }
        //
        // margin (cross)
        //
        //     {
        //         "borrowEnabled":true,
        //         "marginLevel":"999.00000000",
        //         "totalAssetOfBtc":"0.00000000",
        //         "totalLiabilityOfBtc":"0.00000000",
        //         "totalNetAssetOfBtc":"0.00000000",
        //         "tradeEnabled":true,
        //         "transferEnabled":true,
        //         "userAssets":[
        //             {"asset":"MATIC","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
        //             {"asset":"VET","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
        //             {"asset":"USDT","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"}
        //         ],
        //     }
        //
        // margin (isolated)
        //
        //    {
        //        info: {
        //            assets: [
        //                {
        //                    baseAsset: {
        //                        asset: '1INCH',
        //                        borrowEnabled: true,
        //                        borrowed: '0',
        //                        free: '0',
        //                        interest: '0',
        //                        locked: '0',
        //                        netAsset: '0',
        //                        netAssetOfBtc: '0',
        //                        repayEnabled: true,
        //                        totalAsset: '0'
        //                    },
        //                    quoteAsset: {
        //                        asset: 'USDT',
        //                        borrowEnabled: true,
        //                        borrowed: '0',
        //                        free: '11',
        //                        interest: '0',
        //                        locked: '0',
        //                        netAsset: '11',
        //                        netAssetOfBtc: '0.00054615',
        //                        repayEnabled: true,
        //                        totalAsset: '11'
        //                    },
        //                    symbol: '1INCHUSDT',
        //                    isolatedCreated: true,
        //                    marginLevel: '999',
        //                    marginLevelStatus: 'EXCESSIVE',
        //                    marginRatio: '5',
        //                    indexPrice: '0.59184331',
        //                    liquidatePrice: '0',
        //                    liquidateRate: '0',
        //                    tradeEnabled: true,
        //                    enabled: true
        //                },
        //            ]
        //        }
        //    }
        //
        // futures (fapi)
        //
        //     fapiPrivateGetAccount
        //
        //     {
        //         "feeTier":0,
        //         "canTrade":true,
        //         "canDeposit":true,
        //         "canWithdraw":true,
        //         "updateTime":0,
        //         "totalInitialMargin":"0.00000000",
        //         "totalMaintMargin":"0.00000000",
        //         "totalWalletBalance":"4.54000000",
        //         "totalUnrealizedProfit":"0.00000000",
        //         "totalMarginBalance":"4.54000000",
        //         "totalPositionInitialMargin":"0.00000000",
        //         "totalOpenOrderInitialMargin":"0.00000000",
        //         "maxWithdrawAmount":"4.54000000",
        //         "assets":[
        //             {
        //                 "asset":"USDT",
        //                 "walletBalance":"4.54000000",
        //                 "unrealizedProfit":"0.00000000",
        //                 "marginBalance":"4.54000000",
        //                 "maintMargin":"0.00000000",
        //                 "initialMargin":"0.00000000",
        //                 "positionInitialMargin":"0.00000000",
        //                 "openOrderInitialMargin":"0.00000000",
        //                 "maxWithdrawAmount":"4.54000000"
        //             }
        //         ],
        //         "positions":[
        //             {
        //                 "symbol":"BTCUSDT",
        //                 "initialMargin":"0.00000",
        //                 "maintMargin":"0.00000",
        //                 "unrealizedProfit":"0.00000000",
        //                 "positionInitialMargin":"0.00000",
        //                 "openOrderInitialMargin":"0.00000"
        //             }
        //         ]
        //     }
        //
        //     fapiPrivateV2GetAccount
        //
        //     {
        //         "feeTier":0,
        //         "canTrade":true,
        //         "canDeposit":true,
        //         "canWithdraw":true,
        //         "updateTime":0,
        //         "totalInitialMargin":"0.00000000",
        //         "totalMaintMargin":"0.00000000",
        //         "totalWalletBalance":"0.00000000",
        //         "totalUnrealizedProfit":"0.00000000",
        //         "totalMarginBalance":"0.00000000",
        //         "totalPositionInitialMargin":"0.00000000",
        //         "totalOpenOrderInitialMargin":"0.00000000",
        //         "totalCrossWalletBalance":"0.00000000",
        //         "totalCrossUnPnl":"0.00000000",
        //         "availableBalance":"0.00000000",
        //         "maxWithdrawAmount":"0.00000000",
        //         "assets":[
        //             {
        //                 "asset":"BNB",
        //                 "walletBalance":"0.01000000",
        //                 "unrealizedProfit":"0.00000000",
        //                 "marginBalance":"0.01000000",
        //                 "maintMargin":"0.00000000",
        //                 "initialMargin":"0.00000000",
        //                 "positionInitialMargin":"0.00000000",
        //                 "openOrderInitialMargin":"0.00000000",
        //                 "maxWithdrawAmount":"0.01000000",
        //                 "crossWalletBalance":"0.01000000",
        //                 "crossUnPnl":"0.00000000",
        //                 "availableBalance":"0.01000000"
        //             }
        //         ],
        //         "positions":[
        //             {
        //                 "symbol":"BTCUSDT",
        //                 "initialMargin":"0",
        //                 "maintMargin":"0",
        //                 "unrealizedProfit":"0.00000000",
        //                 "positionInitialMargin":"0",
        //                 "openOrderInitialMargin":"0",
        //                 "leverage":"20",
        //                 "isolated":false,
        //                 "entryPrice":"0.00000",
        //                 "maxNotional":"5000000",
        //                 "positionSide":"BOTH"
        //             },
        //         ]
        //     }
        //
        //     fapiPrivateV2GetBalance
        //
        //     [
        //         {
        //             "accountAlias":"FzFzXquXXqoC",
        //             "asset":"BNB",
        //             "balance":"0.01000000",
        //             "crossWalletBalance":"0.01000000",
        //             "crossUnPnl":"0.00000000",
        //             "availableBalance":"0.01000000",
        //             "maxWithdrawAmount":"0.01000000"
        //         }
        //     ]
        //
        // savings
        //
        //     {
        //       "totalAmountInBTC": "0.3172",
        //       "totalAmountInUSDT": "10000",
        //       "totalFixedAmountInBTC": "0.3172",
        //       "totalFixedAmountInUSDT": "10000",
        //       "totalFlexibleInBTC": "0",
        //       "totalFlexibleInUSDT": "0",
        //       "positionAmountVos": [
        //         {
        //           "asset": "USDT",
        //           "amount": "10000",
        //           "amountInBTC": "0.3172",
        //           "amountInUSDT": "10000"
        //         },
        //         {
        //           "asset": "BUSD",
        //           "amount": "0",
        //           "amountInBTC": "0",
        //           "amountInUSDT": "0"
        //         }
        //       ]
        //     }
        //
        // binance pay
        //
        //     [
        //       {
        //         "asset": "BUSD",
        //         "free": "1129.83",
        //         "locked": "0",
        //         "freeze": "0",
        //         "withdrawing": "0"
        //       }
        //     ]
        //
        return this.parseBalance(response, type, marginMode);
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 5000, see https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#order-book
        }
        let method = 'publicGetDepth';
        if (market['option']) {
            method = 'eapiPublicGetDepth';
        }
        else if (market['linear']) {
            method = 'fapiPublicGetDepth';
        }
        else if (market['inverse']) {
            method = 'dapiPublicGetDepth';
        }
        const response = await this[method](this.extend(request, params));
        //
        // future
        //
        //     {
        //         "lastUpdateId":333598053905,
        //         "E":1618631511986,
        //         "T":1618631511964,
        //         "bids":[
        //             ["2493.56","20.189"],
        //             ["2493.54","1.000"],
        //             ["2493.51","0.005"]
        //         ],
        //         "asks":[
        //             ["2493.57","0.877"],
        //             ["2493.62","0.063"],
        //             ["2493.71","12.054"],
        //         ]
        //     }
        //
        // options (eapi)
        //
        //     {
        //         "bids": [
        //             ["108.7","16.08"],
        //             ["106","21.29"],
        //             ["82.4","0.02"]
        //         ],
        //         "asks": [
        //             ["111.4","19.52"],
        //             ["119.9","17.6"],
        //             ["141.2","31"]
        //         ],
        //         "T": 1676771382078,
        //         "u": 1015939
        //     }
        //
        const timestamp = this.safeInteger(response, 'T');
        const orderbook = this.parseOrderBook(response, symbol, timestamp);
        orderbook['nonce'] = this.safeInteger2(response, 'lastUpdateId', 'u');
        return orderbook;
    }
    parseTicker(ticker, market = undefined) {
        //
        //     {
        //         symbol: 'ETHBTC',
        //         priceChange: '0.00068700',
        //         priceChangePercent: '2.075',
        //         weightedAvgPrice: '0.03342681',
        //         prevClosePrice: '0.03310300',
        //         lastPrice: '0.03378900',
        //         lastQty: '0.07700000',
        //         bidPrice: '0.03378900',
        //         bidQty: '7.16800000',
        //         askPrice: '0.03379000',
        //         askQty: '24.00000000',
        //         openPrice: '0.03310200',
        //         highPrice: '0.03388900',
        //         lowPrice: '0.03306900',
        //         volume: '205478.41000000',
        //         quoteVolume: '6868.48826294',
        //         openTime: 1601469986932,
        //         closeTime: 1601556386932,
        //         firstId: 196098772,
        //         lastId: 196186315,
        //         count: 87544
        //     }
        //
        // coinm
        //     {
        //         baseVolume: '214549.95171161',
        //         closeTime: '1621965286847',
        //         count: '1283779',
        //         firstId: '152560106',
        //         highPrice: '39938.3',
        //         lastId: '153843955',
        //         lastPrice: '37993.4',
        //         lastQty: '1',
        //         lowPrice: '36457.2',
        //         openPrice: '37783.4',
        //         openTime: '1621878840000',
        //         pair: 'BTCUSD',
        //         priceChange: '210.0',
        //         priceChangePercent: '0.556',
        //         symbol: 'BTCUSD_PERP',
        //         volume: '81990451',
        //         weightedAvgPrice: '38215.08713747'
        //     }
        // spot bidsAsks
        //     {
        //         "symbol":"ETHBTC",
        //         "bidPrice":"0.07466800",
        //         "bidQty":"5.31990000",
        //         "askPrice":"0.07466900",
        //         "askQty":"10.93540000"
        //     }
        // usdm bidsAsks
        //     {
        //         "symbol":"BTCUSDT",
        //         "bidPrice":"21321.90",
        //         "bidQty":"33.592",
        //         "askPrice":"21322.00",
        //         "askQty":"1.427",
        //         "time":"1673899207538"
        //     }
        // coinm bidsAsks
        //     {
        //         "symbol":"BTCUSD_PERP",
        //         "pair":"BTCUSD",
        //         "bidPrice":"21301.2",
        //         "bidQty":"188",
        //         "askPrice":"21301.3",
        //         "askQty":"10302",
        //         "time":"1673899278514"
        //     }
        //
        const timestamp = this.safeInteger(ticker, 'closeTime');
        let marketType = undefined;
        if (('time' in ticker)) {
            marketType = 'contract';
        }
        if (marketType === undefined) {
            marketType = ('bidQty' in ticker) ? 'spot' : 'contract';
        }
        const marketId = this.safeString(ticker, 'symbol');
        const symbol = this.safeSymbol(marketId, market, undefined, marketType);
        const last = this.safeString(ticker, 'lastPrice');
        const isCoinm = ('baseVolume' in ticker);
        let baseVolume = undefined;
        let quoteVolume = undefined;
        if (isCoinm) {
            baseVolume = this.safeString(ticker, 'baseVolume');
            quoteVolume = this.safeString(ticker, 'volume');
        }
        else {
            baseVolume = this.safeString(ticker, 'volume');
            quoteVolume = this.safeString(ticker, 'quoteVolume');
        }
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeString(ticker, 'highPrice'),
            'low': this.safeString(ticker, 'lowPrice'),
            'bid': this.safeString(ticker, 'bidPrice'),
            'bidVolume': this.safeString(ticker, 'bidQty'),
            'ask': this.safeString(ticker, 'askPrice'),
            'askVolume': this.safeString(ticker, 'askQty'),
            'vwap': this.safeString(ticker, 'weightedAvgPrice'),
            'open': this.safeString(ticker, 'openPrice'),
            'close': last,
            'last': last,
            'previousClose': this.safeString(ticker, 'prevClosePrice'),
            'change': this.safeString(ticker, 'priceChange'),
            'percentage': this.safeString(ticker, 'priceChangePercent'),
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchStatus(params = {}) {
        /**
         * @method
         * @name binance#fetchStatus
         * @description the latest known information on the availability of the exchange API
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
         */
        const response = await this.sapiGetSystemStatus(params);
        //
        //     {
        //         "status": 0,              // 0: normal，1：system maintenance
        //         "msg": "normal"           // "normal", "system_maintenance"
        //     }
        //
        const statusRaw = this.safeString(response, 'status');
        return {
            'status': this.safeString({ '0': 'ok', '1': 'maintenance' }, statusRaw, statusRaw),
            'updated': undefined,
            'eta': undefined,
            'url': undefined,
            'info': response,
        };
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name binance#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let method = 'publicGetTicker24hr';
        if (market['linear']) {
            method = 'fapiPublicGetTicker24hr';
        }
        else if (market['inverse']) {
            method = 'dapiPublicGetTicker24hr';
        }
        const response = await this[method](this.extend(request, params));
        if (Array.isArray(response)) {
            const firstTicker = this.safeValue(response, 0, {});
            return this.parseTicker(firstTicker, market);
        }
        return this.parseTicker(response, market);
    }
    async fetchBidsAsks(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchBidsAsks
         * @description fetches the bid and ask price and volume for multiple markets
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the bids and asks for, all markets are returned if not assigned
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        let market = undefined;
        if (symbols !== undefined) {
            const first = this.safeString(symbols, 0);
            market = this.market(first);
        }
        let type = undefined;
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchBidsAsks', market, params);
        [type, params] = this.handleMarketTypeAndParams('fetchBidsAsks', market, params);
        let method = undefined;
        if (this.isLinear(type, subType)) {
            method = 'fapiPublicGetTickerBookTicker';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPublicGetTickerBookTicker';
        }
        else {
            method = 'publicGetTickerBookTicker';
        }
        const response = await this[method](params);
        return this.parseTickers(response, symbols);
    }
    async fetchLastPrices(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchLastPrices
         * @description fetches the last price for multiple markets
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the last prices
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.getMarketFromSymbols(symbols);
        const [marketType, query] = this.handleMarketTypeAndParams('fetchLastPrices', market, params);
        let method = undefined;
        if (marketType === 'future') {
            method = 'fapiPublicGetTickerPrice';
            //
            //     [
            //         {
            //             "symbol": "LTCBTC",
            //             "price": "4.00000200"
            //             "time": 1589437530011
            //         },
            //         ...
            //     ]
            //
        }
        else if (marketType === 'delivery') {
            method = 'dapiPublicGetTickerPrice';
            //
            //     [
            //         {
            //             "symbol": "BTCUSD_200626",
            //             "ps": "9647.8",
            //             "price": "9647.8",
            //             "time": 1591257246176
            //         }
            //     ]
            //
        }
        else if (marketType === 'spot') {
            method = 'publicGetTickerPrice';
            //
            //     [
            //         {
            //             "symbol": "LTCBTC",
            //             "price": "4.00000200"
            //         },
            //         ...
            //     ]
            //
        }
        else {
            throw new NotSupported(this.id + ' fetchLastPrices() does not support ' + marketType + ' markets yet');
        }
        const response = await this[method](query);
        return this.parseLastPrices(response, symbols);
    }
    parseLastPrice(info, market = undefined) {
        //
        // spot
        //
        //     {
        //         "symbol": "LTCBTC",
        //         "price": "4.00000200"
        //     }
        //
        // usdm (swap/future)
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "price": "6000.01",
        //         "time": 1589437530011   // Transaction time
        //     }
        //
        //
        // coinm (swap/future)
        //
        //     {
        //         "symbol": "BTCUSD_200626", // symbol ("BTCUSD_200626", "BTCUSD_PERP", etc..)
        //         "ps": "BTCUSD", // pair
        //         "price": "9647.8",
        //         "time": 1591257246176
        //     }
        //
        const marketId = this.safeString(info, 'symbol');
        const defaultType = this.safeString(this.options, 'defaultType', 'spot');
        market = this.safeMarket(marketId, market, undefined, defaultType);
        const timestamp = this.safeInteger(info, 'time');
        const price = this.safeNumber(info, 'price');
        return {
            'symbol': market['symbol'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'price': price,
            'side': undefined,
            'baseVolume': undefined,
            'quoteVolume': undefined,
            'info': info,
        };
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchTickers
         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const defaultType = this.safeString2(this.options, 'fetchTickers', 'defaultType', 'spot');
        const type = this.safeString(params, 'type', defaultType);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchTickers', undefined, params);
        const query = this.omit(params, 'type');
        let defaultMethod = undefined;
        if (this.isLinear(type, subType)) {
            defaultMethod = 'fapiPublicGetTicker24hr';
        }
        else if (this.isInverse(type, subType)) {
            defaultMethod = 'dapiPublicGetTicker24hr';
        }
        else {
            defaultMethod = 'publicGetTicker24hr';
        }
        const method = this.safeString(this.options, 'fetchTickersMethod', defaultMethod);
        const response = await this[method](query);
        return this.parseTickers(response, symbols);
    }
    parseOHLCV(ohlcv, market = undefined) {
        // when api method = publicGetKlines || fapiPublicGetKlines || dapiPublicGetKlines
        //     [
        //         1591478520000, // open time
        //         "0.02501300",  // open
        //         "0.02501800",  // high
        //         "0.02500000",  // low
        //         "0.02500000",  // close
        //         "22.19000000", // volume
        //         1591478579999, // close time
        //         "0.55490906",  // quote asset volume
        //         40,            // number of trades
        //         "10.92900000", // taker buy base asset volume
        //         "0.27336462",  // taker buy quote asset volume
        //         "0"            // ignore
        //     ]
        //
        //  when api method = fapiPublicGetMarkPriceKlines || fapiPublicGetIndexPriceKlines
        //     [
        //         [
        //         1591256460000,          // Open time
        //         "9653.29201333",        // Open
        //         "9654.56401333",        // High
        //         "9653.07367333",        // Low
        //         "9653.07367333",        // Close (or latest price)
        //         "0",                    // Ignore
        //         1591256519999,          // Close time
        //         "0",                    // Ignore
        //         60,                     // Number of bisic data
        //         "0",                    // Ignore
        //         "0",                    // Ignore
        //         "0"                     // Ignore
        //         ]
        //     ]
        //
        // options
        //
        //     {
        //         "open": "32.2",
        //         "high": "32.2",
        //         "low": "32.2",
        //         "close": "32.2",
        //         "volume": "0",
        //         "interval": "5m",
        //         "tradeCount": 0,
        //         "takerVolume": "0",
        //         "takerAmount": "0",
        //         "amount": "0",
        //         "openTime": 1677096900000,
        //         "closeTime": 1677097200000
        //     }
        //
        return [
            this.safeInteger2(ohlcv, 0, 'closeTime'),
            this.safeNumber2(ohlcv, 1, 'open'),
            this.safeNumber2(ohlcv, 2, 'high'),
            this.safeNumber2(ohlcv, 3, 'low'),
            this.safeNumber2(ohlcv, 4, 'close'),
            this.safeNumber2(ohlcv, 5, 'volume'),
        ];
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchOHLCV
         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string|undefined} params.price "mark" or "index" for mark price and index price candles
         * @param {int|undefined} params.until timestamp in ms of the latest candle to fetch
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets
        // the reality is that the time range wider than 500 candles won't work right
        const defaultLimit = 500;
        const maxLimit = 1500;
        const price = this.safeString(params, 'price');
        const until = this.safeInteger(params, 'until');
        params = this.omit(params, ['price', 'until']);
        limit = (limit === undefined) ? defaultLimit : Math.min(limit, maxLimit);
        const request = {
            'interval': this.safeString(this.timeframes, timeframe, timeframe),
            'limit': limit,
        };
        if (price === 'index') {
            request['pair'] = market['id']; // Index price takes this argument instead of symbol
        }
        else {
            request['symbol'] = market['id'];
        }
        // const duration = this.parseTimeframe (timeframe);
        if (since !== undefined) {
            request['startTime'] = since;
            //
            // It didn't work before without the endTime
            // https://github.com/ccxt/ccxt/issues/8454
            //
            if (market['inverse']) {
                if (since > 0) {
                    const duration = this.parseTimeframe(timeframe);
                    const endTime = this.sum(since, limit * duration * 1000 - 1);
                    const now = this.milliseconds();
                    request['endTime'] = Math.min(now, endTime);
                }
            }
        }
        if (until !== undefined) {
            request['endTime'] = until;
        }
        let method = 'publicGetKlines';
        if (market['option']) {
            method = 'eapiPublicGetKlines';
        }
        else if (price === 'mark') {
            if (market['inverse']) {
                method = 'dapiPublicGetMarkPriceKlines';
            }
            else {
                method = 'fapiPublicGetMarkPriceKlines';
            }
        }
        else if (price === 'index') {
            if (market['inverse']) {
                method = 'dapiPublicGetIndexPriceKlines';
            }
            else {
                method = 'fapiPublicGetIndexPriceKlines';
            }
        }
        else if (market['linear']) {
            method = 'fapiPublicGetKlines';
        }
        else if (market['inverse']) {
            method = 'dapiPublicGetKlines';
        }
        const response = await this[method](this.extend(request, params));
        //
        //     [
        //         [1591478520000,"0.02501300","0.02501800","0.02500000","0.02500000","22.19000000",1591478579999,"0.55490906",40,"10.92900000","0.27336462","0"],
        //         [1591478580000,"0.02499600","0.02500900","0.02499400","0.02500300","21.34700000",1591478639999,"0.53370468",24,"7.53800000","0.18850725","0"],
        //         [1591478640000,"0.02500800","0.02501100","0.02500300","0.02500800","154.14200000",1591478699999,"3.85405839",97,"5.32300000","0.13312641","0"],
        //     ]
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "open": "32.2",
        //             "high": "32.2",
        //             "low": "32.2",
        //             "close": "32.2",
        //             "volume": "0",
        //             "interval": "5m",
        //             "tradeCount": 0,
        //             "takerVolume": "0",
        //             "takerAmount": "0",
        //             "amount": "0",
        //             "openTime": 1677096900000,
        //             "closeTime": 1677097200000
        //         }
        //     ]
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }
    parseTrade(trade, market = undefined) {
        if ('isDustTrade' in trade) {
            return this.parseDustTrade(trade, market);
        }
        //
        // aggregate trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
        //
        //     {
        //         "a": 26129,         // Aggregate tradeId
        //         "p": "0.01633102",  // Price
        //         "q": "4.70443515",  // Quantity
        //         "f": 27781,         // First tradeId
        //         "l": 27781,         // Last tradeId
        //         "T": 1498793709153, // Timestamp
        //         "m": true,          // Was the buyer the maker?
        //         "M": true           // Was the trade the best price match?
        //     }
        //
        // recent public trades and old public trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data
        //
        //     {
        //         "id": 28457,
        //         "price": "4.00000100",
        //         "qty": "12.00000000",
        //         "time": 1499865549590,
        //         "isBuyerMaker": true,
        //         "isBestMatch": true
        //     }
        //
        // private trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data
        //
        //     {
        //         "symbol": "BNBBTC",
        //         "id": 28457,
        //         "orderId": 100234,
        //         "price": "4.00000100",
        //         "qty": "12.00000000",
        //         "commission": "10.10000000",
        //         "commissionAsset": "BNB",
        //         "time": 1499865549590,
        //         "isBuyer": true,
        //         "isMaker": false,
        //         "isBestMatch": true
        //     }
        //
        // futures trades
        // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data
        //
        //     {
        //       "accountId": 20,
        //       "buyer": False,
        //       "commission": "-0.07819010",
        //       "commissionAsset": "USDT",
        //       "counterPartyId": 653,
        //       "id": 698759,
        //       "maker": False,
        //       "orderId": 25851813,
        //       "price": "7819.01",
        //       "qty": "0.002",
        //       "quoteQty": "0.01563",
        //       "realizedPnl": "-0.91539999",
        //       "side": "SELL",
        //       "symbol": "BTCUSDT",
        //       "time": 1569514978020
        //     }
        //     {
        //       "symbol": "BTCUSDT",
        //       "id": 477128891,
        //       "orderId": 13809777875,
        //       "side": "SELL",
        //       "price": "38479.55",
        //       "qty": "0.001",
        //       "realizedPnl": "-0.00009534",
        //       "marginAsset": "USDT",
        //       "quoteQty": "38.47955",
        //       "commission": "-0.00076959",
        //       "commissionAsset": "USDT",
        //       "time": 1612733566708,
        //       "positionSide": "BOTH",
        //       "maker": true,
        //       "buyer": false
        //     }
        //
        // { respType: FULL }
        //
        //     {
        //       "price": "4000.00000000",
        //       "qty": "1.00000000",
        //       "commission": "4.00000000",
        //       "commissionAsset": "USDT",
        //       "tradeId": "1234",
        //     }
        //
        // options: fetchMyTrades
        //
        //     {
        //         "id": 1125899906844226012,
        //         "tradeId": 73,
        //         "orderId": 4638761100843040768,
        //         "symbol": "ETH-230211-1500-C",
        //         "price": "18.70000000",
        //         "quantity": "-0.57000000",
        //         "fee": "0.17305890",
        //         "realizedProfit": "-3.53400000",
        //         "side": "SELL",
        //         "type": "LIMIT",
        //         "volatility": "0.30000000",
        //         "liquidity": "MAKER",
        //         "time": 1676085216845,
        //         "priceScale": 1,
        //         "quantityScale": 2,
        //         "optionSide": "CALL",
        //         "quoteAsset": "USDT"
        //     }
        //
        // options: fetchTrades
        //
        //     {
        //         "id": 1,
        //         "symbol": "ETH-230216-1500-C",
        //         "price": "35.5",
        //         "qty": "0.03",
        //         "quoteQty": "1.065",
        //         "side": 1,
        //         "time": 1676366446072
        //     }
        //
        const timestamp = this.safeInteger2(trade, 'T', 'time');
        const price = this.safeString2(trade, 'p', 'price');
        let amount = this.safeString2(trade, 'q', 'qty');
        amount = this.safeString(trade, 'quantity', amount);
        const cost = this.safeString2(trade, 'quoteQty', 'baseQty'); // inverse futures
        const marketId = this.safeString(trade, 'symbol');
        const isSpotTrade = ('isIsolated' in trade) || ('M' in trade) || ('orderListId' in trade);
        const marketType = isSpotTrade ? 'spot' : 'contract';
        market = this.safeMarket(marketId, market, undefined, marketType);
        const symbol = market['symbol'];
        let id = this.safeString2(trade, 't', 'a');
        id = this.safeString2(trade, 'tradeId', 'id', id);
        let side = undefined;
        const orderId = this.safeString(trade, 'orderId');
        const buyerMaker = this.safeValue2(trade, 'm', 'isBuyerMaker');
        let takerOrMaker = undefined;
        if (buyerMaker !== undefined) {
            side = buyerMaker ? 'sell' : 'buy'; // this is reversed intentionally
        }
        else if ('side' in trade) {
            side = this.safeStringLower(trade, 'side');
        }
        else {
            if ('isBuyer' in trade) {
                side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side
            }
        }
        let fee = undefined;
        if ('commission' in trade) {
            fee = {
                'cost': this.safeString(trade, 'commission'),
                'currency': this.safeCurrencyCode(this.safeString(trade, 'commissionAsset')),
            };
        }
        if ('isMaker' in trade) {
            takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';
        }
        if ('maker' in trade) {
            takerOrMaker = trade['maker'] ? 'maker' : 'taker';
        }
        if (('optionSide' in trade) || market['option']) {
            const settle = this.safeCurrencyCode(this.safeString(trade, 'quoteAsset', 'USDT'));
            takerOrMaker = this.safeStringLower(trade, 'liquidity');
            if ('fee' in trade) {
                fee = {
                    'cost': this.safeString(trade, 'fee'),
                    'currency': settle,
                };
            }
            if ((side !== 'buy') && (side !== 'sell')) {
                side = (side === '1') ? 'buy' : 'sell';
            }
            if ('optionSide' in trade) {
                if (side !== 'buy') {
                    amount = Precise.stringMul('-1', amount);
                }
            }
        }
        return this.safeTrade({
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'id': id,
            'order': orderId,
            'type': this.safeStringLower(trade, 'type'),
            'side': side,
            'takerOrMaker': takerOrMaker,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        }, market);
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.
            // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.
            // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.
            // 'limit': 500,     // default = 500, maximum = 1000
        };
        let method = this.safeString(this.options, 'fetchTradesMethod');
        if (method === undefined) {
            if (market['option']) {
                method = 'eapiPublicGetTrades';
            }
            else if (market['linear']) {
                method = 'fapiPublicGetAggTrades';
            }
            else if (market['inverse']) {
                method = 'dapiPublicGetAggTrades';
            }
            else {
                method = 'publicGetAggTrades';
            }
        }
        if (!market['option']) {
            if (since !== undefined) {
                request['startTime'] = since;
                // https://github.com/ccxt/ccxt/issues/6400
                // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
                request['endTime'] = this.sum(since, 3600000);
            }
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default = 500, maximum = 1000
        }
        //
        // Caveats:
        // - default limit (500) applies only if no other parameters set, trades up
        //   to the maximum limit may be returned to satisfy other parameters
        // - if both limit and time window is set and time window contains more
        //   trades than the limit then the last trades from the window are returned
        // - 'tradeId' accepted and returned by this method is "aggregate" trade id
        //   which is different from actual trade id
        // - setting both fromId and time window results in error
        const response = await this[method](this.extend(request, params));
        //
        // aggregate trades
        //
        //     [
        //         {
        //             "a": 26129,         // Aggregate tradeId
        //             "p": "0.01633102",  // Price
        //             "q": "4.70443515",  // Quantity
        //             "f": 27781,         // First tradeId
        //             "l": 27781,         // Last tradeId
        //             "T": 1498793709153, // Timestamp
        //             "m": true,          // Was the buyer the maker?
        //             "M": true           // Was the trade the best price match?
        //         }
        //     ]
        //
        // recent public trades and historical public trades
        //
        //     [
        //         {
        //             "id": 28457,
        //             "price": "4.00000100",
        //             "qty": "12.00000000",
        //             "time": 1499865549590,
        //             "isBuyerMaker": true,
        //             "isBestMatch": true
        //         }
        //     ]
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "id": 1,
        //             "symbol": "ETH-230216-1500-C",
        //             "price": "35.5",
        //             "qty": "0.03",
        //             "quoteQty": "1.065",
        //             "side": 1,
        //             "time": 1676366446072
        //         },
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }
    async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name binance#editOrder
         * @description edit a trade order
         * @see https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade
         * @param {string} id cancel order id
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the base currency, ignored in market orders
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['spot']) {
            throw new NotSupported(this.id + ' editOrder() does not support ' + market['type'] + ' orders, only spot orders are accepted');
        }
        const request = {
            'symbol': market['id'],
            'side': side.toUpperCase(),
            'cancelReplaceMode': 'STOP_ON_FAILURE',
            // STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted.
            // ALLOW_FAILURE - new order placement will be attempted even if cancel request fails.
        };
        const cancelId = this.safeString2(params, 'cancelNewClientOrderId', 'cancelOrigClientOrderId');
        if (cancelId === undefined) {
            request['cancelOrderId'] = id; // user can provide either cancelOrderId, cancelOrigClientOrderId or cancelOrigClientOrderId
        }
        const clientOrderId = this.safeString2(params, 'newClientOrderId', 'clientOrderId');
        const initialUppercaseType = type.toUpperCase();
        let uppercaseType = initialUppercaseType;
        const postOnly = this.isPostOnly(initialUppercaseType === 'MARKET', initialUppercaseType === 'LIMIT_MAKER', params);
        if (postOnly) {
            uppercaseType = 'LIMIT_MAKER';
        }
        request['type'] = uppercaseType;
        const stopPrice = this.safeNumber(params, 'stopPrice');
        if (stopPrice !== undefined) {
            if (uppercaseType === 'MARKET') {
                uppercaseType = 'STOP_LOSS';
            }
            else if (uppercaseType === 'LIMIT') {
                uppercaseType = 'STOP_LOSS_LIMIT';
            }
        }
        const validOrderTypes = this.safeValue(market['info'], 'orderTypes');
        if (!this.inArray(uppercaseType, validOrderTypes)) {
            if (initialUppercaseType !== uppercaseType) {
                throw new InvalidOrder(this.id + ' stopPrice parameter is not allowed for ' + symbol + ' ' + type + ' orders');
            }
            else {
                throw new InvalidOrder(this.id + ' ' + type + ' is not a valid order type for the ' + symbol + ' market');
            }
        }
        if (clientOrderId === undefined) {
            const broker = this.safeValue(this.options, 'broker');
            if (broker !== undefined) {
                const brokerId = this.safeString(broker, 'spot');
                if (brokerId !== undefined) {
                    request['newClientOrderId'] = brokerId + this.uuid22();
                }
            }
        }
        else {
            request['newClientOrderId'] = clientOrderId;
        }
        request['newOrderRespType'] = this.safeValue(this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
        let timeInForceIsRequired = false;
        let priceIsRequired = false;
        let stopPriceIsRequired = false;
        let quantityIsRequired = false;
        if (uppercaseType === 'MARKET') {
            const quoteOrderQty = this.safeValue(this.options, 'quoteOrderQty', true);
            if (quoteOrderQty) {
                const quoteOrderQty = this.safeValue2(params, 'quoteOrderQty', 'cost');
                const precision = market['precision']['price'];
                if (quoteOrderQty !== undefined) {
                    request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQty, TRUNCATE$1, precision, this.precisionMode);
                }
                else if (price !== undefined) {
                    const amountString = this.numberToString(amount);
                    const priceString = this.numberToString(price);
                    const quoteOrderQuantity = Precise.stringMul(amountString, priceString);
                    request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQuantity, TRUNCATE$1, precision, this.precisionMode);
                }
                else {
                    quantityIsRequired = true;
                }
            }
            else {
                quantityIsRequired = true;
            }
        }
        else if (uppercaseType === 'LIMIT') {
            priceIsRequired = true;
            timeInForceIsRequired = true;
            quantityIsRequired = true;
        }
        else if ((uppercaseType === 'STOP_LOSS') || (uppercaseType === 'TAKE_PROFIT')) {
            stopPriceIsRequired = true;
            quantityIsRequired = true;
        }
        else if ((uppercaseType === 'STOP_LOSS_LIMIT') || (uppercaseType === 'TAKE_PROFIT_LIMIT')) {
            quantityIsRequired = true;
            stopPriceIsRequired = true;
            priceIsRequired = true;
            timeInForceIsRequired = true;
        }
        else if (uppercaseType === 'LIMIT_MAKER') {
            priceIsRequired = true;
            quantityIsRequired = true;
        }
        if (quantityIsRequired) {
            request['quantity'] = this.amountToPrecision(symbol, amount);
        }
        if (priceIsRequired) {
            if (price === undefined) {
                throw new InvalidOrder(this.id + ' editOrder() requires a price argument for a ' + type + ' order');
            }
            request['price'] = this.priceToPrecision(symbol, price);
        }
        if (timeInForceIsRequired) {
            request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
        }
        if (stopPriceIsRequired) {
            if (stopPrice === undefined) {
                throw new InvalidOrder(this.id + ' editOrder() requires a stopPrice extra param for a ' + type + ' order');
            }
            else {
                request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);
            }
        }
        const requestParams = this.omit(params, ['quoteOrderQty', 'cost', 'stopPrice', 'newClientOrderId', 'clientOrderId', 'postOnly']);
        const response = await this.privatePostOrderCancelReplace(this.extend(request, requestParams));
        //
        //     {
        //         "cancelResult": "SUCCESS",
        //         "newOrderResult": "SUCCESS",
        //         "cancelResponse": {
        //             "symbol": "BTCUSDT",
        //             "origClientOrderId": "web_3f6286480b194b079870ac75fb6978b7",
        //             "orderId": 16383156620,
        //             "orderListId": -1,
        //             "clientOrderId": "Azt6foVTTgHPNhqBf41TTt",
        //             "price": "14000.00000000",
        //             "origQty": "0.00110000",
        //             "executedQty": "0.00000000",
        //             "cummulativeQuoteQty": "0.00000000",
        //             "status": "CANCELED",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY"
        //         },
        //         "newOrderResponse": {
        //             "symbol": "BTCUSDT",
        //             "orderId": 16383176297,
        //             "orderListId": -1,
        //             "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
        //             "transactTime": 1670891847932,
        //             "price": "13500.00000000",
        //             "origQty": "0.00085000",
        //             "executedQty": "0.00000000",
        //             "cummulativeQuoteQty": "0.00000000",
        //             "status": "NEW",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "fills": []
        //         }
        //     }
        //
        const data = this.safeValue(response, 'newOrderResponse');
        return this.parseOrder(data, market);
    }
    parseOrderStatus(status) {
        const statuses = {
            'NEW': 'open',
            'PARTIALLY_FILLED': 'open',
            'ACCEPTED': 'open',
            'FILLED': 'closed',
            'CANCELED': 'canceled',
            'CANCELLED': 'canceled',
            'PENDING_CANCEL': 'canceling',
            'REJECTED': 'rejected',
            'EXPIRED': 'expired',
            'EXPIRED_IN_MATCH': 'expired',
        };
        return this.safeString(statuses, status, status);
    }
    parseOrder(order, market = undefined) {
        //
        // spot
        //
        //     {
        //         "symbol": "LTCBTC",
        //         "orderId": 1,
        //         "clientOrderId": "myOrder1",
        //         "price": "0.1",
        //         "origQty": "1.0",
        //         "executedQty": "0.0",
        //         "cummulativeQuoteQty": "0.0",
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //         "stopPrice": "0.0",
        //         "icebergQty": "0.0",
        //         "time": 1499827319559,
        //         "updateTime": 1499827319559,
        //         "isWorking": true
        //     }
        //
        // spot: editOrder
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "orderId": 16383176297,
        //         "orderListId": -1,
        //         "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
        //         "transactTime": 1670891847932,
        //         "price": "13500.00000000",
        //         "origQty": "0.00085000",
        //         "executedQty": "0.00000000",
        //         "cummulativeQuoteQty": "0.00000000",
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //         "fills": []
        //     }
        //
        // futures
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "orderId": 1,
        //         "clientOrderId": "myOrder1",
        //         "price": "0.1",
        //         "origQty": "1.0",
        //         "executedQty": "1.0",
        //         "cumQuote": "10.0",
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //         "stopPrice": "0.0",
        //         "updateTime": 1499827319559
        //     }
        //
        // createOrder with { "newOrderRespType": "FULL" }
        //
        //     {
        //       "symbol": "BTCUSDT",
        //       "orderId": 5403233939,
        //       "orderListId": -1,
        //       "clientOrderId": "x-R4BD3S825e669e75b6c14f69a2c43e",
        //       "transactTime": 1617151923742,
        //       "price": "0.00000000",
        //       "origQty": "0.00050000",
        //       "executedQty": "0.00050000",
        //       "cummulativeQuoteQty": "29.47081500",
        //       "status": "FILLED",
        //       "timeInForce": "GTC",
        //       "type": "MARKET",
        //       "side": "BUY",
        //       "fills": [
        //         {
        //           "price": "58941.63000000",
        //           "qty": "0.00050000",
        //           "commission": "0.00007050",
        //           "commissionAsset": "BNB",
        //           "tradeId": 737466631
        //         }
        //       ]
        //     }
        //
        // delivery
        //
        //     {
        //       "orderId": "18742727411",
        //       "symbol": "ETHUSD_PERP",
        //       "pair": "ETHUSD",
        //       "status": "FILLED",
        //       "clientOrderId": "x-xcKtGhcu3e2d1503fdd543b3b02419",
        //       "price": "0",
        //       "avgPrice": "4522.14",
        //       "origQty": "1",
        //       "executedQty": "1",
        //       "cumBase": "0.00221134",
        //       "timeInForce": "GTC",
        //       "type": "MARKET",
        //       "reduceOnly": false,
        //       "closePosition": false,
        //       "side": "SELL",
        //       "positionSide": "BOTH",
        //       "stopPrice": "0",
        //       "workingType": "CONTRACT_PRICE",
        //       "priceProtect": false,
        //       "origType": "MARKET",
        //       "time": "1636061952660",
        //       "updateTime": "1636061952660"
        //     }
        //
        // option: createOrder, fetchOrder, fetchOpenOrders, fetchOrders
        //
        //     {
        //         "orderId": 4728833085436977152,
        //         "symbol": "ETH-230211-1500-C",
        //         "price": "10.0",
        //         "quantity": "1.00",
        //         "executedQty": "0.00",
        //         "fee": "0",
        //         "side": "BUY",
        //         "type": "LIMIT",
        //         "timeInForce": "GTC",
        //         "reduceOnly": false,
        //         "postOnly": false,
        //         "createTime": 1676083034462,
        //         "updateTime": 1676083034462,
        //         "status": "ACCEPTED",
        //         "avgPrice": "0",
        //         "source": "API",
        //         "clientOrderId": "",
        //         "priceScale": 1,
        //         "quantityScale": 2,
        //         "optionSide": "CALL",
        //         "quoteAsset": "USDT",
        //         "lastTrade": {"id":"69","time":"1676084430567","price":"24.9","qty":"1.00"},
        //         "mmp": false
        //     }
        //
        const status = this.parseOrderStatus(this.safeString(order, 'status'));
        const marketId = this.safeString(order, 'symbol');
        const marketType = ('closePosition' in order) ? 'contract' : 'spot';
        const symbol = this.safeSymbol(marketId, market, undefined, marketType);
        const filled = this.safeString(order, 'executedQty', '0');
        let timestamp = undefined;
        let lastTradeTimestamp = undefined;
        if ('time' in order) {
            timestamp = this.safeInteger(order, 'time');
        }
        else if ('workingTime' in order) {
            lastTradeTimestamp = this.safeInteger(order, 'transactTime');
            timestamp = this.safeInteger(order, 'workingTime');
        }
        else if ('transactTime' in order) {
            lastTradeTimestamp = this.safeInteger(order, 'transactTime');
            timestamp = this.safeInteger(order, 'transactTime');
        }
        else if ('createTime' in order) {
            lastTradeTimestamp = this.safeInteger(order, 'updateTime');
            timestamp = this.safeInteger(order, 'createTime');
        }
        else if ('updateTime' in order) {
            if (status === 'open') {
                if (Precise.stringGt(filled, '0')) {
                    lastTradeTimestamp = this.safeInteger(order, 'updateTime');
                }
                else {
                    timestamp = this.safeInteger(order, 'updateTime');
                }
            }
        }
        const average = this.safeString(order, 'avgPrice');
        const price = this.safeString(order, 'price');
        const amount = this.safeString2(order, 'origQty', 'quantity');
        // - Spot/Margin market: cummulativeQuoteQty
        // - Futures market: cumQuote.
        //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.
        let cost = this.safeString2(order, 'cummulativeQuoteQty', 'cumQuote');
        cost = this.safeString(order, 'cumBase', cost);
        const id = this.safeString(order, 'orderId');
        let type = this.safeStringLower(order, 'type');
        const side = this.safeStringLower(order, 'side');
        const fills = this.safeValue(order, 'fills', []);
        const clientOrderId = this.safeString(order, 'clientOrderId');
        let timeInForce = this.safeString(order, 'timeInForce');
        if (timeInForce === 'GTX') {
            // GTX means "Good Till Crossing" and is an equivalent way of saying Post Only
            timeInForce = 'PO';
        }
        const postOnly = (type === 'limit_maker') || (timeInForce === 'PO');
        if (type === 'limit_maker') {
            type = 'limit';
        }
        const stopPriceString = this.safeString(order, 'stopPrice');
        const stopPrice = this.parseNumber(this.omitZero(stopPriceString));
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'reduceOnly': this.safeValue(order, 'reduceOnly'),
            'side': side,
            'price': price,
            'triggerPrice': stopPrice,
            'amount': amount,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': {
                'currency': this.safeString(order, 'quoteAsset'),
                'cost': this.safeNumber(order, 'fee'),
                'rate': undefined,
            },
            'trades': fills,
        }, market);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name binance#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const marketType = this.safeString(params, 'type', market['type']);
        const clientOrderId = this.safeString2(params, 'newClientOrderId', 'clientOrderId');
        const initialUppercaseType = type.toUpperCase();
        const isMarketOrder = initialUppercaseType === 'MARKET';
        const isLimitOrder = initialUppercaseType === 'LIMIT';
        const postOnly = this.isPostOnly(isMarketOrder, initialUppercaseType === 'LIMIT_MAKER', params);
        const triggerPrice = this.safeValue2(params, 'triggerPrice', 'stopPrice');
        const stopLossPrice = this.safeValue(params, 'stopLossPrice', triggerPrice); // fallback to stopLoss
        const takeProfitPrice = this.safeValue(params, 'takeProfitPrice');
        const isStopLoss = stopLossPrice !== undefined;
        const isTakeProfit = takeProfitPrice !== undefined;
        params = this.omit(params, ['type', 'newClientOrderId', 'clientOrderId', 'postOnly', 'stopLossPrice', 'takeProfitPrice', 'stopPrice', 'triggerPrice']);
        const [marginMode, query] = this.handleMarginModeAndParams('createOrder', params);
        const request = {
            'symbol': market['id'],
            'side': side.toUpperCase(),
        };
        let method = 'privatePostOrder';
        if (market['linear']) {
            method = 'fapiPrivatePostOrder';
        }
        else if (market['inverse']) {
            method = 'dapiPrivatePostOrder';
        }
        else if (marketType === 'margin' || marginMode !== undefined) {
            method = 'sapiPostMarginOrder';
            const reduceOnly = this.safeValue(params, 'reduceOnly');
            if (reduceOnly) {
                request['sideEffectType'] = 'AUTO_REPAY';
                params = this.omit(params, 'reduceOnly');
            }
        }
        if (market['spot'] || marketType === 'margin') {
            // support for testing orders
            const test = this.safeValue(query, 'test', false);
            if (test) {
                method += 'Test';
            }
            // only supported for spot/margin api (all margin markets are spot markets)
            if (postOnly) {
                type = 'LIMIT_MAKER';
            }
        }
        let uppercaseType = type.toUpperCase();
        let stopPrice = undefined;
        if (isStopLoss) {
            stopPrice = stopLossPrice;
            if (isMarketOrder) {
                // spot STOP_LOSS market orders are not a valid order type
                uppercaseType = market['contract'] ? 'STOP_MARKET' : 'STOP_LOSS';
            }
            else if (isLimitOrder) {
                uppercaseType = market['contract'] ? 'STOP' : 'STOP_LOSS_LIMIT';
            }
        }
        else if (isTakeProfit) {
            stopPrice = takeProfitPrice;
            if (isMarketOrder) {
                // spot TAKE_PROFIT market orders are not a valid order type
                uppercaseType = market['contract'] ? 'TAKE_PROFIT_MARKET' : 'TAKE_PROFIT';
            }
            else if (isLimitOrder) {
                uppercaseType = market['contract'] ? 'TAKE_PROFIT' : 'TAKE_PROFIT_LIMIT';
            }
        }
        if (marginMode === 'isolated') {
            request['isIsolated'] = true;
        }
        if (clientOrderId === undefined) {
            const broker = this.safeValue(this.options, 'broker');
            if (broker !== undefined) {
                const brokerId = this.safeString(broker, marketType);
                if (brokerId !== undefined) {
                    request['newClientOrderId'] = brokerId + this.uuid22();
                }
            }
        }
        else {
            request['newClientOrderId'] = clientOrderId;
        }
        if ((marketType === 'spot') || (marketType === 'margin')) {
            request['newOrderRespType'] = this.safeValue(this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
        }
        else {
            // swap, futures and options
            request['newOrderRespType'] = 'RESULT'; // "ACK", "RESULT", default "ACK"
        }
        if (market['option']) {
            if (type === 'market') {
                throw new InvalidOrder(this.id + ' ' + type + ' is not a valid order type for the ' + symbol + ' market');
            }
            method = 'eapiPrivatePostOrder';
        }
        else {
            const validOrderTypes = this.safeValue(market['info'], 'orderTypes');
            if (!this.inArray(uppercaseType, validOrderTypes)) {
                if (initialUppercaseType !== uppercaseType) {
                    throw new InvalidOrder(this.id + ' stopPrice parameter is not allowed for ' + symbol + ' ' + type + ' orders');
                }
                else {
                    throw new InvalidOrder(this.id + ' ' + type + ' is not a valid order type for the ' + symbol + ' market');
                }
            }
        }
        request['type'] = uppercaseType;
        // additional required fields depending on the order type
        let timeInForceIsRequired = false;
        let priceIsRequired = false;
        let stopPriceIsRequired = false;
        let quantityIsRequired = false;
        //
        // spot/margin
        //
        //     LIMIT                timeInForce, quantity, price
        //     MARKET               quantity or quoteOrderQty
        //     STOP_LOSS            quantity, stopPrice
        //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice
        //     TAKE_PROFIT          quantity, stopPrice
        //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice
        //     LIMIT_MAKER          quantity, price
        //
        // futures
        //
        //     LIMIT                timeInForce, quantity, price
        //     MARKET               quantity
        //     STOP/TAKE_PROFIT     quantity, price, stopPrice
        //     STOP_MARKET          stopPrice
        //     TAKE_PROFIT_MARKET   stopPrice
        //     TRAILING_STOP_MARKET callbackRate
        //
        if (uppercaseType === 'MARKET') {
            if (market['spot']) {
                const quoteOrderQty = this.safeValue(this.options, 'quoteOrderQty', true);
                if (quoteOrderQty) {
                    const quoteOrderQty = this.safeValue2(query, 'quoteOrderQty', 'cost');
                    const precision = market['precision']['price'];
                    if (quoteOrderQty !== undefined) {
                        request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQty, TRUNCATE$1, precision, this.precisionMode);
                    }
                    else if (price !== undefined) {
                        const amountString = this.numberToString(amount);
                        const priceString = this.numberToString(price);
                        const quoteOrderQuantity = Precise.stringMul(amountString, priceString);
                        request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQuantity, TRUNCATE$1, precision, this.precisionMode);
                    }
                    else {
                        quantityIsRequired = true;
                    }
                }
                else {
                    quantityIsRequired = true;
                }
            }
            else {
                quantityIsRequired = true;
            }
        }
        else if (uppercaseType === 'LIMIT') {
            priceIsRequired = true;
            timeInForceIsRequired = true;
            quantityIsRequired = true;
        }
        else if ((uppercaseType === 'STOP_LOSS') || (uppercaseType === 'TAKE_PROFIT')) {
            stopPriceIsRequired = true;
            quantityIsRequired = true;
            if (market['linear'] || market['inverse']) {
                priceIsRequired = true;
            }
        }
        else if ((uppercaseType === 'STOP_LOSS_LIMIT') || (uppercaseType === 'TAKE_PROFIT_LIMIT')) {
            quantityIsRequired = true;
            stopPriceIsRequired = true;
            priceIsRequired = true;
            timeInForceIsRequired = true;
        }
        else if (uppercaseType === 'LIMIT_MAKER') {
            priceIsRequired = true;
            quantityIsRequired = true;
        }
        else if (uppercaseType === 'STOP') {
            quantityIsRequired = true;
            stopPriceIsRequired = true;
            priceIsRequired = true;
        }
        else if ((uppercaseType === 'STOP_MARKET') || (uppercaseType === 'TAKE_PROFIT_MARKET')) {
            const closePosition = this.safeValue(query, 'closePosition');
            if (closePosition === undefined) {
                quantityIsRequired = true;
            }
            stopPriceIsRequired = true;
        }
        else if (uppercaseType === 'TRAILING_STOP_MARKET') {
            quantityIsRequired = true;
            const callbackRate = this.safeNumber(query, 'callbackRate');
            if (callbackRate === undefined) {
                throw new InvalidOrder(this.id + ' createOrder() requires a callbackRate extra param for a ' + type + ' order');
            }
        }
        if (quantityIsRequired) {
            request['quantity'] = this.amountToPrecision(symbol, amount);
        }
        if (priceIsRequired) {
            if (price === undefined) {
                throw new InvalidOrder(this.id + ' createOrder() requires a price argument for a ' + type + ' order');
            }
            request['price'] = this.priceToPrecision(symbol, price);
        }
        if (timeInForceIsRequired) {
            request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
        }
        if (market['contract'] && postOnly) {
            request['timeInForce'] = 'GTX';
        }
        if (stopPriceIsRequired) {
            if (market['contract']) {
                if (stopPrice === undefined) {
                    throw new InvalidOrder(this.id + ' createOrder() requires a stopPrice extra param for a ' + type + ' order');
                }
            }
            else {
                // check for delta price as well
                const trailingDelta = this.safeValue(params, 'trailingDelta');
                if (trailingDelta === undefined && stopPrice === undefined) {
                    throw new InvalidOrder(this.id + ' createOrder() requires a stopPrice or trailingDelta param for a ' + type + ' order');
                }
            }
            if (stopPrice !== undefined) {
                request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);
            }
        }
        const requestParams = this.omit(params, ['quoteOrderQty', 'cost', 'stopPrice', 'test', 'type', 'newClientOrderId', 'clientOrderId', 'postOnly']);
        const response = await this[method](this.extend(request, requestParams));
        return this.parseOrder(response, market);
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('fetchOrder', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const defaultType = this.safeString2(this.options, 'fetchOrder', 'defaultType', 'spot');
        const type = this.safeString(params, 'type', defaultType);
        const [marginMode, query] = this.handleMarginModeAndParams('fetchOrder', params);
        const request = {
            'symbol': market['id'],
        };
        let method = 'privateGetOrder';
        if (market['option']) {
            method = 'eapiPrivateGetOrder';
        }
        else if (market['linear']) {
            method = 'fapiPrivateGetOrder';
        }
        else if (market['inverse']) {
            method = 'dapiPrivateGetOrder';
        }
        else if (type === 'margin' || marginMode !== undefined) {
            method = 'sapiGetMarginOrder';
            if (marginMode === 'isolated') {
                request['isIsolated'] = true;
            }
        }
        const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');
        if (clientOrderId !== undefined) {
            if (market['option']) {
                request['clientOrderId'] = clientOrderId;
            }
            else {
                request['origClientOrderId'] = clientOrderId;
            }
        }
        else {
            request['orderId'] = id;
        }
        const requestParams = this.omit(query, ['type', 'clientOrderId', 'origClientOrderId']);
        const response = await this[method](this.extend(request, requestParams));
        return this.parseOrder(response, market);
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchOrders
         * @description fetches information on multiple orders made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('fetchOrders', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const defaultType = this.safeString2(this.options, 'fetchOrders', 'defaultType', 'spot');
        const type = this.safeString(params, 'type', defaultType);
        const [marginMode, query] = this.handleMarginModeAndParams('fetchOrders', params);
        const request = {
            'symbol': market['id'],
        };
        let method = 'privateGetAllOrders';
        if (market['option']) {
            method = 'eapiPrivateGetHistoryOrders';
        }
        else if (market['linear']) {
            method = 'fapiPrivateGetAllOrders';
        }
        else if (market['inverse']) {
            method = 'dapiPrivateGetAllOrders';
        }
        else if (type === 'margin' || marginMode !== undefined) {
            method = 'sapiGetMarginAllOrders';
            if (marginMode === 'isolated') {
                request['isIsolated'] = true;
            }
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, query));
        //
        //  spot
        //
        //     [
        //         {
        //             "symbol": "LTCBTC",
        //             "orderId": 1,
        //             "clientOrderId": "myOrder1",
        //             "price": "0.1",
        //             "origQty": "1.0",
        //             "executedQty": "0.0",
        //             "cummulativeQuoteQty": "0.0",
        //             "status": "NEW",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "stopPrice": "0.0",
        //             "icebergQty": "0.0",
        //             "time": 1499827319559,
        //             "updateTime": 1499827319559,
        //             "isWorking": true
        //         }
        //     ]
        //
        //  futures
        //
        //     [
        //         {
        //             "symbol": "BTCUSDT",
        //             "orderId": 1,
        //             "clientOrderId": "myOrder1",
        //             "price": "0.1",
        //             "origQty": "1.0",
        //             "executedQty": "1.0",
        //             "cumQuote": "10.0",
        //             "status": "NEW",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "stopPrice": "0.0",
        //             "updateTime": 1499827319559
        //         }
        //     ]
        //
        // options
        //
        //     [
        //         {
        //             "orderId": 4728833085436977152,
        //             "symbol": "ETH-230211-1500-C",
        //             "price": "10.0",
        //             "quantity": "1.00",
        //             "executedQty": "0.00",
        //             "fee": "0",
        //             "side": "BUY",
        //             "type": "LIMIT",
        //             "timeInForce": "GTC",
        //             "reduceOnly": false,
        //             "postOnly": false,
        //             "createTime": 1676083034462,
        //             "updateTime": 1676083034462,
        //             "status": "ACCEPTED",
        //             "avgPrice": "0",
        //             "source": "API",
        //             "clientOrderId": "",
        //             "priceScale": 1,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "quoteAsset": "USDT",
        //             "lastTrade": {"id":"69","time":"1676084430567","price":"24.9","qty":"1.00"},
        //             "mmp": false
        //         }
        //     ]
        //
        return this.parseOrders(response, market, since, limit);
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchOpenOrders
         * @description fetch all unfilled currently open orders
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch open orders for
         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let type = undefined;
        const request = {};
        let marginMode = undefined;
        let query = undefined;
        [marginMode, query] = this.handleMarginModeAndParams('fetchOpenOrders', params);
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');
            const marketType = ('type' in market) ? market['type'] : defaultType;
            type = this.safeString(query, 'type', marketType);
        }
        else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {
            const symbols = this.symbols;
            const numSymbols = symbols.length;
            const fetchOpenOrdersRateLimit = this.parseToInt(numSymbols / 2);
            throw new ExchangeError(this.id + ' fetchOpenOrders() WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString() + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options["warnOnFetchOpenOrdersWithoutSymbol"] = false to suppress this warning message.');
        }
        else {
            const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');
            type = this.safeString(query, 'type', defaultType);
        }
        let subType = undefined;
        [subType, query] = this.handleSubTypeAndParams('fetchOpenOrders', market, query);
        const requestParams = this.omit(query, 'type');
        let method = 'privateGetOpenOrders';
        if (type === 'option') {
            method = 'eapiPrivateGetOpenOrders';
            if (since !== undefined) {
                request['startTime'] = since;
            }
            if (limit !== undefined) {
                request['limit'] = limit;
            }
        }
        else if (this.isLinear(type, subType)) {
            method = 'fapiPrivateGetOpenOrders';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPrivateGetOpenOrders';
        }
        else if (type === 'margin' || marginMode !== undefined) {
            method = 'sapiGetMarginOpenOrders';
            if (marginMode === 'isolated') {
                request['isIsolated'] = true;
                if (symbol === undefined) {
                    throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument for isolated markets');
                }
            }
        }
        const response = await this[method](this.extend(request, requestParams));
        return this.parseOrders(response, market, since, limit);
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        const orders = await this.fetchOrders(symbol, since, limit, params);
        return this.filterBy(orders, 'status', 'closed');
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('cancelOrder', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const defaultType = this.safeString2(this.options, 'cancelOrder', 'defaultType', 'spot');
        const type = this.safeString(params, 'type', defaultType);
        const [marginMode, query] = this.handleMarginModeAndParams('cancelOrder', params);
        const request = {
            'symbol': market['id'],
            // 'orderId': id,
            // 'origClientOrderId': id,
        };
        const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');
        if (clientOrderId !== undefined) {
            if (market['option']) {
                request['clientOrderId'] = clientOrderId;
            }
            else {
                request['origClientOrderId'] = clientOrderId;
            }
        }
        else {
            request['orderId'] = id;
        }
        let method = 'privateDeleteOrder';
        if (market['option']) {
            method = 'eapiPrivateDeleteOrder';
        }
        else if (market['linear']) {
            method = 'fapiPrivateDeleteOrder';
        }
        else if (market['inverse']) {
            method = 'dapiPrivateDeleteOrder';
        }
        else if (type === 'margin' || marginMode !== undefined) {
            method = 'sapiDeleteMarginOrder';
            if (marginMode === 'isolated') {
                request['isIsolated'] = true;
            }
        }
        const requestParams = this.omit(query, ['type', 'origClientOrderId', 'clientOrderId']);
        const response = await this[method](this.extend(request, requestParams));
        return this.parseOrder(response, market);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#cancelAllOrders
         * @description cancel all open orders in a market
         * @param {string} symbol unified market symbol of the market to cancel orders in
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('cancelAllOrders', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const type = this.safeString(params, 'type', market['type']);
        params = this.omit(params, ['type']);
        const [marginMode, query] = this.handleMarginModeAndParams('cancelAllOrders', params);
        let method = 'privateDeleteOpenOrders';
        if (market['option']) {
            method = 'eapiPrivateDeleteAllOpenOrders';
        }
        else if (market['linear']) {
            method = 'fapiPrivateDeleteAllOpenOrders';
        }
        else if (market['inverse']) {
            method = 'dapiPrivateDeleteAllOpenOrders';
        }
        else if ((type === 'margin') || (marginMode !== undefined)) {
            method = 'sapiDeleteMarginOpenOrders';
            if (marginMode === 'isolated') {
                request['isIsolated'] = true;
            }
        }
        const response = await this[method](this.extend(request, query));
        if (Array.isArray(response)) {
            return this.parseOrders(response, market);
        }
        else {
            return response;
        }
    }
    async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchOrderTrades
         * @description fetch all the trades made from a single order
         * @param {string} id order id
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOrderTrades() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const type = this.safeString(params, 'type', market['type']);
        params = this.omit(params, 'type');
        if (type !== 'spot') {
            throw new NotSupported(this.id + ' fetchOrderTrades() supports spot markets only');
        }
        const request = {
            'orderId': id,
        };
        return await this.fetchMyTrades(symbol, since, limit, this.extend(request, params));
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        let type = undefined;
        let method = undefined;
        let marginMode = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        [type, params] = this.handleMarketTypeAndParams('fetchMyTrades', market, params);
        if (type === 'option') {
            method = 'eapiPrivateGetUserTrades';
        }
        else {
            this.checkRequiredSymbol('fetchMyTrades', symbol);
            [marginMode, params] = this.handleMarginModeAndParams('fetchMyTrades', params);
            if (type === 'spot' || type === 'margin') {
                method = 'privateGetMyTrades';
                if ((type === 'margin') || (marginMode !== undefined)) {
                    method = 'sapiGetMarginMyTrades';
                    if (marginMode === 'isolated') {
                        request['isIsolated'] = true;
                    }
                }
            }
            else if (market['linear']) {
                method = 'fapiPrivateGetUserTrades';
            }
            else if (market['inverse']) {
                method = 'dapiPrivateGetUserTrades';
            }
        }
        let endTime = this.safeInteger2(params, 'until', 'endTime');
        if (since !== undefined) {
            const startTime = parseInt(since);
            request['startTime'] = startTime;
            // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data
            // If startTime and endTime are both not sent, then the last 7 days' data will be returned.
            // The time between startTime and endTime cannot be longer than 7 days.
            // The parameter fromId cannot be sent with startTime or endTime.
            const currentTimestamp = this.milliseconds();
            const oneWeek = 7 * 24 * 60 * 60 * 1000;
            if ((currentTimestamp - startTime) >= oneWeek) {
                if ((endTime === undefined) && market['linear']) {
                    endTime = this.sum(startTime, oneWeek);
                    endTime = Math.min(endTime, currentTimestamp);
                }
            }
        }
        if (endTime !== undefined) {
            request['endTime'] = endTime;
            params = this.omit(params, ['endTime', 'until']);
        }
        if (limit !== undefined) {
            if ((type === 'option') || market['contract']) {
                limit = Math.min(limit, 1000); // above 1000, returns error
            }
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, params));
        //
        // spot trade
        //
        //     [
        //         {
        //             "symbol": "BNBBTC",
        //             "id": 28457,
        //             "orderId": 100234,
        //             "price": "4.00000100",
        //             "qty": "12.00000000",
        //             "commission": "10.10000000",
        //             "commissionAsset": "BNB",
        //             "time": 1499865549590,
        //             "isBuyer": true,
        //             "isMaker": false,
        //             "isBestMatch": true,
        //         }
        //     ]
        //
        // futures trade
        //
        //     [
        //         {
        //             "accountId": 20,
        //             "buyer": False,
        //             "commission": "-0.07819010",
        //             "commissionAsset": "USDT",
        //             "counterPartyId": 653,
        //             "id": 698759,
        //             "maker": False,
        //             "orderId": 25851813,
        //             "price": "7819.01",
        //             "qty": "0.002",
        //             "quoteQty": "0.01563",
        //             "realizedPnl": "-0.91539999",
        //             "side": "SELL",
        //             "symbol": "BTCUSDT",
        //             "time": 1569514978020
        //         }
        //     ]
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "id": 1125899906844226012,
        //             "tradeId": 73,
        //             "orderId": 4638761100843040768,
        //             "symbol": "ETH-230211-1500-C",
        //             "price": "18.70000000",
        //             "quantity": "-0.57000000",
        //             "fee": "0.17305890",
        //             "realizedProfit": "-3.53400000",
        //             "side": "SELL",
        //             "type": "LIMIT",
        //             "volatility": "0.30000000",
        //             "liquidity": "MAKER",
        //             "time": 1676085216845,
        //             "priceScale": 1,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "quoteAsset": "USDT"
        //         }
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }
    async fetchMyDustTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchMyDustTrades
         * @description fetch all dust trades made by the user
         * @param {string|undefined} symbol not used by binance fetchMyDustTrades ()
         * @param {int|undefined} since the earliest time in ms to fetch my dust trades for
         * @param {int|undefined} limit the maximum number of dust trades to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        //
        // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)
        // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.
        // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data
        //
        await this.loadMarkets();
        const request = {};
        if (since !== undefined) {
            request['startTime'] = since;
            request['endTime'] = this.sum(since, 7776000000);
        }
        const response = await this.sapiGetAssetDribblet(this.extend(request, params));
        //     {
        //       "total": "4",
        //       "userAssetDribblets": [
        //         {
        //           "operateTime": "1627575731000",
        //           "totalServiceChargeAmount": "0.00001453",
        //           "totalTransferedAmount": "0.00072693",
        //           "transId": "70899815863",
        //           "userAssetDribbletDetails": [
        //             {
        //               "fromAsset": "LTC",
        //               "amount": "0.000006",
        //               "transferedAmount": "0.00000267",
        //               "serviceChargeAmount": "0.00000005",
        //               "operateTime": "1627575731000",
        //               "transId": "70899815863"
        //             },
        //             {
        //               "fromAsset": "GBP",
        //               "amount": "0.15949157",
        //               "transferedAmount": "0.00072426",
        //               "serviceChargeAmount": "0.00001448",
        //               "operateTime": "1627575731000",
        //               "transId": "70899815863"
        //             }
        //           ]
        //         },
        //       ]
        //     }
        const results = this.safeValue(response, 'userAssetDribblets', []);
        const rows = this.safeInteger(response, 'total', 0);
        const data = [];
        for (let i = 0; i < rows; i++) {
            const logs = this.safeValue(results[i], 'userAssetDribbletDetails', []);
            for (let j = 0; j < logs.length; j++) {
                logs[j]['isDustTrade'] = true;
                data.push(logs[j]);
            }
        }
        const trades = this.parseTrades(data, undefined, since, limit);
        return this.filterBySinceLimit(trades, since, limit);
    }
    parseDustTrade(trade, market = undefined) {
        //
        //     {
        //       "fromAsset": "USDT",
        //       "amount": "0.009669",
        //       "transferedAmount": "0.00002992",
        //       "serviceChargeAmount": "0.00000059",
        //       "operateTime": "1628076010000",
        //       "transId": "71416578712",
        //       "isDustTrade": true
        //     }
        //
        const orderId = this.safeString(trade, 'transId');
        const timestamp = this.safeInteger(trade, 'operateTime');
        const currencyId = this.safeString(trade, 'fromAsset');
        const tradedCurrency = this.safeCurrencyCode(currencyId);
        const bnb = this.currency('BNB');
        const earnedCurrency = bnb['code'];
        const applicantSymbol = earnedCurrency + '/' + tradedCurrency;
        let tradedCurrencyIsQuote = false;
        if (applicantSymbol in this.markets) {
            tradedCurrencyIsQuote = true;
        }
        const feeCostString = this.safeString(trade, 'serviceChargeAmount');
        const fee = {
            'currency': earnedCurrency,
            'cost': this.parseNumber(feeCostString),
        };
        let symbol = undefined;
        let amountString = undefined;
        let costString = undefined;
        let side = undefined;
        if (tradedCurrencyIsQuote) {
            symbol = applicantSymbol;
            amountString = this.safeString(trade, 'transferedAmount');
            costString = this.safeString(trade, 'amount');
            side = 'buy';
        }
        else {
            symbol = tradedCurrency + '/' + earnedCurrency;
            amountString = this.safeString(trade, 'amount');
            costString = this.safeString(trade, 'transferedAmount');
            side = 'sell';
        }
        let priceString = undefined;
        if (costString !== undefined) {
            if (amountString) {
                priceString = Precise.stringDiv(costString, amountString);
            }
        }
        const id = undefined;
        const amount = this.parseNumber(amountString);
        const price = this.parseNumber(priceString);
        const cost = this.parseNumber(costString);
        const type = undefined;
        const takerOrMaker = undefined;
        return {
            'id': id,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': orderId,
            'type': type,
            'takerOrMaker': takerOrMaker,
            'side': side,
            'amount': amount,
            'price': price,
            'cost': cost,
            'fee': fee,
            'info': trade,
        };
    }
    async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchDeposits
         * @description fetch all deposits made to an account
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch deposits for
         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {bool} params.fiat if true, only fiat deposits will be returned
         * @param {int|undefined} params.until the latest time in ms to fetch deposits for
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        let currency = undefined;
        let response = undefined;
        const request = {};
        const legalMoney = this.safeValue(this.options, 'legalMoney', {});
        const fiatOnly = this.safeValue(params, 'fiat', false);
        params = this.omit(params, 'fiatOnly');
        const until = this.safeInteger(params, 'until');
        if (fiatOnly || (code in legalMoney)) {
            if (code !== undefined) {
                currency = this.currency(code);
            }
            request['transactionType'] = 0;
            if (since !== undefined) {
                request['beginTime'] = since;
            }
            if (until !== undefined) {
                request['endTime'] = until;
            }
            const raw = await this.sapiGetFiatOrders(this.extend(request, params));
            response = this.safeValue(raw, 'data');
            //     {
            //       "code": "000000",
            //       "message": "success",
            //       "data": [
            //         {
            //           "orderNo": "25ced37075c1470ba8939d0df2316e23",
            //           "fiatCurrency": "EUR",
            //           "indicatedAmount": "15.00",
            //           "amount": "15.00",
            //           "totalFee": "0.00",
            //           "method": "card",
            //           "status": "Failed",
            //           "createTime": 1627501026000,
            //           "updateTime": 1627501027000
            //         }
            //       ],
            //       "total": 1,
            //       "success": true
            //     }
        }
        else {
            if (code !== undefined) {
                currency = this.currency(code);
                request['coin'] = currency['id'];
            }
            if (since !== undefined) {
                request['startTime'] = since;
                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                let endTime = this.sum(since, 7776000000);
                if (until !== undefined) {
                    endTime = Math.min(endTime, until);
                }
                request['endTime'] = endTime;
            }
            if (limit !== undefined) {
                request['limit'] = limit;
            }
            response = await this.sapiGetCapitalDepositHisrec(this.extend(request, params));
            //     [
            //       {
            //         "amount": "0.01844487",
            //         "coin": "BCH",
            //         "network": "BCH",
            //         "status": 1,
            //         "address": "1NYxAJhW2281HK1KtJeaENBqHeygA88FzR",
            //         "addressTag": "",
            //         "txId": "bafc5902504d6504a00b7d0306a41154cbf1d1b767ab70f3bc226327362588af",
            //         "insertTime": 1610784980000,
            //         "transferType": 0,
            //         "confirmTimes": "2/2"
            //       },
            //       {
            //         "amount": "4500",
            //         "coin": "USDT",
            //         "network": "BSC",
            //         "status": 1,
            //         "address": "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
            //         "addressTag": "",
            //         "txId": "Internal transfer 51376627901",
            //         "insertTime": 1618394381000,
            //         "transferType": 1,
            //         "confirmTimes": "1/15"
            //     }
            //   ]
        }
        return this.parseTransactions(response, currency, since, limit);
    }
    async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchWithdrawals
         * @description fetch all withdrawals made from an account
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {bool} params.fiat if true, only fiat withdrawals will be returned
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        const legalMoney = this.safeValue(this.options, 'legalMoney', {});
        const fiatOnly = this.safeValue(params, 'fiat', false);
        params = this.omit(params, 'fiatOnly');
        const request = {};
        let response = undefined;
        let currency = undefined;
        if (fiatOnly || (code in legalMoney)) {
            if (code !== undefined) {
                currency = this.currency(code);
            }
            request['transactionType'] = 1;
            if (since !== undefined) {
                request['beginTime'] = since;
            }
            const raw = await this.sapiGetFiatOrders(this.extend(request, params));
            response = this.safeValue(raw, 'data');
            //     {
            //       "code": "000000",
            //       "message": "success",
            //       "data": [
            //         {
            //           "orderNo": "CJW706452266115170304",
            //           "fiatCurrency": "GBP",
            //           "indicatedAmount": "10001.50",
            //           "amount": "100.00",
            //           "totalFee": "1.50",
            //           "method": "bank transfer",
            //           "status": "Successful",
            //           "createTime": 1620037745000,
            //           "updateTime": 1620038480000
            //         },
            //         {
            //           "orderNo": "CJW706287492781891584",
            //           "fiatCurrency": "GBP",
            //           "indicatedAmount": "10001.50",
            //           "amount": "100.00",
            //           "totalFee": "1.50",
            //           "method": "bank transfer",
            //           "status": "Successful",
            //           "createTime": 1619998460000,
            //           "updateTime": 1619998823000
            //         }
            //       ],
            //       "total": 39,
            //       "success": true
            //     }
        }
        else {
            if (code !== undefined) {
                currency = this.currency(code);
                request['coin'] = currency['id'];
            }
            if (since !== undefined) {
                request['startTime'] = since;
                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                request['endTime'] = this.sum(since, 7776000000);
            }
            if (limit !== undefined) {
                request['limit'] = limit;
            }
            response = await this.sapiGetCapitalWithdrawHistory(this.extend(request, params));
            //     [
            //       {
            //         "id": "69e53ad305124b96b43668ceab158a18",
            //         "amount": "28.75",
            //         "transactionFee": "0.25",
            //         "coin": "XRP",
            //         "status": 6,
            //         "address": "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
            //         "addressTag": "101286922",
            //         "txId": "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
            //         "applyTime": "2021-04-15 12:09:16",
            //         "network": "XRP",
            //         "transferType": 0
            //       },
            //       {
            //         "id": "9a67628b16ba4988ae20d329333f16bc",
            //         "amount": "20",
            //         "transactionFee": "20",
            //         "coin": "USDT",
            //         "status": 6,
            //         "address": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
            //         "txId": "0x77fbf2cf2c85b552f0fd31fd2e56dc95c08adae031d96f3717d8b17e1aea3e46",
            //         "applyTime": "2021-04-15 12:06:53",
            //         "network": "ETH",
            //         "transferType": 0
            //       },
            //       {
            //         "id": "a7cdc0afbfa44a48bd225c9ece958fe2",
            //         "amount": "51",
            //         "transactionFee": "1",
            //         "coin": "USDT",
            //         "status": 6,
            //         "address": "TYDmtuWL8bsyjvcauUTerpfYyVhFtBjqyo",
            //         "txId": "168a75112bce6ceb4823c66726ad47620ad332e69fe92d9cb8ceb76023f9a028",
            //         "applyTime": "2021-04-13 12:46:59",
            //         "network": "TRX",
            //         "transferType": 0
            //       }
            //     ]
        }
        return this.parseTransactions(response, currency, since, limit);
    }
    parseTransactionStatusByType(status, type = undefined) {
        const statusesByType = {
            'deposit': {
                '0': 'pending',
                '1': 'ok',
                '6': 'ok',
                // Fiat
                // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                'Processing': 'pending',
                'Failed': 'failed',
                'Successful': 'ok',
                'Refunding': 'canceled',
                'Refunded': 'canceled',
                'Refund Failed': 'failed',
            },
            'withdrawal': {
                '0': 'pending',
                '1': 'canceled',
                '2': 'pending',
                '3': 'failed',
                '4': 'pending',
                '5': 'failed',
                '6': 'ok',
                // Fiat
                // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                'Processing': 'pending',
                'Failed': 'failed',
                'Successful': 'ok',
                'Refunding': 'canceled',
                'Refunded': 'canceled',
                'Refund Failed': 'failed',
            },
        };
        const statuses = this.safeValue(statusesByType, type, {});
        return this.safeString(statuses, status, status);
    }
    parseTransaction(transaction, currency = undefined) {
        //
        // fetchDeposits
        //
        //     {
        //       "amount": "4500",
        //       "coin": "USDT",
        //       "network": "BSC",
        //       "status": 1,
        //       "address": "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
        //       "addressTag": "",
        //       "txId": "Internal transfer 51376627901",
        //       "insertTime": 1618394381000,
        //       "transferType": 1,
        //       "confirmTimes": "1/15"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //       "id": "69e53ad305124b96b43668ceab158a18",
        //       "amount": "28.75",
        //       "transactionFee": "0.25",
        //       "coin": "XRP",
        //       "status": 6,
        //       "address": "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
        //       "addressTag": "101286922",
        //       "txId": "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
        //       "applyTime": "2021-04-15 12:09:16",
        //       "network": "XRP",
        //       "transferType": 0
        //     }
        //
        // fiat transaction
        // withdraw
        //     {
        //       "orderNo": "CJW684897551397171200",
        //       "fiatCurrency": "GBP",
        //       "indicatedAmount": "29.99",
        //       "amount": "28.49",
        //       "totalFee": "1.50",
        //       "method": "bank transfer",
        //       "status": "Successful",
        //       "createTime": 1614898701000,
        //       "updateTime": 1614898820000
        //     }
        //
        // deposit
        //     {
        //       "orderNo": "25ced37075c1470ba8939d0df2316e23",
        //       "fiatCurrency": "EUR",
        //       "transactionType": 0,
        //       "indicatedAmount": "15.00",
        //       "amount": "15.00",
        //       "totalFee": "0.00",
        //       "method": "card",
        //       "status": "Failed",
        //       "createTime": "1627501026000",
        //       "updateTime": "1627501027000"
        //     }
        //
        // withdraw
        //
        //    { id: '9a67628b16ba4988ae20d329333f16bc' }
        //
        const id = this.safeString2(transaction, 'id', 'orderNo');
        const address = this.safeString(transaction, 'address');
        let tag = this.safeString(transaction, 'addressTag'); // set but unused
        if (tag !== undefined) {
            if (tag.length < 1) {
                tag = undefined;
            }
        }
        let txid = this.safeString(transaction, 'txId');
        if ((txid !== undefined) && (txid.indexOf('Internal transfer ') >= 0)) {
            txid = txid.slice(18);
        }
        const currencyId = this.safeString2(transaction, 'coin', 'fiatCurrency');
        let code = this.safeCurrencyCode(currencyId, currency);
        let timestamp = undefined;
        timestamp = this.safeInteger2(transaction, 'insertTime', 'createTime');
        if (timestamp === undefined) {
            timestamp = this.parse8601(this.safeString(transaction, 'applyTime'));
        }
        const updated = this.safeInteger2(transaction, 'successTime', 'updateTime');
        let type = this.safeString(transaction, 'type');
        if (type === undefined) {
            const txType = this.safeString(transaction, 'transactionType');
            if (txType !== undefined) {
                type = (txType === '0') ? 'deposit' : 'withdrawal';
            }
            const legalMoneyCurrenciesById = this.safeValue(this.options, 'legalMoneyCurrenciesById');
            code = this.safeString(legalMoneyCurrenciesById, code, code);
        }
        const status = this.parseTransactionStatusByType(this.safeString(transaction, 'status'), type);
        const amount = this.safeNumber(transaction, 'amount');
        const feeCost = this.safeNumber2(transaction, 'transactionFee', 'totalFee');
        let fee = undefined;
        if (feeCost !== undefined) {
            fee = { 'currency': code, 'cost': feeCost };
        }
        let internal = this.safeInteger(transaction, 'transferType');
        if (internal !== undefined) {
            internal = internal ? true : false;
        }
        const network = this.safeString(transaction, 'network');
        return {
            'info': transaction,
            'id': id,
            'txid': txid,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'network': network,
            'address': address,
            'addressTo': address,
            'addressFrom': undefined,
            'tag': tag,
            'tagTo': tag,
            'tagFrom': undefined,
            'type': type,
            'amount': amount,
            'currency': code,
            'status': status,
            'updated': updated,
            'internal': internal,
            'fee': fee,
        };
    }
    parseTransferStatus(status) {
        const statuses = {
            'CONFIRMED': 'ok',
        };
        return this.safeString(statuses, status, status);
    }
    parseTransfer(transfer, currency = undefined) {
        //
        // transfer
        //
        //     {
        //         "tranId":13526853623
        //     }
        //
        // fetchTransfers
        //
        //     {
        //         timestamp: 1614640878000,
        //         asset: 'USDT',
        //         amount: '25',
        //         type: 'MAIN_UMFUTURE',
        //         status: 'CONFIRMED',
        //         tranId: 43000126248
        //     }
        //
        const id = this.safeString(transfer, 'tranId');
        const currencyId = this.safeString(transfer, 'asset');
        const code = this.safeCurrencyCode(currencyId, currency);
        const amount = this.safeNumber(transfer, 'amount');
        const type = this.safeString(transfer, 'type');
        let fromAccount = undefined;
        let toAccount = undefined;
        const accountsById = this.safeValue(this.options, 'accountsById', {});
        if (type !== undefined) {
            const parts = type.split('_');
            fromAccount = this.safeValue(parts, 0);
            toAccount = this.safeValue(parts, 1);
            fromAccount = this.safeString(accountsById, fromAccount, fromAccount);
            toAccount = this.safeString(accountsById, toAccount, toAccount);
        }
        const timestamp = this.safeInteger(transfer, 'timestamp');
        const status = this.parseTransferStatus(this.safeString(transfer, 'status'));
        return {
            'info': transfer,
            'id': id,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'currency': code,
            'amount': amount,
            'fromAccount': fromAccount,
            'toAccount': toAccount,
            'status': status,
        };
    }
    parseIncome(income, market = undefined) {
        //
        //     {
        //       "symbol": "ETHUSDT",
        //       "incomeType": "FUNDING_FEE",
        //       "income": "0.00134317",
        //       "asset": "USDT",
        //       "time": "1621584000000",
        //       "info": "FUNDING_FEE",
        //       "tranId": "4480321991774044580",
        //       "tradeId": ""
        //     }
        //
        const marketId = this.safeString(income, 'symbol');
        const symbol = this.safeSymbol(marketId, market, undefined, 'swap');
        const amount = this.safeNumber(income, 'income');
        const currencyId = this.safeString(income, 'asset');
        const code = this.safeCurrencyCode(currencyId);
        const id = this.safeString(income, 'tranId');
        const timestamp = this.safeInteger(income, 'time');
        return {
            'info': income,
            'symbol': symbol,
            'code': code,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'id': id,
            'amount': amount,
        };
    }
    async transfer(code, amount, fromAccount, toAccount, params = {}) {
        /**
         * @method
         * @name binance#transfer
         * @description transfer currency internally between wallets on the same account
         * @see https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer-user_data
         * @see https://binance-docs.github.io/apidocs/spot/en/#isolated-margin-account-transfer-margin
         * @param {string} code unified currency code
         * @param {float} amount amount to transfer
         * @param {string} fromAccount account to transfer from
         * @param {string} toAccount account to transfer to
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'asset': currency['id'],
            'amount': this.currencyToPrecision(code, amount),
        };
        request['type'] = this.safeString(params, 'type');
        let method = 'sapiPostAssetTransfer';
        if (request['type'] === undefined) {
            const symbol = this.safeString(params, 'symbol');
            if (symbol !== undefined) {
                params = this.omit(params, 'symbol');
            }
            let fromId = this.convertTypeToAccount(fromAccount).toUpperCase();
            let toId = this.convertTypeToAccount(toAccount).toUpperCase();
            if (fromId === 'ISOLATED') {
                if (symbol === undefined) {
                    throw new ArgumentsRequired(this.id + ' transfer () requires params["symbol"] when fromAccount is ' + fromAccount);
                }
                else {
                    fromId = this.marketId(symbol);
                }
            }
            if (toId === 'ISOLATED') {
                if (symbol === undefined) {
                    throw new ArgumentsRequired(this.id + ' transfer () requires params["symbol"] when toAccount is ' + toAccount);
                }
                else {
                    toId = this.marketId(symbol);
                }
            }
            const accountsById = this.safeValue(this.options, 'accountsById', {});
            const fromIsolated = !(fromId in accountsById);
            const toIsolated = !(toId in accountsById);
            if (fromIsolated || toIsolated) { // Isolated margin transfer
                const fromFuture = fromId === 'UMFUTURE' || fromId === 'CMFUTURE';
                const toFuture = toId === 'UMFUTURE' || toId === 'CMFUTURE';
                const fromSpot = fromId === 'MAIN';
                const toSpot = toId === 'MAIN';
                const funding = fromId === 'FUNDING' || toId === 'FUNDING';
                const mining = fromId === 'MINING' || toId === 'MINING';
                const prohibitedWithIsolated = fromFuture || toFuture || mining || funding;
                if ((fromIsolated || toIsolated) && prohibitedWithIsolated) {
                    throw new BadRequest(this.id + ' transfer () does not allow transfers between ' + fromAccount + ' and ' + toAccount);
                }
                else if (toSpot && fromIsolated) {
                    method = 'sapiPostMarginIsolatedTransfer';
                    request['transFrom'] = 'ISOLATED_MARGIN';
                    request['transTo'] = 'SPOT';
                    request['symbol'] = fromId;
                }
                else if (fromSpot && toIsolated) {
                    method = 'sapiPostMarginIsolatedTransfer';
                    request['transFrom'] = 'SPOT';
                    request['transTo'] = 'ISOLATED_MARGIN';
                    request['symbol'] = toId;
                }
                else {
                    if (fromIsolated) {
                        request['fromSymbol'] = fromId;
                        fromId = 'ISOLATEDMARGIN';
                    }
                    if (toIsolated) {
                        request['toSymbol'] = toId;
                        toId = 'ISOLATEDMARGIN';
                    }
                    request['type'] = fromId + '_' + toId;
                }
            }
            else {
                request['type'] = fromId + '_' + toId;
            }
        }
        params = this.omit(params, 'type');
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "tranId":13526853623
        //     }
        //
        return this.parseTransfer(response, currency);
    }
    async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchTransfers
         * @description fetch a history of internal transfers made on an account
         * @param {string|undefined} code unified currency code of the currency transferred
         * @param {int|undefined} since the earliest time in ms to fetch transfers for
         * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
        }
        const defaultType = this.safeString2(this.options, 'fetchTransfers', 'defaultType', 'spot');
        const fromAccount = this.safeString(params, 'fromAccount', defaultType);
        const defaultTo = (fromAccount === 'future') ? 'spot' : 'future';
        const toAccount = this.safeString(params, 'toAccount', defaultTo);
        let type = this.safeString(params, 'type');
        const accountsByType = this.safeValue(this.options, 'accountsByType', {});
        const fromId = this.safeString(accountsByType, fromAccount);
        const toId = this.safeString(accountsByType, toAccount);
        if (type === undefined) {
            if (fromId === undefined) {
                const keys = Object.keys(accountsByType);
                throw new ExchangeError(this.id + ' fromAccount parameter must be one of ' + keys.join(', '));
            }
            if (toId === undefined) {
                const keys = Object.keys(accountsByType);
                throw new ExchangeError(this.id + ' toAccount parameter must be one of ' + keys.join(', '));
            }
            type = fromId + '_' + toId;
        }
        const request = {
            'type': type,
        };
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['size'] = limit;
        }
        const response = await this.sapiGetAssetTransfer(this.extend(request, params));
        //
        //     {
        //         total: 3,
        //         rows: [
        //             {
        //                 timestamp: 1614640878000,
        //                 asset: 'USDT',
        //                 amount: '25',
        //                 type: 'MAIN_UMFUTURE',
        //                 status: 'CONFIRMED',
        //                 tranId: 43000126248
        //             },
        //         ]
        //     }
        //
        const rows = this.safeValue(response, 'rows', []);
        return this.parseTransfers(rows, currency, since, limit);
    }
    async fetchDepositAddress(code, params = {}) {
        /**
         * @method
         * @name binance#fetchDepositAddress
         * @description fetch the deposit address for a currency associated with this account
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'coin': currency['id'],
            // 'network': 'ETH', // 'BSC', 'XMR', you can get network and isDefault in networkList in the response of sapiGetCapitalConfigDetail
        };
        const networks = this.safeValue(this.options, 'networks', {});
        let network = this.safeStringUpper(params, 'network'); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (network !== undefined) {
            request['network'] = network;
            params = this.omit(params, 'network');
        }
        // has support for the 'network' parameter
        // https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data
        const response = await this.sapiGetCapitalDepositAddress(this.extend(request, params));
        //
        //     {
        //         currency: 'XRP',
        //         address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
        //         tag: '108618262',
        //         info: {
        //             coin: 'XRP',
        //             address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
        //             tag: '108618262',
        //             url: 'https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh'
        //         }
        //     }
        //
        const address = this.safeString(response, 'address');
        const url = this.safeString(response, 'url');
        let impliedNetwork = undefined;
        if (url !== undefined) {
            const reverseNetworks = this.safeValue(this.options, 'reverseNetworks', {});
            const parts = url.split('/');
            let topLevel = this.safeString(parts, 2);
            if ((topLevel === 'blockchair.com') || (topLevel === 'viewblock.io')) {
                const subLevel = this.safeString(parts, 3);
                if (subLevel !== undefined) {
                    topLevel = topLevel + '/' + subLevel;
                }
            }
            impliedNetwork = this.safeString(reverseNetworks, topLevel);
            const impliedNetworks = this.safeValue(this.options, 'impliedNetworks', {
                'ETH': { 'ERC20': 'ETH' },
                'TRX': { 'TRC20': 'TRX' },
            });
            if (code in impliedNetworks) {
                const conversion = this.safeValue(impliedNetworks, code, {});
                impliedNetwork = this.safeString(conversion, impliedNetwork, impliedNetwork);
            }
        }
        let tag = this.safeString(response, 'tag', '');
        if (tag.length === 0) {
            tag = undefined;
        }
        this.checkAddress(address);
        return {
            'currency': code,
            'address': address,
            'tag': tag,
            'network': impliedNetwork,
            'info': response,
        };
    }
    async fetchTransactionFees(codes = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchTransactionFees
         * @description *DEPRECATED* please use fetchDepositWithdrawFees instead
         * @param {[string]|undefined} codes not used by binance fetchTransactionFees ()
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
         */
        await this.loadMarkets();
        const response = await this.sapiGetCapitalConfigGetall(params);
        //
        //  [
        //     {
        //       coin: 'BAT',
        //       depositAllEnable: true,
        //       withdrawAllEnable: true,
        //       name: 'Basic Attention Token',
        //       free: '0',
        //       locked: '0',
        //       freeze: '0',
        //       withdrawing: '0',
        //       ipoing: '0',
        //       ipoable: '0',
        //       storage: '0',
        //       isLegalMoney: false,
        //       trading: true,
        //       networkList: [
        //         {
        //           network: 'BNB',
        //           coin: 'BAT',
        //           withdrawIntegerMultiple: '0.00000001',
        //           isDefault: false,
        //           depositEnable: true,
        //           withdrawEnable: true,
        //           depositDesc: '',
        //           withdrawDesc: '',
        //           specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
        //           name: 'BEP2',
        //           resetAddressStatus: false,
        //           addressRegex: '^(bnb1)[0-9a-z]{38}$',
        //           memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
        //           withdrawFee: '0.27',
        //           withdrawMin: '0.54',
        //           withdrawMax: '10000000000',
        //           minConfirm: '1',
        //           unLockConfirm: '0'
        //         },
        //         {
        //           network: 'BSC',
        //           coin: 'BAT',
        //           withdrawIntegerMultiple: '0.00000001',
        //           isDefault: false,
        //           depositEnable: true,
        //           withdrawEnable: true,
        //           depositDesc: '',
        //           withdrawDesc: '',
        //           specialTips: 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 9766e.',
        //           name: 'BEP20 (BSC)',
        //           resetAddressStatus: false,
        //           addressRegex: '^(0x)[0-9A-Fa-f]{40}$',
        //           memoRegex: '',
        //           withdrawFee: '0.27',
        //           withdrawMin: '0.54',
        //           withdrawMax: '10000000000',
        //           minConfirm: '15',
        //           unLockConfirm: '0'
        //         },
        //         {
        //           network: 'ETH',
        //           coin: 'BAT',
        //           withdrawIntegerMultiple: '0.00000001',
        //           isDefault: true,
        //           depositEnable: true,
        //           withdrawEnable: true,
        //           depositDesc: '',
        //           withdrawDesc: '',
        //           specialTips: 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 887ef.',
        //           name: 'ERC20',
        //           resetAddressStatus: false,
        //           addressRegex: '^(0x)[0-9A-Fa-f]{40}$',
        //           memoRegex: '',
        //           withdrawFee: '27',
        //           withdrawMin: '54',
        //           withdrawMax: '10000000000',
        //           minConfirm: '12',
        //           unLockConfirm: '0'
        //         }
        //       ]
        //     }
        //  ]
        //
        const withdrawFees = {};
        for (let i = 0; i < response.length; i++) {
            const entry = response[i];
            const currencyId = this.safeString(entry, 'coin');
            const code = this.safeCurrencyCode(currencyId);
            const networkList = this.safeValue(entry, 'networkList', []);
            withdrawFees[code] = {};
            for (let j = 0; j < networkList.length; j++) {
                const networkEntry = networkList[j];
                const networkId = this.safeString(networkEntry, 'network');
                const networkCode = this.safeCurrencyCode(networkId);
                const fee = this.safeNumber(networkEntry, 'withdrawFee');
                withdrawFees[code][networkCode] = fee;
            }
        }
        return {
            'withdraw': withdrawFees,
            'deposit': {},
            'info': response,
        };
    }
    async fetchDepositWithdrawFees(codes = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchDepositWithdrawFees
         * @description fetch deposit and withdraw fees
         * @param {[string]|undefined} codes not used by binance fetchDepositWithdrawFees ()
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
         */
        await this.loadMarkets();
        const response = await this.sapiGetCapitalConfigGetall(params);
        //
        //    [
        //        {
        //            coin: 'BAT',
        //            depositAllEnable: true,
        //            withdrawAllEnable: true,
        //            name: 'Basic Attention Token',
        //            free: '0',
        //            locked: '0',
        //            freeze: '0',
        //            withdrawing: '0',
        //            ipoing: '0',
        //            ipoable: '0',
        //            storage: '0',
        //            isLegalMoney: false,
        //            trading: true,
        //            networkList: [
        //                {
        //                    network: 'BNB',
        //                    coin: 'BAT',
        //                    withdrawIntegerMultiple: '0.00000001',
        //                    isDefault: false,
        //                    depositEnable: true,
        //                    withdrawEnable: true,
        //                    depositDesc: '',
        //                    withdrawDesc: '',
        //                    specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
        //                    name: 'BEP2',
        //                    resetAddressStatus: false,
        //                    addressRegex: '^(bnb1)[0-9a-z]{38}$',
        //                    memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
        //                    withdrawFee: '0.27',
        //                    withdrawMin: '0.54',
        //                    withdrawMax: '10000000000',
        //                    minConfirm: '1',
        //                    unLockConfirm: '0'
        //                },
        //                ...
        //            ]
        //        }
        //    ]
        //
        return this.parseDepositWithdrawFees(response, codes, 'coin');
    }
    parseDepositWithdrawFee(fee, currency = undefined) {
        //
        //    {
        //        coin: 'BAT',
        //        depositAllEnable: true,
        //        withdrawAllEnable: true,
        //        name: 'Basic Attention Token',
        //        free: '0',
        //        locked: '0',
        //        freeze: '0',
        //        withdrawing: '0',
        //        ipoing: '0',
        //        ipoable: '0',
        //        storage: '0',
        //        isLegalMoney: false,
        //        trading: true,
        //        networkList: [
        //            {
        //                network: 'BNB',
        //                coin: 'BAT',
        //                withdrawIntegerMultiple: '0.00000001',
        //                isDefault: false,
        //                depositEnable: true,
        //                withdrawEnable: true,
        //                depositDesc: '',
        //                withdrawDesc: '',
        //                specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
        //                name: 'BEP2',
        //                resetAddressStatus: false,
        //                addressRegex: '^(bnb1)[0-9a-z]{38}$',
        //                memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
        //                withdrawFee: '0.27',
        //                withdrawMin: '0.54',
        //                withdrawMax: '10000000000',
        //                minConfirm: '1',
        //                unLockConfirm: '0'
        //            },
        //            ...
        //        ]
        //    }
        //
        const networkList = this.safeValue(fee, 'networkList', []);
        const result = this.depositWithdrawFee(fee);
        for (let j = 0; j < networkList.length; j++) {
            const networkEntry = networkList[j];
            const networkId = this.safeString(networkEntry, 'network');
            const networkCode = this.networkIdToCode(networkId);
            const withdrawFee = this.safeNumber(networkEntry, 'withdrawFee');
            const isDefault = this.safeValue(networkEntry, 'isDefault');
            if (isDefault === true) {
                result['withdraw'] = {
                    'fee': withdrawFee,
                    'percentage': undefined,
                };
            }
            result['networks'][networkCode] = {
                'withdraw': {
                    'fee': withdrawFee,
                    'percentage': undefined,
                },
                'deposit': {
                    'fee': undefined,
                    'percentage': undefined,
                },
            };
        }
        return result;
    }
    async withdraw(code, amount, address, tag = undefined, params = {}) {
        /**
         * @method
         * @name binance#withdraw
         * @description make a withdrawal
         * @param {string} code unified currency code
         * @param {float} amount the amount to withdraw
         * @param {string} address the address to withdraw to
         * @param {string|undefined} tag
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        [tag, params] = this.handleWithdrawTagAndParams(tag, params);
        this.checkAddress(address);
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'coin': currency['id'],
            'address': address,
            'amount': amount,
            // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
            // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni
            // 'network': 'ETH', // 'BTC', 'TRX', etc, optional
        };
        if (tag !== undefined) {
            request['addressTag'] = tag;
        }
        const networks = this.safeValue(this.options, 'networks', {});
        let network = this.safeStringUpper(params, 'network'); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (network !== undefined) {
            request['network'] = network;
            params = this.omit(params, 'network');
        }
        const response = await this.sapiPostCapitalWithdrawApply(this.extend(request, params));
        //     { id: '9a67628b16ba4988ae20d329333f16bc' }
        return this.parseTransaction(response, currency);
    }
    parseTradingFee(fee, market = undefined) {
        //
        //     {
        //         "symbol": "ADABNB",
        //         "makerCommission": 0.001,
        //         "takerCommission": 0.001
        //     }
        //
        const marketId = this.safeString(fee, 'symbol');
        const symbol = this.safeSymbol(marketId, market, undefined, 'spot');
        return {
            'info': fee,
            'symbol': symbol,
            'maker': this.safeNumber(fee, 'makerCommission'),
            'taker': this.safeNumber(fee, 'takerCommission'),
        };
    }
    async fetchTradingFee(symbol, params = {}) {
        /**
         * @method
         * @name binance#fetchTradingFee
         * @description fetch the trading fees for a market
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.sapiGetAssetTradeFee(this.extend(request, params));
        //
        //     [
        //       {
        //         "symbol": "BTCUSDT",
        //         "makerCommission": "0.001",
        //         "takerCommission": "0.001"
        //       }
        //     ]
        //
        const first = this.safeValue(response, 0, {});
        return this.parseTradingFee(first);
    }
    async fetchTradingFees(params = {}) {
        /**
         * @method
         * @name binance#fetchTradingFees
         * @description fetch the trading fees for multiple markets
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
         */
        await this.loadMarkets();
        let method = undefined;
        const defaultType = this.safeString2(this.options, 'fetchTradingFees', 'defaultType', 'linear');
        const type = this.safeString(params, 'type', defaultType);
        params = this.omit(params, 'type');
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchTradingFees', undefined, params);
        const isSpotOrMargin = (type === 'spot') || (type === 'margin');
        const isLinear = this.isLinear(type, subType);
        const isInverse = this.isInverse(type, subType);
        if (isSpotOrMargin) {
            method = 'sapiGetAssetTradeFee';
        }
        else if (isLinear) {
            method = 'fapiPrivateGetAccount';
        }
        else if (isInverse) {
            method = 'dapiPrivateGetAccount';
        }
        const response = await this[method](params);
        //
        // sapi / spot
        //
        //    [
        //       {
        //         "symbol": "ZRXBNB",
        //         "makerCommission": "0.001",
        //         "takerCommission": "0.001"
        //       },
        //       {
        //         "symbol": "ZRXBTC",
        //         "makerCommission": "0.001",
        //         "takerCommission": "0.001"
        //       },
        //    ]
        //
        // fapi / future / linear
        //
        //     {
        //         "feeTier": 0,       // account commisssion tier
        //         "canTrade": true,   // if can trade
        //         "canDeposit": true,     // if can transfer in asset
        //         "canWithdraw": true,    // if can transfer out asset
        //         "updateTime": 0,
        //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
        //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
        //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
        //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
        //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
        //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
        //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
        //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
        //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
        //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
        //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
        //         ...
        //     }
        //
        // dapi / delivery / inverse
        //
        //     {
        //         "canDeposit": true,
        //         "canTrade": true,
        //         "canWithdraw": true,
        //         "feeTier": 2,
        //         "updateTime": 0
        //     }
        //
        if (isSpotOrMargin) {
            //
            //    [
            //       {
            //         "symbol": "ZRXBNB",
            //         "makerCommission": "0.001",
            //         "takerCommission": "0.001"
            //       },
            //       {
            //         "symbol": "ZRXBTC",
            //         "makerCommission": "0.001",
            //         "takerCommission": "0.001"
            //       },
            //    ]
            //
            const result = {};
            for (let i = 0; i < response.length; i++) {
                const fee = this.parseTradingFee(response[i]);
                const symbol = fee['symbol'];
                result[symbol] = fee;
            }
            return result;
        }
        else if (isLinear) {
            //
            //     {
            //         "feeTier": 0,       // account commisssion tier
            //         "canTrade": true,   // if can trade
            //         "canDeposit": true,     // if can transfer in asset
            //         "canWithdraw": true,    // if can transfer out asset
            //         "updateTime": 0,
            //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
            //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
            //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
            //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
            //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
            //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
            //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
            //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
            //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
            //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
            //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
            //         ...
            //     }
            //
            const symbols = Object.keys(this.markets);
            const result = {};
            const feeTier = this.safeInteger(response, 'feeTier');
            const feeTiers = this.fees['linear']['trading']['tiers'];
            const maker = feeTiers['maker'][feeTier][1];
            const taker = feeTiers['taker'][feeTier][1];
            for (let i = 0; i < symbols.length; i++) {
                const symbol = symbols[i];
                const market = this.markets[symbol];
                if (market['linear']) {
                    result[symbol] = {
                        'info': {
                            'feeTier': feeTier,
                        },
                        'symbol': symbol,
                        'maker': maker,
                        'taker': taker,
                    };
                }
            }
            return result;
        }
        else if (isInverse) {
            //
            //     {
            //         "canDeposit": true,
            //         "canTrade": true,
            //         "canWithdraw": true,
            //         "feeTier": 2,
            //         "updateTime": 0
            //     }
            //
            const symbols = Object.keys(this.markets);
            const result = {};
            const feeTier = this.safeInteger(response, 'feeTier');
            const feeTiers = this.fees['inverse']['trading']['tiers'];
            const maker = feeTiers['maker'][feeTier][1];
            const taker = feeTiers['taker'][feeTier][1];
            for (let i = 0; i < symbols.length; i++) {
                const symbol = symbols[i];
                const market = this.markets[symbol];
                if (market['inverse']) {
                    result[symbol] = {
                        'info': {
                            'feeTier': feeTier,
                        },
                        'symbol': symbol,
                        'maker': maker,
                        'taker': taker,
                    };
                }
            }
            return result;
        }
    }
    async futuresTransfer(code, amount, type, params = {}) {
        /**
         * @method
         * @name binance#futuresTransfer
         * @description transfer between futures account
         * @param {string} code unified currency code
         * @param {float} amount the amount to transfer
         * @param {string} type 1 - transfer from spot account to USDT-Ⓜ futures account, 2 - transfer from USDT-Ⓜ futures account to spot account, 3 - transfer from spot account to COIN-Ⓜ futures account, 4 - transfer from COIN-Ⓜ futures account to spot account
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {float|undefined} params.recvWindow
         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=futures-transfer-structure}
         */
        if ((type < 1) || (type > 4)) {
            throw new ArgumentsRequired(this.id + ' type must be between 1 and 4');
        }
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'asset': currency['id'],
            'amount': amount,
            'type': type,
        };
        const response = await this.sapiPostFuturesTransfer(this.extend(request, params));
        //
        //   {
        //       "tranId": 100000001
        //   }
        //
        return this.parseTransfer(response, currency);
    }
    async fetchFundingRate(symbol, params = {}) {
        /**
         * @method
         * @name binance#fetchFundingRate
         * @description fetch the current funding rate
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let method = undefined;
        if (market['linear']) {
            method = 'fapiPublicGetPremiumIndex';
        }
        else if (market['inverse']) {
            method = 'dapiPublicGetPremiumIndex';
        }
        else {
            throw new NotSupported(this.id + ' fetchFundingRate() supports linear and inverse contracts only');
        }
        let response = await this[method](this.extend(request, params));
        if (market['inverse']) {
            response = response[0];
        }
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "markPrice": "45802.81129892",
        //         "indexPrice": "45745.47701915",
        //         "estimatedSettlePrice": "45133.91753671",
        //         "lastFundingRate": "0.00063521",
        //         "interestRate": "0.00010000",
        //         "nextFundingTime": "1621267200000",
        //         "time": "1621252344001"
        //     }
        //
        return this.parseFundingRate(response, market);
    }
    async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchFundingRateHistory
         * @description fetches historical funding rate prices
         * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
         * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
         * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {int|undefined} params.until timestamp in ms of the latest funding rate
         * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
         */
        await this.loadMarkets();
        const request = {};
        let method = undefined;
        const defaultType = this.safeString2(this.options, 'fetchFundingRateHistory', 'defaultType', 'future');
        const type = this.safeString(params, 'type', defaultType);
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            request['symbol'] = market['id'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchFundingRateHistory', market, params, 'linear');
        params = this.omit(params, 'type');
        if (this.isLinear(type, subType)) {
            method = 'fapiPublicGetFundingRate';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPublicGetFundingRate';
        }
        if (method === undefined) {
            throw new NotSupported(this.id + ' fetchFundingRateHistory() is not supported for ' + type + ' markets');
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        const until = this.safeInteger2(params, 'until', 'till'); // unified in milliseconds
        const endTime = this.safeInteger(params, 'endTime', until); // exchange-specific in milliseconds
        params = this.omit(params, ['endTime', 'till', 'until']);
        if (endTime !== undefined) {
            request['endTime'] = endTime;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "fundingRate": "0.00063521",
        //         "fundingTime": "1621267200000",
        //     }
        //
        const rates = [];
        for (let i = 0; i < response.length; i++) {
            const entry = response[i];
            const timestamp = this.safeInteger(entry, 'fundingTime');
            rates.push({
                'info': entry,
                'symbol': this.safeSymbol(this.safeString(entry, 'symbol'), undefined, undefined, 'swap'),
                'fundingRate': this.safeNumber(entry, 'fundingRate'),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
            });
        }
        const sorted = this.sortBy(rates, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    async fetchFundingRates(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchFundingRates
         * @description fetch the funding rate for multiple markets
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a dictionary of [funding rates structures]{@link https://docs.ccxt.com/#/?id=funding-rates-structure}, indexe by market symbols
         */
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        let method = undefined;
        const defaultType = this.safeString2(this.options, 'fetchFundingRates', 'defaultType', 'future');
        const type = this.safeString(params, 'type', defaultType);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchFundingRates', undefined, params, 'linear');
        const query = this.omit(params, 'type');
        if (this.isLinear(type, subType)) {
            method = 'fapiPublicGetPremiumIndex';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPublicGetPremiumIndex';
        }
        else {
            throw new NotSupported(this.id + ' fetchFundingRates() supports linear and inverse contracts only');
        }
        const response = await this[method](query);
        const result = [];
        for (let i = 0; i < response.length; i++) {
            const entry = response[i];
            const parsed = this.parseFundingRate(entry);
            result.push(parsed);
        }
        return this.filterByArray(result, 'symbol', symbols);
    }
    parseFundingRate(contract, market = undefined) {
        // ensure it matches with https://www.binance.com/en/futures/funding-history/0
        //
        //   {
        //     "symbol": "BTCUSDT",
        //     "markPrice": "45802.81129892",
        //     "indexPrice": "45745.47701915",
        //     "estimatedSettlePrice": "45133.91753671",
        //     "lastFundingRate": "0.00063521",
        //     "interestRate": "0.00010000",
        //     "nextFundingTime": "1621267200000",
        //     "time": "1621252344001"
        //  }
        //
        const timestamp = this.safeInteger(contract, 'time');
        const marketId = this.safeString(contract, 'symbol');
        const symbol = this.safeSymbol(marketId, market, undefined, 'contract');
        const markPrice = this.safeNumber(contract, 'markPrice');
        const indexPrice = this.safeNumber(contract, 'indexPrice');
        const interestRate = this.safeNumber(contract, 'interestRate');
        const estimatedSettlePrice = this.safeNumber(contract, 'estimatedSettlePrice');
        const fundingRate = this.safeNumber(contract, 'lastFundingRate');
        const fundingTime = this.safeInteger(contract, 'nextFundingTime');
        return {
            'info': contract,
            'symbol': symbol,
            'markPrice': markPrice,
            'indexPrice': indexPrice,
            'interestRate': interestRate,
            'estimatedSettlePrice': estimatedSettlePrice,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'fundingRate': fundingRate,
            'fundingTimestamp': fundingTime,
            'fundingDatetime': this.iso8601(fundingTime),
            'nextFundingRate': undefined,
            'nextFundingTimestamp': undefined,
            'nextFundingDatetime': undefined,
            'previousFundingRate': undefined,
            'previousFundingTimestamp': undefined,
            'previousFundingDatetime': undefined,
        };
    }
    parseAccountPositions(account) {
        const positions = this.safeValue(account, 'positions');
        const assets = this.safeValue(account, 'assets', []);
        const balances = {};
        for (let i = 0; i < assets.length; i++) {
            const entry = assets[i];
            const currencyId = this.safeString(entry, 'asset');
            const code = this.safeCurrencyCode(currencyId);
            const crossWalletBalance = this.safeString(entry, 'crossWalletBalance');
            const crossUnPnl = this.safeString(entry, 'crossUnPnl');
            balances[code] = {
                'crossMargin': Precise.stringAdd(crossWalletBalance, crossUnPnl),
                'crossWalletBalance': crossWalletBalance,
            };
        }
        const result = [];
        for (let i = 0; i < positions.length; i++) {
            const position = positions[i];
            const marketId = this.safeString(position, 'symbol');
            const market = this.safeMarket(marketId, undefined, undefined, 'contract');
            const code = market['linear'] ? market['quote'] : market['base'];
            // sometimes not all the codes are correctly returned...
            if (code in balances) {
                const parsed = this.parseAccountPosition(this.extend(position, {
                    'crossMargin': balances[code]['crossMargin'],
                    'crossWalletBalance': balances[code]['crossWalletBalance'],
                }), market);
                result.push(parsed);
            }
        }
        return result;
    }
    parseAccountPosition(position, market = undefined) {
        //
        // usdm
        //    {
        //       "symbol": "BTCBUSD",
        //       "initialMargin": "0",
        //       "maintMargin": "0",
        //       "unrealizedProfit": "0.00000000",
        //       "positionInitialMargin": "0",
        //       "openOrderInitialMargin": "0",
        //       "leverage": "20",
        //       "isolated": false,
        //       "entryPrice": "0.0000",
        //       "maxNotional": "100000",
        //       "positionSide": "BOTH",
        //       "positionAmt": "0.000",
        //       "notional": "0",
        //       "isolatedWallet": "0",
        //       "updateTime": "0",
        //       "crossMargin": "100.93634809",
        //     }
        //
        // coinm
        //     {
        //       "symbol": "BTCUSD_210625",
        //       "initialMargin": "0.00024393",
        //       "maintMargin": "0.00002439",
        //       "unrealizedProfit": "-0.00000163",
        //       "positionInitialMargin": "0.00024393",
        //       "openOrderInitialMargin": "0",
        //       "leverage": "10",
        //       "isolated": false,
        //       "positionSide": "BOTH",
        //       "entryPrice": "41021.20000069",
        //       "maxQty": "100",
        //       "notionalValue": "0.00243939",
        //       "isolatedWallet": "0",
        //       "crossMargin": "0.314"
        //       "crossWalletBalance": "34",
        //     }
        //
        const marketId = this.safeString(position, 'symbol');
        market = this.safeMarket(marketId, market, undefined, 'contract');
        const symbol = this.safeString(market, 'symbol');
        const leverageString = this.safeString(position, 'leverage');
        const leverage = parseInt(leverageString);
        const initialMarginString = this.safeString(position, 'initialMargin');
        const initialMargin = this.parseNumber(initialMarginString);
        let initialMarginPercentageString = Precise.stringDiv('1', leverageString, 8);
        const rational = (1000 % leverage) === 0;
        if (!rational) {
            initialMarginPercentageString = Precise.stringDiv(Precise.stringAdd(initialMarginPercentageString, '1e-8'), '1', 8);
        }
        // as oppose to notionalValue
        const usdm = ('notional' in position);
        const maintenanceMarginString = this.safeString(position, 'maintMargin');
        const maintenanceMargin = this.parseNumber(maintenanceMarginString);
        const entryPriceString = this.safeString(position, 'entryPrice');
        let entryPrice = this.parseNumber(entryPriceString);
        const notionalString = this.safeString2(position, 'notional', 'notionalValue');
        const notionalStringAbs = Precise.stringAbs(notionalString);
        const notional = this.parseNumber(notionalStringAbs);
        let contractsString = this.safeString(position, 'positionAmt');
        let contractsStringAbs = Precise.stringAbs(contractsString);
        if (contractsString === undefined) {
            const entryNotional = Precise.stringMul(Precise.stringMul(leverageString, initialMarginString), entryPriceString);
            const contractSize = this.safeString(market, 'contractSize');
            contractsString = Precise.stringDiv(entryNotional, contractSize);
            contractsStringAbs = Precise.stringDiv(Precise.stringAdd(contractsString, '0.5'), '1', 0);
        }
        const contracts = this.parseNumber(contractsStringAbs);
        const leverageBrackets = this.safeValue(this.options, 'leverageBrackets', {});
        const leverageBracket = this.safeValue(leverageBrackets, symbol, []);
        let maintenanceMarginPercentageString = undefined;
        for (let i = 0; i < leverageBracket.length; i++) {
            const bracket = leverageBracket[i];
            if (Precise.stringLt(notionalStringAbs, bracket[0])) {
                break;
            }
            maintenanceMarginPercentageString = bracket[1];
        }
        const maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);
        const unrealizedPnlString = this.safeString(position, 'unrealizedProfit');
        const unrealizedPnl = this.parseNumber(unrealizedPnlString);
        let timestamp = this.safeInteger(position, 'updateTime');
        if (timestamp === 0) {
            timestamp = undefined;
        }
        const isolated = this.safeValue(position, 'isolated');
        let marginMode = undefined;
        let collateralString = undefined;
        let walletBalance = undefined;
        if (isolated) {
            marginMode = 'isolated';
            walletBalance = this.safeString(position, 'isolatedWallet');
            collateralString = Precise.stringAdd(walletBalance, unrealizedPnlString);
        }
        else {
            marginMode = 'cross';
            walletBalance = this.safeString(position, 'crossWalletBalance');
            collateralString = this.safeString(position, 'crossMargin');
        }
        const collateral = this.parseNumber(collateralString);
        let marginRatio = undefined;
        let side = undefined;
        let percentage = undefined;
        let liquidationPriceStringRaw = undefined;
        let liquidationPrice = undefined;
        const contractSize = this.safeValue(market, 'contractSize');
        const contractSizeString = this.numberToString(contractSize);
        if (Precise.stringEquals(notionalString, '0')) {
            entryPrice = undefined;
        }
        else {
            side = Precise.stringLt(notionalString, '0') ? 'short' : 'long';
            marginRatio = this.parseNumber(Precise.stringDiv(Precise.stringAdd(Precise.stringDiv(maintenanceMarginString, collateralString), '5e-5'), '1', 4));
            percentage = this.parseNumber(Precise.stringMul(Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), '100'));
            if (usdm) {
                // calculate liquidation price
                //
                // liquidationPrice = (walletBalance / (contracts * (±1 + mmp))) + (±entryPrice / (±1 + mmp))
                //
                // mmp = maintenanceMarginPercentage
                // where ± is negative for long and positive for short
                // TODO: calculate liquidation price for coinm contracts
                let onePlusMaintenanceMarginPercentageString = undefined;
                let entryPriceSignString = entryPriceString;
                if (side === 'short') {
                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd('1', maintenanceMarginPercentageString);
                }
                else {
                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd('-1', maintenanceMarginPercentageString);
                    entryPriceSignString = Precise.stringMul('-1', entryPriceSignString);
                }
                const leftSide = Precise.stringDiv(walletBalance, Precise.stringMul(contractsStringAbs, onePlusMaintenanceMarginPercentageString));
                const rightSide = Precise.stringDiv(entryPriceSignString, onePlusMaintenanceMarginPercentageString);
                liquidationPriceStringRaw = Precise.stringAdd(leftSide, rightSide);
            }
            else {
                // calculate liquidation price
                //
                // liquidationPrice = (contracts * contractSize(±1 - mmp)) / (±1/entryPrice * contracts * contractSize - walletBalance)
                //
                let onePlusMaintenanceMarginPercentageString = undefined;
                let entryPriceSignString = entryPriceString;
                if (side === 'short') {
                    onePlusMaintenanceMarginPercentageString = Precise.stringSub('1', maintenanceMarginPercentageString);
                }
                else {
                    onePlusMaintenanceMarginPercentageString = Precise.stringSub('-1', maintenanceMarginPercentageString);
                    entryPriceSignString = Precise.stringMul('-1', entryPriceSignString);
                }
                const size = Precise.stringMul(contractsStringAbs, contractSizeString);
                const leftSide = Precise.stringMul(size, onePlusMaintenanceMarginPercentageString);
                const rightSide = Precise.stringSub(Precise.stringMul(Precise.stringDiv('1', entryPriceSignString), size), walletBalance);
                liquidationPriceStringRaw = Precise.stringDiv(leftSide, rightSide);
            }
            const pricePrecision = market['precision']['price'];
            const pricePrecisionPlusOne = pricePrecision + 1;
            const pricePrecisionPlusOneString = pricePrecisionPlusOne.toString();
            // round half up
            const rounder = new Precise('5e-' + pricePrecisionPlusOneString);
            const rounderString = rounder.toString();
            const liquidationPriceRoundedString = Precise.stringAdd(rounderString, liquidationPriceStringRaw);
            let truncatedLiquidationPrice = Precise.stringDiv(liquidationPriceRoundedString, '1', pricePrecision);
            if (truncatedLiquidationPrice[0] === '-') {
                // user cannot be liquidated
                // since he has more collateral than the size of the position
                truncatedLiquidationPrice = undefined;
            }
            liquidationPrice = this.parseNumber(truncatedLiquidationPrice);
        }
        const positionSide = this.safeString(position, 'positionSide');
        const hedged = positionSide !== 'BOTH';
        return {
            'info': position,
            'id': undefined,
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'initialMargin': initialMargin,
            'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),
            'maintenanceMargin': maintenanceMargin,
            'maintenanceMarginPercentage': maintenanceMarginPercentage,
            'entryPrice': entryPrice,
            'notional': notional,
            'leverage': this.parseNumber(leverageString),
            'unrealizedPnl': unrealizedPnl,
            'contracts': contracts,
            'contractSize': contractSize,
            'marginRatio': marginRatio,
            'liquidationPrice': liquidationPrice,
            'markPrice': undefined,
            'collateral': collateral,
            'marginMode': marginMode,
            'side': side,
            'hedged': hedged,
            'percentage': percentage,
        };
    }
    parsePositionRisk(position, market = undefined) {
        //
        // usdm
        //     {
        //       "symbol": "BTCUSDT",
        //       "positionAmt": "0.001",
        //       "entryPrice": "43578.07000",
        //       "markPrice": "43532.30000000",
        //       "unRealizedProfit": "-0.04577000",
        //       "liquidationPrice": "21841.24993976",
        //       "leverage": "2",
        //       "maxNotionalValue": "300000000",
        //       "marginType": "isolated",
        //       "isolatedMargin": "21.77841506",
        //       "isAutoAddMargin": "false",
        //       "positionSide": "BOTH",
        //       "notional": "43.53230000",
        //       "isolatedWallet": "21.82418506",
        //       "updateTime": "1621358023886"
        //     }
        //
        // coinm
        //     {
        //       "symbol": "BTCUSD_PERP",
        //       "positionAmt": "2",
        //       "entryPrice": "37643.10000021",
        //       "markPrice": "38103.05510455",
        //       "unRealizedProfit": "0.00006413",
        //       "liquidationPrice": "25119.97445760",
        //       "leverage": "2",
        //       "maxQty": "1500",
        //       "marginType": "isolated",
        //       "isolatedMargin": "0.00274471",
        //       "isAutoAddMargin": "false",
        //       "positionSide": "BOTH",
        //       "notionalValue": "0.00524892",
        //       "isolatedWallet": "0.00268058"
        //     }
        //
        const marketId = this.safeString(position, 'symbol');
        market = this.safeMarket(marketId, market, undefined, 'contract');
        const symbol = this.safeString(market, 'symbol');
        const leverageBrackets = this.safeValue(this.options, 'leverageBrackets', {});
        const leverageBracket = this.safeValue(leverageBrackets, symbol, []);
        const notionalString = this.safeString2(position, 'notional', 'notionalValue');
        const notionalStringAbs = Precise.stringAbs(notionalString);
        let maintenanceMarginPercentageString = undefined;
        for (let i = 0; i < leverageBracket.length; i++) {
            const bracket = leverageBracket[i];
            if (Precise.stringLt(notionalStringAbs, bracket[0])) {
                break;
            }
            maintenanceMarginPercentageString = bracket[1];
        }
        const notional = this.parseNumber(notionalStringAbs);
        const contractsAbs = Precise.stringAbs(this.safeString(position, 'positionAmt'));
        const contracts = this.parseNumber(contractsAbs);
        const unrealizedPnlString = this.safeString(position, 'unRealizedProfit');
        const unrealizedPnl = this.parseNumber(unrealizedPnlString);
        const leverageString = this.safeString(position, 'leverage');
        const leverage = parseInt(leverageString);
        const liquidationPriceString = this.omitZero(this.safeString(position, 'liquidationPrice'));
        const liquidationPrice = this.parseNumber(liquidationPriceString);
        let collateralString = undefined;
        const marginMode = this.safeString(position, 'marginType');
        let side = undefined;
        if (Precise.stringGt(notionalString, '0')) {
            side = 'long';
        }
        else if (Precise.stringLt(notionalString, '0')) {
            side = 'short';
        }
        const entryPriceString = this.safeString(position, 'entryPrice');
        const entryPrice = this.parseNumber(entryPriceString);
        const contractSize = this.safeValue(market, 'contractSize');
        const contractSizeString = this.numberToString(contractSize);
        // as oppose to notionalValue
        const linear = ('notional' in position);
        if (marginMode === 'cross') {
            // calculate collateral
            const precision = this.safeValue(market, 'precision', {});
            if (linear) {
                // walletBalance = (liquidationPrice * (±1 + mmp) ± entryPrice) * contracts
                let onePlusMaintenanceMarginPercentageString = undefined;
                let entryPriceSignString = entryPriceString;
                if (side === 'short') {
                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd('1', maintenanceMarginPercentageString);
                    entryPriceSignString = Precise.stringMul('-1', entryPriceSignString);
                }
                else {
                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd('-1', maintenanceMarginPercentageString);
                }
                const inner = Precise.stringMul(liquidationPriceString, onePlusMaintenanceMarginPercentageString);
                const leftSide = Precise.stringAdd(inner, entryPriceSignString);
                const pricePrecision = this.safeInteger(precision, 'price');
                const quotePrecision = this.safeInteger(precision, 'quote', pricePrecision);
                if (quotePrecision !== undefined) {
                    collateralString = Precise.stringDiv(Precise.stringMul(leftSide, contractsAbs), '1', quotePrecision);
                }
            }
            else {
                // walletBalance = (contracts * contractSize) * (±1/entryPrice - (±1 - mmp) / liquidationPrice)
                let onePlusMaintenanceMarginPercentageString = undefined;
                let entryPriceSignString = entryPriceString;
                if (side === 'short') {
                    onePlusMaintenanceMarginPercentageString = Precise.stringSub('1', maintenanceMarginPercentageString);
                }
                else {
                    onePlusMaintenanceMarginPercentageString = Precise.stringSub('-1', maintenanceMarginPercentageString);
                    entryPriceSignString = Precise.stringMul('-1', entryPriceSignString);
                }
                const leftSide = Precise.stringMul(contractsAbs, contractSizeString);
                const rightSide = Precise.stringSub(Precise.stringDiv('1', entryPriceSignString), Precise.stringDiv(onePlusMaintenanceMarginPercentageString, liquidationPriceString));
                const basePrecision = this.safeInteger(precision, 'base');
                if (basePrecision !== undefined) {
                    collateralString = Precise.stringDiv(Precise.stringMul(leftSide, rightSide), '1', basePrecision);
                }
            }
        }
        else {
            collateralString = this.safeString(position, 'isolatedMargin');
        }
        collateralString = (collateralString === undefined) ? '0' : collateralString;
        const collateral = this.parseNumber(collateralString);
        const markPrice = this.parseNumber(this.omitZero(this.safeString(position, 'markPrice')));
        let timestamp = this.safeInteger(position, 'updateTime');
        if (timestamp === 0) {
            timestamp = undefined;
        }
        const maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);
        const maintenanceMarginString = Precise.stringMul(maintenanceMarginPercentageString, notionalStringAbs);
        const maintenanceMargin = this.parseNumber(maintenanceMarginString);
        let initialMarginPercentageString = Precise.stringDiv('1', leverageString, 8);
        const rational = (1000 % leverage) === 0;
        if (!rational) {
            initialMarginPercentageString = Precise.stringAdd(initialMarginPercentageString, '1e-8');
        }
        const initialMarginString = Precise.stringDiv(Precise.stringMul(notionalStringAbs, initialMarginPercentageString), '1', 8);
        const initialMargin = this.parseNumber(initialMarginString);
        let marginRatio = undefined;
        let percentage = undefined;
        if (!Precise.stringEquals(collateralString, '0')) {
            marginRatio = this.parseNumber(Precise.stringDiv(Precise.stringAdd(Precise.stringDiv(maintenanceMarginString, collateralString), '5e-5'), '1', 4));
            percentage = this.parseNumber(Precise.stringMul(Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), '100'));
        }
        const positionSide = this.safeString(position, 'positionSide');
        const hedged = positionSide !== 'BOTH';
        return {
            'info': position,
            'id': undefined,
            'symbol': symbol,
            'contracts': contracts,
            'contractSize': contractSize,
            'unrealizedPnl': unrealizedPnl,
            'leverage': this.parseNumber(leverageString),
            'liquidationPrice': liquidationPrice,
            'collateral': collateral,
            'notional': notional,
            'markPrice': markPrice,
            'entryPrice': entryPrice,
            'timestamp': timestamp,
            'initialMargin': initialMargin,
            'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),
            'maintenanceMargin': maintenanceMargin,
            'maintenanceMarginPercentage': maintenanceMarginPercentage,
            'marginRatio': marginRatio,
            'datetime': this.iso8601(timestamp),
            'marginMode': marginMode,
            'marginType': marginMode,
            'side': side,
            'hedged': hedged,
            'percentage': percentage,
        };
    }
    async loadLeverageBrackets(reload = false, params = {}) {
        await this.loadMarkets();
        // by default cache the leverage bracket
        // it contains useful stuff like the maintenance margin and initial margin for positions
        const leverageBrackets = this.safeValue(this.options, 'leverageBrackets');
        if ((leverageBrackets === undefined) || (reload)) {
            let method = undefined;
            const defaultType = this.safeString(this.options, 'defaultType', 'future');
            const type = this.safeString(params, 'type', defaultType);
            const query = this.omit(params, 'type');
            let subType = undefined;
            [subType, params] = this.handleSubTypeAndParams('loadLeverageBrackets', undefined, params, 'linear');
            if (this.isLinear(type, subType)) {
                method = 'fapiPrivateGetLeverageBracket';
            }
            else if (this.isInverse(type, subType)) {
                method = 'dapiPrivateV2GetLeverageBracket';
            }
            else {
                throw new NotSupported(this.id + ' loadLeverageBrackets() supports linear and inverse contracts only');
            }
            const response = await this[method](query);
            this.options['leverageBrackets'] = {};
            for (let i = 0; i < response.length; i++) {
                const entry = response[i];
                const marketId = this.safeString(entry, 'symbol');
                const symbol = this.safeSymbol(marketId, undefined, undefined, 'contract');
                const brackets = this.safeValue(entry, 'brackets', []);
                const result = [];
                for (let j = 0; j < brackets.length; j++) {
                    const bracket = brackets[j];
                    const floorValue = this.safeString2(bracket, 'notionalFloor', 'qtyFloor');
                    const maintenanceMarginPercentage = this.safeString(bracket, 'maintMarginRatio');
                    result.push([floorValue, maintenanceMarginPercentage]);
                }
                this.options['leverageBrackets'][symbol] = result;
            }
        }
        return this.options['leverageBrackets'];
    }
    async fetchLeverageTiers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchLeverageTiers
         * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a dictionary of [leverage tiers structures]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}, indexed by market symbols
         */
        await this.loadMarkets();
        const [type, query] = this.handleMarketTypeAndParams('fetchLeverageTiers', undefined, params);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchLeverageTiers', undefined, query, 'linear');
        let method = undefined;
        if (this.isLinear(type, subType)) {
            method = 'fapiPrivateGetLeverageBracket';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPrivateV2GetLeverageBracket';
        }
        else {
            throw new NotSupported(this.id + ' fetchLeverageTiers() supports linear and inverse contracts only');
        }
        const response = await this[method](query);
        //
        // usdm
        //
        //    [
        //        {
        //            "symbol": "SUSHIUSDT",
        //            "brackets": [
        //                {
        //                    "bracket": 1,
        //                    "initialLeverage": 50,
        //                    "notionalCap": 50000,
        //                    "notionalFloor": 0,
        //                    "maintMarginRatio": 0.01,
        //                    "cum": 0.0
        //                },
        //                ...
        //            ]
        //        }
        //    ]
        //
        // coinm
        //
        //     [
        //         {
        //             "symbol":"XRPUSD_210326",
        //             "brackets":[
        //                 {
        //                     "bracket":1,
        //                     "initialLeverage":20,
        //                     "qtyCap":500000,
        //                     "qtyFloor":0,
        //                     "maintMarginRatio":0.0185,
        //                     "cum":0.0
        //                 }
        //             ]
        //         }
        //     ]
        //
        return this.parseLeverageTiers(response, symbols, 'symbol');
    }
    parseMarketLeverageTiers(info, market = undefined) {
        /**
         * @ignore
         * @method
         * @param {object} info Exchange response for 1 market
         * @param {object} market CCXT market
         */
        //
        //    {
        //        "symbol": "SUSHIUSDT",
        //        "brackets": [
        //            {
        //                "bracket": 1,
        //                "initialLeverage": 50,
        //                "notionalCap": 50000,
        //                "notionalFloor": 0,
        //                "maintMarginRatio": 0.01,
        //                "cum": 0.0
        //            },
        //            ...
        //        ]
        //    }
        //
        const marketId = this.safeString(info, 'symbol');
        market = this.safeMarket(marketId, market, undefined, 'contract');
        const brackets = this.safeValue(info, 'brackets', []);
        const tiers = [];
        for (let j = 0; j < brackets.length; j++) {
            const bracket = brackets[j];
            tiers.push({
                'tier': this.safeNumber(bracket, 'bracket'),
                'currency': market['quote'],
                'minNotional': this.safeNumber2(bracket, 'notionalFloor', 'qtyFloor'),
                'maxNotional': this.safeNumber2(bracket, 'notionalCap', 'qtyCap'),
                'maintenanceMarginRate': this.safeNumber(bracket, 'maintMarginRatio'),
                'maxLeverage': this.safeNumber(bracket, 'initialLeverage'),
                'info': bracket,
            });
        }
        return tiers;
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchPositions
         * @description fetch all open positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        const defaultMethod = this.safeString(this.options, 'fetchPositions', 'positionRisk');
        if (defaultMethod === 'positionRisk') {
            return await this.fetchPositionsRisk(symbols, params);
        }
        else if (defaultMethod === 'account') {
            return await this.fetchAccountPositions(symbols, params);
        }
        else {
            throw new NotSupported(this.id + '.options["fetchPositions"] = "' + defaultMethod + '" is invalid, please choose between "account" and "positionRisk"');
        }
    }
    async fetchAccountPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchAccountPositions
         * @description fetch account positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} data on account positions
         */
        if (symbols !== undefined) {
            if (!Array.isArray(symbols)) {
                throw new ArgumentsRequired(this.id + ' fetchPositions() requires an array argument for symbols');
            }
        }
        await this.loadMarkets();
        await this.loadLeverageBrackets(false, params);
        let method = undefined;
        const defaultType = this.safeString(this.options, 'defaultType', 'future');
        const type = this.safeString(params, 'type', defaultType);
        let query = this.omit(params, 'type');
        let subType = undefined;
        [subType, query] = this.handleSubTypeAndParams('fetchAccountPositions', undefined, params, 'linear');
        if (this.isLinear(type, subType)) {
            method = 'fapiPrivateGetAccount';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPrivateGetAccount';
        }
        else {
            throw new NotSupported(this.id + ' fetchPositions() supports linear and inverse contracts only');
        }
        const account = await this[method](query);
        const result = this.parseAccountPositions(account);
        symbols = this.marketSymbols(symbols);
        return this.filterByArray(result, 'symbol', symbols, false);
    }
    async fetchPositionsRisk(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchPositionsRisk
         * @description fetch positions risk
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} data on the positions risk
         */
        if (symbols !== undefined) {
            if (!Array.isArray(symbols)) {
                throw new ArgumentsRequired(this.id + ' fetchPositionsRisk() requires an array argument for symbols');
            }
        }
        await this.loadMarkets();
        await this.loadLeverageBrackets(false, params);
        const request = {};
        let method = undefined;
        let defaultType = 'future';
        defaultType = this.safeString(this.options, 'defaultType', defaultType);
        const type = this.safeString(params, 'type', defaultType);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchPositionsRisk', undefined, params, 'linear');
        params = this.omit(params, 'type');
        if (this.isLinear(type, subType)) {
            method = 'fapiPrivateGetPositionRisk';
            // ### Response examples ###
            //
            // For One-way position mode:
            //     [
            //         {
            //             "entryPrice": "0.00000",
            //             "marginType": "isolated",
            //             "isAutoAddMargin": "false",
            //             "isolatedMargin": "0.00000000",
            //             "leverage": "10",
            //             "liquidationPrice": "0",
            //             "markPrice": "6679.50671178",
            //             "maxNotionalValue": "20000000",
            //             "positionAmt": "0.000",
            //             "symbol": "BTCUSDT",
            //             "unRealizedProfit": "0.00000000",
            //             "positionSide": "BOTH",
            //             "updateTime": 0
            //        }
            //     ]
            //
            // For Hedge position mode:
            //     [
            //         {
            //             "entryPrice": "6563.66500",
            //             "marginType": "isolated",
            //             "isAutoAddMargin": "false",
            //             "isolatedMargin": "15517.54150468",
            //             "leverage": "10",
            //             "liquidationPrice": "5930.78",
            //             "markPrice": "6679.50671178",
            //             "maxNotionalValue": "20000000",
            //             "positionAmt": "20.000",
            //             "symbol": "BTCUSDT",
            //             "unRealizedProfit": "2316.83423560"
            //             "positionSide": "LONG",
            //             "updateTime": 1625474304765
            //         },
            //         {
            //             "entryPrice": "0.00000",
            //             "marginType": "isolated",
            //             "isAutoAddMargin": "false",
            //             "isolatedMargin": "5413.95799991",
            //             "leverage": "10",
            //             "liquidationPrice": "7189.95",
            //             "markPrice": "6679.50671178",
            //             "maxNotionalValue": "20000000",
            //             "positionAmt": "-10.000",
            //             "symbol": "BTCUSDT",
            //             "unRealizedProfit": "-1156.46711780",
            //             "positionSide": "SHORT",
            //             "updateTime": 0
            //         }
            //     ]
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPrivateGetPositionRisk';
        }
        else {
            throw new NotSupported(this.id + ' fetchPositionsRisk() supports linear and inverse contracts only');
        }
        const response = await this[method](this.extend(request, params));
        const result = [];
        for (let i = 0; i < response.length; i++) {
            const parsed = this.parsePositionRisk(response[i]);
            result.push(parsed);
        }
        symbols = this.marketSymbols(symbols);
        return this.filterByArray(result, 'symbol', symbols, false);
    }
    async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchFundingHistory
         * @description fetch the history of funding payments paid and received on this account
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch funding history for
         * @param {int|undefined} limit the maximum number of funding history structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let method = undefined;
        const request = {
            'incomeType': 'FUNDING_FEE', // "TRANSFER"，"WELCOME_BONUS", "REALIZED_PNL"，"FUNDING_FEE", "COMMISSION" and "INSURANCE_CLEAR"
        };
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            if (!market['swap']) {
                throw new NotSupported(this.id + ' fetchFundingHistory() supports swap contracts only');
            }
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchFundingHistory', market, params, 'linear');
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const defaultType = this.safeString2(this.options, 'fetchFundingHistory', 'defaultType', 'future');
        const type = this.safeString(params, 'type', defaultType);
        params = this.omit(params, 'type');
        if (this.isLinear(type, subType)) {
            method = 'fapiPrivateGetIncome';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPrivateGetIncome';
        }
        else {
            throw new NotSupported(this.id + ' fetchFundingHistory() supports linear and inverse contracts only');
        }
        const response = await this[method](this.extend(request, params));
        return this.parseIncomes(response, market, since, limit);
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#setLeverage
         * @description set the level of leverage for a market
         * @param {float} leverage the rate of leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
        }
        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        if ((leverage < 1) || (leverage > 125)) {
            throw new BadRequest(this.id + ' leverage should be between 1 and 125');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        let method = undefined;
        if (market['linear']) {
            method = 'fapiPrivatePostLeverage';
        }
        else if (market['inverse']) {
            method = 'dapiPrivatePostLeverage';
        }
        else {
            throw new NotSupported(this.id + ' setLeverage() supports linear and inverse contracts only');
        }
        const request = {
            'symbol': market['id'],
            'leverage': leverage,
        };
        return await this[method](this.extend(request, params));
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#setMarginMode
         * @description set margin mode to 'cross' or 'isolated'
         * @param {string} marginMode 'cross' or 'isolated'
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
        }
        //
        // { "code": -4048 , "msg": "Margin type cannot be changed if there exists position." }
        //
        // or
        //
        // { "code": 200, "msg": "success" }
        //
        marginMode = marginMode.toUpperCase();
        if (marginMode === 'CROSS') {
            marginMode = 'CROSSED';
        }
        if ((marginMode !== 'ISOLATED') && (marginMode !== 'CROSSED')) {
            throw new BadRequest(this.id + ' marginMode must be either isolated or cross');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        let method = undefined;
        if (market['linear']) {
            method = 'fapiPrivatePostMarginType';
        }
        else if (market['inverse']) {
            method = 'dapiPrivatePostMarginType';
        }
        else {
            throw new NotSupported(this.id + ' setMarginMode() supports linear and inverse contracts only');
        }
        const request = {
            'symbol': market['id'],
            'marginType': marginMode,
        };
        let response = undefined;
        try {
            response = await this[method](this.extend(request, params));
        }
        catch (e) {
            // not an error
            // https://github.com/ccxt/ccxt/issues/11268
            // https://github.com/ccxt/ccxt/pull/11624
            // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
            // binanceusdm
            if (e instanceof MarginModeAlreadySet) {
                const throwMarginModeAlreadySet = this.safeValue(this.options, 'throwMarginModeAlreadySet', false);
                if (throwMarginModeAlreadySet) {
                    throw e;
                }
                else {
                    response = { 'code': -4046, 'msg': 'No need to change margin type.' };
                }
            }
        }
        return response;
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#setPositionMode
         * @description set hedged to true or false for a market
         * @param {bool} hedged set to true to use dualSidePosition
         * @param {string|undefined} symbol not used by binance setPositionMode ()
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} response from the exchange
         */
        const defaultType = this.safeString(this.options, 'defaultType', 'future');
        const type = this.safeString(params, 'type', defaultType);
        params = this.omit(params, ['type']);
        let dualSidePosition = undefined;
        if (hedged) {
            dualSidePosition = 'true';
        }
        else {
            dualSidePosition = 'false';
        }
        const request = {
            'dualSidePosition': dualSidePosition,
        };
        let method = undefined;
        if (this.isInverse(type)) {
            method = 'dapiPrivatePostPositionSideDual';
        }
        else {
            // default to future
            method = 'fapiPrivatePostPositionSideDual';
        }
        //
        //     {
        //       "code": 200,
        //       "msg": "success"
        //     }
        //
        return await this[method](this.extend(request, params));
    }
    async fetchSettlementHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchSettlementHistory
         * @description fetches historical settlement records
         * @see https://binance-docs.github.io/apidocs/voptions/en/#historical-exercise-records
         * @param {string} symbol unified market symbol of the settlement history
         * @param {int} since timestamp in ms
         * @param {int} limit number of records, default 100, max 100
         * @param {object} params exchange specific params
         * @returns {[object]} a list of [settlement history objects]
         */
        await this.loadMarkets();
        const market = (symbol === undefined) ? undefined : this.market(symbol);
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchSettlementHistory', market, params);
        if (type !== 'option') {
            throw new NotSupported(this.id + ' fetchSettlementHistory() supports option markets only');
        }
        const request = {};
        if (symbol !== undefined) {
            symbol = market['symbol'];
            request['underlying'] = market['baseId'] + market['quoteId'];
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.eapiPublicGetExerciseHistory(this.extend(request, params));
        //
        //     [
        //         {
        //             "symbol": "ETH-230223-1900-P",
        //             "strikePrice": "1900",
        //             "realStrikePrice": "1665.5897334",
        //             "expiryDate": 1677139200000,
        //             "strikeResult": "REALISTIC_VALUE_STRICKEN"
        //         }
        //     ]
        //
        const settlements = this.parseSettlements(response, market);
        const sorted = this.sortBy(settlements, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    parseSettlement(settlement, market) {
        //
        //     {
        //         "symbol": "ETH-230223-1900-P",
        //         "strikePrice": "1900",
        //         "realStrikePrice": "1665.5897334",
        //         "expiryDate": 1677139200000,
        //         "strikeResult": "REALISTIC_VALUE_STRICKEN"
        //     }
        //
        const timestamp = this.safeInteger(settlement, 'expiryDate');
        const marketId = this.safeString(settlement, 'symbol');
        return {
            'info': settlement,
            'symbol': this.safeSymbol(marketId, market),
            'price': this.safeNumber(settlement, 'realStrikePrice'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
        };
    }
    parseSettlements(settlements, market) {
        //
        //     [
        //         {
        //             "symbol": "ETH-230223-1900-P",
        //             "strikePrice": "1900",
        //             "realStrikePrice": "1665.5897334",
        //             "expiryDate": 1677139200000,
        //             "strikeResult": "EXTRINSIC_VALUE_EXPIRED"
        //         }
        //     ]
        //
        const result = [];
        for (let i = 0; i < settlements.length; i++) {
            result.push(this.parseSettlement(settlements[i], market));
        }
        return result;
    }
    async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchLedger
         * @description fetch the history of changes, actions done by the user or operations that altered the balance of the user
         * @see https://binance-docs.github.io/apidocs/voptions/en/#account-funding-flow-user_data
         * @see https://binance-docs.github.io/apidocs/futures/en/#get-income-history-user_data
         * @see https://binance-docs.github.io/apidocs/delivery/en/#get-income-history-user_data
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since timestamp in ms of the earliest ledger entry
         * @param {int|undefined} limit max number of ledger entrys to return
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
         */
        await this.loadMarkets();
        let type = undefined;
        let subType = undefined;
        let currency = undefined;
        let method = undefined;
        const request = {};
        [type, params] = this.handleMarketTypeAndParams('fetchLedger', undefined, params);
        [subType, params] = this.handleSubTypeAndParams('fetchLedger', undefined, params);
        if (type === 'option') {
            this.checkRequiredArgument('fetchLedger', code, 'code');
            currency = this.currency(code);
            request['currency'] = currency['id'];
            method = 'eapiPrivateGetBill';
        }
        else if (this.isLinear(type, subType)) {
            method = 'fapiPrivateGetIncome';
        }
        else if (this.isInverse(type, subType)) {
            method = 'dapiPrivateGetIncome';
        }
        else {
            throw new NotSupported(this.id + ' fetchLedger() supports contract wallets only');
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, params));
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "id": "1125899906845701870",
        //             "asset": "USDT",
        //             "amount": "-0.16518203",
        //             "type": "FEE",
        //             "createDate": 1676621042489
        //         }
        //     ]
        //
        // futures (fapi, dapi)
        //
        //     [
        //         {
        //             "symbol": "",
        //             "incomeType": "TRANSFER",
        //             "income": "10.00000000",
        //             "asset": "USDT",
        //             "time": 1677645250000,
        //             "info": "TRANSFER",
        //             "tranId": 131001573082,
        //             "tradeId": ""
        //         }
        //     ]
        //
        return this.parseLedger(response, currency, since, limit);
    }
    parseLedgerEntry(item, currency = undefined) {
        //
        // options (eapi)
        //
        //     {
        //         "id": "1125899906845701870",
        //         "asset": "USDT",
        //         "amount": "-0.16518203",
        //         "type": "FEE",
        //         "createDate": 1676621042489
        //     }
        //
        // futures (fapi, dapi)
        //
        //     {
        //         "symbol": "",
        //         "incomeType": "TRANSFER",
        //         "income": "10.00000000",
        //         "asset": "USDT",
        //         "time": 1677645250000,
        //         "info": "TRANSFER",
        //         "tranId": 131001573082,
        //         "tradeId": ""
        //     }
        //
        let amount = this.safeString2(item, 'amount', 'income');
        let direction = undefined;
        if (Precise.stringLe(amount, '0')) {
            direction = 'out';
            amount = Precise.stringMul('-1', amount);
        }
        else {
            direction = 'in';
        }
        const currencyId = this.safeString(item, 'asset');
        const timestamp = this.safeInteger2(item, 'createDate', 'time');
        const type = this.safeString2(item, 'type', 'incomeType');
        return {
            'id': this.safeString2(item, 'id', 'tranId'),
            'direction': direction,
            'account': undefined,
            'referenceAccount': undefined,
            'referenceId': this.safeString(item, 'tradeId'),
            'type': this.parseLedgerEntryType(type),
            'currency': this.safeCurrencyCode(currencyId, currency),
            'amount': this.parseNumber(amount),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'before': undefined,
            'after': undefined,
            'status': undefined,
            'fee': undefined,
            'info': item,
        };
    }
    parseLedgerEntryType(type) {
        const ledgerType = {
            'FEE': 'fee',
            'FUNDING_FEE': 'fee',
            'OPTIONS_PREMIUM_FEE': 'fee',
            'POSITION_LIMIT_INCREASE_FEE': 'fee',
            'CONTRACT': 'trade',
            'REALIZED_PNL': 'trade',
            'TRANSFER': 'transfer',
            'CROSS_COLLATERAL_TRANSFER': 'transfer',
            'INTERNAL_TRANSFER': 'transfer',
            'COIN_SWAP_DEPOSIT': 'deposit',
            'COIN_SWAP_WITHDRAW': 'withdrawal',
            'OPTIONS_SETTLE_PROFIT': 'settlement',
            'DELIVERED_SETTELMENT': 'settlement',
            'WELCOME_BONUS': 'cashback',
            'CONTEST_REWARD': 'cashback',
            'COMMISSION_REBATE': 'rebate',
            'API_REBATE': 'rebate',
            'REFERRAL_KICKBACK': 'referral',
            'COMMISSION': 'commission',
        };
        return this.safeString(ledgerType, type, type);
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        if (!(api in this.urls['api'])) {
            throw new NotSupported(this.id + ' does not have a testnet/sandbox URL for ' + api + ' endpoints');
        }
        let url = this.urls['api'][api];
        url += '/' + path;
        if (api === 'wapi') {
            url += '.html';
        }
        if (path === 'historicalTrades') {
            if (this.apiKey) {
                headers = {
                    'X-MBX-APIKEY': this.apiKey,
                };
            }
            else {
                throw new AuthenticationError(this.id + ' historicalTrades endpoint requires `apiKey` credential');
            }
        }
        const userDataStream = (path === 'userDataStream') || (path === 'listenKey');
        if (userDataStream) {
            if (this.apiKey) {
                // v1 special case for userDataStream
                headers = {
                    'X-MBX-APIKEY': this.apiKey,
                    'Content-Type': 'application/x-www-form-urlencoded',
                };
                if (method !== 'GET') {
                    body = this.urlencode(params);
                }
            }
            else {
                throw new AuthenticationError(this.id + ' userDataStream endpoint requires `apiKey` credential');
            }
        }
        else if ((api === 'private') || (api === 'eapiPrivate') || (api === 'sapi' && path !== 'system/status') || (api === 'sapiV2') || (api === 'sapiV3') || (api === 'sapiV4') || (api === 'wapi' && path !== 'systemStatus') || (api === 'dapiPrivate') || (api === 'dapiPrivateV2') || (api === 'fapiPrivate') || (api === 'fapiPrivateV2')) {
            this.checkRequiredCredentials();
            let query = undefined;
            const defaultRecvWindow = this.safeInteger(this.options, 'recvWindow');
            const extendedParams = this.extend({
                'timestamp': this.nonce(),
            }, params);
            if (defaultRecvWindow !== undefined) {
                extendedParams['recvWindow'] = defaultRecvWindow;
            }
            const recvWindow = this.safeInteger(params, 'recvWindow');
            if (recvWindow !== undefined) {
                extendedParams['recvWindow'] = recvWindow;
            }
            if ((api === 'sapi') && (path === 'asset/dust')) {
                query = this.urlencodeWithArrayRepeat(extendedParams);
            }
            else if ((path === 'batchOrders') || (path.indexOf('sub-account') >= 0) || (path === 'capital/withdraw/apply') || (path.indexOf('staking') >= 0)) {
                query = this.rawencode(extendedParams);
            }
            else {
                query = this.urlencode(extendedParams);
            }
            let signature = undefined;
            if (this.secret.indexOf('PRIVATE KEY') > -1) {
                signature = this.encodeURIComponent(this.rsa(query, this.secret));
            }
            else {
                signature = this.hmac(this.encode(query), this.encode(this.secret));
            }
            query += '&' + 'signature=' + signature;
            headers = {
                'X-MBX-APIKEY': this.apiKey,
            };
            if ((method === 'GET') || (method === 'DELETE') || (api === 'wapi')) {
                url += '?' + query;
            }
            else {
                body = query;
                headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        }
        else {
            if (Object.keys(params).length) {
                url += '?' + this.urlencode(params);
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if ((code === 418) || (code === 429)) {
            throw new DDoSProtection(this.id + ' ' + code.toString() + ' ' + reason + ' ' + body);
        }
        // error response in a form: { "code": -1013, "msg": "Invalid quantity." }
        // following block cointains legacy checks against message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if (code >= 400) {
            if (body.indexOf('Price * QTY is zero or less') >= 0) {
                throw new InvalidOrder(this.id + ' order cost = amount * price is zero or less ' + body);
            }
            if (body.indexOf('LOT_SIZE') >= 0) {
                throw new InvalidOrder(this.id + ' order amount should be evenly divisible by lot size ' + body);
            }
            if (body.indexOf('PRICE_FILTER') >= 0) {
                throw new InvalidOrder(this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid value in general, use this.priceToPrecision (symbol, amount) ' + body);
            }
        }
        if (response === undefined) {
            return; // fallback to default error handler
        }
        // check success value for wapi endpoints
        // response in format {'msg': 'The coin does not exist.', 'success': true/false}
        const success = this.safeValue(response, 'success', true);
        if (!success) {
            const message = this.safeString(response, 'msg');
            let parsedMessage = undefined;
            if (message !== undefined) {
                try {
                    parsedMessage = JSON.parse(message);
                }
                catch (e) {
                    // do nothing
                    parsedMessage = undefined;
                }
                if (parsedMessage !== undefined) {
                    response = parsedMessage;
                }
            }
        }
        const message = this.safeString(response, 'msg');
        if (message !== undefined) {
            this.throwExactlyMatchedException(this.exceptions['exact'], message, this.id + ' ' + message);
            this.throwBroadlyMatchedException(this.exceptions['broad'], message, this.id + ' ' + message);
        }
        // checks against error codes
        const error = this.safeString(response, 'code');
        if (error !== undefined) {
            // https://github.com/ccxt/ccxt/issues/6501
            // https://github.com/ccxt/ccxt/issues/7742
            if ((error === '200') || Precise.stringEquals(error, '0')) {
                return undefined;
            }
            // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
            // despite that their message is very confusing, it is raised by Binance
            // on a temporary ban, the API key is valid, but disabled for a while
            if ((error === '-2015') && this.options['hasAlreadyAuthenticatedSuccessfully']) {
                throw new DDoSProtection(this.id + ' ' + body);
            }
            const feedback = this.id + ' ' + body;
            if (message === 'No need to change margin type.') {
                // not an error
                // https://github.com/ccxt/ccxt/issues/11268
                // https://github.com/ccxt/ccxt/pull/11624
                // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
                // binanceusdm {"code":-4046,"msg":"No need to change margin type."}
                throw new MarginModeAlreadySet(feedback);
            }
            this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);
            throw new ExchangeError(feedback);
        }
        if (!success) {
            throw new ExchangeError(this.id + ' ' + body);
        }
    }
    calculateRateLimiterCost(api, method, path, params, config = {}, context = {}) {
        if (('noCoin' in config) && !('coin' in params)) {
            return config['noCoin'];
        }
        else if (('noSymbol' in config) && !('symbol' in params)) {
            return config['noSymbol'];
        }
        else if (('noPoolId' in config) && !('poolId' in params)) {
            return config['noPoolId'];
        }
        else if (('byLimit' in config) && ('limit' in params)) {
            const limit = params['limit'];
            const byLimit = config['byLimit'];
            for (let i = 0; i < byLimit.length; i++) {
                const entry = byLimit[i];
                if (limit <= entry[0]) {
                    return entry[1];
                }
            }
        }
        return this.safeValue(config, 'cost', 1);
    }
    async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined, config = {}, context = {}) {
        const response = await this.fetch2(path, api, method, params, headers, body, config, context);
        // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
        if ((api === 'private') || (api === 'wapi')) {
            this.options['hasAlreadyAuthenticatedSuccessfully'] = true;
        }
        return response;
    }
    async modifyMarginHelper(symbol, amount, addOrReduce, params = {}) {
        // used to modify isolated positions
        let defaultType = this.safeString(this.options, 'defaultType', 'future');
        if (defaultType === 'spot') {
            defaultType = 'future';
        }
        const type = this.safeString(params, 'type', defaultType);
        if ((type === 'margin') || (type === 'spot')) {
            throw new NotSupported(this.id + ' add / reduce margin only supported with type future or delivery');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        amount = this.amountToPrecision(symbol, amount);
        const request = {
            'type': addOrReduce,
            'symbol': market['id'],
            'amount': amount,
        };
        let method = undefined;
        let code = undefined;
        if (market['linear']) {
            method = 'fapiPrivatePostPositionMargin';
            code = market['quote'];
        }
        else {
            method = 'dapiPrivatePostPositionMargin';
            code = market['base'];
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code": 200,
        //         "msg": "Successfully modify position margin.",
        //         "amount": 0.001,
        //         "type": 1
        //     }
        //
        return this.extend(this.parseMarginModification(response, market), {
            'code': code,
        });
    }
    parseMarginModification(data, market = undefined) {
        const rawType = this.safeInteger(data, 'type');
        const resultType = (rawType === 1) ? 'add' : 'reduce';
        const resultAmount = this.safeNumber(data, 'amount');
        const errorCode = this.safeString(data, 'code');
        const status = (errorCode === '200') ? 'ok' : 'failed';
        return {
            'info': data,
            'type': resultType,
            'amount': resultAmount,
            'code': undefined,
            'symbol': market['symbol'],
            'status': status,
        };
    }
    async reduceMargin(symbol, amount, params = {}) {
        /**
         * @method
         * @name binance#reduceMargin
         * @description remove margin from a position
         * @param {string} symbol unified market symbol
         * @param {float} amount the amount of margin to remove
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=reduce-margin-structure}
         */
        return await this.modifyMarginHelper(symbol, amount, 2, params);
    }
    async addMargin(symbol, amount, params = {}) {
        /**
         * @method
         * @name binance#addMargin
         * @description add margin
         * @param {string} symbol unified market symbol
         * @param {float} amount amount of margin to add
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=add-margin-structure}
         */
        return await this.modifyMarginHelper(symbol, amount, 1, params);
    }
    async fetchBorrowRate(code, params = {}) {
        /**
         * @method
         * @name binance#fetchBorrowRate
         * @description fetch the rate of interest to borrow a currency for margin trading
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'asset': currency['id'],
            // 'vipLevel': this.safeInteger (params, 'vipLevel'),
        };
        const response = await this.sapiGetMarginInterestRateHistory(this.extend(request, params));
        //
        //     [
        //         {
        //             "asset": "USDT",
        //             "timestamp": 1638230400000,
        //             "dailyInterestRate": "0.0006",
        //             "vipLevel": 0
        //         },
        //     ]
        //
        const rate = this.safeValue(response, 0);
        return this.parseBorrowRate(rate);
    }
    async fetchBorrowRateHistory(code, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchBorrowRateHistory
         * @description retrieves a history of a currencies borrow interest rate at specific time slots
         * @param {string} code unified currency code
         * @param {int|undefined} since timestamp for the earliest borrow rate
         * @param {int|undefined} limit the maximum number of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure} to retrieve
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
         */
        await this.loadMarkets();
        if (limit === undefined) {
            limit = 93;
        }
        else if (limit > 93) {
            // Binance API says the limit is 100, but "Illegal characters found in a parameter." is returned when limit is > 93
            throw new BadRequest(this.id + ' fetchBorrowRateHistory() limit parameter cannot exceed 92');
        }
        const currency = this.currency(code);
        const request = {
            'asset': currency['id'],
            'limit': limit,
        };
        if (since !== undefined) {
            request['startTime'] = since;
            const endTime = this.sum(since, limit * 86400000) - 1; // required when startTime is further than 93 days in the past
            const now = this.milliseconds();
            request['endTime'] = Math.min(endTime, now); // cannot have an endTime later than current time
        }
        const response = await this.sapiGetMarginInterestRateHistory(this.extend(request, params));
        //
        //     [
        //         {
        //             "asset": "USDT",
        //             "timestamp": 1638230400000,
        //             "dailyInterestRate": "0.0006",
        //             "vipLevel": 0
        //         },
        //     ]
        //
        return this.parseBorrowRateHistory(response, code, since, limit);
    }
    parseBorrowRateHistory(response, code, since, limit) {
        const result = [];
        for (let i = 0; i < response.length; i++) {
            const item = response[i];
            const borrowRate = this.parseBorrowRate(item);
            result.push(borrowRate);
        }
        const sorted = this.sortBy(result, 'timestamp');
        return this.filterByCurrencySinceLimit(sorted, code, since, limit);
    }
    parseBorrowRate(info, currency = undefined) {
        //
        //    {
        //        "asset": "USDT",
        //        "timestamp": 1638230400000,
        //        "dailyInterestRate": "0.0006",
        //        "vipLevel": 0
        //    }
        //
        const timestamp = this.safeNumber(info, 'timestamp');
        currency = this.safeString(info, 'asset');
        return {
            'currency': this.safeCurrencyCode(currency),
            'rate': this.safeNumber(info, 'dailyInterestRate'),
            'period': 86400000,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': info,
        };
    }
    async createGiftCode(code, amount, params = {}) {
        /**
         * @method
         * @name binance#createGiftCode
         * @description create gift code
         * @param {string} code gift code
         * @param {float} amount amount of currency for the gift
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} The gift code id, code, currency and amount
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        // ensure you have enough token in your funding account before calling this code
        const request = {
            'token': currency['id'],
            'amount': amount,
        };
        const response = await this.sapiPostGiftcardCreateCode(this.extend(request, params));
        //
        //     {
        //         code: '000000',
        //         message: 'success',
        //         data: { referenceNo: '0033002404219823', code: 'AP6EXTLKNHM6CEX7' },
        //         success: true
        //     }
        //
        const data = this.safeValue(response, 'data');
        const giftcardCode = this.safeString(data, 'code');
        const id = this.safeString(data, 'referenceNo');
        return {
            'info': response,
            'id': id,
            'code': giftcardCode,
            'currency': code,
            'amount': amount,
        };
    }
    async redeemGiftCode(giftcardCode, params = {}) {
        /**
         * @method
         * @name binance#redeemGiftCode
         * @description redeem gift code
         * @param {string} giftcardCode
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} response from the exchange
         */
        const request = {
            'code': giftcardCode,
        };
        const response = await this.sapiPostGiftcardRedeemCode(this.extend(request, params));
        //
        //     {
        //         code: '000000',
        //         message: 'success',
        //         data: {
        //             referenceNo: '0033002404219823',
        //             identityNo: '10316431732801474560'
        //         },
        //         success: true
        //     }
        //
        return response;
    }
    async verifyGiftCode(id, params = {}) {
        /**
         * @method
         * @name binance#verifyGiftCode
         * @description verify gift code
         * @param {string} id reference number id
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} response from the exchange
         */
        const request = {
            'referenceNo': id,
        };
        const response = await this.sapiGetGiftcardVerify(this.extend(request, params));
        //
        //     {
        //         code: '000000',
        //         message: 'success',
        //         data: { valid: true },
        //         success: true
        //     }
        //
        return response;
    }
    async fetchBorrowInterest(code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchBorrowInterest
         * @description fetch the interest owed by the user for borrowing currency for margin trading
         * @param {string|undefined} code unified currency code
         * @param {string|undefined} symbol unified market symbol when fetch interest in isolated markets
         * @param {int|undefined} since the earliest time in ms to fetch borrrow interest for
         * @param {int|undefined} limit the maximum number of structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (code !== undefined) {
            const currency = this.currency(code);
            request['asset'] = currency['id'];
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['size'] = limit;
        }
        if (symbol !== undefined) { // Isolated
            market = this.market(symbol);
            request['isolatedSymbol'] = market['id'];
        }
        const response = await this.sapiGetMarginInterestHistory(this.extend(request, params));
        //
        //     {
        //         "rows":[
        //             {
        //                 "isolatedSymbol": "BNBUSDT", // isolated symbol, will not be returned for crossed margin
        //                 "asset": "BNB",
        //                 "interest": "0.02414667",
        //                 "interestAccuredTime": 1566813600000,
        //                 "interestRate": "0.01600000",
        //                 "principal": "36.22000000",
        //                 "type": "ON_BORROW"
        //             }
        //         ],
        //         "total": 1
        //     }
        //
        const rows = this.safeValue(response, 'rows');
        const interest = this.parseBorrowInterests(rows, market);
        return this.filterByCurrencySinceLimit(interest, code, since, limit);
    }
    parseBorrowInterest(info, market = undefined) {
        const symbol = this.safeString(info, 'isolatedSymbol');
        const timestamp = this.safeNumber(info, 'interestAccuredTime');
        const marginMode = (symbol === undefined) ? 'cross' : 'isolated';
        return {
            'account': (symbol === undefined) ? 'cross' : symbol,
            'symbol': symbol,
            'marginMode': marginMode,
            'currency': this.safeCurrencyCode(this.safeString(info, 'asset')),
            'interest': this.safeNumber(info, 'interest'),
            'interestRate': this.safeNumber(info, 'interestRate'),
            'amountBorrowed': this.safeNumber(info, 'principal'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': info,
        };
    }
    async repayMargin(code, amount, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#repayMargin
         * @description repay borrowed margin and interest
         * @see https://binance-docs.github.io/apidocs/spot/en/#margin-account-repay-margin
         * @param {string} code unified currency code of the currency to repay
         * @param {float} amount the amount to repay
         * @param {string|undefined} symbol unified market symbol, required for isolated margin
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
         */
        const [marginMode, query] = this.handleMarginModeAndParams('repayMargin', params); // cross or isolated
        this.checkRequiredMarginArgument('repayMargin', symbol, marginMode);
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'asset': currency['id'],
            'amount': this.currencyToPrecision(code, amount),
        };
        if (symbol !== undefined) {
            const market = this.market(symbol);
            request['symbol'] = market['id'];
            request['isIsolated'] = 'TRUE';
        }
        const response = await this.sapiPostMarginRepay(this.extend(request, query));
        //
        //     {
        //         "tranId": 108988250265,
        //         "clientTag":""
        //     }
        //
        return this.parseMarginLoan(response, currency);
    }
    async borrowMargin(code, amount, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#borrowMargin
         * @description create a loan to borrow margin
         * @see https://binance-docs.github.io/apidocs/spot/en/#margin-account-borrow-margin
         * @param {string} code unified currency code of the currency to borrow
         * @param {float} amount the amount to borrow
         * @param {string|undefined} symbol unified market symbol, required for isolated margin
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
         */
        const [marginMode, query] = this.handleMarginModeAndParams('borrowMargin', params); // cross or isolated
        this.checkRequiredMarginArgument('borrowMargin', symbol, marginMode);
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'asset': currency['id'],
            'amount': this.currencyToPrecision(code, amount),
        };
        if (symbol !== undefined) {
            const market = this.market(symbol);
            request['symbol'] = market['id'];
            request['isIsolated'] = 'TRUE';
        }
        const response = await this.sapiPostMarginLoan(this.extend(request, query));
        //
        //     {
        //         "tranId": 108988250265,
        //         "clientTag":""
        //     }
        //
        return this.parseMarginLoan(response, currency);
    }
    parseMarginLoan(info, currency = undefined) {
        //
        //     {
        //         "tranId": 108988250265,
        //         "clientTag":""
        //     }
        //
        return {
            'id': this.safeInteger(info, 'tranId'),
            'currency': this.safeCurrencyCode(undefined, currency),
            'amount': undefined,
            'symbol': undefined,
            'timestamp': undefined,
            'datetime': undefined,
            'info': info,
        };
    }
    async fetchOpenInterestHistory(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#fetchOpenInterestHistory
         * @description Retrieves the open interest history of a currency
         * @param {string} symbol Unified CCXT market symbol
         * @param {string} timeframe "5m","15m","30m","1h","2h","4h","6h","12h", or "1d"
         * @param {int|undefined} since the time(ms) of the earliest record to retrieve as a unix timestamp
         * @param {int|undefined} limit default 30, max 500
         * @param {object} params exchange specific parameters
         * @param {int|undefined} params.until the time(ms) of the latest record to retrieve as a unix timestamp
         * @returns {object} an array of [open interest history structure]{@link https://docs.ccxt.com/#/?id=interest-history-structure}
         */
        if (timeframe === '1m') {
            throw new BadRequest(this.id + 'fetchOpenInterestHistory cannot use the 1m timeframe');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'period': this.safeString(this.timeframes, timeframe, timeframe),
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const symbolKey = market['linear'] ? 'symbol' : 'pair';
        request[symbolKey] = market['id'];
        if (market['inverse']) {
            request['contractType'] = this.safeString(params, 'contractType', 'CURRENT_QUARTER');
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        const until = this.safeInteger2(params, 'until', 'till'); // unified in milliseconds
        const endTime = this.safeInteger(params, 'endTime', until); // exchange-specific in milliseconds
        params = this.omit(params, ['endTime', 'until', 'till']);
        if (endTime) {
            request['endTime'] = endTime;
        }
        else if (since) {
            if (limit === undefined) {
                limit = 30; // Exchange default
            }
            const duration = this.parseTimeframe(timeframe);
            request['endTime'] = this.sum(since, duration * limit * 1000);
        }
        let method = 'fapiDataGetOpenInterestHist';
        if (market['inverse']) {
            method = 'dapiDataGetOpenInterestHist';
        }
        const response = await this[method](this.extend(request, params));
        //
        //  [
        //      {
        //          "symbol":"BTCUSDT",
        //          "sumOpenInterest":"75375.61700000",
        //          "sumOpenInterestValue":"3248828883.71251440",
        //          "timestamp":1642179900000
        //      },
        //      ...
        //  ]
        //
        return this.parseOpenInterests(response, symbol, since, limit);
    }
    async fetchOpenInterest(symbol, params = {}) {
        /**
         * @method
         * @name binance#fetchOpenInterest
         * @description retrieves the open interest of a contract trading pair
         * @see https://binance-docs.github.io/apidocs/futures/en/#open-interest
         * @see https://binance-docs.github.io/apidocs/delivery/en/#open-interest
         * @see https://binance-docs.github.io/apidocs/voptions/en/#open-interest
         * @param {string} symbol unified CCXT market symbol
         * @param {object} params exchange specific parameters
         * @returns {object} an open interest structure{@link https://docs.ccxt.com/#/?id=interest-history-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {};
        if (market['option']) {
            request['underlyingAsset'] = market['baseId'];
            request['expiration'] = this.yymmdd(market['expiry']);
        }
        else {
            request['symbol'] = market['id'];
        }
        let method = 'fapiPublicGetOpenInterest';
        if (market['option']) {
            method = 'eapiPublicGetOpenInterest';
        }
        else if (market['inverse']) {
            method = 'dapiPublicGetOpenInterest';
        }
        const response = await this[method](this.extend(request, params));
        //
        // futures (fapi)
        //
        //     {
        //         "symbol": "ETHUSDT_230331",
        //         "openInterest": "23581.677",
        //         "time": 1677356872265
        //     }
        //
        // futures (dapi)
        //
        //     {
        //         "symbol": "ETHUSD_PERP",
        //         "pair": "ETHUSD",
        //         "openInterest": "26542436",
        //         "contractType": "PERPETUAL",
        //         "time": 1677360272224
        //     }
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "symbol": "ETH-230225-1625-C",
        //             "sumOpenInterest": "460.50",
        //             "sumOpenInterestUsd": "734957.4358092150",
        //             "timestamp": "1677304860000"
        //         }
        //     ]
        //
        if (market['option']) {
            return this.parseOpenInterests(response, market);
        }
        else {
            return this.parseOpenInterest(response, market);
        }
    }
    parseOpenInterest(interest, market = undefined) {
        const timestamp = this.safeInteger(interest, 'timestamp');
        const id = this.safeString(interest, 'symbol');
        const amount = this.safeNumber2(interest, 'sumOpenInterest', 'openInterest');
        const value = this.safeNumber2(interest, 'sumOpenInterestValue', 'sumOpenInterestUsd');
        // Inverse returns the number of contracts different from the base or quote volume in this case
        // compared with https://www.binance.com/en/futures/funding-history/quarterly/4
        return {
            'symbol': this.safeSymbol(id, market, undefined, 'contract'),
            'baseVolume': market['inverse'] ? undefined : amount,
            'quoteVolume': value,
            'openInterestAmount': amount,
            'openInterestValue': value,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': interest,
        };
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class binancecoinm$1 extends binance$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'binancecoinm',
            'name': 'Binance COIN-M',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
                'doc': [
                    'https://binance-docs.github.io/apidocs/delivery/en/',
                    'https://binance-docs.github.io/apidocs/spot/en',
                ],
            },
            'has': {
                'CORS': undefined,
                'spot': false,
                'margin': false,
                'swap': true,
                'future': true,
                'option': undefined,
                'createStopMarketOrder': true,
            },
            'options': {
                'fetchMarkets': ['inverse'],
                'defaultSubType': 'inverse',
                'leverageBrackets': undefined,
            },
        });
    }
    async transferIn(code, amount, params = {}) {
        // transfer from spot wallet to coinm futures wallet
        return await this.futuresTransfer(code, amount, 3, params);
    }
    async transferOut(code, amount, params = {}) {
        // transfer from coinm futures wallet to spot wallet
        return await this.futuresTransfer(code, amount, 4, params);
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class binanceusdm$1 extends binance$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'binanceusdm',
            'name': 'Binance USDⓈ-M',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
                'doc': [
                    'https://binance-docs.github.io/apidocs/futures/en/',
                    'https://binance-docs.github.io/apidocs/spot/en',
                ],
            },
            'has': {
                'CORS': undefined,
                'spot': false,
                'margin': false,
                'swap': true,
                'future': true,
                'option': undefined,
                'createStopMarketOrder': true,
            },
            'options': {
                'fetchMarkets': ['linear'],
                'defaultSubType': 'linear',
                // https://www.binance.com/en/support/faq/360033162192
                // tier amount, maintenance margin, initial margin
                'leverageBrackets': undefined,
                'marginTypes': {},
                'marginModes': {},
            },
        });
    }
    async transferIn(code, amount, params = {}) {
        // transfer from spot wallet to usdm futures wallet
        return await this.futuresTransfer(code, amount, 1, params);
    }
    async transferOut(code, amount, params = {}) {
        // transfer from usdm futures wallet to spot wallet
        return await this.futuresTransfer(code, amount, 2, params);
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bingx$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bingx',
            'name': 'BingX',
            'countries': ['EU'],
            'rateLimit': 100,
            'version': 'v1',
            'pro': true,
            'has': {
                'CORS': true,
                'spot': true,
                'margin': undefined,
                'swap': false,
                'future': false,
                'option': false,
                'cancelOrder': true,
                'createDepositAddress': false,
                'createOrder': true,
                'fetchBalance': true,
                'fetchDepositAddress': false,
                'fetchDepositAddresses': false,
                'fetchFundingHistory': false,
                'fetchFundingRate': false,
                'fetchFundingRateHistory': false,
                'fetchFundingRates': false,
                'fetchIndexOHLCV': false,
                'fetchMarkOHLCV': false,
                'fetchOHLCV': true,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrders': true,
                'fetchOrderBook': true,
                'fetchPositionMode': true,
                'fetchPositions': true,
                'fetchPremiumIndexOHLCV': false,
                'fetchTicker': true,
                'fetchTrades': true,
                'fetchTradingFee': false,
                'fetchTradingFees': false,
                'setMarginMode': true,
                'setPositionMode': true,
                'transfer': false,
            },
            'urls': {
                'logo': '',
                'api': {
                    'swap': 'https://api-swap-rest.bingx.com/api',
                    'swap2': 'https://open-api.bingx.com',
                },
                'test': {},
                'www': 'https://bingx.com/',
                'doc': [
                    'https://bingx-api.github.io/docs',
                ],
                'fees': [
                    'https://support.bingx.com/hc/en-001/articles/360027240173',
                ],
                'referral': '',
            },
            'api': {
                'swap': {
                    'v1': {
                        'public': {
                            'get': {
                                'market/getAllContracts': 1,
                                'market/getLatestPrice': 1,
                                'market/getMarketDepth': 1,
                                'market/getMarketTrades': 1,
                                'market/getLatestFunding': 1,
                                'market/getHistoryFunding': 1,
                                'market/getLatestKline': 1,
                                'market/getHistoryKlines': 1,
                                'market/getOpenPositions': 1,
                                'market/getTicker': 1,
                            },
                            'post': {
                                'common/server/time': 1,
                            },
                        },
                        'private': {
                            'post': {
                                'user/getBalance': 1,
                                'user/getPositions': 1,
                                'user/trade': 1,
                                'user/oneClickClosePosition': 1,
                                'user/oneClickCloseAllPositions': 1,
                                'user/cancelOrder': 1,
                                'user/batchCancelOrders': 1,
                                'user/cancelAll': 1,
                                'user/pendingOrders': 1,
                                'user/pendingStopOrders': 1,
                                'user/queryOrderStatus': 1,
                                'user/setMarginMode': 1,
                                'user/setLeverage': 1,
                                'user/forceOrders': 1,
                                'user/historyOrders': 1,
                                'user/auth/userDataStream': 1,
                            },
                            'put': {
                                'user/auth/userDataStream': 1,
                            },
                        },
                    },
                },
                'swap2': {
                    'openApi': {
                        'public': {
                            'get': {
                                'swap/v2/quote/klines': 1,
                            },
                        },
                        'private': {
                            'get': {
                                'swap/v2/trade/openOrders': 1,
                                'swap/v2/trade/leverage': 1,
                                'swap/v2/trade/marginType': 1,
                                'swap/v1/positionSide/dual': 1,
                            },
                            'put': {
                                'user/auth/userDataStream': 1,
                            },
                            'post': {
                                'user/auth/userDataStream': 1,
                                'swap/v2/trade/order': 1,
                                'swap/v2/trade/leverage': 1,
                                'swap/v2/trade/marginType': 1,
                                'swap/v1/positionSide/dual': 1,
                            },
                            'delete': {
                                'swap/v2/trade/order': 1,
                                'swap/v2/trade/allOpenOrders': 1,
                            },
                        },
                    },
                },
            },
            'markets': {
                'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'btc', 'quoteId': 'eur', 'type': 'spot', 'spot': true },
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'maker': this.parseNumber('0.0002'),
                    'taker': this.parseNumber('0.0004'),
                },
            },
            'precisionMode': TICK_SIZE$1,
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
            },
            'timeframes': {
                '1m': '1',
                '3m': '3',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '4h': '240',
                '6h': '360',
                '12h': '720',
                '1d': '1D',
                '1w': '1W',
                '1M': '1M',
            },
            'options': {
                'listenKeyRefreshRate': 1200000,
                'defaultType': 'swap',
                'defaultSubType': 'linear',
            },
            'orderTypes': {
                'market': 'MARKET',
                'limit': 'LIMIT',
                'stop': 'STOP',
                'stoplimit': 'STOP',
                'marketiftouched': 'TAKE_PROFIT_MARKET',
                'limitiftouched': 'TAKE_PROFIT',
            },
            'reverseOrderTypes': {
                'market': 'Market',
                'limit': 'Limit',
                'stop_market': 'Stop',
                'stoplimit': 'StopLimit',
                'take_profit_market': 'Stop',
                'take_profit': 'StopLimit',
                'limit_maker': 'Limit',
            },
            'triggerTypes': {
                'Mark': 'MARK_PRICE',
                'Last': 'CONTRACT_PRICE',
            },
            'timeInForces': {
                'GTC': 'GTC',
                'PO': 'GTX',
                'IOC': 'IOC',
                'FOK': 'FOK',
            },
        });
    }
    async switchIsolated(symbol, isIsolated, buyLeverage, sellLeverage, params = {}) {
        if (isIsolated) {
            await this.setMarginMode('ISOLATED', symbol, params);
        }
        else {
            await this.setMarginMode('CROSSED', symbol, params);
        }
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bingx#setMarginMode
         * @description set margin mode to 'cross' or 'isolated'
         * @param {string} marginMode 'cross' or 'isolated'
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} response from the exchange
         */
        marginMode = marginMode.toLowerCase();
        if (marginMode === 'cross') {
            marginMode = 'CROSSED';
        }
        if (marginMode === 'isolated') {
            marginMode = 'ISOLATED';
        }
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
        }
        if ((marginMode !== 'ISOLATED') && (marginMode !== 'CROSSED')) {
            throw new ArgumentsRequired(this.id + ' (' + marginMode + ') ' + ' setMarginMode() marginMode must be "isolated" or "crossed"');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'marginType': marginMode,
        };
        params = this.omit(params, ['leverage', 'buyLeverage', 'sellLeverage']);
        try {
            return await this.swap2OpenApiPrivatePostSwapV2TradeMarginType(this.extend(request, params));
        }
        catch (e) {
            if (e instanceof ExchangeError) {
                if (e.toString().indexOf('80001') >= 0) {
                    throw new ExchangeError(this.id + ' ' + this.json({ 'code': 80001, 'msg': 'Cannot switch Margin Type for market with open positions or orders.' }));
                }
            }
            throw e;
        }
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        await this.loadMarkets();
        let mode = undefined;
        if (hedged) {
            mode = 'true';
        }
        else {
            mode = 'false';
        }
        const request = {
            'dualSidePosition': mode,
        };
        // if (symbol === undefined) {
        //     request['coin'] = 'USDT';
        // } else {
        //     const market = this.market (symbol);
        //     // TEALSTREET
        //     request['category'] = market['linear'] ? 'linear' : 'inverse';
        //     // TEALSTREET
        //     request['symbol'] = market['id'];
        // }
        //
        //     {
        //         "ret_code": 0,
        //         "ret_msg": "ok",
        //         "ext_code": "",
        //         "result": null,
        //         "ext_info": null,
        //         "time_now": "1577477968.175013",
        //         "rate_limit_status": 74,
        //         "rate_limit_reset_ms": 1577477968183,
        //         "rate_limit": 75
        //     }
        //
        return await this.swap2OpenApiPrivatePostSwapV1PositionSideDual(this.extend(request, params));
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bingx#setLeverage
         * @description set the level of leverage for a market
         * @param {float} leverage the rate of leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
        }
        const buyLeverage = this.safeNumber(params, 'buyLeverage', leverage);
        const sellLeverage = this.safeNumber(params, 'sellLeverage', leverage);
        await this.loadMarkets();
        const market = this.market(symbol);
        params = this.omit(params, ['marginMode', 'positionMode']);
        let promises = [];
        const request = {
            'symbol': market['id'],
        };
        if (buyLeverage !== undefined) {
            request['leverage'] = this.parseToInt(buyLeverage);
            request['side'] = 'LONG';
            promises.push(this.swap2OpenApiPrivatePostSwapV2TradeLeverage(this.extend(request, params)));
        }
        if (sellLeverage !== undefined) {
            request['leverage'] = this.parseToInt(sellLeverage);
            request['side'] = 'SHORT';
            promises.push(this.swap2OpenApiPrivatePostSwapV2TradeLeverage(this.extend(request, params)));
        }
        promises = await Promise.all(promises);
        if (promises.length === 1) {
            return promises[0];
        }
        else {
            return promises;
        }
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const leverageResponse = await this.swap2OpenApiPrivateGetSwapV2TradeLeverage(this.extend(request, params));
        const leverageData = this.safeValue(leverageResponse, 'data');
        const marginTypeResponse = await this.swap2OpenApiPrivateGetSwapV2TradeMarginType(this.extend(request, params));
        const marginTypeData = this.safeValue(marginTypeResponse, 'data');
        const positionModeResponse = await this.swap2OpenApiPrivateGetSwapV1PositionSideDual(this.extend(request, params));
        const positionModeData = this.safeValue(positionModeResponse, 'data');
        return this.parseAccountConfiguration(leverageData, marginTypeData, positionModeData, market);
    }
    parseAccountConfiguration(leverageData, marginTypeData, positionModeData, market) {
        // {
        //     "marginCoin":"USDT",
        //   "locked":0,
        //   "available":13168.86110692,
        //   "crossMaxAvailable":13168.86110692,
        //   "fixedMaxAvailable":13168.86110692,
        //   "maxTransferOut":13168.86110692,
        //   "equity":13178.86110692,
        //   "usdtEquity":13178.861106922,
        //   "btcEquity":0.344746495477,
        //   "crossRiskRate":0,
        //   "crossMarginLeverage":20,
        //   "fixedLongLeverage":20,
        //   "fixedShortLeverage":20,
        //   "marginMode":"crossed",
        //   "holdMode":"double_hold"
        // }
        // const marginMode = this.safeString (data, 'marginMode');
        // const isIsolated = (marginMode === 'fixed');
        // let leverage = this.safeFloat (data, 'crossMarginLeverage');
        // const buyLeverage = this.safeFloat (data, 'fixedLongLeverage');
        // const sellLeverage = this.safeFloat (data, 'fixedShortLeverage');
        // const marginCoin = this.safeString (data, 'marginCoin');
        // const holdMode = this.safeString (data, 'holdMode');
        // let positionMode = 'hedged';
        // if (holdMode === 'single_hold') {
        //     positionMode = 'oneway';
        //     if (isIsolated) {
        //         leverage = buyLeverage;
        //     }
        // }
        // const accountConfig = {
        //     'info': data,
        //     'markets': {},
        //     'positionMode': positionMode,
        //     'marginMode': isIsolated ? 'isolated' : 'cross',
        // };
        // const leverageConfigs = accountConfig['markets'];
        // leverageConfigs[market['symbol']] = {
        //     'marginMode': isIsolated ? 'isolated' : 'cross',
        //     'isIsolated': isIsolated,
        //     'leverage': leverage,
        //     'buyLeverage': buyLeverage,
        //     'sellLeverage': sellLeverage,
        //     'marginCoin': marginCoin,
        //     'positionMode': positionMode,
        // };
        const buyLeverage = this.safeFloat(leverageData, 'longLeverage');
        const sellLeverage = this.safeFloat(leverageData, 'shortLeverage');
        const maxBuyLeverage = this.safeFloat(leverageData, 'maxLongLeverage');
        const maxSellLeverage = this.safeFloat(leverageData, 'maxShortLeverage');
        const marginType = this.safeString(marginTypeData, 'marginType');
        const isHedged = this.safeString(positionModeData, 'dualSidePosition');
        let positionMode = 'hedged';
        if (isHedged === 'false') {
            positionMode = 'oneway';
        }
        const isIsolated = (marginType === 'ISOLATED');
        const accountConfig = {
            'marginMode': isIsolated ? 'isolated' : 'cross',
            'positionMode': positionMode,
            'markets': {},
        };
        const leverageConfigs = accountConfig['markets'];
        leverageConfigs[market['symbol']] = {
            'buyLeverage': buyLeverage,
            'sellLeverage': sellLeverage,
            'maxBuyLeverage': maxBuyLeverage,
            'maxSellLeverage': maxSellLeverage,
            'positionMode': positionMode,
        };
        return accountConfig;
    }
    async fetchContractMarkets(params = {}) {
        const response = await this.swapV1PublicGetMarketGetAllContracts(params);
        //
        //     {
        //         "code":0,
        //         "msg":"Success",
        //         "data":{
        //             "contracts":[
        //                 {
        //                     "contractId":"100",
        //                     "symbol":"BTC-USDT",
        //                     "name":"BTC",
        //                     "size":"0.0001",
        //                     "currency":"USDT",
        //                     "asset":"BTC",
        //                     "pricePrecision":2,
        //                     "volumePrecision":4,
        //                     "feeRate":0.0005,
        //                     "tradeMinLimit":1,
        //                     "maxLongLeverage":100,
        //                     "maxShortLeverage":100,
        //                     "status":1
        //                 }
        //             ]
        //         }
        //     }
        //
        const result = [];
        const data = this.safeValue(response, 'data', {});
        const contracts = this.safeValue(data, 'contracts', []);
        for (let i = 0; i < contracts.length; i++) {
            const market = contracts[i];
            // should we use contract id as market id?
            // const contractId = this.safeString (market, 'contractId');
            const marketId = this.safeString(market, 'symbol');
            const parts = marketId.split('-');
            const baseId = this.safeString(parts, 0);
            const quoteId = this.safeString(parts, 1);
            const settleId = this.safeString(market, 'currency');
            const base = this.safeCurrencyCode(baseId);
            const quote = this.safeCurrencyCode(quoteId);
            const settle = this.safeCurrencyCode(settleId);
            const symbol = base + '/' + quote + ':' + settle;
            const status = this.safeNumber(market, 'status');
            // const contractSize = this.safeNumber (market, 'size', 1);
            const contractSize = 1;
            result.push({
                'id': marketId,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': settle,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': settleId,
                'type': 'swap',
                'spot': false,
                'margin': true,
                'swap': true,
                'future': false,
                'option': false,
                'active': status === 1,
                'contract': true,
                'linear': true,
                'inverse': undefined,
                'contractSize': contractSize,
                'expiry': undefined,
                'expiryDatetime': undefined,
                'strike': undefined,
                'optionType': undefined,
                'precision': {
                    'amount': this.parseNumber(this.parsePrecision(this.safeString(market, 'volumePrecision'))),
                    'price': this.parseNumber(this.parsePrecision(this.safeString(market, 'pricePrecision'))),
                },
                'limits': {
                    'leverage': {
                        'min': undefined,
                        'max': this.safeNumber(market, 'maxLongLeverage'),
                    },
                    'amount': {
                        'min': this.safeNumber(market, 'size'),
                        'max': undefined,
                    },
                    'price': {
                        'min': undefined,
                        'max': undefined,
                    },
                    'cost': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'info': market,
            });
        }
        return result;
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name bingx#fetchMarkets
         * @description retrieves data on all markets for bingx
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        const contract = await this.fetchContractMarkets(params);
        return contract;
    }
    parseBalance(response) {
        const result = { 'info': response };
        const data = this.safeValue(response, 'data', {});
        const dataAccount = this.safeValue(data, 'account', {});
        const currencies = Object.keys(this.currencies);
        for (let i = 0; i < currencies.length; i++) {
            const code = currencies[i];
            const account = this.account();
            if (this.safeString(dataAccount, 'currency', '') === code) {
                account['free'] = this.safeString(dataAccount, 'availableMargin');
                account['used'] = this.safeString(dataAccount, 'usedMargin');
                account['total'] = this.safeString(dataAccount, 'balance');
            }
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name bingx#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the bingx api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        // await this.loadMarkets ();
        const response = await this.swapV1PrivatePostUserGetBalance(params);
        return this.parseBalance(response);
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name paymium#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the paymium api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'currency': market['id'],
        };
        const response = await this.publicGetDataCurrencyDepth(this.extend(request, params));
        return this.parseOrderBook(response, market['symbol'], undefined, 'bids', 'asks', 'price', 'amount');
    }
    parseTicker(ticker, market = undefined) {
        //
        // {
        //   "symbol": "BTC-USDT",
        //   "priceChange": "10.00",
        //   "priceChangePercent": "10",
        //   "lastPrice": "5738.23",
        //   "lastVolume": "31.21",
        //   "highPrice": "5938.23",
        //   "lowPrice": "5238.23",
        //   "volume": "23211231.13",
        //   "dayVolume": "213124412412.47",
        //   "openPrice": "5828.32"
        // }
        //
        const symbol = this.safeSymbol(undefined, market);
        const timestamp = this.milliseconds();
        const baseVolume = this.safeString(ticker, 'volume');
        let last = this.safeString(ticker, 'lastPrice');
        if (last === '-') {
            last = undefined;
        }
        let high = this.safeString(ticker, 'highPrice');
        if (high === '-') {
            high = undefined;
        }
        let low = this.safeString(ticker, 'lowPrice');
        if (low === '-') {
            low = undefined;
        }
        let open = this.safeString(ticker, 'openPrice');
        if (open === '-') {
            open = undefined;
        }
        let percentage = this.safeString(ticker, 'priceChangePercent');
        if (percentage === '-') {
            percentage = undefined;
        }
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': last,
            'bidVolume': undefined,
            'ask': last,
            'askVolume': undefined,
            'open': open,
            'close': last,
            'last': last,
            'mark': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': percentage,
            'average': undefined,
            'baseVolume': baseVolume,
            'info': ticker,
        }, market);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name paymium#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the paymium api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.swapV1PublicGetMarketGetTicker(this.extend(request, params));
        //
        // {
        //   "symbol": "BTC-USDT",
        //   "priceChange": "10.00",
        //   "priceChangePercent": "10",
        //   "lastPrice": "5738.23",
        //   "lastVolume": "31.21",
        //   "highPrice": "5938.23",
        //   "lowPrice": "5238.23",
        //   "volume": "23211231.13",
        //   "dayVolume": "213124412412.47",
        //   "openPrice": "5828.32"
        // }
        //
        const data = this.safeValue(response, 'data');
        const tickers = this.safeValue(data, 'tickers');
        const ticker = this.safeValue(tickers, 0);
        return this.parseTicker(ticker, market);
    }
    parseTrade(trade, market = undefined) {
        const timestamp = this.safeTimestamp(trade, 'created_at_int');
        const id = this.safeString(trade, 'uuid');
        market = this.safeMarket(undefined, market);
        const side = this.safeString(trade, 'side');
        const price = this.safeString(trade, 'price');
        const amountField = 'traded_' + market['base'].toLowerCase();
        const amount = this.safeString(trade, amountField);
        return this.safeTrade({
            'info': trade,
            'id': id,
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'takerOrMaker': undefined,
            'price': price,
            'amount': amount,
            'cost': undefined,
            'fee': undefined,
        }, market);
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        return [];
        // /**
        //  * @method
        //  * @name paymium#fetchTrades
        //  * @description get the list of most recent trades for a particular symbol
        //  * @param {string} symbol unified symbol of the market to fetch trades for
        //  * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        //  * @param {int|undefined} limit the maximum amount of trades to fetch
        //  * @param {object} params extra parameters specific to the paymium api endpoint
        //  * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        //  */
        // await this.loadMarkets ();
        // const market = this.market (symbol);
        // const request = {
        //     'currency': market['id'],
        // };
        // const response = await (this as any).publicGetDataCurrencyTrades (this.extend (request, params));
        // return this.parseTrades (response, market, since, limit);
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        // {
        //     "code": 0,
        //     "data": {
        //     "orders": [
        //         {
        //             "action": "Open",
        //             "avgFilledPrice": 31333.37,
        //             "commission": -0.0009,
        //             "entrustPrice": 31331.25,
        //             "entrustTm": "2021-01-05T09:15:02Z",
        //             "entrustVolume": 0.0001,
        //             "filledVolume": 0.0001,
        //             "orderId": "996273190",
        //             "orderStatus": "Filled",
        //             "profit": 0,
        //             "side": "Bid",
        //             "symbol": "BTC-USDT",
        //             "tradeType": "Market",
        //             "updateTm": "2021-01-05T09:15:15Z"
        //         }
        //     ]
        // },
        //     "message": ""
        // }
        await this.loadMarkets();
        let market = undefined;
        const request = {};
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        request['lastOrderId'] = 0;
        request['length'] = 100;
        request['timestamp'] = this.milliseconds() - 0;
        const response = await this.swapV1PrivatePostUserHistoryOrders(this.extend(request, params));
        const data = this.safeValue(response, 'data');
        const trades = this.safeValue(data, 'orders');
        return this.parseMyTrades(trades, market, since, limit);
    }
    parseMyTrades(trades, market = undefined, since = undefined, limit = undefined, params = {}) {
        let result = [];
        for (let i = 0; i < trades.length; i++) {
            const filled = this.safeNumber(trades[i], 'filledVolume', 0);
            if (filled <= 0) {
                continue;
            }
            const action = this.safeString(trades[i], 'action');
            if (action === 'Close') {
                continue;
            }
            const trade = this.extend(this.parseMyTrade(trades[i], market), params);
            result.push(trade);
        }
        result = this.sortBy(result, 'timestamp');
        const symbol = (market !== undefined) ? market['symbol'] : undefined;
        const tail = (since === undefined);
        return this.filterBySymbolSinceLimit(result, symbol, since, limit, tail);
    }
    parseMyTrade(trade, market = undefined) {
        // {
        //     'orderId': '1657690927243935744',
        //     'side': 'Ask',
        //     'action': 'Close',
        //     'tradeType': 'Limit',
        //     'entrustVolume': '0.0003',
        //     'entrustPrice': '26337.6',
        //     'filledVolume': '0',
        //     'avgFilledPrice': '0',
        //     'entrustTm': '2023-05-14T10:14:50Z',
        //     'symbol': 'BTC-USDT',
        //     'profit': '0',
        //     'commission': '0',
        //     'updateTm': '2023-05-14T10:14:50Z',
        //     'orderStatus': 'Cancelled'
        // }
        const marketId = this.safeString(trade, 'symbol');
        market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const rawSide = this.safeString(trade, 'side');
        const id = this.safeString(trade, 'orderId');
        const action = this.safeString(trade, 'action');
        const type = this.safeString(trade, 'tradeType');
        const ePrice = this.safeString(trade, 'entrustPrice');
        const filled = this.safeString(trade, 'filledVolume');
        const avgFilledPrice = this.safeString(trade, 'avgFilledPrice');
        const entrustTm = this.safeString(trade, 'entrustTm');
        const timestamp = this.parseDate(entrustTm);
        const profit = this.safeString(trade, 'profit');
        const commission = this.safeString(trade, 'commission');
        const status = this.safeString(trade, 'orderStatus');
        let isClose = false;
        if (action === 'Close') {
            isClose = true;
        }
        let side = undefined;
        if (rawSide === 'Bid') {
            side = 'buy';
        }
        else {
            side = 'sell';
        }
        let takerOrMaker = undefined;
        const tradeType = this.safeString(trade, 'tradeType');
        if (tradeType === 'Market') {
            takerOrMaker = 'taker';
        }
        else {
            takerOrMaker = 'maker';
        }
        let cost = 0.00045;
        if (takerOrMaker === 'taker') {
            cost = 0.00075;
        }
        return this.safeOrder({
            'info': trade,
            'id': id,
            'symbol': symbol,
            'side': side,
            'type': type,
            'filled': filled,
            'amount': filled,
            'average': avgFilledPrice,
            'takerOrMaker': takerOrMaker,
            'price': ePrice,
            'profit': profit,
            'fees': commission,
            'status': status,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'isClose': isClose,
            'fee': {
                'currency': market['quote'],
                'cost': cost,
            },
        });
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name bingx#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the paymium api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        // quick order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 29116.0
        // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        //
        // limit order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 28520.0
        // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        //
        // no post = 'timeInForce': 'GTC',
        //
        // SL
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        //
        // TP
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        //
        // LIMIT TP
        //
        // BTC/USDT:USDT
        // stopLimit
        // sell
        // 4.0
        // 33000.0
        // {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        await this.loadMarkets();
        const market = this.market(symbol);
        //
        const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
        const triggerType = this.safeStringLower2(params, 'trigger', 'workingType');
        // const isTriggerOrder = triggerPrice !== undefined;
        let isStopLossOrder = undefined;
        let isTakeProfitOrder = undefined;
        const reduceOnly = this.safeValue2(params, 'close', 'reduceOnly', false);
        const basePrice = this.safeValue(params, 'basePrice');
        let positionSide = undefined;
        const positionMode = this.safeValue(params, 'positionMode', 'oneway');
        if (!reduceOnly) {
            if (side === 'buy') {
                positionSide = 'LONG';
            }
            else {
                positionSide = 'SHORT';
            }
        }
        else {
            if (side === 'buy') {
                positionSide = 'SHORT';
            }
            else {
                positionSide = 'LONG';
            }
        }
        if (positionMode === 'oneway') {
            positionSide = 'BOTH';
        }
        if (triggerPrice !== undefined && basePrice !== undefined) {
            // triggerOrder is NOT stopOrder
            // type = 'market';
            if (reduceOnly) {
                if (side === 'buy') {
                    if (triggerPrice > basePrice) {
                        isStopLossOrder = true;
                    }
                    else {
                        isTakeProfitOrder = true;
                    }
                }
                else {
                    if (triggerPrice < basePrice) {
                        isStopLossOrder = true;
                    }
                    else {
                        isTakeProfitOrder = true;
                    }
                }
            }
            else {
                if (side === 'buy') {
                    if (triggerPrice < basePrice) {
                        isStopLossOrder = true;
                    }
                    else {
                        isTakeProfitOrder = true;
                    }
                }
                else {
                    if (triggerPrice > basePrice) {
                        isStopLossOrder = true;
                    }
                    else {
                        isTakeProfitOrder = true;
                    }
                }
            }
        }
        //
        let convertedType = type.toUpperCase();
        if (type === 'stop') {
            if (isTakeProfitOrder) {
                convertedType = 'TRIGGER_MARKET';
            }
            else if (isStopLossOrder) {
                convertedType = 'TRIGGER_MARKET';
            }
            else {
                throw new ArgumentsRequired('unknown order direction for TP/SL');
            }
        }
        if (type === 'stopLimit') {
            convertedType = 'TRIGGER_LIMIT';
        }
        const convertedSide = side.toUpperCase();
        const request = {
            'symbol': market['id'],
            'type': convertedType,
            'side': convertedSide,
            'quantity': amount,
            'positionSide': positionSide,
        };
        if (type === 'stop' || type === 'stopLimit') {
            let triggerBy = 'MARK_PRICE';
            if (triggerType === 'index') {
                triggerBy = 'INDEX_PRICE';
            }
            else if (triggerType === 'last') {
                triggerBy = 'CONTRACT_PRICE';
            }
            request['workingType'] = triggerBy;
        }
        if (triggerPrice !== undefined) {
            request['stopPrice'] = this.priceToPrecision(symbol, triggerPrice);
            if (convertedType === 'TRIGGER_LIMIT') {
                request['price'] = this.priceToPrecision(symbol, price);
            }
        }
        else if (triggerPrice === undefined && convertedType === 'TRIGGER_LIMIT') {
            request['price'] = basePrice;
            request['stopPrice'] = basePrice;
        }
        else if ((type === 'limit' || type === 'stopLimit') && (triggerPrice === undefined)) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const isMarketOrder = type === 'market';
        const exchangeSpecificParam = this.safeString2(params, 'force', 'timeInForce');
        const postOnly = this.isPostOnly(isMarketOrder, exchangeSpecificParam === 'PO', params);
        if (postOnly) {
            request['timeInForce'] = 'PostOnly';
        }
        // const response = await (this as any).swap2OpenApiPrivatePostSwapV2TradeOrder (this.extend (request, params));
        const response = await this.swap2OpenApiPrivatePostSwapV2TradeOrder(request);
        // console.log('response', response);
        const data = this.safeValue(response, 'data');
        const order = this.safeValue(data, 'order');
        // const parsedOrder = this.parseOrder (order, market);
        // let patchedOrder = this.extend (parsedOrder, params);
        // patchedOrder = this.extend (patchedOrder, {
        //     'price': price,
        //     'amount': amount,
        //     'side': side,
        //     'type': type,
        // });
        return this.parseOrder(order, market);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name phemex#cancelAllOrders
         * @description cancel all open orders in a market
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#cancelall
         * @param {string} symbol unified market symbol of the market to cancel orders in
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelAllOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.swap2OpenApiPrivateDeleteSwapV2TradeAllOpenOrders(request);
        return response;
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bingx#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'orderId': id,
        };
        const response = await this.swap2OpenApiPrivateDeleteSwapV2TradeOrder(request);
        return this.parseOrder(response, market);
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bingx#fetchPositions
         * @description fetch all open positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        const response = await this.swapV1PrivatePostUserGetPositions();
        const data = this.safeValue(response, 'data', {});
        const positions = this.safeValue(data, 'positions', []);
        const result = [];
        for (let i = 0; i < positions.length; i++) {
            result.push(this.parsePosition(positions[i]));
        }
        return result;
    }
    parsePosition(position, market = undefined) {
        //
        //
        // {
        //     "positionId": "1650546544279240704",
        //     "symbol": "BTC-USDT",
        //     "currency": "",
        //     "volume": 0.001,
        //     "availableVolume": 0.001,
        //     "positionSide": "short",
        //     "marginMode": "cross",
        //     "avgPrice": 27124.5,
        //     "liquidatedPrice": 0.0,
        //     "margin": 2.9386,
        //     "leverage": 5.0,
        //     "pnlRate": -45.83,
        //     "unrealisedPNL": -2.4863,
        //     "realisedPNL": 0.0126
        // }
        //
        const marketId = this.safeString(position, 'symbol');
        market = this.safeMarket(marketId, market);
        const timestamp = this.safeInteger(position, 'cTime');
        const marginMode = this.safeStringLower(position, 'marginMode');
        const hedged = true;
        const side = this.safeStringLower(position, 'positionSide');
        let contracts = this.safeFloat(position, 'volume');
        let liquidation = this.safeNumber(position, 'liquidatedPrice');
        if (side === 'short') {
            contracts = -1 * contracts;
        }
        if (liquidation === 0) {
            liquidation = undefined;
        }
        const initialMargin = this.safeNumber(position, 'margin');
        return {
            'info': position,
            'id': market['symbol'] + ':' + side,
            'symbol': market['symbol'],
            'notional': undefined,
            'marginMode': marginMode,
            'liquidationPrice': liquidation,
            'entryPrice': this.safeNumber(position, 'avgPrice'),
            'unrealizedPnl': this.safeNumber2(position, 'unrealisedPNL', 'unrealizedPL'),
            'realizedPnl': this.safeNumber2(position, 'realisedPNL', 'realizedPL'),
            'percentage': undefined,
            'contracts': contracts,
            'contractSize': this.safeNumber(market, 'contractSize'),
            'side': side,
            'hedged': hedged,
            'timestamp': timestamp,
            'markPrice': this.safeNumber(position, 'markPrice'),
            'datetime': this.iso8601(timestamp),
            'maintenanceMargin': undefined,
            'maintenanceMarginPercentage': undefined,
            'collateral': this.safeNumber(position, 'margin'),
            'initialMargin': initialMargin,
            'initialMarginPercentage': undefined,
            'leverage': this.safeNumber(position, 'leverage'),
            'marginRatio': undefined,
        };
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOHLCV
         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @see https://bybit-exchange.github.io/docs/v5/market/kline
         * @see https://bybit-exchange.github.io/docs/v5/market/mark-kline
         * @see https://bybit-exchange.github.io/docs/v5/market/index-kline
         * @see https://bybit-exchange.github.io/docs/v5/market/preimum-index-kline
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        this.checkRequiredSymbol('fetchOHLCV', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit === undefined) {
            limit = 200; // default is 340 when requested with `since`
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        const klineType = this.safeString(this.timeframes, timeframe, timeframe);
        request['interval'] = timeframe;
        if (limit !== undefined) {
            // request['limit'] = limit; // max 1000, default 1000
            if (klineType === '1') {
                request['endTime'] = since + limit * 60 * 1000;
            }
            else if (klineType === '3') {
                request['endTime'] = since + limit * 3 * 60 * 1000;
            }
            else if (klineType === '5') {
                request['endTime'] = since + limit * 5 * 60 * 1000;
            }
            else if (klineType === '15') {
                request['endTime'] = since + limit * 15 * 60 * 1000;
            }
            else if (klineType === '30') {
                request['endTime'] = since + limit * 30 * 60 * 1000;
            }
            else if (klineType === '60') {
                request['endTime'] = since + limit * 60 * 60 * 1000;
            }
            else if (klineType === '120') {
                request['endTime'] = since + limit * 120 * 60 * 1000;
            }
            else if (klineType === '240') {
                request['endTime'] = since + limit * 240 * 60 * 1000;
            }
            else if (klineType === '360') {
                request['endTime'] = since + limit * 360 * 60 * 1000;
            }
            else if (klineType === '720') {
                request['endTime'] = since + limit * 720 * 60 * 1000;
            }
            else if (klineType === '1D') {
                request['endTime'] = since + limit * 24 * 60 * 60 * 1000;
            }
            else if (klineType === '1W') {
                request['endTime'] = since + limit * 7 * 24 * 60 * 60 * 1000;
            }
            else if (klineType === '1M') {
                request['endTime'] = since + limit * 30 * 24 * 60 * 60 * 1000;
            }
            else {
                request['endTime'] = since + limit * 60 * 1000;
            }
        }
        // console.log ('===============');
        // console.log ('fetchOHLCV', symbol, timeframe, since, limit, params, klineType);
        // console.log ('now', +new Date (), new Date ());
        // console.log ('startTs', +new Date (request['startTime']), new Date (request['startTime']));
        // console.log ('endTs', +new Date (request['endTime']), new Date (request['endTime']));
        const response = await this.swap2OpenApiPublicGetSwapV2QuoteKlines(this.extend(request, params));
        // console.log ('lastCandleTs', response.data[response.data.length - 1] ? +new Date (+response.data[response.data.length - 1].time) : 'none', response.data[response.data.length - 1] ? new Date (+response.data[response.data.length - 1].time) : 'none');
        // console.log ('response', response);
        const ohlcvs = this.safeValue(response, 'data', []);
        if (ohlcvs.length > 0) {
            // BEGIN Patching last candle
            const lastRequest = this.omit(request, ['startTime', 'endTime']);
            const lastCandleResponse = await this.swap2OpenApiPublicGetSwapV2QuoteKlines(this.extend(lastRequest, params));
            const lastOhlcv = this.safeValue(lastCandleResponse, 'data', {});
            const lastOhlcvTime = this.safeInteger(lastOhlcv, 'time');
            // console.log('loht', lastOhlcvTime, new Date (lastOhlcvTime));
            const lastOhlcvFromArrayTime = this.safeInteger(ohlcvs.slice(-1), 'time');
            if (lastOhlcvTime >= lastOhlcvFromArrayTime) {
                ohlcvs.push(lastOhlcv);
            }
            // END Patching last candle
        }
        return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
    }
    parseOHLCVs(ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        const results = [];
        for (let i = 0; i < ohlcvs.length; i++) {
            results.push(this.parseOHLCV(ohlcvs[i], market));
        }
        const sorted = this.sortBy(results, 0);
        const tail = (since === undefined);
        return this.filterBySinceLimit(sorted, since, limit, 0, tail);
    }
    parseOHLCV(ohlcv, market = undefined) {
        return [
            this.safeInteger(ohlcv, 'time'),
            this.safeNumber(ohlcv, 'open'),
            this.safeNumber(ohlcv, 'high'),
            this.safeNumber(ohlcv, 'low'),
            this.safeNumber(ohlcv, 'close'),
            this.safeNumber(ohlcv, 'volume'), // volume
        ];
    }
    parseOrderStatus(status) {
        const statuses = {
            'pending': 'open',
            'new': 'open',
            'partially_filled': 'open',
            'filled': 'closed',
            'canceled': 'canceled',
            'pending_cancel': 'canceling',
            'rejected': 'rejected',
            'expired': 'expired',
        };
        return this.safeString(statuses, status, status);
    }
    parseStopTrigger(status) {
        const statuses = {
            'market_price': 'mark',
            'mark_price': 'mark',
            'fill_price': 'last',
            'contract_price': 'last',
            'index_price': 'index', // unused
        };
        return this.safeString(statuses, status, status);
    }
    parseOrderType(type) {
        const types = {
            'limit': 'limit',
            'market': 'market',
            'stop_market': 'stop',
            'take_profit_market': 'stop',
            'take_profit_limit': 'stopLimit',
            'trigger_limit': 'stopLimit',
            'trigger_market': 'stop',
        };
        return this.safeStringLower(types, type, type);
    }
    parseOrder(order, market = undefined) {
        // {
        //     "code": 0,
        //     "msg": "",
        //     "data": {
        //       "orders": [
        //         {
        //           "symbol": "BTC-USDT",
        //           "orderId": 1651880171474731000,
        //           "side": "SELL",
        //           "positionSide": "LONG",
        //           "type": "TAKE_PROFIT_MARKET",
        //           "origQty": "0.0020",
        //           "price": "0.0",
        //           "executedQty": "0.0000",
        //           "avgPrice": "0.0",
        //           "cumQuote": "0",
        //           "stopPrice": "35000.0",
        //           "profit": "0.0",
        //           "commission": "0.0",
        //           "status": "NEW",
        //           "time": 1682673897986,
        //           "updateTime": 1682673897986
        //         },
        //         {
        //           "symbol": "BTC-USDT",
        //           "orderId": 1651880171445371000,
        //           "side": "SELL",
        //           "positionSide": "LONG",
        //           "type": "STOP_MARKET",
        //           "origQty": "0.0020",
        //           "price": "0.0",
        //           "executedQty": "0.0000",
        //           "avgPrice": "28259.0",
        //           "cumQuote": "0",
        //           "stopPrice": "27000.0",
        //           "profit": "0.0",
        //           "commission": "0.0",
        //           "status": "NEW",
        //           "time": 1682673897979,
        //           "updateTime": 1682673897979
        //         },
        //         {
        //           "symbol": "BTC-USDT",
        //           "orderId": 1651287406772699100,
        //           "side": "BUY",
        //           "positionSide": "LONG",
        //           "type": "LIMIT",
        //           "origQty": "0.0001",
        //           "price": "25000.0",
        //           "executedQty": "0.0000",
        //           "avgPrice": "0.0",
        //           "cumQuote": "0",
        //           "stopPrice": "",
        //           "profit": "0.0",
        //           "commission": "0.0",
        //           "status": "PENDING",
        //           "time": 1682532572000,
        //           "updateTime": 1682532571000
        //         },
        //         {
        //           "symbol": "BTC-USDT",
        //           "orderId": 1651006482122227700,
        //           "side": "BUY",
        //           "positionSide": "LONG",
        //           "type": "LIMIT",
        //           "origQty": "0.0001",
        //           "price": "25000.0",
        //           "executedQty": "0.0000",
        //           "avgPrice": "0.0",
        //           "cumQuote": "0",
        //           "stopPrice": "",
        //           "profit": "0.0",
        //           "commission": "0.0",
        //           "status": "PENDING",
        //           "time": 1682465594000,
        //           "updateTime": 1682465594000
        //         }
        //       ]
        //     }
        //   }
        const marketId = this.safeString(order, 'symbol');
        market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const id = this.safeString(order, 'orderId');
        const price = this.safeString(order, 'price');
        const amount = this.safeFloat(order, 'origQty');
        const filled = this.safeFloat(order, 'executedQty');
        const cost = this.safeString(order, 'executedQty');
        const average = this.safeString(order, 'avgPrice');
        const type = this.parseOrderType(this.safeStringLower(order, 'type'));
        const timestamp = this.safeInteger(order, 'time');
        const rawStopTrigger = this.safeStringLower2(order, 'trigger', 'workingType');
        const trigger = this.parseStopTrigger(rawStopTrigger);
        const side = this.safeStringLower(order, 'side');
        const positionSide = this.safeStringLower(order, 'positionSide');
        let reduceOnly = false;
        if (side === 'buy') {
            if (positionSide === 'long') {
                reduceOnly = false;
            }
            else {
                reduceOnly = true;
            }
        }
        else {
            if (positionSide === 'long') {
                reduceOnly = true;
            }
            else {
                reduceOnly = false;
            }
        }
        const close = reduceOnly;
        // order type LIMIT, MARKET, STOP_MARKET, TAKE_PROFIT_MARKET, TRIGGER_LIMIT, TRIGGER_MARKET
        // if (rawStopTrigger) {
        //     if (type === 'market') {
        //         type = 'stop';
        //     } else {
        //         type = 'stopLimit';
        //     }
        // } else {
        //     if (type === 'market') {
        //         type = 'market';
        //     } else {
        //         type = 'limit';
        //     }
        // }
        const clientOrderId = this.safeString(order, 'orderId');
        const fee = this.safeString(order, 'comission');
        const rawStatus = this.safeStringLower(order, 'status');
        const status = this.parseOrderStatus(rawStatus);
        const lastTradeTimestamp = this.safeInteger(order, 'updateTime');
        const timeInForce = this.safeString(order, 'timeInForce');
        const postOnly = timeInForce === 'PostOnly';
        const stopPrice = this.safeNumber(order, 'stopPrice');
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': 'GTC',
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'average': average,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': fee,
            'trades': undefined,
            'reduceOnly': reduceOnly,
            'close': close,
            'trigger': trigger, // TEALSTREET
        }, market);
    }
    async fetchOpenOrdersV2(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#fetchOpenOrders
         * @description fetch all unfilled currently open orders
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch open orders for
         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const response = await this.swap2OpenApiPrivateGetSwapV2TradeOpenOrders();
        const data = this.safeValue(response, 'data', {});
        const orders = this.safeValue(data, 'orders', []);
        const result = [];
        for (let i = 0; i < orders.length; i++) {
            result.push(this.parseOrder(orders[i]));
        }
        return result;
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        return await this.fetchOpenOrdersV2(symbol, since, limit, params);
    }
    sign(path, section = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const type = section[0];
        const version = section[1];
        const access = section[2];
        const rawPath = path;
        let url = this.implodeHostname(this.urls['api'][type]);
        url += '/' + version + '/' + path;
        path = this.implodeParams(path, params);
        params = this.omit(params, this.extractParams(path));
        params = this.keysort(params);
        if (access === 'private') {
            this.checkRequiredCredentials();
            // positionSide is marked v1 :/
            const isOpenApi = url.indexOf('/v2/') >= 0 || url.indexOf('positionSide/dual') >= 0;
            const isUserDataStreamEp = url.indexOf('userDataStream') >= 0;
            if (isOpenApi || isUserDataStreamEp) {
                params = this.extend(params, {
                    'timestamp': this.milliseconds() - 0,
                });
                params = this.keysort(params);
                const paramString = this.rawencode(params);
                const signature = this.hmac(this.encode(paramString), this.encode(this.secret), 'sha256');
                params = this.extend(params, {
                    'signature': signature,
                });
                headers = {
                    'X-BX-APIKEY': this.apiKey,
                };
            }
            else {
                params = this.extend(params, {
                    'apiKey': this.apiKey,
                    'timestamp': this.milliseconds() - 0,
                });
                params = this.keysort(params);
                // ACTUAL SIGNATURE GENERATION
                const paramString = this.rawencode(params);
                const originString = method + '/api/' + version + '/' + rawPath + paramString;
                const signature = this.hmac(this.encode(originString), this.encode(this.secret), 'sha256', 'base64');
                // ACTUAL SIGNATURE GENERATION
                params = this.extend(params, {
                    'sign': signature,
                });
            }
        }
        if (Object.keys(params).length) {
            url += '?' + this.urlencode(params);
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (!response) {
            return; // fallback to default error handler
        }
        const errorCode = this.safeInteger(response, 'code');
        // in theory 80012 is Service Unavailable, but returned on lev charges :/
        if (errorCode !== undefined && errorCode > 0 && errorCode !== 80012) {
            throw new ExchangeError(this.id + ' ' + this.json(response));
        }
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bitget$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitget',
            'name': 'Bitget',
            'countries': ['SG'],
            'version': 'v1',
            'rateLimit': 50,
            'certified': true,
            'pro': true,
            'userAgent': undefined,
            'origin': 'https://open-api.bingx.com',
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': false,
                'swap': true,
                'future': false,
                'option': false,
                'addMargin': true,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'cancelOrders': true,
                'createOrder': true,
                'createReduceOnlyOrder': false,
                'fetchAccounts': false,
                'fetchBalance': true,
                'fetchBorrowRate': false,
                'fetchBorrowRateHistories': false,
                'fetchBorrowRateHistory': false,
                'fetchBorrowRates': false,
                'fetchBorrowRatesPerSymbol': false,
                'fetchClosedOrders': true,
                'fetchCurrencies': true,
                'fetchDepositAddress': true,
                'fetchDepositAddresses': false,
                'fetchDeposits': true,
                'fetchFundingHistory': false,
                'fetchFundingRate': true,
                'fetchFundingRateHistory': true,
                'fetchFundingRates': false,
                'fetchIndexOHLCV': false,
                'fetchLedger': true,
                'fetchLeverage': true,
                'fetchLeverageTiers': false,
                'fetchMarginMode': undefined,
                'fetchMarketLeverageTiers': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenInterest': true,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrders': true,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrderTrades': true,
                'fetchPosition': true,
                'fetchPositionMode': false,
                'fetchPositions': true,
                'fetchPositionsHistory': true,
                'fetchPositionsRisk': false,
                'fetchPremiumIndexOHLCV': false,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': true,
                'fetchTrades': true,
                'fetchTradingFee': true,
                'fetchTradingFees': true,
                'fetchTransfer': false,
                'fetchTransfers': undefined,
                'fetchWithdrawal': false,
                'fetchWithdrawals': true,
                'reduceMargin': true,
                'setLeverage': true,
                'setMarginMode': true,
                'setPositionMode': false,
                'transfer': true,
                'withdraw': false,
            },
            'timeframes': {
                '1m': '1m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '4h': '4h',
                '6h': '6h',
                '12h': '12h',
                '1d': '1d',
                '3d': '3d',
                '1w': '1w',
                '1M': '1M',
            },
            'hostname': 'bitget.com',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/195989417-4253ddb0-afbe-4a1c-9dea-9dbcd121fa5d.jpg',
                'api': {
                    'spot': 'https://api.{hostname}',
                    'mix': 'https://api.{hostname}',
                },
                'www': 'https://www.bitget.com',
                'doc': [
                    'https://bitgetlimited.github.io/apidoc/en/mix',
                    'https://bitgetlimited.github.io/apidoc/en/spot',
                    'https://bitgetlimited.github.io/apidoc/en/broker',
                ],
                'fees': 'https://www.bitget.cc/zh-CN/rate?tab=1',
                'referral': 'https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j',
            },
            'api': {
                'public': {
                    'spot': {
                        'get': {
                            'public/time': 1,
                            'public/currencies': 1,
                            'public/products': 1,
                            'public/product': 1,
                            'market/ticker': 1,
                            'market/tickers': 1,
                            'market/fills': 1,
                            'market/candles': 1,
                            'market/depth': 1,
                        },
                    },
                    'mix': {
                        'get': {
                            'market/contracts': 1,
                            'market/depth': 1,
                            'market/ticker': 1,
                            'market/tickers': 1,
                            'market/fills': 1,
                            'market/candles': 1,
                            'market/index': 1,
                            'market/funding-time': 1,
                            'market/history-fundRate': 1,
                            'market/current-fundRate': 1,
                            'market/open-interest': 1,
                            'market/mark-price': 1,
                            'market/symbol-leverage': 1,
                        },
                    },
                },
                'private': {
                    'spot': {
                        'get': {
                            'account/getInfo': 20,
                            'account/assets': 2,
                            'account/transferRecords': 4,
                            'wallet/deposit-address': 4,
                            'wallet/withdrawal-inner': 4,
                            'wallet/withdrawal-list': 1,
                            'wallet/deposit-list': 1,
                        },
                        'post': {
                            'account/bills': 2,
                            'account/sub-account-spot-assets': 200,
                            'trade/orders': 2,
                            'trade/batch-orders': 4,
                            'trade/cancel-order': 2,
                            'trade/cancel-batch-orders': 4,
                            'trade/orderInfo': 1,
                            'trade/open-orders': 1,
                            'trade/history': 1,
                            'trade/fills': 1,
                            'wallet/transfer': 4,
                            'wallet/withdrawal': 4,
                            'wallet/subTransfer': 10,
                        },
                    },
                    'mix': {
                        'get': {
                            'account/account': 2,
                            'account/accounts': 2,
                            'account/open-count': 1,
                            'order/current': 2,
                            'order/history': 2,
                            'order/detail': 2,
                            'order/fills': 2,
                            'order/historyProductType': 8,
                            'order/allFills': 2,
                            'plan/currentPlan': 2,
                            'plan/historyPlan': 2,
                            'position/singlePosition': 2,
                            'position/allPosition': 2,
                            'position/history-position': 2,
                            'trace/currentTrack': 2,
                            'trace/followerOrder': 2,
                            'trace/historyTrack': 2,
                            'trace/summary': 2,
                            'trace/profitSettleTokenIdGroup': 2,
                            'trace/profitDateGroupList': 2,
                            'trade/profitDateList': 2,
                            'trace/waitProfitDateList': 2,
                            'trace/traderSymbols': 2,
                            'order/marginCoinCurrent': 2,
                        },
                        'post': {
                            'account/setLeverage': 8,
                            'account/setPositionMode': 8,
                            'account/setMargin': 8,
                            'account/setMarginMode': 8,
                            'order/placeOrder': 2,
                            'order/place-tpsl-order': 2,
                            'order/batch-orders': 2,
                            'order/cancel-order': 2,
                            'order/cancel-all-orders': 2,
                            'order/cancel-batch-orders': 2,
                            'plan/placePlan': 2,
                            'plan/modifyPlan': 2,
                            'plan/modifyPlanPreset': 2,
                            'plan/placeTPSL': 2,
                            'plan/placePositionsTPSL': 2,
                            'plan/modifyTPSLPlan': 2,
                            'plan/cancelPlan': 2,
                            'plan/cancelAllPlan': 2,
                            'trace/closeTrackOrder': 2,
                            'trace/setUpCopySymbols': 2,
                        },
                    },
                },
            },
            'fees': {
                'spot': {
                    'taker': this.parseNumber('0.002'),
                    'maker': this.parseNumber('0.002'),
                },
                'swap': {
                    'taker': this.parseNumber('0.0006'),
                    'maker': this.parseNumber('0.0004'),
                },
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'password': true,
            },
            'exceptions': {
                // http error codes
                // 400 Bad Request — Invalid request format
                // 401 Unauthorized — Invalid API Key
                // 403 Forbidden — You do not have access to the requested resource
                // 404 Not Found
                // 500 Internal Server Error — We had a problem with our server
                'exact': {
                    '1': ExchangeError,
                    // undocumented
                    'failure to get a peer from the ring-balancer': ExchangeNotAvailable,
                    '4010': PermissionDenied,
                    // common
                    // '0': ExchangeError, // 200 successful,when the order placement / cancellation / operation is successful
                    '4001': ExchangeError,
                    '4002': ExchangeError,
                    // --------------------------------------------------------
                    '30001': AuthenticationError,
                    '30002': AuthenticationError,
                    '30003': AuthenticationError,
                    '30004': AuthenticationError,
                    '30005': InvalidNonce,
                    '30006': AuthenticationError,
                    '30007': BadRequest,
                    '30008': RequestTimeout,
                    '30009': ExchangeError,
                    '30010': AuthenticationError,
                    '30011': PermissionDenied,
                    '30012': AuthenticationError,
                    '30013': AuthenticationError,
                    '30014': DDoSProtection,
                    '30015': AuthenticationError,
                    '30016': ExchangeError,
                    '30017': ExchangeError,
                    '30018': ExchangeError,
                    '30019': ExchangeNotAvailable,
                    '30020': BadRequest,
                    '30021': BadRequest,
                    '30022': PermissionDenied,
                    '30023': BadRequest,
                    '30024': BadSymbol,
                    '30025': BadRequest,
                    '30026': DDoSProtection,
                    '30027': AuthenticationError,
                    '30028': PermissionDenied,
                    '30029': AccountSuspended,
                    '30030': ExchangeError,
                    '30031': BadRequest,
                    '30032': BadSymbol,
                    '30033': BadRequest,
                    '30034': ExchangeError,
                    '30035': ExchangeError,
                    '30036': ExchangeError,
                    '30037': ExchangeNotAvailable,
                    // '30038': AuthenticationError, // { "code": 30038, "message": "user does not exist" }
                    '30038': OnMaintenance,
                    // futures
                    '32001': AccountSuspended,
                    '32002': PermissionDenied,
                    '32003': CancelPending,
                    '32004': ExchangeError,
                    '32005': InvalidOrder,
                    '32006': InvalidOrder,
                    '32007': InvalidOrder,
                    '32008': InvalidOrder,
                    '32009': InvalidOrder,
                    '32010': ExchangeError,
                    '32011': ExchangeError,
                    '32012': ExchangeError,
                    '32013': ExchangeError,
                    '32014': ExchangeError,
                    '32015': ExchangeError,
                    '32016': ExchangeError,
                    '32017': ExchangeError,
                    '32018': ExchangeError,
                    '32019': ExchangeError,
                    '32020': ExchangeError,
                    '32021': ExchangeError,
                    '32022': ExchangeError,
                    '32023': ExchangeError,
                    '32024': ExchangeError,
                    '32025': ExchangeError,
                    '32026': ExchangeError,
                    '32027': ExchangeError,
                    '32028': AccountSuspended,
                    '32029': ExchangeError,
                    '32030': InvalidOrder,
                    '32031': ArgumentsRequired,
                    '32038': AuthenticationError,
                    '32040': ExchangeError,
                    '32044': ExchangeError,
                    '32045': ExchangeError,
                    '32046': ExchangeError,
                    '32047': ExchangeError,
                    '32048': InvalidOrder,
                    '32049': ExchangeError,
                    '32050': InvalidOrder,
                    '32051': InvalidOrder,
                    '32052': ExchangeError,
                    '32053': ExchangeError,
                    '32057': ExchangeError,
                    '32054': ExchangeError,
                    '32055': InvalidOrder,
                    '32056': ExchangeError,
                    '32058': ExchangeError,
                    '32059': InvalidOrder,
                    '32060': InvalidOrder,
                    '32061': InvalidOrder,
                    '32062': InvalidOrder,
                    '32063': InvalidOrder,
                    '32064': ExchangeError,
                    '32065': ExchangeError,
                    '32066': ExchangeError,
                    '32067': ExchangeError,
                    '32068': ExchangeError,
                    '32069': ExchangeError,
                    '32070': ExchangeError,
                    '32071': ExchangeError,
                    '32072': ExchangeError,
                    '32073': ExchangeError,
                    '32074': ExchangeError,
                    '32075': ExchangeError,
                    '32076': ExchangeError,
                    '32077': ExchangeError,
                    '32078': ExchangeError,
                    '32079': ExchangeError,
                    '32080': ExchangeError,
                    '32083': ExchangeError,
                    // token and margin trading
                    '33001': PermissionDenied,
                    '33002': AccountSuspended,
                    '33003': InsufficientFunds,
                    '33004': ExchangeError,
                    '33005': ExchangeError,
                    '33006': ExchangeError,
                    '33007': ExchangeError,
                    '33008': InsufficientFunds,
                    '33009': ExchangeError,
                    '33010': ExchangeError,
                    '33011': ExchangeError,
                    '33012': ExchangeError,
                    '33013': InvalidOrder,
                    '33014': OrderNotFound,
                    '33015': InvalidOrder,
                    '33016': ExchangeError,
                    '33017': InsufficientFunds,
                    '33018': ExchangeError,
                    '33020': ExchangeError,
                    '33021': BadRequest,
                    '33022': InvalidOrder,
                    '33023': ExchangeError,
                    '33024': InvalidOrder,
                    '33025': InvalidOrder,
                    '33026': ExchangeError,
                    '33027': InvalidOrder,
                    '33028': InvalidOrder,
                    '33029': InvalidOrder,
                    '33034': ExchangeError,
                    '33035': ExchangeError,
                    '33036': ExchangeError,
                    '33037': ExchangeError,
                    '33038': ExchangeError,
                    '33039': ExchangeError,
                    '33040': ExchangeError,
                    '33041': ExchangeError,
                    '33042': ExchangeError,
                    '33043': ExchangeError,
                    '33044': ExchangeError,
                    '33045': ExchangeError,
                    '33046': ExchangeError,
                    '33047': ExchangeError,
                    '33048': ExchangeError,
                    '33049': ExchangeError,
                    '33050': ExchangeError,
                    '33051': ExchangeError,
                    '33059': BadRequest,
                    '33060': BadRequest,
                    '33061': ExchangeError,
                    '33062': ExchangeError,
                    '33063': ExchangeError,
                    '33064': ExchangeError,
                    '33065': ExchangeError,
                    // account
                    '21009': ExchangeError,
                    '34001': PermissionDenied,
                    '34002': InvalidAddress,
                    '34003': ExchangeError,
                    '34004': ExchangeError,
                    '34005': ExchangeError,
                    '34006': ExchangeError,
                    '34007': ExchangeError,
                    '34008': InsufficientFunds,
                    '34009': ExchangeError,
                    '34010': ExchangeError,
                    '34011': ExchangeError,
                    '34012': ExchangeError,
                    '34013': ExchangeError,
                    '34014': ExchangeError,
                    '34015': ExchangeError,
                    '34016': PermissionDenied,
                    '34017': AccountSuspended,
                    '34018': AuthenticationError,
                    '34019': PermissionDenied,
                    '34020': PermissionDenied,
                    '34021': InvalidAddress,
                    '34022': ExchangeError,
                    '34023': PermissionDenied,
                    '34026': ExchangeError,
                    '34036': ExchangeError,
                    '34037': ExchangeError,
                    '34038': ExchangeError,
                    '34039': ExchangeError,
                    // swap
                    '35001': ExchangeError,
                    '35002': ExchangeError,
                    '35003': ExchangeError,
                    '35004': ExchangeError,
                    '35005': AuthenticationError,
                    '35008': InvalidOrder,
                    '35010': InvalidOrder,
                    '35012': InvalidOrder,
                    '35014': InvalidOrder,
                    '35015': InvalidOrder,
                    '35017': ExchangeError,
                    '35019': InvalidOrder,
                    '35020': InvalidOrder,
                    '35021': InvalidOrder,
                    '35022': ExchangeError,
                    '35024': ExchangeError,
                    '35025': InsufficientFunds,
                    '35026': ExchangeError,
                    '35029': OrderNotFound,
                    '35030': InvalidOrder,
                    '35031': InvalidOrder,
                    '35032': ExchangeError,
                    '35037': ExchangeError,
                    '35039': ExchangeError,
                    '35040': InvalidOrder,
                    '35044': ExchangeError,
                    '35046': InsufficientFunds,
                    '35047': InsufficientFunds,
                    '35048': ExchangeError,
                    '35049': InvalidOrder,
                    '35050': InvalidOrder,
                    '35052': InsufficientFunds,
                    '35053': ExchangeError,
                    '35055': InsufficientFunds,
                    '35057': ExchangeError,
                    '35058': ExchangeError,
                    '35059': BadRequest,
                    '35060': BadRequest,
                    '35061': BadRequest,
                    '35062': InvalidOrder,
                    '35063': InvalidOrder,
                    '35064': InvalidOrder,
                    '35066': InvalidOrder,
                    '35067': InvalidOrder,
                    '35068': InvalidOrder,
                    '35069': InvalidOrder,
                    '35070': InvalidOrder,
                    '35071': InvalidOrder,
                    '35072': InvalidOrder,
                    '35073': InvalidOrder,
                    '35074': InvalidOrder,
                    '35075': InvalidOrder,
                    '35076': InvalidOrder,
                    '35077': InvalidOrder,
                    '35078': InvalidOrder,
                    '35079': InvalidOrder,
                    '35080': InvalidOrder,
                    '35081': InvalidOrder,
                    '35082': InvalidOrder,
                    '35083': InvalidOrder,
                    '35084': InvalidOrder,
                    '35085': InvalidOrder,
                    '35086': InvalidOrder,
                    '35087': InvalidOrder,
                    '35088': InvalidOrder,
                    '35089': InvalidOrder,
                    '35090': ExchangeError,
                    '35091': ExchangeError,
                    '35092': ExchangeError,
                    '35093': ExchangeError,
                    '35094': ExchangeError,
                    '35095': BadRequest,
                    '35096': ExchangeError,
                    '35097': ExchangeError,
                    '35098': ExchangeError,
                    '35099': ExchangeError,
                    // option
                    '36001': BadRequest,
                    '36002': BadRequest,
                    '36005': ExchangeError,
                    '36101': AuthenticationError,
                    '36102': PermissionDenied,
                    '36103': AccountSuspended,
                    '36104': PermissionDenied,
                    '36105': PermissionDenied,
                    '36106': AccountSuspended,
                    '36107': PermissionDenied,
                    '36108': InsufficientFunds,
                    '36109': PermissionDenied,
                    '36201': PermissionDenied,
                    '36202': PermissionDenied,
                    '36203': InvalidOrder,
                    '36204': ExchangeError,
                    '36205': BadRequest,
                    '36206': BadRequest,
                    '36207': InvalidOrder,
                    '36208': InvalidOrder,
                    '36209': InvalidOrder,
                    '36210': InvalidOrder,
                    '36211': InvalidOrder,
                    '36212': InvalidOrder,
                    '36213': InvalidOrder,
                    '36214': ExchangeError,
                    '36216': OrderNotFound,
                    '36217': InvalidOrder,
                    '36218': InvalidOrder,
                    '36219': InvalidOrder,
                    '36220': InvalidOrder,
                    '36221': InvalidOrder,
                    '36222': InvalidOrder,
                    '36223': InvalidOrder,
                    '36224': InvalidOrder,
                    '36225': InvalidOrder,
                    '36226': InvalidOrder,
                    '36227': InvalidOrder,
                    '36228': InvalidOrder,
                    '36229': InvalidOrder,
                    '36230': InvalidOrder,
                    // --------------------------------------------------------
                    // swap
                    '400': BadRequest,
                    '401': AuthenticationError,
                    '403': PermissionDenied,
                    '404': BadRequest,
                    '405': BadRequest,
                    '415': BadRequest,
                    '429': DDoSProtection,
                    '500': ExchangeNotAvailable,
                    '1001': RateLimitExceeded,
                    '1002': ExchangeError,
                    '1003': ExchangeError,
                    // '00000': ExchangeError, // success
                    '40001': AuthenticationError,
                    '40002': AuthenticationError,
                    '40003': AuthenticationError,
                    '40004': InvalidNonce,
                    '40005': InvalidNonce,
                    '40006': AuthenticationError,
                    '40007': BadRequest,
                    '40008': InvalidNonce,
                    '40009': AuthenticationError,
                    '40010': AuthenticationError,
                    '40011': AuthenticationError,
                    '40012': AuthenticationError,
                    '40013': ExchangeError,
                    '40014': PermissionDenied,
                    '40015': ExchangeError,
                    '40016': PermissionDenied,
                    '40017': ExchangeError,
                    '40018': PermissionDenied,
                    '40102': BadRequest,
                    '40103': BadRequest,
                    '40104': ExchangeError,
                    '40105': ExchangeError,
                    '40106': ExchangeError,
                    '40107': ExchangeError,
                    '40108': InvalidOrder,
                    '40109': OrderNotFound,
                    '40200': OnMaintenance,
                    '40201': InvalidOrder,
                    '40202': ExchangeError,
                    '40203': BadRequest,
                    '40204': BadRequest,
                    '40205': BadRequest,
                    '40206': BadRequest,
                    '40207': BadRequest,
                    '40208': BadRequest,
                    '40209': BadRequest,
                    '40300': ExchangeError,
                    '40301': PermissionDenied,
                    '40302': BadRequest,
                    '40303': BadRequest,
                    '40304': BadRequest,
                    '40305': BadRequest,
                    '40306': ExchangeError,
                    '40308': OnMaintenance,
                    '40309': BadSymbol,
                    '40400': ExchangeError,
                    '40401': ExchangeError,
                    '40402': BadRequest,
                    '40403': BadRequest,
                    '40404': BadRequest,
                    '40405': BadRequest,
                    '40406': BadRequest,
                    '40407': ExchangeError,
                    '40408': ExchangeError,
                    '40409': ExchangeError,
                    '40500': InvalidOrder,
                    '40501': ExchangeError,
                    '40502': ExchangeError,
                    '40503': ExchangeError,
                    '40504': ExchangeError,
                    '40505': ExchangeError,
                    '40506': AuthenticationError,
                    '40507': AuthenticationError,
                    '40508': ExchangeError,
                    '40509': ExchangeError,
                    '40600': ExchangeError,
                    '40601': ExchangeError,
                    '40602': ExchangeError,
                    '40603': ExchangeError,
                    '40604': ExchangeNotAvailable,
                    '40605': ExchangeError,
                    '40606': ExchangeError,
                    '40607': ExchangeError,
                    '40608': ExchangeError,
                    '40609': ExchangeError,
                    '40700': BadRequest,
                    '40701': ExchangeError,
                    '40702': ExchangeError,
                    '40703': ExchangeError,
                    '40704': ExchangeError,
                    '40705': BadRequest,
                    '40706': InvalidOrder,
                    '40707': BadRequest,
                    '40708': BadRequest,
                    '40709': ExchangeError,
                    '40710': ExchangeError,
                    '40711': InsufficientFunds,
                    '40712': InsufficientFunds,
                    '40713': ExchangeError,
                    '40714': ExchangeError,
                    '45110': InvalidOrder,
                    // spot
                    'invalid sign': AuthenticationError,
                    'invalid currency': BadSymbol,
                    'invalid symbol': BadSymbol,
                    'invalid period': BadRequest,
                    'invalid user': ExchangeError,
                    'invalid amount': InvalidOrder,
                    'invalid type': InvalidOrder,
                    'invalid orderId': InvalidOrder,
                    'invalid record': ExchangeError,
                    'invalid accountId': BadRequest,
                    'invalid address': BadRequest,
                    'accesskey not null': AuthenticationError,
                    'illegal accesskey': AuthenticationError,
                    'sign not null': AuthenticationError,
                    'req_time is too much difference from server time': InvalidNonce,
                    'permissions not right': PermissionDenied,
                    'illegal sign invalid': AuthenticationError,
                    'user locked': AccountSuspended,
                    'Request Frequency Is Too High': RateLimitExceeded,
                    'more than a daily rate of cash': BadRequest,
                    'more than the maximum daily withdrawal amount': BadRequest,
                    'need to bind email or mobile': ExchangeError,
                    'user forbid': PermissionDenied,
                    'User Prohibited Cash Withdrawal': PermissionDenied,
                    'Cash Withdrawal Is Less Than The Minimum Value': BadRequest,
                    'Cash Withdrawal Is More Than The Maximum Value': BadRequest,
                    'the account with in 24 hours ban coin': PermissionDenied,
                    'order cancel fail': BadRequest,
                    'base symbol error': BadSymbol,
                    'base date error': ExchangeError,
                    'api signature not valid': AuthenticationError,
                    'gateway internal error': ExchangeError,
                    'audit failed': ExchangeError,
                    'order queryorder invalid': BadRequest,
                    'market no need price': InvalidOrder,
                    'limit need price': InvalidOrder,
                    'userid not equal to account_id': ExchangeError,
                    'your balance is low': InsufficientFunds,
                    'address invalid cointype': ExchangeError,
                    'system exception': ExchangeError,
                    '50003': ExchangeError,
                    '50004': BadSymbol,
                    '50006': PermissionDenied,
                    '50007': PermissionDenied,
                    '50008': RequestTimeout,
                    '50009': RateLimitExceeded,
                    '50010': ExchangeError,
                    '50014': InvalidOrder,
                    '50015': InvalidOrder,
                    '50016': InvalidOrder,
                    '50017': InvalidOrder,
                    '50018': InvalidOrder,
                    '50019': InvalidOrder,
                    '50020': InsufficientFunds,
                    '50021': InvalidOrder,
                    '50026': InvalidOrder,
                    'invalid order query time': ExchangeError,
                    'invalid start time': BadRequest,
                    'invalid end time': BadRequest,
                    '20003': ExchangeError,
                    '01001': ExchangeError,
                    '43111': PermissionDenied, // {"code":"43111","msg":"参数错误 address not in address book","requestTime":1665394201164,"data":null}
                },
                'broad': {
                    'invalid size, valid range': ExchangeError,
                },
            },
            'precisionMode': TICK_SIZE$1,
            'commonCurrencies': {
                'JADE': 'Jade Protocol',
            },
            'options': {
                'timeframes': {
                    'spot': {
                        '1m': '1min',
                        '5m': '5min',
                        '15m': '15min',
                        '30m': '30min',
                        '1h': '1h',
                        '4h': '4h',
                        '6h': '6h',
                        '12h': '12h',
                        '1d': '1day',
                        '3d': '3day',
                        '1w': '1week',
                        '1M': '1M',
                    },
                    'swap': {
                        '1m': '1m',
                        '3m': '3m',
                        '5m': '5m',
                        '15m': '15m',
                        '30m': '15m',
                        '1h': '1H',
                        '4h': '4H',
                        '6h': '6H',
                        '12h': '12H',
                        '1d': '1Dutc',
                        '3d': '3Dutc',
                        '1w': '1Wutc',
                        '1M': '1Mutc',
                    },
                },
                'fetchMarkets': [
                    'spot',
                    'swap',
                ],
                'defaultType': 'swap',
                'defaultSubType': 'linear',
                'subTypes': ['umcbl', 'dmcbl', 'cmcbl'],
                'createMarketBuyOrderRequiresPrice': true,
                'brokerId': {
                // 'spot': 'CCXT#',
                // 'swap': 'CCXT#',
                },
                'withdraw': {
                    'fillResponseFromRequest': true,
                },
            },
        });
    }
    setSandboxMode(enabled) {
        const currSubTypes = this.getSubTypes();
        if (enabled) {
            this.options['subTypesBackup'] = currSubTypes;
            const newSubTypes = [];
            for (let i = 0; i < currSubTypes.length; i++) {
                newSubTypes.push('s' + currSubTypes[i]);
            }
            this.options['subTypes'] = newSubTypes;
        }
        else if ('subTypesBackup' in this.options) {
            this.options['subTypes'] = this.options['subTypesBackup'];
            delete this.options['subTypesBackup'];
        }
    }
    getSubTypes() {
        return this.safeValue(this.options, 'subTypes', ['umcbl', 'dmcbl', 'cmcbl']);
    }
    getSupportedMapping(key, mapping = {}) {
        // swap and future use same api for bitget
        if (key === 'future') {
            key = 'swap';
        }
        if (key in mapping) {
            return mapping[key];
        }
        else {
            throw new NotSupported(this.id + ' ' + key + ' does not have a value in mapping');
        }
    }
    getSubTypeFromMarketId(marketId) {
        if (!marketId) {
            return undefined;
        }
        const subTypeParts = marketId.split('_');
        if (subTypeParts.length > 1) {
            return subTypeParts[1].toLowerCase();
        }
        else {
            return '';
        }
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        /**
         * @method
         * @name binance#setPositionMode
         * @description set hedged to true or false for a market
         * @param {bool} hedged set to true to use dualSidePosition
         * @param {string|undefined} symbol not used by binance setPositionMode ()
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} response from the exchange
         */
        if (!symbol) {
            throw new ArgumentsRequired(this.id + ' setPositionMode requires a symbol argument');
        }
        const market = this.market(symbol);
        const subType = this.getSubTypeFromMarketId(market['id']);
        const request = {
            'productType': subType,
            'holdMode': hedged ? 'double_hold' : 'single_hold',
        };
        const response = await this.privateMixPostAccountSetPositionMode(this.extend(request, params));
        return response;
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        let subTypes = [];
        const request = {};
        let market = undefined;
        if (symbol) {
            market = this.market(symbol);
            subTypes = [this.getSubTypeFromMarketId(market['id'])];
            request['symbol'] = market['id'];
        }
        else {
            subTypes = this.getSubTypes();
        }
        const stop = this.safeValue(params, 'stop');
        if (stop) {
            params = this.omit(params, 'stop');
            let promises = [];
            for (let i = 0; i < subTypes.length; i++) {
                const subType = subTypes[i];
                request['productType'] = subType;
                request['isPlan'] = 'plan';
                promises.push(this.privateMixGetPlanCurrentPlan(this.extend(request, params)));
                request['isPlan'] = 'profit_loss';
                promises.push(this.privateMixGetPlanCurrentPlan(this.extend(request, params)));
            }
            promises = await Promise.all(promises);
            let orders = [];
            for (let i = 0; i < promises.length; i++) {
                const response = promises[i];
                const data = this.safeValue(response, 'data');
                orders = this.arrayConcat(orders, data);
            }
            return this.parseOrders(orders, undefined, since, limit);
        }
        else {
            let promises = [];
            for (let i = 0; i < subTypes.length; i++) {
                const subType = subTypes[i];
                request['productType'] = subType;
                promises.push(this.privateMixGetOrderMarginCoinCurrent(this.extend(request, params)));
            }
            promises = await Promise.all(promises);
            let orders = [];
            for (let i = 0; i < promises.length; i++) {
                const response = promises[i];
                const data = this.safeValue(response, 'data');
                orders = this.arrayConcat(orders, data);
            }
            return this.parseOrders(orders, undefined, since, limit);
        }
    }
    async fetchTime(params = {}) {
        /**
         * @method
         * @name bitget#fetchTime
         * @description fetches the current integer timestamp in milliseconds from the exchange server
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {int} the current integer timestamp in milliseconds from the exchange server
         */
        const response = await this.publicSpotGetPublicTime(params);
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645837773501,
        //       data: '1645837773501'
        //     }
        //
        return this.safeInteger(response, 'data');
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name bitget#fetchMarkets
         * @description retrieves data on all markets for bitget
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        const types = this.safeValue(this.options, 'fetchMarkets', ['spot', 'swap']);
        let result = [];
        for (let i = 0; i < types.length; i++) {
            const type = types[i];
            if (type === 'swap') {
                const subTypes = this.getSubTypes();
                let promises = [];
                for (let j = 0; j < subTypes.length; j++) {
                    promises.push(this.fetchMarketsByType(type, this.extend(params, {
                        'productType': subTypes[j],
                    })));
                }
                promises = await Promise.all(promises);
                let result = [];
                for (let j = 0; j < promises.length; j++) {
                    result = this.arrayConcat(result, promises[j]);
                }
                return result;
            }
            else {
                const markets = await this.fetchMarketsByType(types[i], params);
                result = this.arrayConcat(result, markets);
            }
        }
        return result;
    }
    parseMarkets(markets) {
        const result = [];
        for (let i = 0; i < markets.length; i++) {
            result.push(this.parseMarket(markets[i]));
        }
        return result;
    }
    parseMarket(market) {
        //
        // spot
        //
        //    {
        //        symbol: 'ALPHAUSDT_SPBL',
        //        symbolName: 'ALPHAUSDT',
        //        baseCoin: 'ALPHA',
        //        quoteCoin: 'USDT',
        //        minTradeAmount: '2',
        //        maxTradeAmount: '0',
        //        takerFeeRate: '0.001',
        //        makerFeeRate: '0.001',
        //        priceScale: '4',
        //        quantityScale: '4',
        //        status: 'online'
        //    }
        //
        // swap
        //
        //    {
        //        symbol: 'BTCUSDT_UMCBL',
        //        makerFeeRate: '0.0002',
        //        takerFeeRate: '0.0006',
        //        feeRateUpRatio: '0.005',
        //        openCostUpRatio: '0.01',
        //        quoteCoin: 'USDT',
        //        baseCoin: 'BTC',
        //        buyLimitPriceRatio: '0.01',
        //        sellLimitPriceRatio: '0.01',
        //        supportMarginCoins: [ 'USDT' ],
        //        minTradeNum: '0.001',
        //        priceEndStep: '5',
        //        volumePlace: '3',
        //        pricePlace: '1'
        //    }
        //
        const marketId = this.safeString(market, 'symbol');
        let quoteId = this.safeString(market, 'quoteCoin');
        if (marketId.slice(-6) === 'SCMCBL') {
            quoteId = 'SUSDC';
        }
        else if (marketId.slice(-5) === 'CMCBL') {
            quoteId = 'USDC';
        }
        const baseId = this.safeString(market, 'baseCoin');
        const quote = this.safeCurrencyCode(quoteId);
        const base = this.safeCurrencyCode(baseId);
        const supportMarginCoins = this.safeValue(market, 'supportMarginCoins', []);
        const settleId = this.safeString(supportMarginCoins, 0);
        const settle = this.safeCurrencyCode(settleId);
        let symbol = base + '/' + quote;
        const parts = marketId.split('_');
        const typeId = this.safeString(parts, 1);
        let type = undefined;
        let swap = false;
        let spot = false;
        let future = false;
        let contract = false;
        let pricePrecision = undefined;
        let amountPrecision = undefined;
        let linear = undefined;
        let inverse = undefined;
        let expiry = undefined;
        let expiryDatetime = undefined;
        if (typeId === 'SPBL') {
            type = 'spot';
            spot = true;
            pricePrecision = this.parseNumber(this.parsePrecision(this.safeString(market, 'priceScale')));
            amountPrecision = this.parseNumber(this.parsePrecision(this.safeString(market, 'quantityScale')));
        }
        else {
            const expiryString = this.safeString(parts, 2);
            if (expiryString !== undefined) {
                const year = '20' + expiryString.slice(0, 2);
                const month = expiryString.slice(2, 4);
                const day = expiryString.slice(4, 6);
                expiryDatetime = year + '-' + month + '-' + day + 'T00:00:00Z';
                expiry = this.parse8601(expiryDatetime);
                type = 'future';
                future = true;
                symbol = symbol + ':' + settle + '-' + expiryString;
            }
            else {
                type = 'swap';
                swap = true;
                symbol = symbol + ':' + settle;
            }
            contract = true;
            const sumcbl = (typeId === 'SUMCBL');
            const sdmcbl = (typeId === 'SDMCBL');
            const scmcbl = (typeId === 'SCMCBL');
            linear = (typeId === 'UMCBL') || (typeId === 'CMCBL') || sumcbl || scmcbl;
            inverse = !linear;
            if (sumcbl || sdmcbl || scmcbl) {
                symbol = marketId;
            }
            const priceDecimals = this.safeInteger(market, 'pricePlace');
            const amountDecimals = this.safeInteger(market, 'volumePlace');
            const priceStep = this.safeString(market, 'priceEndStep');
            const amountStep = this.safeString(market, 'minTradeNum');
            const precisePrice = new Precise(priceStep);
            precisePrice.decimals = Math.max(precisePrice.decimals, priceDecimals);
            precisePrice.reduce();
            const priceString = precisePrice.toString();
            pricePrecision = this.parseNumber(priceString);
            const preciseAmount = new Precise(amountStep);
            preciseAmount.decimals = Math.max(preciseAmount.decimals, amountDecimals);
            preciseAmount.reduce();
            const amountString = preciseAmount.toString();
            amountPrecision = this.parseNumber(amountString);
        }
        const status = this.safeString(market, 'status');
        let active = undefined;
        if (status !== undefined) {
            active = status === 'online';
        }
        return {
            'id': marketId,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': settleId,
            'type': type,
            'spot': spot,
            'margin': false,
            'swap': swap,
            'future': future,
            'option': false,
            'active': active,
            'contract': contract,
            'linear': linear,
            'inverse': inverse,
            'taker': this.safeNumber(market, 'takerFeeRate'),
            'maker': this.safeNumber(market, 'makerFeeRate'),
            'contractSize': 1,
            'expiry': expiry,
            'expiryDatetime': expiryDatetime,
            'strike': undefined,
            'optionType': undefined,
            'precision': {
                'amount': amountPrecision,
                'price': pricePrecision,
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': undefined,
                },
                'amount': {
                    'min': this.safeNumber(market, 'minTradeNum'),
                    'max': undefined,
                },
                'price': {
                    'min': undefined,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'info': market,
        };
    }
    async fetchMarketsByType(type, params = {}) {
        const method = this.getSupportedMapping(type, {
            'spot': 'publicSpotGetPublicProducts',
            'swap': 'publicMixGetMarketContracts',
        });
        const response = await this[method](params);
        //
        // spot
        //
        //    {
        //        code: '00000',
        //        msg: 'success',
        //        requestTime: 1645840064031,
        //        data: [
        //            {
        //                symbol: 'ALPHAUSDT_SPBL',
        //                symbolName: 'ALPHAUSDT',
        //                baseCoin: 'ALPHA',
        //                quoteCoin: 'USDT',
        //                minTradeAmount: '2',
        //                maxTradeAmount: '0',
        //                takerFeeRate: '0.001',
        //                makerFeeRate: '0.001',
        //                priceScale: '4',
        //                quantityScale: '4',
        //                status: 'online'
        //            }
        //        ]
        //    }
        //
        // swap
        //
        //    {
        //        code: '00000',
        //        msg: 'success',
        //        requestTime: 1645840821493,
        //        data: [
        //            {
        //                symbol: 'BTCUSDT_UMCBL',
        //                makerFeeRate: '0.0002',
        //                takerFeeRate: '0.0006',
        //                feeRateUpRatio: '0.005',
        //                openCostUpRatio: '0.01',
        //                quoteCoin: 'USDT',
        //                baseCoin: 'BTC',
        //                buyLimitPriceRatio: '0.01',
        //                sellLimitPriceRatio: '0.01',
        //                supportMarginCoins: [Array],
        //                minTradeNum: '0.001',
        //                priceEndStep: '5',
        //                volumePlace: '3',
        //                pricePlace: '1'
        //            }
        //        ]
        //    }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseMarkets(data);
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name bitget#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} an associative dictionary of currencies
         */
        const response = await this.publicSpotGetPublicCurrencies(params);
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645935668288,
        //       data: [
        //         {
        //           coinId: '230',
        //           coinName: 'KIN',
        //           transfer: 'false',
        //           chains: [
        //             {
        //               chain: 'SOL',
        //               needTag: 'false',
        //               withdrawable: 'true',
        //               rechargeable: 'true',
        //               withdrawFee: '187500',
        //               depositConfirm: '100',
        //               withdrawConfirm: '100',
        //               minDepositAmount: '12500',
        //               minWithdrawAmount: '250000',
        //               browserUrl: 'https://explorer.solana.com/tx/'
        //             }
        //           ]
        //         }
        //       ]
        //     }
        //
        const result = {};
        const data = this.safeValue(response, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const entry = data[i];
            const id = this.safeString(entry, 'coinId');
            const code = this.safeCurrencyCode(this.safeString(entry, 'coinName'));
            const chains = this.safeValue(entry, 'chains', []);
            const networks = {};
            for (let j = 0; j < chains.length; j++) {
                const chain = chains[j];
                const networkId = this.safeString(chain, 'chain');
                const network = this.safeCurrencyCode(networkId);
                const withdrawEnabled = this.safeString(chain, 'withdrawable');
                const depositEnabled = this.safeString(chain, 'rechargeable');
                networks[network] = {
                    'info': chain,
                    'id': networkId,
                    'network': network,
                    'limits': {
                        'withdraw': {
                            'min': this.safeNumber(chain, 'minWithdrawAmount'),
                            'max': undefined,
                        },
                        'deposit': {
                            'min': this.safeNumber(chain, 'minDepositAmount'),
                            'max': undefined,
                        },
                    },
                    'active': undefined,
                    'withdraw': withdrawEnabled === 'true',
                    'deposit': depositEnabled === 'true',
                    'fee': this.safeNumber(chain, 'withdrawFee'),
                    'precision': undefined,
                };
            }
            result[code] = {
                'info': entry,
                'id': id,
                'code': code,
                'networks': networks,
                'type': undefined,
                'name': undefined,
                'active': undefined,
                'deposit': undefined,
                'withdraw': undefined,
                'fee': undefined,
                'precision': undefined,
                'limits': {
                    'amount': { 'min': undefined, 'max': undefined },
                    'withdraw': { 'min': undefined, 'max': undefined },
                },
            };
        }
        return result;
    }
    async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchDeposits
         * @description fetch all deposits made to an account
         * @url https://bitgetlimited.github.io/apidoc/en/spot/#get-deposit-list
         * @param {string|undefined} code unified currency code
         * @param {int} since the earliest time in ms to fetch deposits for
         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @param {string|undefined} params.pageNo pageNo default 1
         * @param {string|undefined} params.pageSize pageSize default 20. Max 100
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
         */
        await this.loadMarkets();
        if (code === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchDeposits() requires a `code` argument');
        }
        const currency = this.currency(code);
        if (since === undefined) {
            since = this.milliseconds() - 31556952000; // 1yr
        }
        const request = {
            'coin': currency['code'],
            'startTime': since,
            'endTime': this.milliseconds(),
        };
        if (limit !== undefined) {
            request['pageSize'] = limit;
        }
        const response = await this.privateSpotGetWalletDepositList(this.extend(request, params));
        //
        //      {
        //          "code": "00000",
        //          "msg": "success",
        //          "requestTime": 0,
        //          "data": [{
        //              "id": "925607360021839872",
        //              "txId": "f73a4ac034da06b729f49676ca8801f406a093cf90c69b16e5a1cc9080df4ccb",
        //              "coin": "USDT",
        //              "type": "deposit",
        //              "amount": "19.44800000",
        //              "status": "success",
        //              "toAddress": "TRo4JMfZ1XYHUgnLsUMfDEf8MWzcWaf8uh",
        //              "fee": null,
        //              "chain": "TRC20",
        //              "confirm": null,
        //              "cTime": "1656407912259",
        //              "uTime": "1656407940148"
        //          }]
        //      }
        //
        const rawTransactions = this.safeValue(response, 'data', []);
        return this.parseTransactions(rawTransactions, currency, since, limit);
    }
    async withdraw(code, amount, address, tag = undefined, params = {}) {
        /**
         * @method
         * @name bitget#withdraw
         * @description make a withdrawal
         * @param {string} code unified currency code
         * @param {float} amount the amount to withdraw
         * @param {string} address the address to withdraw to
         * @param {string|undefined} tag
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @param {string} params.chain the chain to withdraw to
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
         */
        this.checkAddress(address);
        const chain = this.safeString(params, 'chain');
        if (chain === undefined) {
            throw new ArgumentsRequired(this.id + ' withdraw() requires a chain parameter');
        }
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'coin': currency['code'],
            'address': address,
            'chain': chain,
            'amount': amount,
        };
        if (tag !== undefined) {
            request['tag'] = tag;
        }
        const response = await this.privateSpotPostWalletWithdrawal(this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "data": "888291686266343424"
        //     }
        //
        const result = {
            'id': this.safeString(response, 'data'),
            'info': response,
            'txid': undefined,
            'timestamp': undefined,
            'datetime': undefined,
            'network': undefined,
            'addressFrom': undefined,
            'address': undefined,
            'addressTo': undefined,
            'amount': undefined,
            'type': 'withdrawal',
            'currency': undefined,
            'status': undefined,
            'updated': undefined,
            'tagFrom': undefined,
            'tag': undefined,
            'tagTo': undefined,
            'comment': undefined,
            'fee': undefined,
        };
        const withdrawOptions = this.safeValue(this.options, 'withdraw', {});
        const fillResponseFromRequest = this.safeValue(withdrawOptions, 'fillResponseFromRequest', true);
        if (fillResponseFromRequest) {
            result['currency'] = code;
            result['timestamp'] = this.milliseconds();
            result['datetime'] = this.iso8601(this.milliseconds());
            result['amount'] = amount;
            result['tag'] = tag;
            result['address'] = address;
            result['addressTo'] = address;
            result['network'] = chain;
        }
        return result;
    }
    async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchWithdrawals
         * @description fetch all withdrawals made from an account
         * @url https://bitgetlimited.github.io/apidoc/en/spot/#get-withdraw-list
         * @param {string|undefined} code unified currency code
         * @param {int} since the earliest time in ms to fetch withdrawals for
         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @param {string|undefined} params.pageNo pageNo default 1
         * @param {string|undefined} params.pageSize pageSize default 20. Max 100
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
         */
        await this.loadMarkets();
        if (code === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchWithdrawals() requires a `code` argument');
        }
        const currency = this.currency(code);
        if (since === undefined) {
            since = this.milliseconds() - 31556952000; // 1yr
        }
        const request = {
            'coin': currency['code'],
            'startTime': since,
            'endTime': this.milliseconds(),
        };
        if (limit !== undefined) {
            request['pageSize'] = limit;
        }
        const response = await this.privateSpotGetWalletWithdrawalList(this.extend(request, params));
        //
        //      {
        //          "code": "00000",
        //          "msg": "success",
        //          "requestTime": 0,
        //          "data": [{
        //              "id": "925607360021839872",
        //              "txId": "f73a4ac034da06b729f49676ca8801f406a093cf90c69b16e5a1cc9080df4ccb",
        //              "coin": "USDT",
        //              "type": "deposit",
        //              "amount": "19.44800000",
        //              "status": "success",
        //              "toAddress": "TRo4JMfZ1XYHUgnLsUMfDEf8MWzcWaf8uh",
        //              "fee": null,
        //              "chain": "TRC20",
        //              "confirm": null,
        //              "cTime": "1656407912259",
        //              "uTime": "1656407940148"
        //          }]
        //      }
        //
        const rawTransactions = this.safeValue(response, 'data', []);
        return this.parseTransactions(rawTransactions, currency, since, limit);
    }
    parseTransaction(transaction, currency = undefined) {
        //
        //     {
        //         "id": "925607360021839872",
        //         "txId": "f73a4ac034da06b729f49676ca8801f406a093cf90c69b16e5a1cc9080df4ccb",
        //         "coin": "USDT",
        //         "type": "deposit",
        //         "amount": "19.44800000",
        //         "status": "success",
        //         "toAddress": "TRo4JMfZ1XYHUgnLsUMfDEf8MWzcWaf8uh",
        //         "fee": null,
        //         "chain": "TRC20",
        //         "confirm": null,
        //         "cTime": "1656407912259",
        //         "uTime": "1656407940148"
        //     }
        //
        const timestamp = this.safeInteger(transaction, 'cTime');
        const networkId = this.safeString(transaction, 'chain');
        const currencyId = this.safeString(transaction, 'coin');
        const status = this.safeString(transaction, 'status');
        return {
            'id': this.safeString(transaction, 'id'),
            'info': transaction,
            'txid': this.safeString(transaction, 'txId'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'network': networkId,
            'addressFrom': undefined,
            'address': this.safeString(transaction, 'toAddress'),
            'addressTo': this.safeString(transaction, 'toAddress'),
            'amount': this.safeNumber(transaction, 'amount'),
            'type': this.safeString(transaction, 'type'),
            'currency': this.safeCurrencyCode(currencyId),
            'status': this.parseTransactionStatus(status),
            'updated': this.safeNumber(transaction, 'uTime'),
            'tagFrom': undefined,
            'tag': undefined,
            'tagTo': undefined,
            'comment': undefined,
            'fee': undefined,
        };
    }
    parseTransactionStatus(status) {
        const statuses = {
            'success': 'ok',
            'Pending': 'pending',
            'pending_review': 'pending',
            'pending_review_fail': 'failed',
            'reject': 'failed',
        };
        return this.safeString(statuses, status, status);
    }
    async fetchDepositAddress(code, params = {}) {
        /**
         * @method
         * @name bitget#fetchDepositAddress
         * @description fetch the deposit address for a currency associated with this account
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} an [address structure]{@link https://docs.ccxt.com/en/latest/manual.html#address-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'coin': currency['code'],
        };
        const response = await this.privateSpotGetWalletDepositAddress(this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "data": {
        //             "address": "1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv",
        //             "chain": "BTC-Bitcoin",
        //             "coin": "BTC",
        //             "tag": "",
        //             "url": "https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv"
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseDepositAddress(data, currency);
    }
    parseDepositAddress(depositAddress, currency = undefined) {
        //
        //    {
        //        "address": "1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv",
        //        "chain": "BTC-Bitcoin",
        //        "coin": "BTC",
        //        "tag": "",
        //        "url": "https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv"
        //    }
        //
        const currencyId = this.safeString(depositAddress, 'coin');
        const networkId = this.safeString(depositAddress, 'chain');
        return {
            'currency': this.safeCurrencyCode(currencyId, currency),
            'address': this.safeString(depositAddress, 'address'),
            'tag': this.safeString(depositAddress, 'tag'),
            'network': networkId,
            'info': depositAddress,
        };
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOrderBook', market, params);
        const method = this.getSupportedMapping(marketType, {
            'spot': 'publicSpotGetMarketDepth',
            'swap': 'publicMixGetMarketDepth',
        });
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, query));
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645854610294,
        //       data: {
        //         asks: [ [ '39102', '11.026' ] ],
        //         bids: [ [ '39100.5', '1.773' ] ],
        //         timestamp: '1645854610294'
        //       }
        //     }
        //
        const data = this.safeValue(response, 'data');
        const timestamp = this.safeInteger(data, 'timestamp');
        return this.parseOrderBook(data, symbol, timestamp);
    }
    parseTicker(ticker, market = undefined) {
        //
        // spot
        //
        //     {
        //         symbol: 'BTCUSDT',
        //         high24h: '40252.43',
        //         low24h: '38548.54',
        //         close: '39102.16',
        //         quoteVol: '67295596.1458',
        //         baseVol: '1723.4152',
        //         usdtVol: '67295596.14578',
        //         ts: '1645856170030',
        //         buyOne: '39096.16',
        //         sellOne: '39103.99'
        //     }
        //
        // swap
        //
        //     {
        //         symbol: 'BTCUSDT_UMCBL',
        //         last: '39086',
        //         bestAsk: '39087',
        //         bestBid: '39086',
        //         high24h: '40312',
        //         low24h: '38524.5',
        //         timestamp: '1645856591864',
        //         priceChangePercent: '-0.00861',
        //         baseVolume: '142251.757',
        //         quoteVolume: '5552388715.9215',
        //         usdtVolume: '5552388715.9215'
        //     }
        //
        let marketId = this.safeString(ticker, 'symbol');
        if (!(marketId in this.markets_by_id)) {
            marketId += '_SPBL';
        }
        const symbol = this.safeSymbol(marketId, market);
        const high = this.safeString(ticker, 'high24h');
        const low = this.safeString(ticker, 'low24h');
        const last = this.safeString(ticker, 'last');
        const mark = this.safeString(ticker, 'markPrice');
        const close = this.safeString2(ticker, 'close', 'last');
        const quoteVolume = this.safeString2(ticker, 'quoteVol', 'quoteVolume');
        const baseVolume = this.safeString2(ticker, 'baseVol', 'baseVolume');
        const timestamp = this.safeInteger2(ticker, 'ts', 'timestamp');
        const datetime = this.iso8601(timestamp);
        const bid = this.safeString2(ticker, 'buyOne', 'bestBid');
        const ask = this.safeString2(ticker, 'sellOne', 'bestAsk');
        const percentage = Precise.stringMul(this.safeString(ticker, 'priceChangePercent'), '100');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': datetime,
            'high': high,
            'low': low,
            'bid': bid,
            'bidVolume': undefined,
            'ask': ask,
            'askVolume': undefined,
            'vwap': undefined,
            'open': undefined,
            'close': close,
            'last': last,
            'mark': mark,
            'previousClose': undefined,
            'change': undefined,
            'percentage': percentage,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name bitget#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const [marketType, query] = this.handleMarketTypeAndParams('fetchTicker', market, params);
        const method = this.getSupportedMapping(marketType, {
            'spot': 'publicSpotGetMarketTicker',
            'swap': 'publicMixGetMarketTicker',
        });
        const response = await this[method](this.extend(request, query));
        //
        //     {
        //         code: '00000',
        //         msg: 'success',
        //         requestTime: '1645856138576',
        //         data: {
        //             symbol: 'BTCUSDT',
        //             high24h: '40252.43',
        //             low24h: '38548.54',
        //             close: '39104.65',
        //             quoteVol: '67221762.2184',
        //             baseVol: '1721.527',
        //             usdtVol: '67221762.218361',
        //             ts: '1645856138031',
        //             buyOne: '39102.55',
        //             sellOne: '39110.56'
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseTicker(data, market);
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchTickers
         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @see https://bitgetlimited.github.io/apidoc/en/spot/#get-all-tickers
         * @see https://bitgetlimited.github.io/apidoc/en/mix/#get-all-symbol-ticker
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
         */
        await this.loadMarkets();
        let type = undefined;
        let market = undefined;
        if (symbols !== undefined) {
            const symbol = this.safeValue(symbols, 0);
            market = this.market(symbol);
        }
        [type, params] = this.handleMarketTypeAndParams('fetchTickers', market, params);
        const method = this.getSupportedMapping(type, {
            'spot': 'publicSpotGetMarketTickers',
            'swap': 'publicMixGetMarketTickers',
        });
        const request = {};
        if (method === 'publicMixGetMarketTickers') {
            const defaultSubType = this.safeString(this.options, 'defaultSubType');
            request['productType'] = (defaultSubType === 'linear') ? 'UMCBL' : 'DMCBL';
        }
        const response = await this[method](this.extend(request, params));
        //
        // spot
        //
        //     {
        //         "code":"00000",
        //         "msg":"success",
        //         "requestTime":1653237548496,
        //         "data":[
        //             {
        //                 "symbol":"LINKUSDT",
        //                 "high24h":"7.2634",
        //                 "low24h":"7.1697",
        //                 "close":"7.2444",
        //                 "quoteVol":"330424.2366",
        //                 "baseVol":"46401.3116",
        //                 "usdtVol":"330424.2365573",
        //                 "ts":"1653237548026",
        //                 "buyOne":"7.2382",
        //                 "sellOne":"7.2513"
        //             },
        //         ]
        //     }
        //
        // swap
        //
        //     {
        //         "code":"00000",
        //         "msg":"success",
        //         "requestTime":1653237819762,
        //         "data":[
        //             {
        //                 "symbol":"BTCUSDT_UMCBL",
        //                 "last":"29891.5",
        //                 "bestAsk":"29891.5",
        //                 "bestBid":"29889.5",
        //                 "high24h":"29941.5",
        //                 "low24h":"29737.5",
        //                 "timestamp":"1653237819761",
        //                 "priceChangePercent":"0.00163",
        //                 "baseVolume":"127937.56",
        //                 "quoteVolume":"3806276573.6285",
        //                 "usdtVolume":"3806276573.6285"
        //             },
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseTickers(data, symbols);
    }
    parseTrade(trade, market = undefined) {
        //
        // spot
        //
        //     {
        //         symbol: 'BTCUSDT_SPBL',
        //         tradeId: '881371996363608065',
        //         side: 'sell',
        //         fillPrice: '39123.05',
        //         fillQuantity: '0.0363',
        //         fillTime: '1645861379709'
        //     }
        //
        // swap
        //
        //     {
        //         tradeId: '881373204067311617',
        //         price: '39119.0',
        //         size: '0.001',
        //         side: 'buy',
        //         timestamp: '1645861667648',
        //         symbol: 'BTCUSDT_UMCBL'
        //     }
        //
        // private
        //
        //     {
        //         accountId: '6394957606',
        //         symbol: 'LTCUSDT_SPBL',
        //         orderId: '864752115272552448',
        //         fillId: '864752115685969921',
        //         orderType: 'limit',
        //         side: 'buy',
        //         fillPrice: '127.92000000',
        //         fillQuantity: '0.10000000',
        //         fillTotalAmount: '12.79200000',
        //         feeCcy: 'LTC',
        //         fees: '0.00000000',
        //         cTime: '1641898891373'
        //     }
        //
        //     {
        //         tradeId: '881640729552281602',
        //         symbol: 'BTCUSDT_UMCBL',
        //         orderId: '881640729145409536',
        //         price: '38429.50',
        //         sizeQty: '0.001',
        //         fee: '0',
        //         side: 'open_long',
        //         fillAmount: '38.4295',
        //         profit: '0',
        //         cTime: '1645925450694'
        //     }
        //
        const marketId = this.safeString(trade, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const id = this.safeStringN(trade, ['tradeId', 'fillId', 'orderId'], '');
        const order = this.safeString(trade, 'orderId');
        const rawSide = this.safeString(trade, 'side', '');
        let side = undefined;
        if (rawSide.indexOf('open_long') !== -1 || rawSide.indexOf('close_short') !== -1 || rawSide.indexOf('buy_single') !== -1 || rawSide.indexOf('buy') !== -1) {
            side = 'buy';
        }
        else if (rawSide.indexOf('open_short') !== -1 || rawSide.indexOf('close_long') !== -1 || rawSide.indexOf('sell') !== -1) {
            side = 'sell';
        }
        let isClose = undefined;
        if (rawSide.indexOf('close_long') !== -1 || rawSide.indexOf('close_short') !== -1) {
            isClose = true;
        }
        const price = this.safeString2(trade, 'priceAvg', 'price');
        let amount = this.safeString2(trade, 'fillQuantity', 'size');
        amount = this.safeString(trade, 'sizeQty', amount);
        let timestamp = this.safeInteger2(trade, 'fillTime', 'timestamp');
        timestamp = this.safeInteger(trade, 'cTime', timestamp);
        let fee = undefined;
        let feeAmount = this.safeString2(trade, 'fees', 'fee');
        const type = this.safeString(trade, 'orderType');
        if (feeAmount !== undefined) {
            feeAmount = Precise.stringNeg(feeAmount);
            const currencyCode = this.safeCurrencyCode(this.safeString(trade, 'feeCcy'));
            fee = {
                'code': currencyCode,
                'currency': currencyCode,
                'cost': feeAmount,
            };
        }
        const datetime = this.iso8601(timestamp);
        return this.safeTrade({
            'info': trade,
            'id': id,
            'order': order,
            'symbol': symbol,
            'side': side,
            'type': type,
            'takerOrMaker': undefined,
            'price': price,
            'amount': amount,
            'cost': this.safeString(fee, 'cost'),
            'fee': fee,
            'timestamp': timestamp,
            'datetime': datetime,
            'isClose': isClose,
        }, market);
    }
    async fetchTrades(symbol, limit = undefined, since = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const [marketType, query] = this.handleMarketTypeAndParams('fetchTrades', market, params);
        const method = this.getSupportedMapping(marketType, {
            'spot': 'publicSpotGetMarketFills',
            'swap': 'publicMixGetMarketFills',
        });
        const response = await this[method](this.extend(request, query));
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: '1645861382032',
        //       data: [
        //         {
        //           symbol: 'BTCUSDT_SPBL',
        //           tradeId: '881371996363608065',
        //           side: 'sell',
        //           fillPrice: '39123.05',
        //           fillQuantity: '0.0363',
        //           fillTime: '1645861379709'
        //         }
        //       ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseTrades(data, market, since, limit);
    }
    async fetchTradingFee(symbol, params = {}) {
        /**
         * @method
         * @name bitget#fetchTradingFee
         * @description fetch the trading fees for a market
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.publicSpotGetPublicProduct(this.extend(request, params));
        //
        //     {
        //         code: '00000',
        //         msg: 'success',
        //         requestTime: '1646255374000',
        //         data: {
        //           symbol: 'ethusdt_SPBL',
        //           symbolName: null,
        //           baseCoin: 'ETH',
        //           quoteCoin: 'USDT',
        //           minTradeAmount: '0',
        //           maxTradeAmount: '0',
        //           takerFeeRate: '0.002',
        //           makerFeeRate: '0.002',
        //           priceScale: '2',
        //           quantityScale: '4',
        //           status: 'online'
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseTradingFee(data, market);
    }
    async fetchTradingFees(params = {}) {
        /**
         * @method
         * @name bitget#fetchTradingFees
         * @description fetch the trading fees for multiple markets
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const response = await this.publicSpotGetPublicProducts(params);
        //
        //     {
        //         code: '00000',
        //         msg: 'success',
        //         requestTime: '1646255662391',
        //         data: [
        //           {
        //             symbol: 'ALPHAUSDT_SPBL',
        //             symbolName: 'ALPHAUSDT',
        //             baseCoin: 'ALPHA',
        //             quoteCoin: 'USDT',
        //             minTradeAmount: '2',
        //             maxTradeAmount: '0',
        //             takerFeeRate: '0.001',
        //             makerFeeRate: '0.001',
        //             priceScale: '4',
        //             quantityScale: '4',
        //             status: 'online'
        //           },
        //           ...
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const result = {};
        for (let i = 0; i < data.length; i++) {
            const feeInfo = data[i];
            const fee = this.parseTradingFee(feeInfo);
            const symbol = fee['symbol'];
            result[symbol] = fee;
        }
        return result;
    }
    parseTradingFee(data, market = undefined) {
        const marketId = this.safeString(data, 'symbol');
        return {
            'info': data,
            'symbol': this.safeSymbol(marketId, market),
            'maker': this.safeNumber(data, 'makerFeeRate'),
            'taker': this.safeNumber(data, 'takerFeeRate'),
        };
    }
    parseOHLCV(ohlcv, market = undefined, timeframe = '1m') {
        //
        // spot
        //
        //     {
        //         open: '57882.31',
        //         high: '58967.24',
        //         low: '57509.56',
        //         close: '57598.96',
        //         quoteVol: '439160536.605821',
        //         baseVol: '7531.2927',
        //         usdtVol: '439160536.605821',
        //         ts: '1637337600000'
        //     }
        //
        // swap
        //
        //     [
        //         "1645911960000",
        //         "39406",
        //         "39407",
        //         "39374.5",
        //         "39379",
        //         "35.526",
        //         "1399132.341"
        //     ]
        //
        return [
            this.safeInteger2(ohlcv, 0, 'ts'),
            this.safeNumber2(ohlcv, 1, 'open'),
            this.safeNumber2(ohlcv, 2, 'high'),
            this.safeNumber2(ohlcv, 3, 'low'),
            this.safeNumber2(ohlcv, 4, 'close'),
            this.safeNumber2(ohlcv, 5, 'baseVol'),
        ];
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchOHLCV
         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @param {int|undefined} params.until timestamp in ms of the latest candle to fetch
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOHLCV', market, params);
        const method = this.getSupportedMapping(marketType, {
            'spot': 'publicSpotGetMarketCandles',
            'swap': 'publicMixGetMarketCandles',
        });
        const until = this.safeInteger2(params, 'until', 'till');
        params = this.omit(params, ['until', 'till']);
        if (limit === undefined) {
            limit = 1000;
        }
        if (market['type'] === 'spot') {
            request['period'] = this.options['timeframes']['spot'][timeframe];
            request['limit'] = limit;
            if (since !== undefined) {
                request['after'] = since;
                if (until === undefined) {
                    const millisecondsPerTimeframe = this.options['timeframes']['swap'][timeframe] * 1000;
                    request['before'] = this.sum(since, millisecondsPerTimeframe * limit);
                }
            }
            if (until !== undefined) {
                request['before'] = until;
            }
        }
        else if (market['type'] === 'swap') {
            request['granularity'] = this.options['timeframes']['swap'][timeframe];
            request['limit'] = limit + 1;
            const duration = this.parseTimeframe(timeframe);
            const now = this.milliseconds();
            if (since === undefined) {
                request['startTime'] = now - (limit - 1) * (duration * 1000);
                request['endTime'] = now;
            }
            else {
                request['startTime'] = this.sum(since, -1 * duration * 1000);
                if (until !== undefined) {
                    request['endTime'] = until;
                }
                else {
                    request['endTime'] = this.sum(since, limit * duration * 1000);
                }
            }
        }
        const response = await this[method](this.extend(request, query));
        //  [ ["1645911960000","39406","39407","39374.5","39379","35.526","1399132.341"] ]
        const data = this.safeValue(response, 'data', response);
        return this.parseOHLCVs(data, market, timeframe, since, limit);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name bitget#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const [marketType, query] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
        const method = this.getSupportedMapping(marketType, {
            'spot': 'privateSpotGetAccountAssets',
            'swap': 'privateMixGetAccountAccounts',
        });
        if (marketType === 'swap') {
            const subTypes = this.getSubTypes();
            let promises = [];
            for (let i = 0; i < subTypes.length; i++) {
                const subType = subTypes[i];
                const request = {
                    'productType': subType,
                };
                promises.push(this[method](this.extend(request, query)));
            }
            promises = await Promise.all(promises);
            let result = {};
            for (let i = 0; i < promises.length; i++) {
                const response = promises[i];
                const data = this.safeValue(response, 'data');
                const parsedBalance = this.parseBalance(data);
                result = this.deepExtend(result, parsedBalance);
            }
            return result;
        }
        else {
            const request = {};
            const response = await this[method](this.extend(request, query));
            // spot
            //     {
            //       code: '00000',
            //       msg: 'success',
            //       requestTime: 1645928868827,
            //       data: [
            //         {
            //           coinId: 1,
            //           coinName: 'BTC',
            //           available: '0.00070000',
            //           frozen: '0.00000000',
            //           lock: '0.00000000',
            //           uTime: '1645921706000'
            //         }
            //       ]
            //     }
            //
            // swap
            //     {
            //       code: '00000',
            //       msg: 'success',
            //       requestTime: 1645928929251,
            //       data: [
            //         {
            //           marginCoin: 'USDT',
            //           locked: '0',
            //           available: '8.078525',
            //           crossMaxAvailable: '8.078525',
            //           fixedMaxAvailable: '8.078525',
            //           maxTransferOut: '8.078525',
            //           equity: '10.02508',
            //           usdtEquity: '10.02508',
            //           btcEquity: '0.00026057027'
            //         }
            //       ]
            //     }
            const data = this.safeValue(response, 'data');
            return this.parseBalance(data);
        }
    }
    parseBalance(balance) {
        const result = { 'info': {} };
        //
        //     {
        //       coinId: '1',
        //       coinName: 'BTC',
        //       available: '0.00099900',
        //       frozen: '0.00000000',
        //       lock: '0.00000000',
        //       uTime: '1661595535000'
        //     }
        //
        // {
        //   'marginCoin': 'USDT',
        //   'locked': '0',
        //   'available': '25',
        //   'crossMaxAvailable': '25',
        //   'fixedMaxAvailable': '25',
        //   'maxTransferOut': '25',
        //   'equity': '25',
        //   'usdtEquity': '25',
        //   'btcEquity': '0.00152089221',
        //   'unrealizedPL': None
        // }
        for (let i = 0; i < balance.length; i++) {
            const entry = balance[i];
            const currencyId = this.safeString2(entry, 'coinId', 'marginCoin');
            const code = this.safeCurrencyCode(currencyId);
            const info = this.safeValue(entry, 'info', {});
            const infoForCode = this.safeValue(info, code, {});
            result['info'][code] = this.deepExtend(infoForCode, entry);
            const account = this.account();
            const free = this.safeString2(entry, 'crossMaxAvailable', 'available', '0');
            const total = this.safeString2(entry, 'equity', 'available', '0');
            const used = Precise.stringSub(total, free);
            account['used'] = used;
            account['free'] = free;
            account['total'] = total;
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    parseOrderStatus(status) {
        const statuses = {
            'new': 'open',
            'init': 'open',
            'partially_filled': 'open',
            'full_fill': 'closed',
            'filled': 'closed',
            'not_trigger': 'untriggered',
        };
        return this.safeString(statuses, status, status);
    }
    parseStopTrigger(trigger) {
        const triggers = {
            'market_price': 'mark',
            'fill_price': 'last',
            'index_price': 'index',
        };
        return this.safeString(triggers, trigger, trigger);
    }
    parseOrder(order, market = undefined) {
        //
        // spot
        //     {
        //       accountId: '6394957606',
        //       symbol: 'BTCUSDT_SPBL',
        //       orderId: '881623995442958336',
        //       clientOrderId: '135335e9-b054-4e43-b00a-499f11d3a5cc',
        //       price: '39000.000000000000',
        //       quantity: '0.000700000000',
        //       orderType: 'limit',
        //       side: 'buy',
        //       status: 'new',
        //       fillPrice: '0.000000000000',
        //       fillQuantity: '0.000000000000',
        //       fillTotalAmount: '0.000000000000',
        //       cTime: '1645921460972'
        //     }
        //
        // swap
        //     {
        //       symbol: 'BTCUSDT_UMCBL',
        //       size: 0.001,
        //       orderId: '881640729145409536',
        //       clientOid: '881640729204129792',
        //       filledQty: 0.001,
        //       fee: 0,
        //       price: null,
        //       priceAvg: 38429.5,
        //       state: 'filled',
        //       side: 'open_long',
        //       timeInForce: 'normal',
        //       totalProfits: 0,
        //       posSide: 'long',
        //       marginCoin: 'USDT',
        //       filledAmount: 38.4295,
        //       orderType: 'market',
        //       cTime: '1645925450611',
        //       uTime: '1645925450746'
        //     }
        //
        // stop
        //
        //     {
        //         'orderId': '989690453925896192',
        //       'symbol': 'AAVEUSDT_UMCBL',
        //       'marginCoin': 'USDT',
        //       'size': '0.6',
        //       'executePrice': '0',
        //       'triggerPrice': '54.781',
        //       'status': 'not_trigger',
        //       'orderType': 'market',
        //       'planType': 'normal_plan',
        //       'side': 'open_short',
        //       'triggerType': 'market_price',
        //       'presetTakeProfitPrice': '0',
        //       'presetTakeLossPrice': '0',
        //       'rangeRate': '',
        //       'cTime': '1671686512452'
        //     }
        //
        const marketId = this.safeString(order, 'symbol');
        const instType = this.getSubTypeFromMarketId(marketId);
        market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const id = this.safeString(order, 'orderId');
        const price = this.safeString2(order, 'price', 'executePrice');
        const amount = this.safeString2(order, 'quantity', 'size');
        const filled = this.safeString2(order, 'fillQuantity', 'filledQty');
        const cost = this.safeString2(order, 'fillTotalAmount', 'filledAmount');
        const average = this.safeString(order, 'fillPrice');
        let type = this.safeString(order, 'orderType');
        const timestamp = this.safeInteger(order, 'cTime');
        const rawStopTrigger = this.safeString(order, 'triggerType');
        const trigger = this.parseStopTrigger(rawStopTrigger);
        let side = this.safeString2(order, 'side', 'posSide');
        let reduce = this.safeValue(order, 'reduceOnly', false);
        let close = reduce;
        const planType = this.safeString(order, 'planType');
        if (planType === 'sl' || planType === 'pos_loss' || planType === 'loss_plan' || planType === 'psl') {
            reduce = true;
            close = true;
        }
        if (side && side.split('_')[0] === 'close') {
            reduce = true;
            close = true;
        }
        if ((side === 'open_long') || (side === 'close_short') || (side === 'buy_single')) {
            side = 'buy';
        }
        else if ((side === 'close_long') || (side === 'open_short') || (side === 'sell_single')) {
            side = 'sell';
        }
        if (rawStopTrigger) {
            if (type === 'market') {
                type = 'stop';
            }
            else {
                type = 'stopLimit';
            }
        }
        else {
            if (type === 'market') {
                type = 'market';
            }
            else {
                type = 'limit';
            }
        }
        const clientOrderId = this.safeString2(order, 'clientOrderId', 'clientOid');
        const fee = undefined;
        const rawStatus = this.safeString2(order, 'status', 'state');
        const status = this.parseOrderStatus(rawStatus);
        const lastTradeTimestamp = this.safeInteger(order, 'uTime');
        const timeInForce = this.safeString(order, 'timeInForce');
        const postOnly = timeInForce === 'postOnly';
        const stopPrice = this.safeNumber(order, 'triggerPrice');
        return this.safeOrder({
            'info': order,
            'id': id,
            'instType': instType,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': 'GTC',
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'average': average,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': fee,
            'trades': undefined,
            'reduce': reduce,
            'close': close,
            'trigger': trigger, // TEALSTREET
        }, market);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name bitget#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        // {
        //     'stopPrice': 0.3866,
        //   'timeInForce': 'GTC',
        //   'reduceOnly': None,
        //   'trigger': 'Last',
        //   'closeOnTrigger': True,
        //   'basePrice': 0.3894
        // }
        await this.loadMarkets();
        const market = this.market(symbol);
        const [marketType, query] = this.handleMarketTypeAndParams('createOrder', market, params);
        const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
        const positionMode = this.safeValue(params, 'positionMode', 'hedged');
        let isTriggerOrder = triggerPrice !== undefined;
        let stopLossPrice = undefined;
        let isStopLossOrder = undefined;
        let takeProfitPrice = undefined;
        let isTakeProfitOrder = undefined;
        const reduceOnly = this.safeValue2(params, 'close', 'reduceOnly', false);
        const basePrice = this.safeValue(params, 'basePrice');
        if (triggerPrice !== undefined && basePrice !== undefined) {
            // triggerOrder is NOT stopOrder
            isTriggerOrder = !reduceOnly;
            type = 'market';
            if (!isTriggerOrder) {
                if (side === 'buy') {
                    if (triggerPrice > basePrice) {
                        isStopLossOrder = true;
                        stopLossPrice = triggerPrice;
                    }
                    else {
                        isTakeProfitOrder = true;
                        takeProfitPrice = triggerPrice;
                    }
                }
                else {
                    if (triggerPrice < basePrice) {
                        isStopLossOrder = true;
                        stopLossPrice = triggerPrice;
                    }
                    else {
                        isTakeProfitOrder = true;
                        takeProfitPrice = triggerPrice;
                    }
                }
            }
        }
        else {
            stopLossPrice = this.safeValue(params, 'stopLossPrice');
            isStopLossOrder = stopLossPrice !== undefined;
            takeProfitPrice = this.safeValue(params, 'takeProfitPrice');
            isTakeProfitOrder = takeProfitPrice !== undefined;
        }
        const request = {
            'symbol': market['id'],
            'orderType': type,
        };
        const isMarketOrder = type === 'market';
        const isStopOrder = isStopLossOrder || isTakeProfitOrder;
        if (this.sum(isTriggerOrder, isStopLossOrder, isTakeProfitOrder) > 1) {
            throw new ExchangeError(this.id + ' createOrder() params can only contain one of triggerPrice, stopLossPrice, takeProfitPrice');
        }
        if ((type === 'limit') && (triggerPrice === undefined)) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        let clientOrderId = this.safeString2(params, 'client_oid', 'clientOrderId');
        if (clientOrderId === undefined) {
            const broker = this.safeValue(this.options, 'brokerId');
            if (broker !== undefined) {
                const brokerId = this.safeString(broker, market['type']);
                if (brokerId !== undefined) {
                    clientOrderId = brokerId + this.uuid22();
                }
            }
        }
        let method = this.getSupportedMapping(marketType, {
            'spot': 'privateSpotPostTradeOrders',
            'swap': 'privateMixPostOrderPlaceOrder',
        });
        const exchangeSpecificParam = this.safeString2(params, 'force', 'timeInForceValue');
        const postOnly = this.isPostOnly(isMarketOrder, exchangeSpecificParam === 'post_only', params);
        if (marketType === 'spot') {
            if (isStopOrder) {
                throw new InvalidOrder(this.id + ' createOrder() does not support stop orders on spot markets, only swap markets');
            }
            const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);
            if (createMarketBuyOrderRequiresPrice && isMarketOrder && (side === 'buy')) {
                if (price === undefined) {
                    throw new InvalidOrder(this.id + ' createOrder() requires price argument for market buy orders on spot markets to calculate the total amount to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option to false and pass in the cost to spend into the amount parameter');
                }
                else {
                    const amountString = this.numberToString(amount);
                    const priceString = this.numberToString(price);
                    const cost = this.parseNumber(Precise.stringMul(amountString, priceString));
                    request['quantity'] = this.priceToPrecision(symbol, cost);
                }
            }
            else {
                request['quantity'] = this.amountToPrecision(symbol, amount);
            }
            request['clientOrderId'] = clientOrderId;
            request['side'] = side;
            if (postOnly) {
                request['force'] = 'post_only';
            }
            else {
                request['force'] = 'gtc';
            }
        }
        else {
            request['clientOid'] = clientOrderId;
            let isCloseOrder = true;
            if (amount && amount > 0) {
                request['size'] = this.amountToPrecision(symbol, amount);
                isCloseOrder = false;
            }
            if (postOnly) {
                request['timeInForceValue'] = 'post_only';
            }
            if (isTriggerOrder || isStopOrder) {
                let triggerType = this.safeString2(params, 'triggerType', 'trigger', 'fill_price');
                if (triggerType === 'Mark' || triggerType === 'market_price') {
                    triggerType = 'market_price';
                }
                else {
                    triggerType = 'fill_price';
                }
                request['triggerType'] = triggerType;
            }
            if (isTriggerOrder) {
                request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
                if (price) {
                    request['executePrice'] = this.priceToPrecision(symbol, price);
                }
                method = 'privateMixPostPlanPlacePlan';
            }
            if (isStopOrder) {
                if (!isMarketOrder) {
                    throw new ExchangeError(this.id + ' createOrder() bitget stopLoss or takeProfit orders must be market orders');
                }
                if (isStopLossOrder) {
                    request['triggerPrice'] = this.priceToPrecision(symbol, stopLossPrice);
                    request['planType'] = 'loss_plan';
                }
                else if (isTakeProfitOrder) {
                    request['triggerPrice'] = this.priceToPrecision(symbol, takeProfitPrice);
                    request['planType'] = 'profit_plan';
                }
                request['holdSide'] = (side === 'buy') ? 'short' : 'long';
                if (isCloseOrder) {
                    // if position is in hedged mode this is correct
                    request['holdSide'] = (side === 'buy') ? 'short' : 'long';
                    // otherwise, this is correct
                    if (positionMode === 'oneway') {
                        request['holdSide'] = (side === 'buy') ? 'sell' : 'buy';
                    }
                    method = 'privateMixPostOrderPlaceTpslOrder';
                    request['symbol'] = market['info']['symbolName'].toLowerCase();
                    request['size'] = '';
                    request['productType'] = market['info']['quoteCoin'].toLowerCase() + '-futures';
                    if (isStopLossOrder) {
                        request['planType'] = 'pos_loss';
                    }
                    else if (isTakeProfitOrder) {
                        request['planType'] = 'pos_profit';
                    }
                }
                else {
                    method = 'privateMixPostPlanPlaceTPSL';
                }
            }
            else {
                if (positionMode === 'oneway') {
                    request['side'] = (side === 'buy') ? 'buy_single' : 'sell_single';
                    if (reduceOnly) {
                        request['reduceOnly'] = true;
                    }
                }
                else {
                    if (reduceOnly) {
                        request['side'] = (side === 'buy') ? 'close_short' : 'close_long';
                    }
                    else {
                        request['side'] = (side === 'buy') ? 'open_long' : 'open_short';
                    }
                }
                if (reduceOnly) {
                    request['cancelOrder'] = true;
                }
            }
            request['marginCoin'] = market['settleId'];
        }
        const omitted = this.omit(query, ['stopPrice', 'triggerType', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'positionMode', 'marginMode', 'reduceOnly', 'close']);
        const response = await this[method](this.extend(request, omitted));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 1645932209602,
        //         "data": {
        //             "orderId": "881669078313766912",
        //             "clientOrderId": "iauIBf#a45b595f96474d888d0ada"
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseOrder(data, market);
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitget#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument for spot orders');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        // const orderType = this.safeString (params, 'type');
        params = this.omit(params, ['type']);
        const [marketType, query] = this.handleMarketTypeAndParams('cancelOrder', market, params);
        let method = this.getSupportedMapping(marketType, {
            'spot': 'privateSpotPostTradeCancelOrder',
            'swap': 'privateMixPostOrderCancelOrder',
        });
        const stop = this.safeValue(params, 'stop');
        let planType = this.safeString(params, 'planType');
        const idComponents = id.split(':');
        const formattedId = idComponents[0];
        if (!planType && (idComponents.length > 1)) {
            planType = idComponents[1];
        }
        const request = {
            'symbol': market['id'],
            'orderId': formattedId,
        };
        if (stop || planType) {
            if (planType === undefined) {
                throw new ArgumentsRequired(this.id + ' cancelOrder() requires a planType parameter for stop orders, either normal_plan, profit_plan or loss_plan');
            }
            request['planType'] = planType;
            method = 'privateMixPostPlanCancelPlan';
            params = this.omit(params, ['stop', 'planType']);
        }
        if (marketType === 'swap') {
            request['marginCoin'] = market['settleId'];
        }
        const response = await this[method](this.extend(request, query));
        return this.parseOrder(response, market);
    }
    async cancelOrders(ids, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitget#cancelOrders
         * @description cancel multiple orders
         * @param {[string]} ids order ids
         * @param {string} symbol unified market symbol, default is undefined
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const type = this.safeString(params, 'type', market['type']);
        if (type === undefined) {
            throw new ArgumentsRequired(this.id + " cancelOrders() requires a type parameter (one of 'spot', 'swap').");
        }
        params = this.omit(params, 'type');
        const request = {};
        let method = undefined;
        if (type === 'spot') {
            method = 'apiPostOrderOrdersBatchcancel';
            request['method'] = 'batchcancel';
            const jsonIds = this.json(ids);
            const parts = jsonIds.split('"');
            request['order_ids'] = parts.join('');
        }
        else if (type === 'swap') {
            method = 'privateMixPostOrderCancelBatchOrders';
            request['symbol'] = market['id'];
            request['marginCoin'] = market['quote'];
            request['orderIds'] = ids;
        }
        const response = await this[method](this.extend(request, params));
        //
        //     spot
        //
        //     {
        //         "status": "ok",
        //         "data": {
        //             "success": [
        //                 "673451224205135872",
        //             ],
        //             "failed": [
        //                 {
        //                 "err-msg": "invalid record",
        //                 "order-id": "673451224205135873",
        //                 "err-code": "base record invalid"
        //                 }
        //             ]
        //         }
        //     }
        //
        //     swap
        //
        //     {
        //         "result":true,
        //         "symbol":"cmt_btcusdt",
        //         "order_ids":[
        //             "258414711",
        //             "478585558"
        //         ],
        //         "fail_infos":[
        //             {
        //                 "order_id":"258414711",
        //                 "err_code":"401",
        //                 "err_msg":""
        //             }
        //         ]
        //     }
        //
        return response;
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitget#cancelAllOrders
         * @description cancel all open orders
         * @see https://bitgetlimited.github.io/apidoc/en/mix/#cancel-all-order
         * @see https://bitgetlimited.github.io/apidoc/en/mix/#cancel-all-trigger-order-tpsl
         * @param {string|undefined} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @param {string} params.code marginCoin unified currency code
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        await this.loadMarkets();
        const market = undefined;
        const defaultSubType = this.safeString(this.options, 'defaultSubType');
        if (symbol !== undefined) {
            return await this.cancelAllOrdersForSymbol(symbol, params);
        }
        const productType = (defaultSubType === 'linear') ? 'UMCBL' : 'DMCBL';
        const [marketType, query] = this.handleMarketTypeAndParams('cancelAllOrders', market, params);
        if (marketType === 'spot') {
            throw new NotSupported(this.id + ' cancelAllOrders () does not support spot markets');
        }
        const request = {
            'productType': productType,
        };
        let method = undefined;
        const stop = this.safeValue(params, 'stop');
        const planType = this.safeString(params, 'planType');
        if (stop !== undefined || planType !== undefined) {
            if (planType === undefined) {
                throw new ArgumentsRequired(this.id + ' cancelOrder() requires a planType parameter for stop orders, either normal_plan, profit_plan, loss_plan, pos_profit, pos_loss, moving_plan or track_plan');
            }
            method = 'privateMixPostPlanCancelAllPlan';
            params = this.omit(params, ['stop']);
        }
        else {
            const code = this.safeString2(params, 'code', 'marginCoin');
            if (code === undefined) {
                throw new ArgumentsRequired(this.id + ' cancelAllOrders () requires a code argument [marginCoin] in the params');
            }
            const currency = this.currency(code);
            request['marginCoin'] = this.safeCurrencyCode(code, currency);
            method = 'privateMixPostOrderCancelAllOrders';
        }
        params = this.omit(query, ['code', 'marginCoin']);
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 1663312535998,
        //         "data": {
        //             "result": true,
        //             "order_ids": ["954564352813969409"],
        //             "fail_infos": [
        //                 {
        //                     "order_id": "",
        //                     "err_code": "",
        //                     "err_msg": ""
        //                 }
        //             ]
        //         }
        //     }
        //
        return response;
    }
    async cancelAllOrdersForSymbol(symbol, params = {}) {
        const market = this.market(symbol);
        const ordersForSymbol = await this.fetchOpenOrders(symbol);
        const orderIds = this.pluck(ordersForSymbol, 'id');
        const request = {
            'symbol': market['id'],
            'orderIds': orderIds,
            'marginCoin': market['settleId'],
        };
        return await this.privateMixPostOrderCancelBatchOrders(this.extend(request, params));
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOrder', market, params);
        const method = this.getSupportedMapping(marketType, {
            'spot': 'privateSpotPostTradeOrderInfo',
            'swap': 'privateMixGetOrderDetail',
        });
        const request = {
            'symbol': market['id'],
            'orderId': id,
        };
        const response = await this[method](this.extend(request, query));
        // spot
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: '1645926849436',
        //       data: [
        //         {
        //           accountId: '6394957606',
        //           symbol: 'BTCUSDT_SPBL',
        //           orderId: '881626139738935296',
        //           clientOrderId: '525890c8-767e-4cd6-8585-38160ed7bb5e',
        //           price: '38000.000000000000',
        //           quantity: '0.000700000000',
        //           orderType: 'limit',
        //           side: 'buy',
        //           status: 'new',
        //           fillPrice: '0.000000000000',
        //           fillQuantity: '0.000000000000',
        //           fillTotalAmount: '0.000000000000',
        //           cTime: '1645921972212'
        //         }
        //       ]
        //     }
        //
        // swap
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: '1645926587877',
        //       data: {
        //         symbol: 'BTCUSDT_UMCBL',
        //         size: '0.001',
        //         orderId: '881640729145409536',
        //         clientOid: '881640729204129792',
        //         filledQty: '0.001',
        //         fee: '0E-8',
        //         price: null,
        //         priceAvg: '38429.50',
        //         state: 'filled',
        //         side: 'open_long',
        //         timeInForce: 'normal',
        //         totalProfits: '0E-8',
        //         posSide: 'long',
        //         marginCoin: 'USDT',
        //         filledAmount: '38.4295',
        //         orderType: 'market',
        //         cTime: '1645925450611',
        //         uTime: '1645925450746'
        //       }
        //     }
        //
        const data = this.safeValue(response, 'data');
        const first = this.safeValue(data, 0, data);
        return this.parseOrder(first, market);
    }
    async fetchOpenOrders2(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchOpenOrders
         * @description fetch all unfilled currently open orders
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch open orders for
         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
        const request = {
            'symbol': market['id'],
        };
        let method = this.getSupportedMapping(marketType, {
            'spot': 'privateSpotPostTradeOpenOrders',
            'swap': 'privateMixGetOrderCurrent',
        });
        const stop = this.safeValue(params, 'stop');
        if (stop) {
            method = 'privateMixGetPlanCurrentPlan';
            params = this.omit(params, 'stop');
        }
        const response = await this[method](this.extend(request, query));
        //
        //  spot
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645921640193,
        //       data: [
        //         {
        //           accountId: '6394957606',
        //           symbol: 'BTCUSDT_SPBL',
        //           orderId: '881623995442958336',
        //           clientOrderId: '135335e9-b054-4e43-b00a-499f11d3a5cc',
        //           price: '39000.000000000000',
        //           quantity: '0.000700000000',
        //           orderType: 'limit',
        //           side: 'buy',
        //           status: 'new',
        //           fillPrice: '0.000000000000',
        //           fillQuantity: '0.000000000000',
        //           fillTotalAmount: '0.000000000000',
        //           cTime: '1645921460972'
        //         }
        //       ]
        //     }
        //
        // swap
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645922324630,
        //       data: [
        //         {
        //           symbol: 'BTCUSDT_UMCBL',
        //           size: 0.001,
        //           orderId: '881627074081226752',
        //           clientOid: '881627074160918528',
        //           filledQty: 0,
        //           fee: 0,
        //           price: 38000,
        //           state: 'new',
        //           side: 'open_long',
        //           timeInForce: 'normal',
        //           totalProfits: 0,
        //           posSide: 'long',
        //           marginCoin: 'USDT',
        //           filledAmount: 0,
        //           orderType: 'limit',
        //           cTime: '1645922194995',
        //           uTime: '1645922194995'
        //         }
        //       ]
        //     }
        //
        // stop
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 1652745815697,
        //         "data": [
        //             {
        //                 "orderId": "910246821491617792",
        //                 "symbol": "BTCUSDT_UMCBL",
        //                 "marginCoin": "USDT",
        //                 "size": "16",
        //                 "executePrice": "20000",
        //                 "triggerPrice": "24000",
        //                 "status": "not_trigger",
        //                 "orderType": "limit",
        //                 "planType": "normal_plan",
        //                 "side": "open_long",
        //                 "triggerType": "market_price",
        //                 "presetTakeProfitPrice": "0",
        //                 "presetTakeLossPrice": "0",
        //                 "cTime": "1652745674488"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const [marketType, query] = this.handleMarketTypeAndParams('fetchClosedOrders', market, params);
        const request = {
            'symbol': market['id'],
        };
        const method = this.getSupportedMapping(marketType, {
            'spot': 'privateSpotPostTradeHistory',
            'swap': 'privateMixGetOrderHistory',
        });
        if (marketType === 'swap') {
            if (limit === undefined) {
                limit = 100;
            }
            request['pageSize'] = limit;
            if (since === undefined) {
                since = 0;
            }
            request['startTime'] = since;
            request['endTime'] = this.milliseconds();
        }
        const response = await this[method](this.extend(request, query));
        //
        //  spot
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645925335553,
        //       data: [
        //         {
        //           accountId: '6394957606',
        //           symbol: 'BTCUSDT_SPBL',
        //           orderId: '881623995442958336',
        //           clientOrderId: '135335e9-b054-4e43-b00a-499f11d3a5cc',
        //           price: '39000.000000000000',
        //           quantity: '0.000700000000',
        //           orderType: 'limit',
        //           side: 'buy',
        //           status: 'full_fill',
        //           fillPrice: '39000.000000000000',
        //           fillQuantity: '0.000700000000',
        //           fillTotalAmount: '27.300000000000',
        //           cTime: '1645921460972'
        //         }
        //       ]
        //     }
        //
        // swap
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645925688701,
        //       data: {
        //         nextFlag: false,
        //         endId: '881640729145409536',
        //         orderList: [
        //           {
        //             symbol: 'BTCUSDT_UMCBL',
        //             size: 0.001,
        //             orderId: '881640729145409536',
        //             clientOid: '881640729204129792',
        //             filledQty: 0.001,
        //             fee: 0,
        //             price: null,
        //             priceAvg: 38429.5,
        //             state: 'filled',
        //             side: 'open_long',
        //             timeInForce: 'normal',
        //             totalProfits: 0,
        //             posSide: 'long',
        //             marginCoin: 'USDT',
        //             filledAmount: 38.4295,
        //             orderType: 'market',
        //             cTime: '1645925450611',
        //             uTime: '1645925450746'
        //           }
        //         ]
        //       }
        //     }
        //
        const data = this.safeValue(response, 'data');
        const orderList = this.safeValue(data, 'orderList', data);
        return this.parseOrders(orderList, market, since, limit);
    }
    async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchLedger
         * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
         * @param {string|undefined} code unified currency code, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
         * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/en/latest/manual.html#ledger-structure}
         */
        await this.loadMarkets();
        let currency = undefined;
        const request = {};
        if (code !== undefined) {
            currency = this.currency(code);
            request['coinId'] = currency['id'];
        }
        const response = await this.privateSpotPostAccountBills(this.extend(request, params));
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: '1645929886887',
        //       data: [
        //         {
        //           billId: '881626974170554368',
        //           coinId: '2',
        //           coinName: 'USDT',
        //           groupType: 'transfer',
        //           bizType: 'transfer-out',
        //           quantity: '-10.00000000',
        //           balance: '73.36005300',
        //           fees: '0.00000000',
        //           cTime: '1645922171146'
        //         }
        //       ]
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseLedger(data, currency, since, limit);
    }
    parseLedgerEntry(item, currency = undefined) {
        //
        //     {
        //       billId: '881626974170554368',
        //       coinId: '2',
        //       coinName: 'USDT',
        //       groupType: 'transfer',
        //       bizType: 'transfer-out',
        //       quantity: '-10.00000000',
        //       balance: '73.36005300',
        //       fees: '0.00000000',
        //       cTime: '1645922171146'
        //     }
        //
        const id = this.safeString(item, 'billId');
        const currencyId = this.safeString(item, 'coinId');
        const code = this.safeCurrencyCode(currencyId);
        const amount = this.parseNumber(Precise.stringAbs(this.safeString(item, 'quantity')));
        const timestamp = this.safeInteger(item, 'cTime');
        const bizType = this.safeString(item, 'bizType');
        let direction = undefined;
        if (bizType !== undefined && bizType.indexOf('-') >= 0) {
            const parts = bizType.split('-');
            direction = parts[1];
        }
        const type = this.safeString(item, 'groupType');
        const fee = this.safeNumber(item, 'fees');
        const after = this.safeNumber(item, 'balance');
        return {
            'info': item,
            'id': id,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'direction': direction,
            'account': undefined,
            'referenceId': undefined,
            'referenceAccount': undefined,
            'type': type,
            'currency': code,
            'amount': amount,
            'before': undefined,
            'after': after,
            'status': undefined,
            'fee': fee,
        };
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');
        }
        this.checkRequiredSymbol('fetchMyTrades', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'pageSize': 100,
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        request['endTime'] = this.milliseconds().toString();
        const response = await this.privateMixGetOrderHistory(this.extend(request, params));
        // {
        //     "symbol": "SOLUSDT_UMCBL",
        //     "size": 1,
        //     "orderId": "963544804144852112",
        //     "clientOid": "963544804144852113",
        //     "filledQty": 1,
        //     "fee": -0.00629204,
        //     "price": 31.4602,
        //     "priceAvg": 31.4602,
        //     "state": "filled",
        //     "side": "close_short",
        //     "timeInForce": "normal",
        //     "totalProfits": 0.00760000,
        //     "posSide": "short",
        //     "marginCoin": "USDT",
        //     "filledAmount": 31.4602,
        //     "orderType": "limit",
        //     "leverage": "5",
        //     "marginMode": "crossed",
        //     "reduceOnly": false,
        //     "enterPointSource": "WEB",
        //     "tradeSide": "open_long",
        //     "holdMode": "double_hold",
        //     "cTime": "1665452903781",
        //     "uTime": "1665452917467"
        // }
        const data = this.safeValue(response, 'data');
        const orderList = this.safeValue(data, 'orderList', []);
        return this.parseTrades(orderList, market, since, limit);
    }
    async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchOrderTrades
         * @description fetch all the trades made from a single order
         * @param {string} id order id
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades to retrieve
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOrderTrades() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOrderTrades', market, params);
        const method = this.getSupportedMapping(marketType, {
            'spot': 'privateSpotPostTradeFills',
            'swap': 'privateMixGetOrderFills',
        });
        const request = {
            'symbol': market['id'],
            'orderId': id,
        };
        const response = await this[method](this.extend(request, query));
        // spot
        //
        // swap
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: 1645927862710,
        //       data: [
        //         {
        //           tradeId: '881640729552281602',
        //           symbol: 'BTCUSDT_UMCBL',
        //           orderId: '881640729145409536',
        //           price: '38429.50',
        //           sizeQty: '0.001',
        //           fee: '0',
        //           side: 'open_long',
        //           fillAmount: '38.4295',
        //           profit: '0',
        //           cTime: '1645925450694'
        //         }
        //       ]
        //     }
        //
        const data = this.safeValue(response, 'data');
        return await this.parseTrades(data, market, since, limit);
    }
    async fetchPosition(symbol, params = {}) {
        /**
         * @method
         * @name bitget#fetchPosition
         * @description fetch data on a single open contract trade position
         * @param {string} symbol unified market symbol of the market the position is held in, default is undefined
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'marginCoin': market['settleId'],
        };
        const response = await this.privateMixGetPositionSinglePosition(this.extend(request, params));
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: '1645933957584',
        //       data: [
        //         {
        //           marginCoin: 'USDT',
        //           symbol: 'BTCUSDT_UMCBL',
        //           holdSide: 'long',
        //           openDelegateCount: '0',
        //           margin: '1.921475',
        //           available: '0.001',
        //           locked: '0',
        //           total: '0.001',
        //           leverage: '20',
        //           achievedProfits: '0',
        //           averageOpenPrice: '38429.5',
        //           marginMode: 'fixed',
        //           holdMode: 'double_hold',
        //           unrealizedPL: '0.1634',
        //           liquidationPrice: '0',
        //           keepMarginRate: '0.004',
        //           cTime: '1645922194988'
        //         }
        //       ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parsePosition(data[0], market);
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchPositions
         * @description fetch all open positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
         */
        await this.loadMarkets();
        const defaultSubType = this.safeString(this.options, 'defaultSubType');
        const request = {
            'productType': (defaultSubType === 'linear') ? 'UMCBL' : 'DMCBL',
        };
        const response = await this.privateMixGetPositionAllPosition(this.extend(request, params));
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: '1645933905060',
        //       data: [
        //         {
        //           marginCoin: 'USDT',
        //           symbol: 'BTCUSDT_UMCBL',
        //           holdSide: 'long',
        //           openDelegateCount: '0',
        //           margin: '1.921475',
        //           available: '0.001',
        //           locked: '0',
        //           total: '0.001',
        //           leverage: '20',
        //           achievedProfits: '0',
        //           averageOpenPrice: '38429.5',
        //           marginMode: 'fixed',
        //           holdMode: 'double_hold',
        //           unrealizedPL: '0.14869',
        //           liquidationPrice: '0',
        //           keepMarginRate: '0.004',
        //           cTime: '1645922194988'
        //         }
        //       ]
        //     }
        //
        const position = this.safeValue(response, 'data', []);
        const result = [];
        for (let i = 0; i < position.length; i++) {
            result.push(this.parsePosition(position[i]));
        }
        symbols = this.marketSymbols(symbols);
        return this.filterByArray(result, 'symbol', symbols, false);
    }
    parsePosition(position, market = undefined) {
        //
        //     {
        //         marginCoin: 'USDT',
        //         symbol: 'BTCUSDT_UMCBL',
        //         holdSide: 'long',
        //         openDelegateCount: '0',
        //         margin: '1.921475',
        //         available: '0.001',
        //         locked: '0',
        //         total: '0.001',
        //         leverage: '20',
        //         achievedProfits: '0',
        //         averageOpenPrice: '38429.5',
        //         marginMode: 'fixed',
        //         holdMode: 'double_hold',
        //         unrealizedPL: '0.14869',
        //         liquidationPrice: '0',
        //         keepMarginRate: '0.004',
        //         cTime: '1645922194988'
        //     }
        //
        const marketId = this.safeString(position, 'symbol');
        const instType = this.getSubTypeFromMarketId(marketId);
        market = this.safeMarket(marketId, market);
        const timestamp = this.safeInteger(position, 'cTime');
        let marginMode = this.safeString(position, 'marginMode');
        if (marginMode === 'fixed') {
            marginMode = 'isolated';
        }
        else if (marginMode === 'crossed') {
            marginMode = 'cross';
        }
        const hedged = this.safeString(position, 'holdMode');
        let isHedged = false;
        if (hedged === 'double_hold') {
            isHedged = true;
        }
        else if (hedged === 'single_hold') {
            isHedged = false;
        }
        const side = this.safeString(position, 'holdSide');
        let contracts = this.safeFloat2(position, 'total', 'openDelegateCount');
        let liquidation = this.safeNumber2(position, 'liquidationPrice', 'liqPx');
        if (contracts === 0) {
            contracts = undefined;
        }
        else if (side === 'short' && contracts > 0) {
            contracts = -1 * contracts;
        }
        if (liquidation === 0) {
            liquidation = undefined;
        }
        const initialMargin = this.safeNumber(position, 'margin');
        const markPrice = this.safeNumber(position, 'markPrice');
        return {
            'info': position,
            'id': market['symbol'] + ':' + side,
            'instType': instType,
            'symbol': market['symbol'],
            'notional': undefined,
            'marginMode': marginMode,
            'liquidationPrice': liquidation,
            'entryPrice': this.safeNumber(position, 'averageOpenPrice'),
            'unrealizedPnl': this.safeNumber(position, 'upl'),
            'realizedPnl': this.safeNumber(position, 'achievedProfits'),
            'percentage': undefined,
            'contracts': contracts,
            'contractSize': this.safeNumber(position, 'total'),
            'markPrice': markPrice,
            'side': side,
            'hedged': isHedged,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'maintenanceMargin': undefined,
            'maintenanceMarginPercentage': this.safeNumber(position, 'keepMarginRate'),
            'collateral': this.safeNumber(position, 'margin'),
            'initialMargin': initialMargin,
            'initialMarginPercentage': undefined,
            'leverage': this.safeNumber(position, 'leverage'),
            'marginRatio': undefined,
        };
    }
    async fetchPositionsHistory(symbol = undefined, since = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchPositions
         * @description fetch all open positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
         */
        await this.loadMarkets();
        const defaultSubType = this.safeString(this.options, 'defaultSubType');
        const request = {
            'productType': (defaultSubType === 'linear') ? 'UMCBL' : 'DMCBL',
            'startTime': since,
            'endTime': this.milliseconds(),
            'pageSize': 99,
        };
        if (symbol !== undefined) {
            request['symbol'] = symbol;
        }
        const response = await this.privateMixGetPositionHistoryPosition(this.extend(request, params));
        //
        //     {
        //       code: '00000',
        //       msg: 'success',
        //       requestTime: '1645933905060',
        //       data: [
        //         {
        //           marginCoin: 'USDT',
        //           symbol: 'BTCUSDT_UMCBL',
        //           holdSide: 'long',
        //           openDelegateCount: '0',
        //           margin: '1.921475',
        //           available: '0.001',
        //           locked: '0',
        //           total: '0.001',
        //           leverage: '20',
        //           achievedProfits: '0',
        //           averageOpenPrice: '38429.5',
        //           marginMode: 'fixed',
        //           holdMode: 'double_hold',
        //           unrealizedPL: '0.14869',
        //           liquidationPrice: '0',
        //           keepMarginRate: '0.004',
        //           cTime: '1645922194988'
        //         }
        //       ]
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        const position = this.safeValue(data, 'list', []);
        const result = [];
        for (let i = 0; i < position.length; i++) {
            result.push(this.parseHistoryPosition(position[i]));
        }
        return result;
    }
    parseHistoryPosition(position, market = undefined) {
        // {
        //   "code": "00000",
        //   "msg": "success",
        //   "requestTime": 0,
        //   "data": {
        //     "list": [
        //       {
        //         "symbol": "ETHUSDT_UMCBL",
        //         "marginCoin": "USDT",
        //         "holdSide": "short",
        //         "openAvgPrice": "1206.7",
        //         "closeAvgPrice": "1206.8",
        //         "marginMode": "fixed",
        //         "openTotalPos": "1.15",
        //         "closeTotalPos": "1.15",
        //         "pnl": "-0.11",
        //         "netProfit": "-1.780315",
        //         "totalFunding": "0",
        //         "openFee": "-0.83",
        //         "closeFee": "-0.83",
        //         "ctime": "1689300233897",
        //         "utime": "1689300238205"
        //       }
        //     ],
        //     "endId": "1062308959580516352"
        //   }
        // }
        const marketId = this.safeString(position, 'symbol');
        const id = this.safeString(position, 'ctime');
        const side = this.safeString(position, 'holdSide');
        const entryPrice = this.safeString(position, 'openAvgPrice');
        const exitPrice = this.safeString(position, 'closeAvgPrice');
        const closeFee = this.safeString(position, 'closeFee');
        const closeTotalPos = this.safeString(position, 'closeTotalPos');
        const convertedRealizedPnl = this.safeString(position, 'pnl');
        const openTimestamp = this.safeInteger(position, 'ctime');
        const closeTimestamp = this.safeInteger(position, 'utime');
        const duration = closeTimestamp - openTimestamp;
        const marginCoin = this.safeString(position, 'marginCoin');
        return {
            'id': id,
            'duration': duration,
            'info': position,
            'side': side,
            'convertedMaxSize': closeTotalPos,
            'convertedMarginCurrency': marginCoin,
            'symbol': marketId,
            'entryPrice': entryPrice,
            'exitPrice': exitPrice,
            'convertedRealizedPnl': convertedRealizedPnl,
            'convertedFees': closeFee,
            'openTimestamp': openTimestamp,
            'closeTimestamp': closeTimestamp,
        };
    }
    async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#fetchFundingRateHistory
         * @description fetches historical funding rate prices
         * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
         * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
         * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchFundingRateHistory() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'pageSize': limit, // default 20
            // 'pageNo': 1,
            // 'nextPage': false,
        };
        if (limit !== undefined) {
            request['pageSize'] = limit;
        }
        const response = await this.publicMixGetMarketHistoryFundRate(this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 1652406728393,
        //         "data": [
        //             {
        //                 "symbol": "BTCUSDT",
        //                 "fundingRate": "-0.0003",
        //                 "settleTime": "1652396400000"
        //             },
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const rates = [];
        for (let i = 0; i < data.length; i++) {
            const entry = data[i];
            const marketId = this.safeString(entry, 'symbol');
            const symbol = this.safeSymbol(marketId, market);
            const timestamp = this.safeInteger(entry, 'settleTime');
            rates.push({
                'info': entry,
                'symbol': symbol,
                'fundingRate': this.safeString(entry, 'fundingRate'),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
            });
        }
        const sorted = this.sortBy(rates, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, market['symbol'], since, limit);
    }
    async fetchFundingRate(symbol, params = {}) {
        /**
         * @method
         * @name bitget#fetchFundingRate
         * @description fetch the current funding rate
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/en/latest/manual.html#funding-rate-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['swap']) {
            throw new BadSymbol(this.id + ' fetchFundingRate() supports swap contracts only');
        }
        const request = {
            'symbol': market['id'],
        };
        const response = await this.publicMixGetMarketCurrentFundRate(this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 1652401684275,
        //         "data": {
        //             "symbol": "BTCUSDT_UMCBL",
        //             "fundingRate": "-0.000182"
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseFundingRate(data, market);
    }
    parseFundingRate(contract, market = undefined) {
        //
        //     {
        //         "symbol": "BTCUSDT_UMCBL",
        //         "fundingRate": "-0.000182"
        //     }
        //
        const marketId = this.safeString(contract, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        return {
            'info': contract,
            'symbol': symbol,
            'markPrice': undefined,
            'indexPrice': undefined,
            'interestRate': undefined,
            'estimatedSettlePrice': undefined,
            'timestamp': undefined,
            'datetime': undefined,
            'fundingRate': this.safeNumber(contract, 'fundingRate'),
            'fundingTimestamp': undefined,
            'fundingDatetime': undefined,
            'nextFundingRate': undefined,
            'nextFundingTimestamp': undefined,
            'nextFundingDatetime': undefined,
            'previousFundingRate': undefined,
            'previousFundingTimestamp': undefined,
            'previousFundingDatetime': undefined,
        };
    }
    async modifyMarginHelper(symbol, amount, type, params = {}) {
        await this.loadMarkets();
        const holdSide = this.safeString(params, 'holdSide');
        const market = this.market(symbol);
        const marginCoin = (market['linear']) ? market['quote'] : market['base'];
        const request = {
            'symbol': market['id'],
            'marginCoin': marginCoin,
            'amount': this.amountToPrecision(symbol, amount),
            'holdSide': holdSide, // long or short
        };
        params = this.omit(params, 'holdSide');
        const response = await this.privateMixPostAccountSetMargin(this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 1652483636792,
        //         "data": {
        //             "result": true
        //         }
        //     }
        //
        return this.extend(this.parseMarginModification(response, market), {
            'amount': this.parseNumber(amount),
            'type': type,
        });
    }
    parseMarginModification(data, market = undefined) {
        const errorCode = this.safeString(data, 'code');
        const status = (errorCode === '00000') ? 'ok' : 'failed';
        const code = (market['linear']) ? market['quote'] : market['base'];
        return {
            'info': data,
            'type': undefined,
            'amount': undefined,
            'code': code,
            'symbol': market['symbol'],
            'status': status,
        };
    }
    async reduceMargin(symbol, amount, params = {}) {
        /**
         * @method
         * @name bitget#reduceMargin
         * @description remove margin from a position
         * @param {string} symbol unified market symbol
         * @param {float} amount the amount of margin to remove
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/en/latest/manual.html#reduce-margin-structure}
         */
        if (amount > 0) {
            throw new BadRequest(this.id + ' reduceMargin() amount parameter must be a negative value');
        }
        const holdSide = this.safeString(params, 'holdSide');
        if (holdSide === undefined) {
            throw new ArgumentsRequired(this.id + ' reduceMargin() requires a holdSide parameter, either long or short');
        }
        return await this.modifyMarginHelper(symbol, amount, 'reduce', params);
    }
    async addMargin(symbol, amount, params = {}) {
        /**
         * @method
         * @name bitget#addMargin
         * @description add margin
         * @param {string} symbol unified market symbol
         * @param {float} amount amount of margin to add
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/en/latest/manual.html#add-margin-structure}
         */
        const holdSide = this.safeString(params, 'holdSide');
        if (holdSide === undefined) {
            throw new ArgumentsRequired(this.id + ' addMargin() requires a holdSide parameter, either long or short');
        }
        return await this.modifyMarginHelper(symbol, amount, 'add', params);
    }
    async fetchLeverage(symbol, params = {}) {
        /**
         * @method
         * @name bitget#fetchLeverage
         * @description fetch the set leverage for a market
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} a [leverage structure]{@link https://docs.ccxt.com/en/latest/manual.html#leverage-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.publicMixGetMarketSymbolLeverage(this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 1652347673483,
        //         "data": {
        //             "symbol": "BTCUSDT_UMCBL",
        //             "minLeverage": "1",
        //             "maxLeverage": "125"
        //         }
        //     }
        //
        return response;
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitget#setLeverage
         * @description set the level of leverage for a market
         * @param {float} leverage the rate of leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
        }
        const buyLeverage = this.safeNumber(params, 'buyLeverage', leverage);
        const sellLeverage = this.safeNumber(params, 'sellLeverage', leverage);
        await this.loadMarkets();
        const market = this.market(symbol);
        const marginMode = this.safeString(params, 'marginMode');
        params = this.omit(params, ['marginMode', 'positionMode']);
        if (marginMode === 'isolated') {
            let promises = [];
            const request = {
                'symbol': market['id'],
                'marginCoin': market['settleId'],
            };
            if (buyLeverage !== undefined) {
                request['leverage'] = buyLeverage;
                request['holdSide'] = 'long';
                promises.push(this.privateMixPostAccountSetLeverage(this.extend(request, params)));
            }
            if (sellLeverage !== undefined) {
                request['leverage'] = sellLeverage;
                request['holdSide'] = 'short';
                promises.push(this.privateMixPostAccountSetLeverage(this.extend(request, params)));
            }
            promises = await Promise.all(promises);
            if (promises.length === 1) {
                return promises[0];
            }
            else {
                return promises;
            }
        }
        else {
            const request = {
                'symbol': market['id'],
                'marginCoin': market['settleId'],
                'leverage': buyLeverage,
                // 'holdSide': 'long',
            };
            return await this.privateMixPostAccountSetLeverage(this.extend(request, params));
        }
    }
    async switchIsolated(symbol, isIsolated, buyLeverage, sellLeverage, params = {}) {
        if (isIsolated) {
            await this.setMarginMode('fixed', symbol, params);
        }
        else {
            await this.setMarginMode('crossed', symbol, params);
        }
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitget#setMarginMode
         * @description set margin mode to 'cross' or 'isolated'
         * @param {string} marginMode 'cross' or 'isolated'
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitget api endpoint
         * @returns {object} response from the exchange
         */
        marginMode = marginMode.toLowerCase();
        if (marginMode === 'isolated') {
            marginMode = 'fixed';
        }
        else if (marginMode === 'cross') {
            marginMode = 'crossed';
        }
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
        }
        if ((marginMode !== 'fixed') && (marginMode !== 'crossed')) {
            throw new ArgumentsRequired(this.id + ' setMarginMode() marginMode must be "fixed" or "crossed" (or "isolated" or "cross")');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'marginCoin': market['settleId'],
            'marginMode': marginMode,
        };
        params = this.omit(params, ['leverage', 'buyLeverage', 'sellLeverage']);
        try {
            return await this.privateMixPostAccountSetMarginMode(this.extend(request, params));
        }
        catch (e) {
            // bitget {"code":"45117","msg":"当前持有仓位或委托，无法调整保证金模式","requestTime":1671924219093,"data":null}
            if (e instanceof ExchangeError) {
                if (e.toString().indexOf('45117') >= 0) {
                    throw new ExchangeError(this.id + ' ' + this.json({ 'code': 45117, 'msg': 'Cannot switch Margin Type for market with open positions or orders.' }));
                }
            }
            throw e;
        }
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'marginCoin': market['settleId'],
        };
        const response = await this.privateMixGetAccountAccount(this.extend(request, params));
        const data = this.safeValue(response, 'data');
        return this.parseAccountConfiguration(data, market);
    }
    parseAccountConfiguration(data, market) {
        // {
        //     "marginCoin":"USDT",
        //   "locked":0,
        //   "available":13168.86110692,
        //   "crossMaxAvailable":13168.86110692,
        //   "fixedMaxAvailable":13168.86110692,
        //   "maxTransferOut":13168.86110692,
        //   "equity":13178.86110692,
        //   "usdtEquity":13178.861106922,
        //   "btcEquity":0.344746495477,
        //   "crossRiskRate":0,
        //   "crossMarginLeverage":20,
        //   "fixedLongLeverage":20,
        //   "fixedShortLeverage":20,
        //   "marginMode":"crossed",
        //   "holdMode":"double_hold"
        // }
        const marginMode = this.safeString(data, 'marginMode');
        const isIsolated = (marginMode === 'fixed');
        let leverage = this.safeFloat(data, 'crossMarginLeverage');
        const buyLeverage = this.safeFloat(data, 'fixedLongLeverage');
        const sellLeverage = this.safeFloat(data, 'fixedShortLeverage');
        const marginCoin = this.safeString(data, 'marginCoin');
        const holdMode = this.safeString(data, 'holdMode');
        let positionMode = 'hedged';
        if (holdMode === 'single_hold') {
            positionMode = 'oneway';
            if (isIsolated) {
                leverage = buyLeverage;
            }
        }
        const accountConfig = {
            'info': data,
            'markets': {},
            'positionMode': positionMode,
            'marginMode': isIsolated ? 'isolated' : 'cross',
        };
        const leverageConfigs = accountConfig['markets'];
        leverageConfigs[market['symbol']] = {
            'marginMode': isIsolated ? 'isolated' : 'cross',
            'isIsolated': isIsolated,
            'leverage': leverage,
            'buyLeverage': isIsolated ? buyLeverage : leverage,
            'sellLeverage': isIsolated ? sellLeverage : leverage,
            'marginCoin': marginCoin,
            'positionMode': positionMode,
        };
        return accountConfig;
    }
    async fetchOpenInterest(symbol, params = {}) {
        /**
         * @method
         * @name bitget#fetchOpenInterest
         * @description Retrieves the open interest of a currency
         * @see https://bitgetlimited.github.io/apidoc/en/mix/#get-open-interest
         * @param {string} symbol Unified CCXT market symbol
         * @param {object} params exchange specific parameters
         * @returns {object} an open interest structure{@link https://docs.ccxt.com/en/latest/manual.html#interest-history-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['contract']) {
            throw new BadRequest(this.id + ' fetchOpenInterest() supports contract markets only');
        }
        const request = {
            'symbol': market['id'],
        };
        const response = await this.publicMixGetMarketOpenInterest(this.extend(request, params));
        //
        //     {
        //         "code": "00000",
        //         "msg": "success",
        //         "requestTime": 0,
        //         "data": {
        //             "symbol": "BTCUSDT_UMCBL",
        //             "amount": "130818.967",
        //             "timestamp": "1663399151127"
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseOpenInterest(data, market);
    }
    async transfer(code, amount, fromAccount, toAccount, params = {}) {
        /**
         * @method
         * @name bitget#transfer
         * @see https://bitgetlimited.github.io/apidoc/en/spot/#transfer
         * @description transfer currency internally between wallets on the same account
         * @param {string} code unified currency code
         * @param {float} amount amount to transfer
         * @param {string} fromAccount account to transfer from
         * @param {string} toAccount account to transfer to
         * @param {object} params extra parameters specific to the bitget api endpoint
         *
         * EXCHANGE SPECIFIC PARAMS
         * @param {string} params.clientOid custom id
         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/en/latest/manual.html#transfer-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const fromSwap = fromAccount === 'swap';
        const toSwap = toAccount === 'swap';
        const usdt = currency['code'] === 'USDT';
        if (fromSwap) {
            fromAccount = usdt ? 'mix_usdt' : 'mix_usd';
        }
        else if (toSwap) {
            toAccount = usdt ? 'mix_usdt' : 'mix_usd';
        }
        const request = {
            'fromType': fromAccount,
            'toType': toAccount,
            'amount': amount,
            'coin': currency['info']['coinName'],
        };
        const response = await this.privateSpotPostWalletTransfer(this.extend(request, params));
        //
        //    {
        //        "code": "00000",
        //        "msg": "success",
        //        "requestTime": 1668119107154,
        //        "data": "SUCCESS"
        //    }
        //
        return this.parseTransfer(response, currency);
    }
    parseTransfer(transfer, currency = undefined) {
        //
        //    {
        //        "code": "00000",
        //        "msg": "success",
        //        "requestTime": 1668119107154,
        //        "data": "SUCCESS"
        //    }
        //
        const timestamp = this.safeInteger(transfer, 'requestTime');
        const msg = this.safeString(transfer, 'msg');
        return {
            'info': transfer,
            'id': this.safeString(transfer, 'id'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'currency': this.safeString(currency, 'code'),
            'amount': this.safeNumber(transfer, 'size'),
            'fromAccount': undefined,
            'toAccount': undefined,
            'status': (msg === 'success') ? 'ok' : msg,
        };
    }
    parseTransferStatus(status) {
        const statuses = {
            'success': 'ok',
        };
        return this.safeString(statuses, status, status);
    }
    parseOpenInterest(interest, market = undefined) {
        //
        //     {
        //         "symbol": "BTCUSDT_UMCBL",
        //         "amount": "130818.967",
        //         "timestamp": "1663399151127"
        //     }
        //
        const timestamp = this.safeInteger(interest, 'timestamp');
        const id = this.safeString(interest, 'symbol');
        market = this.safeMarket(id, market);
        const amount = this.safeNumber(interest, 'amount');
        return {
            'symbol': this.safeSymbol(id),
            'baseVolume': amount,
            'quoteVolume': undefined,
            'openInterestAmount': amount,
            'openInterestValue': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': interest,
        };
    }
    handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (!response) {
            return; // fallback to default error handler
        }
        //
        // spot
        //
        //     {"status":"fail","err_code":"01001","err_msg":"系统异常，请稍后重试"}
        //     {"status":"error","ts":1595594160149,"err_code":"invalid-parameter","err_msg":"invalid size, valid range: [1,2000]"}
        //     {"status":"error","ts":1595684716042,"err_code":"invalid-parameter","err_msg":"illegal sign invalid"}
        //     {"status":"error","ts":1595700216275,"err_code":"bad-request","err_msg":"your balance is low!"}
        //     {"status":"error","ts":1595700344504,"err_code":"invalid-parameter","err_msg":"invalid type"}
        //     {"status":"error","ts":1595703343035,"err_code":"bad-request","err_msg":"order cancel fail"}
        //     {"status":"error","ts":1595704360508,"err_code":"invalid-parameter","err_msg":"accesskey not null"}
        //     {"status":"error","ts":1595704490084,"err_code":"invalid-parameter","err_msg":"permissions not right"}
        //     {"status":"error","ts":1595711862763,"err_code":"system exception","err_msg":"system exception"}
        //     {"status":"error","ts":1595730308979,"err_code":"bad-request","err_msg":"20003"}
        //
        // swap
        //
        //     {"code":"40015","msg":"","requestTime":1595698564931,"data":null}
        //     {"code":"40017","msg":"Order id must not be blank","requestTime":1595702477835,"data":null}
        //     {"code":"40017","msg":"Order Type must not be blank","requestTime":1595698516162,"data":null}
        //     {"code":"40301","msg":"","requestTime":1595667662503,"data":null}
        //     {"code":"40017","msg":"Contract code must not be blank","requestTime":1595703151651,"data":null}
        //     {"code":"40108","msg":"","requestTime":1595885064600,"data":null}
        //     {"order_id":"513468410013679613","client_oid":null,"symbol":"ethusd","result":false,"err_code":"order_no_exist_error","err_msg":"订单不存在！"}
        //
        const message = this.safeString(response, 'err_msg');
        const errorCode = this.safeString2(response, 'code', 'err_code');
        const feedback = this.id + ' ' + body;
        const nonEmptyMessage = ((message !== undefined) && (message !== ''));
        if (nonEmptyMessage) {
            this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);
            this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
        }
        const nonZeroErrorCode = (errorCode !== undefined) && (errorCode !== '00000');
        if (nonZeroErrorCode) {
            this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        }
        if (nonZeroErrorCode || nonEmptyMessage) {
            throw new ExchangeError(feedback); // unknown message
        }
    }
    sign(path, api = [], method = 'GET', params = {}, headers = undefined, body = undefined) {
        const signed = api[0] === 'private';
        const endpoint = api[1];
        let pathPart = '/api/mix/v1';
        if (path === 'order/place-tpsl-order') {
            pathPart = '/api/v2/mix';
        }
        if (endpoint === 'spot') {
            pathPart = '/api/spot/v1';
        }
        const request = '/' + this.implodeParams(path, params);
        const payload = pathPart + request;
        let url = this.implodeHostname(this.urls['api'][endpoint]) + payload;
        const query = this.omit(params, this.extractParams(path));
        if (!signed && (method === 'GET')) {
            const keys = Object.keys(query);
            const keysLength = keys.length;
            if (keysLength > 0) {
                url = url + '?' + this.urlencode(query);
            }
        }
        if (signed) {
            this.checkRequiredCredentials();
            const timestamp = this.milliseconds().toString();
            let auth = timestamp + method + payload;
            if (method === 'POST') {
                body = this.json(params);
                auth += body;
            }
            else {
                if (Object.keys(params).length) {
                    const query = '?' + this.urlencode(this.keysort(params));
                    url += query;
                    auth += query;
                }
            }
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
            headers = {
                'ACCESS-KEY': this.apiKey,
                'ACCESS-SIGN': signature,
                'ACCESS-TIMESTAMP': timestamp,
                'ACCESS-PASSPHRASE': this.password,
            };
            if (method === 'POST') {
                headers['Content-Type'] = 'application/json';
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bitmex$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitmex',
            'name': 'BitMEX',
            'countries': ['SC'],
            'version': 'v1',
            'userAgent': undefined,
            'origin': 'https://www.bitmex.com',
            // cheapest endpoints are 10 requests per second (trading)
            // 10 per second => rateLimit = 1000ms / 10 = 100ms
            // 120 per minute => 2 per second => weight = 5 (authenticated)
            // 30 per minute => 0.5 per second => weight = 20 (unauthenticated)
            'rateLimit': 100,
            'pro': true,
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': false,
                'swap': true,
                'future': true,
                'option': false,
                'addMargin': undefined,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'cancelOrders': true,
                'createOrder': true,
                'createReduceOnlyOrder': true,
                'editOrder': true,
                'fetchBalance': true,
                'fetchClosedOrders': true,
                'fetchDepositAddress': true,
                'fetchDepositAddresses': false,
                'fetchDepositAddressesByNetwork': false,
                'fetchFundingHistory': false,
                'fetchFundingRate': false,
                'fetchFundingRateHistory': true,
                'fetchFundingRates': true,
                'fetchIndexOHLCV': false,
                'fetchLedger': true,
                'fetchLeverage': false,
                'fetchLeverageTiers': false,
                'fetchMarketLeverageTiers': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenOrders': true,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrders': true,
                'fetchPosition': false,
                'fetchPositions': true,
                'fetchPositionsRisk': false,
                'fetchPremiumIndexOHLCV': false,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTrades': true,
                'fetchTransactions': 'emulated',
                'fetchTransfer': false,
                'fetchTransfers': false,
                'reduceMargin': undefined,
                'setLeverage': true,
                'setMargin': undefined,
                'setMarginMode': true,
                'setPositionMode': false,
                'transfer': false,
                'withdraw': true,
            },
            // 'timeframes': {
            //     '1m': '1m',
            //     '5m': '5m',
            //     '1h': '1h',
            //     '1d': '1d',
            // },
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '1h': '60',
                '1d': '1440',
            },
            'urls': {
                'test': {
                    'public': 'https://testnet.bitmex.com',
                    'private': 'https://testnet.bitmex.com',
                },
                'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
                'api': {
                    'public': 'https://www.bitmex.com',
                    'private': 'https://www.bitmex.com',
                },
                'www': 'https://www.bitmex.com',
                'doc': [
                    'https://www.bitmex.com/app/apiOverview',
                    'https://github.com/BitMEX/api-connectors/tree/master/official-http',
                ],
                'fees': 'https://www.bitmex.com/app/fees',
                'referral': 'https://www.bitmex.com/register/upZpOX',
            },
            'api': {
                'public': {
                    'get': {
                        'announcement': 5,
                        'announcement/urgent': 5,
                        'funding': 5,
                        'instrument': 5,
                        'instrument/active': 5,
                        'instrument/activeAndIndices': 5,
                        'instrument/activeIntervals': 5,
                        'instrument/compositeIndex': 5,
                        'instrument/indices': 5,
                        'insurance': 5,
                        'leaderboard': 5,
                        'liquidation': 5,
                        'orderBook': 5,
                        'orderBook/L2': 5,
                        'quote': 5,
                        'quote/bucketed': 5,
                        'schema': 5,
                        'schema/websocketHelp': 5,
                        'settlement': 5,
                        'stats': 5,
                        'stats/history': 5,
                        'trade': 5,
                        'trade/bucketed': 5,
                        'wallet/assets': 5,
                        'wallet/networks': 5,
                        'udf/history': 5,
                    },
                },
                'private': {
                    'get': {
                        'apiKey': 5,
                        'chat': 5,
                        'chat/channels': 5,
                        'chat/connected': 5,
                        'execution': 5,
                        'execution/tradeHistory': 5,
                        'notification': 5,
                        'order': 5,
                        'position': 5,
                        'user': 5,
                        'user/affiliateStatus': 5,
                        'user/checkReferralCode': 5,
                        'user/commission': 5,
                        'user/depositAddress': 5,
                        'user/executionHistory': 5,
                        'user/margin': 5,
                        'user/minWithdrawalFee': 5,
                        'user/wallet': 5,
                        'user/walletHistory': 5,
                        'user/walletSummary': 5,
                        'wallet/assets': 5,
                        'wallet/networks': 5,
                        'userEvent': 5,
                    },
                    'post': {
                        'apiKey': 5,
                        'apiKey/disable': 5,
                        'apiKey/enable': 5,
                        'chat': 5,
                        'order': 1,
                        'order/bulk': 5,
                        'order/cancelAllAfter': 5,
                        'order/closePosition': 5,
                        'position/isolate': 1,
                        'position/leverage': 1,
                        'position/riskLimit': 5,
                        'position/transferMargin': 1,
                        'user/cancelWithdrawal': 5,
                        'user/confirmEmail': 5,
                        'user/confirmEnableTFA': 5,
                        'user/confirmWithdrawal': 5,
                        'user/disableTFA': 5,
                        'user/logout': 5,
                        'user/logoutAll': 5,
                        'user/preferences': 5,
                        'user/requestEnableTFA': 5,
                        'user/requestWithdrawal': 5,
                    },
                    'put': {
                        'order': 1,
                        'order/bulk': 5,
                        'user': 5,
                    },
                    'delete': {
                        'apiKey': 5,
                        'order': 1,
                        'order/all': 1,
                    },
                },
            },
            'exceptions': {
                'exact': {
                    'Invalid API Key.': AuthenticationError,
                    'This key is disabled.': PermissionDenied,
                    'Access Denied': PermissionDenied,
                    'Duplicate clOrdID': InvalidOrder,
                    'orderQty is invalid': InvalidOrder,
                    'Invalid price': InvalidOrder,
                    'Invalid stopPx for ordType': InvalidOrder,
                },
                'broad': {
                    'Signature not valid': AuthenticationError,
                    'overloaded': ExchangeNotAvailable,
                    'Account has insufficient Available Balance': InsufficientFunds,
                    'Service unavailable': ExchangeNotAvailable,
                    'Server Error': ExchangeError,
                    'Unable to cancel order due to existing state': InvalidOrder,
                    'We require all new traders to verify': PermissionDenied, // {"message":"We require all new traders to verify their identity before their first deposit. Please visit bitmex.com/verify to complete the process.","name":"HTTPError"}
                },
            },
            'precisionMode': TICK_SIZE$1,
            'options': {
                // https://blog.bitmex.com/api_announcement/deprecation-of-api-nonce-header/
                // https://github.com/ccxt/ccxt/issues/4789
                'api-expires': 5,
                'fetchOHLCVOpenTimestamp': true,
                'networks': {
                    'BTC': 'btc',
                    'ETH': 'eth',
                    'BSC': 'bsc',
                    'BNB': 'bsc',
                    'TRON': 'tron',
                    'ERC20': 'eth',
                    'BEP20': 'bsc',
                    'TRC20': 'tron',
                    'TRX': 'tron',
                    'AVAX': 'avax',
                    'NEAR': 'near',
                    'XTZ': 'xtz',
                    'DOT': 'dot',
                    'SOL': 'sol',
                },
                'networksById': {
                    'btc': 'BTC',
                    'eth': 'ERC20',
                    'bsc': 'BSC',
                    'tron': 'TRX',
                    'avax': 'AVAX',
                    'near': 'NEAR',
                    'xtz': 'XTZ',
                    'dot': 'DOT',
                    'sol': 'SOL',
                },
            },
            'commonCurrencies': {
                'USDt': 'USDT',
                'XBt': 'BTC',
                'XBT': 'BTC',
                'Gwei': 'ETH',
                'GWEI': 'ETH',
                'LAMP': 'SOL',
                'LAMp': 'SOL',
            },
        });
    }
    safeSymbol(marketId, market = undefined, delimiter = undefined, marketType = undefined) {
        if (marketId.indexOf('/') < 0) {
            marketId = marketId.replace('BTC', 'XBT');
        }
        market = this.safeMarket(marketId, market, delimiter, marketType);
        return market['symbol'];
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name bitmex#fetchMarkets
         * @description retrieves data on all markets for bitmex
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        const response = await this.publicGetInstrumentActiveAndIndices(params);
        //
        //    {
        //        "symbol": "LTCUSDT",
        //        "rootSymbol": "LTC",
        //        "state": "Open",
        //        "typ": "FFWCSX",
        //        "listing": "2021-11-10T04:00:00.000Z",
        //        "front": "2021-11-10T04:00:00.000Z",
        //        "expiry": null,
        //        "settle": null,
        //        "listedSettle": null,
        //        "relistInterval": null,
        //        "inverseLeg": "",
        //        "sellLeg": "",
        //        "buyLeg": "",
        //        "optionStrikePcnt": null,
        //        "optionStrikeRound": null,
        //        "optionStrikePrice": null,
        //        "optionMultiplier": null,
        //        "positionCurrency": "LTC",
        //        "underlying": "LTC",
        //        "quoteCurrency": "USDT",
        //        "underlyingSymbol": "LTCT=",
        //        "reference": "BMEX",
        //        "referenceSymbol": ".BLTCT",
        //        "calcInterval": null,
        //        "publishInterval": null,
        //        "publishTime": null,
        //        "maxOrderQty": 1000000000,
        //        "maxPrice": 1000000,
        //        "lotSize": 1000,
        //        "tickSize": 0.01,
        //        "multiplier": 100,
        //        "settlCurrency": "USDt",
        //        "underlyingToPositionMultiplier": 10000,
        //        "underlyingToSettleMultiplier": null,
        //        "quoteToSettleMultiplier": 1000000,
        //        "isQuanto": false,
        //        "isInverse": false,
        //        "initMargin": 0.03,
        //        "maintMargin": 0.015,
        //        "riskLimit": 1000000000000,
        //        "riskStep": 1000000000000,
        //        "limit": null,
        //        "capped": false,
        //        "taxed": true,
        //        "deleverage": true,
        //        "makerFee": -0.0001,
        //        "takerFee": 0.0005,
        //        "settlementFee": 0,
        //        "insuranceFee": 0,
        //        "fundingBaseSymbol": ".LTCBON8H",
        //        "fundingQuoteSymbol": ".USDTBON8H",
        //        "fundingPremiumSymbol": ".LTCUSDTPI8H",
        //        "fundingTimestamp": "2022-01-14T20:00:00.000Z",
        //        "fundingInterval": "2000-01-01T08:00:00.000Z",
        //        "fundingRate": 0.0001,
        //        "indicativeFundingRate": 0.0001,
        //        "rebalanceTimestamp": null,
        //        "rebalanceInterval": null,
        //        "openingTimestamp": "2022-01-14T17:00:00.000Z",
        //        "closingTimestamp": "2022-01-14T18:00:00.000Z",
        //        "sessionInterval": "2000-01-01T01:00:00.000Z",
        //        "prevClosePrice": 138.511,
        //        "limitDownPrice": null,
        //        "limitUpPrice": null,
        //        "bankruptLimitDownPrice": null,
        //        "bankruptLimitUpPrice": null,
        //        "prevTotalVolume": 12699024000,
        //        "totalVolume": 12702160000,
        //        "volume": 3136000,
        //        "volume24h": 114251000,
        //        "prevTotalTurnover": 232418052349000,
        //        "totalTurnover": 232463353260000,
        //        "turnover": 45300911000,
        //        "turnover24h": 1604331340000,
        //        "homeNotional24h": 11425.1,
        //        "foreignNotional24h": 1604331.3400000003,
        //        "prevPrice24h": 135.48,
        //        "vwap": 140.42165,
        //        "highPrice": 146.42,
        //        "lowPrice": 135.08,
        //        "lastPrice": 144.36,
        //        "lastPriceProtected": 144.36,
        //        "lastTickDirection": "MinusTick",
        //        "lastChangePcnt": 0.0655,
        //        "bidPrice": 143.75,
        //        "midPrice": 143.855,
        //        "askPrice": 143.96,
        //        "impactBidPrice": 143.75,
        //        "impactMidPrice": 143.855,
        //        "impactAskPrice": 143.96,
        //        "hasLiquidity": true,
        //        "openInterest": 38103000,
        //        "openValue": 547963053300,
        //        "fairMethod": "FundingRate",
        //        "fairBasisRate": 0.1095,
        //        "fairBasis": 0.004,
        //        "fairPrice": 143.811,
        //        "markMethod": "FairPrice",
        //        "markPrice": 143.811,
        //        "indicativeTaxRate": null,
        //        "indicativeSettlePrice": 143.807,
        //        "optionUnderlyingPrice": null,
        //        "settledPriceAdjustmentRate": null,
        //        "settledPrice": null,
        //        "timestamp": "2022-01-14T17:49:55.000Z"
        //    }
        //
        const result = [];
        for (let i = 0; i < response.length; i++) {
            const market = response[i];
            const id = this.safeString(market, 'symbol');
            const baseId = this.safeString(market, 'underlying');
            const quoteId = this.safeString(market, 'quoteCurrency');
            const settleId = this.safeString(market, 'settlCurrency', '');
            const base = this.safeCurrencyCode(baseId);
            const quote = this.safeCurrencyCode(quoteId);
            const settle = this.safeCurrencyCode(settleId);
            const basequote = baseId + quoteId;
            const swap = (id === basequote);
            // 'positionCurrency' may be empty ("", as Bitmex currently returns for ETHUSD)
            // so let's take the settlCurrency first and then adjust if needed
            let type = undefined;
            let future = false;
            let prediction = false;
            let index = false;
            let symbol = base + '/' + quote + ':' + settle;
            const expiryDatetime = this.safeString(market, 'expiry');
            const expiry = this.parse8601(expiryDatetime);
            const inverse = this.safeValue(market, 'isInverse');
            const status = this.safeString(market, 'state');
            let active = status !== 'Unlisted';
            if (swap) {
                type = 'swap';
            }
            else if (id.indexOf('B_') >= 0) {
                prediction = true;
                type = 'prediction';
                symbol = id;
            }
            else if (expiry !== undefined) {
                future = true;
                type = 'future';
                symbol = symbol + '-' + this.yymmdd(expiry);
            }
            else {
                index = true;
                type = 'index';
                symbol = id;
                active = false;
            }
            const positionId = this.safeString2(market, 'positionCurrency', 'underlying');
            const position = this.safeCurrencyCode(positionId);
            const positionIsQuote = (position === quote);
            const maxOrderQty = this.safeNumber(market, 'maxOrderQty');
            const contract = !index;
            const initMargin = this.safeString(market, 'initMargin', '1');
            const maxLeverage = this.parseNumber(Precise.stringDiv('1', initMargin));
            // const multiplierString = Precise.stringAbs (this.safeString (market, 'multiplier'));
            const rawUnderlyingToPositionMultiplier = this.safeNumber(market, 'underlyingToPositionMultiplier');
            let contractSize = 1;
            if (rawUnderlyingToPositionMultiplier !== undefined) {
                contractSize = 1 / rawUnderlyingToPositionMultiplier;
            }
            result.push({
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': settle,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': settleId,
                'type': type,
                'spot': false,
                'margin': false,
                'swap': swap,
                'future': future,
                'option': false,
                'prediction': prediction,
                'index': index,
                'active': active,
                'contract': contract,
                'linear': contract ? !inverse : undefined,
                'inverse': contract ? inverse : undefined,
                'taker': this.safeNumber(market, 'takerFee'),
                'maker': this.safeNumber(market, 'makerFee'),
                // 'contractSize': this.parseNumber (multiplierString),
                'contractSize': contractSize,
                'expiry': expiry,
                'expiryDatetime': expiryDatetime,
                'strike': this.safeNumber(market, 'optionStrikePrice'),
                'optionType': undefined,
                'precision': {
                    'amount': this.safeNumber(market, 'lotSize'),
                    'price': this.safeNumber(market, 'tickSize'),
                    'quote': this.safeNumber(market, 'tickSize'),
                    'base': this.safeNumber(market, 'tickSize'),
                },
                'limits': {
                    'leverage': {
                        'min': contract ? this.parseNumber('1') : undefined,
                        'max': contract ? maxLeverage : undefined,
                    },
                    'amount': {
                        'min': undefined,
                        'max': positionIsQuote ? undefined : maxOrderQty,
                    },
                    'price': {
                        'min': undefined,
                        'max': this.safeNumber(market, 'maxPrice'),
                    },
                    'cost': {
                        'min': undefined,
                        'max': positionIsQuote ? maxOrderQty : undefined,
                    },
                },
                'info': market,
            });
        }
        return result;
    }
    parseBalance(response) {
        //
        //     [
        //         {
        //             "account":1455728,
        //             "currency":"XBt",
        //             "riskLimit":1000000000000,
        //             "prevState":"",
        //             "state":"",
        //             "action":"",
        //             "amount":263542,
        //             "pendingCredit":0,
        //             "pendingDebit":0,
        //             "confirmedDebit":0,
        //             "prevRealisedPnl":0,
        //             "prevUnrealisedPnl":0,
        //             "grossComm":0,
        //             "grossOpenCost":0,
        //             "grossOpenPremium":0,
        //             "grossExecCost":0,
        //             "grossMarkValue":0,
        //             "riskValue":0,
        //             "taxableMargin":0,
        //             "initMargin":0,
        //             "maintMargin":0,
        //             "sessionMargin":0,
        //             "targetExcessMargin":0,
        //             "varMargin":0,
        //             "realisedPnl":0,
        //             "unrealisedPnl":0,
        //             "indicativeTax":0,
        //             "unrealisedProfit":0,
        //             "syntheticMargin":null,
        //             "walletBalance":263542,
        //             "marginBalance":263542,
        //             "marginBalancePcnt":1,
        //             "marginLeverage":0,
        //             "marginUsedPcnt":0,
        //             "excessMargin":263542,
        //             "excessMarginPcnt":1,
        //             "availableMargin":263542,
        //             "withdrawableMargin":263542,
        //             "timestamp":"2020-08-03T12:01:01.246Z",
        //             "grossLastValue":0,
        //             "commission":null
        //         }
        //     ]
        //
        const result = { 'info': response };
        for (let i = 0; i < response.length; i++) {
            const balance = response[i];
            const currencyId = this.safeString(balance, 'currency');
            const code = this.safeCurrencyCode(currencyId);
            const account = {};
            const marginBalance = this.safeInteger(balance, 'marginBalance', 0);
            const maintMargin = this.safeInteger(balance, 'maintMargin', 0);
            const availableMargin = this.safeInteger(balance, 'availableMargin', 0);
            let free = marginBalance - maintMargin;
            if (free === 0 && availableMargin !== 0) {
                free = availableMargin;
            }
            const total = this.safeInteger(balance, 'walletBalance');
            let freeStr = free.toString();
            let totalStr = undefined;
            if (total !== undefined) {
                totalStr = total.toString();
            }
            if (code !== 'USDT') {
                // tmp fix until this PR gets merged
                // https://github.com/ccxt/ccxt/pull/15311
                const symbol = code + '_USDT';
                const market = this.safeMarket(symbol);
                const info = this.safeValue(market, 'info', {});
                const multiplier = this.safeString(info, 'underlyingToPositionMultiplier');
                if (multiplier !== undefined) {
                    freeStr = Precise.stringDiv(freeStr, multiplier);
                    totalStr = Precise.stringDiv(totalStr, multiplier);
                }
                else {
                    totalStr = Precise.stringDiv(totalStr, '1e8');
                    freeStr = Precise.stringDiv(freeStr, '1e8');
                }
            }
            else {
                freeStr = Precise.stringDiv(freeStr, '1e6');
                totalStr = Precise.stringDiv(totalStr, '1e6');
            }
            if (totalStr !== undefined) {
                account['total'] = totalStr;
            }
            if (freeStr !== undefined) {
                account['free'] = freeStr;
            }
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name bitmex#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const request = {
            'currency': 'all',
        };
        const response = await this.privateGetUserMargin(this.extend(request, params));
        //
        //     [
        //         {
        //             "account":1455728,
        //             "currency":"XBt",
        //             "riskLimit":1000000000000,
        //             "prevState":"",
        //             "state":"",
        //             "action":"",
        //             "amount":263542,
        //             "pendingCredit":0,
        //             "pendingDebit":0,
        //             "confirmedDebit":0,
        //             "prevRealisedPnl":0,
        //             "prevUnrealisedPnl":0,
        //             "grossComm":0,
        //             "grossOpenCost":0,
        //             "grossOpenPremium":0,
        //             "grossExecCost":0,
        //             "grossMarkValue":0,
        //             "riskValue":0,
        //             "taxableMargin":0,
        //             "initMargin":0,
        //             "maintMargin":0,
        //             "sessionMargin":0,
        //             "targetExcessMargin":0,
        //             "varMargin":0,
        //             "realisedPnl":0,
        //             "unrealisedPnl":0,
        //             "indicativeTax":0,
        //             "unrealisedProfit":0,
        //             "syntheticMargin":null,
        //             "walletBalance":263542,
        //             "marginBalance":263542,
        //             "marginBalancePcnt":1,
        //             "marginLeverage":0,
        //             "marginUsedPcnt":0,
        //             "excessMargin":263542,
        //             "excessMarginPcnt":1,
        //             "availableMargin":263542,
        //             "withdrawableMargin":263542,
        //             "timestamp":"2020-08-03T12:01:01.246Z",
        //             "grossLastValue":0,
        //             "commission":null
        //         }
        //     ]
        //
        return this.parseBalance(response);
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['depth'] = limit;
        }
        const response = await this.publicGetOrderBookL2(this.extend(request, params));
        const result = {
            'symbol': symbol,
            'bids': [],
            'asks': [],
            'timestamp': undefined,
            'datetime': undefined,
            'nonce': undefined,
        };
        for (let i = 0; i < response.length; i++) {
            const order = response[i];
            const side = (order['side'] === 'Sell') ? 'asks' : 'bids';
            const amount = this.safeNumber(order, 'size');
            const price = this.safeNumber(order, 'price');
            // https://github.com/ccxt/ccxt/issues/4926
            // https://github.com/ccxt/ccxt/issues/4927
            // the exchange sometimes returns null price in the orderbook
            if (price !== undefined) {
                result[side].push([price, amount]);
            }
        }
        result['bids'] = this.sortBy(result['bids'], 0, true);
        result['asks'] = this.sortBy(result['asks'], 0);
        return result;
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string|undefined} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        const filter = {
            'filter': {
                'orderID': id,
            },
        };
        const response = await this.fetchOrders(symbol, undefined, undefined, this.deepExtend(filter, params));
        const numResults = response.length;
        if (numResults === 1) {
            return response[0];
        }
        throw new OrderNotFound(this.id + ': The order ' + id + ' not found.');
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchOrders
         * @description fetches information on multiple orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let request = {};
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['startTime'] = this.iso8601(since);
        }
        if (limit !== undefined) {
            request['count'] = limit;
        }
        request = this.deepExtend(request, params);
        // why the hassle? urlencode in python is kinda broken for nested dicts.
        // E.g. self.urlencode({"filter": {"open": True}}) will return "filter={'open':+True}"
        // Bitmex doesn't like that. Hence resorting to this hack.
        if ('filter' in request) {
            request['filter'] = this.json(request['filter']);
        }
        const response = await this.privateGetOrder(request);
        return this.parseOrders(response, market, since, limit);
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchOpenOrders
         * @description fetch all unfilled currently open orders
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch open orders for
         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        const request = {
            'filter': {
                'open': true,
            },
        };
        return await this.fetchOrders(symbol, since, limit, this.deepExtend(request, params));
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        // Bitmex barfs if you set 'open': false in the filter...
        const orders = await this.fetchOrders(symbol, since, limit, params);
        return this.filterBy(orders, 'status', 'closed');
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let request = {};
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['startTime'] = this.iso8601(since);
        }
        if (limit !== undefined) {
            request['count'] = limit;
        }
        request = this.deepExtend(request, params);
        // why the hassle? urlencode in python is kinda broken for nested dicts.
        // E.g. self.urlencode({"filter": {"open": True}}) will return "filter={'open':+True}"
        // Bitmex doesn't like that. Hence resorting to this hack.
        if ('filter' in request) {
            request['filter'] = this.json(request['filter']);
        }
        const response = await this.privateGetExecutionTradeHistory(request);
        //
        //     [
        //         {
        //             "execID": "string",
        //             "orderID": "string",
        //             "clOrdID": "string",
        //             "clOrdLinkID": "string",
        //             "account": 0,
        //             "symbol": "string",
        //             "side": "string",
        //             "lastQty": 0,
        //             "lastPx": 0,
        //             "underlyingLastPx": 0,
        //             "lastMkt": "string",
        //             "lastLiquidityInd": "string",
        //             "simpleOrderQty": 0,
        //             "orderQty": 0,
        //             "price": 0,
        //             "displayQty": 0,
        //             "stopPx": 0,
        //             "pegOffsetValue": 0,
        //             "pegPriceType": "string",
        //             "currency": "string",
        //             "settlCurrency": "string",
        //             "execType": "string",
        //             "ordType": "string",
        //             "timeInForce": "string",
        //             "execInst": "string",
        //             "contingencyType": "string",
        //             "exDestination": "string",
        //             "ordStatus": "string",
        //             "triggered": "string",
        //             "workingIndicator": true,
        //             "ordRejReason": "string",
        //             "simpleLeavesQty": 0,
        //             "leavesQty": 0,
        //             "simpleCumQty": 0,
        //             "cumQty": 0,
        //             "avgPx": 0,
        //             "commission": 0,
        //             "tradePublishIndicator": "string",
        //             "multiLegReportingType": "string",
        //             "text": "string",
        //             "trdMatchID": "string",
        //             "execCost": 0,
        //             "execComm": 0,
        //             "homeNotional": 0,
        //             "foreignNotional": 0,
        //             "transactTime": "2019-03-05T12:47:02.762Z",
        //             "timestamp": "2019-03-05T12:47:02.762Z"
        //         }
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }
    parseLedgerEntryType(type) {
        const types = {
            'Withdrawal': 'transaction',
            'RealisedPNL': 'margin',
            'UnrealisedPNL': 'margin',
            'Deposit': 'transaction',
            'Transfer': 'transfer',
            'AffiliatePayout': 'referral',
        };
        return this.safeString(types, type, type);
    }
    parseLedgerEntry(item, currency = undefined) {
        //
        //     {
        //         transactID: "69573da3-7744-5467-3207-89fd6efe7a47",
        //         account:  24321,
        //         currency: "XBt",
        //         transactType: "Withdrawal", // "AffiliatePayout", "Transfer", "Deposit", "RealisedPNL", ...
        //         amount:  -1000000,
        //         fee:  300000,
        //         transactStatus: "Completed", // "Canceled", ...
        //         address: "1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9",
        //         tx: "3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA",
        //         text: "",
        //         transactTime: "2017-03-21T20:05:14.388Z",
        //         walletBalance:  0, // balance after
        //         marginBalance:  null,
        //         timestamp: "2017-03-22T13:09:23.514Z"
        //     }
        //
        // ButMEX returns the unrealized pnl from the wallet history endpoint.
        // The unrealized pnl transaction has an empty timestamp.
        // It is not related to historical pnl it has status set to "Pending".
        // Therefore it's not a part of the history at all.
        // https://github.com/ccxt/ccxt/issues/6047
        //
        //     {
        //         "transactID":"00000000-0000-0000-0000-000000000000",
        //         "account":121210,
        //         "currency":"XBt",
        //         "transactType":"UnrealisedPNL",
        //         "amount":-5508,
        //         "fee":0,
        //         "transactStatus":"Pending",
        //         "address":"XBTUSD",
        //         "tx":"",
        //         "text":"",
        //         "transactTime":null,  # ←---------------------------- null
        //         "walletBalance":139198767,
        //         "marginBalance":139193259,
        //         "timestamp":null  # ←---------------------------- null
        //     }
        //
        const id = this.safeString(item, 'transactID');
        const account = this.safeString(item, 'account');
        const referenceId = this.safeString(item, 'tx');
        const referenceAccount = undefined;
        const type = this.parseLedgerEntryType(this.safeString(item, 'transactType'));
        const currencyId = this.safeString(item, 'currency');
        const code = this.safeCurrencyCode(currencyId, currency);
        let amount = this.safeNumber(item, 'amount');
        if (amount !== undefined) {
            amount = amount / 100000000;
        }
        let timestamp = this.parse8601(this.safeString(item, 'transactTime'));
        if (timestamp === undefined) {
            // https://github.com/ccxt/ccxt/issues/6047
            // set the timestamp to zero, 1970 Jan 1 00:00:00
            // for unrealized pnl and other transactions without a timestamp
            timestamp = 0; // see comments above
        }
        let feeCost = this.safeNumber(item, 'fee', 0);
        if (feeCost !== undefined) {
            feeCost = feeCost / 100000000;
        }
        const fee = {
            'cost': feeCost,
            'currency': code,
        };
        let after = this.safeNumber(item, 'walletBalance');
        if (after !== undefined) {
            after = after / 100000000;
        }
        const before = this.sum(after, -amount);
        let direction = undefined;
        if (amount < 0) {
            direction = 'out';
            amount = Math.abs(amount);
        }
        else {
            direction = 'in';
        }
        const status = this.parseTransactionStatus(this.safeString(item, 'transactStatus'));
        return {
            'id': id,
            'info': item,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'direction': direction,
            'account': account,
            'referenceId': referenceId,
            'referenceAccount': referenceAccount,
            'type': type,
            'currency': code,
            'amount': amount,
            'before': before,
            'after': after,
            'status': status,
            'fee': fee,
        };
    }
    async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchLedger
         * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
         * @param {string|undefined} code unified currency code, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
         * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
         */
        await this.loadMarkets();
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
        }
        const request = {
        // 'start': 123,
        };
        //
        //     if (since !== undefined) {
        //         // date-based pagination not supported
        //     }
        //
        if (limit !== undefined) {
            request['count'] = limit;
        }
        const response = await this.privateGetUserWalletHistory(this.extend(request, params));
        //
        //     [
        //         {
        //             transactID: "69573da3-7744-5467-3207-89fd6efe7a47",
        //             account:  24321,
        //             currency: "XBt",
        //             transactType: "Withdrawal", // "AffiliatePayout", "Transfer", "Deposit", "RealisedPNL", ...
        //             amount:  -1000000,
        //             fee:  300000,
        //             transactStatus: "Completed", // "Canceled", ...
        //             address: "1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9",
        //             tx: "3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA",
        //             text: "",
        //             transactTime: "2017-03-21T20:05:14.388Z",
        //             walletBalance:  0, // balance after
        //             marginBalance:  null,
        //             timestamp: "2017-03-22T13:09:23.514Z"
        //         }
        //     ]
        //
        return this.parseLedger(response, currency, since, limit);
    }
    async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchTransactions
         * @description fetch history of deposits and withdrawals
         * @param {string|undefined} code unified currency code for the currency of the transactions, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest transaction, default is undefined
         * @param {int|undefined} limit max number of transactions to return, default is undefined
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        const request = {
            'currency': 'all',
            // 'start': 123,
        };
        //
        //     if (since !== undefined) {
        //         // date-based pagination not supported
        //     }
        //
        if (limit !== undefined) {
            request['count'] = limit;
        }
        const response = await this.privateGetUserWalletHistory(this.extend(request, params));
        const transactions = this.filterByArray(response, 'transactType', ['Withdrawal', 'Deposit'], false);
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
        }
        return this.parseTransactions(transactions, currency, since, limit);
    }
    parseTransactionStatus(status) {
        const statuses = {
            'Canceled': 'canceled',
            'Completed': 'ok',
            'Pending': 'pending',
        };
        return this.safeString(statuses, status, status);
    }
    parseTransaction(transaction, currency = undefined) {
        //
        //    {
        //        'transactID': 'ffe699c2-95ee-4c13-91f9-0faf41daec25',
        //        'account': 123456,
        //        'currency': 'XBt',
        //        'network':'',
        //        'transactType': 'Withdrawal',
        //        'amount': -100100000,
        //        'fee': 100000,
        //        'transactStatus': 'Completed',
        //        'address': '385cR5DM96n1HvBDMzLHPYcw89fZAXULJP',
        //        'tx': '3BMEXabcdefghijklmnopqrstuvwxyz123',
        //        'text': '',
        //        'transactTime': '2019-01-02T01:00:00.000Z',
        //        'walletBalance': 99900000,
        //        'marginBalance': None,
        //        'timestamp': '2019-01-02T13:00:00.000Z'
        //    }
        //
        const currencyId = this.safeString(transaction, 'currency');
        currency = this.safeCurrency(currencyId, currency);
        // For deposits, transactTime == timestamp
        // For withdrawals, transactTime is submission, timestamp is processed
        const transactTime = this.parse8601(this.safeString(transaction, 'transactTime'));
        const timestamp = this.parse8601(this.safeString(transaction, 'timestamp'));
        const type = this.safeStringLower(transaction, 'transactType');
        // Deposits have no from address or to address, withdrawals have both
        let address = undefined;
        let addressFrom = undefined;
        let addressTo = undefined;
        if (type === 'withdrawal') {
            address = this.safeString(transaction, 'address');
            addressFrom = this.safeString(transaction, 'tx');
            addressTo = address;
        }
        let amountString = this.safeString(transaction, 'amount');
        const scale = (currency['code'] === 'BTC') ? '1e8' : '1e6';
        amountString = Precise.stringDiv(Precise.stringAbs(amountString), scale);
        let feeCostString = this.safeString(transaction, 'fee');
        feeCostString = Precise.stringDiv(feeCostString, scale);
        let status = this.safeString(transaction, 'transactStatus');
        if (status !== undefined) {
            status = this.parseTransactionStatus(status);
        }
        return {
            'info': transaction,
            'id': this.safeString(transaction, 'transactID'),
            'txid': this.safeString(transaction, 'tx'),
            'type': type,
            'currency': currency['code'],
            'network': this.safeString(transaction, 'status'),
            'amount': this.parseNumber(amountString),
            'status': status,
            'timestamp': transactTime,
            'datetime': this.iso8601(transactTime),
            'address': address,
            'addressFrom': addressFrom,
            'addressTo': addressTo,
            'tag': undefined,
            'tagFrom': undefined,
            'tagTo': undefined,
            'updated': timestamp,
            'comment': undefined,
            'fee': {
                'currency': currency['code'],
                'cost': this.parseNumber(feeCostString),
                'rate': undefined,
            },
        };
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name bitmex#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const tickers = await this.fetchTickers([market['symbol']], params);
        const ticker = this.safeValue(tickers, market['symbol']);
        if (ticker === undefined) {
            throw new BadSymbol(this.id + ' fetchTicker() symbol ' + symbol + ' not found');
        }
        return ticker;
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchTickers
         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const response = await this.publicGetInstrumentActiveAndIndices(params);
        //
        //     [
        //         {
        //             "symbol":".EVOL7D",
        //             "rootSymbol":"EVOL",
        //             "state":"Unlisted",
        //             "typ":"MRIXXX",
        //             "listing":null,
        //             "front":null,
        //             "expiry":null,
        //             "settle":null,
        //             "listedSettle":null,
        //             "relistInterval":null,
        //             "inverseLeg":"",
        //             "sellLeg":"",
        //             "buyLeg":"",
        //             "optionStrikePcnt":null,
        //             "optionStrikeRound":null,
        //             "optionStrikePrice":null,
        //             "optionMultiplier":null,
        //             "positionCurrency":"",
        //             "underlying":"ETH",
        //             "quoteCurrency":"XXX",
        //             "underlyingSymbol":".EVOL7D",
        //             "reference":"BMI",
        //             "referenceSymbol":".BETHXBT",
        //             "calcInterval":"2000-01-08T00:00:00.000Z",
        //             "publishInterval":"2000-01-01T00:05:00.000Z",
        //             "publishTime":null,
        //             "maxOrderQty":null,
        //             "maxPrice":null,
        //             "lotSize":null,
        //             "tickSize":0.01,
        //             "multiplier":null,
        //             "settlCurrency":"",
        //             "underlyingToPositionMultiplier":null,
        //             "underlyingToSettleMultiplier":null,
        //             "quoteToSettleMultiplier":null,
        //             "isQuanto":false,
        //             "isInverse":false,
        //             "initMargin":null,
        //             "maintMargin":null,
        //             "riskLimit":null,
        //             "riskStep":null,
        //             "limit":null,
        //             "capped":false,
        //             "taxed":false,
        //             "deleverage":false,
        //             "makerFee":null,
        //             "takerFee":null,
        //             "settlementFee":null,
        //             "insuranceFee":null,
        //             "fundingBaseSymbol":"",
        //             "fundingQuoteSymbol":"",
        //             "fundingPremiumSymbol":"",
        //             "fundingTimestamp":null,
        //             "fundingInterval":null,
        //             "fundingRate":null,
        //             "indicativeFundingRate":null,
        //             "rebalanceTimestamp":null,
        //             "rebalanceInterval":null,
        //             "openingTimestamp":null,
        //             "closingTimestamp":null,
        //             "sessionInterval":null,
        //             "prevClosePrice":null,
        //             "limitDownPrice":null,
        //             "limitUpPrice":null,
        //             "bankruptLimitDownPrice":null,
        //             "bankruptLimitUpPrice":null,
        //             "prevTotalVolume":null,
        //             "totalVolume":null,
        //             "volume":null,
        //             "volume24h":null,
        //             "prevTotalTurnover":null,
        //             "totalTurnover":null,
        //             "turnover":null,
        //             "turnover24h":null,
        //             "homeNotional24h":null,
        //             "foreignNotional24h":null,
        //             "prevPrice24h":5.27,
        //             "vwap":null,
        //             "highPrice":null,
        //             "lowPrice":null,
        //             "lastPrice":4.72,
        //             "lastPriceProtected":null,
        //             "lastTickDirection":"ZeroMinusTick",
        //             "lastChangePcnt":-0.1044,
        //             "bidPrice":null,
        //             "midPrice":null,
        //             "askPrice":null,
        //             "impactBidPrice":null,
        //             "impactMidPrice":null,
        //             "impactAskPrice":null,
        //             "hasLiquidity":false,
        //             "openInterest":null,
        //             "openValue":0,
        //             "fairMethod":"",
        //             "fairBasisRate":null,
        //             "fairBasis":null,
        //             "fairPrice":null,
        //             "markMethod":"LastPrice",
        //             "markPrice":4.72,
        //             "indicativeTaxRate":null,
        //             "indicativeSettlePrice":null,
        //             "optionUnderlyingPrice":null,
        //             "settledPriceAdjustmentRate":null,
        //             "settledPrice":null,
        //             "timestamp":"2022-05-21T04:30:00.000Z"
        //         }
        //     ]
        //
        const result = {};
        for (let i = 0; i < response.length; i++) {
            const ticker = this.parseTicker(response[i]);
            const symbol = this.safeString(ticker, 'symbol');
            if (symbol !== undefined) {
                result[symbol] = ticker;
            }
        }
        return this.filterByArray(result, 'symbol', symbols);
    }
    parseTicker(ticker, market = undefined) {
        //
        //     {                         symbol: "ETHH19",
        //                           rootSymbol: "ETH",
        //                                state: "Open",
        //                                  typ: "FFCCSX",
        //                              listing: "2018-12-17T04:00:00.000Z",
        //                                front: "2019-02-22T12:00:00.000Z",
        //                               expiry: "2019-03-29T12:00:00.000Z",
        //                               settle: "2019-03-29T12:00:00.000Z",
        //                       relistInterval:  null,
        //                           inverseLeg: "",
        //                              sellLeg: "",
        //                               buyLeg: "",
        //                     optionStrikePcnt:  null,
        //                    optionStrikeRound:  null,
        //                    optionStrikePrice:  null,
        //                     optionMultiplier:  null,
        //                     positionCurrency: "ETH",
        //                           underlying: "ETH",
        //                        quoteCurrency: "XBT",
        //                     underlyingSymbol: "ETHXBT=",
        //                            reference: "BMEX",
        //                      referenceSymbol: ".BETHXBT30M",
        //                         calcInterval:  null,
        //                      publishInterval:  null,
        //                          publishTime:  null,
        //                          maxOrderQty:  100000000,
        //                             maxPrice:  10,
        //                              lotSize:  1,
        //                             tickSize:  0.00001,
        //                           multiplier:  100000000,
        //                        settlCurrency: "XBt",
        //       underlyingToPositionMultiplier:  1,
        //         underlyingToSettleMultiplier:  null,
        //              quoteToSettleMultiplier:  100000000,
        //                             isQuanto:  false,
        //                            isInverse:  false,
        //                           initMargin:  0.02,
        //                          maintMargin:  0.01,
        //                            riskLimit:  5000000000,
        //                             riskStep:  5000000000,
        //                                limit:  null,
        //                               capped:  false,
        //                                taxed:  true,
        //                           deleverage:  true,
        //                             makerFee:  -0.0005,
        //                             takerFee:  0.0025,
        //                        settlementFee:  0,
        //                         insuranceFee:  0,
        //                    fundingBaseSymbol: "",
        //                   fundingQuoteSymbol: "",
        //                 fundingPremiumSymbol: "",
        //                     fundingTimestamp:  null,
        //                      fundingInterval:  null,
        //                          fundingRate:  null,
        //                indicativeFundingRate:  null,
        //                   rebalanceTimestamp:  null,
        //                    rebalanceInterval:  null,
        //                     openingTimestamp: "2019-02-13T08:00:00.000Z",
        //                     closingTimestamp: "2019-02-13T09:00:00.000Z",
        //                      sessionInterval: "2000-01-01T01:00:00.000Z",
        //                       prevClosePrice:  0.03347,
        //                       limitDownPrice:  null,
        //                         limitUpPrice:  null,
        //               bankruptLimitDownPrice:  null,
        //                 bankruptLimitUpPrice:  null,
        //                      prevTotalVolume:  1386531,
        //                          totalVolume:  1387062,
        //                               volume:  531,
        //                            volume24h:  17118,
        //                    prevTotalTurnover:  4741294246000,
        //                        totalTurnover:  4743103466000,
        //                             turnover:  1809220000,
        //                          turnover24h:  57919845000,
        //                      homeNotional24h:  17118,
        //                   foreignNotional24h:  579.19845,
        //                         prevPrice24h:  0.03349,
        //                                 vwap:  0.03383564,
        //                            highPrice:  0.03458,
        //                             lowPrice:  0.03329,
        //                            lastPrice:  0.03406,
        //                   lastPriceProtected:  0.03406,
        //                    lastTickDirection: "ZeroMinusTick",
        //                       lastChangePcnt:  0.017,
        //                             bidPrice:  0.03406,
        //                             midPrice:  0.034065,
        //                             askPrice:  0.03407,
        //                       impactBidPrice:  0.03406,
        //                       impactMidPrice:  0.034065,
        //                       impactAskPrice:  0.03407,
        //                         hasLiquidity:  true,
        //                         openInterest:  83679,
        //                            openValue:  285010674000,
        //                           fairMethod: "ImpactMidPrice",
        //                        fairBasisRate:  0,
        //                            fairBasis:  0,
        //                            fairPrice:  0.03406,
        //                           markMethod: "FairPrice",
        //                            markPrice:  0.03406,
        //                    indicativeTaxRate:  0,
        //                indicativeSettlePrice:  0.03406,
        //                optionUnderlyingPrice:  null,
        //                         settledPrice:  null,
        //                            timestamp: "2019-02-13T08:40:30.000Z",
        //     }
        //
        const marketId = this.safeString(ticker, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const timestamp = this.parse8601(this.safeString(ticker, 'timestamp'));
        const open = this.safeString(ticker, 'prevPrice24h');
        const last = this.safeString(ticker, 'lastPrice');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeString(ticker, 'highPrice'),
            'low': this.safeString(ticker, 'lowPrice'),
            'bid': this.safeString(ticker, 'bidPrice'),
            'bidVolume': undefined,
            'ask': this.safeString(ticker, 'askPrice'),
            'askVolume': undefined,
            'vwap': this.safeString(ticker, 'vwap'),
            'mark': this.safeString(ticker, 'markPrice'),
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeString(ticker, 'homeNotional24h'),
            'quoteVolume': this.safeString(ticker, 'foreignNotional24h'),
            'info': ticker,
        }, market);
    }
    parseOHLCV(ohlcv, market = undefined) {
        //
        //     {
        //         "timestamp":"2015-09-25T13:38:00.000Z",
        //         "symbol":"XBTUSD",
        //         "open":237.45,
        //         "high":237.45,
        //         "low":237.45,
        //         "close":237.45,
        //         "trades":0,
        //         "volume":0,
        //         "vwap":null,
        //         "lastSize":null,
        //         "turnover":0,
        //         "homeNotional":0,
        //         "foreignNotional":0
        //     }
        //
        return [
            this.parse8601(this.safeString(ohlcv, 'timestamp')),
            this.safeNumber(ohlcv, 'open'),
            this.safeNumber(ohlcv, 'high'),
            this.safeNumber(ohlcv, 'low'),
            this.safeNumber(ohlcv, 'close'),
            this.safeNumber(ohlcv, 'volume'),
        ];
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'resolution': this.timeframes[timeframe],
            'from': since / 1000,
        };
        const parsedTimeFrame = this.parseTimeframe(timeframe);
        const duration = parsedTimeFrame * 1000 * limit;
        const to = this.sum(since, duration);
        request['to'] = to / 1000;
        const response = await this.publicGetUdfHistory(this.extend(request, params));
        const res = [];
        if (response.s === 'ok') {
            const length = response.t.length;
            for (let i = 0; i < length; i++) {
                res.push([
                    response.t[i] * 1000,
                    response.o[i],
                    response.h[i],
                    response.l[i],
                    response.c[i],
                    response.v[i],
                ]);
            }
        }
        else {
            throw (response.s);
        }
        return res;
    }
    parseTrade(trade, market = undefined) {
        //
        // fetchTrades (public)
        //
        //     {
        //         timestamp: '2018-08-28T00:00:02.735Z',
        //         symbol: 'XBTUSD',
        //         side: 'Buy',
        //         size: 2000,
        //         price: 6906.5,
        //         tickDirection: 'PlusTick',
        //         trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',
        //         grossValue: 28958000,
        //         homeNotional: 0.28958,
        //         foreignNotional: 2000
        //     }
        //
        // fetchMyTrades (private)
        //
        //     {
        //         "execID": "string",
        //         "orderID": "string",
        //         "clOrdID": "string",
        //         "clOrdLinkID": "string",
        //         "account": 0,
        //         "symbol": "string",
        //         "side": "string",
        //         "lastQty": 0,
        //         "lastPx": 0,
        //         "underlyingLastPx": 0,
        //         "lastMkt": "string",
        //         "lastLiquidityInd": "string",
        //         "simpleOrderQty": 0,
        //         "orderQty": 0,
        //         "price": 0,
        //         "displayQty": 0,
        //         "stopPx": 0,
        //         "pegOffsetValue": 0,
        //         "pegPriceType": "string",
        //         "currency": "string",
        //         "settlCurrency": "string",
        //         "execType": "string",
        //         "ordType": "string",
        //         "timeInForce": "string",
        //         "execInst": "string",
        //         "contingencyType": "string",
        //         "exDestination": "string",
        //         "ordStatus": "string",
        //         "triggered": "string",
        //         "workingIndicator": true,
        //         "ordRejReason": "string",
        //         "simpleLeavesQty": 0,
        //         "leavesQty": 0,
        //         "simpleCumQty": 0,
        //         "cumQty": 0,
        //         "avgPx": 0,
        //         "commission": 0,
        //         "tradePublishIndicator": "string",
        //         "multiLegReportingType": "string",
        //         "text": "string",
        //         "trdMatchID": "string",
        //         "execCost": 0,
        //         "execComm": 0,
        //         "homeNotional": 0,
        //         "foreignNotional": 0,
        //         "transactTime": "2019-03-05T12:47:02.762Z",
        //         "timestamp": "2019-03-05T12:47:02.762Z"
        //     }
        //
        const timestamp = this.parse8601(this.safeString(trade, 'timestamp'));
        const priceString = this.safeString2(trade, 'avgPx', 'price');
        const amountString = this.safeString2(trade, 'size', 'lastQty');
        const execCost = this.safeString(trade, 'execCost');
        const costString = Precise.stringDiv(Precise.stringAbs(execCost), '1e8');
        const id = this.safeString(trade, 'trdMatchID');
        const order = this.safeString(trade, 'orderID');
        const side = this.safeStringLower(trade, 'side');
        // price * amount doesn't work for all symbols (e.g. XBT, ETH)
        let fee = undefined;
        const feeCostString = Precise.stringDiv(this.safeString(trade, 'execComm'), '1e8');
        if (feeCostString !== undefined) {
            const currencyId = this.safeString(trade, 'settlCurrency');
            const feeCurrencyCode = this.safeCurrencyCode(currencyId);
            const feeRateString = this.safeString(trade, 'commission');
            fee = {
                'cost': feeCostString,
                'currency': feeCurrencyCode,
                'rate': feeRateString,
            };
        }
        // Trade or Funding
        const execType = this.safeString(trade, 'execType');
        let takerOrMaker = undefined;
        if (feeCostString !== undefined && execType === 'Trade') {
            takerOrMaker = Precise.stringLt(feeCostString, '0') ? 'maker' : 'taker';
        }
        const marketId = this.safeString(trade, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const type = this.safeStringLower(trade, 'ordType');
        return this.safeTrade({
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'id': id,
            'order': order,
            'type': type,
            'takerOrMaker': takerOrMaker,
            'side': side,
            'price': priceString,
            'cost': costString,
            'amount': amountString,
            'fee': fee,
        }, market);
    }
    parseOrderStatus(status) {
        const statuses = {
            'New': 'open',
            'PartiallyFilled': 'open',
            'Filled': 'closed',
            'DoneForDay': 'open',
            'Canceled': 'canceled',
            'PendingCancel': 'open',
            'PendingNew': 'open',
            'Rejected': 'rejected',
            'Expired': 'expired',
            'Stopped': 'open',
            'Untriggered': 'open',
            'Triggered': 'open',
        };
        return this.safeString(statuses, status, status);
    }
    parseTimeInForce(timeInForce) {
        const timeInForces = {
            'Day': 'Day',
            'GoodTillCancel': 'GTC',
            'ImmediateOrCancel': 'IOC',
            'FillOrKill': 'FOK',
        };
        return this.safeString(timeInForces, timeInForce, timeInForce);
    }
    parseOrder(order, market = undefined) {
        //
        //     {
        //         "orderID":"56222c7a-9956-413a-82cf-99f4812c214b",
        //         "clOrdID":"",
        //         "clOrdLinkID":"",
        //         "account":1455728,
        //         "symbol":"XBTUSD",
        //         "side":"Sell",
        //         "simpleOrderQty":null,
        //         "orderQty":1,
        //         "price":40000,
        //         "displayQty":null,
        //         "stopPx":null,
        //         "pegOffsetValue":null,
        //         "pegPriceType":"",
        //         "currency":"USD",
        //         "settlCurrency":"XBt",
        //         "ordType":"Limit",
        //         "timeInForce":"GoodTillCancel",
        //         "execInst":"",
        //         "contingencyType":"",
        //         "exDestination":"XBME",
        //         "ordStatus":"New",
        //         "triggered":"",
        //         "workingIndicator":true,
        //         "ordRejReason":"",
        //         "simpleLeavesQty":null,
        //         "leavesQty":1,
        //         "simpleCumQty":null,
        //         "cumQty":0,
        //         "avgPx":null,
        //         "multiLegReportingType":"SingleSecurity",
        //         "text":"Submitted via API.",
        //         "transactTime":"2021-01-02T21:38:49.246Z",
        //         "timestamp":"2021-01-02T21:38:49.246Z"
        //     }
        //
        const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
        const marketId = this.safeString(order, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const timestamp = this.parse8601(this.safeString(order, 'timestamp'));
        const lastTradeTimestamp = this.parse8601(this.safeString(order, 'transactTime'));
        const price = this.safeString(order, 'price');
        const amount = this.safeString(order, 'orderQty');
        const filled = this.safeString(order, 'cumQty');
        const average = this.safeString(order, 'avgPx');
        const id = this.safeString(order, 'orderID');
        const type = this.safeStringLower(order, 'ordType');
        const side = this.safeStringLower(order, 'side');
        const clientOrderId = this.safeString(order, 'clOrdID');
        const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
        const stopPrice = this.safeNumber(order, 'stopPx');
        const execInst = this.safeString(order, 'execInst', '');
        let reduceOnly = false;
        let close = false;
        let postOnly = false;
        if ((execInst.indexOf('ReduceOnly') >= 0) || (execInst.indexOf('Close') >= 0)) {
            reduceOnly = true;
            close = true;
        }
        if (execInst.indexOf('ParticipateDoNotInitiate') >= 0) {
            postOnly = true;
        }
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': stopPrice,
            'amount': amount,
            'cost': undefined,
            'average': average,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': undefined,
            'close': close,
            'reduceOnly': reduceOnly,
            'trades': undefined,
        }, market);
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (since !== undefined) {
            request['startTime'] = this.iso8601(since);
        }
        else {
            // by default reverse=false, i.e. trades are fetched since the time of market inception (year 2015 for XBTUSD)
            request['reverse'] = true;
        }
        if (limit !== undefined) {
            request['count'] = limit;
        }
        const response = await this.publicGetTrade(this.extend(request, params));
        //
        //     [
        //         {
        //             timestamp: '2018-08-28T00:00:02.735Z',
        //             symbol: 'XBTUSD',
        //             side: 'Buy',
        //             size: 2000,
        //             price: 6906.5,
        //             tickDirection: 'PlusTick',
        //             trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',
        //             grossValue: 28958000,
        //             homeNotional: 0.28958,
        //             foreignNotional: 2000
        //         },
        //         {
        //             timestamp: '2018-08-28T00:00:03.778Z',
        //             symbol: 'XBTUSD',
        //             side: 'Sell',
        //             size: 1000,
        //             price: 6906,
        //             tickDirection: 'MinusTick',
        //             trdMatchID: '0d4f1682-5270-a800-569b-4a0eb92db97c',
        //             grossValue: 14480000,
        //             homeNotional: 0.1448,
        //             foreignNotional: 1000
        //         },
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        let orderType = this.capitalize(type);
        const reduceOnly = this.safeValue(params, 'reduceOnly');
        if (reduceOnly !== undefined) {
            if ((market['type'] !== 'swap') && (market['type'] !== 'future')) {
                throw new InvalidOrder(this.id + ' createOrder() does not support reduceOnly for ' + market['type'] + ' orders, reduceOnly orders are supported for swap and future markets only');
            }
        }
        const brokerId = this.safeString(this.options, 'brokerId', 'CCXT');
        // TEALSTREET
        let timeInForce = this.safeValue(params, 'timeInForce', 'GTC');
        const trigger = this.safeValue(params, 'trigger', undefined);
        const closeOnTrigger = this.safeValue2(params, 'closeOnTrigger', 'close', false);
        const execInstValues = [];
        if (timeInForce === 'ParticipateDoNotInitiate') {
            execInstValues.push('ParticipateDoNotInitiate');
            timeInForce = undefined;
        }
        if (trigger !== undefined) {
            execInstValues.push(this.capitalize(trigger) + 'Price');
        }
        if (closeOnTrigger) {
            execInstValues.push('Close');
        }
        if (reduceOnly) {
            execInstValues.push('ReduceOnly');
        }
        params = this.omit(params, ['reduceOnly', 'timeInForce', 'trigger', 'closeOnTrigger']);
        const request = {
            'symbol': market['id'],
            'side': this.capitalize(side),
            'orderQty': parseFloat(this.amountToPrecision(symbol, amount)),
            'timeInForce': timeInForce,
            'text': brokerId,
            'clOrdID': brokerId + this.uuid22(22),
            'execInst': execInstValues.join(','),
        };
        if ((orderType === 'Stop') || (orderType === 'StopLimit') || (orderType === 'MarketIfTouched') || (orderType === 'LimitIfTouched')) {
            const stopPrice = this.safeNumber2(params, 'stopPx', 'stopPrice');
            if (stopPrice === undefined) {
                throw new ArgumentsRequired(this.id + ' createOrder() requires a stopPx or stopPrice parameter for the ' + orderType + ' order type');
            }
            else {
                request['stopPx'] = parseFloat(this.priceToPrecision(symbol, stopPrice));
                params = this.omit(params, ['stopPx', 'stopPrice']);
            }
            let basePrice = this.safeValue(params, 'basePrice');
            if (basePrice === undefined || basePrice === 0.0) {
                const ticker = this.fetchTicker(symbol);
                basePrice = ticker['last'];
            }
            if ((side === 'buy' && stopPrice < basePrice) || (side === 'sell' && stopPrice > basePrice)) {
                if (orderType === 'Stop') {
                    orderType = 'MarketIfTouched';
                }
                else if (orderType === 'StopLimit') {
                    orderType = 'LimitIfTouched';
                }
            }
        }
        if (price !== undefined && orderType === 'Stop') {
            orderType = 'StopLimit';
        }
        if ((orderType === 'Limit') || (orderType === 'StopLimit') || (orderType === 'LimitIfTouched')) {
            request['price'] = parseFloat(this.priceToPrecision(symbol, price));
        }
        const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
        if (clientOrderId !== undefined) {
            request['clOrdID'] = clientOrderId;
            params = this.omit(params, ['clOrdID', 'clientOrderId']);
        }
        request['ordType'] = orderType;
        if (request['ordType'] === 'Market' && request['execInst'] === 'Close,ReduceOnly') {
            request['execInst'] = 'ReduceOnly';
        }
        const response = await this.privatePostOrder(this.extend(request, params));
        return this.parseOrder(response, market);
    }
    async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        const origClOrdID = this.safeString2(params, 'origClOrdID', 'clientOrderId');
        if (origClOrdID !== undefined) {
            request['origClOrdID'] = origClOrdID;
            const clientOrderId = this.safeString(params, 'clOrdID', 'clientOrderId');
            if (clientOrderId !== undefined) {
                request['clOrdID'] = clientOrderId;
            }
            params = this.omit(params, ['origClOrdID', 'clOrdID', 'clientOrderId']);
        }
        else {
            request['orderID'] = id;
        }
        if (amount !== undefined) {
            request['orderQty'] = amount;
        }
        if (price !== undefined) {
            request['price'] = price;
        }
        const brokerId = this.safeString(this.options, 'brokerId', 'CCXT');
        request['text'] = brokerId;
        const stopPrice = this.safeNumber2(params, 'stopPx', 'stopPrice');
        if (stopPrice !== undefined) {
            request['stopPx'] = parseFloat(this.priceToPrecision(symbol, stopPrice));
        }
        const response = await this.privatePutOrder(this.extend(request, params));
        return this.parseOrder(response);
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string|undefined} symbol not used by bitmex cancelOrder ()
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        // https://github.com/ccxt/ccxt/issues/6507
        const clientOrderId = this.safeValue2(params, 'clOrdID', 'clientOrderId');
        const request = {};
        if (clientOrderId === undefined) {
            request['orderID'] = id;
        }
        else {
            request['clOrdID'] = clientOrderId;
            params = this.omit(params, ['clOrdID', 'clientOrderId']);
        }
        const response = await this.privateDeleteOrder(this.extend(request, params));
        const order = this.safeValue(response, 0, {});
        const error = this.safeString(order, 'error');
        if (error !== undefined) {
            if (error.indexOf('Unable to cancel order due to existing state') >= 0) {
                throw new OrderNotFound(this.id + ' cancelOrder() failed: ' + error);
            }
        }
        return this.parseOrder(order);
    }
    async cancelOrders(ids, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#cancelOrders
         * @description cancel multiple orders
         * @param {[string]} ids order ids
         * @param {string|undefined} symbol not used by bitmex cancelOrders ()
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        // return await this.cancelOrder (ids, symbol, params);
        await this.loadMarkets();
        // https://github.com/ccxt/ccxt/issues/6507
        const clientOrderId = this.safeValue2(params, 'clOrdID', 'clientOrderId');
        const request = {};
        if (clientOrderId === undefined) {
            request['orderID'] = ids;
        }
        else {
            request['clOrdID'] = clientOrderId;
            params = this.omit(params, ['clOrdID', 'clientOrderId']);
        }
        const response = await this.privateDeleteOrder(this.extend(request, params));
        return this.parseOrders(response);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#cancelAllOrders
         * @description cancel all open orders
         * @param {string|undefined} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        const response = await this.privateDeleteOrderAll(this.extend(request, params));
        //
        //     [
        //         {
        //             "orderID": "string",
        //             "clOrdID": "string",
        //             "clOrdLinkID": "string",
        //             "account": 0,
        //             "symbol": "string",
        //             "side": "string",
        //             "simpleOrderQty": 0,
        //             "orderQty": 0,
        //             "price": 0,
        //             "displayQty": 0,
        //             "stopPx": 0,
        //             "pegOffsetValue": 0,
        //             "pegPriceType": "string",
        //             "currency": "string",
        //             "settlCurrency": "string",
        //             "ordType": "string",
        //             "timeInForce": "string",
        //             "execInst": "string",
        //             "contingencyType": "string",
        //             "exDestination": "string",
        //             "ordStatus": "string",
        //             "triggered": "string",
        //             "workingIndicator": true,
        //             "ordRejReason": "string",
        //             "simpleLeavesQty": 0,
        //             "leavesQty": 0,
        //             "simpleCumQty": 0,
        //             "cumQty": 0,
        //             "avgPx": 0,
        //             "multiLegReportingType": "string",
        //             "text": "string",
        //             "transactTime": "2020-06-01T09:36:35.290Z",
        //             "timestamp": "2020-06-01T09:36:35.290Z"
        //         }
        //     ]
        //
        return this.parseOrders(response, market);
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchPositions
         * @description fetch all open positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        await this.loadMarkets();
        const response = await this.privateGetPosition(params);
        //
        //     [
        //         {
        //             "account": 0,
        //             "symbol": "string",
        //             "currency": "string",
        //             "underlying": "string",
        //             "quoteCurrency": "string",
        //             "commission": 0,
        //             "initMarginReq": 0,
        //             "maintMarginReq": 0,
        //             "riskLimit": 0,
        //             "leverage": 0,
        //             "crossMargin": true,
        //             "deleveragePercentile": 0,
        //             "rebalancedPnl": 0,
        //             "prevRealisedPnl": 0,
        //             "prevUnrealisedPnl": 0,
        //             "prevClosePrice": 0,
        //             "openingTimestamp": "2020-11-09T06:53:59.892Z",
        //             "openingQty": 0,
        //             "openingCost": 0,
        //             "openingComm": 0,
        //             "openOrderBuyQty": 0,
        //             "openOrderBuyCost": 0,
        //             "openOrderBuyPremium": 0,
        //             "openOrderSellQty": 0,
        //             "openOrderSellCost": 0,
        //             "openOrderSellPremium": 0,
        //             "execBuyQty": 0,
        //             "execBuyCost": 0,
        //             "execSellQty": 0,
        //             "execSellCost": 0,
        //             "execQty": 0,
        //             "execCost": 0,
        //             "execComm": 0,
        //             "currentTimestamp": "2020-11-09T06:53:59.893Z",
        //             "currentQty": 0,
        //             "currentCost": 0,
        //             "currentComm": 0,
        //             "realisedCost": 0,
        //             "unrealisedCost": 0,
        //             "grossOpenCost": 0,
        //             "grossOpenPremium": 0,
        //             "grossExecCost": 0,
        //             "isOpen": true,
        //             "markPrice": 0,
        //             "markValue": 0,
        //             "riskValue": 0,
        //             "homeNotional": 0,
        //             "foreignNotional": 0,
        //             "posState": "string",
        //             "posCost": 0,
        //             "posCost2": 0,
        //             "posCross": 0,
        //             "posInit": 0,
        //             "posComm": 0,
        //             "posLoss": 0,
        //             "posMargin": 0,
        //             "posMaint": 0,
        //             "posAllowance": 0,
        //             "taxableMargin": 0,
        //             "initMargin": 0,
        //             "maintMargin": 0,
        //             "sessionMargin": 0,
        //             "targetExcessMargin": 0,
        //             "varMargin": 0,
        //             "realisedGrossPnl": 0,
        //             "realisedTax": 0,
        //             "realisedPnl": 0,
        //             "unrealisedGrossPnl": 0,
        //             "longBankrupt": 0,
        //             "shortBankrupt": 0,
        //             "taxBase": 0,
        //             "indicativeTaxRate": 0,
        //             "indicativeTax": 0,
        //             "unrealisedTax": 0,
        //             "unrealisedPnl": 0,
        //             "unrealisedPnlPcnt": 0,
        //             "unrealisedRoePcnt": 0,
        //             "simpleQty": 0,
        //             "simpleCost": 0,
        //             "simpleValue": 0,
        //             "simplePnl": 0,
        //             "simplePnlPcnt": 0,
        //             "avgCostPrice": 0,
        //             "avgEntryPrice": 0,
        //             "breakEvenPrice": 0,
        //             "marginCallPrice": 0,
        //             "liquidationPrice": 0,
        //             "bankruptPrice": 0,
        //             "timestamp": "2020-11-09T06:53:59.894Z",
        //             "lastPrice": 0,
        //             "lastValue": 0
        //         }
        //     ]
        //
        return this.parsePositions(response, symbols);
    }
    parsePosition(position, market = undefined) {
        //
        //     {
        //         "account": 9371654,
        //         "symbol": "ETHUSDT",
        //         "currency": "USDt",
        //         "underlying": "ETH",
        //         "quoteCurrency": "USDT",
        //         "commission": 0.00075,
        //         "initMarginReq": 0.3333333333333333,
        //         "maintMarginReq": 0.01,
        //         "riskLimit": 1000000000000,
        //         "leverage": 3,
        //         "crossMargin": false,
        //         "deleveragePercentile": 1,
        //         "rebalancedPnl": 0,
        //         "prevRealisedPnl": 0,
        //         "prevUnrealisedPnl": 0,
        //         "prevClosePrice": 2053.738,
        //         "openingTimestamp": "2022-05-21T04:00:00.000Z",
        //         "openingQty": 0,
        //         "openingCost": 0,
        //         "openingComm": 0,
        //         "openOrderBuyQty": 0,
        //         "openOrderBuyCost": 0,
        //         "openOrderBuyPremium": 0,
        //         "openOrderSellQty": 0,
        //         "openOrderSellCost": 0,
        //         "openOrderSellPremium": 0,
        //         "execBuyQty": 2000,
        //         "execBuyCost": 39260000,
        //         "execSellQty": 0,
        //         "execSellCost": 0,
        //         "execQty": 2000,
        //         "execCost": 39260000,
        //         "execComm": 26500,
        //         "currentTimestamp": "2022-05-21T04:35:16.397Z",
        //         "currentQty": 2000,
        //         "currentCost": 39260000,
        //         "currentComm": 26500,
        //         "realisedCost": 0,
        //         "unrealisedCost": 39260000,
        //         "grossOpenCost": 0,
        //         "grossOpenPremium": 0,
        //         "grossExecCost": 39260000,
        //         "isOpen": true,
        //         "markPrice": 1964.195,
        //         "markValue": 39283900,
        //         "riskValue": 39283900,
        //         "homeNotional": 0.02,
        //         "foreignNotional": -39.2839,
        //         "posState": "",
        //         "posCost": 39260000,
        //         "posCost2": 39260000,
        //         "posCross": 0,
        //         "posInit": 13086667,
        //         "posComm": 39261,
        //         "posLoss": 0,
        //         "posMargin": 13125928,
        //         "posMaint": 435787,
        //         "posAllowance": 0,
        //         "taxableMargin": 0,
        //         "initMargin": 0,
        //         "maintMargin": 13149828,
        //         "sessionMargin": 0,
        //         "targetExcessMargin": 0,
        //         "varMargin": 0,
        //         "realisedGrossPnl": 0,
        //         "realisedTax": 0,
        //         "realisedPnl": -26500,
        //         "unrealisedGrossPnl": 23900,
        //         "longBankrupt": 0,
        //         "shortBankrupt": 0,
        //         "taxBase": 0,
        //         "indicativeTaxRate": null,
        //         "indicativeTax": 0,
        //         "unrealisedTax": 0,
        //         "unrealisedPnl": 23900,
        //         "unrealisedPnlPcnt": 0.0006,
        //         "unrealisedRoePcnt": 0.0018,
        //         "simpleQty": null,
        //         "simpleCost": null,
        //         "simpleValue": null,
        //         "simplePnl": null,
        //         "simplePnlPcnt": null,
        //         "avgCostPrice": 1963,
        //         "avgEntryPrice": 1963,
        //         "breakEvenPrice": 1964.35,
        //         "marginCallPrice": 1328.5,
        //         "liquidationPrice": 1328.5,
        //         "bankruptPrice": 1308.7,
        //         "timestamp": "2022-05-21T04:35:16.397Z",
        //         "lastPrice": 1964.195,
        //         "lastValue": 39283900
        //     }
        //
        market = this.safeMarket(this.safeString(position, 'symbol'), market);
        const symbol = market['symbol'];
        const datetime = this.safeString(position, 'timestamp');
        const crossMargin = this.safeValue(position, 'crossMargin');
        const marginMode = (crossMargin === true) ? 'cross' : 'isolated';
        let notional = undefined;
        if (market['quote'] === 'USDT' || market['quote'] === 'USD' || market['quote'] === 'EUR') {
            notional = Precise.stringMul(this.safeString(position, 'foreignNotional'), '-1');
        }
        else {
            notional = this.safeString(position, 'homeNotional');
        }
        const maintenanceMargin = this.safeNumber(position, 'maintMargin');
        const unrealisedPnl = this.safeNumber(position, 'unrealisedPnl');
        const rebalancedPnl = this.safeNumber(position, 'rebalancedPnl');
        const contracts = this.omitZero(this.safeNumber(position, 'currentQty'));
        const side = (contracts === undefined || contracts > 0) ? 'long' : 'short';
        return {
            'info': position,
            'id': symbol,
            'symbol': symbol,
            'timestamp': this.parse8601(datetime),
            'datetime': datetime,
            'hedged': undefined,
            'side': side,
            'contracts': this.parseNumber(contracts),
            'entryPrice': this.safeNumber(position, 'avgCostPrice'),
            'markPrice': this.safeNumber(position, 'markPrice'),
            'notional': notional,
            'leverage': this.safeNumber(position, 'leverage'),
            'collateral': undefined,
            'initialMargin': this.safeNumber(position, 'initMargin'),
            'initialMarginPercentage': this.safeNumber(position, 'initMarginReq'),
            'maintenanceMargin': this.convertValue(maintenanceMargin, market),
            'maintenanceMarginPercentage': this.safeNumber(position, 'maintMarginReq'),
            'unrealizedPnl': this.convertValue(unrealisedPnl, market),
            'rebalancedPnl': this.convertValue(rebalancedPnl, market),
            'liquidationPrice': this.safeNumber(position, 'liquidationPrice'),
            'marginMode': marginMode,
            'marginRatio': undefined,
            'percentage': this.safeNumber(position, 'unrealisedPnlPcnt'),
        };
    }
    convertValue(value, market = undefined) {
        if ((value === undefined) || (market === undefined)) {
            return value;
        }
        let resultValue = undefined;
        value = this.numberToString(value);
        if ((market['quote'] === 'USD') || (market['quote'] === 'EUR')) {
            resultValue = Precise.stringMul(value, '0.00000001');
        }
        else if (market['quote'] === 'USDT') {
            resultValue = Precise.stringMul(value, '0.000001');
        }
        else {
            let currency = undefined;
            const quote = market['quote'];
            if (quote !== undefined) {
                currency = this.currency(market['quote']);
            }
            if (currency !== undefined) {
                resultValue = Precise.stringMul(value, this.numberToString(currency['precision']));
            }
        }
        resultValue = (resultValue !== undefined) ? parseFloat(resultValue) : undefined;
        return resultValue;
    }
    isFiat(currency) {
        if (currency === 'EUR') {
            return true;
        }
        if (currency === 'PLN') {
            return true;
        }
        return false;
    }
    async withdraw(code, amount, address, tag = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#withdraw
         * @description make a withdrawal
         * @param {string} code unified currency code
         * @param {float} amount the amount to withdraw
         * @param {string} address the address to withdraw to
         * @param {string|undefined} tag
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        [tag, params] = this.handleWithdrawTagAndParams(tag, params);
        this.checkAddress(address);
        await this.loadMarkets();
        // let currency = this.currency (code);
        if (code !== 'BTC') {
            throw new ExchangeError(this.id + ' supoprts BTC withdrawals only, other currencies coming soon...');
        }
        const currency = this.currency(code);
        const request = {
            'currency': 'XBt',
            'amount': amount,
            'address': address,
            // 'otpToken': '123456', // requires if two-factor auth (OTP) is enabled
            // 'fee': 0.001, // bitcoin network fee
        };
        const response = await this.privatePostUserRequestWithdrawal(this.extend(request, params));
        return this.parseTransaction(response, currency);
    }
    async fetchFundingRates(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchFundingRates
         * @description fetch the funding rate for multiple markets
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a dictionary of [funding rates structures]{@link https://docs.ccxt.com/#/?id=funding-rates-structure}, indexe by market symbols
         */
        await this.loadMarkets();
        const response = await this.publicGetInstrumentActiveAndIndices(params);
        //
        //    [
        //        {
        //            "symbol": "LTCUSDT",
        //            "rootSymbol": "LTC",
        //            "state": "Open",
        //            "typ": "FFWCSX",
        //            "listing": "2021-11-10T04:00:00.000Z",
        //            "front": "2021-11-10T04:00:00.000Z",
        //            "expiry": null,
        //            "settle": null,
        //            "listedSettle": null,
        //            "relistInterval": null,
        //            "inverseLeg": "",
        //            "sellLeg": "",
        //            "buyLeg": "",
        //            "optionStrikePcnt": null,
        //            "optionStrikeRound": null,
        //            "optionStrikePrice": null,
        //            "optionMultiplier": null,
        //            "positionCurrency": "LTC",
        //            "underlying": "LTC",
        //            "quoteCurrency": "USDT",
        //            "underlyingSymbol": "LTCT=",
        //            "reference": "BMEX",
        //            "referenceSymbol": ".BLTCT",
        //            "calcInterval": null,
        //            "publishInterval": null,
        //            "publishTime": null,
        //            "maxOrderQty": 1000000000,
        //            "maxPrice": 1000000,
        //            "lotSize": 1000,
        //            "tickSize": 0.01,
        //            "multiplier": 100,
        //            "settlCurrency": "USDt",
        //            "underlyingToPositionMultiplier": 10000,
        //            "underlyingToSettleMultiplier": null,
        //            "quoteToSettleMultiplier": 1000000,
        //            "isQuanto": false,
        //            "isInverse": false,
        //            "initMargin": 0.03,
        //            "maintMargin": 0.015,
        //            "riskLimit": 1000000000000,
        //            "riskStep": 1000000000000,
        //            "limit": null,
        //            "capped": false,
        //            "taxed": true,
        //            "deleverage": true,
        //            "makerFee": -0.0001,
        //            "takerFee": 0.0005,
        //            "settlementFee": 0,
        //            "insuranceFee": 0,
        //            "fundingBaseSymbol": ".LTCBON8H",
        //            "fundingQuoteSymbol": ".USDTBON8H",
        //            "fundingPremiumSymbol": ".LTCUSDTPI8H",
        //            "fundingTimestamp": "2022-01-14T20:00:00.000Z",
        //            "fundingInterval": "2000-01-01T08:00:00.000Z",
        //            "fundingRate": 0.0001,
        //            "indicativeFundingRate": 0.0001,
        //            "rebalanceTimestamp": null,
        //            "rebalanceInterval": null,
        //            "openingTimestamp": "2022-01-14T17:00:00.000Z",
        //            "closingTimestamp": "2022-01-14T18:00:00.000Z",
        //            "sessionInterval": "2000-01-01T01:00:00.000Z",
        //            "prevClosePrice": 138.511,
        //            "limitDownPrice": null,
        //            "limitUpPrice": null,
        //            "bankruptLimitDownPrice": null,
        //            "bankruptLimitUpPrice": null,
        //            "prevTotalVolume": 12699024000,
        //            "totalVolume": 12702160000,
        //            "volume": 3136000,
        //            "volume24h": 114251000,
        //            "prevTotalTurnover": 232418052349000,
        //            "totalTurnover": 232463353260000,
        //            "turnover": 45300911000,
        //            "turnover24h": 1604331340000,
        //            "homeNotional24h": 11425.1,
        //            "foreignNotional24h": 1604331.3400000003,
        //            "prevPrice24h": 135.48,
        //            "vwap": 140.42165,
        //            "highPrice": 146.42,
        //            "lowPrice": 135.08,
        //            "lastPrice": 144.36,
        //            "lastPriceProtected": 144.36,
        //            "lastTickDirection": "MinusTick",
        //            "lastChangePcnt": 0.0655,
        //            "bidPrice": 143.75,
        //            "midPrice": 143.855,
        //            "askPrice": 143.96,
        //            "impactBidPrice": 143.75,
        //            "impactMidPrice": 143.855,
        //            "impactAskPrice": 143.96,
        //            "hasLiquidity": true,
        //            "openInterest": 38103000,
        //            "openValue": 547963053300,
        //            "fairMethod": "FundingRate",
        //            "fairBasisRate": 0.1095,
        //            "fairBasis": 0.004,
        //            "fairPrice": 143.811,
        //            "markMethod": "FairPrice",
        //            "markPrice": 143.811,
        //            "indicativeTaxRate": null,
        //            "indicativeSettlePrice": 143.807,
        //            "optionUnderlyingPrice": null,
        //            "settledPriceAdjustmentRate": null,
        //            "settledPrice": null,
        //            "timestamp": "2022-01-14T17:49:55.000Z"
        //        }
        //    ]
        //
        const filteredResponse = [];
        for (let i = 0; i < response.length; i++) {
            const item = response[i];
            const marketId = this.safeString(item, 'symbol');
            const market = this.safeMarket(marketId);
            const swap = this.safeValue(market, 'swap', false);
            if (swap) {
                filteredResponse.push(item);
            }
        }
        return this.parseFundingRates(filteredResponse, symbols);
    }
    parseFundingRate(contract, market = undefined) {
        //
        //    {
        //        "symbol": "LTCUSDT",
        //        "rootSymbol": "LTC",
        //        "state": "Open",
        //        "typ": "FFWCSX",
        //        "listing": "2021-11-10T04:00:00.000Z",
        //        "front": "2021-11-10T04:00:00.000Z",
        //        "expiry": null,
        //        "settle": null,
        //        "listedSettle": null,
        //        "relistInterval": null,
        //        "inverseLeg": "",
        //        "sellLeg": "",
        //        "buyLeg": "",
        //        "optionStrikePcnt": null,
        //        "optionStrikeRound": null,
        //        "optionStrikePrice": null,
        //        "optionMultiplier": null,
        //        "positionCurrency": "LTC",
        //        "underlying": "LTC",
        //        "quoteCurrency": "USDT",
        //        "underlyingSymbol": "LTCT=",
        //        "reference": "BMEX",
        //        "referenceSymbol": ".BLTCT",
        //        "calcInterval": null,
        //        "publishInterval": null,
        //        "publishTime": null,
        //        "maxOrderQty": 1000000000,
        //        "maxPrice": 1000000,
        //        "lotSize": 1000,
        //        "tickSize": 0.01,
        //        "multiplier": 100,
        //        "settlCurrency": "USDt",
        //        "underlyingToPositionMultiplier": 10000,
        //        "underlyingToSettleMultiplier": null,
        //        "quoteToSettleMultiplier": 1000000,
        //        "isQuanto": false,
        //        "isInverse": false,
        //        "initMargin": 0.03,
        //        "maintMargin": 0.015,
        //        "riskLimit": 1000000000000,
        //        "riskStep": 1000000000000,
        //        "limit": null,
        //        "capped": false,
        //        "taxed": true,
        //        "deleverage": true,
        //        "makerFee": -0.0001,
        //        "takerFee": 0.0005,
        //        "settlementFee": 0,
        //        "insuranceFee": 0,
        //        "fundingBaseSymbol": ".LTCBON8H",
        //        "fundingQuoteSymbol": ".USDTBON8H",
        //        "fundingPremiumSymbol": ".LTCUSDTPI8H",
        //        "fundingTimestamp": "2022-01-14T20:00:00.000Z",
        //        "fundingInterval": "2000-01-01T08:00:00.000Z",
        //        "fundingRate": 0.0001,
        //        "indicativeFundingRate": 0.0001,
        //        "rebalanceTimestamp": null,
        //        "rebalanceInterval": null,
        //        "openingTimestamp": "2022-01-14T17:00:00.000Z",
        //        "closingTimestamp": "2022-01-14T18:00:00.000Z",
        //        "sessionInterval": "2000-01-01T01:00:00.000Z",
        //        "prevClosePrice": 138.511,
        //        "limitDownPrice": null,
        //        "limitUpPrice": null,
        //        "bankruptLimitDownPrice": null,
        //        "bankruptLimitUpPrice": null,
        //        "prevTotalVolume": 12699024000,
        //        "totalVolume": 12702160000,
        //        "volume": 3136000,
        //        "volume24h": 114251000,
        //        "prevTotalTurnover": 232418052349000,
        //        "totalTurnover": 232463353260000,
        //        "turnover": 45300911000,
        //        "turnover24h": 1604331340000,
        //        "homeNotional24h": 11425.1,
        //        "foreignNotional24h": 1604331.3400000003,
        //        "prevPrice24h": 135.48,
        //        "vwap": 140.42165,
        //        "highPrice": 146.42,
        //        "lowPrice": 135.08,
        //        "lastPrice": 144.36,
        //        "lastPriceProtected": 144.36,
        //        "lastTickDirection": "MinusTick",
        //        "lastChangePcnt": 0.0655,
        //        "bidPrice": 143.75,
        //        "midPrice": 143.855,
        //        "askPrice": 143.96,
        //        "impactBidPrice": 143.75,
        //        "impactMidPrice": 143.855,
        //        "impactAskPrice": 143.96,
        //        "hasLiquidity": true,
        //        "openInterest": 38103000,
        //        "openValue": 547963053300,
        //        "fairMethod": "FundingRate",
        //        "fairBasisRate": 0.1095,
        //        "fairBasis": 0.004,
        //        "fairPrice": 143.811,
        //        "markMethod": "FairPrice",
        //        "markPrice": 143.811,
        //        "indicativeTaxRate": null,
        //        "indicativeSettlePrice": 143.807,
        //        "optionUnderlyingPrice": null,
        //        "settledPriceAdjustmentRate": null,
        //        "settledPrice": null,
        //        "timestamp": "2022-01-14T17:49:55.000Z"
        //    }
        //
        const datetime = this.safeString(contract, 'timestamp');
        const marketId = this.safeString(contract, 'symbol');
        const fundingDatetime = this.safeString(contract, 'fundingTimestamp');
        return {
            'info': contract,
            'symbol': this.safeSymbol(marketId, market),
            'markPrice': this.safeNumber(contract, 'markPrice'),
            'indexPrice': undefined,
            'interestRate': undefined,
            'estimatedSettlePrice': this.safeNumber(contract, 'indicativeSettlePrice'),
            'timestamp': this.parse8601(datetime),
            'datetime': datetime,
            'fundingRate': this.safeNumber(contract, 'fundingRate'),
            'fundingTimestamp': this.iso8601(fundingDatetime),
            'fundingDatetime': fundingDatetime,
            'nextFundingRate': this.safeNumber(contract, 'indicativeFundingRate'),
            'nextFundingTimestamp': undefined,
            'nextFundingDatetime': undefined,
            'previousFundingRate': undefined,
            'previousFundingTimestamp': undefined,
            'previousFundingDatetime': undefined,
        };
    }
    async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#fetchFundingRateHistory
         * @description Fetches the history of funding rates
         * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
         * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
         * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @param {int|undefined} params.until timestamp in ms for ending date filter
         * @param {bool|undefined} params.reverse if true, will sort results newest first
         * @param {int|undefined} params.start starting point for results
         * @param {string|undefined} params.columns array of column names to fetch in info, if omitted, will return all columns
         * @param {string|undefined} params.filter generic table filter, send json key/value pairs, such as {"key": "value"}, you can key on individual fields, and do more advanced querying on timestamps, see the [timestamp docs]{@link https://www.bitmex.com/app/restAPI#Timestamp-Filters} for more details
         * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol in this.currencies) {
            const code = this.currency(symbol);
            request['symbol'] = code['id'];
        }
        else if (symbol !== undefined) {
            const splitSymbol = symbol.split(':');
            const splitSymbolLength = splitSymbol.length;
            const timeframes = ['nearest', 'daily', 'weekly', 'monthly', 'quarterly', 'biquarterly', 'perpetual'];
            if ((splitSymbolLength > 1) && this.inArray(splitSymbol[1], timeframes)) {
                const code = this.currency(splitSymbol[0]);
                symbol = code['id'] + ':' + splitSymbol[1];
                request['symbol'] = symbol;
            }
            else {
                market = this.market(symbol);
                request['symbol'] = market['id'];
            }
        }
        if (since !== undefined) {
            request['startTime'] = this.iso8601(since);
        }
        if (limit !== undefined) {
            request['count'] = limit;
        }
        const until = this.safeInteger2(params, 'until', 'till');
        params = this.omit(params, ['until', 'till']);
        if (until !== undefined) {
            request['endTime'] = this.iso8601(until);
        }
        const response = await this.publicGetFunding(this.extend(request, params));
        //
        //    [
        //        {
        //            "timestamp": "2016-05-07T12:00:00.000Z",
        //            "symbol": "ETHXBT",
        //            "fundingInterval": "2000-01-02T00:00:00.000Z",
        //            "fundingRate": 0.0010890000000000001,
        //            "fundingRateDaily": 0.0010890000000000001
        //        }
        //    ]
        //
        return this.parseFundingRateHistories(response, market, since, limit);
    }
    parseFundingRateHistory(info, market = undefined) {
        //
        //    {
        //        "timestamp": "2016-05-07T12:00:00.000Z",
        //        "symbol": "ETHXBT",
        //        "fundingInterval": "2000-01-02T00:00:00.000Z",
        //        "fundingRate": 0.0010890000000000001,
        //        "fundingRateDaily": 0.0010890000000000001
        //    }
        //
        const marketId = this.safeString(info, 'symbol');
        const datetime = this.safeString(info, 'timestamp');
        return {
            'info': info,
            'symbol': this.safeSymbol(marketId, market),
            'fundingRate': this.safeNumber(info, 'fundingRate'),
            'timestamp': this.parse8601(datetime),
            'datetime': datetime,
        };
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#setLeverage
         * @description set the level of leverage for a market
         * @param {float} leverage the rate of leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
        }
        const buyLeverage = this.safeNumber(params, 'buyLeverage', leverage);
        const sellLeverage = this.safeNumber(params, 'sellLeverage', leverage);
        if (buyLeverage !== sellLeverage) {
            throw new BadRequest(this.id + ' setLeverage() requires buyLeverage and sellLeverage to match');
        }
        leverage = buyLeverage || sellLeverage;
        if (buyLeverage !== undefined && sellLeverage !== undefined) {
            if ((leverage < 0) || (leverage > 100)) {
                throw new BadRequest(this.id + ' leverage should be between 0 (cross-margin) and 100');
            }
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['type'] !== 'swap' && market['type'] !== 'future') {
            throw new BadSymbol(this.id + ' setLeverage() supports future and swap contracts only');
        }
        const marginMode = this.safeString(params, 'marginMode');
        params = this.omit(params, ['marginMode', 'positionMode']);
        if (marginMode === 'isolated') {
            let promises = [];
            const request = {
                'symbol': market['id'],
            };
            if (buyLeverage !== undefined) {
                request['leverage'] = buyLeverage;
                promises.push(this.privatePostPositionLeverage(this.extend(request, params)));
            }
            if (sellLeverage !== undefined) {
                request['leverage'] = sellLeverage;
                promises.push(this.privatePostPositionLeverage(this.extend(request, params)));
            }
            promises = await Promise.all(promises);
            if (promises.length === 1) {
                return promises[0];
            }
            else {
                return promises;
            }
        }
        const request = {
            'symbol': market['id'],
            'leverage': leverage,
        };
        return await this.privatePostPositionLeverage(this.extend(request, params));
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#setMarginMode
         * @description set margin mode to 'cross' or 'isolated'
         * @param {string} marginMode 'cross' or 'isolated'
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
        }
        marginMode = marginMode.toLowerCase();
        if (marginMode !== 'isolated' && marginMode !== 'cross') {
            throw new BadRequest(this.id + ' setMarginMode() marginMode argument should be isolated or cross');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        if ((market['type'] !== 'swap') && (market['type'] !== 'future')) {
            throw new BadSymbol(this.id + ' setMarginMode() supports swap and future contracts only');
        }
        const enabled = (marginMode === 'cross') ? 'false' : 'true';
        const request = {
            'symbol': market['id'],
            'enabled': enabled,
        };
        return await this.privatePostPositionIsolate(this.extend(request, params));
    }
    async fetchDepositAddress(code, params = {}) {
        /**
         * @method
         * @name bitmex#fetchDepositAddress
         * @description fetch the deposit address for a currency associated with this account
         * @see https://www.bitmex.com/api/explorer/#!/User/User_getDepositAddress
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @param {string} params.network deposit chain, can view all chains via this.publicGetWalletAssets, default is eth, unless the currency has a default chain within this.options['networks']
         * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
         */
        await this.loadMarkets();
        const networkCode = this.safeStringUpper(params, 'network');
        if (networkCode === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchDepositAddress requires params["network"]');
        }
        const currency = this.currency(code);
        let currencyId = currency['id'];
        const networkId = this.networkCodeToId(networkCode, currency['code']);
        const idLength = currencyId.length;
        currencyId = currencyId.slice(0, idLength - 1) + currencyId.slice(idLength - 1, idLength).toLowerCase(); // make the last letter lowercase
        params = this.omit(params, 'network');
        const request = {
            'currency': currencyId,
            'network': networkId,
        };
        const response = await this.privateGetUserDepositAddress(this.extend(request, params));
        //
        //    '"bc1qmex3puyrzn2gduqcnlu70c2uscpyaa9nm2l2j9le2lt2wkgmw33sy7ndjg"'
        //
        return {
            'currency': code,
            'address': response.replace('"', '').replace('"', ''),
            'tag': undefined,
            'network': this.networkIdToCode(networkId).toUpperCase(),
            'info': response,
        };
    }
    calculateRateLimiterCost(api, method, path, params, config = {}, context = {}) {
        const isAuthenticated = this.checkRequiredCredentials(false);
        const cost = this.safeValue(config, 'cost', 1);
        if (cost !== 1) { // trading endpoints
            if (isAuthenticated) {
                return cost;
            }
            else {
                return 20;
            }
        }
        return cost;
    }
    handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (response === undefined) {
            return;
        }
        if (code === 429) {
            throw new DDoSProtection(this.id + ' ' + body);
        }
        if (code >= 400) {
            const error = this.safeValue(response, 'error', {});
            const message = this.safeString(error, 'message');
            const feedback = this.id + ' ' + body;
            this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);
            this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
            if (code === 400) {
                throw new BadRequest(feedback);
            }
            throw new ExchangeError(feedback); // unknown message
        }
    }
    nonce() {
        return this.milliseconds();
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let query = '/api/' + this.version + '/' + path;
        if (path.indexOf('udf') === 0) {
            query = '/api/' + path;
        }
        if (method === 'GET') {
            if (Object.keys(params).length) {
                query += '?' + this.urlencode(params);
            }
        }
        else {
            const format = this.safeString(params, '_format');
            if (format !== undefined) {
                query += '?' + this.urlencode({ '_format': format });
                params = this.omit(params, '_format');
            }
        }
        const url = this.urls['api'][api] + query;
        const isAuthenticated = this.checkRequiredCredentials(false);
        if (api === 'private' || (api === 'public' && isAuthenticated)) {
            this.checkRequiredCredentials();
            let auth = method + query;
            let expires = this.safeInteger(this.options, 'api-expires');
            headers = {
                'Content-Type': 'application/json',
                'api-key': this.apiKey,
            };
            expires = this.sum(this.seconds(), expires);
            const expiresStr = expires.toString();
            auth += expiresStr;
            headers['api-expires'] = expiresStr;
            if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
                if (Object.keys(params).length) {
                    body = this.json(params);
                    auth += body;
                }
            }
            headers['api-signature'] = this.hmac(this.encode(auth), this.encode(this.secret));
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class blofin$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'blofin',
            'name': 'Blofin',
            'countries': ['KY'],
            'rateLimit': 100,
            'version': 'v1',
            'certified': false,
            'pro': true,
            'hostname': 'blofin.com',
            'has': {
                'CORS': undefined,
                'spot': false,
                'margin': false,
                'swap': true,
                'future': false,
                'option': false,
                'addMargin': false,
                'borrowMargin': false,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'cancelWithdraw': false,
                'createDepositAddress': false,
                'createMarketOrder': false,
                'createOrder': true,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': false,
                'createStopMarketOrder': false,
                'createStopOrder': false,
                'fetchAccounts': true,
                'fetchBalance': true,
                'fetchCanceledOrders': false,
                'fetchClosedOrder': false,
                'fetchClosedOrders': false,
                'fetchCurrencies': true,
                'fetchDepositAddress': false,
                'fetchDeposits': false,
                'fetchFundingHistory': false,
                'fetchFundingRate': false,
                'fetchFundingRateHistory': false,
                'fetchFundingRates': false,
                'fetchIndexOHLCV': false,
                'fetchLedger': true,
                'fetchLeverage': true,
                'fetchMarginMode': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrder': false,
                'fetchOpenOrders': true,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrders': true,
                'fetchOrderTrades': true,
                'fetchPosition': false,
                'fetchPositionMode': false,
                'fetchPositions': true,
                'fetchPremiumIndexOHLCV': false,
                'fetchStatus': false,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': false,
                'fetchTrades': true,
                'fetchTradingFee': false,
                'fetchTradingFees': false,
                'fetchTransactions': false,
                'fetchTransfers': false,
                'fetchWithdrawals': false,
                'reduceMargin': false,
                'repayMargin': false,
                'setLeverage': true,
                'setMargin': false,
                'setMarginMode': true,
                'setPositionMode': true,
                'transfer': false,
                'withdraw': false,
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1H',
                '2h': '2H',
                '4h': '4H',
                '6h': '6H',
                '12h': '12H',
                '1d': '1D',
                '1w': '1W',
                '1M': '1M',
                '3M': '3M',
                '6M': '6M',
                '1y': '1Y',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
                'api': {
                    'rest': 'https://openapi.blofin.com',
                },
                'www': 'https://blofin.com/',
                'doc': [
                    'https://docs.blofin.com/',
                ],
            },
            'api': {
                'v1': {
                    'public': {
                        'get': {
                            'market/instruments': 1,
                            'market/tickers': 1,
                            'market/candles': 1,
                        },
                    },
                    'private': {
                        'get': {
                            'account/leverage-info': 1,
                            'account/batch-leverage-info': 1,
                            'account/margin-mode': 1,
                            // 'account/position-mode': 1,
                            'asset/balances': 1,
                            'account/positions': 1,
                            'trade/orders-pending': 1,
                            'trade/orders-tpsl-pending': 1,
                        },
                        'post': {
                            'trade/cancel-order': 5,
                            'trade/cancel-tpsl': 5,
                            'trade/cancel-batch-orders': 5,
                            'trade/close-positions': 5,
                            'trade/order': 5,
                            'trade/order-tpsl': 5,
                            'trade/batch-orders': 5,
                            'client/account_mode': 120,
                            'account/set-leverage': 5,
                            'account/set-position-mode': 120,
                            'account/set-margin-mode': 120,
                        },
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'maker': this.parseNumber('0.0002'),
                    'taker': this.parseNumber('0.0005'),
                },
            },
            'options': {
                'createMarketBuyOrderRequiresPrice': true,
                // these network aliases require manual mapping here
                'network-aliases-for-tokens': {
                    'HT': 'ERC20',
                    'OMG': 'ERC20',
                    'UATOM': 'ATOM',
                    'ZRX': 'ZRX',
                },
                'networks': {
                    'TRX': 'TRON',
                    'TRC20': 'TRON',
                    'ERC20': 'ETH',
                    'BEP20': 'BSC',
                },
                // override defaultNetworkCodePriorities for a specific currency
                'defaultNetworkCodeForCurrencies': {
                // 'USDT': 'TRC20',
                // 'BTC': 'BTC',
                },
                'transfer': {
                    'fillResponseFromRequest': true,
                },
                // 'brokerId': 'ab82cb09-cfec-4473-80a3-b740779d0644',
            },
            'commonCurrencies': {},
            'exceptions': {
                'exact': {
                    '-1000': ExchangeError,
                    '-1001': AuthenticationError,
                    '-1002': AuthenticationError,
                    '-1003': RateLimitExceeded,
                    '-1004': BadRequest,
                    '-1005': BadRequest,
                    '-1006': BadRequest,
                    '-1007': BadRequest,
                    '-1008': InvalidOrder,
                    '-1009': BadRequest,
                    '-1011': ExchangeError,
                    '-1012': BadRequest,
                    '-1101': InvalidOrder,
                    '-1102': InvalidOrder,
                    '-1103': InvalidOrder,
                    '-1104': InvalidOrder,
                    '-1105': InvalidOrder,
                    '103003': InvalidOrder, // {'orderId': None, 'clientOrderId': '', 'msg': 'Order failed. Insufficient USDT margin in account', 'code': '103003'}
                },
                'broad': {
                    'symbol must not be blank': BadRequest,
                    'The token is not supported': BadRequest,
                    'Your order and symbol are not valid or already canceled': BadRequest,
                    'Insufficient WOO. Please enable margin trading for leverage trading': BadRequest, // when selling insufficent token [-1012]
                },
            },
            'precisionMode': TICK_SIZE$1,
        });
    }
    async fetchMarkets(params = {}) {
        const response = await this.v1PublicGetMarketInstruments(params);
        const data = this.safeValue(response, 'data', []);
        return this.parseMarkets(data);
    }
    parseMarkets(markets) {
        const result = [];
        for (let i = 0; i < markets.length; i++) {
            result.push(this.parseMarket(markets[i]));
        }
        return result;
    }
    parseMarket(market) {
        const marketId = this.safeString(market, 'instId');
        const parts = marketId.split('-');
        const baseId = this.safeString(parts, 0);
        const quoteId = this.safeString(parts, 1);
        const settleId = 'USDT';
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        const settle = this.safeCurrencyCode(settleId);
        // const symbol = base + '/' + quote + ':' + settle;
        const symbol = marketId;
        // const status = this.safeNumber (market, 'status');
        // const contractSize = this.safeNumber (market, 'size', 1);
        // const contractSize = 1;
        const tickSize = this.safeString(market, 'tickSize');
        const minAmountString = this.safeString(market, 'minSize');
        const minAmount = this.parseNumber(minAmountString);
        const precisionPrice = this.parseNumber(tickSize);
        let maxLeverage = this.safeString(market, 'maxLeverage', '1');
        maxLeverage = Precise.stringMax(maxLeverage, '1');
        return {
            'id': marketId,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': settleId,
            'type': 'swap',
            'spot': false,
            'margin': true,
            'swap': true,
            'future': false,
            'option': false,
            'active': true,
            'contract': true,
            'linear': true,
            'inverse': undefined,
            'contractSize': this.safeNumber(market, 'contractValue'),
            'expiry': undefined,
            'expiryDatetime': undefined,
            'strike': undefined,
            'optionType': undefined,
            'precision': {
                'amount': this.safeNumber(market, 'lotSize'),
                'price': this.parseNumber(this.safeString(market, 'tickSize')),
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': this.parseNumber(maxLeverage),
                },
                'amount': {
                    'min': minAmount,
                    'max': undefined,
                },
                'price': {
                    'min': precisionPrice,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'info': this.deepExtend(market, { 'symbol': symbol }),
        };
        // const id = this.safeString (market, 'instId');
        // const type = 'future';
        // const contract = true;
        // const baseId = this.safeString (market, 'baseCurrency');
        // const quoteId = this.safeString (market, 'quoteCurrency');
        // const contactType = this.safeString (market, 'contractType');
        // const settleId = this.safeString2 (market, 'settleCcy', 'quoteCurrency'); // safe to assume that on blofin quote == settle for linear markets -- rayana
        // const settle = this.safeCurrencyCode (settleId);
        // const base = this.safeCurrencyCode (baseId);
        // const quote = this.safeCurrencyCode (quoteId);
        // let symbol = base + '/' + quote;
        // let expiry = undefined;
        // if (contract) {
        //     symbol = symbol + ':' + settle;
        //     expiry = this.safeInteger (market, 'expireTime');
        // }
        // const tickSize = this.safeString (market, 'tickSize');
        // const minAmountString = this.safeString (market, 'minSize');
        // const minAmount = this.parseNumber (minAmountString);
        // const fees = this.safeValue2 (this.fees, type, 'trading', {});
        // const precisionPrice = this.parseNumber (tickSize);
        // let maxLeverage = this.safeString (market, 'maxLeverage', '1');
        // maxLeverage = Precise.stringMax (maxLeverage, '1');
        // return this.extend (fees, {
        //     'id': id,
        //     'symbol': symbol,
        //     'base': base,
        //     'quote': quote,
        //     'settle': settle,
        //     'baseId': baseId,
        //     'quoteId': quoteId,
        //     'settleId': settleId,
        //     'type': type,
        //     'spot': false,
        //     'margin': false,
        //     'swap': false,
        //     'future': true,
        //     'option': false,
        //     'active': true,
        //     'contract': contract,
        //     'linear': contactType === 'linear',
        //     'inverse': contactType === 'inverse',
        //     'contractSize': contract ? this.safeNumber (market, 'contractValue') : undefined,
        //     'expiry': expiry,
        //     'expiryDatetime': this.iso8601 (expiry),
        //     'strike': undefined,
        //     'optionType': undefined,
        //     'precision': {
        //         'amount': this.safeNumber (market, 'lotSize'),
        //         'price': precisionPrice,
        //     },
        //     'limits': {
        //         'leverage': {
        //             'min': this.parseNumber ('1'),
        //             'max': this.parseNumber (maxLeverage),
        //         },
        //         'amount': {
        //             'min': minAmount,
        //             'max': undefined,
        //         },
        //         'price': {
        //             'min': precisionPrice,
        //             'max': undefined,
        //         },
        //         'cost': {
        //             'min': undefined,
        //             'max': undefined,
        //         },
        //     },
        //     'info': market,
        // });
    }
    parseTicker(ticker, market = undefined) {
        //
        //     {
        //         "instType": "SPOT",
        //         "instId": "ETH-BTC",
        //         "last": "0.07319",
        //         "lastSz": "0.044378",
        //         "askPx": "0.07322",
        //         "askSz": "4.2",
        //         "bidPx": "0.0732",
        //         "bidSz": "6.050058",
        //         "open24h": "0.07801",
        //         "high24h": "0.07975",
        //         "low24h": "0.06019",
        //         "volCcy24h": "11788.887619",
        //         "vol24h": "167493.829229",
        //         "ts": "1621440583784",
        //         "sodUtc0": "0.07872",
        //         "sodUtc8": "0.07345"
        //     }
        //
        const timestamp = this.safeInteger(ticker, 'ts');
        const marketId = this.safeString(ticker, 'instId');
        market = this.safeMarket(marketId, market, '-');
        const symbol = market['symbol'];
        const last = this.safeString(ticker, 'last');
        const open = this.safeString(ticker, 'open24h');
        const spot = this.safeValue(market, 'spot', false);
        const quoteVolume = spot ? this.safeString(ticker, 'volCurrency24h') : undefined;
        const baseVolume = this.safeString(ticker, 'vol24h');
        const high = this.safeString(ticker, 'high24h');
        const low = this.safeString(ticker, 'low24h');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': this.safeString(ticker, 'bidPrice'),
            'bidVolume': this.safeString(ticker, 'bidSize'),
            'ask': this.safeString(ticker, 'askPrice'),
            'askVolume': this.safeString(ticker, 'askSize'),
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const response = await this.v1PublicGetMarketTickers();
        const data = this.safeValue(response, 'data', []);
        for (let i = 0; i < data.length; i++) {
            if (data[i]['instId'] === market['id']) {
                return this.parseTicker(data[i], market);
            }
        }
    }
    async fetchTickersByType(type, symbols = undefined, params = {}) {
        await this.loadMarkets();
        const response = await this.v1PublicGetMarketTickers();
        const tickers = this.safeValue(response, 'data', []);
        return this.parseTickers(tickers, symbols);
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchTickers
         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const first = this.safeString(symbols, 0);
        let market = undefined;
        if (first !== undefined) {
            market = this.market(first);
        }
        const [type, query] = this.handleMarketTypeAndParams('fetchTickers', market, params);
        return await this.fetchTickersByType(type, symbols, query);
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchTrades() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.v1PublicGetMarketTrades(this.extend(request, params));
        //
        // {
        //     success: true,
        //     rows: [
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "SELL",
        //             executed_price: 46222.35,
        //             executed_quantity: 0.0012,
        //             executed_timestamp: "1641241162.329"
        //         },
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "SELL",
        //             executed_price: 46222.35,
        //             executed_quantity: 0.0012,
        //             executed_timestamp: "1641241162.329"
        //         },
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "BUY",
        //             executed_price: 46224.32,
        //             executed_quantity: 0.00039,
        //             executed_timestamp: "1641241162.287"
        //         },
        //         ...
        //      ]
        // }
        //
        const resultResponse = this.safeValue(response, 'rows', {});
        return this.parseTrades(resultResponse, market, since, limit);
    }
    parseTrade(trade, market = undefined) {
        //
        // public fetchTrades
        //
        //     {
        //         "instId": "ETH-BTC",
        //         "side": "sell",
        //         "sz": "0.119501",
        //         "px": "0.07065",
        //         "tradeId": "15826757",
        //         "ts": "1621446178316"
        //     }
        //
        // private fetchMyTrades
        //
        //     {
        //         "side": "buy",
        //         "fillSz": "0.007533",
        //         "fillPx": "2654.98",
        //         "fee": "-0.000007533",
        //         "ordId": "317321390244397056",
        //         "instType": "SPOT",
        //         "instId": "ETH-USDT",
        //         "clOrdId": "",
        //         "posSide": "net",
        //         "billId": "317321390265368576",
        //         "tag": "0",
        //         "execType": "T",
        //         "tradeId": "107601752",
        //         "feeCcy": "ETH",
        //         "ts": "1621927314985"
        //     }
        //
        const id = this.safeString(trade, 'tradeId');
        const marketId = this.safeString(trade, 'instId');
        market = this.safeMarket(marketId, market, '-');
        const symbol = market['symbol'];
        const timestamp = this.safeInteger(trade, 'ts');
        const price = this.safeString2(trade, 'fillPx', 'price');
        const amount = this.safeString2(trade, 'fillSz', 'size');
        const side = this.safeString(trade, 'side');
        const orderId = this.safeString(trade, 'ordId');
        const feeCostString = this.safeString(trade, 'fee');
        let fee = undefined;
        if (feeCostString !== undefined) {
            const feeCostSigned = Precise.stringNeg(feeCostString);
            const feeCurrencyId = this.safeString(trade, 'feeCurrency');
            let feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            if (feeCurrencyCode === undefined) {
                feeCurrencyCode = 'USDT';
            }
            fee = {
                'cost': feeCostSigned,
                'currency': feeCurrencyCode,
            };
        }
        let takerOrMaker = this.safeString(trade, 'execType');
        if (takerOrMaker === 'T') {
            takerOrMaker = 'taker';
        }
        else if (takerOrMaker === 'M') {
            takerOrMaker = 'maker';
        }
        return this.safeTrade({
            'info': this.deepExtend(trade, { 'symbol': marketId }),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'id': id,
            'order': orderId,
            'type': undefined,
            'takerOrMaker': takerOrMaker,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': undefined,
            'fee': fee,
        }, market);
    }
    parseTokenAndFeeTemp(item, feeTokenKey, feeAmountKey) {
        const feeCost = this.safeString(item, feeAmountKey);
        let fee = undefined;
        if (feeCost !== undefined) {
            const feeCurrencyId = this.safeString(item, feeTokenKey);
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            };
        }
        return fee;
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        // TEALSTREET
        let reduceOnly = this.safeValue2(params, 'reduceOnly', 'close');
        const timeInForces = {
            'GTC': 'GTC',
            'PO': 'post_only',
            'IOC': 'ioc',
            'FOK': 'fok',
        };
        const orderTypes = {
            'market': 'market',
            'limit': 'limit',
            'stop': 'conditional',
            'stoplimit': 'trigger',
            'stopLimit': 'trigger',
            'PO': 'post_only',
            'FOK': 'fok',
            'IOC': 'ioc',
            'optimal_limit_ioc': 'optimal_limit_ioc',
        };
        const timeInForce = this.safeString(timeInForces, params['timeInForce'], this.capitalize(params['timeInForce']));
        let orderType = this.safeString(orderTypes, type, this.capitalize(type));
        if (timeInForce && orderType !== 'conditional' && orderType !== 'trigger') {
            if (timeInForce === 'post_only' || timeInForce === 'fok' || timeInForce === 'ioc') {
                orderType = timeInForce;
            }
        }
        const closeOnTrigger = this.safeValue(params, 'closeOnTrigger', false);
        let stopPrice = undefined;
        if (orderType === 'conditional' || orderType === 'trigger') {
            stopPrice = this.safeNumber(params, 'stopPrice');
            if (closeOnTrigger) {
                reduceOnly = true;
            }
            params = this.omit(params, ['reduceOnly']);
        }
        side = side.toLowerCase();
        const marginType = this.safeString(params, 'marginMode', 'cross');
        let method = 'v1PrivatePostTradeOrder';
        if (type === 'stop' || type === 'stopLimit') {
            method = 'v1PrivatePostTradeOrderTpsl';
        }
        let posSide = undefined;
        if ((side === 'buy' && reduceOnly) || (side === 'sell' && !reduceOnly)) {
            posSide = 'short';
        }
        else {
            posSide = 'long';
        }
        let request = {
            'instId': market['id'],
            'marginMode': marginType,
            'side': side,
            'orderType': orderType,
            'reduceOnly': reduceOnly,
        };
        const positionMode = this.safeString(params, 'positionMode', 'oneway');
        params = this.omit(params, ['positionMode']);
        if (positionMode === 'hedged') {
            request['positionSide'] = posSide;
        }
        const brokerId = this.safeString(this.options, 'brokerId');
        if (brokerId) {
            request['brokerId'] = brokerId;
        }
        params = this.omit(params, ['clientOrderId']);
        if (price !== undefined) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        request['size'] = this.amountToPrecision(symbol, amount);
        if (!reduceOnly) {
            request = this.omit(request, ['reduceOnly']);
        }
        if (orderType === 'conditional' || orderType === 'trigger') {
            // unused by blofin right now
            // const triggerType = this.safeStringLower (params, 'trigger', 'mark');
            params = this.omit(params, ['trigger']);
            // if (price !== undefined) {
            //     price = -1;
            // } else {
            //     orderType = 'conditional';
            //     request['orderType'] = orderType;
            // }
            let basePrice = this.safeValue(params, 'basePrice');
            if (!basePrice) {
                const ticker = this.fetchTicker(symbol);
                basePrice = ticker['last'];
            }
            // const tpPrice = this.safeNumber (params, 'tpPrice');
            let tpPrice = undefined;
            if (side === 'sell' && stopPrice >= basePrice) {
                tpPrice = stopPrice;
            }
            else if (side === 'buy' && stopPrice < basePrice) {
                tpPrice = stopPrice;
            }
            if (tpPrice || stopPrice) {
                if (price === undefined) {
                    request['orderType'] = 'oco';
                    if (tpPrice) {
                        request['tpTriggerPrice'] = this.priceToPrecision(symbol, tpPrice);
                        request['tpOrderPrice'] = this.priceToPrecision(symbol, -1);
                    }
                    else if (stopPrice) {
                        request['slTriggerPrice'] = this.priceToPrecision(symbol, stopPrice);
                        request['slOrderPrice'] = this.priceToPrecision(symbol, -1);
                    }
                    // request['price'] = this.priceToPrecision (symbol, price);
                    request['reduceOnly'] = 'true';
                }
                else {
                    // this is from our okx code, but I think second case should be swapped
                    if (side === 'sell') {
                        if (stopPrice > basePrice) {
                            request['tpTriggerPrice'] = this.priceToPrecision(symbol, tpPrice);
                            request['tpOrderPrice'] = this.priceToPrecision(symbol, price);
                        }
                        else {
                            request['slTriggerPrice'] = this.priceToPrecision(symbol, stopPrice);
                            request['slOrderPrice'] = this.priceToPrecision(symbol, price);
                        }
                    }
                    else {
                        if (stopPrice < basePrice) {
                            request['tpTriggerPrice'] = this.priceToPrecision(symbol, tpPrice);
                            request['tpOrderPrice'] = this.priceToPrecision(symbol, price);
                        }
                        else {
                            request['slTriggerPrice'] = this.priceToPrecision(symbol, stopPrice);
                            request['slOrderPrice'] = this.priceToPrecision(symbol, price);
                        }
                    }
                    request['orderType'] = 'conditional';
                    // request['price'] = this.priceToPrecision (symbol, -1);
                    // unsupported?
                    // request['triggerPrice'];
                    request['reduceOnly'] = 'true';
                }
                request['price'] = -1;
            }
            request['positionSide'] = posSide;
        }
        // const tradeMode = this.safeString (params, 'tradeMode', 'hedged');
        // params = [];
        // if (tradeMode) {
        //     params = this.omit (params, [ 'tradeMode' ]);
        //     if (tradeMode === 'oneway') {
        //         request = this.omit (request, [ 'positionSide' ]);
        //     }
        //     // not implement for blofin yet
        //     // if (tradeMode === 'oneway') {
        //     //     request['positionSide'] = 'oneway';
        //     // } else {
        //     // request = this.omit (request, ['positionSide'])
        //     // }
        // }
        if (marginType) {
            params = this.omit(params, ['marginType']);
            request['marginMode'] = marginType;
        }
        let cloid_suffix = 'r0';
        if (reduceOnly) {
            cloid_suffix = 'r1';
        }
        request['clientOrderId'] = 'tealstreet' + this.uuid16() + cloid_suffix;
        const response = await this[method](this.extend(request, params));
        const data = this.safeValue(response, 'data', []);
        const first = this.safeValue(data, 0);
        const order = this.parseOrder(first, market);
        if (!order['status']) {
            const code = this.safeString(first, 'code');
            if (code === '0') {
                order['status'] = 'open';
            }
        }
        return this.extend(this.extend(request, params), this.extend(order, {
            'type': type,
            'side': side,
        }));
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const type = this.safeStringLower(params, 'type');
        const isStop = type === 'stop' || type === 'stoplimit';
        if (isStop) {
            return this.cancelAlgoOrder(id, symbol, params);
        }
        else {
            return this.cancelRegularOrder(id, symbol, params);
        }
    }
    async cancelAlgoOrder(id, symbol = undefined, params = {}) {
        const request = {};
        request['tpslId'] = id;
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        request['instId'] = market['id'];
        params = this.omit(params, ['type']);
        request['clientOrderId'] = '';
        const response = await this.v1PrivatePostTradeCancelTpsl([this.extend(request, params)]);
        //
        // { success: true, status: 'CANCEL_SENT' }
        //
        const extendParams = { 'symbol': symbol };
        extendParams['id'] = id;
        return this.extend(this.parseOrder(response), extendParams);
    }
    async cancelRegularOrder(id, symbol = undefined, params = {}) {
        const request = {};
        const clientOrderIdUnified = this.safeString2(params, 'clOrdID', 'clientOrderId');
        const clientOrderIdExchangeSpecific = this.safeString2(params, 'clientOrderId', clientOrderIdUnified);
        const isByClientOrder = clientOrderIdExchangeSpecific !== undefined;
        if (isByClientOrder) {
            request['clientOrderId'] = clientOrderIdExchangeSpecific;
            params = this.omit(params, ['clOrdID', 'clientOrderId', 'client_order_id']);
        }
        else {
            request['orderId'] = id;
        }
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        request['instId'] = market['id'];
        const response = await this.v1PrivatePostTradeCancelOrder(this.extend(request, params));
        //
        // { success: true, status: 'CANCEL_SENT' }
        //
        const extendParams = { 'symbol': symbol };
        if (isByClientOrder) {
            extendParams['clientOrderId'] = clientOrderIdExchangeSpecific;
        }
        else {
            extendParams['instId'] = id;
        }
        return this.extend(this.parseOrder(response), extendParams);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const instId = market['id'];
        // const request = {
        //     'instId': instId,
        // };
        const orders = await this.fetchOpenOrders(instId);
        const stopOrders = await this.fetchOpenStopOrders(instId);
        const ordersToCancel = [];
        for (let i = 0; i < orders.length; i++) {
            ordersToCancel.push({
                'instId': instId,
                'orderId': orders[i]['id'],
            });
        }
        for (let i = 0; i < stopOrders.length; i++) {
            ordersToCancel.push({
                'instId': instId,
                'orderId': stopOrders[i]['id'],
            });
        }
        // const response = await (this as any).v1PrivatePostTradeCancelOrder (this.extend (request, params));
        // await (this as any).v1PrivatePostTradeCancelTpsl (this.extend (request, params));
        //
        //     {
        //         "success":true,
        //         "status":"CANCEL_ALL_SENT"
        //     }
        //
        return await this.v1PrivatePostTradeCancelBatchOrders(ordersToCancel);
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string|undefined} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = (symbol !== undefined) ? this.market(symbol) : undefined;
        const request = {};
        const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
        let chosenSpotMethod = undefined;
        const type = this.safeString(params, 'type');
        const isStop = type === 'stop' || type === 'stoplimit';
        if (isStop) {
            chosenSpotMethod = 'v3PrivateDeleteAlgoOrderOid';
        }
        else if (clientOrderId) {
            chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
            request['client_order_id'] = clientOrderId;
        }
        else {
            chosenSpotMethod = 'v1PrivateGetOrderOid';
            request['oid'] = id;
        }
        const response = await this[chosenSpotMethod](this.extend(request, params));
        //
        // {
        //     success: true,
        //     symbol: 'SPOT_WOO_USDT',
        //     status: 'FILLED', // FILLED, NEW
        //     side: 'BUY',
        //     created_time: '1641480933.000',
        //     order_id: '87541111',
        //     order_tag: 'default',
        //     price: '1',
        //     type: 'LIMIT',
        //     quantity: '12',
        //     amount: null,
        //     visible: '12',
        //     executed: '12', // or any partial amount
        //     total_fee: '0.0024',
        //     fee_asset: 'WOO',
        //     client_order_id: null,
        //     average_executed_price: '1',
        //     Transactions: [
        //       {
        //         id: '99111647',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641482113.084',
        //         order_id: '87541111',
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //       }
        //     ]
        // }
        //
        return this.parseOrder(response, market);
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchOrders() is not supported yet');
    }
    parseOrder(order, market = undefined) {
        //
        // createOrder
        //
        //     {
        //         "clOrdId": "oktswap6",
        //         "ordId": "312269865356374016",
        //         "tag": "",
        //         "sCode": "0",
        //         "sMsg": ""
        //     }
        //
        // Spot and Swap fetchOrder, fetchOpenOrders
        //
        //     {
        //         "accFillSz": "0",
        //         "avgPx": "",
        //         "cTime": "1621910749815",
        //         "category": "normal",
        //         "ccy": "",
        //         "clOrdId": "",
        //         "fee": "0",
        //         "feeCcy": "ETH",
        //         "fillPx": "",
        //         "fillSz": "0",
        //         "fillTime": "",
        //         "instId": "ETH-USDT",
        //         "instType": "SPOT",
        //         "lever": "",
        //         "ordId": "317251910906576896",
        //         "ordType": "limit",
        //         "pnl": "0",
        //         "posSide": "net",
        //         "px": "2000",
        //         "rebate": "0",
        //         "rebateCcy": "USDT",
        //         "side": "buy",
        //         "slOrdPx": "",
        //         "slTriggerPx": "",
        //         "state": "live",
        //         "sz": "0.001",
        //         "tag": "",
        //         "tdMode": "cash",
        //         "tpOrdPx": "",
        //         "tpTriggerPx": "",
        //         "tradeId": "",
        //         "uTime": "1621910749815"
        //     }
        //
        // Algo Order fetchOpenOrders, fetchCanceledOrders, fetchClosedOrders
        //
        //     {
        //         "activePx": "",
        //         "activePxType": "",
        //         "actualPx": "",
        //         "actualSide": "buy",
        //         "actualSz": "0",
        //         "algoId": "431375349042380800",
        //         "cTime": "1649119897778",
        //         "callbackRatio": "",
        //         "callbackSpread": "",
        //         "ccy": "",
        //         "ctVal": "0.01",
        //         "instId": "BTC-USDT-SWAP",
        //         "instType": "SWAP",
        //         "last": "46538.9",
        //         "lever": "125",
        //         "moveTriggerPx": "",
        //         "notionalUsd": "467.059",
        //         "ordId": "",
        //         "ordPx": "50000",
        //         "ordType": "trigger",
        //         "posSide": "long",
        //         "pxLimit": "",
        //         "pxSpread": "",
        //         "pxVar": "",
        //         "side": "buy",
        //         "slOrdPx": "",
        //         "slTriggerPx": "",
        //         "slTriggerPxType": "",
        //         "state": "live",
        //         "sz": "1",
        //         "szLimit": "",
        //         "tag": "",
        //         "tdMode": "isolated",
        //         "tgtCcy": "",
        //         "timeInterval": "",
        //         "tpOrdPx": "",
        //         "tpTriggerPx": "",
        //         "tpTriggerPxType": "",
        //         "triggerPx": "50000",
        //         "triggerPxType": "last",
        //         "triggerTime": "",
        //         "uly": "BTC-USDT"
        //     }
        //
        const id = this.safeString2(order, 'tpslId', 'orderId');
        const timestamp = this.safeInteger(order, 'createTime');
        const lastTradeTimestamp = this.safeInteger(order, 'updateTime');
        const side = this.safeString(order, 'side');
        let type = this.safeString(order, 'orderType');
        let postOnly = undefined;
        let timeInForce = undefined;
        if (type === 'post_only') {
            postOnly = true;
            type = 'limit';
        }
        else if (type === 'fok') {
            timeInForce = 'FOK';
            type = 'limit';
        }
        else if (type === 'ioc') {
            timeInForce = 'IOC';
            type = 'limit';
        }
        else if (type === 'conditional') {
            type = 'stop';
        }
        else if (type === 'trigger') {
            type = 'stoplimit';
        }
        const marketId = this.safeString(order, 'instId');
        market = this.safeMarket(marketId, market);
        const symbol = marketId;
        const filled = this.safeString(order, 'filledSize');
        let price = this.safeNumber2(order, 'px', 'price');
        const average = this.safeString(order, 'averagePrice');
        const status = this.parseOrderStatus(this.safeString(order, 'state'));
        const feeCostString = this.safeString(order, 'fee');
        let amount = undefined;
        // let cost = undefined;
        // spot market buy: "sz" can refer either to base currency units or to quote currency units
        // see documentation: https://www.okx.com/docs-v5/en/#rest-api-trade-place-order
        // const defaultTgtCcy = this.safeString (this.options, 'tgtCcy', 'base_ccy');
        // const tgtCcy = this.safeString (order, 'tgtCcy', defaultTgtCcy);
        // const instType = this.safeString (order, 'instType');
        // "sz" refers to the trade currency amount
        amount = this.safeString(order, 'size');
        let fee = undefined;
        if (feeCostString !== undefined) {
            const feeCostSigned = Precise.stringNeg(feeCostString);
            const feeCurrencyId = 'USDT';
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': this.parseNumber(feeCostSigned),
                'currency': feeCurrencyCode,
            };
        }
        let clientOrderId = this.safeString(order, 'clientOrderId');
        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {
            clientOrderId = undefined; // fix empty clientOrderId string
        }
        const stopLossPrice = this.safeNumber2(order, 'slTriggerPrice', 'slOrderPrice');
        const takeProfitPrice = this.safeNumber2(order, 'tpTriggerPrice', 'tpOrderPrice');
        const stopLossOrderPrice = this.safeNumber(order, 'slOrderPrice');
        const takeProfitOrderPrice = this.safeNumber(order, 'tpOrderPrice');
        let triggerPrice = undefined;
        let stopPrice = undefined;
        if (stopLossPrice) {
            if (stopLossOrderPrice === -1) {
                type = 'stop';
                stopPrice = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
                triggerPrice = stopPrice;
            }
            else {
                type = 'stoplimit';
                stopPrice = this.safeNumber2(order, 'tpOrderPrice', 'slOrderPrice');
                price = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
            }
        }
        else if (takeProfitPrice) {
            if (takeProfitOrderPrice === -1) {
                type = 'stop';
                stopPrice = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
                triggerPrice = stopPrice;
            }
            else {
                type = 'stoplimit';
                stopPrice = this.safeNumber2(order, 'tpOrderPrice', 'slOrderPrice');
                price = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
            }
        }
        // const stopPrice = this.safeNumberN (order, [ 'price', 'stopPrice', 'slTriggerPrice, tpTriggerPrice' ]);
        const reduceOnlyRaw = this.safeString(order, 'reduceOnly');
        let reduceOnly = false;
        if (reduceOnlyRaw) {
            reduceOnly = (reduceOnlyRaw === 'true');
        }
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopLossPrice': stopLossPrice,
            'takeProfitPrice': takeProfitPrice,
            'stopPrice': stopPrice,
            'triggerPrice': triggerPrice,
            'average': average,
            'cost': undefined,
            'amount': amount,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': fee,
            'trades': undefined,
            'reduceOnly': reduceOnly,
            'close': reduceOnly,
            'reduce': reduceOnly,
            'trigger': 'last',
        }, market);
    }
    parseOrderStatus(status) {
        const statuses = {
            'canceled': 'canceled',
            'order_failed': 'canceled',
            'live': 'open',
            'partially_filled': 'open',
            'filled': 'closed',
            'effective': 'closed',
        };
        return this.safeString(statuses, status, status);
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
            // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'uly': currency['id'],
            // 'instId': market['id'],
            // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated, stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
            // 'state': 'live', // live, partially_filled
            // 'after': orderId,
            // 'before': orderId,
            // 'limit': limit, // default 100, max 100
            'limit': 100,
        };
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['instId'] = market['id'];
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        const query = this.omit(params, ['method', 'stop']);
        const response = await this.v1PrivateGetTradeOrdersPending(this.extend(request, query));
        const data = this.safeValue(response, 'data', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchOpenStopOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
            // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'uly': currency['id'],
            // 'instId': market['id'],
            // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated, stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
            // 'state': 'live', // live, partially_filled
            // 'after': orderId,
            // 'before': orderId,
            // 'limit': limit, // default 100, max 100
            'limit': 100,
        };
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['instId'] = market['id'];
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        const query = this.omit(params, ['method', 'stop']);
        const response = await this.v1PrivateGetTradeOrdersTpslPending(this.extend(request, query));
        const data = this.safeValue(response, 'data', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            limit = Math.min(limit, 1000);
            request['max_level'] = limit;
        }
        const response = await this.v1PrivateGetOrderbookSymbol(this.extend(request, params));
        //
        // {
        //   success: true,
        //   timestamp: '1641562961192',
        //   asks: [
        //     { price: '0.921', quantity: '76.01' },
        //     { price: '0.933', quantity: '477.10' },
        //     ...
        //   ],
        //   bids: [
        //     { price: '0.940', quantity: '13502.47' },
        //     { price: '0.932', quantity: '43.91' },
        //     ...
        //   ]
        // }
        //
        const timestamp = this.safeInteger(response, 'timestamp');
        return this.parseOrderBook(response, symbol, timestamp, 'bids', 'asks', 'price', 'quantity');
    }
    parseOHLCV(ohlcv, market = undefined) {
        //
        //     [
        //         "1678928760000", // timestamp
        //         "24341.4", // open
        //         "24344", // high
        //         "24313.2", // low
        //         "24323", // close
        //         "628", // contract volume
        //         "2.5819", // base volume
        //         "62800", // quote volume
        //         "0" // candlestick state
        //     ]
        //
        return [
            this.safeInteger(ohlcv, 0),
            this.safeNumber(ohlcv, 1),
            this.safeNumber(ohlcv, 2),
            this.safeNumber(ohlcv, 3),
            this.safeNumber(ohlcv, 4),
            this.safeNumber(ohlcv, 7),
        ];
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        params = this.omit(params, 'price');
        const options = this.safeValue(this.options, 'fetchOHLCV', {});
        const timezone = this.safeString(options, 'timezone', 'UTC');
        if (limit === undefined) {
            limit = 100;
        }
        const duration = this.parseTimeframe(timeframe);
        let bar = this.safeString(this.timeframes, timeframe, timeframe);
        if ((timezone === 'UTC') && (duration >= 21600)) { // if utc and timeframe >= 6h
            bar += timezone.toLowerCase();
        }
        const request = {
            'instId': market['id'],
            'bar': bar,
            'limit': limit,
        };
        if (since !== undefined) {
            const durationInMilliseconds = duration * 1000;
            const startTime = Math.max(since - 1, 0);
            request['before'] = startTime;
            request['after'] = this.sum(startTime, durationInMilliseconds * limit);
        }
        const until = this.safeInteger(params, 'until');
        if (until !== undefined) {
            request['after'] = until;
            params = this.omit(params, 'until');
        }
        params = this.omit(params, 'type');
        const response = await this.v1PublicGetMarketCandles(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             ["1678928760000","24341.4","24344","24313.2","24323","628","2.5819","62800","0"],
        //             ["1678928700000","24324.1","24347.6","24321.7","24341.4","2565","10.5401","256500","1"],
        //             ["1678928640000","24300.2","24324.1","24288","24324.1","3304","13.5937","330400","1"],
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseOHLCVs(data, market, timeframe, since, limit);
    }
    async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrderTrades
         * @description fetch all the trades made from a single order
         * @param {string} id order id
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        const request = {
            'oid': id,
        };
        const response = await this.v1PrivateGetOrderOidTrades(this.extend(request, params));
        // {
        //     success: true,
        //     rows: [
        //       {
        //         id: '99111647',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641482113.084',
        //         order_id: '87541111',
        //         order_tag: 'default',
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //       }
        //     ]
        // }
        const trades = this.safeValue(response, 'rows', []);
        return this.parseTrades(trades, market, since, limit, params);
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        const response = await this.v1PrivateGetClientTrades(this.extend(request, params));
        // {
        //     "success": true,
        //     "meta": {
        //         "records_per_page": 25,
        //         "current_page": 1
        //     },
        //     "rows": [
        //         {
        //             "id": 5,
        //             "symbol": "SPOT_BTC_USDT",
        //             "order_id": 211,
        //             "order_tag": "default",
        //             "executed_price": 10892.84,
        //             "executed_quantity": 0.002,
        //             "is_maker": 0,
        //             "side": "SELL",
        //             "fee": 0,
        //             "fee_asset": "USDT",
        //             "executed_timestamp": "1566264290.250"
        //         },
        //         ...
        //     ]
        // }
        const trades = this.safeValue(response, 'rows', []);
        return this.parseTrades(trades, market, since, limit, params);
    }
    async fetchAccounts(params = {}) {
        /**
         * @method
         * @name woo#fetchAccounts
         * @description fetch all the accounts associated with a profile
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
         */
        const response = await this.v1PrivateGetSubAccountAssets(params);
        //
        //     {
        //         rows: [{
        //                 application_id: '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
        //                 account: 'Main',
        //                 usdt_balance: '4.0'
        //             },
        //             {
        //                 application_id: '432952aa-a401-4e26-aff6-972920aebba3',
        //                 account: 'subaccount',
        //                 usdt_balance: '1.0'
        //             }
        //         ],
        //         success: true
        //     }
        //
        const rows = this.safeValue(response, 'rows', []);
        return this.parseAccounts(rows, params);
    }
    parseAccount(account) {
        //
        //     {
        //         application_id: '336952aa-a401-4e26-aff6-972920aebba3',
        //         account: 'subaccount',
        //         usdt_balance: '1.0',
        //     }
        //
        const accountId = this.safeString(account, 'account');
        return {
            'info': account,
            'id': this.safeString(account, 'application_id'),
            'name': accountId,
            'code': undefined,
            'type': accountId === 'Main' ? 'main' : 'subaccount',
        };
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name woo#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://docs.woo.org/#get-current-holding-get-balance-new
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const response = await this.v1PrivateGetAssetBalances({
            'accountType': 'futures',
        });
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "holding": [
        //                 {
        //                     "token": "0_token",
        //                     "holding": 1,
        //                     "frozen": 0,
        //                     "staked": 0,
        //                     "unbonding": 0,
        //                     "vault": 0,
        //                     "interest": 0,
        //                     "pendingShortQty": 0,
        //                     "pendingLongQty": 0,
        //                     "availableBalance": 0,
        //                     "updatedTime": 312321.121
        //                 }
        //             ]
        //         },
        //         "timestamp": 1673323746259
        //     }
        //
        return this.parseBalance(response);
    }
    parseBalance(response) {
        // {
        //     "arg":{
        //        "channel":"account"
        //     },
        //     "data":{
        //        "ts":"1704393619013",
        //        "totalEquity":"256.178577844908301002183444330",
        //        "isolatedEquity":"0.000000",
        //        "details":[
        //           {
        //              "currency":"USDT",
        //              "equity":"255.921376861162832355666",
        //              "available":"201.107018742055904790666",
        //              "balance":"198.028033493752832355",
        //              "ts":"1704393619013",
        //              "isolatedEquity":"0",
        //              "equityUsd":"256.178577844908301002183444330",
        //              "availableEquity":"201.107018742055904790666",
        //              "frozen":"0.26160000000000003",
        //              "orderFrozen":"0.26160000000000003",
        //              "unrealizedPnl":"57.893343367410000000666",
        //              "isolatedUnrealizedPnl":"0"
        //           }
        //        ]
        //     }
        //  }
        const result = {
            'info': response,
        };
        const balances = this.safeValue(response, 'data', []);
        for (let i = 0; i < balances.length; i++) {
            const balance = balances[i];
            const code = this.safeCurrencyCode(this.safeString(balance, 'currency'));
            const account = this.account();
            account['total'] = this.safeString(balance, 'balance');
            account['free'] = Precise.stringAdd(this.safeString(balance, 'available'), this.safeString(balance, 'bonus'));
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    getCurrencyFromChaincode(networkizedCode, currency) {
        if (currency !== undefined) {
            return currency;
        }
        else {
            const parts = networkizedCode.split('_');
            const partsLength = parts.length;
            const firstPart = this.safeString(parts, 0);
            let currencyId = this.safeString(parts, 1, firstPart);
            if (partsLength > 2) {
                currencyId += '_' + this.safeString(parts, 2);
            }
            currency = this.safeCurrency(currencyId);
        }
        return currency;
    }
    nonce() {
        return this.milliseconds();
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const isArray = Array.isArray(params);
        const request = '/api/' + this.version + '/' + this.implodeParams(path, params);
        const query = this.omit(params, this.extractParams(path));
        let url = this.implodeHostname(this.urls['api']['rest']) + request;
        // const type = this.getPathAuthenticationType (path);
        if (api[1] === 'public') {
            if (Object.keys(query).length) {
                url += '?' + this.urlencode(query);
            }
        }
        else if (api[1] === 'private') {
            this.checkRequiredCredentials();
            const timestamp = this.numberToString(this.milliseconds());
            const nonce = this.uuid();
            headers = {
                'ACCESS-KEY': this.apiKey,
                'ACCESS-PASSPHRASE': this.password,
                'ACCESS-TIMESTAMP': timestamp,
                'ACCESS-NONCE': nonce,
                // 'OK-FROM': '',
                // 'OK-TO': '',
                // 'OK-LIMIT': '',
            };
            let auth = request + method + timestamp + nonce;
            if (method === 'GET') {
                if (Object.keys(query).length) {
                    const urlencodedQuery = '?' + this.urlencode(query);
                    url += urlencodedQuery;
                    auth = request + urlencodedQuery + method + timestamp + nonce;
                }
            }
            else {
                if (isArray || Object.keys(query).length) {
                    body = this.json(query);
                    auth += body;
                }
                headers['Content-Type'] = 'application/json';
            }
            const signature = this.binaryToBase64(this.encode(this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'hex')));
            headers['ACCESS-SIGN'] = signature;
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    parseIncome(income, market = undefined) {
        //
        //     {
        //         "id":666666,
        //         "symbol":"PERP_BTC_USDT",
        //         "funding_rate":0.00001198,
        //         "mark_price":28941.04000000,
        //         "funding_fee":0.00069343,
        //         "payment_type":"Pay",
        //         "status":"COMPLETED",
        //         "created_time":"1653616000.666",
        //         "updated_time":"1653616000.605"
        //     }
        //
        const marketId = this.safeString(income, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const amount = this.safeNumber(income, 'funding_fee');
        const code = this.safeCurrencyCode('USD');
        const id = this.safeString(income, 'id');
        const timestamp = this.safeTimestamp(income, 'updated_time');
        const rate = this.safeNumber(income, 'funding_rate');
        return {
            'info': income,
            'symbol': symbol,
            'code': code,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'id': id,
            'amount': amount,
            'rate': rate,
        };
    }
    async fetchLeverage(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchLeverage
         * @description fetch the set leverage for a market
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string} params.marginMode 'cross' or 'isolated'
         * @returns {object} a [leverage structure]{@link https://docs.ccxt.com/#/?id=leverage-structure}
         */
        await this.loadMarkets();
        let marginMode = undefined;
        [marginMode, params] = this.handleMarginModeAndParams('fetchLeverage', params);
        if (marginMode === undefined) {
            marginMode = this.safeString(params, 'marginMode', 'cross'); // cross as default marginMode
        }
        if ((marginMode !== 'cross') && (marginMode !== 'isolated')) {
            throw new BadRequest(this.id + ' fetchLeverage() requires a marginMode parameter that must be either cross or isolated');
        }
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
            'marginMode': marginMode,
        };
        const response = await this.v1PrivateGetAccountLeverageInfo(this.extend(request, params));
        //
        //     {
        //        "code": "0",
        //        "data": [
        //            {
        //                "instId": "BTC-USDT-SWAP",
        //                "lever": "5.00000000",
        //                "mgnMode": "isolated",
        //                "posSide": "net"
        //            }
        //        ],
        //        "msg": ""
        //     }
        //
        return response;
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        await this.loadMarkets();
        // if ((leverage !== 1) && (leverage !== 2) && (leverage !== 3) && (leverage !== 4) && (leverage !== 5) && (leverage !== 10) && (leverage !== 15) && (leverage !== 20) && (leverage !== 50)) {
        //     throw new BadRequest (this.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
        // }
        const positionMode = this.safeString(params, 'positionMode', 'oneway');
        if (positionMode === 'oneway') {
            const request = {
                'instId': symbol,
                'leverage': leverage,
                'marginMode': params['marginMode'],
            };
            return await this.v1PrivatePostAccountSetLeverage(this.extend(request, params));
        }
        else {
            const promises = [];
            const request = {
                'instId': symbol,
                'marginMode': params['marginMode'],
            };
            const buyLeverage = this.safeString(params, 'buyLeverage');
            if (buyLeverage !== undefined) {
                const buyRequest = this.extend(request, {
                    'positionSide': 'long',
                    'leverage': buyLeverage,
                });
                promises.push(this.v1PrivatePostAccountSetLeverage(buyRequest));
            }
            const sellLeverage = this.safeString(params, 'sellLeverage');
            if (sellLeverage !== undefined) {
                const sellRequest = this.extend(request, {
                    'positionSide': 'short',
                    'leverage': sellLeverage,
                });
                promises.push(this.v1PrivatePostAccountSetLeverage(sellRequest));
            }
            return await Promise.all(promises);
        }
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
            'marginMode': marginMode,
        };
        return await this.v1PrivatePostAccountSetMarginMode(this.extend(request, params));
    }
    async fetchPositions(symbols = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
        // 'instType': 'MARGIN', // optional string, MARGIN, SWAP, FUTURES, OPTION
        // 'instId': market['id'], // optional string, e.g. 'BTC-USD-190927-5000-C'
        // 'posId': '307173036051017730', // optional string, Single or multiple position IDs (no more than 20) separated with commas
        };
        if (symbols !== undefined) {
            const marketIds = [];
            for (let i = 0; i < symbols.length; i++) {
                const entry = symbols[i];
                const market = this.market(entry);
                marketIds.push(market['id']);
            }
            const marketIdsLength = marketIds.length;
            if (marketIdsLength > 0) {
                request['instId'] = marketIds.join(',');
            }
        }
        const response = await this.v1PrivateGetAccountPositions(this.extend(request, params));
        const positions = this.safeValue(response, 'data', []);
        const result = [];
        for (let i = 0; i < positions.length; i++) {
            result.push(this.parsePosition(positions[i]));
        }
        return this.filterByArray(result, 'symbol', symbols, false);
    }
    parsePosition(position, market = undefined) {
        //
        //     {
        //       "adl": "3",
        //       "availPos": "1",
        //       "avgPx": "34131.1",
        //       "cTime": "1627227626502",
        //       "ccy": "USDT",
        //       "deltaBS": "",
        //       "deltaPA": "",
        //       "gammaBS": "",
        //       "gammaPA": "",
        //       "imr": "170.66093041794787",
        //       "instId": "BTC-USDT-SWAP",
        //       "instType": "SWAP",
        //       "interest": "0",
        //       "last": "34134.4",
        //       "lever": "2",
        //       "liab": "",
        //       "liabCcy": "",
        //       "liqPx": "12608.959083877446",
        //       "margin": "",
        //       "mgnMode": "cross",
        //       "mgnRatio": "140.49930117599155",
        //       "mmr": "1.3652874433435829",
        //       "notionalUsd": "341.5130010779638",
        //       "optVal": "",
        //       "pos": "1",
        //       "posCcy": "",
        //       "posId": "339552508062380036",
        //       "posSide": "long",
        //       "thetaBS": "",
        //       "thetaPA": "",
        //       "tradeId": "98617799",
        //       "uTime": "1627227626502",
        //       "upl": "0.0108608358957281",
        //       "uplRatio": "0.0000636418743944",
        //       "vegaBS": "",
        //       "vegaPA": ""
        //     }
        //
        const marketId = this.safeString(position, 'instId');
        market = this.safeMarket(marketId, market);
        // const symbol = market['symbol'];
        const symbol = marketId;
        const contractsString = this.safeString(position, 'positions');
        let contracts = undefined;
        if (contractsString !== undefined) {
            contracts = this.parseNumber(contractsString);
        }
        const notionalString = this.safeString(position, 'notionalUsd');
        const notional = this.parseNumber(notionalString);
        const marginType = this.safeString(position, 'marginMode');
        const entryPriceString = this.safeString(position, 'averagePrice');
        const unrealizedPnlString = this.safeString(position, 'unrealizedPnl');
        const initialMarginString = this.safeString2(position, 'initialMargin', 'margin');
        const maintenanceMarginString = this.safeString(position, 'maintenanceMargin');
        const maintenanceMargin = this.parseNumber(maintenanceMarginString);
        let initialMarginPercentage = undefined;
        let maintenanceMarginPercentage = undefined;
        if (market['inverse']) {
            const notionalValue = Precise.stringDiv(Precise.stringMul(contractsString, market['contractSize']), entryPriceString);
            maintenanceMarginPercentage = Precise.stringDiv(maintenanceMarginString, notionalValue);
            initialMarginPercentage = this.parseNumber(Precise.stringDiv(initialMarginString, notionalValue, 4));
        }
        else {
            maintenanceMarginPercentage = Precise.stringDiv(maintenanceMarginString, notionalString);
            initialMarginPercentage = this.parseNumber(Precise.stringDiv(initialMarginString, notionalString, 4));
        }
        const rounder = '0.00005'; // round to closest 0.01%
        maintenanceMarginPercentage = this.parseNumber(Precise.stringDiv(Precise.stringAdd(maintenanceMarginPercentage, rounder), '1', 4));
        const collateralString = Precise.stringAdd(initialMarginString, unrealizedPnlString);
        const liquidationPrice = this.safeNumber(position, 'liquidationPrice');
        const percentageString = this.safeString(position, 'unrealizedPnlRatio');
        const percentage = this.parseNumber(Precise.stringMul(percentageString, '100'));
        let side = this.safeString(position, 'positionSide');
        if (side === 'net') {
            side = Precise.stringGt(contractsString, '0') ? 'long' : 'short';
        }
        if (side === 'short' && Precise.stringGt(contractsString, '0')) {
            contracts = contracts * -1;
        }
        const timestamp = this.safeInteger(position, 'updateTime');
        const leverage = this.safeInteger(position, 'leverage');
        const marginRatio = this.parseNumber(Precise.stringDiv(maintenanceMarginString, collateralString, 4));
        const id = symbol + ':' + side + ':' + marginType;
        let status = 'closed';
        if (contractsString !== '0') {
            status = 'open';
        }
        return {
            'id': id,
            'info': this.deepExtend(position, { 'symbol': symbol }),
            'symbol': symbol,
            'notional': notional,
            'marginType': marginType,
            'liquidationPrice': liquidationPrice,
            'entryPrice': this.parseNumber(entryPriceString),
            'unrealizedPnl': this.parseNumber(unrealizedPnlString),
            'percentage': percentage,
            'contracts': contracts,
            'contractSize': this.parseNumber(market['contractSize']),
            'side': side,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'maintenanceMargin': maintenanceMargin,
            'maintenanceMarginPercentage': maintenanceMarginPercentage,
            'collateral': this.parseNumber(collateralString),
            'initialMargin': this.parseNumber(initialMarginString),
            'initialMarginPercentage': this.parseNumber(initialMarginPercentage),
            'leverage': leverage,
            'marginRatio': marginRatio,
            'isolated': marginType !== 'cross',
            'status': status,
            'tradeMode': 'oneway',
            // 'info': info,
            // 'id': id,
            // 'symbol': symbol,
            // 'timestamp': timestamp,
            // 'datetime': datetime,
            // 'isolated': isolated,
            // 'hedged': hedged,
            // 'side': side,
            // 'contracts': contracts,
            // 'price': price,
            // 'markPrice': markPrice,
            // 'notional': notional,
            // 'leverage': leverage,
            // 'initialMargin': initialMargin,
            // 'maintenanceMargin': maintenanceMargin,
            // 'initialMarginPercentage': initialMarginPercentage,
            // 'maintenanceMarginPercentage': maintenanceMarginPercentage,
            // 'unrealizedPnl': unrealizedPnl,
            // 'pnl': pnl,
            // 'liquidationPrice': liquidationPrice,
            // 'status': status,
            // 'entryPrice': entryPrice,
            // 'marginRatio': marginRatio,
            // 'collateral': collateral,
            // 'marginType': marginType,
            // 'percentage': percentage,
            // 'maxLeverage': maxLeverage,
            // 'tradeMode': tradeMode,
        };
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        let positionMode = 'net_mode';
        if (hedged) {
            positionMode = 'long_short_mode';
        }
        const request = {
            'positionMode': positionMode,
        };
        return await this.v1PrivatePostAccountSetPositionMode(this.extend(request, params));
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        await this.loadMarkets();
        if (symbol === 'BTC/USDT:USDT') {
            symbol = 'BTC-USDT';
        }
        const market = this.market(symbol);
        const marginModeRequest = {
            'instId': market['id'],
        };
        const marginModeResponse = await this.v1PrivateGetAccountMarginMode(marginModeRequest);
        const marginModeData = this.safeValue(marginModeResponse, 'data');
        const marginMode = this.safeString(marginModeData, 'marginMode');
        const posModeRequest = {
            'instId': market['id'],
            'marginMode': marginMode,
        };
        const posModeRes = await this.v1PrivateGetAccountBatchLeverageInfo(posModeRequest);
        const posModeData = this.safeValue(posModeRes, 'data');
        let accountConfig = {};
        if (posModeData.length === 1) {
            const posInfo = this.safeValue(posModeData, 0);
            const leverage = this.safeString(posInfo, 'leverage');
            accountConfig = {
                'marginMode': marginMode,
                'positionMode': 'oneway',
                'leverage': leverage,
                'markets': {},
            };
            accountConfig['markets'][symbol] = {
                'leverage': leverage,
            };
        }
        else {
            const buyPosInfo = this.safeValue(posModeData, 0);
            const sellPosInfo = this.safeValue(posModeData, 1);
            const buyLeverage = this.safeString(buyPosInfo, 'leverage');
            const sellLeverage = this.safeString(sellPosInfo, 'leverage');
            accountConfig = {
                'marginMode': marginMode,
                'positionMode': 'hedged',
                'buyLeverage': buyLeverage,
                'sellLeverage': sellLeverage,
                'markets': {},
            };
            accountConfig['markets'][symbol] = {
                'buyLeverage': buyLeverage,
                'sellLeverage': sellLeverage,
            };
        }
        return accountConfig;
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (!response) {
            return; // fallback to default error handler
        }
        //
        //    {
        //        "code": "1",
        //        "data": [
        //            {
        //                "clOrdId": "",
        //                "ordId": "",
        //                "sCode": "51119",
        //                "sMsg": "Order placement failed due to insufficient balance. ",
        //                "tag": ""
        //            }
        //        ],
        //        "msg": ""
        //    },
        //    {
        //        "code": "58001",
        //        "data": [],
        //        "msg": "Incorrect trade password"
        //    }
        //
        const code = this.safeString(response, 'code');
        const data = this.safeValue(response, 'data', []);
        if (code !== '0' && code !== '1') {
            const feedback = this.id + ' ' + body;
            for (let i = 0; i < data.length; i++) {
                const error = data[i];
                const errorCode = this.safeString(error, 'sCode');
                const message = this.safeString(error, 'sMsg');
                this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
                this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
            }
            this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);
            throw new ExchangeError(feedback); // unknown message
        }
        for (let i = 0; i < data.length; i++) {
            // hack bc not always array and this.isArray not working
            let error = null;
            try {
                error = data[i];
            }
            catch (e) {
                continue;
            }
            const errorCode = this.safeString2(error, 'sCode', 'code', '0');
            if (errorCode !== '0') {
                const message = this.safeString2(error, 'sMsg', 'msg');
                const feedback = this.id + ' ' + message;
                this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
                this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
                // fuck it cant keep up with all the blofin errors
                throw new InvalidOrder(feedback);
            }
        }
    }
    market(symbol) {
        symbol = symbol.replace('/', '-');
        // symbol = symbol + ':USDT';
        if (this.markets === undefined) {
            throw new ExchangeError(this.id + ' markets not loaded');
        }
        if (this.markets_by_id === undefined) {
            throw new ExchangeError(this.id + ' markets not loaded');
        }
        // TEALSTREET patch for backwards compatability
        // this.marketHelper (symbol.split (':')[0]);
        let foundMarket = this.marketHelper(symbol);
        if (foundMarket) {
            return foundMarket;
        }
        const marketStem = symbol.split(':')[0];
        const marketParts = marketStem.split('/');
        if (marketParts.length === 2) {
            foundMarket = this.marketHelper(marketParts[0] + '/' + marketParts[1] + ':' + marketParts[1]);
        }
        if (foundMarket) {
            return foundMarket;
        }
        foundMarket = this.marketHelper(marketStem + ':USDT') || this.marketHelper(marketStem + ':BTC') || this.marketHelper(marketStem);
        if (foundMarket) {
            return foundMarket;
        }
        // eslint-disable-next-line no-console
        // console.log (symbol);
        // eslint-disable-next-line no-console
        // console.log (this.markets);
        throw new BadSymbol(this.id + ' does not have market symbol ' + symbol);
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bybit$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bybit',
            'name': 'Bybit',
            'countries': ['VG'],
            'version': 'v5',
            'userAgent': undefined,
            'rateLimit': 20,
            'hostname': 'bybit.com',
            'refCode': 'Tealstreet',
            'pro': true,
            'certified': true,
            'has': {
                'CORS': true,
                'spot': true,
                'margin': true,
                'swap': true,
                'future': true,
                'option': undefined,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'createOrder': true,
                'createPostOnlyOrder': true,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': true,
                'createStopMarketOrder': true,
                'createStopOrder': true,
                'editOrder': true,
                'fetchBalance': true,
                'fetchBorrowInterest': false,
                'fetchBorrowRate': true,
                'fetchBorrowRateHistories': false,
                'fetchBorrowRateHistory': false,
                'fetchBorrowRates': false,
                'fetchCanceledOrders': true,
                'fetchClosedOrders': true,
                'fetchCurrencies': true,
                'fetchDeposit': false,
                'fetchDepositAddress': true,
                'fetchDepositAddresses': false,
                'fetchDepositAddressesByNetwork': true,
                'fetchDeposits': true,
                'fetchFundingRate': true,
                'fetchFundingRateHistory': true,
                'fetchFundingRates': true,
                'fetchIndexOHLCV': true,
                'fetchLedger': true,
                'fetchMarketLeverageTiers': true,
                'fetchMarkets': true,
                'fetchMarkOHLCV': true,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenInterest': true,
                'fetchOpenInterestHistory': true,
                'fetchOpenOrders': true,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrders': true,
                'fetchOrderTrades': true,
                'fetchPosition': true,
                'fetchPositions': true,
                'fetchPremiumIndexOHLCV': true,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': true,
                'fetchTrades': true,
                'fetchTradingFee': true,
                'fetchTradingFees': true,
                'fetchTransactions': false,
                'fetchTransfers': true,
                'fetchWithdrawals': true,
                'setLeverage': true,
                'setMarginMode': true,
                'setPositionMode': true,
                'transfer': true,
                'withdraw': true,
            },
            'timeframes': {
                '1m': '1',
                '3m': '3',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '4h': '240',
                '6h': '360',
                '12h': '720',
                '1d': 'D',
                '1w': 'W',
                '1M': 'M',
            },
            'urls': {
                'test': {
                    'spot': 'https://api-testnet.{hostname}',
                    'futures': 'https://api-testnet.{hostname}',
                    'v2': 'https://api-testnet.{hostname}',
                    'public': 'https://api-testnet.{hostname}',
                    'private': 'https://api-testnet.{hostname}',
                },
                'logo': 'https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg',
                'api': {
                    'spot': 'https://api.{hostname}',
                    'futures': 'https://api.{hostname}',
                    'v2': 'https://api.{hostname}',
                    'public': 'https://api.{hostname}',
                    'private': 'https://api.{hostname}',
                },
                'www': 'https://www.bybit.com',
                'doc': [
                    'https://bybit-exchange.github.io/docs/inverse/',
                    'https://bybit-exchange.github.io/docs/linear/',
                    'https://github.com/bybit-exchange',
                ],
                'fees': 'https://help.bybit.com/hc/en-us/articles/360039261154',
                'referral': 'https://www.bybit.com/register?affiliate_id=35953',
            },
            'api': {
                'public': {
                    'get': {
                        // inverse swap
                        'v2/public/orderBook/L2': 1,
                        'v2/public/kline/list': 3,
                        'v2/public/tickers': 1,
                        'v2/public/trading-records': 1,
                        'v2/public/symbols': 1,
                        'v2/public/mark-price-kline': 3,
                        'v2/public/index-price-kline': 3,
                        'v2/public/premium-index-kline': 2,
                        'v2/public/open-interest': 1,
                        'v2/public/big-deal': 1,
                        'v2/public/account-ratio': 1,
                        'v2/public/funding-rate': 1,
                        'v2/public/elite-ratio': 1,
                        'v2/public/funding/prev-funding-rate': 1,
                        'v2/public/risk-limit/list': 1,
                        // linear swap USDT
                        'public/linear/kline': 3,
                        'public/linear/recent-trading-records': 1,
                        'public/linear/risk-limit': 1,
                        'public/linear/funding/prev-funding-rate': 1,
                        'public/linear/mark-price-kline': 1,
                        'public/linear/index-price-kline': 1,
                        'public/linear/premium-index-kline': 1,
                        // spot
                        'spot/v1/time': 1,
                        'spot/v1/symbols': 1,
                        'spot/quote/v1/depth': 1,
                        'spot/quote/v1/depth/merged': 1,
                        'spot/quote/v1/trades': 1,
                        'spot/quote/v1/kline': 1,
                        'spot/quote/v1/ticker/24hr': 1,
                        'spot/quote/v1/ticker/price': 1,
                        'spot/quote/v1/ticker/book_ticker': 1,
                        'spot/v3/public/symbols': 1,
                        'spot/v3/public/quote/depth': 1,
                        'spot/v3/public/quote/depth/merged': 1,
                        'spot/v3/public/quote/trades': 1,
                        'spot/v3/public/quote/kline': 1,
                        'spot/v3/public/quote/ticker/24hr': 1,
                        'spot/v3/public/quote/ticker/price': 1,
                        'spot/v3/public/quote/ticker/bookTicker': 1,
                        'spot/v3/public/server-time': 1,
                        'spot/v3/public/infos': 1,
                        // data
                        'v2/public/time': 1,
                        'v3/public/time': 1,
                        'v2/public/announcement': 1,
                        // USDC endpoints
                        // option USDC
                        'option/usdc/openapi/public/v1/order-book': 1,
                        'option/usdc/openapi/public/v1/symbols': 1,
                        'option/usdc/openapi/public/v1/tick': 1,
                        'option/usdc/openapi/public/v1/delivery-price': 1,
                        'option/usdc/openapi/public/v1/query-trade-latest': 1,
                        'option/usdc/openapi/public/v1/query-historical-volatility': 1,
                        'option/usdc/openapi/public/v1/all-tickers': 1,
                        // perpetual swap USDC
                        'perpetual/usdc/openapi/public/v1/order-book': 1,
                        'perpetual/usdc/openapi/public/v1/symbols': 1,
                        'perpetual/usdc/openapi/public/v1/tick': 1,
                        'perpetual/usdc/openapi/public/v1/kline/list': 1,
                        'perpetual/usdc/openapi/public/v1/mark-price-kline': 1,
                        'perpetual/usdc/openapi/public/v1/index-price-kline': 1,
                        'perpetual/usdc/openapi/public/v1/premium-index-kline': 1,
                        'perpetual/usdc/openapi/public/v1/open-interest': 1,
                        'perpetual/usdc/openapi/public/v1/big-deal': 1,
                        'perpetual/usdc/openapi/public/v1/account-ratio': 1,
                        'perpetual/usdc/openapi/public/v1/prev-funding-rate': 1,
                        'perpetual/usdc/openapi/public/v1/risk-limit/list': 1,
                        // account
                        'asset/v1/public/deposit/allowed-deposit-list': 1,
                        'contract/v3/public/copytrading/symbol/list': 1,
                        // derivative
                        'derivatives/v3/public/order-book/L2': 1,
                        'derivatives/v3/public/kline': 1,
                        'derivatives/v3/public/tickers': 1,
                        'derivatives/v3/public/instruments-info': 1,
                        'derivatives/v3/public/mark-price-kline': 1,
                        'derivatives/v3/public/index-price-kline': 1,
                        'derivatives/v3/public/funding/history-funding-rate': 1,
                        'derivatives/v3/public/risk-limit/list': 1,
                        'derivatives/v3/public/delivery-price': 1,
                        'derivatives/v3/public/recent-trade': 1,
                        'derivatives/v3/public/open-interest': 1,
                        'derivatives/v3/public/insurance': 1,
                        // v5
                        'v5/market/kline': 1,
                        'v5/market/mark-price-kline': 1,
                        'v5/market/index-price-kline': 1,
                        'v5/market/premium-index-price-kline': 1,
                        'v5/market/instruments-info': 1,
                        'v5/market/orderbook': 1,
                        'v5/market/tickers': 1,
                        'v5/market/funding/history': 1,
                        'v5/market/recent-trade': 1,
                        'v5/market/open-interest': 1,
                        'v5/market/historical-volatility': 1,
                        'v5/market/insurance': 1,
                        'v5/market/risk-limit': 1,
                        'v5/market/delivery-price': 1,
                        'v5/spot-lever-token/info': 1,
                        'v5/spot-lever-token/reference': 1,
                    },
                },
                'private': {
                    'get': {
                        // inverse swap
                        'v2/private/order/list': 5,
                        'v2/private/order': 5,
                        'v2/private/stop-order/list': 5,
                        'v2/private/stop-order': 1,
                        'v2/private/position/list': 25,
                        'v2/private/position/fee-rate': 40,
                        'v2/private/execution/list': 25,
                        'v2/private/trade/closed-pnl/list': 1,
                        'v2/public/risk-limit/list': 1,
                        'v2/public/funding/prev-funding-rate': 25,
                        'v2/private/funding/prev-funding': 25,
                        'v2/private/funding/predicted-funding': 25,
                        'v2/private/account/api-key': 5,
                        'v2/private/account/lcp': 1,
                        'v2/private/wallet/balance': 25,
                        'v2/private/wallet/fund/records': 25,
                        'v2/private/wallet/withdraw/list': 25,
                        'v2/private/exchange-order/list': 1,
                        // linear swap USDT
                        'private/linear/order/list': 5,
                        'private/linear/order/search': 5,
                        'private/linear/stop-order/list': 5,
                        'private/linear/stop-order/search': 5,
                        'private/linear/position/list': 25,
                        'private/linear/trade/execution/list': 25,
                        'private/linear/trade/closed-pnl/list': 25,
                        'public/linear/risk-limit': 1,
                        'private/linear/funding/predicted-funding': 25,
                        'private/linear/funding/prev-funding': 25,
                        // inverse futures
                        'futures/private/order/list': 5,
                        'futures/private/order': 5,
                        'futures/private/stop-order/list': 5,
                        'futures/private/stop-order': 5,
                        'futures/private/position/list': 25,
                        'futures/private/execution/list': 25,
                        'futures/private/trade/closed-pnl/list': 1,
                        // spot
                        'spot/v1/account': 2.5,
                        'spot/v1/order': 2.5,
                        'spot/v1/open-orders': 2.5,
                        'spot/v1/history-orders': 2.5,
                        'spot/v1/myTrades': 2.5,
                        'spot/v1/cross-margin/order': 10,
                        'spot/v1/cross-margin/accounts/balance': 10,
                        'spot/v1/cross-margin/loan-info': 10,
                        'spot/v1/cross-margin/repay/history': 10,
                        'spot/v3/private/order': 2.5,
                        'spot/v3/private/open-orders': 2.5,
                        'spot/v3/private/history-orders': 2.5,
                        'spot/v3/private/my-trades': 2.5,
                        'spot/v3/private/account': 2.5,
                        'spot/v3/private/reference': 2.5,
                        'spot/v3/private/record': 2.5,
                        'spot/v3/private/cross-margin-orders': 10,
                        'spot/v3/private/cross-margin-account': 10,
                        'spot/v3/private/cross-margin-loan-info': 10,
                        'spot/v3/private/cross-margin-repay-history': 10,
                        // account
                        'asset/v1/private/transfer/list': 50,
                        'asset/v3/private/transfer/inter-transfer/list/query': 0.84,
                        'asset/v1/private/sub-member/transfer/list': 50,
                        'asset/v3/private/transfer/sub-member/list/query': 0.84,
                        'asset/v3/private/transfer/sub-member-transfer/list/query': 0.84,
                        'asset/v3/private/transfer/universal-transfer/list/query': 0.84,
                        'asset/v1/private/sub-member/member-ids': 50,
                        'asset/v1/private/deposit/record/query': 50,
                        'asset/v1/private/withdraw/record/query': 25,
                        'asset/v1/private/coin-info/query': 25,
                        'asset/v3/private/coin-info/query': 25,
                        'asset/v1/private/asset-info/query': 50,
                        'asset/v1/private/deposit/address': 100,
                        'asset/v3/private/deposit/address/query': 0.17,
                        'asset/v1/private/universal/transfer/list': 50,
                        'contract/v3/private/copytrading/order/list': 1,
                        'contract/v3/private/copytrading/position/list': 1,
                        'contract/v3/private/copytrading/wallet/balance': 1,
                        'contract/v3/private/position/limit-info': 25,
                        'contract/v3/private/order/unfilled-orders': 1,
                        'contract/v3/private/order/list': 1,
                        'contract/v3/private/position/list': 1,
                        'contract/v3/private/execution/list': 1,
                        'contract/v3/private/position/closed-pnl': 1,
                        'contract/v3/private/account/wallet/balance': 1,
                        'contract/v3/private/account/fee-rate': 1,
                        'contract/v3/private/account/wallet/fund-records': 1,
                        // derivative
                        'unified/v3/private/order/unfilled-orders': 1,
                        'unified/v3/private/order/list': 1,
                        'unified/v3/private/position/list': 1,
                        'unified/v3/private/execution/list': 1,
                        'unified/v3/private/delivery-record': 1,
                        'unified/v3/private/settlement-record': 1,
                        'unified/v3/private/account/wallet/balance': 1,
                        'unified/v3/private/account/transaction-log': 1,
                        'asset/v2/private/exchange/exchange-order-all': 1,
                        'unified/v3/private/account/borrow-history': 1,
                        'unified/v3/private/account/borrow-rate': 1,
                        'unified/v3/private/account/info': 1,
                        'user/v3/private/frozen-sub-member': 10,
                        'user/v3/private/query-sub-members': 5,
                        'user/v3/private/query-api': 5,
                        'asset/v3/private/transfer/transfer-coin/list/query': 0.84,
                        'asset/v3/private/transfer/account-coin/balance/query': 0.84,
                        'asset/v3/private/transfer/account-coins/balance/query': 50,
                        'asset/v3/private/transfer/asset-info/query': 0.84,
                        'asset/v3/public/deposit/allowed-deposit-list/query': 0.17,
                        'asset/v3/private/deposit/record/query': 0.17,
                        'asset/v3/private/withdraw/record/query': 0.17,
                        // v5
                        'v5/order/history': 2.5,
                        'v5/order/spot-borrow-check': 2.5,
                        'v5/order/realtime': 2.5,
                        'v5/position/list': 2.5,
                        'v5/execution/list': 2.5,
                        'v5/position/closed-pnl': 2.5,
                        'v5/account/wallet-balance': 2.5,
                        'v5/account/borrow-history': 2.5,
                        'v5/account/collateral-info': 2.5,
                        'v5/account/mmp-state': 2.5,
                        'v5/asset/coin-greeks': 2.5,
                        'v5/account/info': 2.5,
                        'v5/account/transaction-log': 2.5,
                        'v5/account/fee-rate': 1,
                        'v5/asset/exchange/order-record': 2.5,
                        'v5/asset/delivery-record': 2.5,
                        'v5/asset/settlement-record': 2.5,
                        'v5/asset/transfer/query-asset-info': 2.5,
                        'v5/asset/transfer/query-account-coin-balance': 2.5,
                        'v5/asset/transfer/query-transfer-coin-list': 2.5,
                        'v5/asset/transfer/query-inter-transfer-list': 2.5,
                        'v5/asset/transfer/query-sub-member-list': 2.5,
                        'v5/asset/transfer/query-universal-transfer-list': 1,
                        'v5/asset/deposit/query-allowed-list': 2.5,
                        'v5/asset/deposit/query-record': 2.5,
                        'v5/asset/deposit/query-sub-member-record': 2.5,
                        'v5/asset/deposit/query-address': 2.5,
                        'v5/asset/deposit/query-sub-member-address': 2.5,
                        'v5/asset/deposit/query-internal-record': 2.5,
                        'v5/asset/coin/query-info': 2.5,
                        'v5/asset/withdraw/query-record': 2.5,
                        'v5/asset/withdraw/withdrawable-amount': 2.5,
                        'v5/asset/transfer/query-account-coins-balance': 2.5,
                        // user
                        'v5/user/query-sub-members': 10,
                        'v5/user/query-api': 10,
                        'v5/user/get-member-type': 10,
                    },
                    'post': {
                        // inverse swap
                        'v2/private/order/create': 30,
                        'v2/private/order/cancel': 30,
                        'v2/private/order/cancelAll': 300,
                        'v2/private/order/replace': 30,
                        'v2/private/stop-order/create': 30,
                        'v2/private/stop-order/cancel': 30,
                        'v2/private/stop-order/cancelAll': 300,
                        'v2/private/stop-order/replace': 30,
                        'v2/private/position/change-position-margin': 40,
                        'v2/private/position/trading-stop': 40,
                        'v2/private/position/leverage/save': 40,
                        'v2/private/tpsl/switch-mode': 40,
                        'v2/private/position/switch-isolated': 2.5,
                        'v2/private/position/risk-limit': 2.5,
                        'v2/private/position/switch-mode': 2.5,
                        // linear swap USDT
                        'private/linear/order/create': 30,
                        'private/linear/order/cancel': 30,
                        'private/linear/order/cancel-all': 300,
                        'private/linear/order/replace': 30,
                        'private/linear/stop-order/create': 30,
                        'private/linear/stop-order/cancel': 30,
                        'private/linear/stop-order/cancel-all': 300,
                        'private/linear/stop-order/replace': 30,
                        'private/linear/position/set-auto-add-margin': 40,
                        'private/linear/position/switch-isolated': 40,
                        'private/linear/position/switch-mode': 40,
                        'private/linear/tpsl/switch-mode': 2.5,
                        'private/linear/position/add-margin': 40,
                        'private/linear/position/set-leverage': 40,
                        'private/linear/position/trading-stop': 40,
                        'private/linear/position/set-risk': 2.5,
                        // inverse futures
                        'futures/private/order/create': 30,
                        'futures/private/order/cancel': 30,
                        'futures/private/order/cancelAll': 30,
                        'futures/private/order/replace': 30,
                        'futures/private/stop-order/create': 30,
                        'futures/private/stop-order/cancel': 30,
                        'futures/private/stop-order/cancelAll': 30,
                        'futures/private/stop-order/replace': 30,
                        'futures/private/position/change-position-margin': 40,
                        'futures/private/position/trading-stop': 40,
                        'futures/private/position/leverage/save': 40,
                        'futures/private/position/switch-mode': 40,
                        'futures/private/tpsl/switch-mode': 40,
                        'futures/private/position/switch-isolated': 40,
                        'futures/private/position/risk-limit': 2.5,
                        // spot
                        'spot/v1/order': 2.5,
                        'spot/v1/cross-margin/loan': 10,
                        'spot/v1/cross-margin/repay': 10,
                        'spot/v3/private/order': 2.5,
                        'spot/v3/private/cancel-order': 2.5,
                        'spot/v3/private/cancel-orders': 2.5,
                        'spot/v3/private/cancel-orders-by-ids': 2.5,
                        'spot/v3/private/purchase': 2.5,
                        'spot/v3/private/redeem': 2.5,
                        'spot/v3/private/cross-margin-loan': 10,
                        'spot/v3/private/cross-margin-repay': 10,
                        // account
                        'asset/v1/private/transfer': 150,
                        'asset/v3/private/transfer/inter-transfer': 2.5,
                        'asset/v1/private/sub-member/transfer': 150,
                        'asset/v1/private/withdraw': 50,
                        'asset/v3/private/withdraw/create': 1,
                        'asset/v1/private/withdraw/cancel': 50,
                        'asset/v3/private/withdraw/cancel': 0.84,
                        'asset/v1/private/transferable-subs/save': 3000,
                        'asset/v1/private/universal/transfer': 1500,
                        'asset/v3/private/transfer/sub-member-transfer': 2.5,
                        'asset/v3/private/transfer/transfer-sub-member-save': 2.5,
                        'asset/v3/private/transfer/universal-transfer': 2.5,
                        'user/v3/private/create-sub-member': 10,
                        'user/v3/private/create-sub-api': 10,
                        'user/v3/private/update-api': 10,
                        'user/v3/private/delete-api': 10,
                        'user/v3/private/update-sub-api': 10,
                        'user/v3/private/delete-sub-api': 10,
                        // USDC endpoints
                        // option USDC
                        'option/usdc/openapi/private/v1/place-order': 2.5,
                        'option/usdc/openapi/private/v1/batch-place-order': 2.5,
                        'option/usdc/openapi/private/v1/replace-order': 2.5,
                        'option/usdc/openapi/private/v1/batch-replace-orders': 2.5,
                        'option/usdc/openapi/private/v1/cancel-order': 2.5,
                        'option/usdc/openapi/private/v1/batch-cancel-orders': 2.5,
                        'option/usdc/openapi/private/v1/cancel-all': 2.5,
                        'option/usdc/openapi/private/v1/query-active-orders': 2.5,
                        'option/usdc/openapi/private/v1/query-order-history': 2.5,
                        'option/usdc/openapi/private/v1/execution-list': 2.5,
                        'option/usdc/openapi/private/v1/query-transaction-log': 2.5,
                        'option/usdc/openapi/private/v1/query-wallet-balance': 2.5,
                        'option/usdc/openapi/private/v1/query-asset-info': 2.5,
                        'option/usdc/openapi/private/v1/query-margin-info': 2.5,
                        'option/usdc/openapi/private/v1/query-position': 2.5,
                        'option/usdc/openapi/private/v1/query-delivery-list': 2.5,
                        'option/usdc/openapi/private/v1/query-position-exp-date': 2.5,
                        'option/usdc/openapi/private/v1/mmp-modify': 2.5,
                        'option/usdc/openapi/private/v1/mmp-reset': 2.5,
                        // perpetual swap USDC
                        'perpetual/usdc/openapi/private/v1/place-order': 2.5,
                        'perpetual/usdc/openapi/private/v1/replace-order': 2.5,
                        'perpetual/usdc/openapi/private/v1/cancel-order': 2.5,
                        'perpetual/usdc/openapi/private/v1/cancel-all': 2.5,
                        'perpetual/usdc/openapi/private/v1/position/leverage/save': 2.5,
                        'option/usdc/openapi/private/v1/session-settlement': 2.5,
                        'option/usdc/private/asset/account/setMarginMode': 2.5,
                        'perpetual/usdc/openapi/public/v1/risk-limit/list': 2.5,
                        'perpetual/usdc/openapi/private/v1/position/set-risk-limit': 2.5,
                        'perpetual/usdc/openapi/private/v1/predicted-funding': 2.5,
                        'contract/v3/private/copytrading/order/create': 2.5,
                        'contract/v3/private/copytrading/order/cancel': 2.5,
                        'contract/v3/private/copytrading/order/close': 2.5,
                        'contract/v3/private/copytrading/position/close': 2.5,
                        'contract/v3/private/copytrading/position/set-leverage': 2.5,
                        'contract/v3/private/copytrading/wallet/transfer': 2.5,
                        'contract/v3/private/copytrading/order/trading-stop': 2.5,
                        'contract/v3/private/order/create': 1,
                        'contract/v3/private/order/cancel': 1,
                        'contract/v3/private/order/cancel-all': 1,
                        'contract/v3/private/order/replace': 1,
                        'contract/v3/private/position/set-auto-add-margin': 1,
                        'contract/v3/private/position/switch-isolated': 1,
                        'contract/v3/private/position/switch-mode': 1,
                        'contract/v3/private/position/switch-tpsl-mode': 1,
                        'contract/v3/private/position/set-leverage': 1,
                        'contract/v3/private/position/trading-stop': 1,
                        'contract/v3/private/position/set-risk-limit': 1,
                        'contract/v3/private/account/setMarginMode': 1,
                        // derivative
                        'unified/v3/private/order/create': 2.5,
                        'unified/v3/private/order/replace': 2.5,
                        'unified/v3/private/order/cancel': 2.5,
                        'unified/v3/private/order/create-batch': 2.5,
                        'unified/v3/private/order/replace-batch': 2.5,
                        'unified/v3/private/order/cancel-batch': 2.5,
                        'unified/v3/private/order/cancel-all': 2.5,
                        'unified/v3/private/position/set-leverage': 2.5,
                        'unified/v3/private/position/tpsl/switch-mode': 2.5,
                        'unified/v3/private/position/set-risk-limit': 2.5,
                        'unified/v3/private/position/trading-stop': 2.5,
                        'unified/v3/private/account/upgrade-unified-account': 2.5,
                        'unified/v3/private/account/setMarginMode': 2.5,
                        // tax
                        'fht/compliance/tax/v3/private/registertime': 50,
                        'fht/compliance/tax/v3/private/create': 50,
                        'fht/compliance/tax/v3/private/status': 50,
                        'fht/compliance/tax/v3/private/url': 50,
                        // v5
                        'v5/order/create': 2.5,
                        'v5/order/amend': 2.5,
                        'v5/order/cancel': 2.5,
                        'v5/order/cancel-all': 2.5,
                        'v5/order/create-batch': 2.5,
                        'v5/order/amend-batch': 2.5,
                        'v5/order/cancel-batch': 2.5,
                        'v5/order/disconnected-cancel-all': 2.5,
                        'v5/position/set-leverage': 2.5,
                        'v5/position/set-tpsl-mode': 2.5,
                        'v5/position/set-risk-limit': 2.5,
                        'v5/position/switch-mode': 2.5,
                        'v5/position/switch-isolated': 2.5,
                        'v5/position/trading-stop': 2.5,
                        'v5/account/upgrade-to-uta': 2.5,
                        'v5/account/set-margin-mode': 2.5,
                        'v5/asset/transfer/inter-transfer': 2.5,
                        'v5/asset/transfer/save-transfer-sub-member': 2.5,
                        'v5/asset/transfer/universal-transfer': 2.5,
                        'v5/asset/deposit/deposit-to-account': 2.5,
                        'v5/asset/withdraw/create': 2.5,
                        'v5/asset/withdraw/cancel': 2.5,
                        'v5/spot-lever-token/purchase': 2.5,
                        'v5/spot-lever-token/redeem': 2.5,
                        'v5/spot-lever-token/order-record': 2.5,
                        'v5/spot-margin-trade/switch-mode': 2.5,
                        'v5/spot-margin-trade/set-leverage': 2.5,
                        // user
                        'v5/user/create-sub-member': 10,
                        'v5/user/create-sub-api': 10,
                        'v5/user/frozen-sub-member': 10,
                        'v5/user/update-api': 10,
                        'v5/user/update-sub-api': 10,
                        'v5/user/delete-api': 10,
                        'v5/user/delete-sub-api': 10,
                    },
                    'delete': {
                        // spot
                        'spot/v1/order': 2.5,
                        'spot/v1/order/fast': 2.5,
                        'spot/order/batch-cancel': 2.5,
                        'spot/order/batch-fast-cancel': 2.5,
                        'spot/order/batch-cancel-by-ids': 2.5,
                    },
                },
            },
            'httpExceptions': {
                '403': RateLimitExceeded, // Forbidden -- You request too many times
            },
            'exceptions': {
                // Uncodumented explanation of error strings:
                // - oc_diff: order cost needed to place this order
                // - new_oc: total order cost of open orders including the order you are trying to open
                // - ob: order balance - the total cost of current open orders
                // - ab: available balance
                'exact': {
                    '-10009': BadRequest,
                    '-1004': BadRequest,
                    '-1021': BadRequest,
                    '-1103': BadRequest,
                    '-1140': InvalidOrder,
                    '-1197': InvalidOrder,
                    '-2013': InvalidOrder,
                    '-2015': AuthenticationError,
                    '-6017': BadRequest,
                    '-6025': BadRequest,
                    '-6029': BadRequest,
                    '5004': ExchangeError,
                    '7001': BadRequest,
                    '10001': BadRequest,
                    '10002': InvalidNonce,
                    '10003': AuthenticationError,
                    '10004': AuthenticationError,
                    '10005': PermissionDenied,
                    '10006': RateLimitExceeded,
                    '10007': AuthenticationError,
                    '10008': AuthenticationError,
                    '10009': AuthenticationError,
                    '10010': PermissionDenied,
                    '10014': BadRequest,
                    '10016': ExchangeError,
                    '10017': BadRequest,
                    '10018': RateLimitExceeded,
                    '10020': PermissionDenied,
                    '10024': PermissionDenied,
                    '10027': PermissionDenied,
                    '10028': PermissionDenied,
                    '10029': PermissionDenied,
                    '12201': BadRequest,
                    '100028': PermissionDenied,
                    '110001': InvalidOrder,
                    '110003': InvalidOrder,
                    '110004': InsufficientFunds,
                    '110005': InvalidOrder,
                    '110006': InsufficientFunds,
                    '110007': InsufficientFunds,
                    '110008': InvalidOrder,
                    '110009': InvalidOrder,
                    '110010': InvalidOrder,
                    '110011': InvalidOrder,
                    '110012': InsufficientFunds,
                    '110013': BadRequest,
                    '110014': InsufficientFunds,
                    '110015': BadRequest,
                    '110016': InvalidOrder,
                    '110017': InvalidOrder,
                    '110018': BadRequest,
                    '110019': InvalidOrder,
                    '110020': InvalidOrder,
                    '110021': InvalidOrder,
                    '110022': InvalidOrder,
                    '110023': InvalidOrder,
                    '110024': InvalidOrder,
                    '110025': InvalidOrder,
                    '110026': InvalidOrder,
                    '110027': InvalidOrder,
                    '110028': InvalidOrder,
                    '110029': InvalidOrder,
                    '110030': InvalidOrder,
                    '110031': InvalidOrder,
                    '110032': InvalidOrder,
                    '110033': InvalidOrder,
                    '110034': InvalidOrder,
                    '110035': InvalidOrder,
                    '110036': InvalidOrder,
                    '110037': InvalidOrder,
                    '110038': InvalidOrder,
                    '110039': InvalidOrder,
                    '110040': InvalidOrder,
                    '110041': InvalidOrder,
                    '110042': InvalidOrder,
                    '110043': BadRequest,
                    '110044': InsufficientFunds,
                    '110045': InsufficientFunds,
                    '110046': BadRequest,
                    '110047': BadRequest,
                    '110048': BadRequest,
                    '110049': BadRequest,
                    '110050': BadRequest,
                    '110051': InsufficientFunds,
                    '110052': InsufficientFunds,
                    '110053': InsufficientFunds,
                    '110054': InvalidOrder,
                    '110055': InvalidOrder,
                    '110056': InvalidOrder,
                    '110057': InvalidOrder,
                    '110058': InvalidOrder,
                    '110059': InvalidOrder,
                    '110060': BadRequest,
                    '110061': BadRequest,
                    '110062': BadRequest,
                    '110063': ExchangeError,
                    '110064': InvalidOrder,
                    '110065': PermissionDenied,
                    '110066': ExchangeError,
                    '110067': PermissionDenied,
                    '110068': PermissionDenied,
                    '110069': PermissionDenied,
                    '110070': InvalidOrder,
                    '110071': ExchangeError,
                    '110072': InvalidOrder,
                    '110073': ExchangeError,
                    '130006': InvalidOrder,
                    '130021': InsufficientFunds,
                    '130074': InvalidOrder,
                    '131001': InsufficientFunds,
                    '131084': ExchangeError,
                    '131200': ExchangeError,
                    '131201': ExchangeError,
                    '131202': BadRequest,
                    '131203': BadRequest,
                    '131204': BadRequest,
                    '131205': BadRequest,
                    '131206': ExchangeError,
                    '131207': BadRequest,
                    '131208': ExchangeError,
                    '131209': BadRequest,
                    '131210': BadRequest,
                    '131211': BadRequest,
                    '131212': InsufficientFunds,
                    '131213': BadRequest,
                    '131214': BadRequest,
                    '131215': BadRequest,
                    '131216': ExchangeError,
                    '131217': ExchangeError,
                    '131002': BadRequest,
                    '131003': ExchangeError,
                    '131004': AuthenticationError,
                    '131085': InsufficientFunds,
                    '131086': BadRequest,
                    '131088': BadRequest,
                    '131089': BadRequest,
                    '131090': ExchangeError,
                    '131091': ExchangeError,
                    '131092': ExchangeError,
                    '131093': ExchangeError,
                    '131094': BadRequest,
                    '131095': BadRequest,
                    '131096': BadRequest,
                    '131097': ExchangeError,
                    '131098': ExchangeError,
                    '131099': ExchangeError,
                    '140003': InvalidOrder,
                    '140004': InsufficientFunds,
                    '140005': InvalidOrder,
                    '140006': InsufficientFunds,
                    '140007': InsufficientFunds,
                    '140008': InvalidOrder,
                    '140009': InvalidOrder,
                    '140010': InvalidOrder,
                    '140011': InvalidOrder,
                    '140012': InsufficientFunds,
                    '140013': BadRequest,
                    '140014': InsufficientFunds,
                    '140015': InvalidOrder,
                    '140016': InvalidOrder,
                    '140017': InvalidOrder,
                    '140018': BadRequest,
                    '140019': InvalidOrder,
                    '140020': InvalidOrder,
                    '140021': InvalidOrder,
                    '140022': InvalidOrder,
                    '140023': InvalidOrder,
                    '140024': BadRequest,
                    '140025': BadRequest,
                    '140026': BadRequest,
                    '140027': BadRequest,
                    '140028': InvalidOrder,
                    '140029': BadRequest,
                    '140030': InvalidOrder,
                    '140031': BadRequest,
                    '140032': InvalidOrder,
                    '140033': InvalidOrder,
                    '140034': InvalidOrder,
                    '140035': InvalidOrder,
                    '140036': BadRequest,
                    '140037': InvalidOrder,
                    '140038': BadRequest,
                    '140039': BadRequest,
                    '140040': InvalidOrder,
                    '140041': InvalidOrder,
                    '140042': InvalidOrder,
                    '140043': BadRequest,
                    '140044': InsufficientFunds,
                    '140045': InsufficientFunds,
                    '140046': BadRequest,
                    '140047': BadRequest,
                    '140048': BadRequest,
                    '140049': BadRequest,
                    '140050': InvalidOrder,
                    '140051': InsufficientFunds,
                    '140052': InsufficientFunds,
                    '140053': InsufficientFunds,
                    '140054': InvalidOrder,
                    '140055': InvalidOrder,
                    '140056': InvalidOrder,
                    '140057': InvalidOrder,
                    '140058': InvalidOrder,
                    '140059': InvalidOrder,
                    '140060': BadRequest,
                    '140061': BadRequest,
                    '140062': BadRequest,
                    '140063': ExchangeError,
                    '140064': InvalidOrder,
                    '140065': PermissionDenied,
                    '140066': ExchangeError,
                    '140067': PermissionDenied,
                    '140068': PermissionDenied,
                    '140069': PermissionDenied,
                    '140070': InvalidOrder,
                    '170001': ExchangeError,
                    '170007': RequestTimeout,
                    '170005': InvalidOrder,
                    '170031': ExchangeError,
                    '170032': ExchangeError,
                    '170033': InsufficientFunds,
                    '170034': InsufficientFunds,
                    '170035': BadRequest,
                    '170036': BadRequest,
                    '170037': BadRequest,
                    '170105': BadRequest,
                    '170115': InvalidOrder,
                    '170116': InvalidOrder,
                    '170117': InvalidOrder,
                    '170121': InvalidOrder,
                    '170130': BadRequest,
                    '170131': InsufficientFunds,
                    '170132': InvalidOrder,
                    '170133': InvalidOrder,
                    '170134': InvalidOrder,
                    '170135': InvalidOrder,
                    '170136': InvalidOrder,
                    '170137': InvalidOrder,
                    '170139': InvalidOrder,
                    '170140': InvalidOrder,
                    '170124': InvalidOrder,
                    '170141': InvalidOrder,
                    '170142': InvalidOrder,
                    '170143': InvalidOrder,
                    '170144': InvalidOrder,
                    '170145': InvalidOrder,
                    '170146': InvalidOrder,
                    '170147': InvalidOrder,
                    '170148': InvalidOrder,
                    '170149': ExchangeError,
                    '170150': ExchangeError,
                    '170151': InvalidOrder,
                    '170157': InvalidOrder,
                    '170159': InvalidOrder,
                    '170190': InvalidOrder,
                    '170191': InvalidOrder,
                    '170192': InvalidOrder,
                    '170193': InvalidOrder,
                    '170194': InvalidOrder,
                    '170195': InvalidOrder,
                    '170196': InvalidOrder,
                    '170197': InvalidOrder,
                    '170198': InvalidOrder,
                    '170199': InvalidOrder,
                    '170200': InvalidOrder,
                    '170221': BadRequest,
                    '170222': RateLimitExceeded,
                    '170223': InsufficientFunds,
                    '170224': PermissionDenied,
                    '170226': InsufficientFunds,
                    '170227': ExchangeError,
                    '170228': InvalidOrder,
                    '170229': InvalidOrder,
                    '170234': ExchangeError,
                    '170210': InvalidOrder,
                    '170213': OrderNotFound,
                    '170217': InvalidOrder,
                    '170218': InvalidOrder,
                    '170010': InvalidOrder,
                    '170011': InvalidOrder,
                    '170019': InvalidOrder,
                    '170201': PermissionDenied,
                    '170202': InvalidOrder,
                    '170203': InvalidOrder,
                    '170204': InvalidOrder,
                    '170206': InvalidOrder,
                    '175000': InvalidOrder,
                    '175001': InvalidOrder,
                    '175002': InvalidOrder,
                    '175003': InsufficientFunds,
                    '175004': InvalidOrder,
                    '175005': InvalidOrder,
                    '175006': InsufficientFunds,
                    '175007': InvalidOrder,
                    '175008': InvalidOrder,
                    '175009': InvalidOrder,
                    '175010': PermissionDenied,
                    '175012': InvalidOrder,
                    '175013': InvalidOrder,
                    '175014': InvalidOrder,
                    '175015': InvalidOrder,
                    '175016': InvalidOrder,
                    '175017': InvalidOrder,
                    '175027': ExchangeError,
                    '176002': BadRequest,
                    '176004': BadRequest,
                    '176003': BadRequest,
                    '176006': BadRequest,
                    '176005': BadRequest,
                    '176008': BadRequest,
                    '176007': BadRequest,
                    '176010': BadRequest,
                    '176009': BadRequest,
                    '176012': BadRequest,
                    '176011': BadRequest,
                    '176014': BadRequest,
                    '176013': BadRequest,
                    '176015': InsufficientFunds,
                    '176016': BadRequest,
                    '176017': BadRequest,
                    '176018': BadRequest,
                    '176019': BadRequest,
                    '176020': BadRequest,
                    '176021': BadRequest,
                    '176022': BadRequest,
                    '176023': BadRequest,
                    '176024': BadRequest,
                    '176025': BadRequest,
                    '176026': BadRequest,
                    '176027': BadRequest,
                    '176028': BadRequest,
                    '176029': BadRequest,
                    '176030': BadRequest,
                    '176031': BadRequest,
                    '176034': BadRequest,
                    '176035': PermissionDenied,
                    '176036': PermissionDenied,
                    '176037': PermissionDenied,
                    '176038': BadRequest,
                    '176039': BadRequest,
                    '176040': BadRequest,
                    '181000': BadRequest,
                    '181001': BadRequest,
                    '181002': InvalidOrder,
                    '181003': InvalidOrder,
                    '181004': InvalidOrder,
                    '182000': InvalidOrder,
                    '20001': OrderNotFound,
                    '20003': InvalidOrder,
                    '20004': InvalidOrder,
                    '20005': InvalidOrder,
                    '20006': InvalidOrder,
                    '20007': InvalidOrder,
                    '20008': InvalidOrder,
                    '20009': InvalidOrder,
                    '20010': InvalidOrder,
                    '20011': InvalidOrder,
                    '20012': InvalidOrder,
                    '20013': InvalidOrder,
                    '20014': InvalidOrder,
                    '20015': InvalidOrder,
                    '20016': InvalidOrder,
                    '20017': InvalidOrder,
                    '20018': InvalidOrder,
                    '20019': InvalidOrder,
                    '20020': InvalidOrder,
                    '20021': InvalidOrder,
                    '20022': BadRequest,
                    '20023': BadRequest,
                    '20031': BadRequest,
                    '20070': BadRequest,
                    '20071': BadRequest,
                    '20084': BadRequest,
                    '30001': BadRequest,
                    '30003': InvalidOrder,
                    '30004': InvalidOrder,
                    '30005': InvalidOrder,
                    '30007': InvalidOrder,
                    '30008': InvalidOrder,
                    '30009': ExchangeError,
                    '30010': InsufficientFunds,
                    '30011': PermissionDenied,
                    '30012': PermissionDenied,
                    '30013': PermissionDenied,
                    '30014': InvalidOrder,
                    '30015': InvalidOrder,
                    '30016': ExchangeError,
                    '30017': InvalidOrder,
                    '30018': InvalidOrder,
                    '30019': InvalidOrder,
                    '30020': InvalidOrder,
                    '30021': InvalidOrder,
                    '30022': InvalidOrder,
                    '30023': InvalidOrder,
                    '30024': InvalidOrder,
                    '30025': InvalidOrder,
                    '30026': InvalidOrder,
                    '30027': InvalidOrder,
                    '30028': InvalidOrder,
                    '30029': InvalidOrder,
                    '30030': InvalidOrder,
                    '30031': InsufficientFunds,
                    '30032': InvalidOrder,
                    '30033': RateLimitExceeded,
                    '30034': OrderNotFound,
                    '30035': RateLimitExceeded,
                    '30036': ExchangeError,
                    '30037': InvalidOrder,
                    '30041': ExchangeError,
                    '30042': InsufficientFunds,
                    '30043': InvalidOrder,
                    '30044': InvalidOrder,
                    '30045': InvalidOrder,
                    '30049': InsufficientFunds,
                    '30050': ExchangeError,
                    '30051': ExchangeError,
                    '30052': ExchangeError,
                    '30054': ExchangeError,
                    '30057': ExchangeError,
                    '30063': ExchangeError,
                    '30067': InsufficientFunds,
                    '30068': ExchangeError,
                    '30074': InvalidOrder,
                    '30075': InvalidOrder,
                    '30078': ExchangeError,
                    // '30084': BadRequest, // Isolated not modified, see handleErrors below
                    '33004': AuthenticationError,
                    '34026': ExchangeError,
                    '34036': BadRequest,
                    '35015': BadRequest,
                    '340099': ExchangeError,
                    '3400045': ExchangeError,
                    '3100116': BadRequest,
                    '3100198': BadRequest,
                    '3200300': InsufficientFunds, // {"retCode":3200300,"retMsg":"Insufficient margin balance.","result":null,"retExtMap":{}}
                },
                'broad': {
                    'Request timeout': RequestTimeout,
                    'unknown orderInfo': OrderNotFound,
                    'invalid api_key': AuthenticationError,
                    // the below two issues are caused as described: issues/9149#issuecomment-1146559498, when response is such:  {"ret_code":130021,"ret_msg":"oc_diff[1707966351], new_oc[1707966351] with ob[....]+AB[....]","ext_code":"","ext_info":"","result":null,"time_now":"1658395300.872766","rate_limit_status":99,"rate_limit_reset_ms":1658395300855,"rate_limit":100}
                    'oc_diff': InsufficientFunds,
                    'new_oc': InsufficientFunds,
                    'openapi sign params error!': AuthenticationError, // {"retCode":10001,"retMsg":"empty value: apiTimestamp[] apiKey[] apiSignature[xxxxxxxxxxxxxxxxxxxxxxx]: openapi sign params error!","result":null,"retExtInfo":null,"time":1664789597123}
                },
            },
            'precisionMode': TICK_SIZE$1,
            'options': {
                'enableUnifiedMargin': undefined,
                'enableUnifiedAccount': undefined,
                'createMarketBuyOrderRequiresPrice': true,
                'createUnifiedMarginAccount': false,
                'defaultType': 'swap',
                'defaultSubType': 'linear',
                'defaultSettle': 'USDT',
                'code': 'BTC',
                'recvWindow': 5 * 1000,
                'timeDifference': 0,
                'adjustForTimeDifference': false,
                'brokerId': 'CCXT',
                'accountsByType': {
                    'spot': 'SPOT',
                    'margin': 'SPOT',
                    'future': 'CONTRACT',
                    'swap': 'CONTRACT',
                    'option': 'OPTION',
                    'investment': 'INVESTMENT',
                    'unified': 'UNIFIED',
                    'funding': 'FUND',
                    'fund': 'FUND',
                    'contract': 'CONTRACT',
                },
                'accountsById': {
                    'SPOT': 'spot',
                    'MARGIN': 'spot',
                    'CONTRACT': 'contract',
                    'OPTION': 'option',
                    'INVESTMENT': 'investment',
                    'UNIFIED': 'unified',
                },
                'networks': {
                    'ERC20': 'ETH',
                    'TRC20': 'TRX',
                    'BEP20': 'BSC',
                    'OMNI': 'OMNI',
                    'SPL': 'SOL',
                },
                'networksById': {
                    'ETH': 'ERC20',
                    'TRX': 'TRC20',
                    'BSC': 'BEP20',
                    'OMNI': 'OMNI',
                    'SPL': 'SOL',
                },
                'defaultNetwork': 'ERC20',
                'defaultNetworks': {
                    'USDT': 'TRC20',
                },
                'intervals': {
                    '5m': '5min',
                    '15m': '15min',
                    '30m': '30min',
                    '1h': '1h',
                    '4h': '4h',
                    '1d': '1d',
                },
            },
            'fees': {
                'trading': {
                    'feeSide': 'get',
                    'tierBased': true,
                    'percentage': true,
                    'taker': 0.00075,
                    'maker': 0.0001,
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {},
                    'deposit': {},
                },
            },
            'commonCurrencies': {
                'GAS': 'GASDAO',
            },
        });
    }
    nonce() {
        return this.milliseconds() - this.options['timeDifference'];
    }
    async isUnifiedEnabled(params = {}) {
        // The API key of user id must own one of permissions will be allowed to call following API endpoints.
        // SUB UID: "Account Transfer"
        // MASTER UID: "Account Transfer", "Subaccount Transfer", "Withdrawal"
        const enableUnifiedMargin = this.safeValue(this.options, 'enableUnifiedMargin');
        const enableUnifiedAccount = this.safeValue(this.options, 'enableUnifiedAccount');
        if (enableUnifiedMargin === undefined || enableUnifiedAccount === undefined) {
            const response = await this.privateGetUserV3PrivateQueryApi(params);
            //
            //     {
            //         "retCode":0,
            //         "retMsg":"OK",
            //         "result":{
            //             "id":"88888888",
            //             "note":"ccxt-moon",
            //             "apiKey":"8s8c808v8u8",
            //             "readOnly":0,
            //             "secret":"",
            //             "permissions":{
            //                 "ContractTrade":[""],
            //                 "Spot":[""],
            //                 "Wallet":[""],
            //                 "Options":[""],
            //                 "Derivatives":[""],
            //                 "CopyTrading":[""],
            //                 "BlockTrade":[],
            //                 "Exchange":[""],
            //                 "NFT":[""]
            //             },
            //             "ips":[""],
            //             "type":1,
            //             "deadlineDay":27,
            //             "expiredAt":"",
            //             "createdAt":"",
            //             "unified":1,
            //             "uta": 1
            //         },
            //         "retExtInfo":null,
            //         "time":1669735171649
            //     }
            //
            const result = this.safeValue(response, 'result', {});
            this.options['enableUnifiedMargin'] = this.safeInteger(result, 'unified') === 1;
            this.options['enableUnifiedAccount'] = this.safeInteger(result, 'uta') === 1;
            // this.options['enableUnifiedMargin'] = 1;
            // this.options['enableUnifiedAccount'] = 1;
        }
        return [this.options['enableUnifiedMargin'], this.options['enableUnifiedAccount']];
    }
    async queryUid(params = {}) {
        let response = {};
        try {
            response = await this.privateGetV5UserGetMemberType(params);
        }
        catch (e) {
            response = {};
        }
        const result = this.safeValue(response, 'result', {});
        return result;
    }
    async upgradeUnifiedAccount(params = {}) {
        const createUnifiedMarginAccount = this.safeValue(this.options, 'createUnifiedMarginAccount');
        if (!createUnifiedMarginAccount) {
            throw new NotSupported(this.id + ' upgradeUnifiedAccount() warning this method can only be called once, it is not reverseable and you will be stuck with a unified margin account, you also need at least 5000 USDT in your bybit account to do this. If you want to disable this warning set exchange.options["createUnifiedMarginAccount"]=true.');
        }
        return await this.privatePostUnifiedV3PrivateAccountUpgradeUnifiedAccount(params);
    }
    async upgradeUnifiedTradeAccount(params = {}) {
        return await this.privatePostV5AccountUpgradeToUta(params);
    }
    async fetchTime(params = {}) {
        /**
         * @method
         * @name bybit#fetchTime
         * @description fetches the current integer timestamp in milliseconds from the exchange server
         * @see https://bybit-exchange.github.io/docs/v3/server-time
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {int} the current integer timestamp in milliseconds from the exchange server
         */
        const response = await this.publicGetV3PublicTime(params);
        //
        //    {
        //         "retCode": "0",
        //         "retMsg": "OK",
        //         "result": {
        //             "timeSecond": "1666879482",
        //             "timeNano": "1666879482792685914"
        //         },
        //         "retExtInfo": {},
        //         "time": "1666879482792"
        //     }
        //
        return this.safeInteger(response, 'time');
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name bybit#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @see https://bybit-exchange.github.io/docs/v5/asset/coin-info
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} an associative dictionary of currencies
         */
        if (!this.checkRequiredCredentials(false)) {
            return undefined;
        }
        const response = await this.privateGetV5AssetCoinQueryInfo(params);
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "",
        //         "result": {
        //             "rows": [
        //                 {
        //                     "name": "BTC",
        //                     "coin": "BTC",
        //                     "remainAmount": "150",
        //                     "chains": [
        //                         {
        //                             "chainType": "BTC",
        //                             "confirmation": "10000",
        //                             "withdrawFee": "0.0005",
        //                             "depositMin": "0.0005",
        //                             "withdrawMin": "0.001",
        //                             "chain": "BTC",
        //                             "chainDeposit": "1",
        //                             "chainWithdraw": "1",
        //                             "minAccuracy": "8"
        //                         }
        //                     ]
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672194582264
        //     }
        //
        const data = this.safeValue(response, 'result', []);
        const rows = this.safeValue(data, 'rows', []);
        const result = {};
        for (let i = 0; i < rows.length; i++) {
            const currency = rows[i];
            const currencyId = this.safeString(currency, 'coin');
            const code = this.safeCurrencyCode(currencyId);
            const name = this.safeString(currency, 'name');
            const chains = this.safeValue(currency, 'chains', []);
            const networks = {};
            let minPrecision = undefined;
            for (let j = 0; j < chains.length; j++) {
                const chain = chains[j];
                const networkId = this.safeString(chain, 'chain');
                const networkCode = this.networkIdToCode(networkId);
                const precision = this.parseNumber(this.parsePrecision(this.safeString(chain, 'minAccuracy')));
                minPrecision = (minPrecision === undefined) ? precision : Math.min(minPrecision, precision);
                const depositAllowed = this.safeInteger(chain, 'chainDeposit') === 1;
                const withdrawAllowed = this.safeInteger(chain, 'chainWithdraw') === 1;
                networks[networkCode] = {
                    'info': chain,
                    'id': networkId,
                    'network': networkCode,
                    'active': undefined,
                    'deposit': depositAllowed,
                    'withdraw': withdrawAllowed,
                    'fee': this.safeNumber(chain, 'withdrawFee'),
                    'precision': precision,
                    'limits': {
                        'withdraw': {
                            'min': this.safeNumber(chain, 'withdrawMin'),
                            'max': undefined,
                        },
                        'deposit': {
                            'min': this.safeNumber(chain, 'depositMin'),
                            'max': undefined,
                        },
                    },
                };
            }
            result[code] = {
                'info': currency,
                'code': code,
                'id': currencyId,
                'name': name,
                'active': undefined,
                'deposit': undefined,
                'withdraw': undefined,
                'fee': undefined,
                'precision': minPrecision,
                'limits': {
                    'amount': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'networks': networks,
            };
        }
        return result;
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name bybit#fetchMarkets
         * @description retrieves data on all markets for bybit
         * @see https://bybit-exchange.github.io/docs/v5/market/instrument
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        if (this.options['adjustForTimeDifference']) {
            await this.loadTimeDifference();
        }
        const unresolvedPromises = [
            this.fetchDerivativesMarkets({ 'category': 'linear' }),
            this.fetchDerivativesMarkets({ 'category': 'inverse' }),
        ];
        const promises = await Promise.all(unresolvedPromises);
        const linearMarkets = promises[0];
        const inverseMarkets = promises[1];
        const markets = linearMarkets;
        return this.arrayConcat(markets, inverseMarkets);
    }
    async fetchDerivativesMarkets(params) {
        params['limit'] = 1000; // minimize number of requests
        const response = await this.publicGetV5MarketInstrumentsInfo(params);
        const data = this.safeValue(response, 'result', {});
        let markets = this.safeValue(data, 'list', []);
        let paginationCursor = this.safeString(data, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.publicGetDerivativesV3PublicInstrumentsInfo(params);
                const data = this.safeValue(response, 'result', {});
                const rawMarkets = this.safeValue(data, 'list', []);
                const rawMarketsLength = rawMarkets.length;
                if (rawMarketsLength === 0) {
                    break;
                }
                markets = this.arrayConcat(rawMarkets, markets);
                paginationCursor = this.safeString(data, 'nextPageCursor');
            }
        }
        //
        // linear response
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "BTCUSDT",
        //                     "contractType": "LinearPerpetual",
        //                     "status": "Trading",
        //                     "baseCoin": "BTC",
        //                     "quoteCoin": "USDT",
        //                     "launchTime": "1585526400000",
        //                     "deliveryTime": "0",
        //                     "deliveryFeeRate": "",
        //                     "priceScale": "2",
        //                     "leverageFilter": {
        //                         "minLeverage": "1",
        //                         "maxLeverage": "100.00",
        //                         "leverageStep": "0.01"
        //                     },
        //                     "priceFilter": {
        //                         "minPrice": "0.50",
        //                         "maxPrice": "999999.00",
        //                         "tickSize": "0.50"
        //                     },
        //                     "lotSizeFilter": {
        //                         "maxOrderQty": "100.000",
        //                         "minOrderQty": "0.001",
        //                         "qtyStep": "0.001",
        //                         "postOnlyMaxOrderQty": "1000.000"
        //                     },
        //                     "unifiedMarginTrade": true,
        //                     "fundingInterval": 480,
        //                     "settleCoin": "USDT"
        //                 }
        //             ],
        //             "nextPageCursor": ""
        //         },
        //         "retExtInfo": {},
        //         "time": 1672712495660
        //     }
        //
        // option response
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "option",
        //             "nextPageCursor": "",
        //             "list": [
        //                 {
        //                     "category": "option",
        //                     "symbol": "ETH-3JAN23-1250-P",
        //                     "status": "ONLINE",
        //                     "baseCoin": "ETH",
        //                     "quoteCoin": "USD",
        //                     "settleCoin": "USDC",
        //                     "optionsType": "Put",
        //                     "launchTime": "1672560000000",
        //                     "deliveryTime": "1672732800000",
        //                     "deliveryFeeRate": "0.00015",
        //                     "priceFilter": {
        //                         "minPrice": "0.1",
        //                         "maxPrice": "10000000",
        //                         "tickSize": "0.1"
        //                     },
        //                     "lotSizeFilter": {
        //                         "maxOrderQty": "1500",
        //                         "minOrderQty": "0.1",
        //                         "qtyStep": "0.1"
        //                     }
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672712537130
        //     }
        //
        const result = [];
        let category = this.safeString(data, 'category');
        for (let i = 0; i < markets.length; i++) {
            const market = markets[i];
            if (category === undefined) {
                category = this.safeString(market, 'category');
            }
            const linear = (category === 'linear');
            const inverse = (category === 'inverse');
            const contractType = this.safeString(market, 'contractType');
            const inverseFutures = (contractType === 'InverseFutures');
            const linearPerpetual = (contractType === 'LinearPerpetual');
            const inversePerpetual = (contractType === 'InversePerpetual');
            const id = this.safeString(market, 'symbol');
            const baseId = this.safeString(market, 'baseCoin');
            const quoteId = this.safeString(market, 'quoteCoin');
            const defaultSettledId = linear ? quoteId : baseId;
            const settleId = this.safeString(market, 'settleCoin', defaultSettledId);
            const base = this.safeCurrencyCode(baseId);
            const quote = this.safeCurrencyCode(quoteId);
            let settle = undefined;
            if (linearPerpetual && (settleId === 'USD')) {
                settle = 'USDC';
            }
            else {
                settle = this.safeCurrencyCode(settleId);
            }
            let symbol = base + '/' + quote;
            const lotSizeFilter = this.safeValue(market, 'lotSizeFilter', {});
            const priceFilter = this.safeValue(market, 'priceFilter', {});
            const leverage = this.safeValue(market, 'leverageFilter', {});
            const status = this.safeString(market, 'status');
            const active = (status === 'Trading');
            const swap = linearPerpetual || inversePerpetual;
            const future = inverseFutures;
            const option = (category === 'option');
            let type = undefined;
            if (swap) {
                type = 'swap';
            }
            else if (future) {
                type = 'future';
            }
            else if (option) {
                type = 'option';
            }
            let expiry = this.omitZero(this.safeString(market, 'deliveryTime'));
            if (expiry !== undefined) {
                expiry = parseInt(expiry);
            }
            const expiryDatetime = this.iso8601(expiry);
            let strike = undefined;
            let optionType = undefined;
            symbol = symbol + ':' + settle;
            if (expiry !== undefined) {
                symbol = symbol + '-' + this.yymmdd(expiry);
                if (option) {
                    const splitId = id.split('-');
                    strike = this.safeString(splitId, 2);
                    const optionLetter = this.safeString(splitId, 3);
                    symbol = symbol + '-' + strike + '-' + optionLetter;
                    if (optionLetter === 'P') {
                        optionType = 'put';
                    }
                    else if (optionLetter === 'C') {
                        optionType = 'call';
                    }
                }
            }
            const contractSize = inverse ? this.safeNumber2(lotSizeFilter, 'minTradingQty', 'minOrderQty') : this.parseNumber('1');
            result.push({
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': settle,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': settleId,
                'type': type,
                'spot': false,
                'margin': undefined,
                'swap': swap,
                'future': future,
                'option': option,
                'active': active,
                'contract': true,
                'linear': linear,
                'inverse': inverse,
                'taker': this.safeNumber(market, 'takerFee', this.parseNumber('0.0006')),
                'maker': this.safeNumber(market, 'makerFee', this.parseNumber('0.0001')),
                'contractSize': contractSize,
                'expiry': expiry,
                'expiryDatetime': expiryDatetime,
                'strike': strike,
                'optionType': optionType,
                'precision': {
                    'amount': this.safeNumber(lotSizeFilter, 'qtyStep'),
                    'price': this.safeNumber(priceFilter, 'tickSize'),
                },
                'limits': {
                    'leverage': {
                        'min': this.safeNumber(leverage, 'minLeverage'),
                        'max': this.safeNumber(leverage, 'maxLeverage'),
                    },
                    'amount': {
                        'min': this.safeNumber2(lotSizeFilter, 'minTradingQty', 'minOrderQty'),
                        'max': this.safeNumber2(lotSizeFilter, 'maxTradingQty', 'maxOrderQty'),
                    },
                    'price': {
                        'min': this.safeNumber(priceFilter, 'minPrice'),
                        'max': this.safeNumber(priceFilter, 'maxPrice'),
                    },
                    'cost': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'info': market,
            });
        }
        return result;
    }
    parseTicker(ticker, market = undefined) {
        //
        // spot
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "bid1Price": "20517.96",
        //         "bid1Size": "2",
        //         "ask1Price": "20527.77",
        //         "ask1Size": "1.862172",
        //         "lastPrice": "20533.13",
        //         "prevPrice24h": "20393.48",
        //         "price24hPcnt": "0.0068",
        //         "highPrice24h": "21128.12",
        //         "lowPrice24h": "20318.89",
        //         "turnover24h": "243765620.65899866",
        //         "volume24h": "11801.27771",
        //         "usdIndexPrice": "20784.12009279"
        //     }
        //
        // linear/inverse
        //
        //     {
        //         "symbol": "BTCUSD",
        //         "lastPrice": "16597.00",
        //         "indexPrice": "16598.54",
        //         "markPrice": "16596.00",
        //         "prevPrice24h": "16464.50",
        //         "price24hPcnt": "0.008047",
        //         "highPrice24h": "30912.50",
        //         "lowPrice24h": "15700.00",
        //         "prevPrice1h": "16595.50",
        //         "openInterest": "373504107",
        //         "openInterestValue": "22505.67",
        //         "turnover24h": "2352.94950046",
        //         "volume24h": "49337318",
        //         "fundingRate": "-0.001034",
        //         "nextFundingTime": "1672387200000",
        //         "predictedDeliveryPrice": "",
        //         "basisRate": "",
        //         "deliveryFeeRate": "",
        //         "deliveryTime": "0",
        //         "ask1Size": "1",
        //         "bid1Price": "16596.00",
        //         "ask1Price": "16597.50",
        //         "bid1Size": "1"
        //     }
        //
        // option
        //
        //     {
        //         "symbol": "BTC-30DEC22-18000-C",
        //         "bid1Price": "0",
        //         "bid1Size": "0",
        //         "bid1Iv": "0",
        //         "ask1Price": "435",
        //         "ask1Size": "0.66",
        //         "ask1Iv": "5",
        //         "lastPrice": "435",
        //         "highPrice24h": "435",
        //         "lowPrice24h": "165",
        //         "markPrice": "0.00000009",
        //         "indexPrice": "16600.55",
        //         "markIv": "0.7567",
        //         "underlyingPrice": "16590.42",
        //         "openInterest": "6.3",
        //         "turnover24h": "2482.73",
        //         "volume24h": "0.15",
        //         "totalVolume": "99",
        //         "totalTurnover": "1967653",
        //         "delta": "0.00000001",
        //         "gamma": "0.00000001",
        //         "vega": "0.00000004",
        //         "theta": "-0.00000152",
        //         "predictedDeliveryPrice": "0",
        //         "change24h": "86"
        //     }
        //
        const timestamp = this.safeInteger(ticker, 'time');
        const marketId = this.safeString(ticker, 'symbol');
        const defaultType = this.safeString(this.options, 'defaultType', 'spot');
        market = this.safeMarket(marketId, market, undefined, defaultType);
        const symbol = this.safeSymbol(marketId, market, undefined, defaultType);
        const last = this.safeString(ticker, 'lastPrice');
        const mark = this.safeString(ticker, 'markPrice');
        const open = this.safeString(ticker, 'prevPrice24h');
        let percentage = this.safeString(ticker, 'price24hPcnt');
        percentage = Precise.stringMul(percentage, '100');
        const quoteVolume = this.safeString(ticker, 'turnover24h');
        const baseVolume = this.safeString(ticker, 'volume24h');
        const bid = this.safeString(ticker, 'bid1Price');
        const ask = this.safeString(ticker, 'ask1Price');
        const high = this.safeString(ticker, 'highPrice24h');
        const low = this.safeString(ticker, 'lowPrice24h');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': bid,
            'bidVolume': this.safeString2(ticker, 'bidSize', 'bid1Size'),
            'ask': ask,
            'askVolume': this.safeString2(ticker, 'askSize', 'ask1Size'),
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'mark': mark,
            'previousClose': undefined,
            'change': undefined,
            'percentage': percentage,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name bybit#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://bybit-exchange.github.io/docs/v5/market/tickers
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        this.checkRequiredSymbol('fetchTicker', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'baseCoin': '', Base coin. For option only
            // 'expDate': '', Expiry date. e.g., 25DEC22. For option only
        };
        if (market['spot']) {
            request['category'] = 'spot';
        }
        else {
            if (market['option']) {
                request['category'] = 'option';
            }
            else if (market['linear']) {
                request['category'] = 'linear';
            }
            else if (market['inverse']) {
                request['category'] = 'inverse';
            }
        }
        const response = await this.publicGetV5MarketTickers(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "inverse",
        //             "list": [
        //                 {
        //                     "symbol": "BTCUSD",
        //                     "lastPrice": "16597.00",
        //                     "indexPrice": "16598.54",
        //                     "markPrice": "16596.00",
        //                     "prevPrice24h": "16464.50",
        //                     "price24hPcnt": "0.008047",
        //                     "highPrice24h": "30912.50",
        //                     "lowPrice24h": "15700.00",
        //                     "prevPrice1h": "16595.50",
        //                     "openInterest": "373504107",
        //                     "openInterestValue": "22505.67",
        //                     "turnover24h": "2352.94950046",
        //                     "volume24h": "49337318",
        //                     "fundingRate": "-0.001034",
        //                     "nextFundingTime": "1672387200000",
        //                     "predictedDeliveryPrice": "",
        //                     "basisRate": "",
        //                     "deliveryFeeRate": "",
        //                     "deliveryTime": "0",
        //                     "ask1Size": "1",
        //                     "bid1Price": "16596.00",
        //                     "ask1Price": "16597.50",
        //                     "bid1Size": "1"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672376496682
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        const tickers = this.safeValue(result, 'list', []);
        const rawTicker = this.safeValue(tickers, 0);
        return this.parseTicker(rawTicker, market);
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchTickers
         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @see https://bybit-exchange.github.io/docs/v5/market/tickers
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbols !== undefined) {
            symbols = this.marketSymbols(symbols);
            market = this.market(symbols[0]);
        }
        const request = {
        // 'symbol': market['id'],
        // 'baseCoin': '', Base coin. For option only
        // 'expDate': '', Expiry date. e.g., 25DEC22. For option only
        };
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchTickers', market, params);
        if (type === 'spot') {
            request['category'] = 'spot';
        }
        else if (type === 'swap') {
            let subType = undefined;
            [subType, params] = this.handleSubTypeAndParams('fetchTickers', market, params, 'linear');
            request['category'] = subType;
        }
        else if (type === 'option') {
            request['category'] = 'option';
        }
        const response = await this.publicGetV5MarketTickers(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "inverse",
        //             "list": [
        //                 {
        //                     "symbol": "BTCUSD",
        //                     "lastPrice": "16597.00",
        //                     "indexPrice": "16598.54",
        //                     "markPrice": "16596.00",
        //                     "prevPrice24h": "16464.50",
        //                     "price24hPcnt": "0.008047",
        //                     "highPrice24h": "30912.50",
        //                     "lowPrice24h": "15700.00",
        //                     "prevPrice1h": "16595.50",
        //                     "openInterest": "373504107",
        //                     "openInterestValue": "22505.67",
        //                     "turnover24h": "2352.94950046",
        //                     "volume24h": "49337318",
        //                     "fundingRate": "-0.001034",
        //                     "nextFundingTime": "1672387200000",
        //                     "predictedDeliveryPrice": "",
        //                     "basisRate": "",
        //                     "deliveryFeeRate": "",
        //                     "deliveryTime": "0",
        //                     "ask1Size": "1",
        //                     "bid1Price": "16596.00",
        //                     "ask1Price": "16597.50",
        //                     "bid1Size": "1"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672376496682
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const tickerList = this.safeValue(result, 'list', []);
        const tickers = {};
        for (let i = 0; i < tickerList.length; i++) {
            const ticker = this.parseTicker(tickerList[i], market);
            const symbol = ticker['symbol'];
            tickers[symbol] = ticker;
        }
        return this.filterByArray(tickers, 'symbol', symbols);
    }
    parseOHLCV(ohlcv, market = undefined) {
        //
        //     [
        //         "1621162800",
        //         "49592.43",
        //         "49644.91",
        //         "49342.37",
        //         "49349.42",
        //         "1451.59",
        //         "2.4343353100000003"
        //     ]
        //
        return [
            this.safeInteger(ohlcv, 0),
            this.safeNumber(ohlcv, 1),
            this.safeNumber(ohlcv, 2),
            this.safeNumber(ohlcv, 3),
            this.safeNumber(ohlcv, 4),
            this.safeNumber(ohlcv, 5),
        ];
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOHLCV
         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @see https://bybit-exchange.github.io/docs/v5/market/kline
         * @see https://bybit-exchange.github.io/docs/v5/market/mark-kline
         * @see https://bybit-exchange.github.io/docs/v5/market/index-kline
         * @see https://bybit-exchange.github.io/docs/v5/market/preimum-index-kline
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        this.checkRequiredSymbol('fetchOHLCV', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit === undefined) {
            limit = 200; // default is 200 when requested with `since`
        }
        if (since !== undefined) {
            request['start'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit; // max 1000, default 1000
        }
        request['interval'] = this.safeString(this.timeframes, timeframe, timeframe);
        let method = undefined;
        if (market['spot']) {
            request['category'] = 'spot';
            method = 'publicGetV5MarketKline';
        }
        else {
            const price = this.safeString(params, 'price');
            params = this.omit(params, 'price');
            const methods = {
                'mark': 'publicGetV5MarketMarkPriceKline',
                'index': 'publicGetV5MarketIndexPriceKline',
                'premiumIndex': 'publicGetV5MarketPremiumIndexPriceKline',
            };
            method = this.safeValue(methods, price, 'publicGetV5MarketKline');
            if (market['linear']) {
                request['category'] = 'linear';
            }
            else if (market['inverse']) {
                request['category'] = 'inverse';
            }
            else {
                throw new NotSupported(this.id + ' fetchOHLCV() is not supported for option markets');
            }
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "symbol": "BTCUSD",
        //             "category": "inverse",
        //             "list": [
        //                 [
        //                     "1670608800000",
        //                     "17071",
        //                     "17073",
        //                     "17027",
        //                     "17055.5",
        //                     "268611",
        //                     "15.74462667"
        //                 ],
        //                 [
        //                     "1670605200000",
        //                     "17071.5",
        //                     "17071.5",
        //                     "17061",
        //                     "17071",
        //                     "4177",
        //                     "0.24469757"
        //                 ],
        //                 [
        //                     "1670601600000",
        //                     "17086.5",
        //                     "17088",
        //                     "16978",
        //                     "17071.5",
        //                     "6356",
        //                     "0.37288112"
        //                 ]
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672025956592
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const ohlcvs = this.safeValue(result, 'list', []);
        return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
    }
    parseFundingRate(ticker, market = undefined) {
        //     {
        //         "symbol": "BTCUSDT",
        //         "bidPrice": "19255",
        //         "askPrice": "19255.5",
        //         "lastPrice": "19255.50",
        //         "lastTickDirection": "ZeroPlusTick",
        //         "prevPrice24h": "18634.50",
        //         "price24hPcnt": "0.033325",
        //         "highPrice24h": "19675.00",
        //         "lowPrice24h": "18610.00",
        //         "prevPrice1h": "19278.00",
        //         "markPrice": "19255.00",
        //         "indexPrice": "19260.68",
        //         "openInterest": "48069.549",
        //         "turnover24h": "4686694853.047006",
        //         "volume24h": "243730.252",
        //         "fundingRate": "0.0001",
        //         "nextFundingTime": "1663689600000",
        //         "predictedDeliveryPrice": "",
        //         "basisRate": "",
        //         "deliveryFeeRate": "",
        //         "deliveryTime": "0"
        //     }
        //
        const timestamp = this.safeInteger(ticker, 'timestamp'); // added artificially to avoid changing the signature
        ticker = this.omit(ticker, 'timestamp');
        const marketId = this.safeString(ticker, 'symbol');
        const symbol = this.safeSymbol(marketId, market, undefined, 'swap');
        const fundingRate = this.safeNumber(ticker, 'fundingRate');
        const fundingTimestamp = this.safeInteger(ticker, 'nextFundingTime');
        const markPrice = this.safeNumber(ticker, 'markPrice');
        const indexPrice = this.safeNumber(ticker, 'indexPrice');
        return {
            'info': ticker,
            'symbol': symbol,
            'markPrice': markPrice,
            'indexPrice': indexPrice,
            'interestRate': undefined,
            'estimatedSettlePrice': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'fundingRate': fundingRate,
            'fundingTimestamp': fundingTimestamp,
            'fundingDatetime': this.iso8601(fundingTimestamp),
            'nextFundingRate': undefined,
            'nextFundingTimestamp': undefined,
            'nextFundingDatetime': undefined,
            'previousFundingRate': undefined,
            'previousFundingTimestamp': undefined,
            'previousFundingDatetime': undefined,
        };
    }
    async fetchFundingRates(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchFundingRates
         * @description fetches funding rates for multiple markets
         * @see https://bybit-exchange.github.io/docs/v5/market/tickers
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the funding rates for, all market funding rates are returned if not assigned
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} an array of [funding rate structures]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        const request = {};
        if (symbols !== undefined) {
            symbols = this.marketSymbols(symbols);
            market = this.market(symbols[0]);
            if (symbols.length === 1) {
                request['symbol'] = market['id'];
            }
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchFundingRates', market, params);
        if (type !== 'swap') {
            throw new NotSupported(this.id + ' fetchFundingRates() does not support ' + type + ' markets');
        }
        else {
            let subType = undefined;
            [subType, params] = this.handleSubTypeAndParams('fetchFundingRates', market, params, 'linear');
            request['category'] = subType;
        }
        const response = await this.publicGetV5MarketTickers(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "BTCUSDT",
        //                     "bidPrice": "19255",
        //                     "askPrice": "19255.5",
        //                     "lastPrice": "19255.50",
        //                     "lastTickDirection": "ZeroPlusTick",
        //                     "prevPrice24h": "18634.50",
        //                     "price24hPcnt": "0.033325",
        //                     "highPrice24h": "19675.00",
        //                     "lowPrice24h": "18610.00",
        //                     "prevPrice1h": "19278.00",
        //                     "markPrice": "19255.00",
        //                     "indexPrice": "19260.68",
        //                     "openInterest": "48069.549",
        //                     "turnover24h": "4686694853.047006",
        //                     "volume24h": "243730.252",
        //                     "fundingRate": "0.0001",
        //                     "nextFundingTime": "1663689600000",
        //                     "predictedDeliveryPrice": "",
        //                     "basisRate": "",
        //                     "deliveryFeeRate": "",
        //                     "deliveryTime": "0"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": null,
        //         "time": 1663670053454
        //     }
        //
        let tickerList = this.safeValue(response, 'result', []);
        const timestamp = this.safeInteger(response, 'time');
        tickerList = this.safeValue(tickerList, 'list');
        const fundingRates = {};
        for (let i = 0; i < tickerList.length; i++) {
            const rawTicker = tickerList[i];
            rawTicker['timestamp'] = timestamp; // will be removed inside the parser
            const ticker = this.parseFundingRate(tickerList[i], undefined);
            const symbol = ticker['symbol'];
            fundingRates[symbol] = ticker;
        }
        return this.filterByArray(fundingRates, 'symbol', symbols);
    }
    async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchFundingRateHistory
         * @description fetches historical funding rate prices
         * @see https://bybit-exchange.github.io/docs/v5/market/history-fund-rate
         * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
         * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
         * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @param {int|undefined} params.until timestamp in ms of the latest funding rate
         * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
         */
        this.checkRequiredSymbol('fetchFundingRateHistory', symbol);
        await this.loadMarkets();
        const request = {
        // 'category': '', // Product type. linear,inverse
        // 'symbol': '', // Symbol name
        // 'startTime': 0, // The start timestamp (ms)
        // 'endTime': 0, // The end timestamp (ms)
        // 'limit': 0, // Limit for data size per page. [1, 200]. Default: 200
        };
        const market = this.market(symbol);
        symbol = market['symbol'];
        request['symbol'] = market['id'];
        if (market['option']) {
            throw new NotSupported(this.id + ' fetchFundingRateHistory() is not supported for option markets');
        }
        else if (market['linear']) {
            request['category'] = 'linear';
        }
        else if (market['inverse']) {
            request['category'] = 'inverse';
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        const until = this.safeInteger2(params, 'until', 'till'); // unified in milliseconds
        const endTime = this.safeInteger(params, 'endTime', until); // exchange-specific in milliseconds
        params = this.omit(params, ['endTime', 'till', 'until']);
        if (endTime !== undefined) {
            request['endTime'] = endTime;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetV5MarketFundingHistory(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "ETHPERP",
        //                     "fundingRate": "0.0001",
        //                     "fundingRateTimestamp": "1672041600000"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672051897447
        //     }
        //
        const rates = [];
        const result = this.safeValue(response, 'result');
        const resultList = this.safeValue(result, 'list');
        for (let i = 0; i < resultList.length; i++) {
            const entry = resultList[i];
            const timestamp = this.safeInteger(entry, 'fundingRateTimestamp');
            rates.push({
                'info': entry,
                'symbol': this.safeSymbol(this.safeString(entry, 'symbol'), undefined, undefined, 'swap'),
                'fundingRate': this.safeNumber(entry, 'fundingRate'),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
            });
        }
        const sorted = this.sortBy(rates, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    parseTrade(trade, market = undefined) {
        return this.parseContractTrade(trade, market);
    }
    parseContractTrade(trade, market = undefined) {
        //
        // public contract
        //
        //     {
        //         "execId": "666042b4-50c6-58f3-bd9c-89b2088663ff",
        //         "symbol": "ETHUSD",
        //         "price": "1162.95",
        //         "size": "1",
        //         "side": "Sell",
        //         "time": "1669191277315",
        //         "isBlockTrade": false
        //     }
        //
        // public unified margin
        //
        //     {
        //         "execId": "da66abbc-f358-5864-8d34-84ef7274d853",
        //         "symbol": "BTCUSDT",
        //         "price": "20802.50",
        //         "size": "0.200",
        //         "side": "Sell",
        //         "time": "1657870316630"
        //     }
        //
        // private contract trades
        //
        //     {
        //         "symbol": "ETHUSD",
        //         "execFee": "0.00005484",
        //         "execId": "acf78206-d464-589b-b888-51bd130821c1",
        //         "execPrice": "1367.80",
        //         "execQty": "100",
        //         "execType": "Trade",
        //         "execValue": "0.0731101",
        //         "feeRate": "0.00075",
        //         "lastLiquidityInd": "RemovedLiquidity",
        //         "leavesQty": "0",
        //         "orderId": "fdc584c3-be5d-41ff-8f54-5be7649b1d1c",
        //         "orderLinkId": "",
        //         "orderPrice": "1299.50",
        //         "orderQty": "100",
        //         "orderType": "Market",
        //         "stopOrderType": "UNKNOWN",
        //         "side": "Sell",
        //         "execTime": "1611528105547",
        //         "closedSize": "100"
        //     }
        //
        // private unified margin
        //
        //     {
        //         "symbol": "AAVEUSDT",
        //         "id": "1274785101965716992",
        //         "orderId": "1274784252359089664",
        //         "tradeId": "2270000000031365639",
        //         "orderPrice": "82.5",
        //         "orderQty": "0.016",
        //         "execFee": "0",
        //         "feeTokenId": "AAVE",
        //         "creatTime": "1666702226326",
        //         "isBuyer": "0",
        //         "isMaker": "0",
        //         "matchOrderId": "1274785101865076224",
        //         "makerRebate": "0",
        //         "executionTime": "1666702226335"
        //     }
        //
        // private USDC settled trades
        //
        //     {
        //         "symbol": "ETHPERP",
        //         "orderLinkId": "",
        //         "side": "Buy",
        //         "orderId": "aad0ee44-ce12-4112-aeee-b7829f6c3a26",
        //         "execFee": "0.0210",
        //         "feeRate": "0.000600",
        //         "blockTradeId": "",
        //         "tradeTime": "1669196417930",
        //         "execPrice": "1162.15",
        //         "lastLiquidityInd": "TAKER",
        //         "execValue": "34.8645",
        //         "execType": "Trade",
        //         "execQty": "0.030",
        //         "tradeId": "0e94eaf5-b08e-5505-b43f-7f1f30b1ca80"
        //     }
        //
        const id = this.safeStringN(trade, ['execId', 'id', 'tradeId']);
        const marketId = this.safeString(trade, 'symbol');
        let marketType = 'contract';
        if (market !== undefined) {
            marketType = market['type'];
        }
        market = this.safeMarket(marketId, market, undefined, marketType);
        const symbol = market['symbol'];
        const amountString = this.safeStringN(trade, ['execQty', 'orderQty', 'size']);
        const priceString = this.safeStringN(trade, ['execPrice', 'orderPrice', 'price']);
        const costString = this.safeString(trade, 'execValue');
        const timestamp = this.safeIntegerN(trade, ['time', 'execTime', 'tradeTime']);
        let side = this.safeStringLower(trade, 'side');
        if (side === undefined) {
            const isBuyer = this.safeInteger(trade, 'isBuyer');
            if (isBuyer !== undefined) {
                side = isBuyer ? 'buy' : 'sell';
            }
        }
        const isMaker = this.safeValue(trade, 'isMaker');
        let takerOrMaker = undefined;
        if (isMaker !== undefined) {
            takerOrMaker = isMaker ? 'maker' : 'taker';
        }
        else {
            let lastLiquidityInd = this.safeString(trade, 'lastLiquidityInd');
            if (lastLiquidityInd === 'UNKNOWN') {
                lastLiquidityInd = undefined;
            }
            if (lastLiquidityInd !== undefined) {
                if ((lastLiquidityInd === 'TAKER') || (lastLiquidityInd === 'MAKER')) {
                    takerOrMaker = lastLiquidityInd.toLowerCase();
                }
                else {
                    takerOrMaker = (lastLiquidityInd === 'AddedLiquidity') ? 'maker' : 'taker';
                }
            }
        }
        let orderType = this.safeStringLower(trade, 'orderType');
        if (orderType === 'unknown') {
            orderType = undefined;
        }
        const feeCostString = this.safeString(trade, 'execFee');
        let fee = undefined;
        if (feeCostString !== undefined) {
            const feeCurrencyCode = market['inverse'] ? market['base'] : market['settle'];
            fee = {
                'cost': feeCostString,
                'currency': feeCurrencyCode,
            };
        }
        return this.safeTrade({
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': this.safeString(trade, 'orderId'),
            'type': orderType,
            'side': side,
            'takerOrMaker': takerOrMaker,
            'price': priceString,
            'amount': amountString,
            'cost': costString,
            'fee': fee,
        }, market);
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @see https://bybit-exchange.github.io/docs/v5/market/recent-trade
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        this.checkRequiredSymbol('fetchTrades', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'baseCoin': '', // Base coin. For option only. If not passed, return BTC data by default
            // 'optionType': 'Call', // Option type. Call or Put. For option only
        };
        if (limit !== undefined) {
            // spot: [1,60], default: 60.
            // others: [1,1000], default: 500
            request['limit'] = limit;
        }
        if (market['type'] === 'spot') {
            request['category'] = 'spot';
        }
        else {
            if (market['option']) {
                request['category'] = 'option';
            }
            else if (market['linear']) {
                request['category'] = 'linear';
            }
            else if (market['inverse']) {
                request['category'] = 'inverse';
            }
        }
        const response = await this.publicGetV5MarketRecentTrade(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "spot",
        //             "list": [
        //                 {
        //                     "execId": "2100000000007764263",
        //                     "symbol": "BTCUSDT",
        //                     "price": "16618.49",
        //                     "size": "0.00012",
        //                     "side": "Buy",
        //                     "time": "1672052955758",
        //                     "isBlockTrade": false
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672053054358
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'list', []);
        return this.parseTrades(trades, market, since, limit);
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://bybit-exchange.github.io/docs/v5/market/orderbook
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        this.checkRequiredSymbol('fetchOrderBook', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let defaultLimit = 25;
        if (market['spot']) {
            // limit: [1, 50]. Default: 1
            defaultLimit = 50;
            request['category'] = 'spot';
        }
        else {
            if (market['option']) {
                // limit: [1, 25]. Default: 1
                request['category'] = 'option';
            }
            else if (market['linear']) {
                // limit: [1, 200]. Default: 25
                request['category'] = 'linear';
            }
            else if (market['inverse']) {
                // limit: [1, 200]. Default: 25
                request['category'] = 'inverse';
            }
        }
        request['limit'] = (limit !== undefined) ? limit : defaultLimit;
        const response = await this.publicGetV5MarketOrderbook(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "s": "BTCUSDT",
        //             "a": [
        //                 [
        //                     "16638.64",
        //                     "0.008479"
        //                 ]
        //             ],
        //             "b": [
        //                 [
        //                     "16638.27",
        //                     "0.305749"
        //                 ]
        //             ],
        //             "ts": 1672765737733,
        //             "u": 5277055
        //         },
        //         "retExtInfo": {},
        //         "time": 1672765737734
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        const timestamp = this.safeInteger(result, 'ts');
        return this.parseOrderBook(result, symbol, timestamp, 'b', 'a');
    }
    parseBalance(response) {
        //
        // margin wallet
        //     [
        //         {
        //             "free": "0.001143855",
        //             "interest": "0",
        //             "loan": "0",
        //             "locked": "0",
        //             "tokenId": "BTC",
        //             "total": "0.001143855"
        //         },
        //         {
        //             "free": "200.00005568",
        //             "interest": "0.0008391",
        //             "loan": "200",
        //             "locked": "0",
        //             "tokenId": "USDT",
        //             "total": "200.00005568"
        //         },
        //     ]
        //
        // usdc wallet
        //    {
        //      "result": {
        //           "walletBalance": "10.0000",
        //           "accountMM": "0.0000",
        //           "bonus": "0.0000",
        //           "accountIM": "0.0000",
        //           "totalSessionRPL": "0.0000",
        //           "equity": "10.0000",
        //           "totalRPL": "0.0000",
        //           "marginBalance": "10.0000",
        //           "availableBalance": "10.0000",
        //           "totalSessionUPL": "0.0000"
        //       },
        //       "retCode": "0",
        //       "retMsg": "Success."
        //    }
        //
        // Unified Margin
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "Success",
        //         "result": {
        //             "totalEquity": "112.21267421",
        //             "accountIMRate": "0.6895",
        //             "totalMarginBalance": "80.37711012",
        //             "totalInitialMargin": "55.42180254",
        //             "totalAvailableBalance": "24.95530758",
        //             "accountMMRate": "0.0459",
        //             "totalPerpUPL": "-16.69586570",
        //             "totalWalletBalance": "97.07311619",
        //             "totalMaintenanceMargin": "3.68580537",
        //             "coin": [
        //                 {
        //                     "currencyCoin": "ETH",
        //                     "availableToBorrow": "0.00000000",
        //                     "borrowSize": "0.00000000",
        //                     "bonus": "0.00000000",
        //                     "accruedInterest": "0.00000000",
        //                     "availableBalanceWithoutConvert": "0.00000000",
        //                     "totalOrderIM": "",
        //                     "equity": "0.00000000",
        //                     "totalPositionMM": "",
        //                     "usdValue": "0.00000000",
        //                     "availableBalance": "0.02441165",
        //                     "unrealisedPnl": "",
        //                     "totalPositionIM": "",
        //                     "marginBalanceWithoutConvert": "0.00000000",
        //                     "walletBalance": "0.00000000",
        //                     "cumRealisedPnl": "",
        //                     "marginBalance": "0.07862610"
        //                 }
        //             ]
        //         },
        //         "time": 1657716037033
        //     }
        //
        // contract v3
        //
        //     [
        //         {
        //             "coin": "BTC",
        //             "equity": "0.00000002",
        //             "walletBalance": "0.00000002",
        //             "positionMargin": "0",
        //             "availableBalance": "0.00000002",
        //             "orderMargin": "0",
        //             "occClosingFee": "0",
        //             "occFundingFee": "0",
        //             "unrealisedPnl": "0",
        //             "cumRealisedPnl": "-0.00010941",
        //             "givenCash": "0",
        //             "serviceCash": "0"
        //         },
        //         {
        //             "coin": "USDT",
        //             "equity": "3662.81038535",
        //             "walletBalance": "3662.81038535",
        //             "positionMargin": "0",
        //             "availableBalance": "3662.81038535",
        //             "orderMargin": "0",
        //             "occClosingFee": "0",
        //             "occFundingFee": "0",
        //             "unrealisedPnl": "0",
        //             "cumRealisedPnl": "-36.01761465",
        //             "givenCash": "0",
        //             "serviceCash": "0"
        //         }
        //     ]
        // spot
        //     {
        //       retCode: '0',
        //       retMsg: 'OK',
        //       result: {
        //         balances: [
        //           {
        //             coin: 'BTC',
        //             coinId: 'BTC',
        //             total: '0.00977041118',
        //             free: '0.00877041118',
        //             locked: '0.001'
        //           },
        //           {
        //             coin: 'EOS',
        //             coinId: 'EOS',
        //             total: '2000',
        //             free: '2000',
        //             locked: '0'
        //           }
        //         ]
        //       },
        //       retExtInfo: {},
        //       time: '1670002625754'
        //  }
        //
        // Unified trade account
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [
        //                 {
        //                     "totalEquity": "18070.32797922",
        //                     "accountIMRate": "0.0101",
        //                     "totalMarginBalance": "18070.32797922",
        //                     "totalInitialMargin": "182.60183684",
        //                     "accountType": "UNIFIED",
        //                     "totalAvailableBalance": "17887.72614237",
        //                     "accountMMRate": "0",
        //                     "totalPerpUPL": "-0.11001349",
        //                     "totalWalletBalance": "18070.43799271",
        //                     "totalMaintenanceMargin": "0.38106773",
        //                     "coin": [
        //                         {
        //                             "availableToBorrow": "2.5",
        //                             "accruedInterest": "0",
        //                             "availableToWithdraw": "0.805994",
        //                             "totalOrderIM": "0",
        //                             "equity": "0.805994",
        //                             "totalPositionMM": "0",
        //                             "usdValue": "12920.95352538",
        //                             "unrealisedPnl": "0",
        //                             "borrowAmount": "0",
        //                             "totalPositionIM": "0",
        //                             "walletBalance": "0.805994",
        //                             "cumRealisedPnl": "0",
        //                             "coin": "BTC"
        //                         }
        //                     ]
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672125441042
        //     }
        //
        // funding v5
        //    {
        //        retCode: '0',
        //        retMsg: 'success',
        //        result: {
        //          memberId: '452265',
        //          accountType: 'FUND',
        //          balance: [
        //            {
        //              coin: 'BTC',
        //              transferBalance: '0.2',
        //              walletBalance: '0.2',
        //              bonus: ''
        //            }
        //          ]
        //        },
        //        retExtInfo: {},
        //        time: '1677781902858'
        //    }
        //
        // all coins balance
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "memberId": "533285",
        //             "accountType": "FUND",
        //             "balance": [
        //                 {
        //                     "coin": "USDT",
        //                     "transferBalance": "1010",
        //                     "walletBalance": "1010",
        //                     "bonus": ""
        //                 },
        //                 {
        //                     "coin": "USDC",
        //                     "transferBalance": "0",
        //                     "walletBalance": "0",
        //                     "bonus": ""
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1675865290069
        //     }
        //
        const responseResult = this.safeValue(response, 'result', response);
        const result = {
            'info': responseResult,
        };
        const currencyList = this.safeValueN(responseResult, ['loanAccountList', 'list', 'coin', 'balances', 'balance']);
        if (currencyList === undefined) {
            // usdc wallet
            const code = 'USDC';
            const account = this.account();
            account['free'] = this.safeString(responseResult, 'availableBalance');
            account['total'] = this.safeString(responseResult, 'walletBalance');
            result[code] = account;
        }
        else {
            result['info'] = currencyList;
            for (let i = 0; i < currencyList.length; i++) {
                const entry = currencyList[i];
                const accountType = this.safeString(entry, 'accountType');
                if (accountType === 'UNIFIED' || accountType === 'CONTRACT') {
                    const coins = this.safeValue(entry, 'coin');
                    for (let j = 0; j < coins.length; j++) {
                        const account = this.account();
                        const coinEntry = coins[j];
                        const loan = this.safeString(coinEntry, 'borrowAmount');
                        const interest = this.safeString(coinEntry, 'accruedInterest');
                        if ((loan !== undefined) && (interest !== undefined)) {
                            account['debt'] = Precise.stringAdd(loan, interest);
                        }
                        account['total'] = this.safeString(coinEntry, 'walletBalance');
                        account['free'] = this.safeString(coinEntry, 'availableToWithdraw');
                        // account['used'] = this.safeString (coinEntry, 'locked');
                        const currencyId = this.safeString(coinEntry, 'coin');
                        const code = this.safeCurrencyCode(currencyId);
                        result[code] = account;
                    }
                }
                else {
                    const account = this.account();
                    const loan = this.safeString(entry, 'loan');
                    const interest = this.safeString(entry, 'interest');
                    if ((loan !== undefined) && (interest !== undefined)) {
                        account['debt'] = Precise.stringAdd(loan, interest);
                    }
                    account['total'] = this.safeString2(entry, 'total', 'walletBalance');
                    account['free'] = this.safeStringN(entry, ['free', 'availableBalanceWithoutConvert', 'availableBalance', 'transferBalance']);
                    account['used'] = this.safeString(entry, 'locked');
                    const currencyId = this.safeStringN(entry, ['tokenId', 'coin', 'currencyCoin']);
                    const code = this.safeCurrencyCode(currencyId);
                    result[code] = account;
                }
            }
        }
        return this.safeBalance(result);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name bybit#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const request = {};
        let method = undefined;
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
        const category = this.safeString(this.options, 'defaultSubType', 'spot');
        if (enableUnifiedAccount || enableUnifiedMargin) {
            if (type === 'swap') {
                type = 'unified';
            }
        }
        else {
            if (type === 'swap') {
                type = 'contract';
            }
        }
        const accountTypes = this.safeValue(this.options, 'accountsByType', {});
        const unifiedType = this.safeStringUpper(accountTypes, type, type);
        if (unifiedType === 'FUND') {
            // use this endpoint only we have no other choice
            // because it requires transfer permission
            method = 'privateGetAssetV3PrivateTransferAccountCoinsBalanceQuery';
        }
        else {
            if (enableUnifiedAccount && category !== 'inverse') {
                method = 'privateGetV5AccountWalletBalance';
            }
            else {
                method = 'privateGetContractV3PrivateAccountWalletBalance';
            }
        }
        request['accountType'] = unifiedType;
        const response = await this[method](this.extend(request, params));
        //
        // spot wallet
        //     {
        //       retCode: '0',
        //       retMsg: 'OK',
        //       result: {
        //         balances: [
        //           {
        //             coin: 'BTC',
        //             coinId: 'BTC',
        //             total: '0.00977041118',
        //             free: '0.00877041118',
        //             locked: '0.001'
        //           },
        //           {
        //             coin: 'EOS',
        //             coinId: 'EOS',
        //             total: '2000',
        //             free: '2000',
        //             locked: '0'
        //           }
        //         ]
        //       },
        //       retExtInfo: {},
        //       time: '1670002625754'
        //     }
        // cross
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "acctBalanceSum": "0.122995614474732872",
        //             "debtBalanceSum": "0.011734191124529754",
        //             "loanAccountList": [
        //                 {
        //                     "free": "0.001143855",
        //                     "interest": "0",
        //                     "loan": "0",
        //                     "locked": "0",
        //                     "tokenId": "BTC",
        //                     "total": "0.001143855"
        //                 },
        //                 {
        //                     "free": "200.00005568",
        //                     "interest": "0.0008391",
        //                     "loan": "200",
        //                     "locked": "0",
        //                     "tokenId": "USDT",
        //                     "total": "200.00005568"
        //                 },
        //             ],
        //             "riskRate": "0.0954",
        //             "status": 1
        //         },
        //         "retExtInfo": {},
        //         "time": 1669843584123
        //     }
        //
        // all coins balance
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "memberId": "533285",
        //             "accountType": "FUND",
        //             "balance": [
        //                 {
        //                     "coin": "USDT",
        //                     "transferBalance": "1010",
        //                     "walletBalance": "1010",
        //                     "bonus": ""
        //                 },
        //                 {
        //                     "coin": "USDC",
        //                     "transferBalance": "0",
        //                     "walletBalance": "0",
        //                     "bonus": ""
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1675865290069
        //     }
        //
        return this.parseBalance(response);
    }
    parseOrderStatus(status) {
        const statuses = {
            // v3 spot
            'NEW': 'open',
            'PARTIALLY_FILLED': 'open',
            'FILLED': 'closed',
            'CANCELED': 'canceled',
            'PENDING_CANCEL': 'open',
            'PENDING_NEW': 'open',
            'REJECTED': 'rejected',
            'PARTIALLY_FILLED_CANCELLED': 'canceled',
            // v3 contract / unified margin / unified account
            'Created': 'open',
            'New': 'open',
            'Rejected': 'rejected',
            'PartiallyFilled': 'open',
            'PartiallyFilledCancelled': 'canceled',
            'Filled': 'closed',
            'PendingCancel': 'open',
            'Cancelled': 'canceled',
            // below this line the status only pertains to conditional orders
            'Untriggered': 'open',
            'Deactivated': 'canceled',
            'Triggered': 'open',
            'Active': 'open',
        };
        return this.safeString(statuses, status, status);
    }
    parseTimeInForce(timeInForce) {
        const timeInForces = {
            'GoodTillCancel': 'GTC',
            'ImmediateOrCancel': 'IOC',
            'FillOrKill': 'FOK',
            'PostOnly': 'PO',
        };
        return this.safeString(timeInForces, timeInForce, timeInForce);
    }
    parseOrder(order, market = undefined) {
        return this.parseContractOrder(order, market);
    }
    parseContractOrder(order, market = undefined) {
        //
        // contract v3
        //
        //     {
        //         "symbol": "XRPUSDT",
        //         "side": "Buy",
        //         "orderType": "Market",
        //         "price": "0.3431",
        //         "qty": "65",
        //         "reduceOnly": true,
        //         "timeInForce": "ImmediateOrCancel",
        //         "orderStatus": "Filled",
        //         "leavesQty": "0",
        //         "leavesValue": "0",
        //         "cumExecQty": "65",
        //         "cumExecValue": "21.3265",
        //         "cumExecFee": "0.0127959",
        //         "lastPriceOnCreated": "0.0000",
        //         "rejectReason": "EC_NoError",
        //         "orderLinkId": "",
        //         "createdTime": "1657526321499",
        //         "updatedTime": "1657526321504",
        //         "orderId": "ac0a8134-acb3-4ee1-a2d4-41891c9c46d7",
        //         "stopOrderType": "UNKNOWN",
        //         "takeProfit": "0.0000",
        //         "stopLoss": "0.0000",
        //         "tpTriggerBy": "UNKNOWN",
        //         "slTriggerBy": "UNKNOWN",
        //         "triggerPrice": "0.0000",
        //         "closeOnTrigger": true,
        //         "triggerDirection": 0,
        //         "positionIdx": 2
        //     }
        //
        const marketId = this.safeString(order, 'symbol');
        let marketType = 'contract';
        if (market !== undefined) {
            marketType = market['type'];
        }
        market = this.safeMarket(marketId, market, undefined, marketType);
        const symbol = market['symbol'];
        const timestamp = this.safeInteger(order, 'createdTime');
        const id = this.safeString(order, 'orderId');
        let type = this.safeStringLower(order, 'orderType');
        const stopOrderType = this.safeStringLower(order, 'stopOrderType');
        const price = this.safeString(order, 'price');
        let amount = this.safeString(order, 'qty');
        const tpslMode = this.safeString(order, 'tpslMode');
        if (tpslMode === 'Full') {
            amount = '0';
        }
        const cost = this.safeString(order, 'cumExecValue');
        const filled = this.safeString(order, 'cumExecQty');
        const remaining = this.safeString(order, 'leavesQty');
        const lastTradeTimestamp = this.safeInteger(order, 'updateTime');
        const rawStatus = this.safeString(order, 'orderStatus');
        const status = this.parseOrderStatus(rawStatus);
        const side = this.safeStringLower(order, 'side');
        let fee = undefined;
        const isContract = this.safeValue(market, 'contract');
        if (isContract) {
            const feeCostString = this.safeString(order, 'cumExecFee');
            if (feeCostString !== undefined) {
                fee = {
                    'cost': feeCostString,
                    'currency': market['settle'],
                };
            }
        }
        let clientOrderId = this.safeString(order, 'orderLinkId');
        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {
            clientOrderId = undefined;
        }
        const rawTimeInForce = this.safeString(order, 'timeInForce');
        const timeInForce = this.parseTimeInForce(rawTimeInForce);
        const stopPrice = this.omitZero(this.safeString(order, 'triggerPrice'));
        if (stopOrderType !== undefined && stopOrderType !== 'unknown') {
            if (type === 'market') {
                type = 'stop';
            }
            else {
                type = 'stopLimit';
            }
        }
        let trigger = this.safeString(order, 'triggerBy');
        const slTriggerBy = this.safeString(order, 'slTriggerBy');
        if (trigger === undefined && slTriggerBy !== '') {
            trigger = slTriggerBy;
        }
        const tpTriggerBy = this.safeString(order, 'tpTriggerBy');
        if (trigger === undefined && tpTriggerBy !== '') {
            trigger = slTriggerBy;
        }
        if (trigger === 'LastPrice') {
            trigger = 'Last';
        }
        else if (trigger === 'IndexPrice') {
            trigger = 'Index';
        }
        else if (trigger === 'MarkPrice') {
            trigger = 'Mark';
        }
        let takeProfit = undefined;
        if (this.safeFloat(order, 'takeProfit', 0) !== 0) {
            takeProfit = this.safeString(order, 'takeProfit');
        }
        let stopLoss = undefined;
        if (this.safeFloat(order, 'stopLoss', 0) !== 0) {
            stopLoss = this.safeString(order, 'stopLoss');
        }
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': undefined,
            'reduceOnly': this.safeValue(order, 'reduceOnly'),
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': stopPrice,
            'amount': amount,
            'cost': cost,
            'average': undefined,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee,
            'trades': undefined,
            'takeProfit': takeProfit,
            'stopLoss': stopLoss,
            // TEALSTREET
            'reduce': this.safeValue(order, 'reduceOnly'),
            'trigger': trigger,
            'close': this.safeValue(order, 'closeOnTrigger'),
            // TEALSTREET
        }, market);
    }
    parseStopTrigger(trigger) {
        trigger = trigger && trigger.toLowerCase();
        const triggers = {
            'MarkPrice': 'mark',
            'LastPrice': 'last',
            'IndexPrice': 'index',
        };
        return this.safeString(triggers, trigger, trigger);
    }
    formatStopTrigger(trigger) {
        trigger = trigger && trigger.toLowerCase();
        const triggers = {
            'mark': 'MarkPrice',
            'last': 'LastPrice',
            'index': 'IndexPrice',
        };
        return this.safeString(triggers, trigger, trigger);
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string|undefined} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchOrder', market, params);
        const accounts = await this.isUnifiedEnabled();
        const isUnifiedAccount = this.safeValue(accounts, 1, false);
        if (isUnifiedAccount) {
            throw new NotSupported(this.id + ' fetchOrder() does not support unified account. Please consider using fetchOpenOrders() or fetchClosedOrders()');
        }
        if (type === 'spot') {
            // only spot markets have a dedicated endpoint for fetching a order
            const request = {
                'orderId': id,
            };
            const response = await this.privateGetSpotV3PrivateOrder(this.extend(params, request));
            //
            //    {
            //        "retCode": "0",
            //        "retMsg": "OK",
            //        "result": {
            //            "accountId": "13380434",
            //            "symbol": "AAVEUSDT",
            //            "orderLinkId": "1666733357434617",
            //            "orderId": "1275046248585414144",
            //            "orderPrice": "80",
            //            "orderQty": "0.11",
            //            "execQty": "0",
            //            "cummulativeQuoteQty": "0",
            //            "avgPrice": "0",
            //            "status": "NEW",
            //            "timeInForce": "GTC",
            //            "orderType": "LIMIT",
            //            "side": "BUY",
            //            "stopPrice": "0.0",
            //            "icebergQty": "0.0",
            //            "createTime": "1666733357438",
            //            "updateTime": "1666733357444",
            //            "isWorking": "1",
            //            "locked": "8.8",
            //            "orderCategory": "0"
            //        },
            //        "retExtMap": {},
            //        "retExtInfo": null,
            //        "time": "1666733357744"
            //    }
            //
            const result = this.safeValue(response, 'result', {});
            return this.parseOrder(result, market);
        }
        else {
            this.checkRequiredSymbol('fetchOrder', symbol);
            const request = {
                'orderId': id,
            };
            const result = await this.fetchOrders(symbol, undefined, undefined, this.extend(request, params));
            const length = result.length;
            if (length === 0) {
                throw new OrderNotFound('Order ' + id + ' does not exist.');
            }
            if (length > 1) {
                throw new InvalidOrder(this.id + ' returned more than one order');
            }
            return this.safeValue(result, 0);
        }
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name bybit#createOrder
         * @description create a trade order
         * @see https://bybit-exchange.github.io/docs/v5/order/create-order
         * @see https://bybit-exchange.github.io/docs/spot/trade/place-order
         * @see https://bybit-exchange.github.io/docs/derivatives/unified/place-order
         * @see https://bybit-exchange.github.io/docs/derivatives/contract/place-order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        this.checkRequiredSymbol('createOrder', symbol);
        const market = this.market(symbol);
        symbol = market['symbol'];
        // eslint-disable-next-line no-unused-vars
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        const isUSDCSettled = market['settle'] === 'USDC';
        if (enableUnifiedAccount && !market['inverse']) {
            return await this.createUnifiedAccountOrder(symbol, type, side, amount, price, params);
        }
        else if (isUSDCSettled) {
            return await this.createUsdcOrder(symbol, type, side, amount, price, params);
        }
        else {
            return await this.createContractV3Order(symbol, type, side, amount, price, params);
        }
    }
    async createPositionTradeStop(symbol, type, side, amount, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const reduceOnly = this.safeValue(params, 'reduceOnly', false);
        const request = {
            'symbol': market['id'],
        };
        if (market['linear'] || market['spot']) {
            request['category'] = 'linear';
        }
        else if (market['option']) {
            request['category'] = 'option';
        }
        else if (market['inverse']) {
            request['category'] = 'inverse';
        }
        // TEALSTREET  //
        const positionMode = this.safeValue(params, 'positionMode', 'oneway');
        request['positionIdx'] = 0;
        if (positionMode !== 'oneway') {
            if (reduceOnly) {
                request['positionIdx'] = (side === 'sell') ? 2 : 1;
            }
            else {
                request['positionIdx'] = (side === 'sell') ? 1 : 2;
            }
        }
        const trailingStop = this.safeString(params, 'trailingStop');
        if (trailingStop === undefined) {
            request['tpslMode'] = 'Partial';
            if (amount === 0) {
                request['tpslMode'] = 'Full';
                request['tpOrderType'] = 'Market';
                request['slOrderType'] = 'Market';
            }
        }
        const stopPrice = this.safeString(params, 'stopPrice');
        const basePrice = this.safeString(params, 'basePrice');
        if (!basePrice) {
            throw new InvalidOrder(this.id + ' createOrder() requires both the triggerPrice and basePrice params for ' + type + ' orders');
        }
        let triggerBy = 'LastPrice';
        if (params['trigger'] === 'Index') {
            triggerBy = 'IndexPrice';
        }
        else if (params['trigger'] === 'Mark') {
            triggerBy = 'MarkPrice';
        }
        if (Precise.stringGt(stopPrice, basePrice)) {
            if (side === 'buy') {
                if (trailingStop !== undefined) {
                    // request['tpslMode'] = 'Full';
                    request['trailingStop'] = this.priceToPrecision(symbol, trailingStop);
                }
                else {
                    request['stopLoss'] = this.priceToPrecision(symbol, stopPrice);
                    if (amount !== 0) {
                        request['slSize'] = this.amountToPrecision(symbol, amount);
                    }
                    // request['slTriggerBy'] = 'MarkPrice';
                    request['slTriggerBy'] = triggerBy;
                }
            }
            else {
                request['takeProfit'] = this.priceToPrecision(symbol, stopPrice);
                if (amount !== 0) {
                    request['tpSize'] = this.amountToPrecision(symbol, amount);
                }
                // request['tpTriggerBy'] = 'LastPrice';
                request['tpTriggerBy'] = triggerBy;
            }
        }
        else {
            if (side === 'buy') {
                request['takeProfit'] = this.priceToPrecision(symbol, stopPrice);
                if (amount !== 0) {
                    request['tpSize'] = this.amountToPrecision(symbol, amount);
                }
                // request['tpTriggerBy'] = 'LastPrice';
                request['tpTriggerBy'] = triggerBy;
            }
            else {
                if (trailingStop !== undefined) {
                    // request['tpslMode'] = 'Full';
                    request['trailingStop'] = this.priceToPrecision(symbol, trailingStop);
                }
                else {
                    request['stopLoss'] = this.priceToPrecision(symbol, stopPrice);
                    if (amount !== 0) {
                        request['slSize'] = this.amountToPrecision(symbol, amount);
                    }
                    // request['slTriggerBy'] = 'MarkPrice';
                    request['slTriggerBy'] = triggerBy;
                }
            }
        }
        params = this.omit(params, ['stopPrice', 'timeInForce', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId', 'positionMode', 'close', 'trigger', 'basePrice', 'trailingStop']);
        // eslint-disable-next-line no-unused-vars
        await this.privatePostV5PositionTradingStop(this.extend(request, params));
        const stopOrders = await this.fetchOpenOrders(symbol, undefined, undefined, { 'stop': true });
        const filteredStopOrders = this.filterBySinceLimit(stopOrders, this.seconds() - 10);
        return this.safeValue(filteredStopOrders, 0);
    }
    async createUnifiedAccountOrder(symbol, type, side, amount, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        let lowerCaseType = type.toLowerCase();
        let isStop = false;
        const bindStops = this.safeValue(params, 'bindStops', true);
        if (lowerCaseType === 'stop') {
            isStop = true;
            lowerCaseType = 'market';
            if (bindStops) {
                return this.createPositionTradeStop(symbol, type, side, amount, price, params);
            }
        }
        else if (lowerCaseType === 'stopLimit') {
            isStop = true;
            lowerCaseType = 'limit';
        }
        if ((price === undefined) && (lowerCaseType === 'limit')) {
            throw new ArgumentsRequired(this.id + ' createOrder requires a price argument for limit orders');
        }
        const closeOnTrigger = this.safeValue(params, 'close', false);
        const reduceOnly = this.safeValue(params, 'reduceOnly', false);
        const request = {
            'symbol': market['id'],
            'side': this.capitalize(side),
            'orderType': this.capitalize(lowerCaseType),
            'reduceOnly': reduceOnly,
            'closeOnTrigger': closeOnTrigger,
            'orderLinkId': this['refCode'] + this.uuid22(),
        };
        if (amount) {
            request['qty'] = this.amountToPrecision(symbol, amount);
        }
        else {
            request['qty'] = '0';
        }
        if (isStop) {
            const close = this.safeValue(params, 'close', false);
            if (close) {
                request['closeOnTrigger'] = true;
            }
            const triggerType = this.safeString2(params, 'trigger', 'triggerType', 'Last');
            request['triggerBy'] = this.formatStopTrigger(triggerType);
        }
        if (market['linear']) {
            request['category'] = 'linear';
        }
        else if (market['option']) {
            request['category'] = 'option';
        }
        else {
            throw new NotSupported(this.id + ' createOrder does not allow inverse market orders for ' + symbol + ' markets');
        }
        const isMarket = lowerCaseType === 'market';
        const isLimit = lowerCaseType === 'limit';
        if (isLimit) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const exchangeSpecificParam = this.safeString(params, 'time_in_force');
        const timeInForce = this.safeStringLower(params, 'timeInForce');
        const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
        if (postOnly) {
            request['timeInForce'] = 'PostOnly';
        }
        else if (timeInForce === 'gtc') {
            request['timeInForce'] = 'GTC';
        }
        else if (timeInForce === 'fok') {
            request['timeInForce'] = 'FOK';
        }
        else if (timeInForce === 'ioc') {
            request['timeInForce'] = 'IOC';
        }
        // TEALSTREET  //
        const positionMode = this.safeValue(params, 'positionMode', 'oneway');
        request['positionIdx'] = 0;
        if (positionMode !== 'oneway') {
            if (isStop) {
                if ((side === 'buy' && !closeOnTrigger) || (side === 'sell' && closeOnTrigger)) {
                    request['positionIdx'] = 1;
                }
                else if ((side === 'sell' && !closeOnTrigger) || (side === 'buy' && closeOnTrigger)) {
                    request['positionIdx'] = 2;
                }
            }
            else {
                if ((side === 'buy' && !reduceOnly) || (side === 'sell' && reduceOnly)) {
                    request['positionIdx'] = 1;
                }
                else if ((side === 'sell' && !reduceOnly) || (side === 'buy' && reduceOnly)) {
                    request['positionIdx'] = 2;
                }
            }
        }
        request['tpslMode'] = 'Partial';
        if (amount === 0) {
            request['tpslMode'] = 'Full';
            request['tpOrderType'] = 'Market';
            request['slOrderType'] = 'Market';
        }
        const triggerPrice = this.safeNumber2(params, 'stopPrice', 'triggerPrice');
        const basePrice = this.safeNumber(params, 'basePrice');
        if (isStop) {
            if (!basePrice) {
                throw new InvalidOrder(this.id + ' createOrder() requires both the triggerPrice and basePrice params for ' + type + ' orders');
            }
            if (triggerPrice === undefined) {
                throw new InvalidOrder(this.id + ' createOrder() requires a triggerPrice param for ' + type + ' orders');
            }
            let triggerBy = 'LastPrice';
            if (params['trigger'] === 'Index') {
                triggerBy = 'IndexPrice';
            }
            else if (params['trigger'] === 'Mark') {
                triggerBy = 'MarkPrice';
            }
            request['triggerBy'] = triggerBy;
            request['slTriggerBy'] = triggerBy;
            request['tpTriggerBy'] = triggerBy;
            // request['triggerBy'] = 'MarkPrice';
            // request['slTriggerBy'] = 'MarkPrice';
            // request['tpTriggerBy'] = 'LastPrice';
            request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
            if (triggerPrice > basePrice) {
                request['triggerDirection'] = 1;
            }
            else {
                request['triggerDirection'] = 2;
            }
        }
        const takeProfit = this.safeString(params, 'takeProfit');
        if (takeProfit !== undefined) {
            request['takeProfit'] = this.priceToPrecision(symbol, takeProfit);
        }
        const stopLoss = this.safeString(params, 'stopLoss');
        if (stopLoss !== undefined) {
            request['stopLoss'] = this.priceToPrecision(symbol, stopLoss);
        }
        params = this.omit(params, ['stopPrice', 'timeInForce', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId', 'positionMode', 'close']);
        const response = await this.privatePostV5OrderCreate(this.extend(request, params));
        const order = this.safeValue(response, 'result', {});
        return this.parseOrder(order);
    }
    async createContractV3Order(symbol, type, side, amount, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        let lowerCaseType = type.toLowerCase();
        let isStop = false;
        const bindStops = this.safeValue(params, 'bindStops', true);
        if (lowerCaseType === 'stop') {
            isStop = true;
            lowerCaseType = 'market';
            if (bindStops) {
                return this.createPositionTradeStop(symbol, type, side, amount, price, params);
            }
        }
        else if (lowerCaseType === 'stopLimit') {
            isStop = true;
            lowerCaseType = 'limit';
        }
        if ((price === undefined) && (lowerCaseType === 'limit')) {
            throw new ArgumentsRequired(this.id + ' createContractV3Order requires a price argument for limit orders');
        }
        const closeOnTrigger = this.safeValue(params, 'close', false);
        const reduceOnly = this.safeValue(params, 'reduceOnly', false);
        const request = {
            'symbol': market['id'],
            'side': this.capitalize(side),
            'orderType': this.capitalize(lowerCaseType),
            'timeInForce': 'GoodTillCancel',
            'qty': this.amountToPrecision(symbol, amount),
            // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
            // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
            'reduceOnly': reduceOnly,
            // when creating a closing order, bybit recommends a True value for
            //  closeOnTrigger to avoid failing due to insufficient available margin
            'closeOnTrigger': closeOnTrigger,
            // 'orderLinkId': 'string', // unique client order id, max 36 characters
            // 'triggerPrice': 123.45, // trigger price, required for conditional orders
            // 'triggerBy': 'MarkPrice', // IndexPrice, MarkPrice
            // 'tptriggerby': 'MarkPrice', // IndexPrice, MarkPrice
            // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice
            // 'positionIdx': 0, // Position mode. unified margin account is only available in One-Way mode, which is 0
            // 'triggerDirection': 1, // Trigger direction. Mainly used in conditional order. Trigger the order when market price rises to triggerPrice or falls to triggerPrice. 1: rise; 2: fall
            'orderLinkId': this['refCode'] + this.uuid22(),
        };
        if (market['future']) {
            const positionIdx = this.safeInteger(params, 'position_idx', 0); // 0 One-Way Mode, 1 Buy-side, 2 Sell-side
            request['position_idx'] = positionIdx;
            params = this.omit(params, 'position_idx');
        }
        const isMarket = lowerCaseType === 'market';
        const isLimit = lowerCaseType === 'limit';
        if (isLimit) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const exchangeSpecificParam = this.safeString(params, 'time_in_force');
        const timeInForce = this.safeStringLower(params, 'timeInForce');
        const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
        if (postOnly) {
            request['timeInForce'] = 'PostOnly';
        }
        else if (timeInForce === 'gtc') {
            request['timeInForce'] = 'GoodTillCancel';
        }
        else if (timeInForce === 'fok') {
            request['timeInForce'] = 'FillOrKill';
        }
        else if (timeInForce === 'ioc') {
            request['timeInForce'] = 'ImmediateOrCancel';
        }
        const positionMode = this.safeValue(params, 'positionMode', 'oneway');
        request['positionIdx'] = 0;
        if (positionMode !== 'oneway') {
            if (isStop) {
                if ((side === 'buy' && !closeOnTrigger) || (side === 'sell' && closeOnTrigger)) {
                    request['positionIdx'] = 1;
                }
                else if ((side === 'sell' && !closeOnTrigger) || (side === 'buy' && closeOnTrigger)) {
                    request['positionIdx'] = 2;
                }
            }
            else {
                if ((side === 'buy' && !reduceOnly) || (side === 'sell' && reduceOnly)) {
                    request['positionIdx'] = 1;
                }
                else if ((side === 'sell' && !reduceOnly) || (side === 'buy' && reduceOnly)) {
                    request['positionIdx'] = 2;
                }
            }
        }
        request['tpslMode'] = 'Partial';
        if (amount === 0) {
            request['tpslMode'] = 'Full';
            request['tpOrderType'] = 'Market';
            request['slOrderType'] = 'Market';
        }
        const triggerPrice = this.safeNumber2(params, 'stopPrice', 'triggerPrice');
        const basePrice = this.safeNumber(params, 'basePrice');
        if (isStop) {
            if (!basePrice) {
                throw new InvalidOrder(this.id + ' createOrder() requires both the triggerPrice and basePrice params for ' + type + ' orders');
            }
            if (triggerPrice === undefined) {
                throw new InvalidOrder(this.id + ' createOrder() requires a triggerPrice param for ' + type + ' orders');
            }
            let triggerBy = 'LastPrice';
            if (params['trigger'] === 'Index') {
                triggerBy = 'IndexPrice';
            }
            else if (params['trigger'] === 'Mark') {
                triggerBy = 'MarkPrice';
            }
            request['triggerBy'] = triggerBy;
            request['slTriggerBy'] = triggerBy;
            request['tpTriggerBy'] = triggerBy;
            request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
            if (triggerPrice > basePrice) {
                request['triggerDirection'] = 1;
            }
            else {
                request['triggerDirection'] = 2;
            }
        }
        const takeProfit = this.safeString(params, 'takeProfit');
        if (takeProfit !== undefined) {
            request['takeProfit'] = this.priceToPrecision(symbol, takeProfit);
        }
        const stopLoss = this.safeString(params, 'stopLoss');
        if (stopLoss !== undefined) {
            request['stopLoss'] = this.priceToPrecision(symbol, stopLoss);
        }
        params = this.omit(params, ['stopPrice', 'timeInForce', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId']);
        const response = await this.privatePostContractV3PrivateOrderCreate(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "orderId": "e10b0716-7c91-4091-b98a-1fa0f401c7d5",
        //             "orderLinkId": "test0000003"
        //         },
        //         "retExtInfo": null,
        //         "time": 1664441344238
        //     }
        //
        const order = this.safeValue(response, 'result', {});
        return this.parseOrder(order);
    }
    async createUsdcOrder(symbol, type, side, amount, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        if (type === 'market') {
            throw new NotSupported(this.id + 'createOrder does not allow market orders for ' + symbol + ' markets');
        }
        const lowerCaseType = type.toLowerCase();
        if ((price === undefined) && (lowerCaseType === 'limit')) {
            throw new ArgumentsRequired(this.id + ' createOrder requires a price argument for limit orders');
        }
        const request = {
            'symbol': market['id'],
            'side': this.capitalize(side),
            'orderType': this.capitalize(lowerCaseType),
            'timeInForce': 'GoodTillCancel',
            'orderQty': this.amountToPrecision(symbol, amount),
            // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
            // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
            // 'reduceOnly': false, // reduce only, required for linear orders
            // when creating a closing order, bybit recommends a True value for
            //  closeOnTrigger to avoid failing due to insufficient available margin
            // 'closeOnTrigger': false, required for linear orders
            // 'orderLinkId': 'string', // unique client order id, max 36 characters
            // 'triggerPrice': 123.45, // trigger price, required for conditional orders
            // 'trigger_by': 'MarkPrice', // IndexPrice, MarkPrice
            // 'tptriggerby': 'MarkPrice', // IndexPrice, MarkPrice
            // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice
            // 'orderFilter': 'Order' or 'StopOrder'
            // 'mmp': false // market maker protection
        };
        const isMarket = lowerCaseType === 'market';
        const isLimit = lowerCaseType === 'limit';
        if (isLimit !== undefined) {
            request['orderPrice'] = this.priceToPrecision(symbol, price);
        }
        const exchangeSpecificParam = this.safeString(params, 'time_in_force');
        const timeInForce = this.safeStringLower(params, 'timeInForce');
        const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
        if (postOnly) {
            request['time_in_force'] = 'PostOnly';
        }
        else if (timeInForce === 'gtc') {
            request['time_in_force'] = 'GoodTillCancel';
        }
        else if (timeInForce === 'fok') {
            request['time_in_force'] = 'FillOrKill';
        }
        else if (timeInForce === 'ioc') {
            request['time_in_force'] = 'ImmediateOrCancel';
        }
        if (market['swap']) {
            const triggerPrice = this.safeNumber2(params, 'stopPrice', 'triggerPrice');
            const stopLossTriggerPrice = this.safeNumber(params, 'stopLossPrice', triggerPrice);
            const takeProfitTriggerPrice = this.safeNumber(params, 'takeProfitPrice');
            const stopLoss = this.safeNumber(params, 'stopLoss');
            const takeProfit = this.safeNumber(params, 'takeProfit');
            const isStopLossTriggerOrder = stopLossTriggerPrice !== undefined;
            const isTakeProfitTriggerOrder = takeProfitTriggerPrice !== undefined;
            const isStopLoss = stopLoss !== undefined;
            const isTakeProfit = takeProfit !== undefined;
            const isStopOrder = isStopLossTriggerOrder || isTakeProfitTriggerOrder;
            if (isStopOrder) {
                request['orderFilter'] = 'StopOrder';
                let triggerBy = 'LastPrice';
                if (params['trigger'] === 'Index') {
                    triggerBy = 'IndexPrice';
                }
                else if (params['trigger'] === 'Mark') {
                    triggerBy = 'MarkPrice';
                }
                request['trigger_by'] = triggerBy;
                const stopPx = isStopLossTriggerOrder ? stopLossTriggerPrice : takeProfitTriggerPrice;
                const preciseStopPrice = this.priceToPrecision(symbol, stopPx);
                request['triggerPrice'] = preciseStopPrice;
                const delta = this.numberToString(market['precision']['price']);
                request['basePrice'] = isStopLossTriggerOrder ? Precise.stringSub(preciseStopPrice, delta) : Precise.stringAdd(preciseStopPrice, delta);
            }
            else if (isStopLoss || isTakeProfit) {
                if (isStopLoss) {
                    request['stopLoss'] = this.priceToPrecision(symbol, stopLoss);
                }
                if (isTakeProfit) {
                    request['takeProfit'] = this.priceToPrecision(symbol, takeProfit);
                }
            }
            else {
                request['orderFilter'] = 'Order';
            }
        }
        const clientOrderId = this.safeString(params, 'clientOrderId');
        if (clientOrderId !== undefined) {
            request['orderLinkId'] = clientOrderId;
        }
        else if (market['option']) {
            // mandatory field for options
            request['orderLinkId'] = this.uuid16();
        }
        params = this.omit(params, ['stopPrice', 'timeInForce', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId']);
        const method = market['option'] ? 'privatePostOptionUsdcOpenapiPrivateV1PlaceOrder' : 'privatePostPerpetualUsdcOpenapiPrivateV1PlaceOrder';
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "retCode":0,
        //         "retMsg":"",
        //         "result":{
        //            "orderId":"34450a59-325e-4296-8af0-63c7c524ae33",
        //            "orderLinkId":"",
        //            "mmp":false,
        //            "symbol":"BTCPERP",
        //            "orderType":"Limit",
        //            "side":"Buy",
        //            "orderQty":"0.00100000",
        //            "orderPrice":"20000.00",
        //            "iv":"0",
        //            "timeInForce":"GoodTillCancel",
        //            "orderStatus":"Created",
        //            "createdAt":"1652261746007873",
        //            "basePrice":"0.00",
        //            "triggerPrice":"0.00",
        //            "takeProfit":"0.00",
        //            "stopLoss":"0.00",
        //            "slTriggerBy":"UNKNOWN",
        //            "tpTriggerBy":"UNKNOWN"
        //     }
        //
        const order = this.safeValue(response, 'result', {});
        return this.parseOrder(order);
    }
    async editUnifiedAccountOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['linear'] && !market['option']) {
            throw new NotSupported(this.id + ' editOrder does not allow inverse market orders for ' + symbol + ' markets');
        }
        const request = {
            'symbol': market['id'],
            'orderId': id,
            // 'orderLinkId': 'string', // unique client order id, max 36 characters
            // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
            // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
            // 'triggerPrice': 123.45, // trigger price, required for conditional orders
            // 'triggerBy': 'MarkPrice', // IndexPrice, MarkPrice, LastPrice
            // 'tpTriggerby': 'MarkPrice', // IndexPrice, MarkPrice, LastPrice
            // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice, LastPrice
            // Valid for option only.
            // 'orderIv': '0', // Implied volatility; parameters are passed according to the real value; for example, for 10%, 0.1 is passed
        };
        if (amount) {
            request['qty'] = this.amountToPrecision(symbol, amount);
        }
        else {
            request['qty'] = '0';
        }
        if (market['linear']) {
            request['category'] = 'linear';
        }
        else {
            request['category'] = 'option';
        }
        if (price !== undefined) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
        const stopLossPrice = this.safeValue2(params, 'stopLossPrice', 'stopLoss');
        const isStopLossOrder = stopLossPrice !== undefined;
        const takeProfitPrice = this.safeValue2(params, 'takeProfitPrice', 'takeProfit');
        const isTakeProfitOrder = takeProfitPrice !== undefined;
        if (isStopLossOrder) {
            request['stopLoss'] = this.priceToPrecision(symbol, stopLossPrice);
        }
        if (isTakeProfitOrder) {
            request['takeProfit'] = this.priceToPrecision(symbol, takeProfitPrice);
        }
        if (triggerPrice !== undefined) {
            request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
        }
        params = this.omit(params, ['stopPrice', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'stopLoss', 'takeProfit']);
        const response = await this.privatePostV5OrderAmend(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "orderId": "c6f055d9-7f21-4079-913d-e6523a9cfffa",
        //             "orderLinkId": "linear-004"
        //         },
        //         "retExtInfo": {},
        //         "time": 1672217093461
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return {
            'info': response,
            'id': this.safeString(result, 'orderId'),
        };
    }
    async editUnifiedMarginOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['linear'] && !market['option']) {
            throw new NotSupported(this.id + ' editOrder does not allow inverse market orders for ' + symbol + ' markets');
        }
        const lowerCaseType = type.toLowerCase();
        if ((price === undefined) && (lowerCaseType === 'limit')) {
            throw new ArgumentsRequired(this.id + ' editOrder requires a price argument for limit orders');
        }
        const request = {
            'orderId': id,
            'symbol': market['id'],
            'side': this.capitalize(side),
            'orderType': this.capitalize(lowerCaseType),
            'timeInForce': 'GoodTillCancel',
            'qty': this.amountToPrecision(symbol, amount),
            // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
            // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
            // 'orderLinkId': 'string', // unique client order id, max 36 characters
            // 'triggerPrice': 123.45, // trigger price, required for conditional orders
            // 'triggerBy': 'MarkPrice', // IndexPrice, MarkPrice
            // 'tptriggerby': 'MarkPrice', // IndexPrice, MarkPrice
            // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice
            // 'iv': '0', // Implied volatility, for options only; parameters are passed according to the real value; for example, for 10%, 0.1 is passed
        };
        if (market['linear']) {
            request['category'] = 'linear';
        }
        else {
            request['category'] = 'option';
        }
        const isMarket = lowerCaseType === 'market';
        const isLimit = lowerCaseType === 'limit';
        if (isLimit) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const exchangeSpecificParam = this.safeString(params, 'time_in_force');
        const timeInForce = this.safeStringLower(params, 'timeInForce');
        const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
        if (postOnly) {
            request['timeInForce'] = 'PostOnly';
        }
        else if (timeInForce === 'gtc') {
            request['timeInForce'] = 'GoodTillCancel';
        }
        else if (timeInForce === 'fok') {
            request['timeInForce'] = 'FillOrKill';
        }
        else if (timeInForce === 'ioc') {
            request['timeInForce'] = 'ImmediateOrCancel';
        }
        const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
        const stopLossPrice = this.safeValue(params, 'stopLossPrice');
        const isStopLossOrder = stopLossPrice !== undefined;
        const takeProfitPrice = this.safeValue(params, 'takeProfitPrice');
        const isTakeProfitOrder = takeProfitPrice !== undefined;
        if (isStopLossOrder) {
            request['stopLoss'] = this.priceToPrecision(symbol, stopLossPrice);
        }
        if (isTakeProfitOrder) {
            request['takeProfit'] = this.priceToPrecision(symbol, takeProfitPrice);
        }
        if (triggerPrice !== undefined) {
            let triggerBy = 'LastPrice';
            if (params['trigger'] === 'Index') {
                triggerBy = 'IndexPrice';
            }
            else if (params['trigger'] === 'Mark') {
                triggerBy = 'MarkPrice';
            }
            request['triggerBy'] = triggerBy;
            request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
        }
        const clientOrderId = this.safeString(params, 'clientOrderId');
        if (clientOrderId !== undefined) {
            request['orderLinkId'] = clientOrderId;
        }
        params = this.omit(params, ['stopPrice', 'timeInForce', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId']);
        const response = await this.privatePostUnifiedV3PrivateOrderReplace(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "orderId": "42c86d66331e41998d12c2440ce90c1a",
        //             "orderLinkId": "e80d558e-ed"
        //         }
        //     }
        //
        const order = this.safeValue(response, 'result', {});
        return this.parseOrder(order);
    }
    async editContractV3Order(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'orderId': id,
            'qty': this.amountToPrecision(symbol, amount),
        };
        if (price !== undefined) {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
        const stopLossPrice = this.safeValue2(params, 'stopLossPrice', 'stopLoss');
        const isStopLossOrder = stopLossPrice !== undefined && stopLossPrice > 0;
        const takeProfitPrice = this.safeValue2(params, 'takeProfitPrice', 'takeProfit');
        const isTakeProfitOrder = takeProfitPrice !== undefined && takeProfitPrice > 0;
        if (isStopLossOrder) {
            request['stopLoss'] = this.priceToPrecision(symbol, stopLossPrice);
        }
        if (isTakeProfitOrder) {
            request['takeProfit'] = this.priceToPrecision(symbol, takeProfitPrice);
        }
        if (triggerPrice !== undefined) {
            request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
        }
        params = this.omit(params, ['stopPrice', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'stopLoss', 'takeProfit']);
        const response = await this.privatePostContractV3PrivateOrderReplace(this.extend(request, params));
        //
        // contract v3
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "orderId": "db8b74b3-72d3-4264-bf3f-52d39b41956e",
        //             "orderLinkId": "x002"
        //         },
        //         "retExtInfo": {},
        //         "time": 1658902610749
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return {
            'info': response,
            'id': this.safeString(result, 'orderId'),
        };
    }
    async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' editOrder() requires an symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        if (enableUnifiedAccount && !market['inverse']) {
            return await this.editUnifiedAccountOrder(id, symbol, type, side, amount, price, params);
        }
        else if (market['spot']) {
            throw new NotSupported(this.id + ' editOrder() does not support spot markets');
        }
        else if (enableUnifiedMargin && !market['inverse']) {
            return await this.editUnifiedMarginOrder(id, symbol, type, side, amount, price, params);
        }
        return await this.editContractV3Order(id, symbol, type, side, amount, price, params);
    }
    async cancelUnifiedAccountOrder(id, symbol = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'orderLinkId': 'string',
            // 'orderId': id,
            // conditional orders
            // 'orderFilter': '', // Valid for spot only. Order,tpslOrder. If not passed, Order by default
        };
        if (market['spot']) {
            // only works for spot market
            const isStop = this.safeValue(params, 'stop', false);
            params = this.omit(params, ['stop']);
            request['orderFilter'] = isStop ? 'tpslOrder' : 'Order';
        }
        if (id !== undefined) { // The user can also use argument params["orderLinkId"]
            request['orderId'] = id;
        }
        if (market['spot']) {
            request['category'] = 'spot';
        }
        else if (market['option']) {
            request['category'] = 'option';
        }
        else if (market['linear']) {
            request['category'] = 'linear';
        }
        else {
            throw new NotSupported(this.id + ' cancelOrder() does not allow inverse market orders for ' + symbol + ' markets');
        }
        const response = await this.privatePostV5OrderCancel(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "orderId": "c6f055d9-7f21-4079-913d-e6523a9cfffa",
        //             "orderLinkId": "linear-004"
        //         },
        //         "retExtInfo": {},
        //         "time": 1672217377164
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseOrder(result, market);
    }
    async cancelUnifiedMarginOrder(id, symbol = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelUnifiedMarginOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'orderLinkId': 'string',
            // 'orderId': id,
            // conditional orders
            // 'orderFilter': '',
            // 'category': '',
        };
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        request['orderFilter'] = isStop ? 'StopOrder' : 'Order';
        if (id !== undefined) { // The user can also use argument params["orderLinkId"]
            request['orderId'] = id;
        }
        if (market['option']) {
            request['category'] = 'option';
        }
        else if (market['linear']) {
            request['category'] = 'linear';
        }
        else {
            throw new NotSupported(this.id + ' cancelUnifiedMarginOrder() does not allow inverse market orders for ' + symbol + ' markets');
        }
        const response = await this.privatePostUnifiedV3PrivateOrderCancel(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "orderId": "42c86d66331e41998d12c2440ce90c1a",
        //             "orderLinkId": "e80d558e-ed"
        //         }
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseOrder(result, market);
    }
    async cancelUSDCOrder(id, symbol = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelUSDCOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'orderLinkId': 'string', // one of order_id, stop_order_id or order_link_id is required
            // 'orderId': id,
        };
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        let method = undefined;
        if (id !== undefined) { // The user can also use argument params["order_link_id"]
            request['orderId'] = id;
        }
        if (market['option']) {
            method = 'privatePostOptionUsdcOpenapiPrivateV1CancelOrder';
        }
        else {
            method = 'privatePostPerpetualUsdcOpenapiPrivateV1CancelOrder';
            request['orderFilter'] = isStop ? 'StopOrder' : 'Order';
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "outRequestId": "",
        //             "symbol": "BTC-13MAY22-40000-C",
        //             "orderId": "8c65df91-91fc-461d-9b14-786379ef138c",
        //             "orderLinkId": ""
        //         },
        //         "retExtMap": {}
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseOrder(result, market);
    }
    async cancelDerivativesOrder(id, symbol = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelDerivativesOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'orderId': id,
        };
        const response = await this.privatePostContractV3PrivateOrderCancel(this.extend(request, params));
        //
        // contract v3
        //
        //     {
        //         "retCode":0,
        //         "retMsg":"OK",
        //         "result":{
        //             "orderId": "4030430d-1dba-4134-ac77-3d81c14aaa00",
        //             "orderLinkId": ""
        //         },
        //         "retExtInfo":null,
        //         "time":1658850321861
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseOrder(result, market);
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bybit#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        const isUsdcSettled = market['settle'] === 'USDC';
        if (enableUnifiedAccount && !market['inverse']) {
            return await this.cancelUnifiedAccountOrder(id, symbol, params);
        }
        else if (enableUnifiedMargin && !market['inverse']) {
            return await this.cancelUnifiedMarginOrder(id, symbol, params);
        }
        else if (isUsdcSettled) {
            return await this.cancelUSDCOrder(id, symbol, params);
        }
        return await this.cancelDerivativesOrder(id, symbol, params);
    }
    async cancelAllUnifiedAccountOrders(symbol = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        let settle = undefined;
        let type = undefined;
        let subType = undefined;
        const request = {};
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
            request['symbol'] = market['id'];
        }
        else {
            [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', 'USDT');
        }
        [type, params] = this.handleMarketTypeAndParams('cancelAllOrders', market, params);
        [subType, params] = this.handleSubTypeAndParams('cancelAllOrders', market, params, 'linear');
        if (type === 'spot') {
            request['category'] = 'spot';
        }
        else if (type === 'option') {
            request['category'] = 'option';
        }
        else if (subType === 'linear') {
            request['category'] = 'linear';
        }
        else {
            throw new NotSupported(this.id + ' cancelAllOrders() does not allow inverse market orders for ' + type + ' markets');
        }
        request['settleCoin'] = settle;
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        if (isStop) {
            request['orderFilter'] = 'tpslOrder';
        }
        // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
        let finalParams = this.extend(request, params);
        if (subType === 'inverse') {
            finalParams = this.omit(finalParams, ['settleCoin']);
        }
        const response = await this.privatePostV5OrderCancelAll(finalParams);
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [
        //                 {
        //                     "orderId": "f6a73e1f-39b5-4dee-af21-1460b2e3b27c",
        //                     "orderLinkId": "a001"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672219780463
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        const orders = this.safeValue(result, 'list');
        if (!Array.isArray(orders)) {
            return response;
        }
        return this.parseOrders(orders, market);
    }
    async cancelAllSpotOrders(symbol = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelAllSpotOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.privateDeleteSpotOrderBatchCancel(this.extend(request, params));
        //
        //    {
        //        "ret_code": 0,
        //        "ret_msg": "",
        //        "ext_code": null,
        //        "ext_info": null,
        //        "result": {
        //            "success": true
        //        }
        //    }
        //
        const result = this.safeValue(response, 'result', []);
        if (!Array.isArray(result)) {
            return response;
        }
        return this.parseOrders(result, market);
    }
    async cancelAllUnifiedMarginOrders(symbol = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        let settle = undefined;
        const request = {};
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
            request['symbol'] = market['id'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('cancelAllOrders', market, params, 'linear');
        request['category'] = subType;
        [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
        if (settle !== undefined) {
            request['settleCoin'] = settle;
        }
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        if (isStop) {
            request['orderFilter'] = 'StopOrder';
        }
        // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
        let finalParams = this.extend(request, params);
        if (subType === 'inverse') {
            finalParams = this.omit(finalParams, ['settleCoin']);
        }
        const response = await this.privatePostUnifiedV3PrivateOrderCancelAll(finalParams);
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [{
        //                     "category": "option",
        //                     "symbol": "BTC-24JUN22-45000-P",
        //                     "orderId": "bd5f3b34-d64d-4b60-8188-438fbea4c552",
        //                     "orderLinkId": "ac4e3b34-d64d-4b60-8188-438fbea4c552",
        //                 }, {
        //                     "category": "option",
        //                     "symbol": "BTC-24JUN22-45000-P",
        //                     "orderId": "4ddd727a-2af8-430e-a293-42895e594d18",
        //                     "orderLinkId": "5cee727a-2af8-430e-a293-42895e594d18",
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {
        //             "list": [{
        //                 "code": 0,
        //                 "msg": "OK"
        //             }, {
        //                 "code": 0,
        //                 "msg": "OK"
        //             }]
        //         },
        //         "time": 1657200736570
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        const orders = this.safeValue(result, 'list');
        if (!Array.isArray(orders)) {
            return response;
        }
        return this.parseOrders(orders, market);
    }
    async cancelAllUSDCOrders(symbol = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelAllUSDCOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        let method = undefined;
        const request = {
            'symbol': market['id'],
        };
        if (market['option']) {
            method = 'privatePostOptionUsdcOpenapiPrivateV1CancelAll';
        }
        else {
            method = 'privatePostPerpetualUsdcOpenapiPrivateV1CancelAll';
            const isStop = this.safeValue(params, 'stop', false);
            if (isStop) {
                request['orderFilter'] = 'StopOrder';
            }
            else {
                request['orderFilter'] = 'Order';
            }
            params = this.omit(params, ['stop']);
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "retExtMap": {},
        //         "result": [
        //             {
        //                 "outRequestId": "cancelAll-290119-1652176443114-0",
        //                 "symbol": "BTC-13MAY22-40000-C",
        //                 "orderId": "fa6cd740-56ed-477d-9385-90ccbfee49ca",
        //                 "orderLinkId": "",
        //                 "errorCode": 0,
        //                 "errorDesc": ""
        //             }
        //         ]
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        if (!Array.isArray(result)) {
            return response;
        }
        return this.parseOrders(result, market);
    }
    async cancelAllDerivativesOrders(symbol = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        let settle = undefined;
        const request = {};
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
            request['symbol'] = market['id'];
        }
        [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
        if (settle !== undefined) {
            request['settleCoin'] = settle;
        }
        // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
        let finalParams = this.extend(request, params);
        if (request['settleCoin'] !== 'USDT' && request['settleCoin'] !== 'USDC') {
            finalParams = this.omit(finalParams, ['settleCoin']);
        }
        const response = await this.privatePostContractV3PrivateOrderCancelAll(finalParams);
        //
        // contract v3
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [
        //                 {
        //                     "orderId": "4030430d-1dba-4134-ac77-3d81c14aaa00",
        //                     "orderLinkId": "x001"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1658901359225
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        const orders = this.safeValue(result, 'list', []);
        return this.parseOrders(orders, market);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name bybit#cancelAllOrders
         * @description cancel all open orders
         * @param {string|undefined} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let settle = this.safeString(params, 'settleCoin');
        if (settle === undefined) {
            [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
        }
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('cancelAllOrders', market, params);
        const isUsdcSettled = settle === 'USDC';
        const isInverse = subType === 'inverse';
        const isLinearSettle = isUsdcSettled || (settle === 'USDT');
        if (isInverse && isLinearSettle) {
            throw new ArgumentsRequired(this.id + ' cancelAllOrders with inverse subType requires settle to not be USDT or USDC');
        }
        const [type, query] = this.handleMarketTypeAndParams('cancelAllOrders', market, params);
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        if (enableUnifiedAccount) {
            return await this.cancelAllUnifiedAccountOrders(symbol, query);
        }
        else if (type === 'spot') {
            return await this.cancelAllSpotOrders(symbol, query);
        }
        else if (enableUnifiedMargin && !isInverse) {
            return await this.cancelAllUnifiedMarginOrders(symbol, query);
        }
        else if (isUsdcSettled) {
            return await this.cancelAllUSDCOrders(symbol, query);
        }
        else {
            return await this.cancelAllDerivativesOrders(symbol, query);
        }
    }
    async fetchUnifiedAccountOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
        // 'symbol': market['id'],
        // 'category': string, Type of derivatives product: spot, linear or option.
        // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
        // 'orderId': string, Order ID
        // 'orderLinkId': string, Unique user-set order ID
        // 'orderStatus': string, // Return all status orders if not passed
        // 'orderFilter': string, Conditional order or active order
        // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
        // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
        };
        let market = undefined;
        if (symbol === undefined) {
            let type = undefined;
            [type, params] = this.handleMarketTypeAndParams('fetchOrders', market, params);
            // option, spot
            request['category'] = type;
            if (type === 'swap') {
                let subType = undefined;
                [subType, params] = this.handleSubTypeAndParams('fetchOrders', market, params, 'linear');
                request['category'] = subType;
            }
        }
        else {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            if (market['spot']) {
                request['category'] = 'spot';
            }
            else if (market['option']) {
                request['category'] = 'option';
            }
            else if (market['linear']) {
                request['category'] = 'linear';
            }
            else {
                throw new NotSupported(this.id + ' fetchOrders() does not allow inverse market orders for ' + symbol + ' markets');
            }
        }
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        if (isStop) {
            if (market['spot']) {
                request['orderFilter'] = 'tpslOrder';
            }
            else {
                request['orderFilter'] = 'StopOrder';
            }
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetV5OrderHistory(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387%2C03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "BTCUSDT",
        //                     "orderType": "Limit",
        //                     "orderLinkId": "test-001",
        //                     "orderId": "03234de9-1332-41eb-b805-4a9f42c136a3",
        //                     "cancelType": "CancelByUser",
        //                     "avgPrice": "0",
        //                     "stopOrderType": "UNKNOWN",
        //                     "lastPriceOnCreated": "16656.5",
        //                     "orderStatus": "Cancelled",
        //                     "takeProfit": "",
        //                     "cumExecValue": "0",
        //                     "triggerDirection": 0,
        //                     "blockTradeId": "",
        //                     "rejectReason": "EC_PerCancelRequest",
        //                     "isLeverage": "",
        //                     "price": "18000",
        //                     "orderIv": "",
        //                     "createdTime": "1672220109387",
        //                     "tpTriggerBy": "UNKNOWN",
        //                     "positionIdx": 0,
        //                     "timeInForce": "GoodTillCancel",
        //                     "leavesValue": "0",
        //                     "updatedTime": "1672220114123",
        //                     "side": "Sell",
        //                     "triggerPrice": "",
        //                     "cumExecFee": "0",
        //                     "slTriggerBy": "UNKNOWN",
        //                     "leavesQty": "0",
        //                     "closeOnTrigger": false,
        //                     "cumExecQty": "0",
        //                     "reduceOnly": false,
        //                     "qty": "0.1",
        //                     "stopLoss": "",
        //                     "triggerBy": "UNKNOWN"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672221263862
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchUnifiedMarginOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
        // 'symbol': market['id'],
        // 'category': string, Type of derivatives product: linear or option.
        // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
        // 'orderId': string, Order ID
        // 'orderLinkId': string, Unique user-set order ID
        // 'orderStatus': string, Query list of orders in designated states. If this parameter is not passed, the orders in all states shall be enquired by default. This parameter supports multi-state inquiry. States should be separated with English commas.
        // 'orderFilter': string, Conditional order or active order
        // 'direction': string, prev: prev, next: next.
        // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
        // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
        };
        let market = undefined;
        if (symbol === undefined) {
            let subType = undefined;
            [subType, params] = this.handleSubTypeAndParams('fetchUnifiedMarginOrders', market, params, 'linear');
            request['category'] = subType;
        }
        else {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            if (market['option']) {
                request['category'] = 'option';
            }
            else if (market['linear']) {
                request['category'] = 'linear';
            }
            else {
                throw new NotSupported(this.id + ' fetchUnifiedMarginOrders() does not allow inverse market orders for ' + symbol + ' markets');
            }
        }
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        if (isStop) {
            request['orderFilter'] = 'StopOrder';
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetUnifiedV3PrivateOrderList(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "Success",
        //         "result": {
        //         "nextPageCursor": "7d17d359-4e38-4d3a-9a31-29791ef2dfd7%3A1657711949928%2C7d17d359-4e38-4d3a-9a31-29791ef2dfd7%3A1657711949928",
        //         "category": "linear",
        //         "list": [
        //             {
        //                 "symbol": "ETHUSDT",
        //                 "orderType": "Market",
        //                 "orderLinkId": "",
        //                 "orderId": "7d17d359-4e38-4d3a-9a31-29791ef2dfd7",
        //                 "stopOrderType": "UNKNOWN",
        //                 "orderStatus": "Filled",
        //                 "takeProfit": "",
        //                 "cumExecValue": "536.92500000",
        //                 "blockTradeId": "",
        //                 "rejectReason": "EC_NoError",
        //                 "price": "1127.10000000",
        //                 "createdTime": 1657711949928,
        //                 "tpTriggerBy": "UNKNOWN",
        //                 "timeInForce": "ImmediateOrCancel",
        //                 "basePrice": "",
        //                 "leavesValue": "0.00000000",
        //                 "updatedTime": 1657711949945,
        //                 "side": "Buy",
        //                 "triggerPrice": "",
        //                 "cumExecFee": "0.32215500",
        //                 "slTriggerBy": "UNKNOWN",
        //                 "leavesQty": "0.0000",
        //                 "closeOnTrigger": false,
        //                 "cumExecQty": "0.5000",
        //                 "reduceOnly": false,
        //                 "qty": "0.5000",
        //                 "stopLoss": "",
        //                 "triggerBy": "UNKNOWN",
        //                 "orderIM": ""
        //             }]
        //         },
        //         "time": 1657713451741
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchDerivativesOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        const request = {
        // 'symbol': market['id'],
        // 'category': string, Type of derivatives product: spot, linear or option.
        // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
        // 'orderId': string, Order ID
        // 'orderLinkId': string, Unique user-set order ID
        // 'orderStatus': string, // Return all status orders if not passed
        // 'orderFilter': string, Conditional order or active order
        // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
        // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
        };
        if (symbol === undefined) {
            let type = undefined;
            [type, params] = this.handleMarketTypeAndParams('fetchOrders', market, params);
            request['category'] = type;
            if (type === 'swap') {
                let subType = undefined;
                [subType, params] = this.handleSubTypeAndParams('fetchOrders', market, params, 'linear');
                request['category'] = subType;
            }
        }
        else {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            if (market['linear']) {
                request['category'] = 'linear';
            }
            else {
                request['category'] = 'inverse';
            }
        }
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        if (isStop) {
            request['orderFilter'] = 'StopOrder';
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetV5OrderHistory(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387%2C03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "BTCUSDT",
        //                     "orderType": "Limit",
        //                     "orderLinkId": "test-001",
        //                     "orderId": "03234de9-1332-41eb-b805-4a9f42c136a3",
        //                     "cancelType": "CancelByUser",
        //                     "avgPrice": "0",
        //                     "stopOrderType": "UNKNOWN",
        //                     "lastPriceOnCreated": "16656.5",
        //                     "orderStatus": "Cancelled",
        //                     "takeProfit": "",
        //                     "cumExecValue": "0",
        //                     "triggerDirection": 0,
        //                     "blockTradeId": "",
        //                     "rejectReason": "EC_PerCancelRequest",
        //                     "isLeverage": "",
        //                     "price": "18000",
        //                     "orderIv": "",
        //                     "createdTime": "1672220109387",
        //                     "tpTriggerBy": "UNKNOWN",
        //                     "positionIdx": 0,
        //                     "timeInForce": "GoodTillCancel",
        //                     "leavesValue": "0",
        //                     "updatedTime": "1672220114123",
        //                     "side": "Sell",
        //                     "triggerPrice": "",
        //                     "cumExecFee": "0",
        //                     "slTriggerBy": "UNKNOWN",
        //                     "leavesQty": "0",
        //                     "closeOnTrigger": false,
        //                     "cumExecQty": "0",
        //                     "reduceOnly": false,
        //                     "qty": "0.1",
        //                     "stopLoss": "",
        //                     "triggerBy": "UNKNOWN"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672221263862
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOrders
         * @description fetches information on multiple orders made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let settle = this.safeString(params, 'settleCoin');
        if (settle === undefined) {
            [settle, params] = this.handleOptionAndParams(params, 'fetchOrders', 'settle', settle);
        }
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchOrders', market, params);
        const isInverse = subType === 'inverse';
        const isUsdcSettled = settle === 'USDC';
        const isLinearSettle = isUsdcSettled || (settle === 'USDT');
        if (isInverse && isLinearSettle) {
            throw new ArgumentsRequired(this.id + ' fetchOrders with inverse subType requires settle to not be USDT or USDC');
        }
        const [type, query] = this.handleMarketTypeAndParams('fetchOrders', market, params);
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        if (enableUnifiedAccount && !isInverse) {
            return await this.fetchUnifiedAccountOrders(symbol, since, limit, query);
        }
        else if (type === 'spot') {
            throw new NotSupported(this.id + ' fetchOrders() only support ' + type + ' markets for unified trade account, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead');
        }
        else if (enableUnifiedMargin && !isInverse) {
            return await this.fetchUnifiedMarginOrders(symbol, since, limit, query);
        }
        else {
            return await this.fetchDerivativesOrders(symbol, since, limit, query);
        }
    }
    async fetchSpotClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        const request = {};
        if (symbol !== undefined) {
            request['symbol'] = market['id'];
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        const response = await this.privateGetSpotV3PrivateHistoryOrders(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        //
        //    {
        //        "retCode": "0",
        //        "retMsg": "OK",
        //        "result": {
        //            "list": [
        //                {
        //                    "accountId": "13380434",
        //                    "symbol": "AAVEUSDT",
        //                    "orderLinkId": "1666697847966604",
        //                    "orderId": "1274748373594828288",
        //                    "orderPrice": "80",
        //                    "orderQty": "0.11",
        //                    "execQty": "0",
        //                    "cummulativeQuoteQty": "0",
        //                    "avgPrice": "0",
        //                    "status": "CANCELED",
        //                    "timeInForce": "GTC",
        //                    "orderType": "LIMIT",
        //                    "side": "BUY",
        //                    "stopPrice": "0.0",
        //                    "icebergQty": "0.0",
        //                    "createTime": "1666697847972",
        //                    "updateTime": "1666697865809",
        //                    "isWorking": "1",
        //                    "orderCategory": "0"
        //                },
        //            ]
        //        },
        //        "retExtInfo": null,
        //        "time": "1666732287588"
        //    }
        //
        const orders = this.safeValue(result, 'list', []);
        return this.parseOrders(orders, market, since, limit);
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchClosedOrders', market, params);
        const enableUnified = await this.isUnifiedEnabled();
        const request = {};
        if ((type === 'spot') && !enableUnified[1]) {
            return await this.fetchSpotClosedOrders(symbol, since, limit, params);
        }
        else {
            request['orderStatus'] = 'Filled';
        }
        return await this.fetchOrders(symbol, since, limit, this.extend(request, params));
    }
    async fetchCanceledOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchCanceledOrders
         * @description fetches information on multiple canceled orders made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
         * @param {int|undefined} limit max number of orders to return, default is undefined
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchCanceledOrders', market, params);
        const enableUnified = await this.isUnifiedEnabled();
        const request = {};
        if ((type === 'spot') && !enableUnified[1]) {
            throw new NotSupported(this.id + ' fetchCanceledOrders() only allow spot market orders for unified trade account, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead');
        }
        else {
            request['orderStatus'] = 'Cancelled';
        }
        return await this.fetchOrders(symbol, since, limit, this.extend(request, params));
    }
    async fetchUnifiedAccountOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        limit = limit || 50;
        const request = {
        // 'symbol': market['id'],
        // 'category': string, Type of derivatives product: linear or option.
        // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
        // 'settleCoin': string, Settle coin. For linear, either symbol or settleCoin is required
        // 'orderId': string, Order ID
        // 'orderLinkId': string, Unique user-set order ID
        // 'orderFilter': string, Conditional order or active order
        // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
        // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
        // 'openOnly': 0,
        };
        let market = undefined;
        if (symbol === undefined) {
            let type = undefined;
            [type, params] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
            let subType = undefined;
            [subType, params] = this.handleSubTypeAndParams('fetchOpenOrders', market, params, 'linear');
            request['category'] = type;
            if (type === 'swap') {
                if (subType === 'linear') {
                    // TEALSTREET BEGIN
                    // this.checkRequiredSymbol ('fetchOpenOrders', symbol);
                    request['settleCoin'] = 'USDT';
                    // TEALSTREET END
                }
                else if (subType === 'inverse') {
                    // TEALSTREET BEGIN
                    // throw new NotSupported (this.id + ' fetchOpenOrders() does not allow inverse market orders for ' + symbol + ' markets');
                    request['settleCoin'] = 'BTC';
                    // TEALSTREET END
                }
                request['category'] = subType;
            }
        }
        else {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            if (market['spot']) {
                request['category'] = 'spot';
            }
            else if (market['option']) {
                request['category'] = 'option';
            }
            else if (market['linear']) {
                request['category'] = 'linear';
            }
            else {
                throw new NotSupported(this.id + ' fetchOpenOrders() does not allow inverse market orders for ' + symbol + ' markets');
            }
        }
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        // TEALSTREET BEGIN
        if (isStop) {
            // if (market['spot']) {
            //     request['orderFilter'] = 'tpslOrder';
            // } else {
            request['orderFilter'] = 'StopOrder';
            // }
        }
        // TEALSTREET END
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "1321052653536515584%3A1672217748287%2C1321052653536515584%3A1672217748287",
        //             "category": "spot",
        //             "list": [
        //                 {
        //                     "symbol": "ETHUSDT",
        //                     "orderType": "Limit",
        //                     "orderLinkId": "1672217748277652",
        //                     "orderId": "1321052653536515584",
        //                     "cancelType": "UNKNOWN",
        //                     "avgPrice": "",
        //                     "stopOrderType": "tpslOrder",
        //                     "lastPriceOnCreated": "",
        //                     "orderStatus": "Cancelled",
        //                     "takeProfit": "",
        //                     "cumExecValue": "0",
        //                     "triggerDirection": 0,
        //                     "isLeverage": "0",
        //                     "rejectReason": "",
        //                     "price": "1000",
        //                     "orderIv": "",
        //                     "createdTime": "1672217748287",
        //                     "tpTriggerBy": "",
        //                     "positionIdx": 0,
        //                     "timeInForce": "GTC",
        //                     "leavesValue": "500",
        //                     "updatedTime": "1672217748287",
        //                     "side": "Buy",
        //                     "triggerPrice": "1500",
        //                     "cumExecFee": "0",
        //                     "leavesQty": "0",
        //                     "slTriggerBy": "",
        //                     "closeOnTrigger": false,
        //                     "cumExecQty": "0",
        //                     "reduceOnly": false,
        //                     "qty": "0.5",
        //                     "stopLoss": "",
        //                     "triggerBy": "1192.5"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672219526294
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        let parsedOrders = this.parseOrders(data, market, since, limit);
        let paginationCursor = this.safeString(result, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const data = this.safeValue(result, 'list', []);
                parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
                paginationCursor = this.safeString(result, 'nextPageCursor');
            }
        }
        return parsedOrders;
    }
    async fetchSpotOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetSpotV3PrivateOpenOrders(this.extend(request, params));
        //
        //    {
        //         "retCode": "0",
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [
        //                 {
        //                     "accountId": "13380434",
        //                     "symbol": "AAVEUSDT",
        //                     "orderLinkId": "1666734005300717",
        //                     "orderId": "1275051683279281664",
        //                     "orderPrice": "80",
        //                     "orderQty": "0.11",
        //                     "execQty": "0",
        //                     "cummulativeQuoteQty": "0",
        //                     "avgPrice": "0",
        //                     "status": "NEW",
        //                     "timeInForce": "GTC",
        //                     "orderType": "LIMIT",
        //                     "side": "BUY",
        //                     "stopPrice": "0.0",
        //                     "icebergQty": "0.0",
        //                     "createTime": "1666734005304",
        //                     "updateTime": "1666734005309",
        //                     "isWorking": "1",
        //                     "orderCategory": "0"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": null,
        //         "time": "1666734031592"
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        let parsedOrders = this.parseOrders(data, market, since, limit);
        let paginationCursor = this.safeString(result, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privateGetSpotV3PrivateOpenOrders(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const data = this.safeValue(result, 'list', []);
                parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
                paginationCursor = this.safeString(result, 'nextPageCursor');
            }
        }
        return parsedOrders;
    }
    async fetchUnifiedMarginOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        limit = limit || 50;
        const request = {};
        let market = undefined;
        if (symbol === undefined) {
            let subType = undefined;
            [subType, params] = this.handleSubTypeAndParams('fetchUnifiedMarginOrders', market, params, 'linear');
            request['category'] = subType;
        }
        else {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            if (market['option']) {
                request['category'] = 'option';
            }
            else if (market['linear']) {
                request['category'] = 'linear';
            }
            else {
                throw new NotSupported(this.id + ' fetchUnifiedMarginOpenOrders() does not allow inverse market orders for ' + symbol + ' markets');
            }
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchUnifiedMarginOpenOrders', market, params);
        const isStop = this.safeValue(params, 'stop', false);
        const isConditional = isStop || (type === 'stop') || (type === 'conditional');
        params = this.omit(params, ['stop']);
        if (isConditional) {
            request['orderFilter'] = 'StopOrder';
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetUnifiedV3PrivateOrderUnfilledOrders(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "Success",
        //         "result": {
        //             "nextPageCursor": "135ccc0d-8136-4e1b-8af3-07b11ee158d1%3A1665565610526%2C135ccc0d-8136-4e1b-8af3-07b11ee158d1%3A1665565610526",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "ETHUSDT",
        //                     "orderType": "Limit",
        //                     "orderLinkId": "test0000005",
        //                     "orderId": "135ccc0d-8136-4e1b-8af3-07b11ee158d1",
        //                     "stopOrderType": "UNKNOWN",
        //                     "orderStatus": "New",
        //                     "takeProfit": "",
        //                     "cumExecValue": "0.00000000",
        //                     "blockTradeId": "",
        //                     "price": "700.00000000",
        //                     "createdTime": 1665565610526,
        //                     "tpTriggerBy": "UNKNOWN",
        //                     "timeInForce": "GoodTillCancel",
        //                     "basePrice": "",
        //                     "updatedTime": 1665565610533,
        //                     "side": "Buy",
        //                     "triggerPrice": "",
        //                     "cumExecFee": "0.00000000",
        //                     "slTriggerBy": "UNKNOWN",
        //                     "leavesQty": "0.1000",
        //                     "closeOnTrigger": false,
        //                     "cumExecQty": "0.00000000",
        //                     "reduceOnly": false,
        //                     "qty": "0.1000",
        //                     "stopLoss": "",
        //                     "triggerBy": "UNKNOWN",
        //                     "orderIM": "0.00000000"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": null,
        //         "time": 1665565614320
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        let parsedOrders = this.parseOrders(data, market, since, limit);
        let paginationCursor = this.safeString(result, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privateGetUnifiedV3PrivateOrderUnfilledOrders(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const data = this.safeValue(result, 'list', []);
                parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
                paginationCursor = this.safeString(result, 'nextPageCursor');
            }
        }
        return parsedOrders;
    }
    async fetchDerivativesOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        limit = limit || 50;
        let market = undefined;
        let settle = undefined;
        const request = {
        // 'symbol': market['id'],
        // 'category': string, Type of derivatives product: linear or option.
        // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
        // 'settleCoin': string, Settle coin. For linear, either symbol or settleCoin is required
        // 'orderId': string, Order ID
        // 'orderLinkId': string, Unique user-set order ID
        // 'orderFilter': string, Conditional order or active order
        // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
        // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
        // 'openOnly': 0,
        };
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            if (market['linear']) {
                request['category'] = 'linear';
            }
            else {
                request['category'] = 'inverse';
            }
        }
        else {
            let type = undefined;
            [type, params] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
            let subType = undefined;
            [subType, params] = this.handleSubTypeAndParams('fetchOpenOrders', market, params, 'linear');
            request['category'] = type;
            if (type === 'swap') {
                request['category'] = subType;
            }
        }
        [settle, params] = this.handleOptionAndParams(params, 'fetchOpenOrders', 'settle', settle);
        if (settle !== undefined) {
            request['settleCoin'] = settle;
        }
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['stop']);
        if (isStop) {
            request['orderFilter'] = 'StopOrder';
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "1321052653536515584%3A1672217748287%2C1321052653536515584%3A1672217748287",
        //             "category": "spot",
        //             "list": [
        //                 {
        //                     "symbol": "ETHUSDT",
        //                     "orderType": "Limit",
        //                     "orderLinkId": "1672217748277652",
        //                     "orderId": "1321052653536515584",
        //                     "cancelType": "UNKNOWN",
        //                     "avgPrice": "",
        //                     "stopOrderType": "tpslOrder",
        //                     "lastPriceOnCreated": "",
        //                     "orderStatus": "Cancelled",
        //                     "takeProfit": "",
        //                     "cumExecValue": "0",
        //                     "triggerDirection": 0,
        //                     "isLeverage": "0",
        //                     "rejectReason": "",
        //                     "price": "1000",
        //                     "orderIv": "",
        //                     "createdTime": "1672217748287",
        //                     "tpTriggerBy": "",
        //                     "positionIdx": 0,
        //                     "timeInForce": "GTC",
        //                     "leavesValue": "500",
        //                     "updatedTime": "1672217748287",
        //                     "side": "Buy",
        //                     "triggerPrice": "1500",
        //                     "cumExecFee": "0",
        //                     "leavesQty": "0",
        //                     "slTriggerBy": "",
        //                     "closeOnTrigger": false,
        //                     "cumExecQty": "0",
        //                     "reduceOnly": false,
        //                     "qty": "0.5",
        //                     "stopLoss": "",
        //                     "triggerBy": "1192.5"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672219526294
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        let parsedOrders = this.parseOrders(data, market, since, limit);
        let paginationCursor = this.safeString(result, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const data = this.safeValue(result, 'list', []);
                parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
                paginationCursor = this.safeString(result, 'nextPageCursor');
            }
        }
        return parsedOrders;
    }
    async fetchUSDCOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        limit = limit || 50;
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchUSDCOpenOrders', market, params);
        request['category'] = (type === 'swap') ? 'perpetual' : 'option';
        const response = await this.privatePostOptionUsdcOpenapiPrivateV1QueryActiveOrders(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "resultTotalSize": 1,
        //             "cursor": "id%3D1662019818569%23df31e03b-fc00-4b4c-bd1c-b97fd72b5c5c",
        //             "dataList": [
        //                 {
        //                     "orderId": "df31e03b-fc00-4b4c-bd1c-b97fd72b5c5c",
        //                     "orderLinkId": "",
        //                     "symbol": "BTC-2SEP22-18000-C",
        //                     "orderStatus": "New",
        //                     "orderPrice": "500",
        //                     "side": "Buy",
        //                     "remainingQty": "0.1",
        //                     "orderType": "Limit",
        //                     "qty": "0.1",
        //                     "iv": "0.0000",
        //                     "cancelType": "",
        //                     "updateTimestamp": "1662019818579"
        //                 }
        //             ]
        //         }
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'dataList', []);
        let parsedOrders = this.parseOrders(data, market, since, limit);
        let paginationCursor = this.safeString(result, 'cursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privatePostOptionUsdcOpenapiPrivateV1QueryActiveOrders(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const data = this.safeValue(result, 'dataList', []);
                parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
                paginationCursor = this.safeString(result, 'cursor');
            }
        }
        return parsedOrders;
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOpenOrders
         * @description fetch all unfilled currently open orders
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch open orders for
         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let settle = this.safeString(params, 'settleCoin');
        if (settle === undefined) {
            [settle, params] = this.handleOptionAndParams(params, 'fetchOpenOrders', 'settle', settle);
        }
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchOpenOrders', market, params);
        const isInverse = subType === 'inverse';
        const isUsdcSettled = settle === 'USDC';
        const isLinearSettle = isUsdcSettled || (settle === 'USDT');
        if (isInverse && isLinearSettle) {
            throw new ArgumentsRequired(this.id + ' fetchOpenOrders with inverse subType requires settle to not be USDT or USDC');
        }
        const [type, query] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        if (enableUnifiedAccount && !isInverse) {
            return await this.fetchUnifiedAccountOpenOrders(symbol, since, limit, query);
        }
        else if (type === 'spot') {
            return await this.fetchSpotOpenOrders(symbol, since, limit, query);
        }
        else if (enableUnifiedMargin && !isInverse) {
            return await this.fetchUnifiedMarginOpenOrders(symbol, since, limit, query);
        }
        else if (isUsdcSettled) {
            return await this.fetchUSDCOpenOrders(symbol, since, limit, query);
        }
        else {
            return await this.fetchDerivativesOpenOrders(symbol, since, limit, query);
        }
    }
    async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOrderTrades
         * @description fetch all the trades made from a single order
         * @param {string} id order id
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        const request = {
            'orderId': id,
        };
        return await this.fetchMyTrades(symbol, since, limit, this.extend(request, params));
    }
    async fetchMyUnifiedTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        const request = {
        // 'symbol': market['id'],
        // 'category': '', // Product type. spot,linear,option
        // 'orderId': '', // Order ID
        // 'orderLinkId': '', // User customised order ID
        // 'baseCoin': '', // Base coin
        // 'startTime': 0, // The start timestamp (ms)
        // 'endTime': 0, // The end timestamp (ms)
        // 'execType': '', // Execution type
        // 'limit': 0, // Limit for data size per page. [1, 100]. Default: 50
        // 'cursor': '', // Cursor. Used for pagination
        };
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params);
        if (subType === 'inverse') {
            throw new NotSupported(this.id + ' fetchMyTrades() does not support ' + subType + ' markets.');
        }
        request['category'] = subType;
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 20, max 50
        }
        const response = await this.privateGetV5ExecutionList(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "132766%3A2%2C132766%3A2",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "ETHPERP",
        //                     "orderType": "Market",
        //                     "underlyingPrice": "",
        //                     "orderLinkId": "",
        //                     "side": "Buy",
        //                     "indexPrice": "",
        //                     "orderId": "8c065341-7b52-4ca9-ac2c-37e31ac55c94",
        //                     "stopOrderType": "UNKNOWN",
        //                     "leavesQty": "0",
        //                     "execTime": "1672282722429",
        //                     "isMaker": false,
        //                     "execFee": "0.071409",
        //                     "feeRate": "0.0006",
        //                     "execId": "e0cbe81d-0f18-5866-9415-cf319b5dab3b",
        //                     "tradeIv": "",
        //                     "blockTradeId": "",
        //                     "markPrice": "1183.54",
        //                     "execPrice": "1190.15",
        //                     "markIv": "",
        //                     "orderQty": "0.1",
        //                     "orderPrice": "1236.9",
        //                     "execValue": "119.015",
        //                     "execType": "Trade",
        //                     "execQty": "0.1"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672283754510
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'list', []);
        let parsedTrades = this.parseTrades(trades, market, since, limit);
        let paginationCursor = this.safeString(result, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privateGetV5ExecutionList(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const trades = this.safeValue(result, 'list', []);
                parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
                paginationCursor = this.safeString(result, 'nextPageCursor');
            }
        }
        return parsedTrades;
    }
    async fetchMyUnifiedMarginTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        let settle = undefined;
        const request = {
        // 'symbol': market['id'],
        // 'orderId': 'f185806b-b801-40ff-adec-52289370ed62', // if not provided will return user's trading records
        // 'startTime': parseInt (since / 1000),
        // 'endTime': 0,
        // 'category': ''
        // 'limit' 20, // max 50
        };
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
            request['symbol'] = market['id'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params, 'linear');
        request['category'] = subType;
        [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
        if (settle !== undefined) {
            request['settleCoin'] = settle;
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 20, max 50
        }
        const response = await this.privateGetUnifiedV3PrivateExecutionList(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "Success",
        //         "result": {
        //             "nextPageCursor": "1565%3A0%2C1565%3A0",
        //             "category": "option",
        //             "list": [
        //                 {
        //                     "orderType": "Limit",
        //                     "symbol": "BTC-14JUL22-17500-C",
        //                     "orderLinkId": "188889689-yuanzhen-558998998899",
        //                     "side": "Buy",
        //                     "orderId": "09c5836f-81ef-4208-a5b4-43135d3e02a2",
        //                     "leavesQty": "0.0000",
        //                     "execTime": 1657714122417,
        //                     "execFee": "0.11897082",
        //                     "feeRate": "0.000300",
        //                     "execId": "6e492560-78b4-5d2b-b331-22921d3173c9",
        //                     "blockTradeId": "",
        //                     "execPrice": "2360.00000000",
        //                     "lastLiquidityInd": "TAKER",
        //                     "orderQty": "0.0200",
        //                     "orderPrice": "2360.00000000",
        //                     "execValue": "47.20000000",
        //                     "execType": "Trade",
        //                     "execQty": "0.0200"
        //                 }
        //             ]
        //         },
        //         "time": 1657714292783
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'list', []);
        let parsedTrades = this.parseTrades(trades, market, since, limit);
        let paginationCursor = this.safeString(result, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privateGetUnifiedV3PrivateExecutionList(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const trades = this.safeValue(result, 'list', []);
                parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
                paginationCursor = this.safeString(result, 'nextPageCursor');
            }
        }
        return parsedTrades;
    }
    async fetchMyContractTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchMyContractTrades() requires a symbol argument');
        }
        await this.loadMarkets();
        let market = undefined;
        const request = {
        // 'symbol': market['id'],
        // 'category': '', // Product type. spot,linear,option
        // 'orderId': '', // Order ID
        // 'orderLinkId': '', // User customised order ID
        // 'baseCoin': '', // Base coin
        // 'startTime': 0, // The start timestamp (ms)
        // 'endTime': 0, // The end timestamp (ms)
        // 'execType': '', // Execution type
        // 'limit': 0, // Limit for data size per page. [1, 100]. Default: 50
        // 'cursor': '', // Cursor. Used for pagination
        };
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params);
        request['category'] = subType;
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 50, max 100
        }
        const response = await this.privateGetV5ExecutionList(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "132766%3A2%2C132766%3A2",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "ETHPERP",
        //                     "orderType": "Market",
        //                     "underlyingPrice": "",
        //                     "orderLinkId": "",
        //                     "side": "Buy",
        //                     "indexPrice": "",
        //                     "orderId": "8c065341-7b52-4ca9-ac2c-37e31ac55c94",
        //                     "stopOrderType": "UNKNOWN",
        //                     "leavesQty": "0",
        //                     "execTime": "1672282722429",
        //                     "isMaker": false,
        //                     "execFee": "0.071409",
        //                     "feeRate": "0.0006",
        //                     "execId": "e0cbe81d-0f18-5866-9415-cf319b5dab3b",
        //                     "tradeIv": "",
        //                     "blockTradeId": "",
        //                     "markPrice": "1183.54",
        //                     "execPrice": "1190.15",
        //                     "markIv": "",
        //                     "orderQty": "0.1",
        //                     "orderPrice": "1236.9",
        //                     "execValue": "119.015",
        //                     "execType": "Trade",
        //                     "execQty": "0.1"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672283754510
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'list', []);
        let parsedTrades = this.parseTrades(trades, market, since, limit);
        let paginationCursor = this.safeString(result, 'nextPageCursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privateGetV5ExecutionList(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const trades = this.safeValue(result, 'list', []);
                parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
                paginationCursor = this.safeString(result, 'nextPageCursor');
            }
        }
        return parsedTrades;
    }
    async fetchMyUsdcTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        let market = undefined;
        const request = {};
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
            request['category'] = market['option'] ? 'OPTION' : 'PERPETUAL';
        }
        else {
            request['category'] = 'PERPETUAL';
        }
        const response = await this.privatePostOptionUsdcOpenapiPrivateV1ExecutionList(this.extend(request, params));
        //
        //     {
        //       "result": {
        //         "cursor": "29%3A1%2C28%3A1",
        //         "resultTotalSize": 2,
        //         "dataList": [
        //           {
        //             "symbol": "ETHPERP",
        //             "orderLinkId": "",
        //             "side": "Sell",
        //             "orderId": "d83f8b4d-2f60-4e04-a64a-a3f207989dc6",
        //             "execFee": "0.0210",
        //             "feeRate": "0.000600",
        //             "blockTradeId": "",
        //             "tradeTime": "1669196423581",
        //             "execPrice": "1161.45",
        //             "lastLiquidityInd": "TAKER",
        //             "execValue": "34.8435",
        //             "execType": "Trade",
        //             "execQty": "0.030",
        //             "tradeId": "d9aa8590-9e6a-575e-a1be-d6261e6ed2e5"
        //           }, ...
        //         ]
        //       },
        //       "retCode": 0,
        //       "retMsg": "Success."
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'dataList', []);
        let parsedTrades = this.parseTrades(trades, market, since, limit);
        let paginationCursor = this.safeString(result, 'cursor');
        if (paginationCursor !== undefined) {
            while (paginationCursor !== undefined) {
                params['cursor'] = paginationCursor;
                const response = await this.privatePostOptionUsdcOpenapiPrivateV1ExecutionList(this.extend(request, params));
                const result = this.safeValue(response, 'result', {});
                const trades = this.safeValue(result, 'dataList', []);
                parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
                paginationCursor = this.safeString(result, 'cursor');
            }
        }
        return parsedTrades;
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        let settle = this.safeString(params, 'settleCoin');
        if (settle === undefined) {
            [settle, params] = this.handleOptionAndParams(params, 'fetchMyTrades', 'settle', settle);
        }
        if (symbol !== undefined) {
            market = this.market(symbol);
            settle = market['settle'];
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params);
        const splitId = symbol.split(':');
        const settleSuffix = this.safeString(splitId, 2);
        if (settleSuffix === 'USDC') {
            settle = 'USDC';
        }
        const isInverse = subType === 'inverse';
        const isUsdcSettled = settle === 'USDC';
        const isLinearSettle = isUsdcSettled || (settle === 'USDT');
        if (isInverse && isLinearSettle) {
            throw new ArgumentsRequired(this.id + ' fetchMyTrades with inverse subType requires settle to not be USDT or USDC');
        }
        // eslint-disable-next-line no-unused-vars
        const [type, query] = this.handleMarketTypeAndParams('fetchMyTrades', market, params);
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        if (enableUnifiedAccount && !isInverse) {
            const orderId = this.safeString(params, 'orderId');
            if (orderId === undefined) {
                this.checkRequiredSymbol('fetchMyTrades', symbol);
            }
            return await this.fetchMyUnifiedTrades(symbol, since, limit, query);
        }
        else if (enableUnifiedMargin && !isInverse) {
            return await this.fetchMyUnifiedMarginTrades(symbol, since, limit, query);
        }
        else if (isUsdcSettled) {
            // return await this.fetchMyUsdcTrades (symbol, since, limit, query);
            return [];
        }
        else {
            return await this.fetchMyContractTrades(symbol, since, limit, query);
        }
    }
    parseDepositAddress(depositAddress, currency = undefined) {
        //
        //     {
        //         chainType: 'ERC20',
        //         addressDeposit: '0xf56297c6717c1d1c42c30324468ed50a9b7402ee',
        //         tagDeposit: '',
        //         chain: 'ETH'
        //     }
        //
        const address = this.safeString(depositAddress, 'addressDeposit');
        const tag = this.safeString(depositAddress, 'tagDeposit');
        const code = this.safeString(currency, 'code');
        const chain = this.safeString(depositAddress, 'chain');
        this.checkAddress(address);
        return {
            'currency': code,
            'address': address,
            'tag': tag,
            'network': chain,
            'info': depositAddress,
        };
    }
    async fetchDepositAddressesByNetwork(code, params = {}) {
        /**
         * @method
         * @name bybit#fetchDepositAddressesByNetwork
         * @description fetch a dictionary of addresses for a currency, indexed by network
         * @see https://bybit-exchange.github.io/docs/v5/asset/master-deposit-addr
         * @param {string} code unified currency code of the currency for the deposit address
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a dictionary of [address structures]{@link https://docs.ccxt.com/#/?id=address-structure} indexed by the network
         */
        await this.loadMarkets();
        let currency = this.currency(code);
        const request = {
            'coin': currency['id'],
        };
        const response = await this.privateGetV5AssetDepositQueryAddress(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "coin": "USDT",
        //             "chains": [
        //                 {
        //                     "chainType": "ERC20",
        //                     "addressDeposit": "0xd9e1cd77afa0e50b452a62fbb68a3340602286c3",
        //                     "tagDeposit": "",
        //                     "chain": "ETH"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672192792860
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        const chains = this.safeValue(result, 'chains', []);
        const coin = this.safeString(result, 'coin');
        currency = this.currency(coin);
        const parsed = this.parseDepositAddresses(chains, [currency['code']], false, {
            'currency': currency['id'],
        });
        return this.indexBy(parsed, 'network');
    }
    async fetchDepositAddress(code, params = {}) {
        /**
         * @method
         * @name bybit#fetchDepositAddress
         * @description fetch the deposit address for a currency associated with this account
         * @see https://bybit-exchange.github.io/docs/v5/asset/master-deposit-addr
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
         */
        await this.loadMarkets();
        const [networkCode, query] = this.handleNetworkCodeAndParams(params);
        const networkId = this.networkCodeToId(networkCode);
        const currency = this.currency(code);
        const request = {
            'coin': currency['id'],
        };
        if (networkId !== undefined) {
            request['chainType'] = networkId;
        }
        const response = await this.privateGetV5AssetDepositQueryAddress(this.extend(request, query));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "coin": "USDT",
        //             "chains": [
        //                 {
        //                     "chainType": "ERC20",
        //                     "addressDeposit": "0xd9e1cd77afa0e50b452a62fbb68a3340602286c3",
        //                     "tagDeposit": "",
        //                     "chain": "ETH"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672192792860
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const chains = this.safeValue(result, 'chains', []);
        const chainsIndexedById = this.indexBy(chains, 'chain');
        const selectedNetworkId = this.selectNetworkIdFromRawNetworks(code, networkCode, chainsIndexedById);
        const addressObject = this.safeValue(chainsIndexedById, selectedNetworkId, {});
        return this.parseDepositAddress(addressObject, currency);
    }
    async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchDeposits
         * @description fetch all deposits made to an account
         * @see https://bybit-exchange.github.io/docs/v5/asset/deposit-record
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch deposits for, default = 30 days before the current time
         * @param {int|undefined} limit the maximum number of deposits structures to retrieve, default = 50, max = 50
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @param {int|undefined} params.until the latest time in ms to fetch deposits for, default = 30 days after since
         *
         * EXCHANGE SPECIFIC PARAMETERS
         * @param {string|undefined} params.cursor used for pagination
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        await this.loadMarkets();
        const request = {
        // 'coin': currency['id'],
        // 'limit': 20, // max 50
        // 'cursor': '',
        };
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['coin'] = currency['id'];
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetV5AssetDepositQueryRecord(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "rows": [
        //                 {
        //                     "coin": "USDT",
        //                     "chain": "ETH",
        //                     "amount": "10000",
        //                     "txID": "skip-notification-scene-test-amount-202212270944-533285-USDT",
        //                     "status": 3,
        //                     "toAddress": "test-amount-address",
        //                     "tag": "",
        //                     "depositFee": "",
        //                     "successAt": "1672134274000",
        //                     "confirmations": "10000",
        //                     "txIndex": "",
        //                     "blockHash": ""
        //                 }
        //             ],
        //             "nextPageCursor": "eyJtaW5JRCI6MTA0NjA0MywibWF4SUQiOjEwNDYwNDN9"
        //         },
        //         "retExtInfo": {},
        //         "time": 1672191992512
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'rows', []);
        return this.parseTransactions(data, currency, since, limit);
    }
    async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchWithdrawals
         * @description fetch all withdrawals made from an account
         * @see https://bybit-exchange.github.io/docs/v5/asset/withdraw-record
         * @param {string} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'coin': currency['id'],
        // 'limit': 20, // max 50
        // 'cusor': '',
        };
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['coin'] = currency['id'];
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetV5AssetWithdrawQueryRecord(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "rows": [
        //                 {
        //                     "coin": "USDT",
        //                     "chain": "ETH",
        //                     "amount": "77",
        //                     "txID": "",
        //                     "status": "SecurityCheck",
        //                     "toAddress": "0x99ced129603abc771c0dabe935c326ff6c86645d",
        //                     "tag": "",
        //                     "withdrawFee": "10",
        //                     "createTime": "1670922217000",
        //                     "updateTime": "1670922217000",
        //                     "withdrawId": "9976",
        //                     "withdrawType": 0
        //                 },
        //                 {
        //                     "coin": "USDT",
        //                     "chain": "ETH",
        //                     "amount": "26",
        //                     "txID": "",
        //                     "status": "success",
        //                     "toAddress": "15638072681@163.com",
        //                     "tag": "",
        //                     "withdrawFee": "0",
        //                     "createTime": "1669711121000",
        //                     "updateTime": "1669711380000",
        //                     "withdrawId": "9801",
        //                     "withdrawType": 1
        //                 }
        //             ],
        //             "nextPageCursor": "eyJtaW5JRCI6OTgwMSwibWF4SUQiOjk5NzZ9"
        //         },
        //         "retExtInfo": {},
        //         "time": 1672194949928
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'rows', []);
        return this.parseTransactions(data, currency, since, limit);
    }
    parseTransactionStatus(status) {
        const statuses = {
            // v1/v2
            'ToBeConfirmed': 'pending',
            'UnderReview': 'pending',
            'Success': 'ok',
            'Expire': 'expired',
            // v3 deposit status
            '0': 'unknown',
            '1': 'pending',
            '2': 'processing',
            '3': 'ok',
            '4': 'fail',
            // v3 withdrawal status
            'SecurityCheck': 'pending',
            'Pending': 'pending',
            'success': 'ok',
            'CancelByUser': 'canceled',
            'Reject': 'rejected',
            'Fail': 'failed',
            'BlockchainConfirmed': 'ok',
        };
        return this.safeString(statuses, status, status);
    }
    parseTransaction(transaction, currency = undefined) {
        //
        // fetchWithdrawals
        //
        //     {
        //         "coin": "USDT",
        //         "chain": "TRX",
        //         "amount": "12.34",
        //         "txID": "de5ea0a2f2e59dc9a714837dd3ddc6d5e151b56ec5d786d351c4f52336f80d3c",
        //         "status": "success",
        //         "toAddress": "TQdmFKUoe1Lk2iwZuwRJEHJreTUBoN3BAw",
        //         "tag": "",
        //         "withdrawFee": "0.5",
        //         "createTime": "1665144183000",
        //         "updateTime": "1665144256000",
        //         "withdrawId": "8839035"
        //     }
        //
        // fetchDeposits
        //
        //     {
        //         "coin": "USDT",
        //         "chain": "TRX",
        //         "amount": "44",
        //         "txID": "0b038ea12fa1575e2d66693db3c346b700d4b28347afc39f80321cf089acc960",
        //         "status": "3",
        //         "toAddress": "TC6NCAC5WSVCCiaD3kWZXyW91ZKKhLm53b",
        //         "tag": "",
        //         "depositFee": "",
        //         "successAt": "1665142507000",
        //         "confirmations": "100",
        //         "txIndex": "0",
        //         "blockHash": "0000000002ac3b1064aee94bca1bd0b58c4c09c65813b084b87a2063d961129e"
        //     }
        //
        // withdraw
        //
        //     {
        //         "id": "9377266"
        //     }
        //
        const currencyId = this.safeString(transaction, 'coin');
        const code = this.safeCurrencyCode(currencyId, currency);
        const timestamp = this.safeInteger2(transaction, 'createTime', 'successAt');
        const updated = this.safeInteger(transaction, 'updateTime');
        const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));
        const feeCost = this.safeNumber2(transaction, 'depositFee', 'withdrawFee', 0);
        const type = ('depositFee' in transaction) ? 'deposit' : 'withdrawal';
        let fee = undefined;
        if (feeCost !== undefined) {
            fee = {
                'cost': feeCost,
                'currency': code,
            };
        }
        const toAddress = this.safeString(transaction, 'toAddress');
        return {
            'info': transaction,
            'id': this.safeString2(transaction, 'id', 'withdrawId'),
            'txid': this.safeString(transaction, 'txID'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'network': this.networkIdToCode(this.safeString(transaction, 'chain')),
            'address': undefined,
            'addressTo': toAddress,
            'addressFrom': undefined,
            'tag': this.safeString(transaction, 'tag'),
            'tagTo': undefined,
            'tagFrom': undefined,
            'type': type,
            'amount': this.safeNumber(transaction, 'amount'),
            'currency': code,
            'status': status,
            'updated': updated,
            'fee': fee,
        };
    }
    async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchLedger
         * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
         * @see https://bybit-exchange.github.io/docs/v5/account/transaction-log
         * @param {string|undefined} code unified currency code, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
         * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'coin': currency['id'],
        // 'currency': currency['id'], // alias
        // 'start_date': this.iso8601 (since),
        // 'end_date': this.iso8601 (till),
        // 'wallet_fund_type': 'Deposit', // Withdraw, RealisedPNL, Commission, Refund, Prize, ExchangeOrderWithdraw, ExchangeOrderDeposit
        // 'page': 1,
        // 'limit': 20, // max 50
        // v5 transaction log
        // 'accountType': '', Account Type. UNIFIED
        // 'category': '', Product type. spot,linear,option
        // 'currency': '', Currency
        // 'baseCoin': '', BaseCoin. e.g., BTC of BTCPERP
        // 'type': '', Types of transaction logs
        // 'startTime': 0, The start timestamp (ms)
        // 'endTime': 0, The end timestamp (ms)
        // 'limit': 0, Limit for data size per page. [1, 50]. Default: 20
        // 'cursor': '', Cursor. Used for pagination
        };
        const enableUnified = await this.isUnifiedEnabled();
        let currency = undefined;
        let currencyKey = 'coin';
        if (enableUnified[1]) {
            currencyKey = 'currency';
            if (since !== undefined) {
                request['startTime'] = since;
            }
        }
        else {
            if (since !== undefined) {
                request['start_date'] = this.yyyymmdd(since);
            }
        }
        const method = (enableUnified[1]) ? 'privateGetV5AccountTransactionLog' : 'privateGetV2PrivateWalletFundRecords';
        if (code !== undefined) {
            currency = this.currency(code);
            request[currencyKey] = currency['id'];
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "ret_code": 0,
        //         "ret_msg": "ok",
        //         "ext_code": "",
        //         "result": {
        //             "data": [
        //                 {
        //                     "id": 234467,
        //                     "user_id": 1,
        //                     "coin": "BTC",
        //                     "wallet_id": 27913,
        //                     "type": "Realized P&L",
        //                     "amount": "-0.00000006",
        //                     "tx_id": "",
        //                     "address": "BTCUSD",
        //                     "wallet_balance": "0.03000330",
        //                     "exec_time": "2019-12-09T00:00:25.000Z",
        //                     "cross_seq": 0
        //                 }
        //             ]
        //         },
        //         "ext_info": null,
        //         "time_now": "1577481867.115552",
        //         "rate_limit_status": 119,
        //         "rate_limit_reset_ms": 1577481867122,
        //         "rate_limit": 120
        //     }
        //
        // v5 transaction log
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "21963%3A1%2C14954%3A1",
        //             "list": [
        //                 {
        //                     "symbol": "XRPUSDT",
        //                     "side": "Buy",
        //                     "funding": "-0.003676",
        //                     "orderLinkId": "",
        //                     "orderId": "1672128000-8-592324-1-2",
        //                     "fee": "0.00000000",
        //                     "change": "-0.003676",
        //                     "cashFlow": "0",
        //                     "transactionTime": "1672128000000",
        //                     "type": "SETTLEMENT",
        //                     "feeRate": "0.0001",
        //                     "size": "100",
        //                     "qty": "100",
        //                     "cashBalance": "5086.55825002",
        //                     "currency": "USDT",
        //                     "category": "linear",
        //                     "tradePrice": "0.3676",
        //                     "tradeId": "534c0003-4bf7-486f-aa02-78cee36825e4"
        //                 },
        //                 {
        //                     "symbol": "XRPUSDT",
        //                     "side": "Buy",
        //                     "funding": "",
        //                     "orderLinkId": "linear-order",
        //                     "orderId": "592b7e41-78fd-42e2-9aa3-91e1835ef3e1",
        //                     "fee": "0.01908720",
        //                     "change": "-0.0190872",
        //                     "cashFlow": "0",
        //                     "transactionTime": "1672121182224",
        //                     "type": "TRADE",
        //                     "feeRate": "0.0006",
        //                     "size": "100",
        //                     "qty": "88",
        //                     "cashBalance": "5086.56192602",
        //                     "currency": "USDT",
        //                     "category": "linear",
        //                     "tradePrice": "0.3615",
        //                     "tradeId": "5184f079-88ec-54c7-8774-5173cafd2b4e"
        //                 },
        //                 {
        //                     "symbol": "XRPUSDT",
        //                     "side": "Buy",
        //                     "funding": "",
        //                     "orderLinkId": "linear-order",
        //                     "orderId": "592b7e41-78fd-42e2-9aa3-91e1835ef3e1",
        //                     "fee": "0.00260280",
        //                     "change": "-0.0026028",
        //                     "cashFlow": "0",
        //                     "transactionTime": "1672121182224",
        //                     "type": "TRADE",
        //                     "feeRate": "0.0006",
        //                     "size": "12",
        //                     "qty": "12",
        //                     "cashBalance": "5086.58101322",
        //                     "currency": "USDT",
        //                     "category": "linear",
        //                     "tradePrice": "0.3615",
        //                     "tradeId": "8569c10f-5061-5891-81c4-a54929847eb3"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672132481405
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue2(result, 'data', 'list', []);
        return this.parseLedger(data, currency, since, limit);
    }
    parseLedgerEntry(item, currency = undefined) {
        //
        //     {
        //         "id": 234467,
        //         "user_id": 1,
        //         "coin": "BTC",
        //         "wallet_id": 27913,
        //         "type": "Realized P&L",
        //         "amount": "-0.00000006",
        //         "tx_id": "",
        //         "address": "BTCUSD",
        //         "wallet_balance": "0.03000330",
        //         "exec_time": "2019-12-09T00:00:25.000Z",
        //         "cross_seq": 0
        //     }
        //
        //     {
        //         "symbol": "XRPUSDT",
        //         "side": "Buy",
        //         "funding": "",
        //         "orderLinkId": "linear-order",
        //         "orderId": "592b7e41-78fd-42e2-9aa3-91e1835ef3e1",
        //         "fee": "0.00260280",
        //         "change": "-0.0026028",
        //         "cashFlow": "0",
        //         "transactionTime": "1672121182224",
        //         "type": "TRADE",
        //         "feeRate": "0.0006",
        //         "size": "12",
        //         "qty": "12",
        //         "cashBalance": "5086.58101322",
        //         "currency": "USDT",
        //         "category": "linear",
        //         "tradePrice": "0.3615",
        //         "tradeId": "8569c10f-5061-5891-81c4-a54929847eb3"
        //     }
        //
        const currencyId = this.safeString2(item, 'coin', 'currency');
        const code = this.safeCurrencyCode(currencyId, currency);
        const amount = this.safeString2(item, 'amount', 'change');
        const after = this.safeString2(item, 'wallet_balance', 'cashBalance');
        const direction = Precise.stringLt(amount, '0') ? 'out' : 'in';
        let before = undefined;
        if (after !== undefined && amount !== undefined) {
            const difference = (direction === 'out') ? amount : Precise.stringNeg(amount);
            before = Precise.stringAdd(after, difference);
        }
        let timestamp = this.parse8601(this.safeString(item, 'exec_time'));
        if (timestamp === undefined) {
            timestamp = this.safeInteger(item, 'transactionTime');
        }
        const type = this.parseLedgerEntryType(this.safeString(item, 'type'));
        const id = this.safeString(item, 'id');
        const referenceId = this.safeString(item, 'tx_id');
        return {
            'id': id,
            'currency': code,
            'account': this.safeString(item, 'wallet_id'),
            'referenceAccount': undefined,
            'referenceId': referenceId,
            'status': undefined,
            'amount': this.parseNumber(amount),
            'before': this.parseNumber(before),
            'after': this.parseNumber(after),
            'fee': this.parseNumber(this.safeString(item, 'fee')),
            'direction': direction,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'type': type,
            'info': item,
        };
    }
    parseLedgerEntryType(type) {
        const types = {
            'Deposit': 'transaction',
            'Withdraw': 'transaction',
            'RealisedPNL': 'trade',
            'Commission': 'fee',
            'Refund': 'cashback',
            'Prize': 'prize',
            'ExchangeOrderWithdraw': 'transaction',
            'ExchangeOrderDeposit': 'transaction',
            // v5
            'TRANSFER_IN': 'transaction',
            'TRANSFER_OUT': 'transaction',
            'TRADE': 'trade',
            'SETTLEMENT': 'trade',
            'DELIVERY': 'trade',
            'LIQUIDATION': 'trade',
            'BONUS': 'Prize',
            'FEE_REFUND': 'cashback',
            'INTEREST': 'transaction',
            'CURRENCY_BUY': 'trade',
            'CURRENCY_SELL': 'trade',
        };
        return this.safeString(types, type, type);
    }
    async withdraw(code, amount, address, tag = undefined, params = {}) {
        /**
         * @method
         * @name bybit#withdraw
         * @description make a withdrawal
         * @see https://bybit-exchange.github.io/docs/v5/asset/withdraw
         * @param {string} code unified currency code
         * @param {float} amount the amount to withdraw
         * @param {string} address the address to withdraw to
         * @param {string|undefined} tag
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        [tag, params] = this.handleWithdrawTagAndParams(tag, params);
        await this.loadMarkets();
        this.checkAddress(address);
        const currency = this.currency(code);
        const request = {
            'coin': currency['id'],
            'amount': this.numberToString(amount),
            'address': address,
        };
        if (tag !== undefined) {
            request['tag'] = tag;
        }
        const [networkCode, query] = this.handleNetworkCodeAndParams(params);
        const networkId = this.networkCodeToId(networkCode);
        if (networkId !== undefined) {
            request['chain'] = networkId.toUpperCase();
        }
        const enableUnified = await this.isUnifiedEnabled();
        const method = (enableUnified[1]) ? 'privatePostV5AssetWithdrawCreate' : 'privatePostAssetV3PrivateWithdrawCreate';
        const response = await this[method](this.extend(request, query));
        //
        //    {
        //         "retCode": "0",
        //         "retMsg": "success",
        //         "result": {
        //             "id": "9377266"
        //         },
        //         "retExtInfo": {},
        //         "time": "1666892894902"
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseTransaction(result, currency);
    }
    async fetchPosition(symbol, params = {}, first = true) {
        /**
         * @method
         * @name bybit#fetchPosition
         * @description fetch data on a single open contract trade position
         * @param {string} symbol unified market symbol of the market the position is held in, default is undefined
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        this.checkRequiredSymbol('fetchPosition', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let method = undefined;
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        const isUsdcSettled = market['settle'] === 'USDC';
        request['category'] = this.safeString(this.options, 'defaultSubType', 'spot');
        if (enableUnifiedMargin || enableUnifiedAccount) {
            method = (enableUnifiedAccount) ? 'privateGetV5PositionList' : 'privateGetUnifiedV3PrivatePositionList';
        }
        else if (isUsdcSettled) {
            method = 'privatePostOptionUsdcOpenapiPrivateV1QueryPosition';
            if (market['option']) {
                request['category'] = 'OPTION';
            }
            else if (market['linear']) {
                request['category'] = 'PERPETUAL';
            }
        }
        else {
            method = 'privateGetV5PositionList';
        }
        const response = await this[method](this.extend(request, params));
        //
        // unified account
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "updateAt%3D1672279322668",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "XRPUSDT",
        //                     "leverage": "10",
        //                     "avgPrice": "0.3615",
        //                     "liqPrice": "0.0001",
        //                     "riskLimitValue": "200000",
        //                     "takeProfit": "",
        //                     "positionValue": "36.15",
        //                     "tpslMode": "Full",
        //                     "riskId": 41,
        //                     "trailingStop": "0",
        //                     "unrealisedPnl": "-1.83",
        //                     "markPrice": "0.3432",
        //                     "cumRealisedPnl": "0.48805876",
        //                     "positionMM": "0.381021",
        //                     "createdTime": "1672121182216",
        //                     "positionIdx": 0,
        //                     "positionIM": "3.634521",
        //                     "updatedTime": "1672279322668",
        //                     "side": "Buy",
        //                     "bustPrice": "",
        //                     "size": "100",
        //                     "positionStatus": "Normal",
        //                     "stopLoss": "",
        //                     "tradeMode": 0
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672280219169
        //     }
        //
        // unified margin
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "Success",
        //         "result": {
        //             "nextPageCursor": "0%3A1657711949945%2C0%3A1657711949945",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "ETHUSDT",
        //                     "leverage": "10",
        //                     "updatedTime": 1657711949945,
        //                     "side": "Buy",
        //                     "positionValue": "536.92500000",
        //                     "takeProfit": "",
        //                     "tpslMode": "Full",
        //                     "riskId": 11,
        //                     "trailingStop": "",
        //                     "entryPrice": "1073.85000000",
        //                     "unrealisedPnl": "",
        //                     "markPrice": "1080.65000000",
        //                     "size": "0.5000",
        //                     "positionStatus": "normal",
        //                     "stopLoss": "",
        //                     "cumRealisedPnl": "-0.32215500",
        //                     "positionMM": "2.97456450",
        //                     "createdTime": 1657711949928,
        //                     "positionIdx": 0,
        //                     "positionIM": "53.98243950"
        //                 }
        //             ]
        //         },
        //         "time": 1657713693182
        //     }
        //
        // contract v3
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [
        //                 {
        //                     "positionIdx": 1,
        //                     "riskId": "41",
        //                     "symbol": "XRPUSDT",
        //                     "side": "Buy",
        //                     "size": "0",
        //                     "positionValue": "0",
        //                     "entryPrice": "0",
        //                     "tradeMode": 0,
        //                     "autoAddMargin": 0,
        //                     "leverage": "10",
        //                     "positionBalance": "0",
        //                     "liqPrice": "0.0000",
        //                     "bustPrice": "0.0000",
        //                     "takeProfit": "0.0000",
        //                     "stopLoss": "0.0000",
        //                     "trailingStop": "0.0000",
        //                     "unrealisedPnl": "0",
        //                     "createdTime": "1658827444328",
        //                     "updatedTime": "1658904863412",
        //                     "tpSlMode": "Full",
        //                     "riskLimitValue": "200000",
        //                     "activePrice": "0.0000"
        //                 },
        //                 {
        //                     "positionIdx": 2,
        //                     "riskId": "41",
        //                     "symbol": "XRPUSDT",
        //                     "side": "Sell",
        //                     "size": "50",
        //                     "positionValue": "16.68",
        //                     "entryPrice": "0.3336",
        //                     "tradeMode": 0,
        //                     "autoAddMargin": 0,
        //                     "leverage": "10",
        //                     "positionBalance": "1.6790088",
        //                     "liqPrice": "12.4835",
        //                     "bustPrice": "12.4869",
        //                     "takeProfit": "0.0000",
        //                     "stopLoss": "0.0000",
        //                     "trailingStop": "0.0000",
        //                     "unrealisedPnl": "0",
        //                     "createdTime": "1658827444328",
        //                     "updatedTime": "1658904863412",
        //                     "tpSlMode": "Full",
        //                     "riskLimitValue": "200000",
        //                     "activePrice": "0.0000"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": null,
        //         "time": 1658904877942
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const positions = this.safeValue2(result, 'list', 'dataList', []);
        const timestamp = this.safeInteger(response, 'time');
        if (first) {
            this.safeValue(positions, 0);
            const position = this.parsePosition(first, market);
            return this.extend(position, {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
            });
        }
        else {
            const parsedPositions = [];
            for (let i = 0; i < positions.length; i++) {
                const parsedPosition = this.parsePosition(positions[i], market);
                parsedPositions.push(this.extend(parsedPosition, {
                    'timestamp': timestamp,
                    'datetime': this.iso8601(timestamp),
                }));
            }
            return parsedPositions;
        }
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        let promises = [
            this.fetchPosition(symbol, {}, false),
        ];
        const isUnified = market['linear'] && await this.isUnifiedEnabled();
        if (isUnified) {
            promises.push(this.privateGetV5AccountInfo());
        }
        promises = await Promise.all(promises);
        const positions = promises[0];
        let accountInfo = undefined;
        if (isUnified) {
            const accountInfoResponse = promises[1];
            accountInfo = this.safeValue(accountInfoResponse, 'result');
        }
        return this.parseAccountConfiguration(positions, accountInfo);
    }
    parseAccountConfiguration(positions, accountInfo) {
        let marginMode = undefined;
        if (accountInfo !== undefined) {
            marginMode = this.safeString(accountInfo, 'marginMode');
            if (marginMode === 'ISOLATED_MARGIN') {
                marginMode = 'isolated';
            }
            else {
                marginMode = 'cross';
            }
        }
        else {
            marginMode = this.safeString(positions[0], 'marginMode');
        }
        let leverage = undefined;
        let buyLeverage = undefined;
        let sellLeverage = undefined;
        for (let i = 0; i < positions.length; i++) {
            const position = positions[i];
            const side = this.safeString(position, 'side');
            if (side === 'long') {
                buyLeverage = this.safeNumber(position, 'leverage');
            }
            else if (side === 'short') {
                sellLeverage = this.safeNumber(position, 'leverage');
            }
            else {
                const foundLeverage = this.safeNumber(position, 'leverage');
                buyLeverage = foundLeverage;
                sellLeverage = foundLeverage;
            }
        }
        leverage = buyLeverage || sellLeverage;
        const accountConfig = {
            'leverage': leverage,
            'buyLeverage': buyLeverage,
            'sellLeverage': sellLeverage,
            'positionMode': this.safeString(positions[0], 'positionMode'),
            'marginMode': marginMode,
            'markets': {},
        };
        const symbol = this.safeString(positions[0], 'symbol');
        accountConfig['markets'][symbol] = {
            'leverage': leverage,
            'buyLeverage': buyLeverage,
            'sellLeverage': sellLeverage,
            'positionMode': this.safeString(positions[0], 'positionMode'),
            'marginMode': marginMode,
        };
        return accountConfig;
    }
    async fetchUnifiedPositions(symbols = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        let type = undefined;
        let settle = undefined;
        const enableUnified = await this.isUnifiedEnabled();
        if (Array.isArray(symbols)) {
            const symbolsLength = symbols.length;
            if (symbolsLength > 1) {
                throw new ArgumentsRequired(this.id + ' fetchPositions() does not accept an array with more than one symbol');
            }
            const market = this.market(symbols[0]);
            settle = market['settle'];
        }
        else if (symbols !== undefined) {
            symbols = [symbols];
        }
        symbols = this.marketSymbols(symbols);
        if (symbols === undefined) {
            [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', 'USDT');
        }
        else {
            const first = this.safeValue(symbols, 0);
            const market = this.market(first);
            settle = market['settle'];
        }
        // market undefined
        [type, params] = this.handleMarketTypeAndParams('fetchPositions', undefined, params);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchPositions', undefined, params, 'linear');
        request['category'] = subType;
        if (type === 'option') {
            request['category'] = 'option';
        }
        if (enableUnified[1] && subType !== 'inverse') {
            request['settleCoin'] = settle;
        }
        const method = (enableUnified[1]) ? 'privateGetV5PositionList' : 'privateGetUnifiedV3PrivatePositionList';
        let finalParams = this.extend(request, params);
        // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
        if (subType === 'inverse') {
            finalParams = this.omit(finalParams, ['settleCoin']);
        }
        finalParams['limit'] = 200;
        const response = await this[method](finalParams);
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "Success",
        //         "result": {
        //             "nextPageCursor": "0%3A1657711949945%2C0%3A1657711949945",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "ETHUSDT",
        //                     "leverage": "10",
        //                     "updatedTime": 1657711949945,
        //                     "side": "Buy",
        //                     "positionValue": "536.92500000",
        //                     "takeProfit": "",
        //                     "tpslMode": "Full",
        //                     "riskId": 11,
        //                     "trailingStop": "",
        //                     "entryPrice": "1073.85000000",
        //                     "unrealisedPnl": "",
        //                     "markPrice": "1080.65000000",
        //                     "size": "0.5000",
        //                     "positionStatus": "normal",
        //                     "stopLoss": "",
        //                     "cumRealisedPnl": "-0.32215500",
        //                     "positionMM": "2.97456450",
        //                     "createdTime": 1657711949928,
        //                     "positionIdx": 0,
        //                     "positionIM": "53.98243950"
        //                 }
        //             ]
        //         },
        //         "time": 1657713693182
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const positions = this.safeValue(result, 'list', []);
        const results = [];
        for (let i = 0; i < positions.length; i++) {
            let rawPosition = positions[i];
            if (('data' in rawPosition) && ('is_valid' in rawPosition)) {
                // futures only
                rawPosition = this.safeValue(rawPosition, 'data');
            }
            results.push(this.parsePosition(rawPosition));
        }
        return this.filterByArray(results, 'symbol', symbols, false);
    }
    async fetchUSDCPositions(symbols = undefined, params = {}) {
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const request = {};
        let market = undefined;
        let type = undefined;
        if (Array.isArray(symbols)) {
            const length = symbols.length;
            if (length !== 1) {
                throw new ArgumentsRequired(this.id + ' fetchUSDCPositions() takes an array with exactly one symbol');
            }
            const symbol = this.safeString(symbols, 0);
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        else if (symbols !== undefined) {
            market = this.market(symbols);
            request['symbol'] = market['id'];
        }
        [type, params] = this.handleMarketTypeAndParams('fetchUSDCPositions', market, params);
        request['category'] = (type === 'option') ? 'OPTION' : 'PERPETUAL';
        const response = await this.privatePostOptionUsdcOpenapiPrivateV1QueryPosition(this.extend(request, params));
        //
        //     {
        //         "result": {
        //             "cursor": "BTC-31DEC21-24000-P%3A1640834421431%2CBTC-31DEC21-24000-P%3A1640834421431",
        //             "resultTotalSize": 1,
        //             "dataList": [
        //                 {
        //                 "symbol": "BTC-31DEC21-24000-P",
        //                 "leverage": "",
        //                 "occClosingFee": "",
        //                 "liqPrice": "",
        //                 "positionValue": "",
        //                 "takeProfit": "",
        //                 "riskId": "",
        //                 "trailingStop": "",
        //                 "unrealisedPnl": "",
        //                 "createdAt": "1640834421431",
        //                 "markPrice": "0.00",
        //                 "cumRealisedPnl": "",
        //                 "positionMM": "359.5271",
        //                 "positionIM": "467.0633",
        //                 "updatedAt": "1640834421431",
        //                 "tpSLMode": "",
        //                 "side": "Sell",
        //                 "bustPrice": "",
        //                 "deleverageIndicator": 0,
        //                 "entryPrice": "1.4",
        //                 "size": "-0.100",
        //                 "sessionRPL": "",
        //                 "positionStatus": "",
        //                 "sessionUPL": "",
        //                 "stopLoss": "",
        //                 "orderMargin": "",
        //                 "sessionAvgPrice": "1.5"
        //                 }
        //             ]
        //         },
        //         "retCode": 0,
        //         "retMsg": "Success."
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const positions = this.safeValue(result, 'dataList', []);
        const results = [];
        for (let i = 0; i < positions.length; i++) {
            let rawPosition = positions[i];
            if (('data' in rawPosition) && ('is_valid' in rawPosition)) {
                // futures only
                rawPosition = this.safeValue(rawPosition, 'data');
            }
            results.push(this.parsePosition(rawPosition, market));
        }
        return this.filterByArray(results, 'symbol', symbols, false);
    }
    async fetchDerivativesPositions(symbols = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        let settle = undefined;
        if (Array.isArray(symbols)) {
            const symbolsLength = symbols.length;
            if (symbolsLength > 1) {
                throw new ArgumentsRequired(this.id + ' fetchPositions() does not accept an array with more than one symbol');
            }
            if (symbolsLength === 1) {
                market = this.market(symbols[0]);
                settle = market['settle'];
                request['symbol'] = market['id'];
            }
        }
        [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', settle);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchPositions', market, params, 'linear');
        request['category'] = subType;
        if (settle !== undefined && subType !== 'inverse') {
            request['settleCoin'] = settle;
        }
        // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
        let finalParams = this.extend(request, params);
        if (subType === 'inverse') {
            finalParams = this.omit(finalParams, ['settleCoin']);
        }
        finalParams['limit'] = 200;
        const response = await this.privateGetV5PositionList(finalParams);
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "nextPageCursor": "updateAt%3D1672279322668",
        //             "category": "linear",
        //             "list": [
        //                 {
        //                     "symbol": "XRPUSDT",
        //                     "leverage": "10",
        //                     "avgPrice": "0.3615",
        //                     "liqPrice": "0.0001",
        //                     "riskLimitValue": "200000",
        //                     "takeProfit": "",
        //                     "positionValue": "36.15",
        //                     "tpslMode": "Full",
        //                     "riskId": 41,
        //                     "trailingStop": "0",
        //                     "unrealisedPnl": "-1.83",
        //                     "markPrice": "0.3432",
        //                     "cumRealisedPnl": "0.48805876",
        //                     "positionMM": "0.381021",
        //                     "createdTime": "1672121182216",
        //                     "positionIdx": 0,
        //                     "positionIM": "3.634521",
        //                     "updatedTime": "1672279322668",
        //                     "side": "Buy",
        //                     "bustPrice": "",
        //                     "size": "100",
        //                     "positionStatus": "Normal",
        //                     "stopLoss": "",
        //                     "tradeMode": 0
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672280219169
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const positions = this.safeValue(result, 'list', []);
        return this.parsePositions(positions, symbols, params);
    }
    async fetchAllPositions(params = {}) {
        /**
         * @method
         * @name bybit#fetchAllPositions
         * @description fetch all open positions for all currencies
         */
        const [subType] = this.handleSubTypeAndParams('fetchAllPositions', undefined, params);
        const linearSettleCoins = ['USDT'];
        let promises = [];
        if (subType !== 'inverse') {
            for (let i = 0; i < linearSettleCoins.length; i++) {
                promises.push(this.fetchPositions(undefined, { 'subType': 'linear', 'settleCoin': linearSettleCoins[i] }));
            }
        }
        else {
            promises.push(this.fetchPositions(undefined, { 'subType': 'inverse', 'settleCoin': 'BTC' }));
        }
        promises = await Promise.all(promises);
        let result = [];
        for (let i = 0; i < promises.length; i++) {
            result = this.arrayConcat(result, promises[i]);
        }
        return result;
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchPositions
         * @description fetch all open positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        if (Array.isArray(symbols)) {
            const symbolsLength = symbols.length;
            if (symbolsLength > 1) {
                throw new ArgumentsRequired(this.id + ' fetchPositions() does not accept an array with more than one symbol');
            }
        }
        else if (symbols !== undefined) {
            symbols = [symbols];
        }
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        let settle = this.safeString(params, 'settleCoin');
        if (settle === undefined) {
            [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', settle);
        }
        const isUsdcSettled = settle === 'USDC';
        const [subType, query] = this.handleSubTypeAndParams('fetchPositions', undefined, params);
        const isInverse = subType === 'inverse';
        const isLinearSettle = isUsdcSettled || (settle === 'USDT');
        if (isInverse && isLinearSettle) {
            throw new ArgumentsRequired(this.id + ' fetchPositions with inverse subType requires settle to not be USDT or USDC');
        }
        if ((enableUnifiedMargin || enableUnifiedAccount) && !isInverse) {
            return await this.fetchUnifiedPositions(symbols, query);
        }
        else if (isUsdcSettled) {
            return await this.fetchUSDCPositions(symbols, query);
        }
        else {
            return await this.fetchDerivativesPositions(symbols, query);
        }
    }
    parsePosition(position, market = undefined) {
        //
        // linear swap
        //
        //     {
        //         "positionIdx": 0,
        //         "riskId": "11",
        //         "symbol": "ETHUSDT",
        //         "side": "Buy",
        //         "size": "0.10",
        //         "positionValue": "119.845",
        //         "entryPrice": "1198.45",
        //         "tradeMode": 1,
        //         "autoAddMargin": 0,
        //         "leverage": "4.2",
        //         "positionBalance": "28.58931118",
        //         "liqPrice": "919.10",
        //         "bustPrice": "913.15",
        //         "takeProfit": "0.00",
        //         "stopLoss": "0.00",
        //         "trailingStop": "0.00",
        //         "unrealisedPnl": "0.083",
        //         "createdTime": "1669097244192",
        //         "updatedTime": "1669413126190",
        //         "tpSlMode": "Full",
        //         "riskLimitValue": "900000",
        //         "activePrice": "0.00"
        //     }
        //
        // usdc
        //    {
        //       "symbol":"BTCPERP",
        //       "leverage":"1.00",
        //       "occClosingFee":"0.0000",
        //       "liqPrice":"",
        //       "positionValue":"30.8100",
        //       "takeProfit":"0.0",
        //       "riskId":"10001",
        //       "trailingStop":"0.0000",
        //       "unrealisedPnl":"0.0000",
        //       "createdAt":"1652451795305",
        //       "markPrice":"30809.41",
        //       "cumRealisedPnl":"0.0000",
        //       "positionMM":"0.1541",
        //       "positionIM":"30.8100",
        //       "updatedAt":"1652451795305",
        //       "tpSLMode":"UNKNOWN",
        //       "side":"Buy",
        //       "bustPrice":"",
        //       "deleverageIndicator":"0",
        //       "entryPrice":"30810.0",
        //       "size":"0.001",
        //       "sessionRPL":"0.0000",
        //       "positionStatus":"NORMAL",
        //       "sessionUPL":"-0.0006",
        //       "stopLoss":"0.0",
        //       "orderMargin":"0.0000",
        //       "sessionAvgPrice":"30810.0"
        //    }
        //
        // unified margin
        //
        //     {
        //         "symbol": "ETHUSDT",
        //         "leverage": "10",
        //         "updatedTime": 1657711949945,
        //         "side": "Buy",
        //         "positionValue": "536.92500000",
        //         "takeProfit": "",
        //         "tpslMode": "Full",
        //         "riskId": 11,
        //         "trailingStop": "",
        //         "entryPrice": "1073.85000000",
        //         "unrealisedPnl": "",
        //         "markPrice": "1080.65000000",
        //         "size": "0.5000",
        //         "positionStatus": "normal",
        //         "stopLoss": "",
        //         "cumRealisedPnl": "-0.32215500",
        //         "positionMM": "2.97456450",
        //         "createdTime": 1657711949928,
        //         "positionIdx": 0,
        //         "positionIM": "53.98243950"
        //     }
        //
        // unified account
        //
        //     {
        //         "symbol": "XRPUSDT",
        //         "leverage": "10",
        //         "avgPrice": "0.3615",
        //         "liqPrice": "0.0001",
        //         "riskLimitValue": "200000",
        //         "takeProfit": "",
        //         "positionValue": "36.15",
        //         "tpslMode": "Full",
        //         "riskId": 41,
        //         "trailingStop": "0",
        //         "unrealisedPnl": "-1.83",
        //         "markPrice": "0.3432",
        //         "cumRealisedPnl": "0.48805876",
        //         "positionMM": "0.381021",
        //         "createdTime": "1672121182216",
        //         "positionIdx": 0,
        //         "positionIM": "3.634521",
        //         "updatedTime": "1672279322668",
        //         "side": "Buy",
        //         "bustPrice": "",
        //         "size": "100",
        //         "positionStatus": "Normal",
        //         "stopLoss": "",
        //         "tradeMode": 0
        //     }
        //
        const contract = this.safeString(position, 'symbol');
        market = this.safeMarket(contract, market, undefined, 'contract');
        let size = Precise.stringAbs(this.safeString(position, 'size'));
        let side = this.safeString(position, 'side');
        const positionIdx = this.safeString(position, 'positionIdx');
        if ((!side || side === '' || side === 'None') && positionIdx !== '0') {
            if (positionIdx === '1') {
                side = 'Buy';
            }
            else if (positionIdx === '2') {
                side = 'Sell';
            }
        }
        if (side !== undefined) {
            if (side === 'Buy') {
                side = 'long';
            }
            else if (side === 'Sell') {
                side = 'short';
                size = Precise.stringMul(size, '-1');
            }
            else {
                side = undefined;
            }
        }
        const notional = this.safeString(position, 'positionValue');
        const realizedPnl = this.omitZero(this.safeString(position, 'cumRealisedPnl'));
        const unrealisedPnl = this.omitZero(this.safeString(position, 'unrealisedPnl'));
        let initialMarginString = this.safeString(position, 'positionIM');
        let maintenanceMarginString = this.safeString(position, 'positionMM');
        let timestamp = this.parse8601(this.safeString2(position, 'updated_at', 'updated_time'));
        if (timestamp === undefined) {
            timestamp = this.safeInteger2(position, 'updatedAt', 'updatedTime');
        }
        // default to cross of USDC margined positions
        const tradeMode = this.safeInteger(position, 'tradeMode', 0);
        const marginMode = tradeMode ? 'isolated' : 'cross';
        let collateralString = this.safeString(position, 'positionBalance');
        const entryPrice = this.omitZero(this.safeString2(position, 'entryPrice', 'avgPrice'));
        const liquidationPrice = this.omitZero(this.safeString(position, 'liqPrice'));
        const leverage = this.safeString(position, 'leverage');
        if (liquidationPrice !== undefined) {
            if (market['settle'] === 'USDC') {
                //  (Entry price - Liq price) * Contracts + Maintenance Margin + (unrealised pnl) = Collateral
                const difference = Precise.stringAbs(Precise.stringSub(entryPrice, liquidationPrice));
                collateralString = Precise.stringAdd(Precise.stringAdd(Precise.stringMul(difference, size), maintenanceMarginString), unrealisedPnl);
            }
            else {
                const bustPrice = this.safeString(position, 'bustPrice');
                if (market['linear']) {
                    // derived from the following formulas
                    //  (Entry price - Bust price) * Contracts = Collateral
                    //  (Entry price - Liq price) * Contracts = Collateral - Maintenance Margin
                    // Maintenance Margin = (Bust price - Liq price) x Contracts
                    const maintenanceMarginPriceDifference = Precise.stringAbs(Precise.stringSub(liquidationPrice, bustPrice));
                    maintenanceMarginString = Precise.stringMul(maintenanceMarginPriceDifference, size);
                    // Initial Margin = Contracts x Entry Price / Leverage
                    if (entryPrice !== undefined) {
                        initialMarginString = Precise.stringDiv(Precise.stringMul(size, entryPrice), leverage);
                    }
                }
                else {
                    // Contracts * (1 / Entry price - 1 / Bust price) = Collateral
                    // Contracts * (1 / Entry price - 1 / Liq price) = Collateral - Maintenance Margin
                    // Maintenance Margin = Contracts * (1 / Liq price - 1 / Bust price)
                    // Maintenance Margin = Contracts * (Bust price - Liq price) / (Liq price x Bust price)
                    const difference = Precise.stringAbs(Precise.stringSub(bustPrice, liquidationPrice));
                    const multiply = Precise.stringMul(bustPrice, liquidationPrice);
                    maintenanceMarginString = Precise.stringDiv(Precise.stringMul(size, difference), multiply);
                    // Initial Margin = Leverage x Contracts / EntryPrice
                    if (entryPrice !== undefined) {
                        initialMarginString = Precise.stringDiv(size, Precise.stringMul(entryPrice, leverage));
                    }
                }
            }
        }
        const maintenanceMarginPercentage = Precise.stringDiv(maintenanceMarginString, notional);
        const percentage = Precise.stringMul(Precise.stringDiv(unrealisedPnl, initialMarginString), '100');
        const marginRatio = Precise.stringDiv(maintenanceMarginString, collateralString, 4);
        let mode = 'oneway';
        let id = market['symbol'];
        if (positionIdx !== '0') {
            mode = 'hedged';
            if (side !== undefined) {
                id = id + ':' + side;
            }
        }
        let status = true;
        let active = true;
        const positionStatus = this.safeString(position, 'positionStatus');
        if (positionStatus !== 'Normal' || size === '0') {
            status = false;
            active = false;
        }
        return {
            'info': position,
            'id': id,
            'mode': mode,
            'symbol': market['symbol'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'initialMargin': this.parseNumber(initialMarginString),
            'initialMarginPercentage': this.parseNumber(Precise.stringDiv(initialMarginString, notional)),
            'maintenanceMargin': this.parseNumber(maintenanceMarginString),
            'maintenanceMarginPercentage': this.parseNumber(maintenanceMarginPercentage),
            'entryPrice': this.parseNumber(entryPrice),
            'notional': this.parseNumber(notional),
            'leverage': this.parseNumber(leverage),
            'unrealizedPnl': this.parseNumber(unrealisedPnl),
            'pnl': this.parseNumber(realizedPnl),
            'contracts': this.parseNumber(size),
            'contractSize': this.safeNumber(market, 'contractSize'),
            'marginRatio': this.parseNumber(marginRatio),
            'liquidationPrice': this.parseNumber(liquidationPrice),
            'markPrice': this.safeNumber(position, 'markPrice'),
            'collateral': this.parseNumber(collateralString),
            'marginMode': marginMode,
            'isolated': marginMode === 'isolated',
            'hedged': mode === 'hedged',
            'price': this.parseNumber(entryPrice),
            'status': status,
            'positionMode': mode,
            'active': active,
            'side': side,
            'percentage': this.parseNumber(percentage),
        };
    }
    parseAccountConfig(position) {
        // {
        //     "info": {
        //     "symbol": "BTCUSDT",
        //         "leverage": "100",
        //         "autoAddMargin": "0",
        //         "avgPrice": "30675.7",
        //         "liqPrice": "56522.58784",
        //         "riskLimitValue": "2000000",
        //         "takeProfit": "",
        //         "positionValue": "30.6757",
        //         "tpslMode": "Full",
        //         "riskId": "1",
        //         "trailingStop": "0",
        //         "unrealisedPnl": "0.6903",
        //         "markPrice": "29985.4",
        //         "adlRankIndicator": "2",
        //         "cumRealisedPnl": "-0.01188196",
        //         "positionMM": "0.17196798",
        //         "createdTime": "1687265385857",
        //         "positionIdx": "0",
        //         "positionIM": "0.32534648",
        //         "updatedTime": "1687968000055",
        //         "side": "Sell",
        //         "bustPrice": "",
        //         "positionBalance": "0",
        //         "size": "0.001",
        //         "positionStatus": "Normal",
        //         "stopLoss": "",
        //         "tradeMode": "0"
        // },
        //     "id": "BTC/USDT:USDT:BTC/USDT:USDT",
        //     "mode": "oneway",
        //     "symbol": "BTC/USDT:USDT",
        //     "timestamp": None,
        //     "datetime": None,
        //     "initialMargin": -0.306757,
        //     "initialMarginPercentage": -0.01,
        //     "maintenanceMargin": None,
        //     "maintenanceMarginPercentage": None,
        //     "entryPrice": 30675.7,
        //     "notional": 30.6757,
        //     "leverage": 100.0,
        //     "unrealizedPnl": 0.6903,
        //     "pnl": "-0.011881960.6903",
        //     "contracts": -0.001,
        //     "contractSize": 1.0,
        //     "marginRatio": None,
        //     "liquidationPrice": 56522.58784,
        //     "markPrice": 29985.4,
        //     "collateral": 0.0,
        //     "marginMode": "cross",
        //     "isolated": False,
        //     "hedged": False,
        //     "price": 30675.7,
        //     "status": True,
        //     "tradeMode": "oneway",
        //     "active": True,
        //     "side": "short",
        //     "percentage": -225.0315396225677
        // }
        return position;
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        await this.loadMarkets();
        const values = await this.isUnifiedEnabled();
        const isUnifiedAccount = this.safeValue(values, 1);
        const market = this.market(symbol);
        if (isUnifiedAccount && market['linear']) {
            return await this.setUnifiedMarginMode(marginMode, symbol, params);
        }
        return await this.setDerivativesMarginMode(marginMode, symbol, params);
    }
    async setUnifiedMarginMode(marginMode, symbol = undefined, params = {}) {
        await this.loadMarkets();
        let formattedMarginMode = marginMode;
        if (marginMode === 'isolated') {
            formattedMarginMode = 'ISOLATED_MARGIN';
        }
        else if (marginMode === 'cross') {
            formattedMarginMode = 'REGULAR_MARGIN';
        }
        else {
            throw new BadRequest(this.id + ' setMarginMode() does not support marginMode ' + marginMode + '');
        }
        const request = {
            'setMarginMode': formattedMarginMode,
        };
        const response = await this.privatePostV5AccountSetMarginMode(this.extend(request, params));
        return response;
    }
    async setDerivativesMarginMode(marginMode, symbol = undefined, params = {}) {
        this.checkRequiredSymbol('setMarginMode', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['settle'] === 'USDC') {
            throw new NotSupported(this.id + ' setMarginMode() does not support market ' + symbol + '');
        }
        marginMode = marginMode.toUpperCase();
        if ((marginMode !== 'ISOLATED') && (marginMode !== 'CROSS')) {
            throw new BadRequest(this.id + ' setMarginMode() marginMode must be either isolated or cross');
        }
        const leverage = this.safeString(params, 'leverage');
        let sellLeverage = undefined;
        let buyLeverage = undefined;
        if (leverage === undefined) {
            sellLeverage = this.safeString2(params, 'sell_leverage', 'sellLeverage');
            buyLeverage = this.safeString2(params, 'buy_leverage', 'buyLeverage');
            if (sellLeverage === undefined && buyLeverage === undefined) {
                throw new ArgumentsRequired(this.id + ' setMarginMode() requires a leverage parameter or sell_leverage and buy_leverage parameters');
            }
            if (buyLeverage === undefined) {
                buyLeverage = sellLeverage;
            }
            if (sellLeverage === undefined) {
                sellLeverage = buyLeverage;
            }
            params = this.omit(params, ['buy_leverage', 'sell_leverage', 'sellLeverage', 'buyLeverage']);
        }
        else {
            params = this.omit(params, 'leverage');
            sellLeverage = leverage;
            buyLeverage = leverage;
        }
        const tradeMode = (marginMode === 'ISOLATED') ? 1 : 0;
        const request = {
            'symbol': market['id'],
            // TEALSTREET
            'category': market['linear'] ? 'linear' : 'inverse',
            // TEALSTREET
            'tradeMode': tradeMode,
            'buyLeverage': buyLeverage,
            'sellLeverage': sellLeverage,
        };
        // TEALSTREET
        const args = this.extend(request, params);
        args['buyLeverage'] = this.numberToString(args['buyLeverage']);
        args['sellLeverage'] = this.numberToString(args['sellLeverage']);
        // TEALSTREET
        const response = await this.privatePostContractV3PrivatePositionSwitchIsolated(args);
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {},
        //         "retExtInfo": null,
        //         "time": 1658908532580
        //     }
        //
        return response;
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bybit#setLeverage
         * @description set the level of leverage for a market
         * @param {float} leverage the rate of leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} response from the exchange
         */
        this.checkRequiredSymbol('setLeverage', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        const isUsdcSettled = market['settle'] === 'USDC';
        const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
        // engage in leverage setting
        // we reuse the code here instead of having two methods
        leverage = this.numberToString(leverage);
        const buyLeverage = this.safeString(params, 'buyLeverage', leverage);
        const sellLeverage = this.safeString(params, 'sellLeverage', leverage);
        let method = undefined;
        let request = undefined;
        if (enableUnifiedMargin || enableUnifiedAccount || !isUsdcSettled) {
            request = {
                'symbol': market['id'],
                'buyLeverage': buyLeverage,
                'sellLeverage': sellLeverage,
            };
            if (enableUnifiedAccount) {
                if (market['linear']) {
                    request['category'] = 'linear';
                }
                else {
                    request['category'] = 'inverse';
                }
                method = 'privatePostV5PositionSetLeverage';
            }
            else if (enableUnifiedMargin) {
                if (market['option']) {
                    request['category'] = 'option';
                }
                else if (market['linear']) {
                    request['category'] = 'linear';
                }
                else {
                    request['category'] = 'inverse';
                }
                method = 'privatePostUnifiedV3PrivatePositionSetLeverage';
            }
            else {
                method = 'privatePostContractV3PrivatePositionSetLeverage';
            }
        }
        else {
            request = {
                'symbol': market['id'],
                'leverage': leverage,
            };
            method = 'privatePostPerpetualUsdcOpenapiPrivateV1PositionLeverageSave';
        }
        // TEALSTREET
        params = {
            'buyLeverage': buyLeverage || request['buyLeverage'],
            'sellLeverage': sellLeverage || request['sellLeverage'],
        };
        // TEALSTREET
        return await this[method](this.extend(request, params));
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        await this.loadMarkets();
        let mode = undefined;
        if (hedged) {
            mode = 3;
        }
        else {
            mode = 0;
        }
        const request = {
            'mode': mode,
        };
        if (symbol === undefined) {
            request['coin'] = 'USDT';
        }
        else {
            const market = this.market(symbol);
            // TEALSTREET
            request['category'] = market['linear'] ? 'linear' : 'inverse';
            // TEALSTREET
            request['symbol'] = market['id'];
        }
        //
        //     {
        //         "ret_code": 0,
        //         "ret_msg": "ok",
        //         "ext_code": "",
        //         "result": null,
        //         "ext_info": null,
        //         "time_now": "1577477968.175013",
        //         "rate_limit_status": 74,
        //         "rate_limit_reset_ms": 1577477968183,
        //         "rate_limit": 75
        //     }
        //
        return await this.privatePostV5PositionSwitchMode(this.extend(request, params));
    }
    async fetchDerivativesOpenInterestHistory(symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        let market = this.market(symbol);
        const subType = market['linear'] ? 'linear' : 'inverse';
        const category = this.safeString(params, 'category', subType);
        const intervals = this.safeValue(this.options, 'intervals');
        const interval = this.safeString(intervals, timeframe); // 5min,15min,30min,1h,4h,1d
        if (interval === undefined) {
            throw new BadRequest(this.id + ' fetchOpenInterestHistory() cannot use the ' + timeframe + ' timeframe');
        }
        const request = {
            'symbol': market['id'],
            'intervalTime': interval,
            'category': category,
        };
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetV5MarketOpenInterest(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "symbol": "BTCUSD",
        //             "category": "inverse",
        //             "list": [
        //                 {
        //                     "openInterest": "461134384.00000000",
        //                     "timestamp": "1669571400000"
        //                 },
        //                 {
        //                     "openInterest": "461134292.00000000",
        //                     "timestamp": "1669571100000"
        //                 }
        //             ],
        //             "nextPageCursor": ""
        //         },
        //         "retExtInfo": {},
        //         "time": 1672053548579
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const id = this.safeString(result, 'symbol');
        market = this.safeMarket(id, market, undefined, 'contract');
        const data = this.safeValue(result, 'list', []);
        return this.parseOpenInterests(data, market, since, limit);
    }
    async fetchOpenInterest(symbol, params = {}) {
        /**
         * @method
         * @name bybit#fetchOpenInterest
         * @description Retrieves the open interest of a derivative trading pair
         * @see https://bybit-exchange.github.io/docs/v5/market/open-interest
         * @param {string} symbol Unified CCXT market symbol
         * @param {object} params exchange specific parameters
         * @param {string|undefined} params.interval 5m, 15m, 30m, 1h, 4h, 1d
         * @param {string|undefined} params.category "linear" or "inverse"
         * @returns {object} an open interest structure{@link https://docs.ccxt.com/#/?id=interest-history-structure}
         */
        await this.loadMarkets();
        let market = this.market(symbol);
        if (!market['contract']) {
            throw new BadRequest(this.id + ' fetchOpenInterest() supports contract markets only');
        }
        const timeframe = this.safeString(params, 'interval', '1h');
        const intervals = this.safeValue(this.options, 'intervals');
        const interval = this.safeString(intervals, timeframe); // 5min,15min,30min,1h,4h,1d
        if (interval === undefined) {
            throw new BadRequest(this.id + ' fetchOpenInterest() cannot use the ' + timeframe + ' timeframe');
        }
        const subType = market['linear'] ? 'linear' : 'inverse';
        const category = this.safeString(params, 'category', subType);
        const request = {
            'symbol': market['id'],
            'intervalTime': interval,
            'category': category,
        };
        const response = await this.publicGetV5MarketOpenInterest(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "symbol": "BTCUSD",
        //             "category": "inverse",
        //             "list": [
        //                 {
        //                     "openInterest": "461134384.00000000",
        //                     "timestamp": "1669571400000"
        //                 },
        //                 {
        //                     "openInterest": "461134292.00000000",
        //                     "timestamp": "1669571100000"
        //                 }
        //             ],
        //             "nextPageCursor": ""
        //         },
        //         "retExtInfo": {},
        //         "time": 1672053548579
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const id = this.safeString(result, 'symbol');
        market = this.safeMarket(id, market, undefined, 'contract');
        const data = this.safeValue(result, 'list', []);
        return this.parseOpenInterest(data[0], market);
    }
    async fetchOpenInterestHistory(symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchOpenInterestHistory
         * @description Gets the total amount of unsettled contracts. In other words, the total number of contracts held in open positions
         * @see https://bybit-exchange.github.io/docs/v5/market/open-interest
         * @param {string} symbol Unified market symbol
         * @param {string} timeframe "5m", 15m, 30m, 1h, 4h, 1d
         * @param {int} since Not used by Bybit
         * @param {int} limit The number of open interest structures to return. Max 200, default 50
         * @param {object} params Exchange specific parameters
         * @returns An array of open interest structures
         */
        if (timeframe === '1m') {
            throw new BadRequest(this.id + 'fetchOpenInterestHistory cannot use the 1m timeframe');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['spot'] || market['option']) {
            throw new BadRequest(this.id + ' fetchOpenInterestHistory() symbol does not support market ' + symbol);
        }
        ({
            'symbol': market['id'],
        });
        return await this.fetchDerivativesOpenInterestHistory(symbol, timeframe, since, limit, params);
    }
    parseOpenInterest(interest, market = undefined) {
        //
        //    {
        //        "openInterest": 64757.62400000,
        //        "timestamp": 1665784800000,
        //    }
        //
        const timestamp = this.safeInteger(interest, 'timestamp');
        const value = this.safeNumber2(interest, 'open_interest', 'openInterest');
        return {
            'symbol': market['symbol'],
            'openInterestAmount': undefined,
            'openInterestValue': value,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': interest,
        };
    }
    async fetchBorrowRate(code, params = {}) {
        /**
         * @method
         * @name bybit#fetchBorrowRate
         * @description fetch the rate of interest to borrow a currency for margin trading
         * @see https://bybit-exchange.github.io/docs/spot/v3/#t-queryinterestquota
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'coin': currency['id'],
        };
        const response = await this.privateGetSpotV3PrivateCrossMarginLoanInfo(this.extend(request, params));
        //
        //    {
        //         "retCode": "0",
        //         "retMsg": "success",
        //         "result": {
        //             "coin": "USDT",
        //             "interestRate": "0.000107000000",
        //             "loanAbleAmount": "",
        //             "maxLoanAmount": "79999.999"
        //         },
        //         "retExtInfo": null,
        //         "time": "1666734490778"
        //     }
        //
        const data = this.safeValue(response, 'result', {});
        return this.parseBorrowRate(data, currency);
    }
    parseBorrowRate(info, currency = undefined) {
        //
        //     {
        //         "coin": "USDT",
        //         "interestRate": "0.000107000000",
        //         "loanAbleAmount": "",
        //         "maxLoanAmount": "79999.999"
        //     }
        //
        const timestamp = this.milliseconds();
        const currencyId = this.safeString(info, 'coin');
        return {
            'currency': this.safeCurrencyCode(currencyId, currency),
            'rate': this.safeNumber(info, 'interestRate'),
            'period': 86400000,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': info,
        };
    }
    async fetchBorrowInterest(code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchBorrowInterest
         * @description fetch the interest owed by the user for borrowing currency for margin trading
         * @param {string|undefined} code unified currency code
         * @param {string|undefined} symbol unified market symbol when fetch interest in isolated markets
         * @param {number|undefined} since the earliest time in ms to fetch borrrow interest for
         * @param {number|undefined} limit the maximum number of structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure}
         */
        await this.loadMarkets();
        const request = {};
        const response = await this.privateGetSpotV3PrivateCrossMarginAccount(this.extend(request, params));
        //
        //     {
        //         "ret_code": 0,
        //         "ret_msg": "",
        //         "ext_code": null,
        //         "ext_info": null,
        //         "result": {
        //             "status": "1",
        //             "riskRate": "0",
        //             "acctBalanceSum": "0.000486213817680857",
        //             "debtBalanceSum": "0",
        //             "loanAccountList": [
        //                 {
        //                     "tokenId": "BTC",
        //                     "total": "0.00048621",
        //                     "locked": "0",
        //                     "loan": "0",
        //                     "interest": "0",
        //                     "free": "0.00048621"
        //                 },
        //                 ...
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(response, 'result', {});
        const rows = this.safeValue(data, 'loanAccountList', []);
        const interest = this.parseBorrowInterests(rows, undefined);
        return this.filterByCurrencySinceLimit(interest, code, since, limit);
    }
    parseBorrowInterest(info, market = undefined) {
        //
        //     {
        //         "tokenId": "BTC",
        //         "total": "0.00048621",
        //         "locked": "0",
        //         "loan": "0",
        //         "interest": "0",
        //         "free": "0.00048621"
        //     },
        //
        return {
            'symbol': undefined,
            'marginMode': 'cross',
            'currency': this.safeCurrencyCode(this.safeString(info, 'tokenId')),
            'interest': this.safeNumber(info, 'interest'),
            'interestRate': undefined,
            'amountBorrowed': this.safeNumber(info, 'loan'),
            'timestamp': undefined,
            'datetime': undefined,
            'info': info,
        };
    }
    async transfer(code, amount, fromAccount, toAccount, params = {}) {
        /**
         * @method
         * @name bybit#transfer
         * @description transfer currency internally between wallets on the same account
         * @see https://bybit-exchange.github.io/docs/account_asset/#t-createinternaltransfer
         * @see https://bybit-exchange.github.io/docs/account_asset/v3/#t-createinternaltransfer
         * @param {string} code unified currency code
         * @param {float} amount amount to transfer
         * @param {string} fromAccount account to transfer from
         * @param {string} toAccount account to transfer to
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @param {string} params.transferId UUID, which is unique across the platform
         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        const transferId = this.safeString(params, 'transferId', this.uuid());
        const accountTypes = this.safeValue(this.options, 'accountsByType', {});
        const fromId = this.safeString(accountTypes, fromAccount, fromAccount);
        const toId = this.safeString(accountTypes, toAccount, toAccount);
        const currency = this.currency(code);
        const amountToPrecision = this.currencyToPrecision(code, amount);
        let method = undefined;
        [method, params] = this.handleOptionAndParams(params, 'transfer', 'method', 'privatePostAssetV1PrivateTransfer'); // v1 preferred atm, because it supports funding
        let request = undefined;
        if (method === 'privatePostAssetV3PrivateTransferInterTransfer' || method === 'privatePostV5AssetTransferInterTransfer') {
            request = {
                'transferId': transferId,
                'fromAccountType': fromId,
                'toAccountType': toId,
                'coin': currency['id'],
                'amount': amountToPrecision,
            };
        }
        else {
            request = {
                'transfer_id': transferId,
                'from_account_type': fromId,
                'to_account_type': toId,
                'coin': currency['id'],
                'amount': amountToPrecision,
            };
        }
        const response = await this[method](this.extend(request, params));
        //
        // {
        //     "retCode": 0,
        //     "retMsg": "success",
        //     "result": {
        //         "transferId": "4244af44-f3b0-4cf6-a743-b56560e987bc" // transfer_id in v1
        //     },
        //     "retExtInfo": {},
        //     "time": 1666875857205
        // }
        //
        const timestamp = this.safeInteger2(response, 'time', 'time_now');
        const transfer = this.safeValue(response, 'result', {});
        const statusRaw = this.safeStringN(response, ['retCode', 'retMsg', 'ret_code', 'ret_msg']);
        const status = this.parseTransferStatus(statusRaw);
        return this.extend(this.parseTransfer(transfer, currency), {
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'amount': this.parseNumber(amountToPrecision),
            'fromAccount': fromAccount,
            'toAccount': toAccount,
            'status': status,
        });
    }
    async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#fetchTransfers
         * @description fetch a history of internal transfers made on an account
         * @see https://bybit-exchange.github.io/docs/v5/asset/inter-transfer-list
         * @param {string|undefined} code unified currency code of the currency transferred
         * @param {int|undefined} since the earliest time in ms to fetch transfers for
         * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        let currency = undefined;
        const request = {};
        if (code !== undefined) {
            currency = this.safeCurrencyCode(code);
            request['coin'] = currency;
        }
        if (since !== undefined) {
            request['startTime'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetV5AssetTransferQueryInterTransferList(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "list": [
        //                 {
        //                     "transferId": "selfTransfer_a1091cc7-9364-4b74-8de1-18f02c6f2d5c",
        //                     "coin": "USDT",
        //                     "amount": "5000",
        //                     "fromAccountType": "SPOT",
        //                     "toAccountType": "UNIFIED",
        //                     "timestamp": "1667283263000",
        //                     "status": "SUCCESS"
        //                 }
        //             ],
        //             "nextPageCursor": "eyJtaW5JRCI6MTM1ODQ2OCwibWF4SUQiOjEzNTg0Njh9"
        //         },
        //         "retExtInfo": {},
        //         "time": 1670988271677
        //     }
        //
        const data = this.safeValue(response, 'result', {});
        const transfers = this.safeValue(data, 'list', []);
        return this.parseTransfers(transfers, currency, since, limit);
    }
    async borrowMargin(code, amount, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bybit#borrowMargin
         * @description create a loan to borrow margin
         * @see https://bybit-exchange.github.io/docs/spot/v3/#t-borrowmarginloan
         * @param {string} code unified currency code of the currency to borrow
         * @param {float} amount the amount to borrow
         * @param {string|undefined} symbol not used by bybit.borrowMargin ()
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const [marginMode, query] = this.handleMarginModeAndParams('borrowMargin', params);
        if (marginMode === 'isolated') {
            throw new NotSupported(this.id + ' borrowMargin () cannot use isolated margin');
        }
        const request = {
            'coin': currency['id'],
            'qty': this.currencyToPrecision(code, amount),
        };
        const response = await this.privatePostSpotV3PrivateCrossMarginLoan(this.extend(request, query));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //             "transactId": "14143"
        //         },
        //         "retExtInfo": null,
        //         "time": 1662617848970
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const transaction = this.parseMarginLoan(result, currency);
        return this.extend(transaction, {
            'symbol': symbol,
            'amount': amount,
        });
    }
    async repayMargin(code, amount, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bybit#repayMargin
         * @description repay borrowed margin and interest
         * @see https://bybit-exchange.github.io/docs/spot/v3/#t-repaymarginloan
         * @param {string} code unified currency code of the currency to repay
         * @param {float} amount the amount to repay
         * @param {string|undefined} symbol not used by bybit.repayMargin ()
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const [marginMode, query] = this.handleMarginModeAndParams('repayMargin', params);
        if (marginMode === 'isolated') {
            throw new NotSupported(this.id + ' repayMargin () cannot use isolated margin');
        }
        const request = {
            'coin': currency['id'],
            'qty': this.numberToString(amount),
        };
        const response = await this.privatePostSpotV3PrivateCrossMarginRepay(this.extend(request, query));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "success",
        //         "result": {
        //            "repayId": "12128"
        //         },
        //         "retExtInfo": null,
        //         "time": 1662618298452
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const transaction = this.parseMarginLoan(result, currency);
        return this.extend(transaction, {
            'symbol': symbol,
            'amount': amount,
        });
    }
    parseMarginLoan(info, currency = undefined) {
        //
        // borrowMargin
        //
        //     {
        //         "transactId": "14143"
        //     }
        //
        // repayMargin
        //
        //     {
        //         "repayId": "12128"
        //     }
        //
        return {
            'id': this.safeString2(info, 'transactId', 'repayId'),
            'currency': this.safeString(currency, 'code'),
            'amount': undefined,
            'symbol': undefined,
            'timestamp': undefined,
            'datetime': undefined,
            'info': info,
        };
    }
    parseTransferStatus(status) {
        const statuses = {
            '0': 'ok',
            'OK': 'ok',
            'SUCCESS': 'ok',
        };
        return this.safeString(statuses, status, status);
    }
    parseTransfer(transfer, currency = undefined) {
        //
        // transfer
        //
        //     {
        //         "transferId": "22c2bc11-ed5b-49a4-8647-c4e0f5f6f2b2" // transfer_id in v1
        //     }
        //
        // fetchTransfers
        //
        //     {
        //         "transferId": "e9c421c4-b010-4b16-abd6-106179f27702", // transfer_id in v1
        //         "coin": "USDT",
        //         "amount": "8",
        //         "fromAccountType": "FUND", // from_account_type in v1
        //         "toAccountType": "SPOT", // to_account_type in v1
        //         "timestamp": "1666879426000",
        //         "status": "SUCCESS"
        //      }
        //
        const currencyId = this.safeString(transfer, 'coin');
        const timestamp = this.safeInteger(transfer, 'timestamp');
        const fromAccountId = this.safeString2(transfer, 'fromAccountType', 'from_account_type');
        const toAccountId = this.safeString2(transfer, 'toAccountType', 'to_account_type');
        const accountIds = this.safeValue(this.options, 'accountsById', {});
        const fromAccount = this.safeString(accountIds, fromAccountId, fromAccountId);
        const toAccount = this.safeString(accountIds, toAccountId, toAccountId);
        return {
            'info': transfer,
            'id': this.safeString2(transfer, 'transferId', 'transfer_id'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'currency': this.safeCurrencyCode(currencyId, currency),
            'amount': this.safeNumber(transfer, 'amount'),
            'fromAccount': fromAccount,
            'toAccount': toAccount,
            'status': this.parseTransferStatus(this.safeString(transfer, 'status')),
        };
    }
    async fetchDerivativesMarketLeverageTiers(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (market['linear']) {
            request['category'] = 'linear';
        }
        else if (market['inverse']) {
            request['category'] = 'inverse';
        }
        const response = await this.publicGetV5MarketRiskLimit(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "category": "inverse",
        //             "list": [
        //                 {
        //                     "id": 1,
        //                     "symbol": "BTCUSD",
        //                     "riskLimitValue": "150",
        //                     "maintenanceMargin": "0.5",
        //                     "initialMargin": "1",
        //                     "isLowestRisk": 1,
        //                     "maxLeverage": "100.00"
        //                 },
        //             ....
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1672054488010
        //     }
        //
        const result = this.safeValue(response, 'result');
        const tiers = this.safeValue(result, 'list');
        return this.parseMarketLeverageTiers(tiers, market);
    }
    async fetchMarketLeverageTiers(symbol, params = {}) {
        /**
         * @method
         * @name bybit#fetchMarketLeverageTiers
         * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes for a single market
         * @see https://bybit-exchange.github.io/docs/v5/market/risk-limit
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [leverage tiers structure]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        market = this.market(symbol);
        if (market['spot'] || market['option']) {
            throw new BadRequest(this.id + ' fetchMarketLeverageTiers() symbol does not support market ' + symbol);
        }
        market['id'];
        return await this.fetchDerivativesMarketLeverageTiers(symbol, params);
    }
    parseMarketLeverageTiers(info, market = undefined) {
        //
        //     {
        //         "id": 1,
        //         "symbol": "BTCUSD",
        //         "riskLimitValue": "150",
        //         "maintenanceMargin": "0.5",
        //         "initialMargin": "1",
        //         "isLowestRisk": 1,
        //         "maxLeverage": "100.00"
        //     }
        //
        let minNotional = 0;
        const tiers = [];
        for (let i = 0; i < info.length; i++) {
            const item = info[i];
            const maxNotional = this.safeNumber(item, 'riskLimitValue');
            tiers.push({
                'tier': this.sum(i, 1),
                'currency': market['base'],
                'minNotional': minNotional,
                'maxNotional': maxNotional,
                'maintenanceMarginRate': this.safeNumber(item, 'maintenanceMargin'),
                'maxLeverage': this.safeNumber(item, 'maxLeverage'),
                'info': item,
            });
            minNotional = maxNotional;
        }
        return tiers;
    }
    parseTradingFee(fee, market = undefined) {
        //
        //     {
        //         "symbol": "ETHUSDT",
        //         "makerFeeRate": 0.001,
        //         "takerFeeRate": 0.001
        //     }
        //
        const marketId = this.safeString(fee, 'symbol');
        const symbol = this.safeSymbol(marketId, undefined, undefined, 'contract');
        return {
            'info': fee,
            'symbol': symbol,
            'maker': this.safeNumber(fee, 'makerFeeRate'),
            'taker': this.safeNumber(fee, 'takerFeeRate'),
        };
    }
    async fetchTradingFee(symbol, params = {}) {
        /**
         * @method
         * @name bybit#fetchTradingFee
         * @description fetch the trading fees for a market
         * @see https://bybit-exchange.github.io/docs/v5/account/fee-rate
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['spot']) {
            throw new NotSupported(this.id + ' fetchTradingFee() is not supported for spot market');
        }
        const request = {
            'symbol': market['id'],
        };
        const response = await this.privateGetV5AccountFeeRate(this.extend(request, params));
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [
        //                 {
        //                     "symbol": "ETHUSDT",
        //                     "takerFeeRate": "0.0006",
        //                     "makerFeeRate": "0.0001"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1676360412576
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const fees = this.safeValue(result, 'list', []);
        const first = this.safeValue(fees, 0, {});
        return this.parseTradingFee(first);
    }
    async fetchTradingFees(params = {}) {
        /**
         * @method
         * @name bybit#fetchTradingFees
         * @description fetch the trading fees for multiple markets
         * @see https://bybit-exchange.github.io/docs/v5/account/fee-rate
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
         */
        await this.loadMarkets();
        let type = undefined;
        [type, params] = this.handleOptionAndParams(params, 'fetchTradingFees', 'type', 'future');
        if (type === 'spot') {
            throw new NotSupported(this.id + ' fetchTradingFees() is not supported for spot market');
        }
        const response = await this.privateGetV5AccountFeeRate(params);
        //
        //     {
        //         "retCode": 0,
        //         "retMsg": "OK",
        //         "result": {
        //             "list": [
        //                 {
        //                     "symbol": "ETHUSDT",
        //                     "takerFeeRate": "0.0006",
        //                     "makerFeeRate": "0.0001"
        //                 }
        //             ]
        //         },
        //         "retExtInfo": {},
        //         "time": 1676360412576
        //     }
        //
        let fees = this.safeValue(response, 'result', {});
        fees = this.safeValue(fees, 'list', []);
        const result = {};
        for (let i = 0; i < fees.length; i++) {
            const fee = this.parseTradingFee(fees[i]);
            const symbol = fee['symbol'];
            result[symbol] = fee;
        }
        return result;
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.implodeHostname(this.urls['api'][api]) + '/' + path;
        if (api === 'public') {
            if (Object.keys(params).length) {
                url += '?' + this.rawencode(params);
            }
        }
        else if (api === 'private') {
            this.checkRequiredCredentials();
            const isOpenapi = url.indexOf('openapi') >= 0;
            const isV3UnifiedMargin = url.indexOf('unified/v3') >= 0;
            const isV3Contract = url.indexOf('contract/v3') >= 0;
            const isV5UnifiedAccount = url.indexOf('v5') >= 0;
            const timestamp = this.nonce().toString();
            if (isOpenapi) {
                if (Object.keys(params).length) {
                    body = this.json(params);
                }
                else {
                    // this fix for PHP is required otherwise it generates
                    // '[]' on empty arrays even when forced to use objects
                    body = '{}';
                }
                const payload = timestamp + this.apiKey + body;
                const signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'hex');
                headers = {
                    'Content-Type': 'application/json',
                    'X-BAPI-API-KEY': this.apiKey,
                    'X-BAPI-TIMESTAMP': timestamp,
                    'X-BAPI-SIGN': signature,
                };
            }
            else if (isV3UnifiedMargin || isV3Contract || isV5UnifiedAccount) {
                headers = {
                    'Content-Type': 'application/json',
                    'X-BAPI-API-KEY': this.apiKey,
                    'X-BAPI-TIMESTAMP': timestamp,
                    'X-BAPI-RECV-WINDOW': this.options['recvWindow'].toString(),
                };
                if (isV3UnifiedMargin || isV3Contract) {
                    headers['X-BAPI-SIGN-TYPE'] = '2';
                }
                const query = params;
                const queryEncoded = this.rawencode(query);
                const auth_base = timestamp.toString() + this.apiKey + this.options['recvWindow'].toString();
                let authFull = undefined;
                if (method === 'POST') {
                    body = this.json(query);
                    authFull = auth_base + body;
                }
                else {
                    authFull = auth_base + queryEncoded;
                    url += '?' + this.rawencode(query);
                }
                headers['X-BAPI-SIGN'] = this.hmac(this.encode(authFull), this.encode(this.secret));
            }
            else {
                const query = this.extend(params, {
                    'api_key': this.apiKey,
                    'recv_window': this.options['recvWindow'],
                    'timestamp': timestamp,
                });
                const sortedQuery = this.keysort(query);
                const auth = this.rawencode(sortedQuery);
                const signature = this.hmac(this.encode(auth), this.encode(this.secret));
                if (method === 'POST') {
                    const isSpot = url.indexOf('spot') >= 0;
                    const extendedQuery = this.extend(query, {
                        'sign': signature,
                    });
                    if (isSpot) {
                        body = this.urlencode(extendedQuery);
                        headers = {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        };
                    }
                    else {
                        body = this.json(extendedQuery);
                        headers = {
                            'Content-Type': 'application/json',
                        };
                    }
                }
                else {
                    url += '?' + this.rawencode(sortedQuery);
                    url += '&sign=' + signature;
                }
            }
        }
        if (method === 'POST') {
            const brokerId = this.safeString(this.options, 'brokerId');
            if (brokerId !== undefined) {
                headers['Referer'] = brokerId;
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (!response) {
            return; // fallback to default error handler
        }
        //
        //     {
        //         ret_code: 10001,
        //         ret_msg: 'ReadMapCB: expect { or n, but found \u0000, error ' +
        //         'found in #0 byte of ...||..., bigger context ' +
        //         '...||...',
        //         ext_code: '',
        //         ext_info: '',
        //         result: null,
        //         time_now: '1583934106.590436'
        //     }
        //
        //     {
        //         "retCode":10001,
        //         "retMsg":"symbol params err",
        //         "result":{"symbol":"","bid":"","bidIv":"","bidSize":"","ask":"","askIv":"","askSize":"","lastPrice":"","openInterest":"","indexPrice":"","markPrice":"","markPriceIv":"","change24h":"","high24h":"","low24h":"","volume24h":"","turnover24h":"","totalVolume":"","totalTurnover":"","fundingRate":"","predictedFundingRate":"","nextFundingTime":"","countdownHour":"0","predictedDeliveryPrice":"","underlyingPrice":"","delta":"","gamma":"","vega":"","theta":""}
        //     }
        //
        const errorCode = this.safeString2(response, 'ret_code', 'retCode');
        if (errorCode !== '0') {
            if (errorCode === '30084') {
                // not an error
                // https://github.com/ccxt/ccxt/issues/11268
                // https://github.com/ccxt/ccxt/pull/11624
                // POST https://api.bybit.com/v2/private/position/switch-isolated 200 OK
                // {"ret_code":30084,"ret_msg":"Isolated not modified","ext_code":"","ext_info":"","result":null,"time_now":"1642005219.937988","rate_limit_status":73,"rate_limit_reset_ms":1642005219894,"rate_limit":75}
                return undefined;
            }
            let feedback = undefined;
            if (errorCode === '10005') {
                feedback = this.id + ' private api uses /user/v3/private/query-api to check if you have a unified account. The API key of user id must own one of permissions: "Account Transfer", "Subaccount Transfer", "Withdrawal" ' + body;
            }
            else {
                feedback = this.id + ' ' + body;
            }
            this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);
            this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
            throw new ExchangeError(feedback); // unknown message
        }
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class okx$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'okx',
            'name': 'OKX',
            'countries': ['CN', 'US'],
            'version': 'v5',
            'rateLimit': 100,
            'pro': true,
            'certified': true,
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': true,
                'swap': true,
                'future': true,
                'option': undefined,
                'addMargin': true,
                'borrowMargin': true,
                'cancelAllOrders': false,
                'cancelOrder': true,
                'cancelOrders': true,
                'createDepositAddress': false,
                'createOrder': true,
                'createPostOnlyOrder': true,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': true,
                'createStopMarketOrder': true,
                'createStopOrder': true,
                'fetchAccounts': true,
                'fetchBalance': true,
                'fetchBidsAsks': undefined,
                'fetchBorrowInterest': true,
                'fetchBorrowRate': true,
                'fetchBorrowRateHistories': true,
                'fetchBorrowRateHistory': true,
                'fetchBorrowRates': true,
                'fetchBorrowRatesPerSymbol': false,
                'fetchCanceledOrders': true,
                'fetchClosedOrder': undefined,
                'fetchClosedOrders': true,
                'fetchCurrencies': true,
                'fetchDeposit': true,
                'fetchDepositAddress': true,
                'fetchDepositAddresses': false,
                'fetchDepositAddressesByNetwork': true,
                'fetchDeposits': true,
                'fetchDepositWithdrawFee': 'emulated',
                'fetchDepositWithdrawFees': true,
                'fetchFundingHistory': true,
                'fetchFundingRate': true,
                'fetchFundingRateHistory': true,
                'fetchFundingRates': false,
                'fetchIndexOHLCV': true,
                'fetchL3OrderBook': false,
                'fetchLedger': true,
                'fetchLedgerEntry': undefined,
                'fetchLeverage': true,
                'fetchLeverageTiers': false,
                'fetchMarketLeverageTiers': true,
                'fetchMarkets': true,
                'fetchMarkOHLCV': true,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenInterest': true,
                'fetchOpenInterestHistory': true,
                'fetchOpenOrder': undefined,
                'fetchOpenOrders': true,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrderBooks': false,
                'fetchOrders': false,
                'fetchOrderTrades': true,
                'fetchPermissions': undefined,
                'fetchPosition': true,
                'fetchPositions': true,
                'fetchPositionsRisk': false,
                'fetchPremiumIndexOHLCV': false,
                'fetchStatus': true,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': true,
                'fetchTrades': true,
                'fetchTradingFee': true,
                'fetchTradingFees': false,
                'fetchTradingLimits': false,
                'fetchTransactionFee': false,
                'fetchTransactionFees': false,
                'fetchTransactions': false,
                'fetchTransfer': true,
                'fetchTransfers': false,
                'fetchWithdrawal': true,
                'fetchWithdrawals': true,
                'fetchWithdrawalWhitelist': false,
                'reduceMargin': true,
                'repayMargin': true,
                'setLeverage': true,
                'setMargin': false,
                'setMarginMode': true,
                'setPositionMode': true,
                'signIn': false,
                'transfer': true,
                'withdraw': true,
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1H',
                '2h': '2H',
                '4h': '4H',
                '6h': '6H',
                '12h': '12H',
                '1d': '1D',
                '1w': '1W',
                '1M': '1M',
                '3M': '3M',
            },
            'hostname': 'www.okx.com',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/152485636-38b19e4a-bece-4dec-979a-5982859ffc04.jpg',
                'api': {
                    'rest': 'https://{hostname}',
                },
                'www': 'https://www.okx.com',
                'doc': 'https://www.okx.com/docs-v5/en/',
                'fees': 'https://www.okx.com/pages/products/fees.html',
                'referral': 'https://www.okx.com/join/1888677',
                'test': {
                    'rest': 'https://{hostname}',
                },
            },
            'api': {
                'public': {
                    'get': {
                        'market/tickers': 1,
                        'market/ticker': 1,
                        'market/index-tickers': 1,
                        'market/books': 1,
                        'market/books-lite': 1.66,
                        'market/candles': 0.5,
                        'market/history-candles': 1,
                        'market/history-mark-price-candles': 2,
                        'market/history-index-candles': 2,
                        'market/index-candles': 1,
                        'market/mark-price-candles': 1,
                        'market/trades': 1,
                        'market/platform-24-volume': 10,
                        'market/open-oracle': 40,
                        'market/index-components': 1,
                        'market/option/instrument-family-trades': 1,
                        // 'market/oracle',
                        'public/instruments': 1,
                        'public/delivery-exercise-history': 0.5,
                        'public/open-interest': 1,
                        'public/funding-rate': 1,
                        'public/funding-rate-history': 1,
                        'public/price-limit': 1,
                        'public/opt-summary': 1,
                        'public/estimated-price': 2,
                        'public/discount-rate-interest-free-quota': 10,
                        'public/time': 2,
                        'public/liquidation-orders': 0.5,
                        'public/mark-price': 2,
                        'public/option-trades': 1,
                        // 'public/tier',
                        'public/position-tiers': 2,
                        'public/underlying': 1,
                        'public/interest-rate-loan-quota': 10,
                        'public/vip-interest-rate-loan-quota': 10,
                        'rubik/stat/trading-data/support-coin': 4,
                        'rubik/stat/taker-volume': 4,
                        'rubik/stat/margin/loan-ratio': 4,
                        // long/short
                        'rubik/stat/contracts/long-short-account-ratio': 4,
                        'rubik/stat/contracts/open-interest-volume': 4,
                        'rubik/stat/option/open-interest-volume': 4,
                        // put/call
                        'rubik/stat/option/open-interest-volume-ratio': 4,
                        'rubik/stat/option/open-interest-volume-expiry': 4,
                        'rubik/stat/option/open-interest-volume-strike': 4,
                        'rubik/stat/option/taker-block-volume': 4,
                        'system/status': 100,
                        'asset/lending-rate-summary': 5 / 3,
                        'asset/lending-rate-history': 5 / 3,
                        'market/exchange-rate': 20,
                    },
                },
                'private': {
                    'get': {
                        'account/account-position-risk': 2,
                        'account/balance': 2,
                        'account/positions': 2,
                        'account/positions-history': 2,
                        'account/bills': 5 / 3,
                        'account/bills-archive': 5 / 3,
                        'account/config': 4,
                        'account/max-size': 1,
                        'account/max-avail-size': 1,
                        'account/leverage-info': 1,
                        'account/max-loan': 1,
                        'account/trade-fee': 4,
                        'account/interest-accrued': 4,
                        'account/interest-rate': 4,
                        'account/max-withdrawal': 1,
                        'account/risk-state': 2,
                        'account/borrow-repay-history': 4,
                        'account/quick-margin-borrow-repay-history': 4,
                        'account/interest-limits': 4,
                        'account/vip-interest-accrued': 4,
                        'account/vip-loan-order-list': 4,
                        'account/vip-loan-order-detail': 4,
                        'asset/asset-valuation': 1 / 5,
                        'asset/deposit-address': 5 / 3,
                        'asset/balances': 5 / 3,
                        'asset/transfer-state': 10,
                        'asset/deposit-history': 5 / 3,
                        'asset/withdrawal-history': 5 / 3,
                        'asset/deposit-withdraw-status': 20,
                        'asset/currencies': 5 / 3,
                        'asset/bills': 5 / 3,
                        'asset/piggy-balance': 5 / 3,
                        'asset/deposit-lightning': 5,
                        'asset/lending-history': 5 / 3,
                        'asset/saving-balance': 5 / 3,
                        'asset/non-tradable-assets': 5 / 3,
                        'trade/order': 1 / 3,
                        'trade/orders-pending': 1,
                        'trade/orders-history': 0.5,
                        'trade/orders-history-archive': 1,
                        'trade/fills': 1 / 3,
                        'trade/fills-history': 2,
                        'trade/orders-algo-pending': 1,
                        'trade/orders-algo-history': 1,
                        'trade/order-algo': 1,
                        'account/subaccount/balances': 10,
                        'asset/subaccount/bills': 5 / 3,
                        'users/subaccount/list': 10,
                        'users/subaccount/apikey': 10,
                        'users/entrust-subaccount-list': 10,
                        // broker
                        'broker/nd/info': 10,
                        'broker/nd/subaccount-info': 10,
                        'asset/broker/nd/subaccount-deposit-address': 4,
                        'asset/broker/nd/subaccount-deposit-history': 4,
                        'broker/nd/rebate-daily': 1,
                        'broker/nd/subaccount/apikey': 10,
                        'broker/nd/rebate-per-orders': 300,
                        'asset/broker/nd/subaccount-withdrawal-history': 4,
                        // convert
                        'asset/convert/currencies': 5 / 3,
                        'asset/convert/currency-pair': 5 / 3,
                        'asset/convert/estimate-quote': 5,
                        'asset/convert/trade': 5,
                        'asset/convert/history': 5 / 3,
                        // options
                        'account/greeks': 2,
                        // earn
                        'finance/staking-defi/offers': 1,
                        'finance/staking-defi/orders-active': 1,
                        'finance/staking-defi/orders-history': 1,
                        'rfq/counterparties': 4,
                        'rfq/maker-instrument-settings': 4,
                        'rfq/rfqs': 10,
                        'rfq/quotes': 10,
                        'rfq/trades': 4,
                        'rfq/public-trades': 4,
                        // copytrading
                        'copytrading/current-subpositions': 10,
                        'copytrading/subpositions-history': 10,
                        'copytrading/instruments': 10,
                        'copytrading/profit-sharing-details': 10,
                        'copytrading/total-profit-sharing': 10,
                        'copytrading/unrealized-profit-sharing-details': 10,
                        // grid trading
                        'tradingBot/grid/orders-algo-pending': 1,
                        'tradingBot/grid/orders-algo-history': 1,
                        'tradingBot/grid/orders-algo-details': 1,
                        'tradingBot/grid/sub-orders': 1,
                        'tradingBot/grid/positions': 1,
                        'tradingBot/grid/ai-param': 1,
                    },
                    'post': {
                        'account/set-position-mode': 4,
                        'account/set-leverage': 1,
                        'account/position/margin-balance': 1,
                        'account/set-greeks': 4,
                        'account/set-isolated-mode': 4,
                        'account/set-riskOffset-type': 2,
                        'account/simulated_margin': 10,
                        'account/borrow-repay': 5 / 3,
                        'account/quick-margin-borrow-repay': 4,
                        'account/activate-option': 4,
                        'account/set-auto-loan': 4,
                        'asset/transfer': 10,
                        'asset/withdrawal': 5 / 3,
                        'asset/purchase_redempt': 5 / 3,
                        'asset/withdrawal-lightning': 5,
                        'asset/set-lending-rate': 5 / 3,
                        'asset/cancel-withdrawal': 5 / 3,
                        'asset/convert-dust-assets': 10,
                        'trade/order': 1 / 3,
                        'trade/batch-orders': 1 / 15,
                        'trade/cancel-order': 1 / 3,
                        'trade/cancel-batch-orders': 1 / 15,
                        'trade/amend-order': 1 / 3,
                        'trade/amend-batch-orders': 1 / 3,
                        'trade/close-position': 1,
                        'trade/order-algo': 1,
                        'trade/cancel-algos': 1,
                        'trade/cancel-advance-algos': 1,
                        'users/subaccount/delete-apikey': 10,
                        'users/subaccount/modify-apikey': 10,
                        'users/subaccount/apikey': 10,
                        'users/subaccount/set-transfer-out': 10,
                        'asset/subaccount/transfer': 10,
                        // broker
                        'broker/nd/create-subaccount': 10,
                        'broker/nd/delete-subaccount': 10,
                        'broker/nd/set-subaccount-level': 4,
                        'broker/nd/set-subaccount-fee-rate': 4,
                        'asset/broker/nd/subaccount-deposit-address': 4,
                        'broker/nd/subaccount/apikey': 10,
                        'broker/nd/subaccount/delete-apikey': 10,
                        'broker/nd/subaccount/modify-apikey': 10,
                        'broker/nd/rebate-per-orders': 36000,
                        // earn
                        'finance/staking-defi/purchase': 3,
                        'finance/staking-defi/redeem': 3,
                        'finance/staking-defi/cancel': 3,
                        'rfq/create-rfq': 4,
                        'rfq/cancel-rfq': 4,
                        'rfq/cancel-batch-rfqs': 10,
                        'rfq/cancel-all-rfqs': 10,
                        'rfq/execute-quote': 10,
                        'rfq/maker-instrument-settings': 4,
                        'rfq/mmp-reset': 4,
                        'rfq/create-quote': 0.4,
                        'rfq/cancel-quote': 0.4,
                        'rfq/cancel-batch-quotes': 10,
                        'rfq/cancel-all-quotes': 10,
                        // copytrading
                        'copytrading/algo-order': 20,
                        'copytrading/close-subposition': 10,
                        'copytrading/set-instruments': 10,
                        // grid trading
                        'tradingBot/grid/order-algo': 1,
                        'tradingBot/grid/amend-order-algo': 1,
                        'tradingBot/grid/stop-order-algo': 1,
                        'tradingBot/grid/withdraw-income': 1,
                        'tradingBot/grid/compute-margin-balance': 1,
                        'tradingBot/grid/margin-balance': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'taker': this.parseNumber('0.0015'),
                    'maker': this.parseNumber('0.0010'),
                },
                'spot': {
                    'taker': this.parseNumber('0.0015'),
                    'maker': this.parseNumber('0.0010'),
                },
                'future': {
                    'taker': this.parseNumber('0.0005'),
                    'maker': this.parseNumber('0.0002'),
                },
                'swap': {
                    'taker': this.parseNumber('0.00050'),
                    'maker': this.parseNumber('0.00020'),
                },
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'password': true,
            },
            'exceptions': {
                'exact': {
                    // Public error codes from 50000-53999
                    // General Class
                    '1': ExchangeError,
                    '2': ExchangeError,
                    '50000': BadRequest,
                    '50001': OnMaintenance,
                    '50002': BadRequest,
                    '50004': RequestTimeout,
                    '50005': ExchangeNotAvailable,
                    '50006': BadRequest,
                    '50007': AccountSuspended,
                    '50008': AuthenticationError,
                    '50009': AccountSuspended,
                    '50010': ExchangeError,
                    '50011': RateLimitExceeded,
                    '50012': ExchangeError,
                    '50013': ExchangeNotAvailable,
                    '50014': BadRequest,
                    '50015': ExchangeError,
                    '50016': ExchangeError,
                    '50017': ExchangeError,
                    '50018': ExchangeError,
                    '50019': ExchangeError,
                    '50020': ExchangeError,
                    '50021': ExchangeError,
                    '50022': ExchangeError,
                    '50023': ExchangeError,
                    '50024': BadRequest,
                    '50025': ExchangeError,
                    '50026': ExchangeNotAvailable,
                    '50027': PermissionDenied,
                    '50028': ExchangeError,
                    '50044': BadRequest,
                    // API Class
                    '50100': ExchangeError,
                    '50101': AuthenticationError,
                    '50102': InvalidNonce,
                    '50103': AuthenticationError,
                    '50104': AuthenticationError,
                    '50105': AuthenticationError,
                    '50106': AuthenticationError,
                    '50107': AuthenticationError,
                    '50108': ExchangeError,
                    '50109': ExchangeError,
                    '50110': PermissionDenied,
                    '50111': AuthenticationError,
                    '50112': AuthenticationError,
                    '50113': AuthenticationError,
                    '50114': AuthenticationError,
                    '50115': BadRequest,
                    // Trade Class
                    '51000': BadRequest,
                    '51001': BadSymbol,
                    '51002': BadSymbol,
                    '51003': BadRequest,
                    '51004': InvalidOrder,
                    '51005': InvalidOrder,
                    '51006': InvalidOrder,
                    '51007': InvalidOrder,
                    '51008': InsufficientFunds,
                    '51009': AccountSuspended,
                    '51010': AccountNotEnabled,
                    '51011': InvalidOrder,
                    '51012': BadSymbol,
                    '51014': BadSymbol,
                    '51015': BadSymbol,
                    '51016': InvalidOrder,
                    '51017': ExchangeError,
                    '51018': ExchangeError,
                    '51019': ExchangeError,
                    '51020': InvalidOrder,
                    '51021': BadSymbol,
                    '51022': BadSymbol,
                    '51023': ExchangeError,
                    '51024': AccountSuspended,
                    '51025': ExchangeError,
                    '51026': BadSymbol,
                    '51027': BadSymbol,
                    '51028': BadSymbol,
                    '51029': BadSymbol,
                    '51030': BadSymbol,
                    '51031': InvalidOrder,
                    '51100': InvalidOrder,
                    '51101': InvalidOrder,
                    '51102': InvalidOrder,
                    '51103': InvalidOrder,
                    '51104': InvalidOrder,
                    '51105': InvalidOrder,
                    '51106': InvalidOrder,
                    '51107': InvalidOrder,
                    '51108': InvalidOrder,
                    '51109': InvalidOrder,
                    '51110': InvalidOrder,
                    '51111': BadRequest,
                    '51112': InvalidOrder,
                    '51113': RateLimitExceeded,
                    '51115': InvalidOrder,
                    '51116': InvalidOrder,
                    '51117': InvalidOrder,
                    '51118': InvalidOrder,
                    '51119': InsufficientFunds,
                    '51120': InvalidOrder,
                    '51121': InvalidOrder,
                    '51122': InvalidOrder,
                    '51124': InvalidOrder,
                    '51125': InvalidOrder,
                    '51126': InvalidOrder,
                    '51127': InsufficientFunds,
                    '51128': InvalidOrder,
                    '51129': InvalidOrder,
                    '51130': BadSymbol,
                    '51131': InsufficientFunds,
                    '51132': InvalidOrder,
                    '51133': InvalidOrder,
                    '51134': InvalidOrder,
                    '51135': InvalidOrder,
                    '51136': InvalidOrder,
                    '51137': InvalidOrder,
                    '51138': InvalidOrder,
                    '51139': InvalidOrder,
                    '51156': BadRequest,
                    '51159': BadRequest,
                    '51162': InvalidOrder,
                    '51163': InvalidOrder,
                    '51166': InvalidOrder,
                    '51201': InvalidOrder,
                    '51202': InvalidOrder,
                    '51203': InvalidOrder,
                    '51204': InvalidOrder,
                    '51205': InvalidOrder,
                    '51250': InvalidOrder,
                    '51251': InvalidOrder,
                    '51252': InvalidOrder,
                    '51253': InvalidOrder,
                    '51254': InvalidOrder,
                    '51255': InvalidOrder,
                    '51256': InvalidOrder,
                    '51257': InvalidOrder,
                    '51258': InvalidOrder,
                    '51259': InvalidOrder,
                    '51260': InvalidOrder,
                    '51261': InvalidOrder,
                    '51262': InvalidOrder,
                    '51263': InvalidOrder,
                    '51264': InvalidOrder,
                    '51265': InvalidOrder,
                    '51267': InvalidOrder,
                    '51268': InvalidOrder,
                    '51269': InvalidOrder,
                    '51270': InvalidOrder,
                    '51271': InvalidOrder,
                    '51272': InvalidOrder,
                    '51273': InvalidOrder,
                    '51274': InvalidOrder,
                    '51275': InvalidOrder,
                    '51276': InvalidOrder,
                    '51277': InvalidOrder,
                    '51278': InvalidOrder,
                    '51279': InvalidOrder,
                    '51280': InvalidOrder,
                    '51321': InvalidOrder,
                    '51322': InvalidOrder,
                    '51323': BadRequest,
                    '51324': BadRequest,
                    '51325': InvalidOrder,
                    '51327': InvalidOrder,
                    '51328': InvalidOrder,
                    '51329': InvalidOrder,
                    '51330': InvalidOrder,
                    '51400': OrderNotFound,
                    '51401': OrderNotFound,
                    '51402': OrderNotFound,
                    '51403': InvalidOrder,
                    '51404': InvalidOrder,
                    '51405': ExchangeError,
                    '51406': ExchangeError,
                    '51407': BadRequest,
                    '51408': ExchangeError,
                    '51409': ExchangeError,
                    '51410': CancelPending,
                    '51500': ExchangeError,
                    '51501': ExchangeError,
                    '51502': InsufficientFunds,
                    '51503': ExchangeError,
                    '51506': ExchangeError,
                    '51508': ExchangeError,
                    '51509': ExchangeError,
                    '51510': ExchangeError,
                    '51511': ExchangeError,
                    '51600': ExchangeError,
                    '51601': ExchangeError,
                    '51602': ExchangeError,
                    '51603': OrderNotFound,
                    '51732': AuthenticationError,
                    '51733': AuthenticationError,
                    '51734': AuthenticationError,
                    '51735': ExchangeError,
                    '51736': InsufficientFunds,
                    // Data class
                    '52000': ExchangeError,
                    // SPOT/MARGIN error codes 54000-54999
                    '54000': ExchangeError,
                    '54001': ExchangeError,
                    // FUNDING error codes 58000-58999
                    '58000': ExchangeError,
                    '58001': AuthenticationError,
                    '58002': PermissionDenied,
                    '58003': ExchangeError,
                    '58004': AccountSuspended,
                    '58005': ExchangeError,
                    '58006': ExchangeError,
                    '58007': ExchangeError,
                    '58100': ExchangeError,
                    '58101': AccountSuspended,
                    '58102': RateLimitExceeded,
                    '58103': ExchangeError,
                    '58104': ExchangeError,
                    '58105': ExchangeError,
                    '58106': ExchangeError,
                    '58107': ExchangeError,
                    '58108': ExchangeError,
                    '58109': ExchangeError,
                    '58110': ExchangeError,
                    '58111': ExchangeError,
                    '58112': ExchangeError,
                    '58114': ExchangeError,
                    '58115': ExchangeError,
                    '58116': ExchangeError,
                    '58117': ExchangeError,
                    '58125': BadRequest,
                    '58126': BadRequest,
                    '58127': BadRequest,
                    '58128': BadRequest,
                    '58200': ExchangeError,
                    '58201': ExchangeError,
                    '58202': ExchangeError,
                    '58203': InvalidAddress,
                    '58204': AccountSuspended,
                    '58205': ExchangeError,
                    '58206': ExchangeError,
                    '58207': InvalidAddress,
                    '58208': ExchangeError,
                    '58209': ExchangeError,
                    '58210': ExchangeError,
                    '58211': ExchangeError,
                    '58212': ExchangeError,
                    '58213': AuthenticationError,
                    '58221': BadRequest,
                    '58222': BadRequest,
                    '58224': BadRequest,
                    '58227': BadRequest,
                    '58228': BadRequest,
                    '58229': InsufficientFunds,
                    '58300': ExchangeError,
                    '58350': InsufficientFunds,
                    // Account error codes 59000-59999
                    '59000': ExchangeError,
                    '59001': ExchangeError,
                    '59100': ExchangeError,
                    '59101': ExchangeError,
                    '59102': ExchangeError,
                    '59103': InsufficientFunds,
                    '59104': ExchangeError,
                    '59105': ExchangeError,
                    '59106': ExchangeError,
                    '59107': ExchangeError,
                    '59108': InsufficientFunds,
                    '59109': ExchangeError,
                    '59128': InvalidOrder,
                    '59200': InsufficientFunds,
                    '59201': InsufficientFunds,
                    '59216': BadRequest,
                    '59300': ExchangeError,
                    '59301': ExchangeError,
                    '59313': ExchangeError,
                    '59401': ExchangeError,
                    '59500': ExchangeError,
                    '59501': ExchangeError,
                    '59502': ExchangeError,
                    '59503': ExchangeError,
                    '59504': ExchangeError,
                    '59505': ExchangeError,
                    '59506': ExchangeError,
                    '59507': ExchangeError,
                    '59508': AccountSuspended,
                    // WebSocket error Codes from 60000-63999
                    '60001': AuthenticationError,
                    '60002': AuthenticationError,
                    '60003': AuthenticationError,
                    '60004': AuthenticationError,
                    '60005': AuthenticationError,
                    '60006': InvalidNonce,
                    '60007': AuthenticationError,
                    '60008': AuthenticationError,
                    '60009': AuthenticationError,
                    '60010': AuthenticationError,
                    '60011': AuthenticationError,
                    '60012': BadRequest,
                    '60013': BadRequest,
                    '60014': RateLimitExceeded,
                    '60015': NetworkError,
                    '60016': ExchangeNotAvailable,
                    '60017': BadRequest,
                    '60018': BadRequest,
                    '60019': BadRequest,
                    '63999': ExchangeError,
                    '70010': BadRequest,
                    '70013': BadRequest,
                    '70016': BadRequest, // Please specify your instrument settings for at least one instType.
                },
                'broad': {
                    'Internal Server Error': ExchangeNotAvailable,
                    'server error': ExchangeNotAvailable, // {"code":500,"data":{},"detailMsg":"","error_code":"500","error_message":"server error 1236805249","msg":"server error 1236805249"}
                },
            },
            'httpExceptions': {
                '429': ExchangeNotAvailable, // https://github.com/ccxt/ccxt/issues/9612
            },
            'precisionMode': TICK_SIZE$1,
            'options': {
                'defaultNetwork': 'ERC20',
                'networks': {
                    'BTC': 'Bitcoin',
                    'OMNI': 'Omni',
                    'SOL': 'Solana',
                    'LTC': 'Litecoin',
                    'MATIC': 'Polygon',
                    'OP': 'Optimism',
                    'ARB': 'Arbitrum one',
                    'AVAX': 'Avalanche C-Chain',
                },
                'networksById': {
                    'Bitcoin': 'BTC',
                    'Omni': 'OMNI',
                    'Solana': 'SOL',
                    'Litecoin': 'LTC',
                    'Polygon': 'MATIC',
                    'Optimism': 'OP',
                    'Arbitrum one': 'ARB',
                    'Avalanche C-Chain': 'AVAX',
                },
                'fetchOpenInterestHistory': {
                    'timeframes': {
                        '5m': '5m',
                        '1h': '1H',
                        '1d': '1D',
                        '5M': '5m',
                        '1H': '1H',
                        '1D': '1D',
                    },
                },
                'fetchOHLCV': {
                    // 'type': 'Candles', // Candles or HistoryCandles, IndexCandles, MarkPriceCandles
                    'timezone': 'UTC', // UTC, HK
                },
                'fetchPositions': {
                    'method': 'privateGetAccountPositions', // privateGetAccountPositions or privateGetAccountPositionsHistory
                },
                'createOrder': 'privatePostTradeBatchOrders',
                'createMarketBuyOrderRequiresPrice': false,
                'fetchMarkets': ['spot', 'future', 'swap', 'option'],
                'defaultType': 'spot',
                // 'fetchBalance': {
                //     'type': 'spot', // 'funding', 'trading', 'spot'
                // },
                'fetchLedger': {
                    'method': 'privateGetAccountBills', // privateGetAccountBillsArchive, privateGetAssetBills
                },
                // 6: Funding account, 18: Trading account
                'fetchOrder': {
                    'method': 'privateGetTradeOrder', // privateGetTradeOrdersAlgoHistory
                },
                'fetchOpenOrders': {
                    'method': 'privateGetTradeOrdersPending', // privateGetTradeOrdersAlgoPending
                },
                'cancelOrders': {
                    'method': 'privatePostTradeCancelBatchOrders', // privatePostTradeCancelAlgos
                },
                'fetchCanceledOrders': {
                    'method': 'privateGetTradeOrdersHistory', // privateGetTradeOrdersAlgoHistory
                },
                'fetchClosedOrders': {
                    'method': 'privateGetTradeOrdersHistory', // privateGetTradeOrdersAlgoHistory
                },
                'algoOrderTypes': {
                    'conditional': true,
                    'trigger': true,
                    'oco': true,
                    'move_order_stop': true,
                    'iceberg': true,
                    'twap': true,
                },
                'accountsByType': {
                    'funding': '6',
                    'trading': '18',
                    'spot': '18',
                    'future': '18',
                    'futures': '18',
                    'margin': '18',
                    'swap': '18',
                    'option': '18',
                },
                'accountsById': {
                    '6': 'funding',
                    '18': 'trading', // unified trading account
                },
                'exchangeType': {
                    'spot': 'SPOT',
                    'margin': 'MARGIN',
                    'swap': 'SWAP',
                    'future': 'FUTURES',
                    'futures': 'FUTURES',
                    'option': 'OPTION',
                    'SPOT': 'SPOT',
                    'MARGIN': 'MARGIN',
                    'SWAP': 'SWAP',
                    'FUTURES': 'FUTURES',
                    'OPTION': 'OPTION',
                },
                'brokerId': 'e847386590ce4dBC',
            },
            'commonCurrencies': {
                // the exchange refers to ERC20 version of Aeternity (AEToken)
                'AE': 'AET',
                'BOX': 'DefiBox',
                'HOT': 'Hydro Protocol',
                'HSR': 'HC',
                'MAG': 'Maggie',
                'SBTC': 'Super Bitcoin',
                'TRADE': 'Unitrade',
                'YOYO': 'YOYOW',
                'WIN': 'WinToken', // https://github.com/ccxt/ccxt/issues/5701
            },
        });
    }
    handleMarketTypeAndParams(methodName, market = undefined, params = {}) {
        const instType = this.safeString(params, 'instType');
        params = this.omit(params, 'instType');
        const type = this.safeString(params, 'type');
        if ((type === undefined) && (instType !== undefined)) {
            params['type'] = instType;
        }
        return super.handleMarketTypeAndParams(methodName, market, params);
    }
    convertToInstrumentType(type) {
        const exchangeTypes = this.safeValue(this.options, 'exchangeType', {});
        return this.safeString(exchangeTypes, type, type);
    }
    async fetchStatus(params = {}) {
        /**
         * @method
         * @name okx#fetchStatus
         * @description the latest known information on the availability of the exchange API
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
         */
        const response = await this.publicGetSystemStatus(params);
        //
        // Note, if there is no maintenance around, the 'data' array is empty
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "begin": "1621328400000",
        //                 "end": "1621329000000",
        //                 "href": "https://www.okx.com/support/hc/en-us/articles/360060882172",
        //                 "scheDesc": "",
        //                 "serviceType": "1", // 0 WebSocket, 1 Spot/Margin, 2 Futures, 3 Perpetual, 4 Options, 5 Trading service
        //                 "state": "scheduled", // ongoing, completed, canceled
        //                 "system": "classic", // classic, unified
        //                 "title": "Classic Spot System Upgrade"
        //             },
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const dataLength = data.length;
        const update = {
            'updated': undefined,
            'status': (dataLength === 0) ? 'ok' : 'maintenance',
            'eta': undefined,
            'url': undefined,
            'info': response,
        };
        for (let i = 0; i < data.length; i++) {
            const event = data[i];
            const state = this.safeString(event, 'state');
            if (state === 'ongoing') {
                update['eta'] = this.safeInteger(event, 'end');
                update['status'] = 'maintenance';
            }
        }
        return update;
    }
    async fetchTime(params = {}) {
        /**
         * @method
         * @name okx#fetchTime
         * @description fetches the current integer timestamp in milliseconds from the exchange server
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {int} the current integer timestamp in milliseconds from the exchange server
         */
        const response = await this.publicGetPublicTime(params);
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {"ts": "1621247923668"}
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const first = this.safeValue(data, 0, {});
        return this.safeInteger(first, 'ts');
    }
    async fetchAccounts(params = {}) {
        /**
         * @method
         * @name okx#fetchAccounts
         * @description fetch all the accounts associated with a profile
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
         */
        const response = await this.privateGetAccountConfig(params);
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "acctLv": "2",
        //                 "autoLoan": false,
        //                 "ctIsoMode": "automatic",
        //                 "greeksType": "PA",
        //                 "level": "Lv1",
        //                 "levelTmp": "",
        //                 "mgnIsoMode": "automatic",
        //                 "posMode": "long_short_mode",
        //                 "uid": "88018754289672195"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const result = [];
        for (let i = 0; i < data.length; i++) {
            const account = data[i];
            const accountId = this.safeString(account, 'uid');
            const type = this.safeString(account, 'acctLv');
            result.push({
                'id': accountId,
                'type': type,
                'currency': undefined,
                'info': account,
            });
        }
        return result;
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name okx#fetchMarkets
         * @description retrieves data on all markets for okx
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        const types = this.safeValue(this.options, 'fetchMarkets');
        let promises = [];
        let result = [];
        for (let i = 0; i < types.length; i++) {
            promises.push(this.fetchMarketsByType(types[i], params));
        }
        // why not both ¯\_(ツ)_/¯
        promises = await Promise.all(promises);
        for (let i = 0; i < promises.length; i++) {
            result = this.arrayConcat(result, promises[i]);
        }
        return result;
    }
    parseMarkets(markets) {
        const result = [];
        for (let i = 0; i < markets.length; i++) {
            result.push(this.parseMarket(markets[i]));
        }
        return result;
    }
    parseMarket(market) {
        //
        //     {
        //         "alias": "", // this_week, next_week, quarter, next_quarter
        //         "baseCcy": "BTC",
        //         "category": "1",
        //         "ctMult": "",
        //         "ctType": "", // inverse, linear
        //         "ctVal": "",
        //         "ctValCcy": "",
        //         "expTime": "",
        //         "instId": "BTC-USDT", // BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
        //         "instType": "SPOT", // SPOT, FUTURES, SWAP, OPTION
        //         "lever": "10",
        //         "listTime": "1548133413000",
        //         "lotSz": "0.00000001",
        //         "minSz": "0.00001",
        //         "optType": "",
        //         "quoteCcy": "USDT",
        //         "settleCcy": "",
        //         "state": "live",
        //         "stk": "",
        //         "tickSz": "0.1",
        //         "uly": ""
        //     }
        //
        //     {
        //         alias: "",
        //         baseCcy: "",
        //         category: "1",
        //         ctMult: "0.1",
        //         ctType: "",
        //         ctVal: "1",
        //         ctValCcy: "BTC",
        //         expTime: "1648195200000",
        //         instId: "BTC-USD-220325-194000-P",
        //         instType: "OPTION",
        //         lever: "",
        //         listTime: "1631262612280",
        //         lotSz: "1",
        //         minSz: "1",
        //         optType: "P",
        //         quoteCcy: "",
        //         settleCcy: "BTC",
        //         state: "live",
        //         stk: "194000",
        //         tickSz: "0.0005",
        //         uly: "BTC-USD"
        //     }
        //
        const id = this.safeString(market, 'instId');
        let type = this.safeStringLower(market, 'instType');
        if (type === 'futures') {
            type = 'future';
        }
        const spot = (type === 'spot');
        const future = (type === 'future');
        const swap = (type === 'swap');
        const option = (type === 'option');
        const contract = swap || future || option;
        let baseId = this.safeString(market, 'baseCcy');
        let quoteId = this.safeString(market, 'quoteCcy');
        const settleId = this.safeString(market, 'settleCcy');
        const settle = this.safeCurrencyCode(settleId);
        const underlying = this.safeString(market, 'uly');
        if ((underlying !== undefined) && !spot) {
            const parts = underlying.split('-');
            baseId = this.safeString(parts, 0);
            quoteId = this.safeString(parts, 1);
        }
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        let symbol = base + '/' + quote;
        let expiry = undefined;
        let strikePrice = undefined;
        let optionType = undefined;
        if (contract) {
            symbol = symbol + ':' + settle;
            expiry = this.safeInteger(market, 'expTime');
            if (future) {
                const ymd = this.yymmdd(expiry);
                symbol = symbol + '-' + ymd;
            }
            else if (option) {
                strikePrice = this.safeString(market, 'stk');
                optionType = this.safeString(market, 'optType');
                const ymd = this.yymmdd(expiry);
                symbol = symbol + '-' + ymd + '-' + strikePrice + '-' + optionType;
                optionType = (optionType === 'P') ? 'put' : 'call';
            }
        }
        const tickSize = this.safeString(market, 'tickSz');
        const minAmountString = this.safeString(market, 'minSz');
        const minAmount = this.parseNumber(minAmountString);
        const fees = this.safeValue2(this.fees, type, 'trading', {});
        const precisionPrice = this.parseNumber(tickSize);
        let maxLeverage = this.safeString(market, 'lever', '1');
        maxLeverage = Precise.stringMax(maxLeverage, '1');
        return this.extend(fees, {
            'id': id,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': settleId,
            'type': type,
            'spot': spot,
            'margin': spot && (Precise.stringGt(maxLeverage, '1')),
            'swap': swap,
            'future': future,
            'option': option,
            'active': true,
            'contract': contract,
            'linear': contract ? (quoteId === settleId) : undefined,
            'inverse': contract ? (baseId === settleId) : undefined,
            'contractSize': contract ? this.safeNumber(market, 'ctVal') : undefined,
            'expiry': expiry,
            'expiryDatetime': this.iso8601(expiry),
            'strike': strikePrice,
            'optionType': optionType,
            'precision': {
                'amount': this.safeNumber(market, 'lotSz'),
                'price': precisionPrice,
            },
            'limits': {
                'leverage': {
                    'min': this.parseNumber('1'),
                    'max': this.parseNumber(maxLeverage),
                },
                'amount': {
                    'min': minAmount,
                    'max': undefined,
                },
                'price': {
                    'min': precisionPrice,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'info': market,
        });
    }
    async fetchMarketsByType(type, params = {}) {
        const request = {
            'instType': this.convertToInstrumentType(type),
        };
        if (type === 'option') {
            const defaultUnderlying = this.safeValue(this.options, 'defaultUnderlying', 'BTC-USD');
            const currencyId = this.safeString2(params, 'uly', 'marketId', defaultUnderlying);
            if (currencyId === undefined) {
                throw new ArgumentsRequired(this.id + ' fetchMarketsByType() requires an underlying uly or marketId parameter for options markets');
            }
            else {
                request['uly'] = currencyId;
            }
        }
        const response = await this.publicGetPublicInstruments(this.extend(request, params));
        //
        // spot, future, swap, option
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "alias": "", // this_week, next_week, quarter, next_quarter
        //                 "baseCcy": "BTC",
        //                 "category": "1",
        //                 "ctMult": "",
        //                 "ctType": "", // inverse, linear
        //                 "ctVal": "",
        //                 "ctValCcy": "",
        //                 "expTime": "",
        //                 "instId": "BTC-USDT", // BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
        //                 "instType": "SPOT", // SPOT, FUTURES, SWAP, OPTION
        //                 "lever": "10",
        //                 "listTime": "1548133413000",
        //                 "lotSz": "0.00000001",
        //                 "minSz": "0.00001",
        //                 "optType": "",
        //                 "quoteCcy": "USDT",
        //                 "settleCcy": "",
        //                 "state": "live",
        //                 "stk": "",
        //                 "tickSz": "0.1",
        //                 "uly": ""
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseMarkets(data);
    }
    safeNetwork(networkId) {
        const networksById = {
            'Bitcoin': 'BTC',
            'Omni': 'OMNI',
            'TRON': 'TRC20',
        };
        return this.safeString(networksById, networkId, networkId);
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name okx#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-currencies
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} an associative dictionary of currencies
         */
        // this endpoint requires authentication
        // while fetchCurrencies is a public API method by design
        // therefore we check the keys here
        // and fallback to generating the currencies from the markets
        if (!this.checkRequiredCredentials(false)) {
            return undefined;
        }
        //
        // has['fetchCurrencies'] is currently set to true, but an unauthorized request returns
        //
        //     {"msg":"Request header “OK_ACCESS_KEY“ can't be empty.","code":"50103"}
        //
        const response = await this.privateGetAssetCurrencies(params);
        //
        //    {
        //        "code": "0",
        //        "data": [
        //            {
        //                "canDep": true,
        //                "canInternal": false,
        //                "canWd": true,
        //                "ccy": "USDT",
        //                "chain": "USDT-TRC20",
        //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
        //                "mainNet": false,
        //                "maxFee": "1.6",
        //                "maxWd": "8852150",
        //                "minFee": "0.8",
        //                "minWd": "2",
        //                "name": "Tether",
        //                "usedWdQuota": "0",
        //                "wdQuota": "500",
        //                "wdTickSz": "3"
        //            },
        //            {
        //                "canDep": true,
        //                "canInternal": false,
        //                "canWd": true,
        //                "ccy": "USDT",
        //                "chain": "USDT-ERC20",
        //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
        //                "mainNet": false,
        //                "maxFee": "16",
        //                "maxWd": "8852150",
        //                "minFee": "8",
        //                "minWd": "2",
        //                "name": "Tether",
        //                "usedWdQuota": "0",
        //                "wdQuota": "500",
        //                "wdTickSz": "3"
        //            },
        //            ...
        //        ],
        //        "msg": ""
        //    }
        //
        const data = this.safeValue(response, 'data', []);
        const result = {};
        const dataByCurrencyId = this.groupBy(data, 'ccy');
        const currencyIds = Object.keys(dataByCurrencyId);
        for (let i = 0; i < currencyIds.length; i++) {
            const currencyId = currencyIds[i];
            const currency = this.safeCurrency(currencyId);
            const code = currency['code'];
            const chains = dataByCurrencyId[currencyId];
            const networks = {};
            let currencyActive = false;
            let depositEnabled = undefined;
            let withdrawEnabled = undefined;
            let maxPrecision = undefined;
            for (let j = 0; j < chains.length; j++) {
                const chain = chains[j];
                const canDeposit = this.safeValue(chain, 'canDep');
                const canWithdraw = this.safeValue(chain, 'canWd');
                const canInternal = this.safeValue(chain, 'canInternal');
                const active = (canDeposit && canWithdraw && canInternal) ? true : false;
                currencyActive = (currencyActive === undefined) ? active : currencyActive;
                const networkId = this.safeString(chain, 'chain');
                if (canDeposit && !depositEnabled) {
                    depositEnabled = true;
                }
                else if (!canDeposit) {
                    depositEnabled = false;
                }
                if (canWithdraw && !withdrawEnabled) {
                    withdrawEnabled = true;
                }
                else if (!canWithdraw) {
                    withdrawEnabled = false;
                }
                if ((networkId !== undefined) && (networkId.indexOf('-') >= 0)) {
                    const parts = networkId.split('-');
                    const chainPart = this.safeString(parts, 1, networkId);
                    const networkCode = this.safeNetwork(chainPart);
                    const precision = this.parsePrecision(this.safeString(chain, 'wdTickSz'));
                    if (maxPrecision === undefined) {
                        maxPrecision = precision;
                    }
                    else {
                        maxPrecision = Precise.stringMin(maxPrecision, precision);
                    }
                    networks[networkCode] = {
                        'id': networkId,
                        'network': networkCode,
                        'active': active,
                        'deposit': canDeposit,
                        'withdraw': canWithdraw,
                        'fee': this.safeNumber(chain, 'minFee'),
                        'precision': this.parseNumber(precision),
                        'limits': {
                            'withdraw': {
                                'min': this.safeNumber(chain, 'minWd'),
                                'max': this.safeNumber(chain, 'maxWd'),
                            },
                        },
                        'info': chain,
                    };
                }
            }
            const firstChain = this.safeValue(chains, 0);
            result[code] = {
                'info': undefined,
                'code': code,
                'id': currencyId,
                'name': this.safeString(firstChain, 'name'),
                'active': currencyActive,
                'deposit': depositEnabled,
                'withdraw': withdrawEnabled,
                'fee': undefined,
                'precision': this.parseNumber(maxPrecision),
                'limits': {
                    'amount': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'networks': networks,
            };
        }
        return result;
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
        };
        limit = (limit === undefined) ? 20 : limit;
        if (limit !== undefined) {
            request['sz'] = limit; // max 400
        }
        const response = await this.publicGetMarketBooks(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "asks": [
        //                     ["0.07228","4.211619","0","2"], // price, amount, liquidated orders, total open orders
        //                     ["0.0723","299.880364","0","2"],
        //                     ["0.07231","3.72832","0","1"],
        //                 ],
        //                 "bids": [
        //                     ["0.07221","18.5","0","1"],
        //                     ["0.0722","18.5","0","1"],
        //                     ["0.07219","0.505407","0","1"],
        //                 ],
        //                 "ts": "1621438475342"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const first = this.safeValue(data, 0, {});
        const timestamp = this.safeInteger(first, 'ts');
        return this.parseOrderBook(first, symbol, timestamp);
    }
    parseTicker(ticker, market = undefined) {
        //
        //     {
        //         "instType": "SPOT",
        //         "instId": "ETH-BTC",
        //         "last": "0.07319",
        //         "lastSz": "0.044378",
        //         "askPx": "0.07322",
        //         "askSz": "4.2",
        //         "bidPx": "0.0732",
        //         "bidSz": "6.050058",
        //         "open24h": "0.07801",
        //         "high24h": "0.07975",
        //         "low24h": "0.06019",
        //         "volCcy24h": "11788.887619",
        //         "vol24h": "167493.829229",
        //         "ts": "1621440583784",
        //         "sodUtc0": "0.07872",
        //         "sodUtc8": "0.07345"
        //     }
        //
        const timestamp = this.safeInteger(ticker, 'ts');
        const marketId = this.safeString(ticker, 'instId');
        market = this.safeMarket(marketId, market, '-');
        const symbol = market['symbol'];
        const last = this.safeString(ticker, 'last');
        const open = this.safeString(ticker, 'open24h');
        const spot = this.safeValue(market, 'spot', false);
        const quoteVolume = spot ? this.safeString(ticker, 'volCcy24h') : undefined;
        const baseVolume = this.safeString(ticker, 'vol24h');
        const high = this.safeString(ticker, 'high24h');
        const low = this.safeString(ticker, 'low24h');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': this.safeString(ticker, 'bidPx'),
            'bidVolume': this.safeString(ticker, 'bidSz'),
            'ask': this.safeString(ticker, 'askPx'),
            'askVolume': this.safeString(ticker, 'askSz'),
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
        };
        const response = await this.publicGetMarketTicker(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "instType": "SPOT",
        //                 "instId": "ETH-BTC",
        //                 "last": "0.07319",
        //                 "lastSz": "0.044378",
        //                 "askPx": "0.07322",
        //                 "askSz": "4.2",
        //                 "bidPx": "0.0732",
        //                 "bidSz": "6.050058",
        //                 "open24h": "0.07801",
        //                 "high24h": "0.07975",
        //                 "low24h": "0.06019",
        //                 "volCcy24h": "11788.887619",
        //                 "vol24h": "167493.829229",
        //                 "ts": "1621440583784",
        //                 "sodUtc0": "0.07872",
        //                 "sodUtc8": "0.07345"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const first = this.safeValue(data, 0, {});
        return this.parseTicker(first, market);
    }
    async fetchTickersByType(type, symbols = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
            'instType': this.convertToInstrumentType(type),
        };
        if (type === 'option') {
            const defaultUnderlying = this.safeValue(this.options, 'defaultUnderlying', 'BTC-USD');
            const currencyId = this.safeString2(params, 'uly', 'marketId', defaultUnderlying);
            if (currencyId === undefined) {
                throw new ArgumentsRequired(this.id + ' fetchTickersByType() requires an underlying uly or marketId parameter for options markets');
            }
            else {
                request['uly'] = currencyId;
            }
        }
        const response = await this.publicGetMarketTickers(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "instType": "SPOT",
        //                 "instId": "BCD-BTC",
        //                 "last": "0.0000769",
        //                 "lastSz": "5.4788",
        //                 "askPx": "0.0000777",
        //                 "askSz": "3.2197",
        //                 "bidPx": "0.0000757",
        //                 "bidSz": "4.7509",
        //                 "open24h": "0.0000885",
        //                 "high24h": "0.0000917",
        //                 "low24h": "0.0000596",
        //                 "volCcy24h": "9.2877",
        //                 "vol24h": "124824.1985",
        //                 "ts": "1621441741434",
        //                 "sodUtc0": "0.0000905",
        //                 "sodUtc8": "0.0000729"
        //             },
        //         ]
        //     }
        //
        const tickers = this.safeValue(response, 'data', []);
        return this.parseTickers(tickers, symbols);
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchTickers
         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const first = this.safeString(symbols, 0);
        let market = undefined;
        if (first !== undefined) {
            market = this.market(first);
        }
        const [type, query] = this.handleMarketTypeAndParams('fetchTickers', market, params);
        return await this.fetchTickersByType(type, symbols, query);
    }
    parseTrade(trade, market = undefined) {
        //
        // public fetchTrades
        //
        //     {
        //         "instId": "ETH-BTC",
        //         "side": "sell",
        //         "sz": "0.119501",
        //         "px": "0.07065",
        //         "tradeId": "15826757",
        //         "ts": "1621446178316"
        //     }
        //
        // private fetchMyTrades
        //
        //     {
        //         "side": "buy",
        //         "fillSz": "0.007533",
        //         "fillPx": "2654.98",
        //         "fee": "-0.000007533",
        //         "ordId": "317321390244397056",
        //         "instType": "SPOT",
        //         "instId": "ETH-USDT",
        //         "clOrdId": "",
        //         "posSide": "net",
        //         "billId": "317321390265368576",
        //         "tag": "0",
        //         "execType": "T",
        //         "tradeId": "107601752",
        //         "feeCcy": "ETH",
        //         "ts": "1621927314985"
        //     }
        //
        const id = this.safeString(trade, 'tradeId');
        const marketId = this.safeString(trade, 'instId');
        market = this.safeMarket(marketId, market, '-');
        const symbol = market['symbol'];
        const timestamp = this.safeInteger(trade, 'ts');
        const price = this.safeString2(trade, 'fillPx', 'px');
        const amount = this.safeString2(trade, 'fillSz', 'sz');
        const side = this.safeString(trade, 'side');
        const orderId = this.safeString(trade, 'ordId');
        const feeCostString = this.safeString(trade, 'fee');
        let fee = undefined;
        if (feeCostString !== undefined) {
            const feeCostSigned = Precise.stringNeg(feeCostString);
            const feeCurrencyId = this.safeString(trade, 'feeCcy');
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': feeCostSigned,
                'currency': feeCurrencyCode,
            };
        }
        let takerOrMaker = this.safeString(trade, 'execType');
        if (takerOrMaker === 'T') {
            takerOrMaker = 'taker';
        }
        else if (takerOrMaker === 'M') {
            takerOrMaker = 'maker';
        }
        return this.safeTrade({
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'id': id,
            'order': orderId,
            'type': undefined,
            'takerOrMaker': takerOrMaker,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': undefined,
            'fee': fee,
        }, market);
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit; // default 100
        }
        const response = await this.publicGetMarketTrades(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {"instId":"ETH-BTC","side":"sell","sz":"0.119501","px":"0.07065","tradeId":"15826757","ts":"1621446178316"},
        //             {"instId":"ETH-BTC","side":"sell","sz":"0.03","px":"0.07068","tradeId":"15826756","ts":"1621446178066"},
        //             {"instId":"ETH-BTC","side":"buy","sz":"0.507","px":"0.07069","tradeId":"15826755","ts":"1621446175085"},
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseTrades(data, market, since, limit);
    }
    parseOHLCV(ohlcv, market = undefined) {
        //
        //     [
        //         "1678928760000", // timestamp
        //         "24341.4", // open
        //         "24344", // high
        //         "24313.2", // low
        //         "24323", // close
        //         "628", // contract volume
        //         "2.5819", // base volume
        //         "62800", // quote volume
        //         "0" // candlestick state
        //     ]
        //
        const res = this.handleMarketTypeAndParams('fetchOHLCV', market, undefined);
        const type = res[0];
        const volumeIndex = (type === 'spot') ? 5 : 6;
        return [
            this.safeInteger(ohlcv, 0),
            this.safeNumber(ohlcv, 1),
            this.safeNumber(ohlcv, 2),
            this.safeNumber(ohlcv, 3),
            this.safeNumber(ohlcv, 4),
            this.safeNumber(ohlcv, volumeIndex),
        ];
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchOHLCV
         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-candlesticks
         * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-candlesticks-history
         * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-mark-price-candlesticks
         * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-mark-price-candlesticks-history
         * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-index-candlesticks
         * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-index-candlesticks-history
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string|undefined} params.price "mark" or "index" for mark price and index price candles
         * @param {int|undefined} params.until timestamp in ms of the latest candle to fetch
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const price = this.safeString(params, 'price');
        params = this.omit(params, 'price');
        const options = this.safeValue(this.options, 'fetchOHLCV', {});
        const timezone = this.safeString(options, 'timezone', 'UTC');
        if (limit === undefined) {
            limit = 100; // default 100, max 100
        }
        const duration = this.parseTimeframe(timeframe);
        let bar = this.safeString(this.timeframes, timeframe, timeframe);
        if ((timezone === 'UTC') && (duration >= 21600)) { // if utc and timeframe >= 6h
            bar += timezone.toLowerCase();
        }
        const request = {
            'instId': market['id'],
            'bar': bar,
            'limit': limit,
        };
        let defaultType = 'Candles';
        if (since !== undefined) {
            const now = this.milliseconds();
            const difference = now - since;
            // if the since timestamp is more than limit candles back in the past
            if (difference > 1440 * duration * 1000) {
                defaultType = 'HistoryCandles';
            }
            const durationInMilliseconds = duration * 1000;
            const startTime = Math.max(since - 1, 0);
            request['before'] = startTime;
            request['after'] = this.sum(startTime, durationInMilliseconds * limit);
        }
        const until = this.safeInteger(params, 'until');
        if (until !== undefined) {
            request['after'] = until;
            params = this.omit(params, 'until');
        }
        defaultType = this.safeString(options, 'type', defaultType); // Candles or HistoryCandles
        const type = this.safeString(params, 'type', defaultType);
        params = this.omit(params, 'type');
        let method = 'publicGetMarket' + type;
        const isHistoryCandles = (type === 'HistoryCandles');
        if (price === 'mark') {
            method = (isHistoryCandles) ? 'publicGetMarketHistoryMarkPriceCandles' : 'publicGetMarketMarkPriceCandles';
        }
        else if (price === 'index') {
            method = (isHistoryCandles) ? 'publicGetMarketHistoryIndexCandles' : 'publicGetMarketIndexCandles';
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             ["1678928760000","24341.4","24344","24313.2","24323","628","2.5819","62800","0"],
        //             ["1678928700000","24324.1","24347.6","24321.7","24341.4","2565","10.5401","256500","1"],
        //             ["1678928640000","24300.2","24324.1","24288","24324.1","3304","13.5937","330400","1"],
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseOHLCVs(data, market, timeframe, since, limit);
    }
    async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchFundingRateHistory
         * @description fetches historical funding rate prices
         * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
         * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
         * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchFundingRateHistory() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
        };
        if (since !== undefined) {
            request['before'] = Math.max(since - 1, 0);
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetPublicFundingRateHistory(this.extend(request, params));
        //
        //     {
        //         "code":"0",
        //         "msg":"",
        //         "data":[
        //             {
        //                 "instType":"SWAP",
        //                 "instId":"BTC-USDT-SWAP",
        //                 "fundingRate":"0.018",
        //                 "realizedRate":"0.017",
        //                 "fundingTime":"1597026383085"
        //             },
        //             {
        //                 "instType":"SWAP",
        //                 "instId":"BTC-USDT-SWAP",
        //                 "fundingRate":"0.018",
        //                 "realizedRate":"0.017",
        //                 "fundingTime":"1597026383085"
        //             }
        //         ]
        //     }
        //
        const rates = [];
        const data = this.safeValue(response, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const rate = data[i];
            const timestamp = this.safeNumber(rate, 'fundingTime');
            rates.push({
                'info': rate,
                'symbol': this.safeSymbol(this.safeString(rate, 'instId')),
                'fundingRate': this.safeNumber(rate, 'realizedRate'),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
            });
        }
        const sorted = this.sortBy(rates, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, market['symbol'], since, limit);
    }
    parseBalanceByType(type, response) {
        if (type === 'funding') {
            return this.parseFundingBalance(response);
        }
        else {
            return this.parseTradingBalance(response);
        }
    }
    parseTradingBalance(response) {
        const result = { 'info': response };
        const data = this.safeValue(response, 'data', []);
        const first = this.safeValue(data, 0, {});
        const timestamp = this.safeInteger(first, 'uTime');
        const details = this.safeValue(first, 'details', []);
        for (let i = 0; i < details.length; i++) {
            const balance = details[i];
            const currencyId = this.safeString(balance, 'ccy');
            const code = this.safeCurrencyCode(currencyId);
            const account = this.account();
            // it may be incorrect to use total, free and used for swap accounts
            const eq = this.safeString(balance, 'eq');
            const availEq = this.safeString(balance, 'availEq');
            if ((eq === undefined) || (availEq === undefined)) {
                account['free'] = this.safeString(balance, 'availBal');
                account['used'] = this.safeString(balance, 'frozenBal');
            }
            else {
                account['total'] = eq;
                account['free'] = availEq;
            }
            result[code] = account;
        }
        result['timestamp'] = timestamp;
        result['datetime'] = this.iso8601(timestamp);
        return this.safeBalance(result);
    }
    parseFundingBalance(response) {
        const result = { 'info': response };
        const data = this.safeValue(response, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const balance = data[i];
            const currencyId = this.safeString(balance, 'ccy');
            const code = this.safeCurrencyCode(currencyId);
            const account = this.account();
            // it may be incorrect to use total, free and used for swap accounts
            account['total'] = this.safeString(balance, 'bal');
            account['free'] = this.safeString(balance, 'availBal');
            account['used'] = this.safeString(balance, 'frozenBal');
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    parseTradingFee(fee, market = undefined) {
        // https://www.okx.com/docs-v5/en/#rest-api-account-get-fee-rates
        //
        //     {
        //         "category": "1",
        //         "delivery": "",
        //         "exercise": "",
        //         "instType": "SPOT",
        //         "level": "Lv1",
        //         "maker": "-0.0008",
        //         "taker": "-0.001",
        //         "ts": "1639043138472"
        //     }
        //
        return {
            'info': fee,
            'symbol': this.safeSymbol(undefined, market),
            // OKX returns the fees as negative values opposed to other exchanges, so the sign needs to be flipped
            'maker': this.parseNumber(Precise.stringNeg(this.safeString2(fee, 'maker', 'makerU'))),
            'taker': this.parseNumber(Precise.stringNeg(this.safeString2(fee, 'taker', 'takerU'))),
        };
    }
    async fetchTradingFee(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchTradingFee
         * @description fetch the trading fees for a market
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instType': this.convertToInstrumentType(market['type']), // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'instId': market['id'], // only applicable to SPOT/MARGIN
            // 'uly': market['id'], // only applicable to FUTURES/SWAP/OPTION
            // 'category': '1', // 1 = Class A, 2 = Class B, 3 = Class C, 4 = Class D
        };
        if (market['spot']) {
            request['instId'] = market['id'];
        }
        else if (market['swap'] || market['future'] || market['option']) {
            request['uly'] = market['baseId'] + '-' + market['quoteId'];
        }
        else {
            throw new NotSupported(this.id + ' fetchTradingFee() supports spot, swap, future or option markets only');
        }
        const response = await this.privateGetAccountTradeFee(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "category": "1",
        //                 "delivery": "",
        //                 "exercise": "",
        //                 "instType": "SPOT",
        //                 "level": "Lv1",
        //                 "maker": "-0.0008",
        //                 "taker": "-0.001",
        //                 "ts": "1639043138472"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const first = this.safeValue(data, 0, {});
        return this.parseTradingFee(first, market);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name okx#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const [marketType, query] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
        let method = undefined;
        if (marketType === 'funding') {
            method = 'privateGetAssetBalances';
        }
        else {
            method = 'privateGetAccountBalance';
        }
        const request = {
        // 'ccy': 'BTC,ETH', // comma-separated list of currency ids
        };
        const response = await this[method](this.extend(request, query));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "adjEq": "",
        //                 "details": [
        //                     {
        //                         "availBal": "",
        //                         "availEq": "28.21006347",
        //                         "cashBal": "28.21006347",
        //                         "ccy": "USDT",
        //                         "crossLiab": "",
        //                         "disEq": "28.2687404020176",
        //                         "eq":"28 .21006347",
        //                         "eqUsd": "28.2687404020176",
        //                         "frozenBal": "0",
        //                         "interest": "",
        //                         "isoEq": "0",
        //                         "isoLiab": "",
        //                         "liab": "",
        //                         "maxLoan": "",
        //                         "mgnRatio": "",
        //                         "notionalLever": "0",
        //                         "ordFrozen": "0",
        //                         "twap": "0",
        //                         "uTime": "1621556539861",
        //                         "upl": "0",
        //                         "uplLiab": ""
        //                     }
        //                 ],
        //                 "imr": "",
        //                 "isoEq": "0",
        //                 "mgnRatio": "",
        //                 "mmr": "",
        //                 "notionalUsd": "",
        //                 "ordFroz": "",
        //                 "totalEq": "28.2687404020176",
        //                 "uTime": "1621556553510"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "adjEq": "",
        //                 "details": [
        //                     {
        //                         "availBal": "0.049",
        //                         "availEq": "",
        //                         "cashBal": "0.049",
        //                         "ccy": "BTC",
        //                         "crossLiab": "",
        //                         "disEq": "1918.55678",
        //                         "eq": "0.049",
        //                         "eqUsd": "1918.55678",
        //                         "frozenBal": "0",
        //                         "interest": "",
        //                         "isoEq": "",
        //                         "isoLiab": "",
        //                         "liab": "",
        //                         "maxLoan": "",
        //                         "mgnRatio": "",
        //                         "notionalLever": "",
        //                         "ordFrozen": "0",
        //                         "twap": "0",
        //                         "uTime": "1621973128591",
        //                         "upl": "",
        //                         "uplLiab": ""
        //                     }
        //                 ],
        //                 "imr": "",
        //                 "isoEq": "",
        //                 "mgnRatio": "",
        //                 "mmr": "",
        //                 "notionalUsd": "",
        //                 "ordFroz": "",
        //                 "totalEq": "1918.55678",
        //                 "uTime": "1622045126908"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        // funding
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "availBal": "0.00005426",
        //                 "bal": 0.0000542600000000,
        //                 "ccy": "BTC",
        //                 "frozenBal": "0"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        return this.parseBalanceByType(marketType, response);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name okx#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {bool|undefined} params.reduceOnly MARGIN orders only, or swap/future orders in net mode
         * @param {bool|undefined} params.postOnly true to place a post only order
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
            // 'ccy': currency['id'], // only applicable to cross MARGIN orders in single-currency margin
            // 'clOrdId': clientOrderId, // up to 32 characters, must be unique
            // 'tag': tag, // up to 8 characters
            'side': side,
            // 'posSide': 'long', // long, short, // required in the long/short mode, and can only be long or short (only for future or swap)
            'ordType': type,
            // 'ordType': type, // privatePostTradeOrder: market, limit, post_only, fok, ioc, optimal_limit_ioc
            // 'ordType': type, // privatePostTradeOrderAlgo: conditional, oco, trigger, move_order_stop, iceberg, twap
            'sz': this.amountToPrecision(symbol, amount),
            // 'px': this.priceToPrecision (symbol, price), // limit orders only
            // 'reduceOnly': false,
            //
            // 'triggerPx': 10, // stopPrice (trigger orders)
            // 'orderPx': 10, // Order price if -1, the order will be executed at the market price. (trigger orders)
            // 'triggerPxType': 'last', // Conditional default is last, mark or index (trigger orders)
            //
            // 'tpTriggerPx': 10, // takeProfitPrice (conditional orders)
            // 'tpTriggerPxType': 'last', // Conditional default is last, mark or index (conditional orders)
            // 'tpOrdPx': 10, // Order price for Take-Profit orders, if -1 will be executed at market price (conditional orders)
            //
            // 'slTriggerPx': 10, // stopLossPrice (conditional orders)
            // 'slTriggerPxType': 'last', // Conditional default is last, mark or index (conditional orders)
            // 'slOrdPx': 10, // Order price for Stop-Loss orders, if -1 will be executed at market price (conditional orders)
        };
        const spot = market['spot'];
        const contract = market['contract'];
        const triggerPrice = this.safeValueN(params, ['triggerPrice', 'stopPrice', 'triggerPx']);
        const timeInForce = this.safeString(params, 'timeInForce', 'GTC');
        const takeProfitPrice = this.safeValue2(params, 'takeProfitPrice', 'tpTriggerPx');
        const tpOrdPx = this.safeValue(params, 'tpOrdPx', price);
        const tpTriggerPxType = this.safeString(params, 'tpTriggerPxType', 'last');
        const stopLossPrice = this.safeValue2(params, 'stopLossPrice', 'slTriggerPx');
        const slOrdPx = this.safeValue(params, 'slOrdPx', price);
        const slTriggerPxType = this.safeString(params, 'slTriggerPxType', 'last');
        const clientOrderId = this.safeString2(params, 'clOrdId', 'clientOrderId');
        const defaultMarginMode = this.safeString2(this.options, 'defaultMarginMode', 'marginMode', 'cross');
        let marginMode = this.safeString2(params, 'marginMode', 'tdMode'); // cross or isolated, tdMode not ommited so as to be extended into the request
        let margin = false;
        if ((marginMode !== undefined) && (marginMode !== 'cash')) {
            margin = true;
        }
        else {
            marginMode = defaultMarginMode;
            margin = this.safeValue(params, 'margin', false);
        }
        if (spot) {
            if (margin) {
                const defaultCurrency = (side === 'buy') ? market['quote'] : market['base'];
                const currency = this.safeString(params, 'ccy', defaultCurrency);
                request['ccy'] = this.safeCurrencyCode(currency);
            }
            const tradeMode = margin ? marginMode : 'cash';
            request['tdMode'] = tradeMode;
        }
        else if (contract) {
            request['tdMode'] = marginMode;
        }
        const isMarketOrder = type === 'market';
        const postOnly = this.isPostOnly(isMarketOrder, type === 'post_only', params);
        params = this.omit(params, ['currency', 'ccy', 'marginMode', 'timeInForce', 'stopPrice', 'triggerPrice', 'clientOrderId', 'stopLossPrice', 'takeProfitPrice', 'slOrdPx', 'tpOrdPx', 'margin']);
        const ioc = (timeInForce === 'IOC') || (type === 'ioc');
        const fok = (timeInForce === 'FOK') || (type === 'fok');
        const trigger = (triggerPrice !== undefined) || (type === 'trigger');
        const conditional = (stopLossPrice !== undefined) || (takeProfitPrice !== undefined) || (type === 'conditional');
        const marketIOC = (isMarketOrder && ioc) || (type === 'optimal_limit_ioc');
        const defaultMethod = this.safeString(this.options, 'createOrder', 'privatePostTradeBatchOrders');
        const defaultTgtCcy = this.safeString(this.options, 'tgtCcy', 'base_ccy');
        const tgtCcy = this.safeString(params, 'tgtCcy', defaultTgtCcy);
        if ((!contract) && (!margin)) {
            request['tgtCcy'] = tgtCcy;
        }
        let method = defaultMethod;
        if (isMarketOrder || marketIOC) {
            request['ordType'] = 'market';
            if (spot && (side === 'buy')) {
                // spot market buy: "sz" can refer either to base currency units or to quote currency units
                // see documentation: https://www.okx.com/docs-v5/en/#rest-api-trade-place-order
                if (tgtCcy === 'quote_ccy') {
                    // quote_ccy: sz refers to units of quote currency
                    let notional = this.safeNumber2(params, 'cost', 'sz');
                    const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);
                    if (createMarketBuyOrderRequiresPrice) {
                        if (price !== undefined) {
                            if (notional === undefined) {
                                const amountString = this.numberToString(amount);
                                const priceString = this.numberToString(price);
                                const quoteAmount = Precise.stringMul(amountString, priceString);
                                notional = this.parseNumber(quoteAmount);
                            }
                        }
                        else if (notional === undefined) {
                            throw new InvalidOrder(this.id + " createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'cost' unified extra parameter or in exchange-specific 'sz' extra parameter (the exchange-specific behaviour)");
                        }
                    }
                    else {
                        notional = (notional === undefined) ? amount : notional;
                    }
                    request['sz'] = this.costToPrecision(symbol, notional);
                    params = this.omit(params, ['cost', 'sz']);
                }
            }
            if (marketIOC && contract) {
                request['ordType'] = 'optimal_limit_ioc';
            }
        }
        else {
            if ((!trigger) && (!conditional)) {
                request['px'] = this.priceToPrecision(symbol, price);
            }
        }
        if (postOnly) {
            method = defaultMethod;
            request['ordType'] = 'post_only';
        }
        else if (ioc && !marketIOC) {
            method = defaultMethod;
            request['ordType'] = 'ioc';
        }
        else if (fok) {
            method = defaultMethod;
            request['ordType'] = 'fok';
        }
        else if (trigger) {
            method = 'privatePostTradeOrderAlgo';
            request['ordType'] = 'trigger';
            request['triggerPx'] = this.priceToPrecision(symbol, triggerPrice);
            request['orderPx'] = isMarketOrder ? '-1' : this.priceToPrecision(symbol, price);
        }
        else if (conditional) {
            method = 'privatePostTradeOrderAlgo';
            request['ordType'] = 'conditional';
            const twoWayCondition = ((takeProfitPrice !== undefined) && (stopLossPrice !== undefined));
            // if TP and SL are sent together
            // as ordType 'conditional' only stop-loss order will be applied
            if (twoWayCondition) {
                request['ordType'] = 'oco';
            }
            if (takeProfitPrice !== undefined) {
                request['tpTriggerPx'] = this.priceToPrecision(symbol, takeProfitPrice);
                request['tpOrdPx'] = (tpOrdPx === undefined) ? '-1' : this.priceToPrecision(symbol, tpOrdPx);
                request['tpTriggerPxType'] = tpTriggerPxType;
            }
            if (stopLossPrice !== undefined) {
                request['slTriggerPx'] = this.priceToPrecision(symbol, stopLossPrice);
                request['slOrdPx'] = (slOrdPx === undefined) ? '-1' : this.priceToPrecision(symbol, slOrdPx);
                request['slTriggerPxType'] = slTriggerPxType;
            }
        }
        if ((type === 'oco') || (type === 'move_order_stop') || (type === 'iceberg') || (type === 'twap')) {
            method = 'privatePostTradeOrderAlgo';
        }
        if (clientOrderId === undefined) {
            const brokerId = this.safeString(this.options, 'brokerId');
            if (brokerId !== undefined) {
                request['clOrdId'] = brokerId + this.uuid16();
                request['tag'] = brokerId;
            }
        }
        else {
            request['clOrdId'] = clientOrderId;
            params = this.omit(params, ['clOrdId', 'clientOrderId']);
        }
        let extendedRequest = undefined;
        if ((method === 'privatePostTradeOrder') || (method === 'privatePostTradeOrderAlgo')) {
            extendedRequest = this.extend(request, params);
        }
        else if (method === 'privatePostTradeBatchOrders') {
            // keep the request body the same
            // submit a single order in an array to the batch order endpoint
            // because it has a lower ratelimit
            extendedRequest = [this.extend(request, params)];
        }
        else {
            throw new ExchangeError(this.id + ' createOrder() this.options["createOrder"] must be either privatePostTradeBatchOrders or privatePostTradeOrder');
        }
        const response = await this[method](extendedRequest);
        const data = this.safeValue(response, 'data', []);
        const first = this.safeValue(data, 0);
        const order = this.parseOrder(first, market);
        return this.extend(order, {
            'type': type,
            'side': side,
        });
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        const stop = this.safeValue(params, 'stop');
        if (stop) {
            const order = await this.cancelOrders([id], symbol, params);
            return this.safeValue(order, 0);
        }
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
            // 'ordId': id, // either ordId or clOrdId is required
            // 'clOrdId': clientOrderId,
        };
        const clientOrderId = this.safeString2(params, 'clOrdId', 'clientOrderId');
        if (clientOrderId !== undefined) {
            request['clOrdId'] = clientOrderId;
        }
        else {
            request['ordId'] = id;
        }
        const query = this.omit(params, ['clOrdId', 'clientOrderId']);
        const response = await this.privatePostTradeCancelOrder(this.extend(request, query));
        // {"code":"0","data":[{"clOrdId":"","ordId":"317251910906576896","sCode":"0","sMsg":""}],"msg":""}
        const data = this.safeValue(response, 'data', []);
        const order = this.safeValue(data, 0);
        return this.parseOrder(order, market);
    }
    parseIds(ids) {
        /**
         * @ignore
         * @method
         * @name okx#parseIds
         * @param {[str]|str} ids order ids
         * @returns {[str]} list of order ids
         */
        if (typeof ids === 'string') {
            return ids.split(',');
        }
        else {
            return ids;
        }
    }
    async cancelOrders(ids, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#cancelOrders
         * @description cancel multiple orders
         * @param {[string]} ids order ids
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        // TODO : the original endpoint signature differs, according to that you can skip individual symbol and assign ids in batch. At this moment, `params` is not being used too.
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = [];
        const options = this.safeValue(this.options, 'cancelOrders', {});
        const defaultMethod = this.safeString(options, 'method', 'privatePostTradeCancelBatchOrders');
        let method = this.safeString(params, 'method', defaultMethod);
        const clientOrderIds = this.parseIds(this.safeValue2(params, 'clOrdId', 'clientOrderId'));
        const algoIds = this.parseIds(this.safeValue(params, 'algoId'));
        const stop = this.safeValue(params, 'stop');
        if (stop) {
            method = 'privatePostTradeCancelAlgos';
        }
        if (clientOrderIds === undefined) {
            ids = this.parseIds(ids);
            if (algoIds !== undefined) {
                for (let i = 0; i < algoIds.length; i++) {
                    request.push({
                        'algoId': algoIds[i],
                        'instId': market['id'],
                    });
                }
            }
            for (let i = 0; i < ids.length; i++) {
                if (stop) {
                    request.push({
                        'algoId': ids[i],
                        'instId': market['id'],
                    });
                }
                else {
                    request.push({
                        'ordId': ids[i],
                        'instId': market['id'],
                    });
                }
            }
        }
        else {
            for (let i = 0; i < clientOrderIds.length; i++) {
                request.push({
                    'instId': market['id'],
                    'clOrdId': clientOrderIds[i],
                });
            }
        }
        const response = await this[method](request); // * dont extend with params, otherwise ARRAY will be turned into OBJECT
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "clOrdId": "e123456789ec4dBC1123456ba123b45e",
        //                 "ordId": "405071912345641543",
        //                 "sCode": "0",
        //                 "sMsg": ""
        //             },
        //             ...
        //         ],
        //         "msg": ""
        //     }
        //
        // Algo order
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "algoId": "431375349042380800",
        //                 "sCode": "0",
        //                 "sMsg": ""
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const ordersData = this.safeValue(response, 'data', []);
        return this.parseOrders(ordersData, market, undefined, undefined, params);
    }
    parseOrderStatus(status) {
        const statuses = {
            'canceled': 'canceled',
            'live': 'open',
            'partially_filled': 'open',
            'filled': 'closed',
            'effective': 'closed',
        };
        return this.safeString(statuses, status, status);
    }
    parseOrder(order, market = undefined) {
        //
        // createOrder
        //
        //     {
        //         "clOrdId": "oktswap6",
        //         "ordId": "312269865356374016",
        //         "tag": "",
        //         "sCode": "0",
        //         "sMsg": ""
        //     }
        //
        // Spot and Swap fetchOrder, fetchOpenOrders
        //
        //     {
        //         "accFillSz": "0",
        //         "avgPx": "",
        //         "cTime": "1621910749815",
        //         "category": "normal",
        //         "ccy": "",
        //         "clOrdId": "",
        //         "fee": "0",
        //         "feeCcy": "ETH",
        //         "fillPx": "",
        //         "fillSz": "0",
        //         "fillTime": "",
        //         "instId": "ETH-USDT",
        //         "instType": "SPOT",
        //         "lever": "",
        //         "ordId": "317251910906576896",
        //         "ordType": "limit",
        //         "pnl": "0",
        //         "posSide": "net",
        //         "px": "2000",
        //         "rebate": "0",
        //         "rebateCcy": "USDT",
        //         "side": "buy",
        //         "slOrdPx": "",
        //         "slTriggerPx": "",
        //         "state": "live",
        //         "sz": "0.001",
        //         "tag": "",
        //         "tdMode": "cash",
        //         "tpOrdPx": "",
        //         "tpTriggerPx": "",
        //         "tradeId": "",
        //         "uTime": "1621910749815"
        //     }
        //
        // Algo Order fetchOpenOrders, fetchCanceledOrders, fetchClosedOrders
        //
        //     {
        //         "activePx": "",
        //         "activePxType": "",
        //         "actualPx": "",
        //         "actualSide": "buy",
        //         "actualSz": "0",
        //         "algoId": "431375349042380800",
        //         "cTime": "1649119897778",
        //         "callbackRatio": "",
        //         "callbackSpread": "",
        //         "ccy": "",
        //         "ctVal": "0.01",
        //         "instId": "BTC-USDT-SWAP",
        //         "instType": "SWAP",
        //         "last": "46538.9",
        //         "lever": "125",
        //         "moveTriggerPx": "",
        //         "notionalUsd": "467.059",
        //         "ordId": "",
        //         "ordPx": "50000",
        //         "ordType": "trigger",
        //         "posSide": "long",
        //         "pxLimit": "",
        //         "pxSpread": "",
        //         "pxVar": "",
        //         "side": "buy",
        //         "slOrdPx": "",
        //         "slTriggerPx": "",
        //         "slTriggerPxType": "",
        //         "state": "live",
        //         "sz": "1",
        //         "szLimit": "",
        //         "tag": "",
        //         "tdMode": "isolated",
        //         "tgtCcy": "",
        //         "timeInterval": "",
        //         "tpOrdPx": "",
        //         "tpTriggerPx": "",
        //         "tpTriggerPxType": "",
        //         "triggerPx": "50000",
        //         "triggerPxType": "last",
        //         "triggerTime": "",
        //         "uly": "BTC-USDT"
        //     }
        //
        const id = this.safeString2(order, 'algoId', 'ordId');
        const timestamp = this.safeInteger(order, 'cTime');
        const lastTradeTimestamp = this.safeInteger(order, 'fillTime');
        const side = this.safeString(order, 'side');
        let type = this.safeString(order, 'ordType');
        let postOnly = undefined;
        let timeInForce = undefined;
        if (type === 'post_only') {
            postOnly = true;
            type = 'limit';
        }
        else if (type === 'fok') {
            timeInForce = 'FOK';
            type = 'limit';
        }
        else if (type === 'ioc') {
            timeInForce = 'IOC';
            type = 'limit';
        }
        const marketId = this.safeString(order, 'instId');
        const symbol = this.safeSymbol(marketId, market, '-');
        const filled = this.safeString(order, 'accFillSz');
        const price = this.safeString2(order, 'px', 'ordPx');
        const average = this.safeString(order, 'avgPx');
        const status = this.parseOrderStatus(this.safeString(order, 'state'));
        const feeCostString = this.safeString(order, 'fee');
        let amount = undefined;
        let cost = undefined;
        // spot market buy: "sz" can refer either to base currency units or to quote currency units
        // see documentation: https://www.okx.com/docs-v5/en/#rest-api-trade-place-order
        const defaultTgtCcy = this.safeString(this.options, 'tgtCcy', 'base_ccy');
        const tgtCcy = this.safeString(order, 'tgtCcy', defaultTgtCcy);
        const instType = this.safeString(order, 'instType');
        if ((side === 'buy') && (type === 'market') && (instType === 'SPOT') && (tgtCcy === 'quote_ccy')) {
            // "sz" refers to the cost
            cost = this.safeString(order, 'sz');
        }
        else {
            // "sz" refers to the trade currency amount
            amount = this.safeString(order, 'sz');
        }
        let fee = undefined;
        if (feeCostString !== undefined) {
            const feeCostSigned = Precise.stringNeg(feeCostString);
            const feeCurrencyId = this.safeString(order, 'feeCcy');
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': this.parseNumber(feeCostSigned),
                'currency': feeCurrencyCode,
            };
        }
        let clientOrderId = this.safeString(order, 'clOrdId');
        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {
            clientOrderId = undefined; // fix empty clientOrderId string
        }
        const stopLossPrice = this.safeNumber2(order, 'slTriggerPx', 'slOrdPx');
        const takeProfitPrice = this.safeNumber2(order, 'tpTriggerPx', 'tpOrdPx');
        const stopPrice = this.safeNumberN(order, ['triggerPx', 'moveTriggerPx']);
        const reduceOnlyRaw = this.safeString(order, 'reduceOnly');
        let reduceOnly = false;
        if (reduceOnly !== undefined) {
            reduceOnly = (reduceOnlyRaw === 'true');
        }
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopLossPrice': stopLossPrice,
            'takeProfitPrice': takeProfitPrice,
            'stopPrice': stopPrice,
            'triggerPrice': stopPrice,
            'average': average,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': fee,
            'trades': undefined,
            'reduceOnly': reduceOnly,
        }, market);
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchOrder
         * @description fetch an order by the id
         * @param {string} id the order id
         * @param {string} symbol unified market symbol
         * @param {object} params extra and exchange specific parameters
         * @returns [an order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
            // 'clOrdId': 'abcdef12345', // optional, [a-z0-9]{1,32}
            // 'ordId': id,
            // 'instType': // spot, swap, futures, margin
        };
        const clientOrderId = this.safeString2(params, 'clOrdId', 'clientOrderId');
        const options = this.safeValue(this.options, 'fetchOrder', {});
        const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrder');
        let method = this.safeString(params, 'method', defaultMethod);
        const stop = this.safeValue(params, 'stop');
        if (stop) {
            method = 'privateGetTradeOrderAlgo';
            if (clientOrderId !== undefined) {
                request['algoClOrdId'] = clientOrderId;
            }
            else {
                request['algoId'] = id;
            }
        }
        else {
            if (clientOrderId !== undefined) {
                request['clOrdId'] = clientOrderId;
            }
            else {
                request['ordId'] = id;
            }
        }
        const query = this.omit(params, ['method', 'clOrdId', 'clientOrderId', 'stop']);
        const response = await this[method](this.extend(request, query));
        //
        // Spot and Swap
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "accFillSz": "0",
        //                 "avgPx": "",
        //                 "cTime": "1621910749815",
        //                 "category": "normal",
        //                 "ccy": "",
        //                 "clOrdId": "",
        //                 "fee": "0",
        //                 "feeCcy": "ETH",
        //                 "fillPx": "",
        //                 "fillSz": "0",
        //                 "fillTime": "",
        //                 "instId": "ETH-USDT",
        //                 "instType": "SPOT",
        //                 "lever": "",
        //                 "ordId": "317251910906576896",
        //                 "ordType": "limit",
        //                 "pnl": "0",
        //                 "posSide": "net",
        //                 "px":"20 00",
        //                 "rebate": "0",
        //                 "rebateCcy": "USDT",
        //                 "side": "buy",
        //                 "slOrdPx": "",
        //                 "slTriggerPx": "",
        //                 "state": "live",
        //                 "sz":"0. 001",
        //                 "tag": "",
        //                 "tdMode": "cash",
        //                 "tpOrdPx": "",
        //                 "tpTriggerPx": "",
        //                 "tradeId": "",
        //                 "uTime": "1621910749815"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        // Algo order
        //     {
        //         "code":"0",
        //         "msg":"",
        //         "data":[
        //             {
        //                 "instType":"FUTURES",
        //                 "instId":"BTC-USD-200329",
        //                 "ordId":"123445",
        //                 "ccy":"BTC",
        //                 "clOrdId":"",
        //                 "algoId":"1234",
        //                 "sz":"999",
        //                 "closeFraction":"",
        //                 "ordType":"oco",
        //                 "side":"buy",
        //                 "posSide":"long",
        //                 "tdMode":"cross",
        //                 "tgtCcy": "",
        //                 "state":"effective",
        //                 "lever":"20",
        //                 "tpTriggerPx":"",
        //                 "tpTriggerPxType":"",
        //                 "tpOrdPx":"",
        //                 "slTriggerPx":"",
        //                 "slTriggerPxType":"",
        //                 "triggerPx":"99",
        //                 "triggerPxType":"last",
        //                 "ordPx":"12",
        //                 "actualSz":"",
        //                 "actualPx":"",
        //                 "actualSide":"",
        //                 "pxVar":"",
        //                 "pxSpread":"",
        //                 "pxLimit":"",
        //                 "szLimit":"",
        //                 "tag": "adadadadad",
        //                 "timeInterval":"",
        //                 "callbackRatio":"",
        //                 "callbackSpread":"",
        //                 "activePx":"",
        //                 "moveTriggerPx":"",
        //                 "reduceOnly": "false",
        //                 "triggerTime":"1597026383085",
        //                 "last": "16012",
        //                 "failCode": "",
        //                 "algoClOrdId": "",
        //                 "cTime":"1597026383000"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const order = this.safeValue(data, 0);
        return this.parseOrder(order, market);
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchOpenOrders
         * @description Fetch orders that are still open
         * @description fetch all unfilled currently open orders
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch open orders for
         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {int} params.till Timestamp in ms of the latest time to retrieve orders for
         * @param {bool} params.stop True if fetching trigger or conditional orders
         * @param {string} params.ordType "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"
         * @param {string|undefined} params.algoId Algo ID "'433845797218942976'"
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
        // 'uly': currency['id'],
        // 'instId': market['id'],
        // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated, stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
        // 'state': 'live', // live, partially_filled
        // 'after': orderId,
        // 'before': orderId,
        // 'limit': limit, // default 100, max 100
        };
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['instId'] = market['id'];
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        const options = this.safeValue(this.options, 'fetchOpenOrders', {});
        const algoOrderTypes = this.safeValue(this.options, 'algoOrderTypes', {});
        const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrdersPending');
        let method = this.safeString(params, 'method', defaultMethod);
        const ordType = this.safeString(params, 'ordType');
        const stop = this.safeValue(params, 'stop');
        if (stop || (ordType in algoOrderTypes)) {
            method = 'privateGetTradeOrdersAlgoPending';
            if (stop) {
                if (ordType === undefined) {
                    throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires an "ordType" string parameter, "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"');
                }
            }
        }
        const query = this.omit(params, ['method', 'stop']);
        const response = await this[method](this.extend(request, query));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "accFillSz": "0",
        //                 "avgPx": "",
        //                 "cTime": "1621910749815",
        //                 "category": "normal",
        //                 "ccy": "",
        //                 "clOrdId": "",
        //                 "fee": "0",
        //                 "feeCcy": "ETH",
        //                 "fillPx": "",
        //                 "fillSz": "0",
        //                 "fillTime": "",
        //                 "instId": "ETH-USDT",
        //                 "instType": "SPOT",
        //                 "lever": "",
        //                 "ordId": "317251910906576896",
        //                 "ordType": "limit",
        //                 "pnl": "0",
        //                 "posSide": "net",
        //                 "px":"20 00",
        //                 "rebate": "0",
        //                 "rebateCcy": "USDT",
        //                 "side": "buy",
        //                 "slOrdPx": "",
        //                 "slTriggerPx": "",
        //                 "state": "live",
        //                 "sz":"0. 001",
        //                 "tag": "",
        //                 "tdMode": "cash",
        //                 "tpOrdPx": "",
        //                 "tpTriggerPx": "",
        //                 "tradeId": "",
        //                 "uTime": "1621910749815"
        //             }
        //         ],
        //         "msg":""
        //     }
        //
        // Algo order
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "activePx": "",
        //                 "activePxType": "",
        //                 "actualPx": "",
        //                 "actualSide": "buy",
        //                 "actualSz": "0",
        //                 "algoId": "431375349042380800",
        //                 "cTime": "1649119897778",
        //                 "callbackRatio": "",
        //                 "callbackSpread": "",
        //                 "ccy": "",
        //                 "ctVal": "0.01",
        //                 "instId": "BTC-USDT-SWAP",
        //                 "instType": "SWAP",
        //                 "last": "46538.9",
        //                 "lever": "125",
        //                 "moveTriggerPx": "",
        //                 "notionalUsd": "467.059",
        //                 "ordId": "",
        //                 "ordPx": "50000",
        //                 "ordType": "trigger",
        //                 "posSide": "long",
        //                 "pxLimit": "",
        //                 "pxSpread": "",
        //                 "pxVar": "",
        //                 "side": "buy",
        //                 "slOrdPx": "",
        //                 "slTriggerPx": "",
        //                 "slTriggerPxType": "",
        //                 "state": "live",
        //                 "sz": "1",
        //                 "szLimit": "",
        //                 "tag": "",
        //                 "tdMode": "isolated",
        //                 "tgtCcy": "",
        //                 "timeInterval": "",
        //                 "tpOrdPx": "",
        //                 "tpTriggerPx": "",
        //                 "tpTriggerPxType": "",
        //                 "triggerPx": "50000",
        //                 "triggerPxType": "last",
        //                 "triggerTime": "",
        //                 "uly": "BTC-USDT"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchCanceledOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchCanceledOrders
         * @description fetches information on multiple canceled orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
         * @param {int|undefined} limit max number of orders to return, default is undefined
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {bool} params.stop True if fetching trigger or conditional orders
         * @param {string} params.ordType "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"
         * @param {string|undefined} params.algoId Algo ID "'433845797218942976'"
         * @param {int|undefined} params.until timestamp in ms to fetch orders for
         * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'instType': type.toUpperCase (), // SPOT, MARGIN, SWAP, FUTURES, OPTION
        // 'uly': currency['id'],
        // 'instId': market['id'],
        // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
        // 'state': 'canceled', // filled, canceled
        // 'after': orderId,
        // 'before': orderId,
        // 'limit': limit, // default 100, max 100
        // 'algoId': "'433845797218942976'", // Algo order
        };
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['instId'] = market['id'];
        }
        let type = undefined;
        let query = undefined;
        [type, query] = this.handleMarketTypeAndParams('fetchCanceledOrders', market, params);
        request['instType'] = this.convertToInstrumentType(type);
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        request['state'] = 'canceled';
        const options = this.safeValue(this.options, 'fetchCanceledOrders', {});
        const algoOrderTypes = this.safeValue(this.options, 'algoOrderTypes', {});
        const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrdersHistory');
        let method = this.safeString(params, 'method', defaultMethod);
        const ordType = this.safeString(params, 'ordType');
        const stop = this.safeValue(params, 'stop');
        if (stop || (ordType in algoOrderTypes)) {
            method = 'privateGetTradeOrdersAlgoHistory';
            const algoId = this.safeString(params, 'algoId');
            if (algoId !== undefined) {
                request['algoId'] = algoId;
                params = this.omit(params, 'algoId');
            }
            if (stop) {
                if (ordType === undefined) {
                    throw new ArgumentsRequired(this.id + ' fetchCanceledOrders() requires an "ordType" string parameter, "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"');
                }
                request['ordType'] = ordType;
            }
        }
        else {
            if (since !== undefined) {
                request['begin'] = since;
            }
            const until = this.safeInteger2(query, 'till', 'until');
            if (until !== undefined) {
                request['end'] = until;
                query = this.omit(query, ['until', 'till']);
            }
        }
        const send = this.omit(query, ['method', 'stop', 'ordType']);
        const response = await this[method](this.extend(request, send));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "accFillSz": "0",
        //                 "avgPx": "",
        //                 "cTime": "1644037822494",
        //                 "category": "normal",
        //                 "ccy": "",
        //                 "clOrdId": "",
        //                 "fee": "0",
        //                 "feeCcy": "BTC",
        //                 "fillPx": "",
        //                 "fillSz": "0",
        //                 "fillTime": "",
        //                 "instId": "BTC-USDT",
        //                 "instType": "SPOT",
        //                 "lever": "",
        //                 "ordId": "410059580352409602",
        //                 "ordType": "limit",
        //                 "pnl": "0",
        //                 "posSide": "net",
        //                 "px": "30000",
        //                 "rebate": "0",
        //                 "rebateCcy": "USDT",
        //                 "side": "buy",
        //                 "slOrdPx": "",
        //                 "slTriggerPx": "",
        //                 "slTriggerPxType": "",
        //                 "source": "",
        //                 "state": "canceled",
        //                 "sz": "0.0005452",
        //                 "tag": "",
        //                 "tdMode": "cash",
        //                 "tgtCcy": "",
        //                 "tpOrdPx": "",
        //                 "tpTriggerPx": "",
        //                 "tpTriggerPxType": "",
        //                 "tradeId": "",
        //                 "uTime": "1644038165667"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        // Algo order
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "activePx": "",
        //                 "activePxType": "",
        //                 "actualPx": "",
        //                 "actualSide": "buy",
        //                 "actualSz": "0",
        //                 "algoId": "433845797218942976",
        //                 "cTime": "1649708898523",
        //                 "callbackRatio": "",
        //                 "callbackSpread": "",
        //                 "ccy": "",
        //                 "ctVal": "0.01",
        //                 "instId": "BTC-USDT-SWAP",
        //                 "instType": "SWAP",
        //                 "last": "39950.4",
        //                 "lever": "125",
        //                 "moveTriggerPx": "",
        //                 "notionalUsd": "1592.1760000000002",
        //                 "ordId": "",
        //                 "ordPx": "29000",
        //                 "ordType": "trigger",
        //                 "posSide": "long",
        //                 "pxLimit": "",
        //                 "pxSpread": "",
        //                 "pxVar": "",
        //                 "side": "buy",
        //                 "slOrdPx": "",
        //                 "slTriggerPx": "",
        //                 "slTriggerPxType": "",
        //                 "state": "canceled",
        //                 "sz": "4",
        //                 "szLimit": "",
        //                 "tag": "",
        //                 "tdMode": "isolated",
        //                 "tgtCcy": "",
        //                 "timeInterval": "",
        //                 "tpOrdPx": "",
        //                 "tpTriggerPx": "",
        //                 "tpTriggerPxType": "",
        //                 "triggerPx": "30000",
        //                 "triggerPxType": "last",
        //                 "triggerTime": "",
        //                 "uly": "BTC-USDT"
        //             },
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {bool} params.stop True if fetching trigger or conditional orders
         * @param {string} params.ordType "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"
         * @param {string|undefined} params.algoId Algo ID "'433845797218942976'"
         * @param {int|undefined} params.until timestamp in ms to fetch orders for
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'instType': type.toUpperCase (), // SPOT, MARGIN, SWAP, FUTURES, OPTION
        // 'uly': currency['id'],
        // 'instId': market['id'],
        // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
        // 'state': 'filled', // filled, effective
        // 'after': orderId,
        // 'before': orderId,
        // 'limit': limit, // default 100, max 100
        // 'algoId': "'433845797218942976'", // Algo order
        };
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['instId'] = market['id'];
        }
        let type = undefined;
        let query = undefined;
        [type, query] = this.handleMarketTypeAndParams('fetchClosedOrders', market, params);
        request['instType'] = this.convertToInstrumentType(type);
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        const options = this.safeValue(this.options, 'fetchClosedOrders', {});
        const algoOrderTypes = this.safeValue(this.options, 'algoOrderTypes', {});
        const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrdersHistory');
        let method = this.safeString(params, 'method', defaultMethod);
        const ordType = this.safeString(params, 'ordType');
        const stop = this.safeValue(params, 'stop');
        if (stop || (ordType in algoOrderTypes)) {
            method = 'privateGetTradeOrdersAlgoHistory';
            if (stop) {
                if (ordType === undefined) {
                    throw new ArgumentsRequired(this.id + ' fetchClosedOrders() requires an "ordType" string parameter, "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"');
                }
            }
            request['state'] = 'effective';
        }
        else {
            if (since !== undefined) {
                request['begin'] = since;
            }
            const until = this.safeInteger2(query, 'till', 'until');
            if (until !== undefined) {
                request['end'] = until;
                query = this.omit(query, ['until', 'till']);
            }
            request['state'] = 'filled';
        }
        const send = this.omit(query, ['method', 'stop']);
        const response = await this[method](this.extend(request, send));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "accFillSz": "0",
        //                 "avgPx": "",
        //                 "cTime": "1621910749815",
        //                 "category": "normal",
        //                 "ccy": "",
        //                 "clOrdId": "",
        //                 "fee": "0",
        //                 "feeCcy": "ETH",
        //                 "fillPx": "",
        //                 "fillSz": "0",
        //                 "fillTime": "",
        //                 "instId": "ETH-USDT",
        //                 "instType": "SPOT",
        //                 "lever": "",
        //                 "ordId": "317251910906576896",
        //                 "ordType": "limit",
        //                 "pnl": "0",
        //                 "posSide": "net",
        //                 "px": "2000",
        //                 "rebate": "0",
        //                 "rebateCcy": "USDT",
        //                 "side": "buy",
        //                 "slOrdPx": "",
        //                 "slTriggerPx": "",
        //                 "state": "live",
        //                 "sz": "0.001",
        //                 "tag": "",
        //                 "tdMode": "cash",
        //                 "tpOrdPx": "",
        //                 "tpTriggerPx": "",
        //                 "tradeId": "",
        //                 "uTime": "1621910749815"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        // Algo order
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "activePx": "",
        //                 "activePxType": "",
        //                 "actualPx": "",
        //                 "actualSide": "buy",
        //                 "actualSz": "0",
        //                 "algoId": "433845797218942976",
        //                 "cTime": "1649708898523",
        //                 "callbackRatio": "",
        //                 "callbackSpread": "",
        //                 "ccy": "",
        //                 "ctVal": "0.01",
        //                 "instId": "BTC-USDT-SWAP",
        //                 "instType": "SWAP",
        //                 "last": "39950.4",
        //                 "lever": "125",
        //                 "moveTriggerPx": "",
        //                 "notionalUsd": "1592.1760000000002",
        //                 "ordId": "",
        //                 "ordPx": "29000",
        //                 "ordType": "trigger",
        //                 "posSide": "long",
        //                 "pxLimit": "",
        //                 "pxSpread": "",
        //                 "pxVar": "",
        //                 "side": "buy",
        //                 "slOrdPx": "",
        //                 "slTriggerPx": "",
        //                 "slTriggerPxType": "",
        //                 "state": "effective",
        //                 "sz": "4",
        //                 "szLimit": "",
        //                 "tag": "",
        //                 "tdMode": "isolated",
        //                 "tgtCcy": "",
        //                 "timeInterval": "",
        //                 "tpOrdPx": "",
        //                 "tpTriggerPx": "",
        //                 "tpTriggerPxType": "",
        //                 "triggerPx": "30000",
        //                 "triggerPxType": "last",
        //                 "triggerTime": "",
        //                 "uly": "BTC-USDT"
        //             },
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseOrders(data, market, since, limit);
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
        // 'uly': currency['id'],
        // 'instId': market['id'],
        // 'ordId': orderId,
        // 'after': billId,
        // 'before': billId,
        // 'limit': limit, // default 100, max 100
        };
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['instId'] = market['id'];
        }
        const [type, query] = this.handleMarketTypeAndParams('fetchMyTrades', market, params);
        request['instType'] = this.convertToInstrumentType(type);
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        const response = await this.privateGetTradeFillsHistory(this.extend(request, query));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "side": "buy",
        //                 "fillSz": "0.007533",
        //                 "fillPx": "2654.98",
        //                 "fee": "-0.000007533",
        //                 "ordId": "317321390244397056",
        //                 "instType": "SPOT",
        //                 "instId": "ETH-USDT",
        //                 "clOrdId": "",
        //                 "posSide": "net",
        //                 "billId": "317321390265368576",
        //                 "tag": "0",
        //                 "execType": "T",
        //                 "tradeId": "107601752",
        //                 "feeCcy": "ETH",
        //                 "ts": "1621927314985"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseTrades(data, market, since, limit, query);
    }
    async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchOrderTrades
         * @description fetch all the trades made from a single order
         * @param {string} id order id
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        const request = {
            // 'instrument_id': market['id'],
            'ordId': id,
            // 'after': '1', // return the page after the specified page number
            // 'before': '1', // return the page before the specified page number
            // 'limit': limit, // optional, number of results per request, default = maximum = 100
        };
        return await this.fetchMyTrades(symbol, since, limit, this.extend(request, params));
    }
    async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchLedger
         * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-bills-details-last-7-days
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-bills-details-last-3-months
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-asset-bills-details
         * @param {string|undefined} code unified currency code, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
         * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string|undefined} params.marginMode 'cross' or 'isolated'
         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
         */
        await this.loadMarkets();
        const options = this.safeValue(this.options, 'fetchLedger', {});
        let method = this.safeString(options, 'method');
        method = this.safeString(params, 'method', method);
        params = this.omit(params, 'method');
        const request = {
        // 'instType': undefined, // 'SPOT', 'MARGIN', 'SWAP', 'FUTURES", 'OPTION'
        // 'ccy': undefined, // currency['id'],
        // 'mgnMode': undefined, // 'isolated', 'cross'
        // 'ctType': undefined, // 'linear', 'inverse', only applicable to FUTURES/SWAP
        // 'type': undefined,
        //     1 Transfer,
        //     2 Trade,
        //     3 Delivery,
        //     4 Auto token conversion,
        //     5 Liquidation,
        //     6 Margin transfer,
        //     7 Interest deduction,
        //     8 Funding rate,
        //     9 ADL,
        //     10 Clawback,
        //     11 System token conversion
        // 'subType': undefined,
        //     1 Buy
        //     2 Sell
        //     3 Open long
        //     4 Open short
        //     5 Close long
        //     6 Close short
        //     9 Interest deduction
        //     11 Transfer in
        //     12 Transfer out
        //     160 Manual margin increase
        //     161 Manual margin decrease
        //     162 Auto margin increase
        //     110 Auto buy
        //     111 Auto sell
        //     118 System token conversion transfer in
        //     119 System token conversion transfer out
        //     100 Partial liquidation close long
        //     101 Partial liquidation close short
        //     102 Partial liquidation buy
        //     103 Partial liquidation sell
        //     104 Liquidation long
        //     105 Liquidation short
        //     106 Liquidation buy
        //     107 Liquidation sell
        //     110 Liquidation transfer in
        //     111 Liquidation transfer out
        //     125 ADL close long
        //     126 ADL close short
        //     127 ADL buy
        //     128 ADL sell
        //     170 Exercised
        //     171 Counterparty exercised
        //     172 Expired OTM
        //     112 Delivery long
        //     113 Delivery short
        //     117 Delivery/Exercise clawback
        //     173 Funding fee expense
        //     174 Funding fee income
        //
        // 'after': 'id', // return records earlier than the requested bill id
        // 'before': 'id', // return records newer than the requested bill id
        // 'limit': 100, // default 100, max 100
        };
        let marginMode = undefined;
        [marginMode, params] = this.handleMarginModeAndParams('fetchLedger', params);
        if (marginMode === undefined) {
            marginMode = this.safeString(params, 'mgnMode');
        }
        if (method !== 'privateGetAssetBills') {
            if (marginMode !== undefined) {
                request['mgnMode'] = marginMode;
            }
        }
        const [type, query] = this.handleMarketTypeAndParams('fetchLedger', undefined, params);
        if (type !== undefined) {
            request['instType'] = this.convertToInstrumentType(type);
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['ccy'] = currency['id'];
        }
        const response = await this[method](this.extend(request, query));
        //
        // privateGetAccountBills, privateGetAccountBillsArchive
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "bal": "0.0000819307998198",
        //                 "balChg": "-664.2679586599999802",
        //                 "billId": "310394313544966151",
        //                 "ccy": "USDT",
        //                 "fee": "0",
        //                 "from": "",
        //                 "instId": "LTC-USDT",
        //                 "instType": "SPOT",
        //                 "mgnMode": "cross",
        //                 "notes": "",
        //                 "ordId": "310394313519800320",
        //                 "pnl": "0",
        //                 "posBal": "0",
        //                 "posBalChg": "0",
        //                 "subType": "2",
        //                 "sz": "664.26795866",
        //                 "to": "",
        //                 "ts": "1620275771196",
        //                 "type": "2"
        //             }
        //         ]
        //     }
        //
        // privateGetAssetBills
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "billId": "12344",
        //                 "ccy": "BTC",
        //                 "balChg": "2",
        //                 "bal": "12",
        //                 "type": "1",
        //                 "ts": "1597026383085"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseLedger(data, currency, since, limit);
    }
    parseLedgerEntryType(type) {
        const types = {
            '1': 'transfer',
            '2': 'trade',
            '3': 'trade',
            '4': 'rebate',
            '5': 'trade',
            '6': 'transfer',
            '7': 'trade',
            '8': 'fee',
            '9': 'trade',
            '10': 'trade',
            '11': 'trade', // system token conversion
        };
        return this.safeString(types, type, type);
    }
    parseLedgerEntry(item, currency = undefined) {
        //
        // privateGetAccountBills, privateGetAccountBillsArchive
        //
        //     {
        //         "bal": "0.0000819307998198",
        //         "balChg": "-664.2679586599999802",
        //         "billId": "310394313544966151",
        //         "ccy": "USDT",
        //         "fee": "0",
        //         "from": "",
        //         "instId": "LTC-USDT",
        //         "instType": "SPOT",
        //         "mgnMode": "cross",
        //         "notes": "",
        //         "ordId": "310394313519800320",
        //         "pnl": "0",
        //         "posBal": "0",
        //         "posBalChg": "0",
        //         "subType": "2",
        //         "sz": "664.26795866",
        //         "to": "",
        //         "ts": "1620275771196",
        //         "type": "2"
        //     }
        //
        // privateGetAssetBills
        //
        //     {
        //         "billId": "12344",
        //         "ccy": "BTC",
        //         "balChg": "2",
        //         "bal": "12",
        //         "type": "1",
        //         "ts": "1597026383085"
        //     }
        //
        const id = this.safeString(item, 'billId');
        const account = undefined;
        const referenceId = this.safeString(item, 'ordId');
        const referenceAccount = undefined;
        const type = this.parseLedgerEntryType(this.safeString(item, 'type'));
        const code = this.safeCurrencyCode(this.safeString(item, 'ccy'), currency);
        const amountString = this.safeString(item, 'balChg');
        const amount = this.parseNumber(amountString);
        const timestamp = this.safeInteger(item, 'ts');
        const feeCostString = this.safeString(item, 'fee');
        let fee = undefined;
        if (feeCostString !== undefined) {
            fee = {
                'cost': this.parseNumber(Precise.stringNeg(feeCostString)),
                'currency': code,
            };
        }
        const before = undefined;
        const afterString = this.safeString(item, 'bal');
        const after = this.parseNumber(afterString);
        const status = 'ok';
        const marketId = this.safeString(item, 'instId');
        const symbol = this.safeSymbol(marketId, undefined, '-');
        return {
            'id': id,
            'info': item,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'account': account,
            'referenceId': referenceId,
            'referenceAccount': referenceAccount,
            'type': type,
            'currency': code,
            'symbol': symbol,
            'amount': amount,
            'before': before,
            'after': after,
            'status': status,
            'fee': fee,
        };
    }
    parseDepositAddress(depositAddress, currency = undefined) {
        //
        //     {
        //         "addr": "okbtothemoon",
        //         "memo": "971668", // may be missing
        //         "tag":"52055", // may be missing
        //         "pmtId": "", // may be missing
        //         "ccy": "BTC",
        //         "to": "6", // 1 SPOT, 3 FUTURES, 6 FUNDING, 9 SWAP, 12 OPTION, 18 Unified account
        //         "selected": true
        //     }
        //
        //     {
        //         "ccy":"usdt-erc20",
        //         "to":"6",
        //         "addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa",
        //         "selected":true
        //     }
        //
        //     {
        //        "chain": "ETH-OKExChain",
        //        "ctAddr": "72315c",
        //        "ccy": "ETH",
        //        "to": "6",
        //        "addr": "0x1c9f2244d1ccaa060bd536827c18925db10db102",
        //        "selected": true
        //     }
        //
        const address = this.safeString(depositAddress, 'addr');
        let tag = this.safeString2(depositAddress, 'tag', 'pmtId');
        tag = this.safeString(depositAddress, 'memo', tag);
        const currencyId = this.safeString(depositAddress, 'ccy');
        currency = this.safeCurrency(currencyId, currency);
        const code = currency['code'];
        const chain = this.safeString(depositAddress, 'chain');
        const networks = this.safeValue(currency, 'networks', {});
        const networksById = this.indexBy(networks, 'id');
        let networkData = this.safeValue(networksById, chain);
        // inconsistent naming responses from exchange
        // with respect to network naming provided in currency info vs address chain-names and ids
        //
        // response from address endpoint:
        //      {
        //          "chain": "USDT-Polygon",
        //          "ctAddr": "",
        //          "ccy": "USDT",
        //          "to":"6" ,
        //          "addr": "0x1903441e386cc49d937f6302955b5feb4286dcfa",
        //          "selected": true
        //      }
        // network information from currency['networks'] field:
        // Polygon: {
        //        info: {
        //            canDep: false,
        //            canInternal: false,
        //            canWd: false,
        //            ccy: 'USDT',
        //            chain: 'USDT-Polygon-Bridge',
        //            mainNet: false,
        //            maxFee: '26.879528',
        //            minFee: '13.439764',
        //            minWd: '0.001',
        //            name: ''
        //        },
        //        id: 'USDT-Polygon-Bridge',
        //        network: 'Polygon',
        //        active: false,
        //        deposit: false,
        //        withdraw: false,
        //        fee: 13.439764,
        //        precision: undefined,
        //        limits: {
        //            withdraw: {
        //                min: 0.001,
        //                max: undefined
        //            }
        //        }
        //     },
        //
        if (chain === 'USDT-Polygon') {
            networkData = this.safeValue(networksById, 'USDT-Polygon-Bridge');
        }
        const network = this.safeString(networkData, 'network');
        this.checkAddress(address);
        return {
            'currency': code,
            'address': address,
            'tag': tag,
            'network': network,
            'info': depositAddress,
        };
    }
    async fetchDepositAddressesByNetwork(code, params = {}) {
        /**
         * @method
         * @name okx#fetchDepositAddressesByNetwork
         * @description fetch a dictionary of addresses for a currency, indexed by network
         * @param {string} code unified currency code of the currency for the deposit address
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a dictionary of [address structures]{@link https://docs.ccxt.com/#/?id=address-structure} indexed by the network
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'ccy': currency['id'],
        };
        const response = await this.privateGetAssetDepositAddress(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "addr": "okbtothemoon",
        //                 "memo": "971668", // may be missing
        //                 "tag":"52055", // may be missing
        //                 "pmtId": "", // may be missing
        //                 "ccy": "BTC",
        //                 "to": "6", // 1 SPOT, 3 FUTURES, 6 FUNDING, 9 SWAP, 12 OPTION, 18 Unified account
        //                 "selected": true
        //             },
        //             // {"ccy":"usdt-erc20","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true},
        //             // {"ccy":"usdt-trc20","to":"6","addr":"TRrd5SiSZrfQVRKm4e9SRSbn2LNTYqCjqx","selected":true},
        //             // {"ccy":"usdt_okexchain","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true},
        //             // {"ccy":"usdt_kip20","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true},
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const filtered = this.filterBy(data, 'selected', true);
        const parsed = this.parseDepositAddresses(filtered, [currency['code']], false);
        return this.indexBy(parsed, 'network');
    }
    async fetchDepositAddress(code, params = {}) {
        /**
         * @method
         * @name okx#fetchDepositAddress
         * @description fetch the deposit address for a currency associated with this account
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
         */
        const rawNetwork = this.safeStringUpper(params, 'network');
        const networks = this.safeValue(this.options, 'networks', {});
        const network = this.safeString(networks, rawNetwork, rawNetwork);
        params = this.omit(params, 'network');
        const response = await this.fetchDepositAddressesByNetwork(code, params);
        let result = undefined;
        if (network === undefined) {
            result = this.safeValue(response, code);
            if (result === undefined) {
                const alias = this.safeString(networks, code, code);
                result = this.safeValue(response, alias);
                if (result === undefined) {
                    const defaultNetwork = this.safeString(this.options, 'defaultNetwork', 'ERC20');
                    result = this.safeValue(response, defaultNetwork);
                    if (result === undefined) {
                        const values = Object.values(response);
                        result = this.safeValue(values, 0);
                        if (result === undefined) {
                            throw new InvalidAddress(this.id + ' fetchDepositAddress() cannot find deposit address for ' + code);
                        }
                    }
                }
            }
            return result;
        }
        result = this.safeValue(response, network);
        if (result === undefined) {
            throw new InvalidAddress(this.id + ' fetchDepositAddress() cannot find ' + network + ' deposit address for ' + code);
        }
        return result;
    }
    async withdraw(code, amount, address, tag = undefined, params = {}) {
        /**
         * @method
         * @name okx#withdraw
         * @description make a withdrawal
         * @param {string} code unified currency code
         * @param {float} amount the amount to withdraw
         * @param {string} address the address to withdraw to
         * @param {string|undefined} tag
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        [tag, params] = this.handleWithdrawTagAndParams(tag, params);
        this.checkAddress(address);
        await this.loadMarkets();
        const currency = this.currency(code);
        if ((tag !== undefined) && (tag.length > 0)) {
            address = address + ':' + tag;
        }
        const request = {
            'ccy': currency['id'],
            'toAddr': address,
            'dest': '4',
            'amt': this.numberToString(amount),
        };
        const networks = this.safeValue(this.options, 'networks', {});
        let network = this.safeStringUpper(params, 'network'); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ETH>ERC20 alias
        if (network !== undefined) {
            request['chain'] = currency['id'] + '-' + network;
            params = this.omit(params, 'network');
        }
        let fee = this.safeString(params, 'fee');
        if (fee === undefined) {
            const currencies = await this.fetchCurrencies();
            this.currencies = this.deepExtend(this.currencies, currencies);
            const targetNetwork = this.safeValue(currency['networks'], this.networkIdToCode(network), {});
            fee = this.safeString(targetNetwork, 'fee');
            if (fee === undefined) {
                throw new ArgumentsRequired(this.id + " withdraw() requires a 'fee' string parameter, network transaction fee must be ≥ 0. Withdrawals to OKCoin or OKX are fee-free, please set '0'. Withdrawing to external digital asset address requires network transaction fee.");
            }
        }
        request['fee'] = this.numberToString(fee); // withdrawals to OKCoin or OKX are fee-free, please set 0
        if ('password' in params) {
            request['pwd'] = params['password'];
        }
        else if ('pwd' in params) {
            request['pwd'] = params['pwd'];
        }
        const query = this.omit(params, ['fee', 'password', 'pwd']);
        if (!('pwd' in request)) {
            throw new ExchangeError(this.id + ' withdraw() requires a password parameter or a pwd parameter, it must be the funding password, not the API passphrase');
        }
        const response = await this.privatePostAssetWithdrawal(this.extend(request, query));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "amt": "0.1",
        //                 "wdId": "67485",
        //                 "ccy": "BTC"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const transaction = this.safeValue(data, 0);
        return this.parseTransaction(transaction, currency);
    }
    async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchDeposits
         * @description fetch all deposits made to an account
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-deposit-history
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch deposits for
         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'ccy': currency['id'],
        // 'state': 2, // 0 waiting for confirmation, 1 deposit credited, 2 deposit successful
        // 'after': since,
        // 'before' this.milliseconds (),
        // 'limit': limit, // default 100, max 100
        };
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['ccy'] = currency['id'];
        }
        if (since !== undefined) {
            request['before'] = Math.max(since - 1, 0);
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        const response = await this.privateGetAssetDepositHistory(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "amt": "0.01044408",
        //                 "txId": "1915737_3_0_0_asset",
        //                 "ccy": "BTC",
        //                 "from": "13801825426",
        //                 "to": "",
        //                 "ts": "1597026383085",
        //                 "state": "2",
        //                 "depId": "4703879"
        //             },
        //             {
        //                 "amt": "491.6784211",
        //                 "txId": "1744594_3_184_0_asset",
        //                 "ccy": "OKB",
        //                 "from": "",
        //                 "to": "",
        //                 "ts": "1597026383085",
        //                 "state": "2",
        //                 "depId": "4703809"
        //             },
        //             {
        //                 "amt": "223.18782496",
        //                 "txId": "6d892c669225b1092c780bf0da0c6f912fc7dc8f6b8cc53b003288624c",
        //                 "ccy": "USDT",
        //                 "from": "",
        //                 "to": "39kK4XvgEuM7rX9frgyHoZkWqx4iKu1spD",
        //                 "ts": "1597026383085",
        //                 "state": "2",
        //                 "depId": "4703779"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseTransactions(data, currency, since, limit, params);
    }
    async fetchDeposit(id, code = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchDeposit
         * @description fetch data on a currency deposit via the deposit id
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-deposit-history
         * @param {string} id deposit id
         * @param {string|undefined} code filter by currency code
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        const request = {
            'depId': id,
        };
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['ccy'] = currency['id'];
        }
        const response = await this.privateGetAssetDepositHistory(this.extend(request, params));
        const data = this.safeValue(response, 'data');
        const deposit = this.safeValue(data, 0, {});
        return this.parseTransaction(deposit, currency);
    }
    async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchWithdrawals
         * @description fetch all withdrawals made from an account
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-withdrawal-history
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'ccy': currency['id'],
        // 'state': 2, // -3: pending cancel, -2 canceled, -1 failed, 0, pending, 1 sending, 2 sent, 3 awaiting email verification, 4 awaiting manual verification, 5 awaiting identity verification
        // 'after': since,
        // 'before': this.milliseconds (),
        // 'limit': limit, // default 100, max 100
        };
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['ccy'] = currency['id'];
        }
        if (since !== undefined) {
            request['before'] = Math.max(since - 1, 0);
        }
        if (limit !== undefined) {
            request['limit'] = limit; // default 100, max 100
        }
        const response = await this.privateGetAssetWithdrawalHistory(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "amt": "0.094",
        //                 "wdId": "4703879",
        //                 "fee": "0.01000000eth",
        //                 "txId": "0x62477bac6509a04512819bb1455e923a60dea5966c7caeaa0b24eb8fb0432b85",
        //                 "ccy": "ETH",
        //                 "from": "13426335357",
        //                 "to": "0xA41446125D0B5b6785f6898c9D67874D763A1519",
        //                 "ts": "1597026383085",
        //                 "state": "2"
        //             },
        //             {
        //                 "amt": "0.01",
        //                 "wdId": "4703879",
        //                 "fee": "0.00000000btc",
        //                 "txId": "",
        //                 "ccy": "BTC",
        //                 "from": "13426335357",
        //                 "to": "13426335357",
        //                 "ts": "1597026383085",
        //                 "state": "2"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseTransactions(data, currency, since, limit, params);
    }
    async fetchWithdrawal(id, code = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchWithdrawal
         * @description fetch data on a currency withdrawal via the withdrawal id
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-withdrawal-history
         * @param {string} id withdrawal id
         * @param {string|undefined} code unified currency code of the currency withdrawn, default is undefined
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        const request = {
            'wdId': id,
        };
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['ccy'] = currency['id'];
        }
        const response = await this.privateGetAssetWithdrawalHistory(this.extend(request, params));
        //
        //    {
        //        code: '0',
        //        data: [
        //            {
        //                chain: 'USDT-TRC20',
        //                clientId: '',
        //                fee: '0.8',
        //                ccy: 'USDT',
        //                amt: '54.561',
        //                txId: '00cff6ec7fa7c7d7d184bd84e82b9ff36863f07c0421188607f87dfa94e06b70',
        //                from: 'example@email.com',
        //                to: 'TEY6qjnKDyyq5jDc3DJizWLCdUySrpQ4yp',
        //                state: '2',
        //                ts: '1641376485000',
        //                wdId: '25147041'
        //            }
        //        ],
        //        msg: ''
        //    }
        //
        const data = this.safeValue(response, 'data');
        const withdrawal = this.safeValue(data, 0, {});
        return this.parseTransaction(withdrawal);
    }
    parseTransactionStatus(status) {
        //
        // deposit statuses
        //
        //     {
        //         '0': 'waiting for confirmation',
        //         '1': 'deposit credited',
        //         '2': 'deposit successful'
        //     }
        //
        // withdrawal statuses
        //
        //     {
        //        '-3': 'pending cancel',
        //        '-2': 'canceled',
        //        '-1': 'failed',
        //         '0': 'pending',
        //         '1': 'sending',
        //         '2': 'sent',
        //         '3': 'awaiting email verification',
        //         '4': 'awaiting manual verification',
        //         '5': 'awaiting identity verification'
        //     }
        //
        const statuses = {
            '-3': 'pending',
            '-2': 'canceled',
            '-1': 'failed',
            '0': 'pending',
            '1': 'pending',
            '2': 'ok',
            '3': 'pending',
            '4': 'pending',
            '5': 'pending',
        };
        return this.safeString(statuses, status, status);
    }
    parseTransaction(transaction, currency = undefined) {
        //
        // withdraw
        //
        //     {
        //         "amt": "0.1",
        //         "wdId": "67485",
        //         "ccy": "BTC"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "amt": "0.094",
        //         "wdId": "4703879",
        //         "fee": "0.01000000eth",
        //         "txId": "0x62477bac6509a04512819bb1455e923a60dea5966c7caeaa0b24eb8fb0432b85",
        //         "ccy": "ETH",
        //         "from": "13426335357",
        //         "to": "0xA41446125D0B5b6785f6898c9D67874D763A1519",
        //         'tag': string,
        //         'pmtId': string,
        //         'memo': string,
        //         "ts": "1597026383085",
        //         "state": "2"
        //     }
        //
        // fetchDeposits
        //
        //     {
        //         "amt": "0.01044408",
        //         "txId": "1915737_3_0_0_asset",
        //         "ccy": "BTC",
        //         "from": "13801825426",
        //         "to": "",
        //         "ts": "1597026383085",
        //         "state": "2",
        //         "depId": "4703879"
        //     }
        //
        let type = undefined;
        let id = undefined;
        const withdrawalId = this.safeString(transaction, 'wdId');
        const addressFrom = this.safeString(transaction, 'from');
        const addressTo = this.safeString(transaction, 'to');
        const address = addressTo;
        let tagTo = this.safeString2(transaction, 'tag', 'memo');
        tagTo = this.safeString2(transaction, 'pmtId', tagTo);
        if (withdrawalId !== undefined) {
            type = 'withdrawal';
            id = withdrawalId;
        }
        else {
            // the payment_id will appear on new deposits but appears to be removed from the response after 2 months
            id = this.safeString(transaction, 'depId');
            type = 'deposit';
        }
        const currencyId = this.safeString(transaction, 'ccy');
        const code = this.safeCurrencyCode(currencyId);
        const amount = this.safeNumber(transaction, 'amt');
        const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));
        const txid = this.safeString(transaction, 'txId');
        const timestamp = this.safeInteger(transaction, 'ts');
        let feeCost = undefined;
        if (type === 'deposit') {
            feeCost = 0;
        }
        else {
            feeCost = this.safeNumber(transaction, 'fee');
        }
        // todo parse tags
        return {
            'info': transaction,
            'id': id,
            'currency': code,
            'amount': amount,
            'network': undefined,
            'addressFrom': addressFrom,
            'addressTo': addressTo,
            'address': address,
            'tagFrom': undefined,
            'tagTo': tagTo,
            'tag': tagTo,
            'status': status,
            'type': type,
            'updated': undefined,
            'txid': txid,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'fee': {
                'currency': code,
                'cost': feeCost,
            },
        };
    }
    async fetchLeverage(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchLeverage
         * @description fetch the set leverage for a market
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string} params.marginMode 'cross' or 'isolated'
         * @returns {object} a [leverage structure]{@link https://docs.ccxt.com/#/?id=leverage-structure}
         */
        await this.loadMarkets();
        let marginMode = undefined;
        [marginMode, params] = this.handleMarginModeAndParams('fetchLeverage', params);
        if (marginMode === undefined) {
            marginMode = this.safeString(params, 'mgnMode', 'cross'); // cross as default marginMode
        }
        if ((marginMode !== 'cross') && (marginMode !== 'isolated')) {
            throw new BadRequest(this.id + ' fetchLeverage() requires a marginMode parameter that must be either cross or isolated');
        }
        const market = this.market(symbol);
        const request = {
            'instId': market['id'],
            'mgnMode': marginMode,
        };
        const response = await this.privateGetAccountLeverageInfo(this.extend(request, params));
        //
        //     {
        //        "code": "0",
        //        "data": [
        //            {
        //                "instId": "BTC-USDT-SWAP",
        //                "lever": "5.00000000",
        //                "mgnMode": "isolated",
        //                "posSide": "net"
        //            }
        //        ],
        //        "msg": ""
        //     }
        //
        return response;
    }
    async fetchPosition(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchPosition
         * @description fetch data on a single open contract trade position
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-positions
         * @param {string} symbol unified market symbol of the market the position is held in, default is undefined
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string|undefined} params.instType MARGIN, SWAP, FUTURES, OPTION
         * @returns {object} a [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const [type, query] = this.handleMarketTypeAndParams('fetchPosition', market, params);
        const request = {
            // instType String No Instrument type, MARGIN, SWAP, FUTURES, OPTION
            'instId': market['id'],
            // posId String No Single position ID or multiple position IDs (no more than 20) separated with comma
        };
        if (type !== undefined) {
            request['instType'] = this.convertToInstrumentType(type);
        }
        const response = await this.privateGetAccountPositions(this.extend(request, query));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "adl": "1",
        //                 "availPos": "1",
        //                 "avgPx": "2566.31",
        //                 "cTime": "1619507758793",
        //                 "ccy": "ETH",
        //                 "deltaBS": "",
        //                 "deltaPA": "",
        //                 "gammaBS": "",
        //                 "gammaPA": "",
        //                 "imr": "",
        //                 "instId": "ETH-USD-210430",
        //                 "instType": "FUTURES",
        //                 "interest": "0",
        //                 "last": "2566.22",
        //                 "lever": "10",
        //                 "liab": "",
        //                 "liabCcy": "",
        //                 "liqPx": "2352.8496681818233",
        //                 "margin": "0.0003896645377994",
        //                 "mgnMode": "isolated",
        //                 "mgnRatio": "11.731726509588816",
        //                 "mmr": "0.0000311811092368",
        //                 "optVal": "",
        //                 "pTime": "1619507761462",
        //                 "pos": "1",
        //                 "posCcy": "",
        //                 "posId": "307173036051017730",
        //                 "posSide": "long",
        //                 "thetaBS": "",
        //                 "thetaPA": "",
        //                 "tradeId": "109844",
        //                 "uTime": "1619507761462",
        //                 "upl": "-0.0000009932766034",
        //                 "uplRatio": "-0.0025490556801078",
        //                 "vegaBS": "",
        //                 "vegaPA": ""
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const position = this.safeValue(data, 0);
        if (position === undefined) {
            return position;
        }
        return this.parsePosition(position);
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchPositions
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-positions
         * @description fetch all open positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string|undefined} params.instType MARGIN, SWAP, FUTURES, OPTION
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        await this.loadMarkets();
        const request = {
        // 'instType': 'MARGIN', // optional string, MARGIN, SWAP, FUTURES, OPTION
        // 'instId': market['id'], // optional string, e.g. 'BTC-USD-190927-5000-C'
        // 'posId': '307173036051017730', // optional string, Single or multiple position IDs (no more than 20) separated with commas
        };
        if (symbols !== undefined) {
            const marketIds = [];
            for (let i = 0; i < symbols.length; i++) {
                const entry = symbols[i];
                const market = this.market(entry);
                marketIds.push(market['id']);
            }
            const marketIdsLength = marketIds.length;
            if (marketIdsLength > 0) {
                request['instId'] = marketIds.join(',');
            }
        }
        const fetchPositionsOptions = this.safeValue(this.options, 'fetchPositions', {});
        const method = this.safeString(fetchPositionsOptions, 'method', 'privateGetAccountPositions');
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "adl": "1",
        //                 "availPos": "1",
        //                 "avgPx": "2566.31",
        //                 "cTime": "1619507758793",
        //                 "ccy": "ETH",
        //                 "deltaBS": "",
        //                 "deltaPA": "",
        //                 "gammaBS": "",
        //                 "gammaPA": "",
        //                 "imr": "",
        //                 "instId": "ETH-USD-210430",
        //                 "instType": "FUTURES",
        //                 "interest": "0",
        //                 "last": "2566.22",
        //                 "lever": "10",
        //                 "liab": "",
        //                 "liabCcy": "",
        //                 "liqPx": "2352.8496681818233",
        //                 "margin": "0.0003896645377994",
        //                 "mgnMode": "isolated",
        //                 "mgnRatio": "11.731726509588816",
        //                 "mmr": "0.0000311811092368",
        //                 "optVal": "",
        //                 "pTime": "1619507761462",
        //                 "pos": "1",
        //                 "posCcy": "",
        //                 "posId": "307173036051017730",
        //                 "posSide": "long",
        //                 "thetaBS": "",
        //                 "thetaPA": "",
        //                 "tradeId": "109844",
        //                 "uTime": "1619507761462",
        //                 "upl": "-0.0000009932766034",
        //                 "uplRatio": "-0.0025490556801078",
        //                 "vegaBS": "",
        //                 "vegaPA": ""
        //             }
        //         ]
        //     }
        //
        const positions = this.safeValue(response, 'data', []);
        const result = [];
        for (let i = 0; i < positions.length; i++) {
            result.push(this.parsePosition(positions[i]));
        }
        return this.filterByArray(result, 'symbol', symbols, false);
    }
    parsePosition(position, market = undefined) {
        //
        //     {
        //        "adl": "3",
        //        "availPos": "1",
        //        "avgPx": "34131.1",
        //        "cTime": "1627227626502",
        //        "ccy": "USDT",
        //        "deltaBS": "",
        //        "deltaPA": "",
        //        "gammaBS": "",
        //        "gammaPA": "",
        //        "imr": "170.66093041794787",
        //        "instId": "BTC-USDT-SWAP",
        //        "instType": "SWAP",
        //        "interest": "0",
        //        "last": "34134.4",
        //        "lever": "2",
        //        "liab": "",
        //        "liabCcy": "",
        //        "liqPx": "12608.959083877446",
        //        "markPx": "4786.459271773621",
        //        "margin": "",
        //        "mgnMode": "cross",
        //        "mgnRatio": "140.49930117599155",
        //        "mmr": "1.3652874433435829",
        //        "notionalUsd": "341.5130010779638",
        //        "optVal": "",
        //        "pos": "1",
        //        "posCcy": "",
        //        "posId": "339552508062380036",
        //        "posSide": "long",
        //        "thetaBS": "",
        //        "thetaPA": "",
        //        "tradeId": "98617799",
        //        "uTime": "1627227626502",
        //        "upl": "0.0108608358957281",
        //        "uplRatio": "0.0000636418743944",
        //        "vegaBS": "",
        //        "vegaPA": ""
        //    }
        //
        const marketId = this.safeString(position, 'instId');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const pos = this.safeString(position, 'pos'); // 'pos' field: One way mode: 0 if position is not open, 1 if open | Two way (hedge) mode: -1 if short, 1 if long, 0 if position is not open
        const contractsAbs = Precise.stringAbs(pos);
        let side = this.safeString(position, 'posSide');
        const hedged = side !== 'net';
        const contracts = this.parseNumber(contractsAbs);
        if (market['margin']) {
            // margin position
            if (side === 'net') {
                const posCcy = this.safeString(position, 'posCcy');
                const parsedCurrency = this.safeCurrencyCode(posCcy);
                if (parsedCurrency !== undefined) {
                    side = (market['base'] === parsedCurrency) ? 'long' : 'short';
                }
            }
            if (side === undefined) {
                side = this.safeString(position, 'direction');
            }
        }
        else {
            if (pos !== undefined) {
                if (side === 'net') {
                    if (Precise.stringGt(pos, '0')) {
                        side = 'long';
                    }
                    else if (Precise.stringLt(pos, '0')) {
                        side = 'short';
                    }
                    else {
                        side = undefined;
                    }
                }
            }
        }
        const contractSize = this.safeNumber(market, 'contractSize');
        const contractSizeString = this.numberToString(contractSize);
        const markPriceString = this.safeString(position, 'markPx');
        let notionalString = this.safeString(position, 'notionalUsd');
        if (market['inverse']) {
            notionalString = Precise.stringDiv(Precise.stringMul(contractsAbs, contractSizeString), markPriceString);
        }
        const notional = this.parseNumber(notionalString);
        const marginMode = this.safeString(position, 'mgnMode');
        let initialMarginString = undefined;
        const entryPriceString = this.safeString(position, 'avgPx');
        const unrealizedPnlString = this.safeString(position, 'upl');
        const leverageString = this.safeString(position, 'lever');
        let initialMarginPercentage = undefined;
        let collateralString = undefined;
        if (marginMode === 'cross') {
            initialMarginString = this.safeString(position, 'imr');
            collateralString = Precise.stringAdd(initialMarginString, unrealizedPnlString);
        }
        else if (marginMode === 'isolated') {
            initialMarginPercentage = Precise.stringDiv('1', leverageString);
            collateralString = this.safeString(position, 'margin');
        }
        const maintenanceMarginString = this.safeString(position, 'mmr');
        const maintenanceMargin = this.parseNumber(maintenanceMarginString);
        const maintenanceMarginPercentageString = Precise.stringDiv(maintenanceMarginString, notionalString);
        if (initialMarginPercentage === undefined) {
            initialMarginPercentage = this.parseNumber(Precise.stringDiv(initialMarginString, notionalString, 4));
        }
        else if (initialMarginString === undefined) {
            initialMarginString = Precise.stringMul(initialMarginPercentage, notionalString);
        }
        const rounder = '0.00005'; // round to closest 0.01%
        const maintenanceMarginPercentage = this.parseNumber(Precise.stringDiv(Precise.stringAdd(maintenanceMarginPercentageString, rounder), '1', 4));
        const liquidationPrice = this.safeNumber(position, 'liqPx');
        const percentageString = this.safeString(position, 'uplRatio');
        const percentage = this.parseNumber(Precise.stringMul(percentageString, '100'));
        const timestamp = this.safeInteger(position, 'uTime');
        const marginRatio = this.parseNumber(Precise.stringDiv(maintenanceMarginString, collateralString, 4));
        return {
            'info': position,
            'id': undefined,
            'symbol': symbol,
            'notional': notional,
            'marginMode': marginMode,
            'liquidationPrice': liquidationPrice,
            'entryPrice': this.parseNumber(entryPriceString),
            'unrealizedPnl': this.parseNumber(unrealizedPnlString),
            'percentage': percentage,
            'contracts': contracts,
            'contractSize': contractSize,
            'markPrice': this.parseNumber(markPriceString),
            'side': side,
            'hedged': hedged,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'maintenanceMargin': maintenanceMargin,
            'maintenanceMarginPercentage': maintenanceMarginPercentage,
            'collateral': this.parseNumber(collateralString),
            'initialMargin': this.parseNumber(initialMarginString),
            'initialMarginPercentage': this.parseNumber(initialMarginPercentage),
            'leverage': this.parseNumber(leverageString),
            'marginRatio': marginRatio,
        };
    }
    async transfer(code, amount, fromAccount, toAccount, params = {}) {
        /**
         * @method
         * @name okx#transfer
         * @description transfer currency internally between wallets on the same account
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-funds-transfer
         * @param {string} code unified currency code
         * @param {float} amount amount to transfer
         * @param {string} fromAccount account to transfer from
         * @param {string} toAccount account to transfer to
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const accountsByType = this.safeValue(this.options, 'accountsByType', {});
        const fromId = this.safeString(accountsByType, fromAccount, fromAccount);
        const toId = this.safeString(accountsByType, toAccount, toAccount);
        const request = {
            'ccy': currency['id'],
            'amt': this.currencyToPrecision(code, amount),
            'type': '0',
            'from': fromId,
            'to': toId, // beneficiary account, 6: Funding account, 18: Trading account
            // 'subAcct': 'sub-account-name', // optional, only required when type is 1, 2 or 4
            // 'loanTrans': false, // Whether or not borrowed coins can be transferred out under Multi-currency margin and Portfolio margin. The default is false
            // 'clientId': 'client-supplied id', // A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters
            // 'omitPosRisk': false, // Ignore position risk. Default is false. Applicable to Portfolio margin
        };
        if (fromId === 'master') {
            request['type'] = '1';
            request['subAcct'] = toId;
            request['from'] = this.safeString(params, 'from', '6');
            request['to'] = this.safeString(params, 'to', '6');
        }
        else if (toId === 'master') {
            request['type'] = '2';
            request['subAcct'] = fromId;
            request['from'] = this.safeString(params, 'from', '6');
            request['to'] = this.safeString(params, 'to', '6');
        }
        const response = await this.privatePostAssetTransfer(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "msg": "",
        //         "data": [
        //             {
        //                 "transId": "754147",
        //                 "ccy": "USDT",
        //                 "from": "6",
        //                 "amt": "0.1",
        //                 "to": "18"
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const rawTransfer = this.safeValue(data, 0, {});
        return this.parseTransfer(rawTransfer, currency);
    }
    parseTransfer(transfer, currency = undefined) {
        //
        // transfer
        //
        //     {
        //         "transId": "754147",
        //         "ccy": "USDT",
        //         "from": "6",
        //         "amt": "0.1",
        //         "to": "18"
        //     }
        //
        // fetchTransfer
        //
        //     {
        //         "amt": "5",
        //         "ccy": "USDT",
        //         "from": "18",
        //         "instId": "",
        //         "state": "success",
        //         "subAcct": "",
        //         "to": "6",
        //         "toInstId": "",
        //         "transId": "464424732",
        //         "type": "0"
        //     }
        //
        const id = this.safeString(transfer, 'transId');
        const currencyId = this.safeString(transfer, 'ccy');
        const code = this.safeCurrencyCode(currencyId, currency);
        const amount = this.safeNumber(transfer, 'amt');
        const fromAccountId = this.safeString(transfer, 'from');
        const toAccountId = this.safeString(transfer, 'to');
        const accountsById = this.safeValue(this.options, 'accountsById', {});
        const fromAccount = this.safeString(accountsById, fromAccountId);
        const toAccount = this.safeString(accountsById, toAccountId);
        const timestamp = this.milliseconds();
        const status = this.safeString(transfer, 'state');
        return {
            'info': transfer,
            'id': id,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'currency': code,
            'amount': amount,
            'fromAccount': fromAccount,
            'toAccount': toAccount,
            'status': status,
        };
    }
    async fetchTransfer(id, code = undefined, params = {}) {
        await this.loadMarkets();
        const request = {
            'transId': id,
            // 'type': 0, // default is 0 transfer within account, 1 master to sub, 2 sub to master
        };
        const response = await this.privateGetAssetTransferState(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "amt": "5",
        //                 "ccy": "USDT",
        //                 "from": "18",
        //                 "instId": "",
        //                 "state": "success",
        //                 "subAcct": "",
        //                 "to": "6",
        //                 "toInstId": "",
        //                 "transId": "464424732",
        //                 "type": "0"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const transfer = this.safeValue(data, 0);
        return this.parseTransfer(transfer);
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const isArray = Array.isArray(params);
        const request = '/api/' + this.version + '/' + this.implodeParams(path, params);
        const query = this.omit(params, this.extractParams(path));
        let url = this.implodeHostname(this.urls['api']['rest']) + request;
        // const type = this.getPathAuthenticationType (path);
        if (api === 'public') {
            if (Object.keys(query).length) {
                url += '?' + this.urlencode(query);
            }
        }
        else if (api === 'private') {
            this.checkRequiredCredentials();
            const timestamp = this.iso8601(this.milliseconds());
            headers = {
                'OK-ACCESS-KEY': this.apiKey,
                'OK-ACCESS-PASSPHRASE': this.password,
                'OK-ACCESS-TIMESTAMP': timestamp,
                // 'OK-FROM': '',
                // 'OK-TO': '',
                // 'OK-LIMIT': '',
            };
            let auth = timestamp + method + request;
            if (method === 'GET') {
                if (Object.keys(query).length) {
                    const urlencodedQuery = '?' + this.urlencode(query);
                    url += urlencodedQuery;
                    auth += urlencodedQuery;
                }
            }
            else {
                if (isArray || Object.keys(query).length) {
                    body = this.json(query);
                    auth += body;
                }
                headers['Content-Type'] = 'application/json';
            }
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
            headers['OK-ACCESS-SIGN'] = signature;
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    parseFundingRate(contract, market = undefined) {
        //
        //    {
        //        "fundingRate": "0.00027815",
        //        "fundingTime": "1634256000000",
        //        "instId": "BTC-USD-SWAP",
        //        "instType": "SWAP",
        //        "nextFundingRate": "0.00017",
        //        "nextFundingTime": "1634284800000"
        //    }
        //
        // in the response above nextFundingRate is actually two funding rates from now
        //
        const nextFundingRateTimestamp = this.safeInteger(contract, 'nextFundingTime');
        const marketId = this.safeString(contract, 'instId');
        const symbol = this.safeSymbol(marketId, market);
        const nextFundingRate = this.safeNumber(contract, 'nextFundingRate');
        const fundingTime = this.safeInteger(contract, 'fundingTime');
        // https://www.okx.com/support/hc/en-us/articles/360053909272-Ⅸ-Introduction-to-perpetual-swap-funding-fee
        // > The current interest is 0.
        return {
            'info': contract,
            'symbol': symbol,
            'markPrice': undefined,
            'indexPrice': undefined,
            'interestRate': this.parseNumber('0'),
            'estimatedSettlePrice': undefined,
            'timestamp': undefined,
            'datetime': undefined,
            'fundingRate': this.safeNumber(contract, 'fundingRate'),
            'fundingTimestamp': fundingTime,
            'fundingDatetime': this.iso8601(fundingTime),
            'nextFundingRate': nextFundingRate,
            'nextFundingTimestamp': nextFundingRateTimestamp,
            'nextFundingDatetime': this.iso8601(nextFundingRateTimestamp),
            'previousFundingRate': undefined,
            'previousFundingTimestamp': undefined,
            'previousFundingDatetime': undefined,
        };
    }
    async fetchFundingRate(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchFundingRate
         * @description fetch the current funding rate
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['swap']) {
            throw new ExchangeError(this.id + ' fetchFundingRate() is only valid for swap markets');
        }
        const request = {
            'instId': market['id'],
        };
        const response = await this.publicGetPublicFundingRate(this.extend(request, params));
        //
        //    {
        //        "code": "0",
        //        "data": [
        //            {
        //                "fundingRate": "0.00027815",
        //                "fundingTime": "1634256000000",
        //                "instId": "BTC-USD-SWAP",
        //                "instType": "SWAP",
        //                "nextFundingRate": "0.00017",
        //                "nextFundingTime": "1634284800000"
        //            }
        //        ],
        //        "msg": ""
        //    }
        //
        const data = this.safeValue(response, 'data', []);
        const entry = this.safeValue(data, 0, {});
        return this.parseFundingRate(entry, market);
    }
    async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchFundingHistory
         * @description fetch the history of funding payments paid and received on this account
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch funding history for
         * @param {int|undefined} limit the maximum number of funding history structures to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
         */
        await this.loadMarkets();
        const request = {
            // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'ccy': currency['id'],
            // 'mgnMode': 'isolated', // isolated, cross
            // 'ctType': 'linear', // linear, inverse, only applicable to FUTURES/SWAP
            'type': '8',
            //
            // supported values for type
            //
            //     1 Transfer
            //     2 Trade
            //     3 Delivery
            //     4 Auto token conversion
            //     5 Liquidation
            //     6 Margin transfer
            //     7 Interest deduction
            //     8 Funding fee
            //     9 ADL
            //     10 Clawback
            //     11 System token conversion
            //     12 Strategy transfer
            //     13 ddh
            //
            // 'subType': '',
            //
            // supported values for subType
            //
            //     1 Buy
            //     2 Sell
            //     3 Open long
            //     4 Open short
            //     5 Close long
            //     6 Close short
            //     9 Interest deduction
            //     11 Transfer in
            //     12 Transfer out
            //     160 Manual margin increase
            //     161 Manual margin decrease
            //     162 Auto margin increase
            //     110 Auto buy
            //     111 Auto sell
            //     118 System token conversion transfer in
            //     119 System token conversion transfer out
            //     100 Partial liquidation close long
            //     101 Partial liquidation close short
            //     102 Partial liquidation buy
            //     103 Partial liquidation sell
            //     104 Liquidation long
            //     105 Liquidation short
            //     106 Liquidation buy
            //     107 Liquidation sell
            //     110 Liquidation transfer in
            //     111 Liquidation transfer out
            //     125 ADL close long
            //     126 ADL close short
            //     127 ADL buy
            //     128 ADL sell
            //     131 ddh buy
            //     132 ddh sell
            //     170 Exercised
            //     171 Counterparty exercised
            //     172 Expired OTM
            //     112 Delivery long
            //     113 Delivery short
            //     117 Delivery/Exercise clawback
            //     173 Funding fee expense
            //     174 Funding fee income
            //     200 System transfer in
            //     201 Manually transfer in
            //     202 System transfer out
            //     203 Manually transfer out
            //
            // 'after': 'id', // earlier than the requested bill ID
            // 'before': 'id', // newer than the requested bill ID
            // 'limit': '100', // default 100, max 100
        };
        if (limit !== undefined) {
            request['limit'] = limit.toString(); // default 100, max 100
        }
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            if (market['contract']) {
                if (market['linear']) {
                    request['ctType'] = 'linear';
                    request['ccy'] = market['quoteId'];
                }
                else {
                    request['ctType'] = 'inverse';
                    request['ccy'] = market['baseId'];
                }
            }
        }
        const [type, query] = this.handleMarketTypeAndParams('fetchFundingHistory', market, params);
        if (type === 'swap') {
            request['instType'] = this.convertToInstrumentType(type);
        }
        // AccountBillsArchive has the same cost as AccountBills but supports three months of data
        const response = await this.privateGetAccountBillsArchive(this.extend(request, query));
        //
        //    {
        //        "bal": "0.0242946200998573",
        //        "balChg": "0.0000148752712240",
        //        "billId": "377970609204146187",
        //        "ccy": "ETH",
        //        "execType": "",
        //        "fee": "0",
        //        "from": "",
        //        "instId": "ETH-USD-SWAP",
        //        "instType": "SWAP",
        //        "mgnMode": "isolated",
        //        "notes": "",
        //        "ordId": "",
        //        "pnl": "0.000014875271224",
        //        "posBal": "0",
        //        "posBalChg": "0",
        //        "subType": "174",
        //        "sz": "9",
        //        "to": "",
        //        "ts": "1636387215588",
        //        "type": "8"
        //    }
        //
        const data = this.safeValue(response, 'data', []);
        const result = [];
        for (let i = 0; i < data.length; i++) {
            const entry = data[i];
            const timestamp = this.safeInteger(entry, 'ts');
            const instId = this.safeString(entry, 'instId');
            const market = this.safeMarket(instId);
            const currencyId = this.safeString(entry, 'ccy');
            const code = this.safeCurrencyCode(currencyId);
            result.push({
                'info': entry,
                'symbol': market['symbol'],
                'code': code,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'id': this.safeString(entry, 'billId'),
                'amount': this.safeNumber(entry, 'balChg'),
            });
        }
        const sorted = this.sortBy(result, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#setLeverage
         * @description set the level of leverage for a market
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-set-leverage
         * @param {float} leverage the rate of leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string} params.marginMode 'cross' or 'isolated'
         * @param {string|undefined} params.posSide 'long' or 'short' for isolated margin long/short mode on futures and swap markets
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
        }
        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        if ((leverage < 1) || (leverage > 125)) {
            throw new BadRequest(this.id + ' setLeverage() leverage should be between 1 and 125');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        let marginMode = undefined;
        [marginMode, params] = this.handleMarginModeAndParams('setLeverage', params);
        if (marginMode === undefined) {
            marginMode = this.safeString(params, 'mgnMode', 'cross'); // cross as default marginMode
        }
        if ((marginMode !== 'cross') && (marginMode !== 'isolated')) {
            throw new BadRequest(this.id + ' setLeverage() requires a marginMode parameter that must be either cross or isolated');
        }
        const request = {
            'lever': leverage,
            'mgnMode': marginMode,
            'instId': market['id'],
        };
        const posSide = this.safeString(params, 'posSide');
        if (marginMode === 'isolated') {
            if (posSide === undefined) {
                throw new ArgumentsRequired(this.id + ' setLeverage() requires a posSide argument for isolated margin');
            }
            if (posSide !== 'long' && posSide !== 'short' && posSide !== 'net') {
                throw new BadRequest(this.id + ' setLeverage() requires the posSide argument to be either "long", "short" or "net"');
            }
        }
        const response = await this.privatePostAccountSetLeverage(this.extend(request, params));
        //
        //     {
        //       "code": "0",
        //       "data": [
        //         {
        //           "instId": "BTC-USDT-SWAP",
        //           "lever": "5",
        //           "mgnMode": "isolated",
        //           "posSide": "long"
        //         }
        //       ],
        //       "msg": ""
        //     }
        //
        return response;
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#setPositionMode
         * @description set hedged to true or false for a market
         * @param {bool} hedged set to true to use long_short_mode, false for net_mode
         * @param {string|undefined} symbol not used by okx setPositionMode
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} response from the exchange
         */
        let hedgeMode = undefined;
        if (hedged) {
            hedgeMode = 'long_short_mode';
        }
        else {
            hedgeMode = 'net_mode';
        }
        const request = {
            'posMode': hedgeMode,
        };
        const response = await this.privatePostAccountSetPositionMode(this.extend(request, params));
        //
        //    {
        //        "code": "0",
        //        "data": [
        //            {
        //                "posMode": "net_mode"
        //            }
        //        ],
        //        "msg": ""
        //    }
        //
        return response;
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#setMarginMode
         * @description set margin mode to 'cross' or 'isolated'
         * @param {string} marginMode 'cross' or 'isolated'
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} response from the exchange
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
        }
        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        marginMode = marginMode.toLowerCase();
        if ((marginMode !== 'cross') && (marginMode !== 'isolated')) {
            throw new BadRequest(this.id + ' setMarginMode() marginMode must be either cross or isolated');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const lever = this.safeInteger(params, 'lever');
        if ((lever === undefined) || (lever < 1) || (lever > 125)) {
            throw new BadRequest(this.id + ' setMarginMode() params["lever"] should be between 1 and 125');
        }
        params = this.omit(params, ['lever']);
        const request = {
            'lever': lever,
            'mgnMode': marginMode,
            'instId': market['id'],
        };
        const response = await this.privatePostAccountSetLeverage(this.extend(request, params));
        //
        //     {
        //       "code": "0",
        //       "data": [
        //         {
        //           "instId": "BTC-USDT-SWAP",
        //           "lever": "5",
        //           "mgnMode": "isolated",
        //           "posSide": "long"
        //         }
        //       ],
        //       "msg": ""
        //     }
        //
        return response;
    }
    async fetchBorrowRates(params = {}) {
        /**
         * @method
         * @name okx#fetchBorrowRates
         * @description fetch the borrow interest rates of all currencies
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a list of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
         */
        await this.loadMarkets();
        const response = await this.privateGetAccountInterestRate(params);
        //
        //    {
        //        "code": "0",
        //        "data": [
        //            {
        //                "ccy": "BTC",
        //                "interestRate": "0.00000833"
        //            }
        //            ...
        //        ],
        //    }
        //
        const timestamp = this.milliseconds();
        const data = this.safeValue(response, 'data');
        const rates = {};
        for (let i = 0; i < data.length; i++) {
            const rate = data[i];
            const code = this.safeCurrencyCode(this.safeString(rate, 'ccy'));
            rates[code] = {
                'currency': code,
                'rate': this.safeNumber(rate, 'interestRate'),
                'period': 86400000,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'info': rate,
            };
        }
        return rates;
    }
    async fetchBorrowRate(code, params = {}) {
        /**
         * @method
         * @name okx#fetchBorrowRate
         * @description fetch the rate of interest to borrow a currency for margin trading
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'ccy': currency['id'],
        };
        const response = await this.privateGetAccountInterestRate(this.extend(request, params));
        //
        //    {
        //        "code": "0",
        //        "data": [
        //             {
        //                "ccy": "USDT",
        //                "interestRate": "0.00002065"
        //             }
        //             ...
        //        ],
        //        "msg": ""
        //    }
        //
        const data = this.safeValue(response, 'data');
        const rate = this.safeValue(data, 0);
        return this.parseBorrowRate(rate);
    }
    parseBorrowRate(info, currency = undefined) {
        //
        //    {
        //        "amt": "992.10341195",
        //        "ccy": "BTC",
        //        "rate": "0.01",
        //        "ts": "1643954400000"
        //    }
        //
        const ccy = this.safeString(info, 'ccy');
        const timestamp = this.safeInteger(info, 'ts');
        return {
            'currency': this.safeCurrencyCode(ccy),
            'rate': this.safeNumber2(info, 'interestRate', 'rate'),
            'period': 86400000,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': info,
        };
    }
    parseBorrowRateHistories(response, codes, since, limit) {
        //
        //    [
        //        {
        //            "amt": "992.10341195",
        //            "ccy": "BTC",
        //            "rate": "0.01",
        //            "ts": "1643954400000"
        //        },
        //        ...
        //    ]
        //
        const borrowRateHistories = {};
        for (let i = 0; i < response.length; i++) {
            const item = response[i];
            const code = this.safeCurrencyCode(this.safeString(item, 'ccy'));
            if (codes === undefined || this.inArray(code, codes)) {
                if (!(code in borrowRateHistories)) {
                    borrowRateHistories[code] = [];
                }
                const borrowRateStructure = this.parseBorrowRate(item);
                borrowRateHistories[code].push(borrowRateStructure);
            }
        }
        const keys = Object.keys(borrowRateHistories);
        for (let i = 0; i < keys.length; i++) {
            const code = keys[i];
            borrowRateHistories[code] = this.filterByCurrencySinceLimit(borrowRateHistories[code], code, since, limit);
        }
        return borrowRateHistories;
    }
    parseBorrowRateHistory(response, code, since, limit) {
        const result = [];
        for (let i = 0; i < response.length; i++) {
            const item = response[i];
            const borrowRate = this.parseBorrowRate(item);
            result.push(borrowRate);
        }
        const sorted = this.sortBy(result, 'timestamp');
        return this.filterByCurrencySinceLimit(sorted, code, since, limit);
    }
    async fetchBorrowRateHistories(codes = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchBorrowRateHistories
         * @description retrieves a history of a multiple currencies borrow interest rate at specific time slots, returns all currencies if no symbols passed, default is undefined
         * @param {[string]|undefined} codes list of unified currency codes, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest borrowRate, default is undefined
         * @param {int|undefined} limit max number of borrow rate prices to return, default is undefined
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a dictionary of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure} indexed by the market symbol
         */
        await this.loadMarkets();
        const request = {
        // 'ccy': currency['id'],
        // 'after': this.milliseconds (), // Pagination of data to return records earlier than the requested ts,
        // 'before': since, // Pagination of data to return records newer than the requested ts,
        // 'limit': limit, // default is 100 and maximum is 100
        };
        if (since !== undefined) {
            request['before'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetAssetLendingRateHistory(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "amt": "992.10341195",
        //                 "ccy": "BTC",
        //                 "rate": "0.01",
        //                 "ts": "1643954400000"
        //             },
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseBorrowRateHistories(data, codes, since, limit);
    }
    async fetchBorrowRateHistory(code, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchBorrowRateHistory
         * @description retrieves a history of a currencies borrow interest rate at specific time slots
         * @param {string} code unified currency code
         * @param {int|undefined} since timestamp for the earliest borrow rate
         * @param {int|undefined} limit the maximum number of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure} to retrieve
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'ccy': currency['id'],
            // 'after': this.milliseconds (), // Pagination of data to return records earlier than the requested ts,
            // 'before': since, // Pagination of data to return records newer than the requested ts,
            // 'limit': limit, // default is 100 and maximum is 100
        };
        if (since !== undefined) {
            request['before'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetAssetLendingRateHistory(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "amt": "992.10341195",
        //                 "ccy": "BTC",
        //                 "rate": "0.01",
        //                 "ts": "1643954400000"
        //             },
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseBorrowRateHistory(data, code, since, limit);
    }
    async modifyMarginHelper(symbol, amount, type, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const posSide = this.safeString(params, 'posSide', 'net');
        params = this.omit(params, ['posSide']);
        const request = {
            'instId': market['id'],
            'amt': amount,
            'type': type,
            'posSide': posSide,
        };
        const response = await this.privatePostAccountPositionMarginBalance(this.extend(request, params));
        //
        //     {
        //       "code": "0",
        //       "data": [
        //         {
        //           "amt": "0.01",
        //           "instId": "ETH-USD-SWAP",
        //           "posSide": "net",
        //           "type": "reduce"
        //         }
        //       ],
        //       "msg": ""
        //     }
        //
        return this.parseMarginModification(response, market);
    }
    parseMarginModification(data, market = undefined) {
        const innerData = this.safeValue(data, 'data', []);
        const entry = this.safeValue(innerData, 0, {});
        const errorCode = this.safeString(data, 'code');
        const status = (errorCode === '0') ? 'ok' : 'failed';
        const amountRaw = this.safeNumber(entry, 'amt');
        const typeRaw = this.safeString(entry, 'type');
        const type = (typeRaw === 'reduce') ? 'reduce' : 'add';
        const marketId = this.safeString(entry, 'instId');
        const responseMarket = this.safeMarket(marketId, market);
        const code = responseMarket['inverse'] ? responseMarket['base'] : responseMarket['quote'];
        return {
            'info': data,
            'type': type,
            'amount': amountRaw,
            'code': code,
            'symbol': responseMarket['symbol'],
            'status': status,
        };
    }
    async reduceMargin(symbol, amount, params = {}) {
        /**
         * @method
         * @name okx#reduceMargin
         * @description remove margin from a position
         * @param {string} symbol unified market symbol
         * @param {float} amount the amount of margin to remove
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=reduce-margin-structure}
         */
        return await this.modifyMarginHelper(symbol, amount, 'reduce', params);
    }
    async addMargin(symbol, amount, params = {}) {
        /**
         * @method
         * @name okx#addMargin
         * @description add margin
         * @param {string} symbol unified market symbol
         * @param {float} amount amount of margin to add
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=add-margin-structure}
         */
        return await this.modifyMarginHelper(symbol, amount, 'add', params);
    }
    async fetchMarketLeverageTiers(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchMarketLeverageTiers
         * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes for a single market
         * @see https://www.okx.com/docs-v5/en/#rest-api-public-data-get-position-tiers
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {string} params.marginMode 'cross' or 'isolated'
         * @returns {object} a [leverage tiers structure]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const type = market['spot'] ? 'MARGIN' : this.convertToInstrumentType(market['type']);
        const uly = this.safeString(market['info'], 'uly');
        if (!uly) {
            if (type !== 'MARGIN') {
                throw new BadRequest(this.id + ' fetchMarketLeverageTiers() cannot fetch leverage tiers for ' + symbol);
            }
        }
        let marginMode = undefined;
        [marginMode, params] = this.handleMarginModeAndParams('fetchMarketLeverageTiers', params);
        if (marginMode === undefined) {
            marginMode = this.safeString(params, 'tdMode', 'cross'); // cross as default marginMode
        }
        const request = {
            'instType': type,
            'tdMode': marginMode,
            'uly': uly,
        };
        if (type === 'MARGIN') {
            request['instId'] = market['id'];
        }
        const response = await this.publicGetPublicPositionTiers(this.extend(request, params));
        //
        //    {
        //        "code": "0",
        //        "data": [
        //            {
        //                "baseMaxLoan": "500",
        //                "imr": "0.1",
        //                "instId": "ETH-USDT",
        //                "maxLever": "10",
        //                "maxSz": "500",
        //                "minSz": "0",
        //                "mmr": "0.03",
        //                "optMgnFactor": "0",
        //                "quoteMaxLoan": "200000",
        //                "tier": "1",
        //                "uly": ""
        //            },
        //            ...
        //        ]
        //    }
        //
        const data = this.safeValue(response, 'data');
        return this.parseMarketLeverageTiers(data, market);
    }
    parseMarketLeverageTiers(info, market = undefined) {
        /**
         * @ignore
         * @method
         * @param {object} info Exchange response for 1 market
         * @param {object} market CCXT market
         */
        //
        //    [
        //        {
        //            "baseMaxLoan": "500",
        //            "imr": "0.1",
        //            "instId": "ETH-USDT",
        //            "maxLever": "10",
        //            "maxSz": "500",
        //            "minSz": "0",
        //            "mmr": "0.03",
        //            "optMgnFactor": "0",
        //            "quoteMaxLoan": "200000",
        //            "tier": "1",
        //            "uly": ""
        //        },
        //        ...
        //    ]
        //
        const tiers = [];
        for (let i = 0; i < info.length; i++) {
            const tier = info[i];
            tiers.push({
                'tier': this.safeInteger(tier, 'tier'),
                'currency': market['quote'],
                'minNotional': this.safeNumber(tier, 'minSz'),
                'maxNotional': this.safeNumber(tier, 'maxSz'),
                'maintenanceMarginRate': this.safeNumber(tier, 'mmr'),
                'maxLeverage': this.safeNumber(tier, 'maxLever'),
                'info': tier,
            });
        }
        return tiers;
    }
    async fetchBorrowInterest(code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchBorrowInterest
         * @description fetch the interest owed by the user for borrowing currency for margin trading
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-interest-accrued-data
         * @param {string|undefined} code the unified currency code for the currency of the interest
         * @param {string|undefined} symbol the market symbol of an isolated margin market, if undefined, the interest for cross margin markets is returned
         * @param {int|undefined} since timestamp in ms of the earliest time to receive interest records for
         * @param {int|undefined} limit the number of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure} to retrieve
         * @param {object} params exchange specific parameters
         * @param {int|undefined} params.type Loan type 1 - VIP loans 2 - Market loans *Default is Market loans*
         * @param {string} params.marginMode 'cross' or 'isolated'
         * @returns {[object]} An list of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure}
         */
        await this.loadMarkets();
        let marginMode = undefined;
        [marginMode, params] = this.handleMarginModeAndParams('fetchBorrowInterest', params);
        if (marginMode === undefined) {
            marginMode = this.safeString(params, 'mgnMode', 'cross'); // cross as default marginMode
        }
        const request = {
            'mgnMode': marginMode,
        };
        let market = undefined;
        if (code !== undefined) {
            const currency = this.currency(code);
            request['ccy'] = currency['id'];
        }
        if (since !== undefined) {
            request['before'] = since - 1;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['instId'] = market['id'];
        }
        const response = await this.privateGetAccountInterestAccrued(this.extend(request, params));
        //
        //    {
        //        "code": "0",
        //        "data": [
        //            {
        //                "ccy": "USDT",
        //                "instId": "",
        //                "interest": "0.0003960833333334",
        //                "interestRate": "0.0000040833333333",
        //                "liab": "97",
        //                "mgnMode": "",
        //                "ts": "1637312400000",
        //                "type": "1"
        //            },
        //            ...
        //        ],
        //        "msg": ""
        //    }
        //
        const data = this.safeValue(response, 'data');
        const interest = this.parseBorrowInterests(data);
        return this.filterByCurrencySinceLimit(interest, code, since, limit);
    }
    parseBorrowInterest(info, market = undefined) {
        const instId = this.safeString(info, 'instId');
        if (instId !== undefined) {
            market = this.safeMarket(instId, market);
        }
        const timestamp = this.safeInteger(info, 'ts');
        return {
            'symbol': this.safeString(market, 'symbol'),
            'marginMode': this.safeString(info, 'mgnMode'),
            'currency': this.safeCurrencyCode(this.safeString(info, 'ccy')),
            'interest': this.safeNumber(info, 'interest'),
            'interestRate': this.safeNumber(info, 'interestRate'),
            'amountBorrowed': this.safeNumber(info, 'liab'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': info,
        };
    }
    async borrowMargin(code, amount, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#borrowMargin
         * @description create a loan to borrow margin
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-vip-loans-borrow-and-repay
         * @param {string} code unified currency code of the currency to borrow
         * @param {float} amount the amount to borrow
         * @param {string|undefined} symbol not used by okx.borrowMargin ()
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'ccy': currency['id'],
            'amt': this.currencyToPrecision(code, amount),
            'side': 'borrow',
        };
        const response = await this.privatePostAccountBorrowRepay(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "amt": "102",
        //                 "availLoan": "97",
        //                 "ccy": "USDT",
        //                 "loanQuota": "6000000",
        //                 "posLoan": "0",
        //                 "side": "borrow",
        //                 "usedLoan": "97"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const loan = this.safeValue(data, 0);
        const transaction = this.parseMarginLoan(loan, currency);
        return this.extend(transaction, {
            'symbol': symbol,
        });
    }
    async repayMargin(code, amount, symbol = undefined, params = {}) {
        /**
         * @method
         * @name okx#repayMargin
         * @description repay borrowed margin and interest
         * @see https://www.okx.com/docs-v5/en/#rest-api-account-vip-loans-borrow-and-repay
         * @param {string} code unified currency code of the currency to repay
         * @param {float} amount the amount to repay
         * @param {string|undefined} symbol not used by okx.repayMargin ()
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'ccy': currency['id'],
            'amt': this.currencyToPrecision(code, amount),
            'side': 'repay',
        };
        const response = await this.privatePostAccountBorrowRepay(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "amt": "102",
        //                 "availLoan": "97",
        //                 "ccy": "USDT",
        //                 "loanQuota": "6000000",
        //                 "posLoan": "0",
        //                 "side": "repay",
        //                 "usedLoan": "97"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        const loan = this.safeValue(data, 0);
        const transaction = this.parseMarginLoan(loan, currency);
        return this.extend(transaction, {
            'symbol': symbol,
        });
    }
    parseMarginLoan(info, currency = undefined) {
        //
        //     {
        //         "amt": "102",
        //         "availLoan": "97",
        //         "ccy": "USDT",
        //         "loanQuota": "6000000",
        //         "posLoan": "0",
        //         "side": "repay",
        //         "usedLoan": "97"
        //     }
        //
        const currencyId = this.safeString(info, 'ccy');
        return {
            'id': undefined,
            'currency': this.safeCurrencyCode(currencyId, currency),
            'amount': this.safeNumber(info, 'amt'),
            'symbol': undefined,
            'timestamp': undefined,
            'datetime': undefined,
            'info': info,
        };
    }
    async fetchOpenInterest(symbol, params = {}) {
        /**
         * @method
         * @name okx#fetchOpenInterest
         * @description Retrieves the open interest of a currency
         * @see https://www.okx.com/docs-v5/en/#rest-api-public-data-get-open-interest
         * @param {string} symbol Unified CCXT market symbol
         * @param {object} params exchange specific parameters
         * @returns {object} an open interest structure{@link https://docs.ccxt.com/#/?id=interest-history-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['contract']) {
            throw new BadRequest(this.id + ' fetchOpenInterest() supports contract markets only');
        }
        const type = this.convertToInstrumentType(market['type']);
        const uly = this.safeString(market['info'], 'uly');
        const request = {
            'instType': type,
            'uly': uly,
            'instId': market['id'],
        };
        const response = await this.publicGetPublicOpenInterest(this.extend(request, params));
        //
        //     {
        //         "code": "0",
        //         "data": [
        //             {
        //                 "instId": "BTC-USDT-SWAP",
        //                 "instType": "SWAP",
        //                 "oi": "2125419",
        //                 "oiCcy": "21254.19",
        //                 "ts": "1664005108969"
        //             }
        //         ],
        //         "msg": ""
        //     }
        //
        const data = this.safeValue(response, 'data', []);
        return this.parseOpenInterest(data[0], market);
    }
    async fetchOpenInterestHistory(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchOpenInterestHistory
         * @description Retrieves the open interest history of a currency
         * @param {string} symbol Unified CCXT currency code instead of a unified symbol
         * @param {string} timeframe "5m", "1h", or "1d"
         * @param {int|undefined} since The time in ms of the earliest record to retrieve as a unix timestamp
         * @param {int|undefined} limit Not used by okx, but parsed internally by CCXT
         * @param {object} params Exchange specific parameters
         * @param {int|undefined} params.until The time in ms of the latest record to retrieve as a unix timestamp
         * @returns An array of [open interest structures]{@link https://docs.ccxt.com/#/?id=interest-history-structure}
         */
        const options = this.safeValue(this.options, 'fetchOpenInterestHistory', {});
        const timeframes = this.safeValue(options, 'timeframes', {});
        timeframe = this.safeString(timeframes, timeframe, timeframe);
        if (timeframe !== '5m' && timeframe !== '1H' && timeframe !== '1D') {
            throw new BadRequest(this.id + ' fetchOpenInterestHistory cannot only use the 5m, 1h, and 1d timeframe');
        }
        await this.loadMarkets();
        const currency = this.currency(symbol);
        const request = {
            'ccy': currency['id'],
            'period': timeframe,
        };
        if (since !== undefined) {
            request['begin'] = since;
        }
        const until = this.safeInteger2(params, 'till', 'until');
        if (until !== undefined) {
            request['end'] = until;
            params = this.omit(params, ['until', 'till']);
        }
        const response = await this.publicGetRubikStatContractsOpenInterestVolume(this.extend(request, params));
        //
        //    {
        //        code: '0',
        //        data: [
        //            [
        //                '1648221300000',  // timestamp
        //                '2183354317.945',  // open interest (USD)
        //                '74285877.617',  // volume (USD)
        //            ],
        //            ...
        //        ],
        //        msg: ''
        //    }
        //
        const data = this.safeValue(response, 'data');
        return this.parseOpenInterests(data, undefined, since, limit);
    }
    parseOpenInterest(interest, market = undefined) {
        //
        // fetchOpenInterestHistory
        //
        //    [
        //        '1648221300000',  // timestamp
        //        '2183354317.945',  // open interest (USD)
        //        '74285877.617',  // volume (USD)
        //    ]
        //
        // fetchOpenInterest
        //
        //     {
        //         "instId": "BTC-USDT-SWAP",
        //         "instType": "SWAP",
        //         "oi": "2125419",
        //         "oiCcy": "21254.19",
        //         "ts": "1664005108969"
        //     }
        //
        const id = this.safeString(interest, 'instId');
        market = this.safeMarket(id, market);
        const time = this.safeInteger(interest, 'ts');
        const timestamp = this.safeNumber(interest, 0, time);
        const numContracts = this.safeNumber(interest, 'oi');
        const inCurrency = this.safeNumber(interest, 'oiCcy');
        const openInterest = this.safeNumber(interest, 1, inCurrency);
        return {
            'symbol': this.safeSymbol(id),
            'baseVolume': undefined,
            'quoteVolume': openInterest,
            'openInterestAmount': numContracts,
            'openInterestValue': openInterest,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'info': interest,
        };
    }
    setSandboxMode(enable) {
        super.setSandboxMode(enable);
        if (enable) {
            this.headers['x-simulated-trading'] = '1';
        }
        else if ('x-simulated-trading' in this.headers) {
            this.headers = this.omit(this.headers, 'x-simulated-trading');
        }
    }
    async fetchDepositWithdrawFees(codes = undefined, params = {}) {
        /**
         * @method
         * @name okx#fetchDepositWithdrawFees
         * @description fetch deposit and withdraw fees
         * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-currencies
         * @param {[string]|undefined} codes list of unified currency codes
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [fees structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
         */
        await this.loadMarkets();
        const response = await this.privateGetAssetCurrencies(params);
        //
        //    {
        //        "code": "0",
        //        "data": [
        //            {
        //                "canDep": true,
        //                "canInternal": false,
        //                "canWd": true,
        //                "ccy": "USDT",
        //                "chain": "USDT-TRC20",
        //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
        //                "mainNet": false,
        //                "maxFee": "1.6",
        //                "maxWd": "8852150",
        //                "minFee": "0.8",
        //                "minWd": "2",
        //                "name": "Tether",
        //                "usedWdQuota": "0",
        //                "wdQuota": "500",
        //                "wdTickSz": "3"
        //            },
        //            {
        //                "canDep": true,
        //                "canInternal": false,
        //                "canWd": true,
        //                "ccy": "USDT",
        //                "chain": "USDT-ERC20",
        //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
        //                "mainNet": false,
        //                "maxFee": "16",
        //                "maxWd": "8852150",
        //                "minFee": "8",
        //                "minWd": "2",
        //                "name": "Tether",
        //                "usedWdQuota": "0",
        //                "wdQuota": "500",
        //                "wdTickSz": "3"
        //            },
        //            ...
        //        ],
        //        "msg": ""
        //    }
        //
        const data = this.safeValue(response, 'data');
        return this.parseDepositWithdrawFees(data, codes);
    }
    parseDepositWithdrawFees(response, codes = undefined, currencyIdKey = undefined) {
        //
        // [
        //   {
        //       "canDep": true,
        //       "canInternal": false,
        //       "canWd": true,
        //       "ccy": "USDT",
        //       "chain": "USDT-TRC20",
        //       "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
        //       "mainNet": false,
        //       "maxFee": "1.6",
        //       "maxWd": "8852150",
        //       "minFee": "0.8",
        //       "minWd": "2",
        //       "name": "Tether",
        //       "usedWdQuota": "0",
        //       "wdQuota": "500",
        //       "wdTickSz": "3"
        //   }
        // ]
        //
        const depositWithdrawFees = {};
        codes = this.marketCodes(codes);
        for (let i = 0; i < response.length; i++) {
            const feeInfo = response[i];
            const currencyId = this.safeString(feeInfo, 'ccy');
            const code = this.safeCurrencyCode(currencyId);
            if ((codes === undefined) || (this.inArray(code, codes))) {
                const depositWithdrawFee = this.safeValue(depositWithdrawFees, code);
                if (depositWithdrawFee === undefined) {
                    depositWithdrawFees[code] = this.depositWithdrawFee({});
                }
                depositWithdrawFees[code]['info'][currencyId] = feeInfo;
                const chain = this.safeString(feeInfo, 'chain');
                const chainSplit = chain.split('-');
                const networkId = this.safeValue(chainSplit, 1);
                const withdrawFee = this.safeNumber(feeInfo, 'minFee');
                const withdrawResult = {
                    'fee': withdrawFee,
                    'percentage': (withdrawFee !== undefined) ? false : undefined,
                };
                const depositResult = {
                    'fee': undefined,
                    'percentage': undefined,
                };
                const networkCode = this.networkIdToCode(networkId, code);
                depositWithdrawFees[code]['networks'][networkCode] = {
                    'withdraw': withdrawResult,
                    'deposit': depositResult,
                };
            }
        }
        const depositWithdrawCodes = Object.keys(depositWithdrawFees);
        for (let i = 0; i < depositWithdrawCodes.length; i++) {
            const code = depositWithdrawCodes[i];
            const currency = this.currency(code);
            depositWithdrawFees[code] = this.assignDefaultDepositWithdrawFees(depositWithdrawFees[code], currency);
        }
        return depositWithdrawFees;
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (!response) {
            return; // fallback to default error handler
        }
        //
        //    {
        //        "code": "1",
        //        "data": [
        //            {
        //                "clOrdId": "",
        //                "ordId": "",
        //                "sCode": "51119",
        //                "sMsg": "Order placement failed due to insufficient balance. ",
        //                "tag": ""
        //            }
        //        ],
        //        "msg": ""
        //    },
        //    {
        //        "code": "58001",
        //        "data": [],
        //        "msg": "Incorrect trade password"
        //    }
        //
        const code = this.safeString(response, 'code');
        if (code !== '0') {
            const feedback = this.id + ' ' + body;
            const data = this.safeValue(response, 'data', []);
            for (let i = 0; i < data.length; i++) {
                const error = data[i];
                const errorCode = this.safeString(error, 'sCode');
                const message = this.safeString(error, 'sMsg');
                this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
                this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
            }
            this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);
            throw new ExchangeError(feedback); // unknown message
        }
    }
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class okex$1 extends okx$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'okex',
            'alias': true,
        });
    }
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class okex5 extends okex$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'okex5',
            'alias': true,
        });
    }
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
class phemex$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'phemex',
            'name': 'Phemex',
            'countries': ['CN'],
            'rateLimit': 100,
            'version': 'v1',
            'certified': false,
            'pro': true,
            'hostname': 'api.phemex.com',
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': false,
                'swap': true,
                'future': false,
                'option': false,
                'addMargin': false,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'createOrder': true,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': true,
                'createStopMarketOrder': true,
                'createStopOrder': true,
                'editOrder': true,
                'fetchBalance': true,
                'fetchBorrowRate': false,
                'fetchBorrowRateHistories': false,
                'fetchBorrowRateHistory': false,
                'fetchBorrowRates': false,
                'fetchBorrowRatesPerSymbol': false,
                'fetchClosedOrders': true,
                'fetchCurrencies': true,
                'fetchDepositAddress': true,
                'fetchDeposits': true,
                'fetchFundingHistory': true,
                'fetchFundingRate': true,
                'fetchFundingRateHistories': false,
                'fetchFundingRateHistory': false,
                'fetchFundingRates': false,
                'fetchIndexOHLCV': false,
                'fetchLeverage': false,
                'fetchLeverageTiers': true,
                'fetchMarketLeverageTiers': 'emulated',
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenOrders': true,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrders': true,
                'fetchPositions': true,
                'fetchPositionsRisk': false,
                'fetchPremiumIndexOHLCV': false,
                'fetchTicker': true,
                'fetchTrades': true,
                'fetchTradingFee': false,
                'fetchTradingFees': false,
                'fetchTransfers': true,
                'fetchWithdrawals': true,
                'reduceMargin': false,
                'setLeverage': true,
                'setMargin': true,
                'setMarginMode': true,
                'setPositionMode': true,
                'transfer': true,
                'withdraw': undefined,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/85225056-221eb600-b3d7-11ea-930d-564d2690e3f6.jpg',
                'test': {
                    'v1': 'https://testnet-api.phemex.com/v1',
                    'public': 'https://testnet-api.phemex.com/exchange/public',
                    'private': 'https://testnet-api.phemex.com',
                },
                'api': {
                    'v1': 'https://{hostname}/v1',
                    'v2': 'https://{hostname}',
                    'public': 'https://{hostname}/exchange/public',
                    'private': 'https://{hostname}',
                },
                'www': 'https://phemex.com',
                'doc': 'https://github.com/phemex/phemex-api-docs',
                'fees': 'https://phemex.com/fees-conditions',
                'referral': {
                    'url': 'https://phemex.com/register?referralCode=EDNVJ',
                    'discount': 0.1,
                },
            },
            'timeframes': {
                '1m': '60',
                '3m': '180',
                '5m': '300',
                '15m': '900',
                '30m': '1800',
                '1h': '3600',
                '2h': '7200',
                '3h': '10800',
                '4h': '14400',
                '6h': '21600',
                '12h': '43200',
                '1d': '86400',
                '1w': '604800',
                '1M': '2592000',
                '3M': '7776000',
                '1Y': '31104000',
            },
            'api': {
                'public': {
                    'get': [
                        'cfg/v2/products',
                        'cfg/fundingRates',
                        'products',
                        'nomics/trades',
                        'md/kline',
                        'md/v2/kline/list',
                        'md/v2/kline',
                        'md/v2/kline/last', // perpetual ?symbol=<symbol>&resolution=<resolution>&limit=<limit>
                    ],
                },
                'v1': {
                    'get': [
                        'md/orderbook',
                        'md/trade',
                        'md/ticker/24hr',
                        'md/ticker/24hr/all',
                        'md/spot/ticker/24hr',
                        'md/spot/ticker/24hr/all',
                        'exchange/public/products', // contracts only
                    ],
                },
                'v2': {
                    'get': [
                        'md/v2/orderbook',
                        'md/v2/trade',
                        'md/v2/ticker/24hr',
                        'md/v2/ticker/24hr/all', // ?id=<id>
                    ],
                },
                'private': {
                    'get': [
                        // spot
                        'spot/orders/active',
                        // 'spot/orders/active', // ?symbol=<symbol>&clOrDID=<clOrdID>
                        'spot/orders',
                        'spot/wallets',
                        'exchange/spot/order',
                        'exchange/spot/order/trades',
                        'exchange/order/v2/orderList',
                        'exchange/order/v2/tradingList',
                        // swap
                        'accounts/accountPositions',
                        'g-accounts/accountPositions',
                        'accounts/positions',
                        'api-data/futures/funding-fees',
                        'api-data/g-futures/funding-fees',
                        'api-data/futures/orders',
                        'api-data/g-futures/orders',
                        'api-data/futures/orders/by-order-id',
                        'api-data/g-futures/orders/by-order-id',
                        'api-data/futures/trades',
                        'api-data/g-futures/trades',
                        'api-data/futures/trading-fees',
                        'api-data/g-futures/trading-fees',
                        'g-orders/activeList',
                        'orders/activeList',
                        'exchange/order/list',
                        'exchange/order',
                        // 'exchange/order', // ?symbol=<symbol>&clOrdID=<clOrdID1,clOrdID2>
                        'exchange/order/trade',
                        'phemex-user/users/children',
                        'phemex-user/wallets/v2/depositAddress',
                        'phemex-user/wallets/tradeAccountDetail',
                        'phemex-user/order/closedPositionList',
                        'exchange/margins/transfer',
                        'exchange/wallets/confirm/withdraw',
                        'exchange/wallets/withdrawList',
                        'exchange/wallets/depositList',
                        'exchange/wallets/v2/depositAddress',
                        'api-data/spots/funds',
                        'assets/convert',
                        // transfer
                        'assets/transfer',
                        'assets/spots/sub-accounts/transfer',
                        'assets/futures/sub-accounts/transfer',
                        'assets/quote',
                        'assets/convert', // ?fromCurrency=<currency>&toCurrency=<currency>&startTime=<start>&endTime=<end>&limit=<limit>&offset=<offset>
                    ],
                    'post': [
                        // spot
                        'spot/orders',
                        // swap
                        'orders',
                        'g-orders',
                        'positions/assign',
                        'exchange/wallets/transferOut',
                        'exchange/wallets/transferIn',
                        'exchange/margins',
                        'exchange/wallets/createWithdraw',
                        'exchange/wallets/cancelWithdraw',
                        'exchange/wallets/createWithdrawAddress',
                        // transfer
                        'assets/transfer',
                        'assets/spots/sub-accounts/transfer',
                        'assets/futures/sub-accounts/transfer',
                        'assets/universal-transfer',
                        'assets/convert',
                    ],
                    'put': [
                        // spot
                        'spot/orders',
                        // swap
                        'orders/replace',
                        'g-orders/replace',
                        'positions/leverage',
                        'g-positions/leverage',
                        'g-positions/switch-pos-mode-sync',
                        'positions/riskLimit', // ?symbol=<symbol>&riskLimit=<riskLimit>&riskLimitEv=<riskLimitEv>
                    ],
                    'delete': [
                        // spot
                        'spot/orders',
                        'spot/orders/all',
                        // 'spot/orders', // ?symbol=<symbol>&clOrdID=<clOrdID>
                        // swap
                        'orders/cancel',
                        'orders',
                        'orders/all',
                        'g-orders/cancel',
                        'g-orders',
                        'g-orders/all', // ?symbol=<symbol>&untriggered=<untriggered>&text=<text>
                    ],
                },
            },
            'precisionMode': TICK_SIZE$1,
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'taker': this.parseNumber('0.001'),
                    'maker': this.parseNumber('0.001'),
                },
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
            },
            'exceptions': {
                'exact': {
                    // not documented
                    '412': BadRequest,
                    '6001': BadRequest,
                    // documented
                    '19999': BadRequest,
                    '10001': DuplicateOrderId,
                    '10002': OrderNotFound,
                    '10003': CancelPending,
                    '10004': CancelPending,
                    '10005': CancelPending,
                    '11001': InsufficientFunds,
                    '11002': InvalidOrder,
                    '11003': InsufficientFunds,
                    '11004': InvalidOrder,
                    '11005': InsufficientFunds,
                    '11006': ExchangeError,
                    '11007': ExchangeError,
                    '11008': ExchangeError,
                    '11009': ExchangeError,
                    '11010': InsufficientFunds,
                    '11011': InvalidOrder,
                    '11012': InvalidOrder,
                    '11013': InvalidOrder,
                    '11014': InvalidOrder,
                    '11015': InvalidOrder,
                    '11016': BadRequest,
                    '11017': ExchangeError,
                    '11018': ExchangeError,
                    '11019': ExchangeError,
                    '11020': ExchangeError,
                    '11021': ExchangeError,
                    '11022': AccountSuspended,
                    '11023': ExchangeError,
                    '11024': ExchangeError,
                    '11025': BadRequest,
                    '11026': ExchangeError,
                    '11027': BadSymbol,
                    '11028': BadSymbol,
                    '11029': ExchangeError,
                    '11030': ExchangeError,
                    '11031': DDoSProtection,
                    '11032': DDoSProtection,
                    '11033': DuplicateOrderId,
                    '11034': InvalidOrder,
                    '11035': InvalidOrder,
                    '11036': InvalidOrder,
                    '11037': InvalidOrder,
                    '11038': InvalidOrder,
                    '11039': InvalidOrder,
                    '11040': InvalidOrder,
                    '11041': InvalidOrder,
                    '11042': InvalidOrder,
                    '11043': InvalidOrder,
                    '11044': InvalidOrder,
                    '11045': InvalidOrder,
                    '11046': InvalidOrder,
                    '11047': InvalidOrder,
                    '11048': InvalidOrder,
                    '11049': InvalidOrder,
                    '11050': InvalidOrder,
                    '11051': InvalidOrder,
                    '11052': InvalidOrder,
                    '11053': InvalidOrder,
                    '11054': InvalidOrder,
                    '11055': InvalidOrder,
                    '11056': InvalidOrder,
                    '11057': InvalidOrder,
                    '11058': InvalidOrder,
                    '11059': InvalidOrder,
                    '11060': InvalidOrder,
                    '11061': CancelPending,
                    '11062': InvalidOrder,
                    '11063': InvalidOrder,
                    '11064': InvalidOrder,
                    '11065': InvalidOrder,
                    '11066': InvalidOrder,
                    '11067': InvalidOrder,
                    '11068': InvalidOrder,
                    '11069': ExchangeError,
                    '11070': BadSymbol,
                    '11071': InvalidOrder,
                    '11072': InvalidOrder,
                    '11073': InvalidOrder,
                    '11074': InvalidOrder,
                    '11075': InvalidOrder,
                    '11076': InvalidOrder,
                    '11077': InvalidOrder,
                    '11078': InvalidOrder,
                    '11079': InvalidOrder,
                    '11080': InvalidOrder,
                    '11081': InvalidOrder,
                    '11082': InsufficientFunds,
                    '11083': InvalidOrder,
                    '11084': InvalidOrder,
                    '11085': DuplicateOrderId,
                    '11086': InvalidOrder,
                    '11087': InvalidOrder,
                    '11088': InvalidOrder,
                    '11089': InvalidOrder,
                    '11090': InvalidOrder,
                    '11091': InvalidOrder,
                    '11092': InvalidOrder,
                    '11093': InvalidOrder,
                    '11094': InvalidOrder,
                    '11095': InvalidOrder,
                    '11096': InvalidOrder,
                    '11097': BadRequest,
                    '11098': BadRequest,
                    '11099': ExchangeError,
                    '11100': InsufficientFunds,
                    '11101': InsufficientFunds,
                    '11102': BadRequest,
                    '11103': BadRequest,
                    '11104': BadRequest,
                    '11105': InsufficientFunds,
                    '11106': InsufficientFunds,
                    '11107': ExchangeError,
                    '11108': InvalidOrder,
                    '11109': InvalidOrder,
                    '11110': InvalidOrder,
                    '11111': InvalidOrder,
                    '11112': InvalidOrder,
                    '11113': BadRequest,
                    '11114': InvalidOrder,
                    '11115': InvalidOrder,
                    '11116': InvalidOrder,
                    '11117': InvalidOrder,
                    '11118': InvalidOrder,
                    '11119': InvalidOrder,
                    '11120': InvalidOrder,
                    '11121': InvalidOrder,
                    '11122': InvalidOrder,
                    '11123': InvalidOrder,
                    '11124': InvalidOrder,
                    '11125': InvalidOrder,
                    '11126': InvalidOrder,
                    '11128': InvalidOrder,
                    '11129': InvalidOrder,
                    '11130': InvalidOrder,
                    '11131': InvalidOrder,
                    '11132': InvalidOrder,
                    '11133': InvalidOrder,
                    '11134': InvalidOrder,
                    // not documented
                    '30000': BadRequest,
                    '30018': BadRequest,
                    '34003': PermissionDenied,
                    '35104': InsufficientFunds,
                    '39995': RateLimitExceeded,
                    '39996': PermissionDenied, // {"code": "39996","msg": "Access denied."}
                },
                'broad': {
                    '401 Insufficient privilege': PermissionDenied,
                    '401 Request IP mismatch': PermissionDenied,
                    'Failed to find api-key': AuthenticationError,
                    'Missing required parameter': BadRequest,
                    'API Signature verification failed': AuthenticationError,
                    'Api key not found': AuthenticationError, // {"msg":"Api key not found 698dc9e3-6faa-4910-9476-12857e79e198","code":"10500"}
                },
            },
            'options': {
                'brokerId': 'ccxt2022',
                'x-phemex-request-expiry': 60,
                'createOrderByQuoteRequiresPrice': true,
                'networks': {
                    'TRC20': 'TRX',
                    'ERC20': 'ETH',
                },
                'defaultNetworks': {
                    'USDT': 'ETH',
                },
                'defaultSubType': 'linear',
                'accountsByType': {
                    'spot': 'spot',
                    'swap': 'future',
                },
                'transfer': {
                    'fillResponseFromRequest': true,
                },
            },
        });
    }
    parseSafeNumber(value = undefined) {
        if (value === undefined) {
            return value;
        }
        let parts = value.split(',');
        value = parts.join('');
        parts = value.split(' ');
        return this.safeNumber(parts, 0);
    }
    parseSwapMarket(market) {
        //
        //     {
        //         "symbol":"BTCUSD",
        //         "displaySymbol":"BTC / USD",
        //         "indexSymbol":".BTC",
        //         "markSymbol":".MBTC",
        //         "fundingRateSymbol":".BTCFR",
        //         "fundingRate8hSymbol":".BTCFR8H",
        //         "contractUnderlyingAssets":"USD",
        //         "settleCurrency":"BTC",
        //         "quoteCurrency":"USD",
        //         "contractSize":"1 USD",
        //         "lotSize":1,
        //         "tickSize":0.5,
        //         "priceScale":4,
        //         "ratioScale":8,
        //         "pricePrecision":1,
        //         "minPriceEp":5000,
        //         "maxPriceEp":10000000000,
        //         "maxOrderQty":1000000,
        //         "type":"Perpetual",
        //         "status":"Listed",
        //         "tipOrderQty":1000000,
        //         "steps":"50",
        //         "riskLimits":[
        //             {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
        //             {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
        //             {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
        //         ],
        //         "underlyingSymbol":".BTC",
        //         "baseCurrency":"BTC",
        //         "settlementCurrency":"BTC",
        //         "valueScale":8,
        //         "defaultLeverage":0,
        //         "maxLeverage":100,
        //         "initMarginEr":"1000000",
        //         "maintMarginEr":"500000",
        //         "defaultRiskLimitEv":10000000000,
        //         "deleverage":true,
        //         "makerFeeRateEr":-250000,
        //         "takerFeeRateEr":750000,
        //         "fundingInterval":8,
        //         "marketUrl":"https://phemex.com/trade/BTCUSD",
        //         "description":"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.",
        //     }
        //
        const id = this.safeString(market, 'symbol');
        const baseId = this.safeString2(market, 'baseCurrency', 'contractUnderlyingAssets');
        const quoteId = this.safeString(market, 'quoteCurrency');
        const settleId = this.safeString(market, 'settleCurrency');
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        const settle = this.safeCurrencyCode(settleId);
        let inverse = false;
        if (settleId !== quoteId) {
            inverse = true;
        }
        const priceScale = this.safeInteger(market, 'priceScale');
        const ratioScale = this.safeInteger(market, 'ratioScale');
        const valueScale = this.safeInteger(market, 'valueScale');
        const minPriceEp = this.safeString(market, 'minPriceEp');
        const maxPriceEp = this.safeString(market, 'maxPriceEp');
        const makerFeeRateEr = this.safeString(market, 'makerFeeRateEr');
        const takerFeeRateEr = this.safeString(market, 'takerFeeRateEr');
        const status = this.safeString(market, 'status');
        const contractSizeString = this.safeString(market, 'contractSize', ' ');
        let contractSize = undefined;
        if (contractSizeString.indexOf(' ')) {
            // "1 USD"
            // "0.005 ETH"
            const parts = contractSizeString.split(' ');
            contractSize = this.parseNumber(parts[0]);
        }
        else {
            // "1.0"
            contractSize = this.parseNumber(contractSizeString);
        }
        const riskLimits = this.safeValue(market, 'riskLimits', []);
        let maxLeverage = this.safeNumber(market, 'maxLeverage');
        const maxAmount = undefined;
        if (riskLimits.length > 0) {
            // assume lowest risk limit for now
            const baseRiskLimit = riskLimits[0];
            // {'limit': '1000000', 'initialMarginRr': '0.01', 'maintenanceMarginRr': '0.005'}
            // {'limit': '100', 'initialMargin': '1.0%', 'initialMarginEr': '1000000', 'maintenanceMargin': '0.5%', 'maintenanceMarginEr': '500000'}
            if (!maxLeverage) {
                if (settle === 'USDT') {
                    const initialMarginRr = this.safeString(baseRiskLimit, 'initialMarginRr', '0.01');
                    const maxLeverageString = Precise.stringDiv('1', initialMarginRr);
                    maxLeverage = this.parseSafeNumber(maxLeverageString);
                }
                else {
                    const initialMarginEr = this.safeString(baseRiskLimit, 'initialMarginEr');
                    const initialMargin = this.fromEn(initialMarginEr, ratioScale);
                    const maxLeverageString = Precise.stringDiv('1', initialMargin);
                    maxLeverage = this.parseNumber(maxLeverageString);
                }
            }
            // this is in the quote currency -- would need to somehow convert to base to make this useful
            // maxAmount = this.safeNumber (baseRiskLimit, 'limit');
        }
        return {
            'id': id,
            'symbol': base + '/' + quote + ':' + settle,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': settleId,
            'type': 'swap',
            'spot': false,
            'margin': false,
            'swap': true,
            'future': false,
            'option': false,
            'active': status === 'Listed',
            'contract': true,
            'linear': !inverse,
            'inverse': inverse,
            'taker': this.parseNumber(this.fromEn(takerFeeRateEr, ratioScale)),
            'maker': this.parseNumber(this.fromEn(makerFeeRateEr, ratioScale)),
            'contractSize': contractSize,
            'expiry': undefined,
            'expiryDatetime': undefined,
            'strike': undefined,
            'optionType': undefined,
            'priceScale': priceScale,
            'valueScale': valueScale,
            'ratioScale': ratioScale,
            'precision': {
                'amount': this.safeNumber2(market, 'lotSize', 'qtyStepSize'),
                'price': this.safeNumber(market, 'tickSize'),
            },
            'limits': {
                'leverage': {
                    'min': this.parseNumber('1'),
                    'max': maxLeverage,
                },
                'amount': {
                    'min': undefined,
                    'max': maxAmount,
                },
                'price': {
                    'min': this.parseNumber(this.fromEn(minPriceEp, priceScale)),
                    'max': this.parseNumber(this.fromEn(maxPriceEp, priceScale)),
                },
                'cost': {
                    'min': undefined,
                    'max': this.parseNumber(this.safeString(market, 'maxOrderQty')),
                },
            },
            'info': market,
        };
    }
    parseSpotMarket(market) {
        //
        //     {
        //         "symbol":"sBTCUSDT",
        //         "displaySymbol":"BTC / USDT",
        //         "quoteCurrency":"USDT",
        //         "pricePrecision":2,
        //         "type":"Spot",
        //         "baseCurrency":"BTC",
        //         "baseTickSize":"0.000001 BTC",
        //         "baseTickSizeEv":100,
        //         "quoteTickSize":"0.01 USDT",
        //         "quoteTickSizeEv":1000000,
        //         "minOrderValue":"10 USDT",
        //         "minOrderValueEv":1000000000,
        //         "maxBaseOrderSize":"1000 BTC",
        //         "maxBaseOrderSizeEv":100000000000,
        //         "maxOrderValue":"5,000,000 USDT",
        //         "maxOrderValueEv":500000000000000,
        //         "defaultTakerFee":"0.001",
        //         "defaultTakerFeeEr":100000,
        //         "defaultMakerFee":"0.001",
        //         "defaultMakerFeeEr":100000,
        //         "baseQtyPrecision":6,
        //         "quoteQtyPrecision":2,
        //         "status":"Listed",
        //         "tipOrderQty":20
        //     }
        //
        const type = this.safeStringLower(market, 'type');
        const id = this.safeString(market, 'symbol');
        const quoteId = this.safeString(market, 'quoteCurrency');
        const baseId = this.safeString(market, 'baseCurrency');
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        const status = this.safeString(market, 'status');
        const precisionAmount = this.parseSafeNumber(this.safeString(market, 'baseTickSize'));
        const precisionPrice = this.parseSafeNumber(this.safeString(market, 'quoteTickSize'));
        return {
            'id': id,
            'symbol': base + '/' + quote,
            'base': base,
            'quote': quote,
            'settle': undefined,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': undefined,
            'type': type,
            'spot': true,
            'margin': false,
            'swap': false,
            'future': false,
            'option': false,
            'active': status === 'Listed',
            'contract': false,
            'linear': undefined,
            'inverse': undefined,
            'taker': this.safeNumber(market, 'defaultTakerFee'),
            'maker': this.safeNumber(market, 'defaultMakerFee'),
            'contractSize': undefined,
            'expiry': undefined,
            'expiryDatetime': undefined,
            'strike': undefined,
            'optionType': undefined,
            'priceScale': 8,
            'valueScale': 8,
            'ratioScale': 8,
            'precision': {
                'amount': precisionAmount,
                'price': precisionPrice,
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': undefined,
                },
                'amount': {
                    'min': precisionAmount,
                    'max': this.parseSafeNumber(this.safeString(market, 'maxBaseOrderSize')),
                },
                'price': {
                    'min': precisionPrice,
                    'max': undefined,
                },
                'cost': {
                    'min': this.parseSafeNumber(this.safeString(market, 'minOrderValue')),
                    'max': this.parseSafeNumber(this.safeString(market, 'maxOrderValue')),
                },
            },
            'info': market,
        };
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name phemex#fetchMarkets
         * @description retrieves data on all markets for phemex
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        const v2Products = await this.publicGetCfgV2Products(params);
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":{
        //             "ratioScale":8,
        //             "currencies":[
        //                 {"currency":"BTC","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"Bitcoin"},
        //                 {"currency":"USD","valueScale":4,"minValueEv":1,"maxValueEv":500000000000000,"name":"USD"},
        //                 {"currency":"USDT","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"TetherUS"},
        //             ],
        //             "products":[
        //                 {
        //                     "symbol":"BTCUSD",
        //                     "displaySymbol":"BTC / USD",
        //                     "indexSymbol":".BTC",
        //                     "markSymbol":".MBTC",
        //                     "fundingRateSymbol":".BTCFR",
        //                     "fundingRate8hSymbol":".BTCFR8H",
        //                     "contractUnderlyingAssets":"USD",
        //                     "settleCurrency":"BTC",
        //                     "quoteCurrency":"USD",
        //                     "contractSize":1.0,
        //                     "lotSize":1,
        //                     "tickSize":0.5,
        //                     "priceScale":4,
        //                     "ratioScale":8,
        //                     "pricePrecision":1,
        //                     "minPriceEp":5000,
        //                     "maxPriceEp":10000000000,
        //                     "maxOrderQty":1000000,
        //                     "type":"Perpetual"
        //                 },
        //                 {
        //                     "symbol":"sBTCUSDT",
        //                     "displaySymbol":"BTC / USDT",
        //                     "quoteCurrency":"USDT",
        //                     "pricePrecision":2,
        //                     "type":"Spot",
        //                     "baseCurrency":"BTC",
        //                     "baseTickSize":"0.000001 BTC",
        //                     "baseTickSizeEv":100,
        //                     "quoteTickSize":"0.01 USDT",
        //                     "quoteTickSizeEv":1000000,
        //                     "minOrderValue":"10 USDT",
        //                     "minOrderValueEv":1000000000,
        //                     "maxBaseOrderSize":"1000 BTC",
        //                     "maxBaseOrderSizeEv":100000000000,
        //                     "maxOrderValue":"5,000,000 USDT",
        //                     "maxOrderValueEv":500000000000000,
        //                     "defaultTakerFee":"0.001",
        //                     "defaultTakerFeeEr":100000,
        //                     "defaultMakerFee":"0.001",
        //                     "defaultMakerFeeEr":100000,
        //                     "baseQtyPrecision":6,
        //                     "quoteQtyPrecision":2
        //                 },
        //             ],
        //             "riskLimits":[
        //                 {
        //                     "symbol":"BTCUSD",
        //                     "steps":"50",
        //                     "riskLimits":[
        //                         {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
        //                         {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
        //                         {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
        //                     ]
        //                 },
        //             ],
        //             "leverages":[
        //                 {"initialMargin":"1.0%","initialMarginEr":1000000,"options":[1,2,3,5,10,25,50,100]},
        //                 {"initialMargin":"1.5%","initialMarginEr":1500000,"options":[1,2,3,5,10,25,50,66]},
        //                 {"initialMargin":"2.0%","initialMarginEr":2000000,"options":[1,2,3,5,10,25,33,50]},
        //             ]
        //         }
        //     }
        //
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":[
        //             {
        //                 "symbol":"BTCUSD",
        //                 "underlyingSymbol":".BTC",
        //                 "quoteCurrency":"USD",
        //                 "baseCurrency":"BTC",
        //                 "settlementCurrency":"BTC",
        //                 "maxOrderQty":1000000,
        //                 "maxPriceEp":100000000000000,
        //                 "lotSize":1,
        //                 "tickSize":"0.5",
        //                 "contractSize":"1 USD",
        //                 "priceScale":4,
        //                 "ratioScale":8,
        //                 "valueScale":8,
        //                 "defaultLeverage":0,
        //                 "maxLeverage":100,
        //                 "initMarginEr":"1000000",
        //                 "maintMarginEr":"500000",
        //                 "defaultRiskLimitEv":10000000000,
        //                 "deleverage":true,
        //                 "makerFeeRateEr":-250000,
        //                 "takerFeeRateEr":750000,
        //                 "fundingInterval":8,
        //                 "marketUrl":"https://phemex.com/trade/BTCUSD",
        //                 "description":"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.",
        //                 "type":"Perpetual"
        //             },
        //         ]
        //     }
        //
        const v2ProductsData = this.safeValue(v2Products, 'data', {});
        const products = this.safeValue(v2ProductsData, 'products', []);
        const v1RiskLimits = this.safeValue(v2ProductsData, 'riskLimits', []);
        const v1RiskLimitsById = this.indexBy(v1RiskLimits, 'symbol');
        const v2RiskLimits = this.safeValue(v2ProductsData, 'riskLimitsV2', []);
        const v2RiskLimitsById = this.indexBy(v2RiskLimits, 'symbol');
        const productsById = this.indexBy(products, 'symbol');
        const result = [];
        for (let i = 0; i < products.length; i++) {
            let market = products[i];
            const type = this.safeStringLower(market, 'type');
            if (type === 'perpetual') {
                const id = this.safeString(market, 'symbol');
                const riskLimitValues = this.safeValue(v1RiskLimitsById, id, {});
                market = this.extend(market, riskLimitValues);
                const productValues = this.safeValue(productsById, id, {});
                market = this.extend(market, productValues);
                market = this.parseSwapMarket(market);
            }
            else if (type === 'perpetualv2') {
                const id = this.safeString(market, 'symbol');
                const riskLimitValues = this.safeValue(v2RiskLimitsById, id, {});
                market = this.extend(market, riskLimitValues);
                const productValues = this.safeValue(productsById, id, {});
                market = this.extend(market, productValues);
                market = this.parseSwapMarket(market);
            }
            else {
                market = this.parseSpotMarket(market);
            }
            result.push(market);
        }
        return result;
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name phemex#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} an associative dictionary of currencies
         */
        const response = await this.publicGetCfgV2Products(params);
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":{
        //             ...,
        //             "currencies":[
        //                 {"currency":"BTC","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"Bitcoin"},
        //                 {"currency":"USD","valueScale":4,"minValueEv":1,"maxValueEv":500000000000000,"name":"USD"},
        //                 {"currency":"USDT","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"TetherUS"},
        //             ],
        //             ...
        //         }
        //     }
        const data = this.safeValue(response, 'data', {});
        const currencies = this.safeValue(data, 'currencies', []);
        const result = {};
        for (let i = 0; i < currencies.length; i++) {
            const currency = currencies[i];
            const id = this.safeString(currency, 'currency');
            const name = this.safeString(currency, 'name');
            const code = this.safeCurrencyCode(id);
            const valueScaleString = this.safeString(currency, 'valueScale');
            const valueScale = parseInt(valueScaleString);
            const minValueEv = this.safeString(currency, 'minValueEv');
            const maxValueEv = this.safeString(currency, 'maxValueEv');
            let minAmount = undefined;
            let maxAmount = undefined;
            let precision = undefined;
            if (valueScale !== undefined) {
                const precisionString = this.parsePrecision(valueScaleString);
                precision = this.parseNumber(precisionString);
                minAmount = this.parseNumber(Precise.stringMul(minValueEv, precisionString));
                maxAmount = this.parseNumber(Precise.stringMul(maxValueEv, precisionString));
            }
            result[code] = {
                'id': id,
                'info': currency,
                'code': code,
                'name': name,
                'active': undefined,
                'deposit': undefined,
                'withdraw': undefined,
                'fee': undefined,
                'precision': precision,
                'limits': {
                    'amount': {
                        'min': minAmount,
                        'max': maxAmount,
                    },
                    'withdraw': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'valueScale': valueScale,
            };
        }
        return result;
    }
    parseBidAsk(bidask, priceKey = 0, amountKey = 1, market = undefined) {
        if (market === undefined) {
            throw new ArgumentsRequired(this.id + ' parseBidAsk() requires a market argument');
        }
        let amount = this.safeString(bidask, amountKey);
        if (market['spot']) {
            amount = this.fromEv(amount, market);
        }
        return [
            this.parseNumber(this.fromEp(this.safeString(bidask, priceKey), market)),
            this.parseNumber(amount),
        ];
    }
    customParseOrderBook(orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1, market = undefined) {
        const result = {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'nonce': undefined,
        };
        const sides = [bidsKey, asksKey];
        for (let i = 0; i < sides.length; i++) {
            const side = sides[i];
            const orders = [];
            const bidasks = this.safeValue(orderbook, side);
            for (let k = 0; k < bidasks.length; k++) {
                orders.push(this.parseBidAsk(bidasks[k], priceKey, amountKey, market));
            }
            result[side] = orders;
        }
        result[bidsKey] = this.sortBy(result[bidsKey], 0, true);
        result[asksKey] = this.sortBy(result[asksKey], 0);
        return result;
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryorderbook
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'id': 123456789, // optional request id
        };
        let method = 'v1GetMdOrderbook';
        if (market['linear'] && market['settle'] === 'USDT') {
            method = 'v2GetMdV2Orderbook';
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "error": null,
        //         "id": 0,
        //         "result": {
        //             "book": {
        //                 "asks": [
        //                     [ 23415000000, 105262000 ],
        //                     [ 23416000000, 147914000 ],
        //                     [ 23419000000, 160914000 ],
        //                 ],
        //                 "bids": [
        //                     [ 23360000000, 32995000 ],
        //                     [ 23359000000, 221887000 ],
        //                     [ 23356000000, 284599000 ],
        //                 ],
        //             },
        //             "depth": 30,
        //             "sequence": 1592059928,
        //             "symbol": "sETHUSDT",
        //             "timestamp": 1592387340020000955,
        //             "type": "snapshot"
        //         }
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const book = this.safeValue2(result, 'book', 'orderbook_p', {});
        const timestamp = this.safeIntegerProduct(result, 'timestamp', 0.000001);
        const orderbook = this.customParseOrderBook(book, symbol, timestamp, 'bids', 'asks', 0, 1, market);
        orderbook['nonce'] = this.safeInteger(result, 'sequence');
        return orderbook;
    }
    toEn(n, scale) {
        const stringN = n.toString();
        const precise = new Precise(stringN);
        precise.decimals = precise.decimals - scale;
        precise.reduce();
        const stringValue = precise.toString();
        const floatValue = parseFloat(stringValue);
        const floatString = floatValue.toString();
        return parseInt(floatString);
    }
    toEv(amount, market = undefined) {
        if ((amount === undefined) || (market === undefined)) {
            return amount;
        }
        return this.toEn(amount, market['valueScale']);
    }
    toEp(price, market = undefined) {
        if ((price === undefined) || (market === undefined)) {
            return price;
        }
        return this.toEn(price, market['priceScale']);
    }
    fromEn(en, scale) {
        if (en === undefined) {
            return undefined;
        }
        const precise = new Precise(en);
        precise.decimals = this.sum(precise.decimals, scale);
        precise.reduce();
        return precise.toString();
    }
    fromEp(ep, market = undefined) {
        if ((ep === undefined) || (market === undefined)) {
            return ep;
        }
        return this.fromEn(ep, this.safeInteger(market, 'priceScale'));
    }
    fromEv(ev, market = undefined) {
        if ((ev === undefined) || (market === undefined)) {
            return ev;
        }
        return this.fromEn(ev, this.safeInteger(market, 'valueScale'));
    }
    fromEr(er, market = undefined) {
        if ((er === undefined) || (market === undefined)) {
            return er;
        }
        return this.fromEn(er, this.safeInteger(market, 'ratioScale'));
    }
    parseOHLCV(ohlcv, market = undefined) {
        //
        //     [
        //         1592467200, // timestamp
        //         300, // interval
        //         23376000000, // last
        //         23322000000, // open
        //         23381000000, // high
        //         23315000000, // low
        //         23367000000, // close
        //         208671000, // base volume
        //         48759063370, // quote volume
        //     ]
        //
        let baseVolume = undefined;
        if ((market !== undefined) && market['spot']) {
            baseVolume = this.parseNumber(this.fromEv(this.safeString(ohlcv, 7), market));
        }
        else {
            baseVolume = this.safeNumber(ohlcv, 7);
        }
        const lastClose = this.parseNumber(this.fromEp(this.safeString(ohlcv, 2), market));
        const currentOpen = this.parseNumber(this.fromEp(this.safeString(ohlcv, 3), market));
        const open = lastClose > 0 ? lastClose : currentOpen;
        return [
            this.safeTimestamp(ohlcv, 0),
            open,
            this.parseNumber(this.fromEp(this.safeString(ohlcv, 4), market)),
            this.parseNumber(this.fromEp(this.safeString(ohlcv, 5), market)),
            this.parseNumber(this.fromEp(this.safeString(ohlcv, 6), market)),
            baseVolume,
        ];
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchOHLCV
         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#querykline
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#query-kline
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'resolution': this.safeString(this.timeframes, timeframe, timeframe),
            // 'from': 1588830682, // seconds
            // 'to': this.seconds (),
        };
        const duration = this.parseTimeframe(timeframe);
        const now = this.seconds();
        const possibleLimitValues = [5, 10, 50, 100, 500, 1000];
        const maxLimit = 1000; // maximum limit, we shouldn't sent request of more than it
        if (limit === undefined) {
            limit = 100; // set default, as exchange doesn't have any defaults and needs something to be set
        }
        limit = Math.min(limit, maxLimit);
        let method = 'publicGetMdKline';
        if (since !== undefined) { // phemex also provides kline query with from/to, however, this interface is NOT recommended.
            since = this.parseToInt(since / 1000);
            request['from'] = since;
            // time ranges ending in the future are not accepted
            // https://github.com/ccxt/ccxt/issues/8050
            request['to'] = Math.min(now, this.sum(since, duration * limit));
            method = 'publicGetMdV2KlineList';
        }
        else {
            if (!this.inArray(limit, possibleLimitValues)) {
                limit = 100;
            }
            request['limit'] = limit;
            if (market['linear'] || market['settle'] === 'USDT') {
                method = 'publicGetMdV2KlineLast';
            }
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":{
        //             "total":-1,
        //             "rows":[
        //                 [1592467200,300,23376000000,23322000000,23381000000,23315000000,23367000000,208671000,48759063370],
        //                 [1592467500,300,23367000000,23314000000,23390000000,23311000000,23331000000,234820000,54848948710],
        //                 [1592467800,300,23331000000,23385000000,23391000000,23326000000,23387000000,152931000,35747882250],
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        const rows = this.safeValue(data, 'rows', []);
        return this.parseOHLCVs(rows, market, timeframe, since, limit);
    }
    parseTicker(ticker, market = undefined) {
        //
        // spot
        //
        //     {
        //         "askEp": 943836000000,
        //         "bidEp": 943601000000,
        //         "highEp": 955946000000,
        //         "lastEp": 943803000000,
        //         "lowEp": 924973000000,
        //         "openEp": 948693000000,
        //         "symbol": "sBTCUSDT",
        //         "timestamp": 1592471203505728630,
        //         "turnoverEv": 111822826123103,
        //         "volumeEv": 11880532281
        //     }
        //
        // swap
        //
        //     {
        //         "askEp": 2332500,
        //         "bidEp": 2331000,
        //         "fundingRateEr": 10000,
        //         "highEp": 2380000,
        //         "indexEp": 2329057,
        //         "lastEp": 2331500,
        //         "lowEp": 2274000,
        //         "markEp": 2329232,
        //         "openEp": 2337500,
        //         "openInterest": 1298050,
        //         "predFundingRateEr": 19921,
        //         "symbol": "ETHUSD",
        //         "timestamp": 1592474241582701416,
        //         "turnoverEv": 47228362330,
        //         "volume": 4053863
        //     }
        // linear swap v2
        //
        //     {
        //         "closeRp":"16820.5",
        //         "fundingRateRr":"0.0001",
        //         "highRp":"16962.1",
        //         "indexPriceRp":"16830.15651565",
        //         "lowRp":"16785",
        //         "markPriceRp":"16830.97534951",
        //         "openInterestRv":"1323.596",
        //         "openRp":"16851.7",
        //         "predFundingRateRr":"0.0001",
        //         "symbol":"BTCUSDT",
        //         "timestamp":"1672142789065593096",
        //         "turnoverRv":"124835296.0538",
        //         "volumeRq":"7406.95"
        //     }
        //
        const marketId = this.safeString(ticker, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const timestamp = this.safeIntegerProduct(ticker, 'timestamp', 0.000001);
        const last = this.fromEp(this.safeString2(ticker, 'lastEp', 'closeRp'), market);
        const quoteVolume = this.fromEv(this.safeString2(ticker, 'turnoverEv', 'turnoverRv'), market);
        let baseVolume = this.safeString(ticker, 'volume');
        if (baseVolume === undefined) {
            baseVolume = this.fromEv(this.safeString2(ticker, 'volumeEv', 'volumeRq'), market);
        }
        const open = this.fromEp(this.safeString(ticker, 'openEp'), market);
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.fromEp(this.safeString2(ticker, 'highEp', 'highRp'), market),
            'low': this.fromEp(this.safeString2(ticker, 'lowEp', 'lowRp'), market),
            'bid': this.fromEp(this.safeString(ticker, 'bidEp'), market),
            'bidVolume': undefined,
            'ask': this.fromEp(this.safeString(ticker, 'askEp'), market),
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name phemex#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query24hrsticker
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'id': 123456789, // optional request id
        };
        let method = 'v1GetMdSpotTicker24hr';
        if (market['swap']) {
            if (market['inverse'] || market['settle'] === 'USD') {
                method = 'v1GetMdTicker24hr';
            }
            else {
                method = 'v2GetMdV2Ticker24hr';
            }
        }
        const response = await this[method](this.extend(request, params));
        //
        // spot
        //
        //     {
        //         "error": null,
        //         "id": 0,
        //         "result": {
        //             "askEp": 943836000000,
        //             "bidEp": 943601000000,
        //             "highEp": 955946000000,
        //             "lastEp": 943803000000,
        //             "lowEp": 924973000000,
        //             "openEp": 948693000000,
        //             "symbol": "sBTCUSDT",
        //             "timestamp": 1592471203505728630,
        //             "turnoverEv": 111822826123103,
        //             "volumeEv": 11880532281
        //         }
        //     }
        //
        // swap
        //
        //     {
        //         "error": null,
        //         "id": 0,
        //         "result": {
        //             "askEp": 2332500,
        //             "bidEp": 2331000,
        //             "fundingRateEr": 10000,
        //             "highEp": 2380000,
        //             "indexEp": 2329057,
        //             "lastEp": 2331500,
        //             "lowEp": 2274000,
        //             "markEp": 2329232,
        //             "openEp": 2337500,
        //             "openInterest": 1298050,
        //             "predFundingRateEr": 19921,
        //             "symbol": "ETHUSD",
        //             "timestamp": 1592474241582701416,
        //             "turnoverEv": 47228362330,
        //             "volume": 4053863
        //         }
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseTicker(result, market);
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#querytrades
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'id': 123456789, // optional request id
        };
        let method = 'v1GetMdTrade';
        if (market['linear'] && market['settle'] === 'USDT') {
            method = 'v2GetMdV2Trade';
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "error": null,
        //         "id": 0,
        //         "result": {
        //             "sequence": 1315644947,
        //             "symbol": "BTCUSD",
        //             "trades": [
        //                 [ 1592541746712239749, 13156448570000, "Buy", 93070000, 40173 ],
        //                 [ 1592541740434625085, 13156447110000, "Sell", 93065000, 5000 ],
        //                 [ 1592541732958241616, 13156441390000, "Buy", 93070000, 3460 ],
        //             ],
        //             "type": "snapshot"
        //         }
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue2(result, 'trades', 'trades_p', []);
        return this.parseTrades(trades, market, since, limit);
    }
    parseTrade(trade, market = undefined) {
        //
        // fetchTrades (public) spot & contract
        //
        //     [
        //         1592541746712239749,
        //         13156448570000,
        //         "Buy",
        //         93070000,
        //         40173
        //     ]
        //
        // fetchTrades (public) perp
        //
        //     [
        //         1675690986063435800,
        //         "Sell",
        //         "22857.4",
        //         "0.269"
        //     ]
        //
        // fetchMyTrades (private)
        //
        // spot
        //
        //     {
        //         "qtyType": "ByQuote",
        //         "transactTimeNs": 1589450974800550100,
        //         "clOrdID": "8ba59d40-df25-d4b0-14cf-0703f44e9690",
        //         "orderID": "b2b7018d-f02f-4c59-b4cf-051b9c2d2e83",
        //         "symbol": "sBTCUSDT",
        //         "side": "Buy",
        //         "priceEP": 970056000000,
        //         "baseQtyEv": 0,
        //         "quoteQtyEv": 1000000000,
        //         "action": "New",
        //         "execStatus": "MakerFill",
        //         "ordStatus": "Filled",
        //         "ordType": "Limit",
        //         "execInst": "None",
        //         "timeInForce": "GoodTillCancel",
        //         "stopDirection": "UNSPECIFIED",
        //         "tradeType": "Trade",
        //         "stopPxEp": 0,
        //         "execId": "c6bd8979-07ba-5946-b07e-f8b65135dbb1",
        //         "execPriceEp": 970056000000,
        //         "execBaseQtyEv": 103000,
        //         "execQuoteQtyEv": 999157680,
        //         "leavesBaseQtyEv": 0,
        //         "leavesQuoteQtyEv": 0,
        //         "execFeeEv": 0,
        //         "feeRateEr": 0
        //     }
        //
        // swap
        //
        //     {
        //         "transactTimeNs": 1578026629824704800,
        //         "symbol": "BTCUSD",
        //         "currency": "BTC",
        //         "action": "Replace",
        //         "side": "Sell",
        //         "tradeType": "Trade",
        //         "execQty": 700,
        //         "execPriceEp": 71500000,
        //         "orderQty": 700,
        //         "priceEp": 71500000,
        //         "execValueEv": 9790209,
        //         "feeRateEr": -25000,
        //         "execFeeEv": -2447,
        //         "ordType": "Limit",
        //         "execID": "b01671a1-5ddc-5def-b80a-5311522fd4bf",
        //         "orderID": "b63bc982-be3a-45e0-8974-43d6375fb626",
        //         "clOrdID": "uuid-1577463487504",
        //         "execStatus": "MakerFill"
        //     }
        //
        // swap - USDT
        //
        //     {
        //         "createdAt": 1666226932259,
        //         "symbol": "ETHUSDT",
        //         "currency": "USDT",
        //         "action": 1,
        //         "tradeType": 1,
        //         "execQtyRq": "0.01",
        //         "execPriceRp": "1271.9",
        //         "side": 1,
        //         "orderQtyRq": "0.78",
        //         "priceRp": "1271.9",
        //         "execValueRv": "12.719",
        //         "feeRateRr": "0.0001",
        //         "execFeeRv": "0.0012719",
        //         "ordType": 2,
        //         "execId": "8718cae",
        //         "execStatus": 6
        //     }
        //
        let priceString = undefined;
        let amountString = undefined;
        let timestamp = undefined;
        let id = undefined;
        let side = undefined;
        let costString = undefined;
        let type = undefined;
        let fee = undefined;
        let feeCostString = undefined;
        let feeRateString = undefined;
        let feeCurrencyCode = undefined;
        const marketId = this.safeString(trade, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        let orderId = undefined;
        let takerOrMaker = undefined;
        if (Array.isArray(trade)) {
            const tradeLength = trade.length;
            timestamp = this.safeIntegerProduct(trade, 0, 0.000001);
            if (tradeLength > 4) {
                id = this.safeString(trade, tradeLength - 4);
            }
            side = this.safeStringLower(trade, tradeLength - 3);
            priceString = this.safeString(trade, tradeLength - 2);
            amountString = this.safeString(trade, tradeLength - 1);
            if (typeof trade[tradeLength - 2] === 'number') {
                priceString = this.fromEp(priceString, market);
                amountString = this.fromEv(amountString, market);
            }
        }
        else {
            timestamp = this.safeIntegerProduct(trade, 'transactTimeNs', 0.000001);
            if (timestamp === undefined) {
                timestamp = this.safeInteger(trade, 'createdAt');
            }
            id = this.safeString2(trade, 'execId', 'execID');
            orderId = this.safeString(trade, 'orderID');
            if (market['settle'] === 'USDT') {
                const sideId = this.safeString(trade, 'side');
                side = (sideId === '1') ? 'buy' : 'sell';
                const ordType = this.safeString(trade, 'ordType');
                if (ordType === '1') {
                    type = 'market';
                }
                else if (ordType === '2') {
                    type = 'limit';
                }
                priceString = this.safeString2(trade, 'execPriceRp', 'priceRp');
                amountString = this.safeString(trade, 'execQtyRq');
                costString = this.safeString(trade, 'execValueRv');
                feeCostString = this.safeString(trade, 'execFeeRv');
                feeRateString = this.safeString(trade, 'feeRateRr');
                const currencyId = this.safeString(trade, 'currency');
                feeCurrencyCode = this.safeCurrencyCode(currencyId);
            }
            else {
                side = this.safeStringLower(trade, 'side');
                type = this.parseOrderType(this.safeString(trade, 'ordType'));
                const execStatus = this.safeString(trade, 'execStatus');
                if (execStatus === 'MakerFill') {
                    takerOrMaker = 'maker';
                }
                priceString = this.fromEp(this.safeString(trade, 'execPriceEp'), market);
                amountString = this.fromEv(this.safeString(trade, 'execBaseQtyEv'), market);
                amountString = this.safeString(trade, 'execQty', amountString);
                costString = this.fromEv(this.safeString2(trade, 'execQuoteQtyEv', 'execValueEv'), market);
                feeCostString = this.fromEv(this.safeString(trade, 'execFeeEv'), market);
                if (feeCostString !== undefined) {
                    feeRateString = this.fromEr(this.safeString(trade, 'feeRateEr'), market);
                    if (market['spot']) {
                        feeCurrencyCode = (side === 'buy') ? market['base'] : market['quote'];
                    }
                    else {
                        const info = this.safeValue(market, 'info');
                        if (info !== undefined) {
                            const settlementCurrencyId = this.safeString(info, 'settlementCurrency');
                            feeCurrencyCode = this.safeCurrencyCode(settlementCurrencyId);
                        }
                    }
                }
            }
            fee = {
                'cost': feeCostString,
                'rate': feeRateString,
                'currency': feeCurrencyCode,
            };
        }
        return this.safeTrade({
            'info': trade,
            'id': id,
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'order': orderId,
            'type': type,
            'side': side,
            'takerOrMaker': takerOrMaker,
            'price': priceString,
            'amount': amountString,
            'cost': costString,
            'fee': fee,
        }, market);
    }
    parseSpotBalance(response) {
        //
        //     {
        //         "code":0,
        //         "msg":"",
        //         "data":[
        //             {
        //                 "currency":"USDT",
        //                 "balanceEv":0,
        //                 "lockedTradingBalanceEv":0,
        //                 "lockedWithdrawEv":0,
        //                 "lastUpdateTimeNs":1592065834511322514,
        //                 "walletVid":0
        //             },
        //             {
        //                 "currency":"ETH",
        //                 "balanceEv":0,
        //                 "lockedTradingBalanceEv":0,
        //                 "lockedWithdrawEv":0,
        //                 "lastUpdateTimeNs":1592065834511322514,
        //                 "walletVid":0
        //             }
        //         ]
        //     }
        //
        let timestamp = undefined;
        const result = { 'info': response };
        const data = this.safeValue(response, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const balance = data[i];
            const currencyId = this.safeString(balance, 'currency');
            const code = this.safeCurrencyCode(currencyId);
            const currency = this.safeValue(this.currencies, code, {});
            const scale = this.safeInteger(currency, 'valueScale', 8);
            const account = this.account();
            const balanceEv = this.safeString(balance, 'balanceEv');
            const lockedTradingBalanceEv = this.safeString(balance, 'lockedTradingBalanceEv');
            const lockedWithdrawEv = this.safeString(balance, 'lockedWithdrawEv');
            const total = this.fromEn(balanceEv, scale);
            const lockedTradingBalance = this.fromEn(lockedTradingBalanceEv, scale);
            const lockedWithdraw = this.fromEn(lockedWithdrawEv, scale);
            const used = Precise.stringAdd(lockedTradingBalance, lockedWithdraw);
            const lastUpdateTimeNs = this.safeIntegerProduct(balance, 'lastUpdateTimeNs', 0.000001);
            timestamp = (timestamp === undefined) ? lastUpdateTimeNs : Math.max(timestamp, lastUpdateTimeNs);
            account['total'] = total;
            account['used'] = used;
            result[code] = account;
        }
        result['timestamp'] = timestamp;
        result['datetime'] = this.iso8601(timestamp);
        return this.safeBalance(result);
    }
    parseSwapBalance(response) {
        // usdt
        //   {
        //       info: {
        //         code: '0',
        //         msg: '',
        //         data: {
        //           account: {
        //             userID: '940666',
        //             accountId: '9406660003',
        //             currency: 'USDT',
        //             accountBalanceRv: '99.93143972',
        //             totalUsedBalanceRv: '0.40456',
        //             bonusBalanceRv: '0'
        //           },
        //   }
        //
        //     {
        //         "code":0,
        //         "msg":"",
        //         "data":{
        //             "account":{
        //                 "accountId":6192120001,
        //                 "currency":"BTC",
        //                 "accountBalanceEv":1254744,
        //                 "totalUsedBalanceEv":0,
        //                 "bonusBalanceEv":1254744
        //             }
        //         }
        //     }
        //
        const result = { 'info': response };
        const data = this.safeValue(response, 'data', {});
        const balance = this.safeValue(data, 'account', {});
        const currencyId = this.safeString(balance, 'currency');
        const code = this.safeCurrencyCode(currencyId);
        const currency = this.currency(code);
        const valueScale = this.safeInteger(currency, 'valueScale', 8);
        const account = this.account();
        const accountBalanceEv = this.safeString2(balance, 'accountBalanceEv', 'accountBalanceRv');
        const totalUsedBalanceEv = this.safeString2(balance, 'totalUsedBalanceEv', 'totalUsedBalanceRv');
        const needsConversion = (code !== 'USDT');
        account['total'] = needsConversion ? this.fromEn(accountBalanceEv, valueScale) : accountBalanceEv;
        account['used'] = needsConversion ? this.fromEn(totalUsedBalanceEv, valueScale) : totalUsedBalanceEv;
        result[code] = account;
        return this.safeBalance(result);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name phemex#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-account-positions
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
        let method = 'privateGetSpotWallets';
        const request = {};
        if (type === 'swap') {
            const code = this.safeString(params, 'code');
            let settle = undefined;
            [settle, params] = this.handleOptionAndParams(params, 'fetchBalance', 'settle');
            if (code !== undefined || settle !== undefined) {
                let coin = undefined;
                if (code !== undefined) {
                    coin = code;
                }
                else {
                    coin = settle;
                }
                const currency = this.currency(coin);
                request['currency'] = currency['id'];
                if (currency['id'] === 'USDT') {
                    method = 'privateGetGAccountsAccountPositions';
                }
                else {
                    method = 'privateGetAccountsAccountPositions';
                }
            }
            else {
                const currency = this.safeString(params, 'currency');
                if (currency === undefined) {
                    throw new ArgumentsRequired(this.id + ' fetchBalance() requires a code parameter or a currency or settle parameter for ' + type + ' type');
                }
            }
        }
        params = this.omit(params, ['type', 'code']);
        const response = await this[method](this.extend(request, params));
        //
        // usdt
        //   {
        //       info: {
        //         code: '0',
        //         msg: '',
        //         data: {
        //           account: {
        //             userID: '940666',
        //             accountId: '9406660003',
        //             currency: 'USDT',
        //             accountBalanceRv: '99.93143972',
        //             totalUsedBalanceRv: '0.40456',
        //             bonusBalanceRv: '0'
        //           },
        //   }
        //
        // spot
        //
        //     {
        //         "code":0,
        //         "msg":"",
        //         "data":[
        //             {
        //                 "currency":"USDT",
        //                 "balanceEv":0,
        //                 "lockedTradingBalanceEv":0,
        //                 "lockedWithdrawEv":0,
        //                 "lastUpdateTimeNs":1592065834511322514,
        //                 "walletVid":0
        //             },
        //             {
        //                 "currency":"ETH",
        //                 "balanceEv":0,
        //                 "lockedTradingBalanceEv":0,
        //                 "lockedWithdrawEv":0,
        //                 "lastUpdateTimeNs":1592065834511322514,
        //                 "walletVid":0
        //             }
        //         ]
        //     }
        //
        // swap
        //
        //     {
        //         "code":0,
        //         "msg":"",
        //         "data":{
        //             "account":{
        //                 "accountId":6192120001,
        //                 "currency":"BTC",
        //                 "accountBalanceEv":1254744,
        //                 "totalUsedBalanceEv":0,
        //                 "bonusBalanceEv":1254744
        //             },
        //             "positions":[
        //                 {
        //                     "accountID":6192120001,
        //                     "symbol":"BTCUSD",
        //                     "currency":"BTC",
        //                     "side":"None",
        //                     "positionStatus":"Normal",
        //                     "crossMargin":false,
        //                     "leverageEr":0,
        //                     "leverage":0E-8,
        //                     "initMarginReqEr":1000000,
        //                     "initMarginReq":0.01000000,
        //                     "maintMarginReqEr":500000,
        //                     "maintMarginReq":0.00500000,
        //                     "riskLimitEv":10000000000,
        //                     "riskLimit":100.00000000,
        //                     "size":0,
        //                     "value":0E-8,
        //                     "valueEv":0,
        //                     "avgEntryPriceEp":0,
        //                     "avgEntryPrice":0E-8,
        //                     "posCostEv":0,
        //                     "posCost":0E-8,
        //                     "assignedPosBalanceEv":0,
        //                     "assignedPosBalance":0E-8,
        //                     "bankruptCommEv":0,
        //                     "bankruptComm":0E-8,
        //                     "bankruptPriceEp":0,
        //                     "bankruptPrice":0E-8,
        //                     "positionMarginEv":0,
        //                     "positionMargin":0E-8,
        //                     "liquidationPriceEp":0,
        //                     "liquidationPrice":0E-8,
        //                     "deleveragePercentileEr":0,
        //                     "deleveragePercentile":0E-8,
        //                     "buyValueToCostEr":1150750,
        //                     "buyValueToCost":0.01150750,
        //                     "sellValueToCostEr":1149250,
        //                     "sellValueToCost":0.01149250,
        //                     "markPriceEp":96359083,
        //                     "markPrice":9635.90830000,
        //                     "markValueEv":0,
        //                     "markValue":null,
        //                     "unRealisedPosLossEv":0,
        //                     "unRealisedPosLoss":null,
        //                     "estimatedOrdLossEv":0,
        //                     "estimatedOrdLoss":0E-8,
        //                     "usedBalanceEv":0,
        //                     "usedBalance":0E-8,
        //                     "takeProfitEp":0,
        //                     "takeProfit":null,
        //                     "stopLossEp":0,
        //                     "stopLoss":null,
        //                     "realisedPnlEv":0,
        //                     "realisedPnl":null,
        //                     "cumRealisedPnlEv":0,
        //                     "cumRealisedPnl":null
        //                 }
        //             ]
        //         }
        //     }
        //
        const result = (type === 'swap') ? this.parseSwapBalance(response) : this.parseSpotBalance(response);
        return result;
    }
    parseOrderStatus(status) {
        const statuses = {
            'Created': 'open',
            'Untriggered': 'open',
            'Deactivated': 'closed',
            'Triggered': 'open',
            'Rejected': 'rejected',
            'New': 'open',
            'PartiallyFilled': 'open',
            'Filled': 'closed',
            'Canceled': 'canceled',
            '1': 'open',
            '5': 'open',
            '6': 'open',
            '7': 'closed',
            '8': 'canceled',
        };
        return this.safeString(statuses, status, status);
    }
    parseOrderType(type) {
        const types = {
            '1': 'market',
            '2': 'limit',
            '3': 'stop',
            '4': 'stopLimit',
            '5': 'market',
            '6': 'limit',
            '7': 'market',
            '8': 'market',
            '9': 'stopLimit',
            '10': 'market',
            'Limit': 'limit',
            'Market': 'market',
            'MarketIfTouched': 'stop',
            'LimitIfTouched': 'stopLimit',
        };
        return this.safeString(types, type, type);
    }
    parseTimeInForce(timeInForce) {
        const timeInForces = {
            'GoodTillCancel': 'GTC',
            'PostOnly': 'PO',
            'ImmediateOrCancel': 'IOC',
            'FillOrKill': 'FOK',
        };
        return this.safeString(timeInForces, timeInForce, timeInForce);
    }
    formatTimeInForce(timeInForce) {
        const timeInForces = {
            'GTC': 'GoodTillCancel',
            'PO': 'PostOnly',
            'IOC': 'ImmediateOrCancel',
            'FOK': 'FillOrKill',
        };
        return this.safeString(timeInForces, timeInForce.toUpperCase(), timeInForce);
    }
    parseTriggerType(triggerType) {
        const triggerTypes = {
            'ByMarkPrice': 'mark',
            'ByLastPrice': 'last',
        };
        return this.safeString(triggerTypes, triggerType, triggerType);
    }
    formatTriggerType(triggerType) {
        const triggerTypes = {
            'mark': 'ByMarkPrice',
            'last': 'ByLastPrice',
        };
        return this.safeString(triggerTypes, triggerType.toLowerCase(), triggerType);
    }
    parseSpotOrder(order, market = undefined) {
        //
        // spot
        //
        //     {
        //         "orderID": "d1d09454-cabc-4a23-89a7-59d43363f16d",
        //         "clOrdID": "309bcd5c-9f6e-4a68-b775-4494542eb5cb",
        //         "priceEp": 0,
        //         "action": "New",
        //         "trigger": "UNSPECIFIED",
        //         "pegPriceType": "UNSPECIFIED",
        //         "stopDirection": "UNSPECIFIED",
        //         "bizError": 0,
        //         "symbol": "sBTCUSDT",
        //         "side": "Buy",
        //         "baseQtyEv": 0,
        //         "ordType": "Limit",
        //         "timeInForce": "GoodTillCancel",
        //         "ordStatus": "Created",
        //         "cumFeeEv": 0,
        //         "cumBaseQtyEv": 0,
        //         "cumQuoteQtyEv": 0,
        //         "leavesBaseQtyEv": 0,
        //         "leavesQuoteQtyEv": 0,
        //         "avgPriceEp": 0,
        //         "cumBaseAmountEv": 0,
        //         "cumQuoteAmountEv": 0,
        //         "quoteQtyEv": 0,
        //         "qtyType": "ByBase",
        //         "stopPxEp": 0,
        //         "pegOffsetValueEp": 0
        //     }
        //
        //     {
        //         "orderID":"99232c3e-3d6a-455f-98cc-2061cdfe91bc",
        //         "stopPxEp":0,
        //         "avgPriceEp":0,
        //         "qtyType":"ByBase",
        //         "leavesBaseQtyEv":0,
        //         "leavesQuoteQtyEv":0,
        //         "baseQtyEv":"1000000000",
        //         "feeCurrency":"4",
        //         "stopDirection":"UNSPECIFIED",
        //         "symbol":"sETHUSDT",
        //         "side":"Buy",
        //         "quoteQtyEv":250000000000,
        //         "priceEp":25000000000,
        //         "ordType":"Limit",
        //         "timeInForce":"GoodTillCancel",
        //         "ordStatus":"Rejected",
        //         "execStatus":"NewRejected",
        //         "createTimeNs":1592675305266037130,
        //         "cumFeeEv":0,
        //         "cumBaseValueEv":0,
        //         "cumQuoteValueEv":0
        //     }
        //
        const id = this.safeString(order, 'orderID');
        let clientOrderId = this.safeString(order, 'clOrdID');
        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {
            clientOrderId = undefined;
        }
        const marketId = this.safeString(order, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const price = this.fromEp(this.safeString(order, 'priceEp'), market);
        const amount = this.fromEv(this.safeString(order, 'baseQtyEv'), market);
        const remaining = this.omitZero(this.fromEv(this.safeString(order, 'leavesBaseQtyEv'), market));
        const filled = this.fromEv(this.safeString2(order, 'cumBaseQtyEv', 'cumBaseValueEv'), market);
        const cost = this.fromEv(this.safeString2(order, 'cumQuoteValueEv', 'quoteQtyEv'), market);
        const average = this.fromEp(this.safeString(order, 'avgPriceEp'), market);
        const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
        const side = this.safeStringLower(order, 'side');
        const type = this.parseOrderType(this.safeString(order, 'ordType'));
        const timestamp = this.safeIntegerProduct2(order, 'actionTimeNs', 'createTimeNs', 0.000001);
        let fee = undefined;
        const feeCost = this.fromEv(this.safeString(order, 'cumFeeEv'), market);
        if (feeCost !== undefined) {
            fee = {
                'cost': feeCost,
                'currency': undefined,
            };
        }
        const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
        const stopPrice = this.parseNumber(this.omitZero(this.fromEp(this.safeString(order, 'stopPxEp', market))));
        const postOnly = (timeInForce === 'PO');
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': undefined,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': stopPrice,
            'amount': amount,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee,
            'trades': undefined,
        }, market);
    }
    parseOrderSide(side) {
        const sides = {
            '1': 'buy',
            '2': 'sell',
        };
        return this.safeString(sides, side, side);
    }
    parseSwapOrder(order, market = undefined) {
        //
        //     {
        //         "bizError":0,
        //         "orderID":"7a1ad384-44a3-4e54-a102-de4195a29e32",
        //         "clOrdID":"",
        //         "symbol":"ETHUSD",
        //         "side":"Buy",
        //         "actionTimeNs":1592668973945065381,
        //         "transactTimeNs":0,
        //         "orderType":"Market",
        //         "priceEp":2267500,
        //         "price":226.75000000,
        //         "orderQty":1,
        //         "displayQty":0,
        //         "timeInForce":"ImmediateOrCancel",
        //         "reduceOnly":false,
        //         "closedPnlEv":0,
        //         "closedPnl":0E-8,
        //         "closedSize":0,
        //         "cumQty":0,
        //         "cumValueEv":0,
        //         "cumValue":0E-8,
        //         "leavesQty":1,
        //         "leavesValueEv":11337,
        //         "leavesValue":1.13370000,
        //         "stopDirection":"UNSPECIFIED",
        //         "stopPxEp":0,
        //         "stopPx":0E-8,
        //         "trigger":"UNSPECIFIED",
        //         "pegOffsetValueEp":0,
        //         "execStatus":"PendingNew",
        //         "pegPriceType":"UNSPECIFIED",
        //         "ordStatus":"Created",
        //         "execInst": "ReduceOnly"
        //     }
        //
        // usdt
        // {
        //        "bizError":"0",
        //        "orderID":"bd720dff-5647-4596-aa4e-656bac87aaad",
        //        "clOrdID":"ccxt2022843dffac9477b497",
        //        "symbol":"LTCUSDT",
        //        "side":"Buy",
        //        "actionTimeNs":"1677667878751724052",
        //        "transactTimeNs":"1677667878754017434",
        //        "orderType":"Limit",
        //        "priceRp":"40",
        //        "orderQtyRq":"0.1",
        //        "displayQtyRq":"0.1",
        //        "timeInForce":"GoodTillCancel",
        //        "reduceOnly":false,
        //        "closedPnlRv":"0",
        //        "closedSizeRq":"0",
        //        "cumQtyRq":"0",
        //        "cumValueRv":"0",
        //        "leavesQtyRq":"0.1",
        //        "leavesValueRv":"4",
        //        "stopDirection":"UNSPECIFIED",
        //        "stopPxRp":"0",
        //        "trigger":"UNSPECIFIED",
        //        "pegOffsetValueRp":"0",
        //        "pegOffsetProportionRr":"0",
        //        "execStatus":"New",
        //        "pegPriceType":"UNSPECIFIED",
        //        "ordStatus":"New",
        //        "execInst":"None",
        //        "takeProfitRp":"0",
        //        "stopLossRp":"0"
        //     }
        //
        // v2 orderList
        //    {
        //        "createdAt":"1677686231301",
        //        "symbol":"LTCUSDT",
        //        "orderQtyRq":"0.2",
        //        "side":"1",
        //        "posSide":"3",
        //        "priceRp":"50",
        //        "execQtyRq":"0",
        //        "leavesQtyRq":"0.2",
        //        "execPriceRp":"0",
        //        "orderValueRv":"10",
        //        "leavesValueRv":"10",
        //        "cumValueRv":"0",
        //        "stopDirection":"0",
        //        "stopPxRp":"0",
        //        "trigger":"0",
        //        "actionBy":"1",
        //        "execFeeRv":"0",
        //        "ordType":"2",
        //        "ordStatus":"5",
        //        "clOrdId":"4b3b188",
        //        "orderId":"4b3b1884-87cf-4897-b596-6693b7ed84d1",
        //        "execStatus":"5",
        //        "bizError":"0",
        //        "totalPnlRv":null,
        //        "avgTransactPriceRp":null,
        //        "orderDetailsVos":null,
        //        "tradeType":"0"
        //    }
        //
        const id = this.safeString2(order, 'orderID', 'orderId');
        let clientOrderId = this.safeString2(order, 'clOrdID', 'clOrdId');
        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {
            clientOrderId = undefined;
        }
        const marketId = this.safeString(order, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
        const side = this.parseOrderSide(this.safeStringLower(order, 'side'));
        const type = this.parseOrderType(this.safeString2(order, 'orderType', 'ordType'));
        let price = this.safeString(order, 'priceRp');
        if (price === undefined) {
            price = this.fromEp(this.safeString(order, 'priceEp'), market);
        }
        const amount = this.safeNumber2(order, 'orderQty', 'orderQtyRq');
        const filled = this.safeNumber2(order, 'cumQty', 'cumQtyRq');
        const remaining = this.safeNumber2(order, 'leavesQty', 'leavesQtyRq');
        let timestamp = this.safeIntegerProduct(order, 'actionTimeNs', 0.000001);
        if (timestamp === undefined) {
            timestamp = this.safeInteger(order, 'createdAt');
        }
        const cost = this.safeNumber2(order, 'cumValue', 'cumValueRv');
        let lastTradeTimestamp = this.safeIntegerProduct(order, 'transactTimeNs', 0.000001);
        if (lastTradeTimestamp === 0) {
            lastTradeTimestamp = undefined;
        }
        const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
        const stopPrice = this.safeNumber2(order, 'stopPx', 'stopPxRp') || null;
        const postOnly = (timeInForce === 'PO');
        let reduceOnly = this.safeValue(order, 'reduceOnly');
        let close = this.safeValue(order, 'closeOnTrigger');
        const execInst = this.safeString(order, 'execInst', '');
        if (execInst.indexOf('ReduceOnly') >= 0) {
            reduceOnly = true;
        }
        if (execInst.indexOf('CloseOnTrigger') >= 0) {
            close = true;
        }
        const trigger = this.parseTriggerType(this.safeStringN(order, ['trigger', 'slTrigger', 'tpTrigger']));
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'datetime': this.iso8601(timestamp),
            'timestamp': timestamp,
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': stopPrice,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': cost,
            'average': undefined,
            'status': status,
            'fee': undefined,
            'trades': undefined,
            'reduceOnly': reduceOnly,
            'postOnly': postOnly,
            'close': close,
            'trigger': trigger,
        });
    }
    parseOrder(order, market = undefined) {
        const isSwap = this.safeValue(market, 'swap', false);
        const hasPnl = ('closedPnl' in order);
        if (isSwap || hasPnl) {
            return this.parseSwapOrder(order, market);
        }
        return this.parseSpotOrder(order, market);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name phemex#createOrder
         * @description create a trade order
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#place-order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        side = this.capitalize(side);
        type = this.capitalize(type);
        const reduceOnly = this.safeValue2(params, 'reduce', 'reduceOnly');
        const closeOnTrigger = this.safeValue2(params, 'close', 'closeOnTrigger');
        const request = {
            // common
            'symbol': market['id'],
            'side': side,
            'ordType': type, // Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched (additionally for contract-markets: MarketAsLimit, StopAsLimit, MarketIfTouchedAsLimit)
            // 'stopPxEp': this.toEp (stopPx, market), // for conditional orders
            // 'priceEp': this.toEp (price, market), // required for limit orders
            // 'timeInForce': 'GoodTillCancel', // GoodTillCancel, PostOnly, ImmediateOrCancel, FillOrKill
            // ----------------------------------------------------------------
            // spot
            // 'qtyType': 'ByBase', // ByBase, ByQuote
            // 'quoteQtyEv': this.toEp (cost, market),
            // 'baseQtyEv': this.toEv (amount, market),
            // 'trigger': 'ByLastPrice', // required for conditional orders
            // ----------------------------------------------------------------
            // swap
            // 'clOrdID': this.uuid (), // max length 40
            // 'orderQty': this.amountToPrecision (amount, symbol),
            // 'reduceOnly': false,
            // 'closeOnTrigger': false, // implicit reduceOnly and cancel other orders in the same direction
            // 'takeProfitEp': this.toEp (takeProfit, market),
            // 'stopLossEp': this.toEp (stopLossEp, market),
            // 'triggerType': 'ByMarkPrice', // ByMarkPrice, ByLastPrice
            // 'pegOffsetValueEp': integer, // Trailing offset from current price. Negative value when position is long, positive when position is short
            // 'pegPriceType': 'TrailingStopPeg', // TrailingTakeProfitPeg
            // 'text': 'comment',
            // 'posSide': Position direction - "Merged" for oneway mode , "Long" / "Short" for hedge mode
        };
        const timeInForce = this.formatTimeInForce(this.safeString(params, 'timeInForce'));
        if (timeInForce !== undefined) {
            request['timeInForce'] = timeInForce;
        }
        const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
        if (clientOrderId === undefined) {
            const brokerId = this.safeString(this.options, 'brokerId');
            if (brokerId !== undefined) {
                request['clOrdID'] = brokerId + '_' + this.uuid16();
            }
        }
        else {
            request['clOrdID'] = clientOrderId;
            params = this.omit(params, ['clOrdID', 'clientOrderId']);
        }
        const stopPrice = this.safeString2(params, 'stopPx', 'stopPrice');
        let formattedStopPrice = undefined;
        if (stopPrice !== undefined) {
            if (market['settle'] === 'USDT') {
                request['stopPxRp'] = this.priceToPrecision(symbol, stopPrice);
                formattedStopPrice = this.safeFloat(request, 'stopPxRp');
            }
            else {
                request['stopPxEp'] = this.toEp(stopPrice, market);
                formattedStopPrice = this.safeFloat(request, 'stopPxEp');
            }
        }
        params = this.omit(params, ['stopPx', 'stopPrice']);
        if (market['spot']) {
            let qtyType = this.safeValue(params, 'qtyType', 'ByBase');
            if ((type === 'Market') || (type === 'Stop') || (type === 'MarketIfTouched')) {
                if (price !== undefined) {
                    qtyType = 'ByQuote';
                }
            }
            request['qtyType'] = qtyType;
            if (qtyType === 'ByQuote') {
                let cost = this.safeNumber(params, 'cost');
                params = this.omit(params, 'cost');
                if (this.options['createOrderByQuoteRequiresPrice']) {
                    if (price !== undefined) {
                        const amountString = this.numberToString(amount);
                        const priceString = this.numberToString(price);
                        const quoteAmount = Precise.stringMul(amountString, priceString);
                        cost = this.parseNumber(quoteAmount);
                    }
                    else if (cost === undefined) {
                        throw new ArgumentsRequired(this.id + ' createOrder() ' + qtyType + ' requires a price argument or a cost parameter');
                    }
                }
                cost = (cost === undefined) ? amount : cost;
                const costString = cost.toString();
                request['quoteQtyEv'] = this.toEv(costString, market);
            }
            else {
                const amountString = amount.toString();
                request['baseQtyEv'] = this.toEv(amountString, market);
            }
        }
        else if (market['swap']) {
            request['posSide'] = this.formatPosSide(side, params);
            if (reduceOnly !== undefined) {
                request['reduceOnly'] = reduceOnly;
            }
            if (market['settle'] === 'USDT') {
                request['orderQtyRq'] = amount;
            }
            else {
                request['orderQty'] = parseInt(amount);
            }
            if (formattedStopPrice !== undefined) {
                const triggerType = this.formatTriggerType(this.safeString2(params, 'trigger', 'triggerType', 'ByMarkPrice'));
                request['triggerType'] = triggerType;
                if (closeOnTrigger !== undefined) {
                    request['closeOnTrigger'] = closeOnTrigger;
                }
                const basePrice = this.safeFloat(params, 'basePrice');
                if (basePrice !== undefined) {
                    if ((formattedStopPrice > basePrice && side === 'Sell') || (formattedStopPrice < basePrice && side === 'Buy')) {
                        if (type === 'Stop') {
                            type = 'MarketIfTouched';
                            request['ordType'] = type;
                        }
                        else if (type === 'StopLimit') {
                            type = 'LimitIfTouched';
                            request['ordType'] = type;
                        }
                    }
                }
            }
        }
        if ((type === 'Limit') || (type === 'StopLimit') || (type === 'LimitIfTouched')) {
            if (market['settle'] === 'USDT') {
                request['priceRp'] = this.priceToPrecision(symbol, price);
            }
            else {
                const priceString = this.numberToString(price);
                request['priceEp'] = this.toEp(priceString, market);
            }
        }
        const takeProfitPrice = this.safeString(params, 'takeProfitPrice');
        if (takeProfitPrice !== undefined) {
            if (market['settle'] === 'USDT') {
                request['takeProfitRp'] = this.priceToPrecision(symbol, takeProfitPrice);
            }
            else {
                request['takeProfitEp'] = this.toEp(takeProfitPrice, market);
            }
            params = this.omit(params, 'takeProfitPrice');
        }
        const stopLossPrice = this.safeString(params, 'stopLossPrice');
        if (stopLossPrice !== undefined) {
            if (market['settle'] === 'USDT') {
                request['stopLossRp'] = this.priceToPrecision(symbol, stopLossPrice);
            }
            else {
                request['stopLossEp'] = this.toEp(stopLossPrice, market);
            }
            params = this.omit(params, 'stopLossPrice');
        }
        let method = 'privatePostSpotOrders';
        if (market['settle'] === 'USDT') {
            method = 'privatePostGOrders';
        }
        else if (market['contract']) {
            method = 'privatePostOrders';
        }
        params = this.omit(params, 'reduceOnly', 'timeInForce', 'closeOnTrigger', 'close', 'basePrice', 'positionMode');
        const response = await this[method](this.extend(request, params));
        //
        // spot
        //
        //     {
        //         "code": 0,
        //         "msg": "",
        //         "data": {
        //             "orderID": "d1d09454-cabc-4a23-89a7-59d43363f16d",
        //             "clOrdID": "309bcd5c-9f6e-4a68-b775-4494542eb5cb",
        //             "priceEp": 0,
        //             "action": "New",
        //             "trigger": "UNSPECIFIED",
        //             "pegPriceType": "UNSPECIFIED",
        //             "stopDirection": "UNSPECIFIED",
        //             "bizError": 0,
        //             "symbol": "sBTCUSDT",
        //             "side": "Buy",
        //             "baseQtyEv": 0,
        //             "ordType": "Limit",
        //             "timeInForce": "GoodTillCancel",
        //             "ordStatus": "Created",
        //             "cumFeeEv": 0,
        //             "cumBaseQtyEv": 0,
        //             "cumQuoteQtyEv": 0,
        //             "leavesBaseQtyEv": 0,
        //             "leavesQuoteQtyEv": 0,
        //             "avgPriceEp": 0,
        //             "cumBaseAmountEv": 0,
        //             "cumQuoteAmountEv": 0,
        //             "quoteQtyEv": 0,
        //             "qtyType": "ByBase",
        //             "stopPxEp": 0,
        //             "pegOffsetValueEp": 0
        //         }
        //     }
        //
        // swap
        //
        //     {
        //         "code":0,
        //         "msg":"",
        //         "data":{
        //             "bizError":0,
        //             "orderID":"7a1ad384-44a3-4e54-a102-de4195a29e32",
        //             "clOrdID":"",
        //             "symbol":"ETHUSD",
        //             "side":"Buy",
        //             "actionTimeNs":1592668973945065381,
        //             "transactTimeNs":0,
        //             "orderType":"Market",
        //             "priceEp":2267500,
        //             "price":226.75000000,
        //             "orderQty":1,
        //             "displayQty":0,
        //             "timeInForce":"ImmediateOrCancel",
        //             "reduceOnly":false,
        //             "closedPnlEv":0,
        //             "closedPnl":0E-8,
        //             "closedSize":0,
        //             "cumQty":0,
        //             "cumValueEv":0,
        //             "cumValue":0E-8,
        //             "leavesQty":1,
        //             "leavesValueEv":11337,
        //             "leavesValue":1.13370000,
        //             "stopDirection":"UNSPECIFIED",
        //             "stopPxEp":0,
        //             "stopPx":0E-8,
        //             "trigger":"UNSPECIFIED",
        //             "pegOffsetValueEp":0,
        //             "execStatus":"PendingNew",
        //             "pegPriceType":"UNSPECIFIED",
        //             "ordStatus":"Created"
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseOrder(data, market);
    }
    formatPosSide(side, params = {}) {
        side = this.capitalize(side);
        let posSide = this.safeStringLower2(params, 'positionMode', 'posSide');
        const reduceOnly = this.safeValue2(params, 'reduce', 'reduceOnly');
        const closeOnTrigger = this.safeValue2(params, 'close', 'closeOnTrigger');
        if (posSide === 'oneway') {
            posSide = 'Merged';
        }
        else if (posSide === 'hedged' || posSide === 'hedge') {
            if (side === 'Buy') {
                if (reduceOnly || closeOnTrigger) {
                    posSide = 'Short';
                }
                else {
                    posSide = 'Long';
                }
            }
            else {
                if (reduceOnly || closeOnTrigger) {
                    posSide = 'Long';
                }
                else {
                    posSide = 'Short';
                }
            }
        }
        if (posSide === undefined) {
            posSide = 'Merged';
        }
        return this.capitalize(posSide);
    }
    async editOrder(id, symbol, type = undefined, side = undefined, amount = undefined, price = undefined, params = {}) {
        /**
         * @method
         * @name phemex#editOrder
         * @description edit a trade order
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#amend-order-by-orderid
         * @param {string} id cancel order id
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the base currency, ignored in market orders
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @param {string|undefined} params.posSide either 'Hedged' or 'OneWay' or 'Merged'
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' editOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');
        params = this.omit(params, ['clientOrderId', 'clOrdID']);
        const isUSDTSettled = (market['settle'] === 'USDT');
        if (clientOrderId !== undefined) {
            request['clOrdID'] = clientOrderId;
        }
        else {
            request['orderID'] = id;
        }
        if (price !== undefined) {
            if (isUSDTSettled) {
                request['priceRp'] = this.priceToPrecision(market['symbol'], price);
            }
            else {
                request['priceEp'] = this.toEp(price, market);
            }
        }
        // Note the uppercase 'V' in 'baseQtyEV' request. that is exchange's requirement at this moment. However, to avoid mistakes from user side, let's support lowercased 'baseQtyEv' too
        const finalQty = this.safeString(params, 'baseQtyEv');
        params = this.omit(params, ['baseQtyEv']);
        if (finalQty !== undefined) {
            request['baseQtyEV'] = finalQty;
            // support 0 amount for full close stops
        }
        else if (amount !== undefined && amount > 0) {
            if (isUSDTSettled) {
                if (market['type'] === 'swap') {
                    request['orderQtyRq'] = this.amountToPrecision(market['symbol'], amount);
                }
                else {
                    request['baseQtyEV'] = this.amountToPrecision(market['symbol'], amount);
                }
            }
            else {
                request['baseQtyEV'] = this.toEv(amount, market);
            }
        }
        const stopPrice = this.safeString2(params, 'stopPx', 'stopPrice');
        if (stopPrice !== undefined) {
            if (isUSDTSettled) {
                request['stopPxRp'] = this.priceToPrecision(symbol, stopPrice);
            }
            else {
                request['stopPxEp'] = this.toEp(stopPrice, market);
            }
        }
        params = this.omit(params, ['stopPx', 'stopPrice']);
        let method = 'privatePutSpotOrders';
        if (market['inverse']) {
            method = 'privatePutOrdersReplace';
        }
        else if (isUSDTSettled) {
            method = 'privatePutGOrdersReplace';
            request['posSide'] = this.formatPosSide(side, params);
        }
        params = this.omit(params, ['reduceOnly', 'timeInForce', 'closeOnTrigger', 'close', 'basePrice', 'positionSide']);
        const response = await this[method](this.extend(request, params));
        const data = this.safeValue(response, 'data', {});
        return this.parseOrder(data, market);
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name phemex#cancelOrder
         * @description cancels an open order
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#cancel-single-order-by-orderid
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @param {string|undefined} params.posSide either 'Hedged' or 'OneWay' or 'Merged'
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');
        params = this.omit(params, ['clientOrderId', 'clOrdID']);
        if (clientOrderId !== undefined) {
            request['clOrdID'] = clientOrderId;
        }
        else {
            request['orderID'] = id;
        }
        let method = 'privateDeleteSpotOrders';
        if (market['inverse']) {
            method = 'privateDeleteOrdersCancel';
        }
        else if (market['settle'] === 'USDT') {
            method = 'privateDeleteGOrdersCancel';
            const side = this.safeString(params, 'side');
            request['posSide'] = this.formatPosSide(side, params);
        }
        params = this.omit(params, ['side']);
        const response = await this[method](this.extend(request, params));
        const data = this.safeValue(response, 'data', {});
        return this.parseOrder(data, market);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name phemex#cancelAllOrders
         * @description cancel all open orders in a market
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#cancelall
         * @param {string} symbol unified market symbol of the market to cancel orders in
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelAllOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const request = {
        // 'symbol': market['id'],
        // 'untriggerred': false, // false to cancel non-conditional orders, true to cancel conditional orders
        // 'text': 'up to 40 characters max',
        };
        const market = this.market(symbol);
        let method = 'privateDeleteSpotOrdersAll';
        if (market['inverse']) {
            method = 'privateDeleteOrdersAll';
        }
        else if (market['settle'] === 'USDT') {
            method = 'privateDeleteGOrdersAll';
        }
        request['symbol'] = market['id'];
        return await this[method](this.extend(request, params));
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['settle'] === 'USDT') {
            throw new NotSupported(this.id + 'fetchOrder() is not supported yet for USDT settled swap markets'); // https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-user-order-by-orderid-or-query-user-order-by-client-order-id
        }
        const method = market['spot'] ? 'privateGetSpotOrdersActive' : 'privateGetExchangeOrder';
        const request = {
            'symbol': market['id'],
        };
        const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');
        params = this.omit(params, ['clientOrderId', 'clOrdID']);
        if (clientOrderId !== undefined) {
            request['clOrdID'] = clientOrderId;
        }
        else {
            request['orderID'] = id;
        }
        const response = await this[method](this.extend(request, params));
        const data = this.safeValue(response, 'data', {});
        let order = data;
        if (Array.isArray(data)) {
            const numOrders = data.length;
            if (numOrders < 1) {
                if (clientOrderId !== undefined) {
                    throw new OrderNotFound(this.id + ' fetchOrder() ' + symbol + ' order with clientOrderId ' + clientOrderId + ' not found');
                }
                else {
                    throw new OrderNotFound(this.id + ' fetchOrder() ' + symbol + ' order with id ' + id + ' not found');
                }
            }
            order = this.safeValue(data, 0, {});
        }
        return this.parseOrder(order, market);
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchOrders
         * @description fetches information on multiple orders made by the user
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryorder
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let method = 'privateGetSpotOrders';
        if (market['inverse']) {
            method = 'privateGetExchangeOrderList';
        }
        else if (market['settle'] === 'USDT') {
            request['currency'] = market['settle'];
            method = 'privateGetExchangeOrderV2OrderList';
        }
        if (since !== undefined) {
            request['start'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, params));
        const data = this.safeValue(response, 'data', {});
        const rows = this.safeValue(data, 'rows', data);
        return this.parseOrders(rows, market, since, limit);
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchOpenOrders
         * @description fetch all unfilled currently open orders
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryopenorder
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch open orders for
         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        let method = 'privateGetSpotOrders';
        if (market['inverse']) {
            method = 'privateGetOrdersActiveList';
        }
        else if (market['settle'] === 'USDT') {
            method = 'privateGetGOrdersActiveList';
        }
        const request = {
            'symbol': market['id'],
        };
        let response = undefined;
        try {
            response = await this[method](this.extend(request, params));
        }
        catch (e) {
            if (e instanceof OrderNotFound) {
                return [];
            }
            throw e;
        }
        const data = this.safeValue(response, 'data', {});
        if (Array.isArray(data)) {
            return this.parseOrders(data, market, since, limit);
        }
        else {
            const rows = this.safeValue(data, 'rows', []);
            return this.parseOrders(rows, market, since, limit);
        }
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryorder
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let method = 'privateGetExchangeSpotOrder';
        if (market['inverse']) {
            method = 'privateGetExchangeOrderList';
        }
        else if (market['settle'] === 'USDT') {
            request['currency'] = market['settle'];
            method = 'privateGetExchangeOrderV2OrderList';
        }
        if (since !== undefined) {
            request['start'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, params));
        //
        // spot
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":{
        //             "total":8,
        //             "rows":[
        //                 {
        //                     "orderID":"99232c3e-3d6a-455f-98cc-2061cdfe91bc",
        //                     "stopPxEp":0,
        //                     "avgPriceEp":0,
        //                     "qtyType":"ByBase",
        //                     "leavesBaseQtyEv":0,
        //                     "leavesQuoteQtyEv":0,
        //                     "baseQtyEv":"1000000000",
        //                     "feeCurrency":"4",
        //                     "stopDirection":"UNSPECIFIED",
        //                     "symbol":"sETHUSDT",
        //                     "side":"Buy",
        //                     "quoteQtyEv":250000000000,
        //                     "priceEp":25000000000,
        //                     "ordType":"Limit",
        //                     "timeInForce":"GoodTillCancel",
        //                     "ordStatus":"Rejected",
        //                     "execStatus":"NewRejected",
        //                     "createTimeNs":1592675305266037130,
        //                     "cumFeeEv":0,
        //                     "cumBaseValueEv":0,
        //                     "cumQuoteValueEv":0
        //                 },
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        if (Array.isArray(data)) {
            return this.parseOrders(data, market, since, limit);
        }
        else {
            const rows = this.safeValue(data, 'rows', []);
            return this.parseOrders(rows, market, since, limit);
        }
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchMyTrades
         * @description fetch all trades made by the user
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#query-user-trade
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-user-trade
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        let method = 'privateGetExchangeSpotOrderTrades';
        if (market['swap']) {
            method = 'privateGetExchangeOrderTrade';
            if (market['settle'] === 'USDT') {
                method = 'privateGetExchangeOrderV2TradingList';
            }
        }
        const request = {};
        if (market['settle'] === 'USDT') {
            request['currency'] = 'USDT';
            request['offset'] = 0;
            limit = 200;
            if (limit !== undefined) {
                limit = Math.min(200, limit);
            }
            request['limit'] = limit;
        }
        else {
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start'] = since;
        }
        if (market['swap'] && (limit !== undefined)) {
            request['limit'] = limit;
        }
        const response = await this[method](this.extend(request, params));
        //
        // spot
        //
        //     {
        //         "code": 0,
        //         "msg": "OK",
        //         "data": {
        //             "total": 1,
        //             "rows": [
        //                 {
        //                     "qtyType": "ByQuote",
        //                     "transactTimeNs": 1589450974800550100,
        //                     "clOrdID": "8ba59d40-df25-d4b0-14cf-0703f44e9690",
        //                     "orderID": "b2b7018d-f02f-4c59-b4cf-051b9c2d2e83",
        //                     "symbol": "sBTCUSDT",
        //                     "side": "Buy",
        //                     "priceEP": 970056000000,
        //                     "baseQtyEv": 0,
        //                     "quoteQtyEv": 1000000000,
        //                     "action": "New",
        //                     "execStatus": "MakerFill",
        //                     "ordStatus": "Filled",
        //                     "ordType": "Limit",
        //                     "execInst": "None",
        //                     "timeInForce": "GoodTillCancel",
        //                     "stopDirection": "UNSPECIFIED",
        //                     "tradeType": "Trade",
        //                     "stopPxEp": 0,
        //                     "execId": "c6bd8979-07ba-5946-b07e-f8b65135dbb1",
        //                     "execPriceEp": 970056000000,
        //                     "execBaseQtyEv": 103000,
        //                     "execQuoteQtyEv": 999157680,
        //                     "leavesBaseQtyEv": 0,
        //                     "leavesQuoteQtyEv": 0,
        //                     "execFeeEv": 0,
        //                     "feeRateEr": 0
        //                 }
        //             ]
        //         }
        //     }
        //
        //
        // swap
        //
        //     {
        //         "code": 0,
        //         "msg": "OK",
        //         "data": {
        //             "total": 79,
        //             "rows": [
        //                 {
        //                     "transactTimeNs": 1606054879331565300,
        //                     "symbol": "BTCUSD",
        //                     "currency": "BTC",
        //                     "action": "New",
        //                     "side": "Buy",
        //                     "tradeType": "Trade",
        //                     "execQty": 5,
        //                     "execPriceEp": 182990000,
        //                     "orderQty": 5,
        //                     "priceEp": 183870000,
        //                     "execValueEv": 27323,
        //                     "feeRateEr": 75000,
        //                     "execFeeEv": 21,
        //                     "ordType": "Market",
        //                     "execID": "5eee56a4-04a9-5677-8eb0-c2fe22ae3645",
        //                     "orderID": "ee0acb82-f712-4543-a11d-d23efca73197",
        //                     "clOrdID": "",
        //                     "execStatus": "TakerFill"
        //                 },
        //             ]
        //         }
        //     }
        //
        // swap - usdt
        //
        // {
        //     "code": 0,
        //     "msg": "OK",
        //     "data": {
        //         "total": 4,
        //         "rows": [
        //             {
        //                 "createdAt": 1666226932259,
        //                 "symbol": "ETHUSDT",
        //                 "currency": "USDT",
        //                 "action": 1,
        //                 "tradeType": 1,
        //                 "execQtyRq": "0.01",
        //                 "execPriceRp": "1271.9",
        //                 "side": 1,
        //                 "orderQtyRq": "0.78",
        //                 "priceRp": "1271.9",
        //                 "execValueRv": "12.719",
        //                 "feeRateRr": "0.0001",
        //                 "execFeeRv": "0.0012719",
        //                 "ordType": 2,
        //                 "execId": "8718cae",
        //                 "execStatus": 6
        //             },
        //         ]
        //     }
        // }
        //
        const data = this.safeValue(response, 'data', {});
        if (method !== 'privateGetExchangeOrderV2TradingList') {
            const rows = this.safeValue(data, 'rows', []);
            return this.parseTrades(rows, market, since, limit);
        }
        return this.parseTrades(data, market, since, limit);
    }
    async fetchDepositAddress(code, params = {}) {
        /**
         * @method
         * @name phemex#fetchDepositAddress
         * @description fetch the deposit address for a currency associated with this account
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'currency': currency['id'],
        };
        const defaultNetworks = this.safeValue(this.options, 'defaultNetworks');
        const defaultNetwork = this.safeStringUpper(defaultNetworks, code);
        const networks = this.safeValue(this.options, 'networks', {});
        let network = this.safeStringUpper(params, 'network', defaultNetwork);
        network = this.safeString(networks, network, network);
        if (network === undefined) {
            request['chainName'] = currency['id'];
        }
        else {
            request['chainName'] = network;
            params = this.omit(params, 'network');
        }
        const response = await this.privateGetPhemexUserWalletsV2DepositAddress(this.extend(request, params));
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":{
        //             "address":"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad",
        //             "tag":null
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        const address = this.safeString(data, 'address');
        const tag = this.safeString(data, 'tag');
        this.checkAddress(address);
        return {
            'currency': code,
            'address': address,
            'tag': tag,
            'network': undefined,
            'info': response,
        };
    }
    async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchDeposits
         * @description fetch all deposits made to an account
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch deposits for
         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
        }
        const response = await this.privateGetExchangeWalletsDepositList(params);
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":[
        //             {
        //                 "id":29200,
        //                 "currency":"USDT",
        //                 "currencyCode":3,
        //                 "txHash":"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d",
        //                 "address":"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad",
        //                 "amountEv":3000000000,
        //                 "confirmations":13,
        //                 "type":"Deposit",
        //                 "status":"Success",
        //                 "createdAt":1592722565000
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseTransactions(data, currency, since, limit);
    }
    async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchWithdrawals
         * @description fetch all withdrawals made from an account
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        await this.loadMarkets();
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
        }
        const response = await this.privateGetExchangeWalletsWithdrawList(params);
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":[
        //             {
        //                 "address": "1Lxxxxxxxxxxx"
        //                 "amountEv": 200000
        //                 "currency": "BTC"
        //                 "currencyCode": 1
        //                 "expiredTime": 0
        //                 "feeEv": 50000
        //                 "rejectReason": null
        //                 "status": "Succeed"
        //                 "txHash": "44exxxxxxxxxxxxxxxxxxxxxx"
        //                 "withdrawStatus: ""
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseTransactions(data, currency, since, limit);
    }
    parseTransactionStatus(status) {
        const statuses = {
            'Success': 'ok',
            'Succeed': 'ok',
        };
        return this.safeString(statuses, status, status);
    }
    parseTransaction(transaction, currency = undefined) {
        //
        // withdraw
        //
        //     ...
        //
        // fetchDeposits
        //
        //     {
        //         "id":29200,
        //         "currency":"USDT",
        //         "currencyCode":3,
        //         "txHash":"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d",
        //         "address":"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad",
        //         "amountEv":3000000000,
        //         "confirmations":13,
        //         "type":"Deposit",
        //         "status":"Success",
        //         "createdAt":1592722565000
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "address": "1Lxxxxxxxxxxx"
        //         "amountEv": 200000
        //         "currency": "BTC"
        //         "currencyCode": 1
        //         "expiredTime": 0
        //         "feeEv": 50000
        //         "rejectReason": null
        //         "status": "Succeed"
        //         "txHash": "44exxxxxxxxxxxxxxxxxxxxxx"
        //         "withdrawStatus: ""
        //     }
        //
        const id = this.safeString(transaction, 'id');
        const address = this.safeString(transaction, 'address');
        const tag = undefined;
        const txid = this.safeString(transaction, 'txHash');
        const currencyId = this.safeString(transaction, 'currency');
        currency = this.safeCurrency(currencyId, currency);
        const code = currency['code'];
        const timestamp = this.safeInteger2(transaction, 'createdAt', 'submitedAt');
        let type = this.safeStringLower(transaction, 'type');
        const feeCost = this.parseNumber(this.fromEn(this.safeString(transaction, 'feeEv'), currency['valueScale']));
        let fee = undefined;
        if (feeCost !== undefined) {
            type = 'withdrawal';
            fee = {
                'cost': feeCost,
                'currency': code,
            };
        }
        const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));
        const amount = this.parseNumber(this.fromEn(this.safeString(transaction, 'amountEv'), currency['valueScale']));
        return {
            'info': transaction,
            'id': id,
            'txid': txid,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'network': undefined,
            'address': address,
            'addressTo': address,
            'addressFrom': undefined,
            'tag': tag,
            'tagTo': tag,
            'tagFrom': undefined,
            'type': type,
            'amount': amount,
            'currency': code,
            'status': status,
            'updated': undefined,
            'fee': fee,
        };
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const positions = await this.fetchPositions([symbol], params);
        const buyPosition = this.safeValue(positions, 0, {});
        const sellPosition = this.safeValue(positions, 1, {});
        const buyLeverage = this.safeFloat(buyPosition, 'leverage');
        const sellLeverage = this.safeFloat(sellPosition, 'leverage');
        const _marginMode = this.safeString(buyPosition, 'marginMode');
        let marginMode = 'cross';
        if (_marginMode === 'cross') {
            marginMode = 'cross';
        }
        else {
            marginMode = 'isolated';
        }
        const _positionMode = this.safeString(buyPosition, 'positionMode');
        let positionMode = 'oneway';
        if (_positionMode === 'hedged') {
            positionMode = 'hedged';
        }
        else {
            positionMode = 'oneway';
        }
        const accountConfig = {
            'marginMode': marginMode,
            'positionMode': positionMode,
            'markets': {},
            'info': positions,
        };
        const leverageConfigs = accountConfig['markets'];
        leverageConfigs[market['symbol']] = {
            'buyLeverage': buyLeverage,
            'leverage': buyLeverage,
            'sellLeverage': sellLeverage,
            'positionMode': positionMode,
        };
        return accountConfig;
    }
    async fetchAllPositions(params = {}) {
        /**
         * @method
         * @name phemex#fetchAllPositions
         * @description fetch all open positions for all currencies
         */
        const settleCurrencies = ['USDT', 'USD', 'BTC'];
        let promises = [];
        for (let i = 0; i < settleCurrencies.length; i++) {
            promises.push(this.fetchPositions(undefined, { 'settle': settleCurrencies[i] }));
        }
        promises = await Promise.all(promises);
        let result = [];
        for (let i = 0; i < promises.length; i++) {
            result = this.arrayConcat(result, promises[i]);
        }
        return result;
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchPositions
         * @description fetch all open positions
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#query-trading-account-and-positions
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-account-positions
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        let subType = undefined;
        let method = 'privateGetAccountsAccountPositions';
        let code = this.safeString(params, 'currency');
        let settle = undefined;
        let market = undefined;
        const firstSymbol = this.safeString(symbols, 0);
        if (firstSymbol !== undefined) {
            market = this.market(firstSymbol);
            settle = market['settle'];
            code = market['settle'];
        }
        else {
            [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', 'USD');
        }
        [subType, params] = this.handleSubTypeAndParams('fetchPositions', market, params);
        if (settle === 'USDT') {
            code = 'USDT';
            method = 'privateGetGAccountsAccountPositions';
        }
        else if (code === undefined) {
            code = (subType === 'linear') ? 'USD' : 'BTC';
        }
        else {
            params = this.omit(params, 'code');
        }
        const currency = this.currency(code);
        const request = {
            'currency': currency['id'],
        };
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code":0,"msg":"",
        //         "data":{
        //             "account":{
        //                 "accountId":6192120001,
        //                 "currency":"BTC",
        //                 "accountBalanceEv":1254744,
        //                 "totalUsedBalanceEv":0,
        //                 "bonusBalanceEv":1254744
        //             },
        //             "positions":[
        //                 {
        //                     "accountID":6192120001,
        //                     "symbol":"BTCUSD",
        //                     "currency":"BTC",
        //                     "side":"None",
        //                     "positionStatus":"Normal",
        //                     "crossMargin":false,
        //                     "leverageEr":100000000,
        //                     "leverage":1.00000000,
        //                     "initMarginReqEr":100000000,
        //                     "initMarginReq":1.00000000,
        //                     "maintMarginReqEr":500000,
        //                     "maintMarginReq":0.00500000,
        //                     "riskLimitEv":10000000000,
        //                     "riskLimit":100.00000000,
        //                     "size":0,
        //                     "value":0E-8,
        //                     "valueEv":0,
        //                     "avgEntryPriceEp":0,
        //                     "avgEntryPrice":0E-8,
        //                     "posCostEv":0,
        //                     "posCost":0E-8,
        //                     "assignedPosBalanceEv":0,
        //                     "assignedPosBalance":0E-8,
        //                     "bankruptCommEv":0,
        //                     "bankruptComm":0E-8,
        //                     "bankruptPriceEp":0,
        //                     "bankruptPrice":0E-8,
        //                     "positionMarginEv":0,
        //                     "positionMargin":0E-8,
        //                     "liquidationPriceEp":0,
        //                     "liquidationPrice":0E-8,
        //                     "deleveragePercentileEr":0,
        //                     "deleveragePercentile":0E-8,
        //                     "buyValueToCostEr":100225000,
        //                     "buyValueToCost":1.00225000,
        //                     "sellValueToCostEr":100075000,
        //                     "sellValueToCost":1.00075000,
        //                     "markPriceEp":135736070,
        //                     "markPrice":13573.60700000,
        //                     "markValueEv":0,
        //                     "markValue":null,
        //                     "unRealisedPosLossEv":0,
        //                     "unRealisedPosLoss":null,
        //                     "estimatedOrdLossEv":0,
        //                     "estimatedOrdLoss":0E-8,
        //                     "usedBalanceEv":0,
        //                     "usedBalance":0E-8,
        //                     "takeProfitEp":0,
        //                     "takeProfit":null,
        //                     "stopLossEp":0,
        //                     "stopLoss":null,
        //                     "cumClosedPnlEv":0,
        //                     "cumFundingFeeEv":0,
        //                     "cumTransactFeeEv":0,
        //                     "realisedPnlEv":0,
        //                     "realisedPnl":null,
        //                     "cumRealisedPnlEv":0,
        //                     "cumRealisedPnl":null
        //                 }
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        const positions = this.safeValue(data, 'positions', []);
        const result = [];
        for (let i = 0; i < positions.length; i++) {
            const position = positions[i];
            result.push(this.parsePosition(position));
        }
        return this.filterByArray(result, 'symbol', symbols, false);
    }
    parsePosition(position, market = undefined) {
        //
        //   {
        //     userID: '811370',
        //     accountID: '8113700002',
        //     symbol: 'ETHUSD',
        //     currency: 'USD',
        //     side: 'Buy',
        //     positionStatus: 'Normal',
        //     crossMargin: false,
        //     leverageEr: '200000000',
        //     leverage: '2.00000000',
        //     initMarginReqEr: '50000000',
        //     initMarginReq: '0.50000000',
        //     maintMarginReqEr: '1000000',
        //     maintMarginReq: '0.01000000',
        //     riskLimitEv: '5000000000',
        //     riskLimit: '500000.00000000',
        //     size: '1',
        //     value: '22.22370000',
        //     valueEv: '222237',
        //     avgEntryPriceEp: '44447400',
        //     avgEntryPrice: '4444.74000000',
        //     posCostEv: '111202',
        //     posCost: '11.12020000',
        //     assignedPosBalanceEv: '111202',
        //     assignedPosBalance: '11.12020000',
        //     bankruptCommEv: '84',
        //     bankruptComm: '0.00840000',
        //     bankruptPriceEp: '22224000',
        //     bankruptPrice: '2222.40000000',
        //     positionMarginEv: '111118',
        //     positionMargin: '11.11180000',
        //     liquidationPriceEp: '22669000',
        //     liquidationPrice: '2266.90000000',
        //     deleveragePercentileEr: '0',
        //     deleveragePercentile: '0E-8',
        //     buyValueToCostEr: '50112500',
        //     buyValueToCost: '0.50112500',
        //     sellValueToCostEr: '50187500',
        //     sellValueToCost: '0.50187500',
        //     markPriceEp: '31332499',
        //     markPrice: '3133.24990000',
        //     markValueEv: '0',
        //     markValue: null,
        //     unRealisedPosLossEv: '0',
        //     unRealisedPosLoss: null,
        //     estimatedOrdLossEv: '0',
        //     estimatedOrdLoss: '0E-8',
        //     usedBalanceEv: '111202',
        //     usedBalance: '11.12020000',
        //     takeProfitEp: '0',
        //     takeProfit: null,
        //     stopLossEp: '0',
        //     stopLoss: null,
        //     cumClosedPnlEv: '-1546',
        //     cumFundingFeeEv: '1605',
        //     cumTransactFeeEv: '8438',
        //     realisedPnlEv: '0',
        //     realisedPnl: null,
        //     cumRealisedPnlEv: '0',
        //     cumRealisedPnl: null,
        //     transactTimeNs: '1641571200001885324',
        //     takerFeeRateEr: '0',
        //     makerFeeRateEr: '0',
        //     term: '6',
        //     lastTermEndTimeNs: '1607711882505745356',
        //     lastFundingTimeNs: '1641571200000000000',
        //     curTermRealisedPnlEv: '-1567',
        //     execSeq: '12112761561'
        //   }
        //
        const marketId = this.safeString(position, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const collateral = this.safeString2(position, 'positionMargin', 'positionMarginRv');
        const notionalString = this.safeString2(position, 'value', 'valueRv');
        const maintenanceMarginPercentageString = this.safeString2(position, 'maintMarginReq', 'maintMarginReqRr');
        const maintenanceMarginString = Precise.stringMul(notionalString, maintenanceMarginPercentageString);
        const initialMarginString = this.safeStringN(position, ['posCostRv', 'assignedPosBalance', 'assignedPosBalanceRv']);
        const initialMarginPercentageString = Precise.stringDiv(initialMarginString, notionalString);
        const liquidationPrice = this.safeNumber2(position, 'liquidationPrice', 'liquidationPriceRp');
        const markPriceString = this.safeString2(position, 'markPrice', 'markPriceRp');
        const contractSize = this.safeValue(market, 'contractSize');
        const contractSizeString = this.numberToString(contractSize);
        let leverage = this.safeNumber2(position, 'leverage', 'leverageRr');
        let marginMode = 'isolated';
        if (leverage < 0) {
            marginMode = 'cross';
            leverage = -1 * leverage;
        }
        const entryPriceString = this.safeString2(position, 'avgEntryPrice', 'avgEntryPriceRp');
        const rawSide = this.safeString(position, 'side');
        const rawPosSide = this.safeString(position, 'posSide');
        let side = undefined;
        if (rawPosSide === 'Long') {
            side = 'long';
        }
        else if (rawPosSide === 'Short') {
            side = 'short';
        }
        else if (rawSide !== undefined) {
            side = (rawSide === 'Buy') ? 'long' : 'short';
        }
        let contracts = Math.abs(this.safeNumber(position, 'size', 0));
        if (side === 'short') {
            contracts = -1 * contracts;
        }
        const rawPosMode = this.safeString(position, 'posMode');
        let positionMode = 'oneway';
        let hedged = false;
        let id = undefined;
        if (rawPosMode === 'Hedged') {
            hedged = true;
            positionMode = 'hedged';
            id = symbol + ':' + side;
        }
        else {
            id = symbol;
        }
        let priceDiff = undefined;
        const currency = this.safeString(position, 'currency');
        if (currency === 'USD') {
            if (side === 'long') {
                priceDiff = Precise.stringSub(markPriceString, entryPriceString);
            }
            else {
                priceDiff = Precise.stringSub(entryPriceString, markPriceString);
            }
        }
        else {
            // inverse
            if (side === 'long') {
                priceDiff = Precise.stringSub(Precise.stringDiv('1', entryPriceString), Precise.stringDiv('1', markPriceString));
            }
            else {
                priceDiff = Precise.stringSub(Precise.stringDiv('1', markPriceString), Precise.stringDiv('1', entryPriceString));
            }
        }
        const contractsString = this.safeString(position, 'size');
        const unrealizedPnl = Precise.stringMul(Precise.stringMul(priceDiff, contractsString), contractSizeString);
        const percentage = Precise.stringMul(Precise.stringDiv(unrealizedPnl, initialMarginString), '100');
        const marginRatio = Precise.stringDiv(maintenanceMarginString, collateral);
        return {
            'info': position,
            'id': id,
            'symbol': symbol,
            'contracts': this.parseNumber(contracts),
            'contractSize': contractSize,
            'unrealizedPnl': this.parseNumber(unrealizedPnl),
            'leverage': leverage,
            'liquidationPrice': liquidationPrice,
            'collateral': this.parseNumber(collateral),
            'notional': this.parseNumber(notionalString),
            'markPrice': this.parseNumber(markPriceString),
            'entryPrice': this.parseNumber(entryPriceString),
            'timestamp': undefined,
            'initialMargin': this.parseNumber(initialMarginString),
            'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),
            'maintenanceMargin': this.parseNumber(maintenanceMarginString),
            'maintenanceMarginPercentage': this.parseNumber(maintenanceMarginPercentageString),
            'marginRatio': this.parseNumber(marginRatio),
            'datetime': undefined,
            'marginMode': marginMode,
            'side': side,
            'hedged': hedged,
            'positionMode': positionMode,
            'percentage': this.parseNumber(percentage),
        };
    }
    async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchFundingHistory
         * @description fetch the history of funding payments paid and received on this account
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#futureDataFundingFeesHist
         * @param {string} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch funding history for
         * @param {int|undefined} limit the maximum number of funding history structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
         */
        await this.loadMarkets();
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchFundingHistory() requires a symbol argument');
        }
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            // 'limit': 20, // Page size default 20, max 200
            // 'offset': 0, // Page start default 0
        };
        if (limit > 200) {
            throw new BadRequest(this.id + ' fetchFundingHistory() limit argument cannot exceed 200');
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        let method = 'privateGetApiDataFuturesFundingFees';
        if (market['settle'] === 'USDT') {
            method = 'privateGetApiDataGFuturesFundingFees';
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code": 0,
        //         "msg": "OK",
        //         "data": {
        //             "rows": [
        //                 {
        //                     "symbol": "BTCUSD",
        //                     "currency": "BTC",
        //                     "execQty": 18,
        //                     "side": "Buy",
        //                     "execPriceEp": 360086455,
        //                     "execValueEv": 49987,
        //                     "fundingRateEr": 10000,
        //                     "feeRateEr": 10000,
        //                     "execFeeEv": 5,
        //                     "createTime": 1651881600000
        //                 }
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        const rows = this.safeValue(data, 'rows', []);
        const result = [];
        for (let i = 0; i < rows.length; i++) {
            const entry = rows[i];
            const timestamp = this.safeInteger(entry, 'createTime');
            result.push({
                'info': entry,
                'symbol': this.safeString(entry, 'symbol'),
                'code': this.safeCurrencyCode(this.safeString(entry, 'currency')),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'id': undefined,
                'amount': this.fromEv(this.safeString(entry, 'execFeeEv'), market),
            });
        }
        return result;
    }
    async fetchFundingRate(symbol, params = {}) {
        /**
         * @method
         * @name phemex#fetchFundingRate
         * @description fetch the current funding rate
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['swap']) {
            throw new BadSymbol(this.id + ' fetchFundingRate() supports swap contracts only');
        }
        const request = {
            'symbol': market['id'],
        };
        let response = {};
        if (!market['linear']) {
            response = await this.v1GetMdTicker24hr(this.extend(request, params));
        }
        else {
            response = await this.v2GetMdV2Ticker24hr(this.extend(request, params));
        }
        //
        //     {
        //         "error": null,
        //         "id": 0,
        //         "result": {
        //             "askEp": 2332500,
        //             "bidEp": 2331000,
        //             "fundingRateEr": 10000,
        //             "highEp": 2380000,
        //             "indexEp": 2329057,
        //             "lastEp": 2331500,
        //             "lowEp": 2274000,
        //             "markEp": 2329232,
        //             "openEp": 2337500,
        //             "openInterest": 1298050,
        //             "predFundingRateEr": 19921,
        //             "symbol": "ETHUSD",
        //             "timestamp": 1592474241582701416,
        //             "turnoverEv": 47228362330,
        //             "volume": 4053863
        //         }
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseFundingRate(result, market);
    }
    parseFundingRate(contract, market = undefined) {
        //
        //     {
        //         "askEp": 2332500,
        //         "bidEp": 2331000,
        //         "fundingRateEr": 10000,
        //         "highEp": 2380000,
        //         "indexEp": 2329057,
        //         "lastEp": 2331500,
        //         "lowEp": 2274000,
        //         "markEp": 2329232,
        //         "openEp": 2337500,
        //         "openInterest": 1298050,
        //         "predFundingRateEr": 19921,
        //         "symbol": "ETHUSD",
        //         "timestamp": 1592474241582701416,
        //         "turnoverEv": 47228362330,
        //         "volume": 4053863
        //     }
        //
        // linear swap v2
        //
        //     {
        //         "closeRp":"16820.5",
        //         "fundingRateRr":"0.0001",
        //         "highRp":"16962.1",
        //         "indexPriceRp":"16830.15651565",
        //         "lowRp":"16785",
        //         "markPriceRp":"16830.97534951",
        //         "openInterestRv":"1323.596",
        //         "openRp":"16851.7",
        //         "predFundingRateRr":"0.0001",
        //         "symbol":"BTCUSDT",
        //         "timestamp":"1672142789065593096",
        //         "turnoverRv":"124835296.0538",
        //         "volumeRq":"7406.95"
        //     }
        //
        const marketId = this.safeString(contract, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const timestamp = this.safeIntegerProduct(contract, 'timestamp', 0.000001);
        return {
            'info': contract,
            'symbol': symbol,
            'markPrice': this.fromEp(this.safeString2(contract, 'markEp', 'markPriceRp'), market),
            'indexPrice': this.fromEp(this.safeString2(contract, 'indexEp', 'indexPriceRp'), market),
            'interestRate': undefined,
            'estimatedSettlePrice': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'fundingRate': this.fromEr(this.safeString(contract, 'fundingRateEr'), market),
            'fundingTimestamp': undefined,
            'fundingDatetime': undefined,
            'nextFundingRate': this.fromEr(this.safeString2(contract, 'predFundingRateEr', 'predFundingRateRr'), market),
            'nextFundingTimestamp': undefined,
            'nextFundingDatetime': undefined,
            'previousFundingRate': undefined,
            'previousFundingTimestamp': undefined,
            'previousFundingDatetime': undefined,
        };
    }
    async setMargin(symbol, amount, params = {}) {
        /**
         * @method
         * @name phemex#setMargin
         * @description Either adds or reduces margin in an isolated position in order to set the margin to a specific value
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#assign-position-balance-in-isolated-marign-mode
         * @param {string} symbol unified market symbol of the market to set margin in
         * @param {float} amount the amount to set the margin to
         * @param {object} params parameters specific to the phemex api endpoint
         * @returns {object} A [margin structure]{@link https://docs.ccxt.com/#/?id=add-margin-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'posBalanceEv': this.toEv(amount, market),
        };
        const response = await this.privatePostPositionsAssign(this.extend(request, params));
        //
        //     {
        //         "code": 0,
        //         "msg": "",
        //         "data": "OK"
        //     }
        //
        return this.extend(this.parseMarginModification(response, market), {
            'amount': amount,
        });
    }
    parseMarginStatus(status) {
        const statuses = {
            '0': 'ok',
        };
        return this.safeString(statuses, status, status);
    }
    parseMarginModification(data, market = undefined) {
        //
        //     {
        //         "code": 0,
        //         "msg": "",
        //         "data": "OK"
        //     }
        //
        market = this.safeMarket(undefined, market);
        const inverse = this.safeValue(market, 'inverse');
        const codeCurrency = inverse ? 'base' : 'quote';
        return {
            'info': data,
            'type': 'set',
            'amount': undefined,
            'total': undefined,
            'code': market[codeCurrency],
            'symbol': this.safeSymbol(undefined, market),
            'status': this.parseMarginStatus(this.safeString(data, 'code')),
        };
    }
    async setMarginMode(marginMode, symbol = undefined, params = {}) {
        /**
         * @method
         * @name phemex#setMarginMode
         * @description set margin mode to 'cross' or 'isolated'
         * @param {string} marginMode 'cross' or 'isolated'
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} response from the exchange
         */
        this.checkRequiredSymbol('setMarginMode', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['swap']) {
            throw new BadSymbol(this.id + ' setMarginMode() supports swap contracts only');
        }
        marginMode = marginMode.toLowerCase();
        if (marginMode !== 'isolated' && marginMode !== 'cross') {
            throw new BadRequest(this.id + ' setMarginMode() marginMode argument should be isolated or cross');
        }
        let leverage = this.safeInteger(params, 'leverage');
        if (marginMode === 'cross') {
            leverage = 0;
        }
        if (leverage === undefined) {
            const limits = this.safeValue(market, 'limits', {});
            const leverageLimits = this.safeValue(limits, 'leverage', {});
            leverage = this.safeInteger(leverageLimits, 'max');
        }
        let method = 'privatePutPositionsLeverage';
        const request = {
            'symbol': market['id'],
        };
        if (market['settle'] === 'USDT') {
            const positionMode = this.safeStringLower(params, 'positionMode');
            if (positionMode === 'hedged' || positionMode === 'hedge') {
                let buyLeverage = this.safeInteger(params, 'buyLeverage', leverage);
                let sellLeverage = this.safeInteger(params, 'sellLeverage', leverage);
                if (marginMode === 'cross') {
                    buyLeverage = 0;
                    sellLeverage = 0;
                }
                request['longLeverageRr'] = buyLeverage;
                request['shortLeverageRr'] = sellLeverage;
            }
            else {
                request['leverageRr'] = leverage;
            }
            method = 'privatePutGPositionsLeverage';
        }
        else {
            request['leverage'] = leverage;
        }
        params = this.omit(params, ['leverage', 'buyLeverage', 'sellLeverage', 'positionMode']);
        return await this[method](this.extend(request, params));
    }
    async setPositionMode(hedged, symbol = undefined, params = {}) {
        /**
         * @method
         * @name phemex#setPositionMode
         * @description set hedged to true or false for a market
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#switch-position-mode-synchronously
         * @param {bool} hedged set to true to use dualSidePosition
         * @param {string|undefined} symbol not used by binance setPositionMode ()
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} response from the exchange
         */
        this.checkRequiredArgument('setPositionMode', symbol, 'symbol');
        const market = this.market(symbol);
        if (market['settle'] !== 'USDT') {
            throw new BadSymbol(this.id + ' setPositionMode() supports USDT settled markets only');
        }
        const request = {
            'symbol': market['id'],
        };
        if (hedged) {
            request['targetPosMode'] = 'Hedged';
        }
        else {
            request['targetPosMode'] = 'OneWay';
        }
        return await this.privatePutGPositionsSwitchPosModeSync(this.extend(request, params));
    }
    async fetchLeverageTiers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchLeverageTiers
         * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
         * @param {[string]|undefined} symbols list of unified market symbols
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} a dictionary of [leverage tiers structures]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}, indexed by market symbols
         */
        await this.loadMarkets();
        const response = await this.publicGetCfgV2Products(params);
        //
        //     {
        //         "code":0,
        //         "msg":"OK",
        //         "data":{
        //             "ratioScale":8,
        //             "currencies":[
        //                 {"currency":"BTC","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"Bitcoin"},
        //                 {"currency":"USD","valueScale":4,"minValueEv":1,"maxValueEv":500000000000000,"name":"USD"},
        //                 {"currency":"USDT","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"TetherUS"},
        //             ],
        //             "products":[
        //                 {
        //                     "symbol":"BTCUSD",
        //                     "displaySymbol":"BTC / USD",
        //                     "indexSymbol":".BTC",
        //                     "markSymbol":".MBTC",
        //                     "fundingRateSymbol":".BTCFR",
        //                     "fundingRate8hSymbol":".BTCFR8H",
        //                     "contractUnderlyingAssets":"USD",
        //                     "settleCurrency":"BTC",
        //                     "quoteCurrency":"USD",
        //                     "contractSize":1.0,
        //                     "lotSize":1,
        //                     "tickSize":0.5,
        //                     "priceScale":4,
        //                     "ratioScale":8,
        //                     "pricePrecision":1,
        //                     "minPriceEp":5000,
        //                     "maxPriceEp":10000000000,
        //                     "maxOrderQty":1000000,
        //                     "type":"Perpetual"
        //                 },
        //                 {
        //                     "symbol":"sBTCUSDT",
        //                     "displaySymbol":"BTC / USDT",
        //                     "quoteCurrency":"USDT",
        //                     "pricePrecision":2,
        //                     "type":"Spot",
        //                     "baseCurrency":"BTC",
        //                     "baseTickSize":"0.000001 BTC",
        //                     "baseTickSizeEv":100,
        //                     "quoteTickSize":"0.01 USDT",
        //                     "quoteTickSizeEv":1000000,
        //                     "minOrderValue":"10 USDT",
        //                     "minOrderValueEv":1000000000,
        //                     "maxBaseOrderSize":"1000 BTC",
        //                     "maxBaseOrderSizeEv":100000000000,
        //                     "maxOrderValue":"5,000,000 USDT",
        //                     "maxOrderValueEv":500000000000000,
        //                     "defaultTakerFee":"0.001",
        //                     "defaultTakerFeeEr":100000,
        //                     "defaultMakerFee":"0.001",
        //                     "defaultMakerFeeEr":100000,
        //                     "baseQtyPrecision":6,
        //                     "quoteQtyPrecision":2
        //                 },
        //             ],
        //             "riskLimits":[
        //                 {
        //                     "symbol":"BTCUSD",
        //                     "steps":"50",
        //                     "riskLimits":[
        //                         {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
        //                         {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
        //                         {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
        //                     ]
        //                 },
        //             ],
        //             "leverages":[
        //                 {"initialMargin":"1.0%","initialMarginEr":1000000,"options":[1,2,3,5,10,25,50,100]},
        //                 {"initialMargin":"1.5%","initialMarginEr":1500000,"options":[1,2,3,5,10,25,50,66]},
        //                 {"initialMargin":"2.0%","initialMarginEr":2000000,"options":[1,2,3,5,10,25,33,50]},
        //             ]
        //         }
        //     }
        //
        //
        const data = this.safeValue(response, 'data', {});
        const riskLimits = this.safeValue(data, 'riskLimits');
        return this.parseLeverageTiers(riskLimits, symbols, 'symbol');
    }
    parseMarketLeverageTiers(info, market = undefined) {
        /**
         * @param {object} info Exchange market response for 1 market
         * @param {object} market CCXT market
         */
        //
        //     {
        //         "symbol":"BTCUSD",
        //         "steps":"50",
        //         "riskLimits":[
        //             {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
        //             {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
        //             {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
        //         ]
        //     },
        //
        market = this.safeMarket(undefined, market);
        const riskLimits = (market['info']['riskLimits']);
        const tiers = [];
        let minNotional = 0;
        for (let i = 0; i < riskLimits.length; i++) {
            const tier = riskLimits[i];
            const maxNotional = this.safeInteger(tier, 'limit');
            tiers.push({
                'tier': this.sum(i, 1),
                'currency': market['settle'],
                'minNotional': minNotional,
                'maxNotional': maxNotional,
                'maintenanceMarginRate': this.safeString(tier, 'maintenanceMargin'),
                'maxLeverage': undefined,
                'info': tier,
            });
            minNotional = maxNotional;
        }
        return tiers;
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const query = this.omit(params, this.extractParams(path));
        const requestPath = '/' + this.implodeParams(path, params);
        let url = requestPath;
        let queryString = '';
        if ((method === 'GET') || (method === 'DELETE') || (method === 'PUT') || (url === '/positions/assign')) {
            if (Object.keys(query).length) {
                queryString = this.urlencodeWithArrayRepeat(query);
                url += '?' + queryString;
            }
        }
        if (api === 'private') {
            this.checkRequiredCredentials();
            const timestamp = this.seconds();
            const xPhemexRequestExpiry = this.safeInteger(this.options, 'x-phemex-request-expiry', 60);
            const expiry = this.sum(timestamp, xPhemexRequestExpiry);
            const expiryString = expiry.toString();
            headers = {
                'x-phemex-access-token': this.apiKey,
                'x-phemex-request-expiry': expiryString,
            };
            let payload = '';
            if (method === 'POST') {
                payload = this.json(params);
                body = payload;
                headers['Content-Type'] = 'application/json';
            }
            const auth = requestPath + queryString + expiryString + payload;
            headers['x-phemex-request-signature'] = this.hmac(this.encode(auth), this.encode(this.secret));
        }
        url = this.implodeHostname(this.urls['api'][api]) + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        /**
         * @method
         * @name phemex#setLeverage
         * @description set the level of leverage for a market
         * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#set-leverage
         * @param {float} leverage the rate of leverage
         * @param {string} symbol unified market symbol
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} response from the exchange
         */
        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let method = 'privatePutPositionsLeverage';
        const buyLeverage = this.safeFloat(params, 'buyLeverage', leverage);
        const sellLeverage = this.safeFloat(params, 'sellLeverage', leverage);
        leverage = buyLeverage || leverage;
        const marginMode = this.safeStringLower(params, 'marginMode', 'cross');
        if (market['settle'] === 'USDT') {
            method = 'privatePutGPositionsLeverage';
            const positionMode = this.safeStringLower(params, 'positionMode');
            if (positionMode === 'hedged' || positionMode === 'hedge') {
                if (buyLeverage === undefined || sellLeverage === undefined) {
                    throw new ArgumentsRequired(this.id + ' setLeverage() in hedge mode requires both buyLeverage and sellLeverage arguments');
                }
                if ((buyLeverage < 1) || (buyLeverage > 100)) {
                    throw new BadRequest(this.id + ' setLeverage() buyLeverage should be between 1 and 100');
                }
                if ((sellLeverage < 1) || (sellLeverage > 100)) {
                    throw new BadRequest(this.id + ' setLeverage() sellLeverage should be between 1 and 100');
                }
                if (marginMode === 'cross') {
                    request['longLeverageRr'] = -1 * buyLeverage;
                    request['shortLeverageRr'] = -1 * sellLeverage;
                }
                else {
                    request['longLeverageRr'] = buyLeverage;
                    request['shortLeverageRr'] = sellLeverage;
                }
            }
            else {
                if ((leverage < 1) || (leverage > 100)) {
                    throw new BadRequest(this.id + ' setLeverage() leverage should be between 1 and 100');
                }
                if (marginMode === 'cross') {
                    request['leverageRr'] = -1 * leverage;
                }
                else {
                    request['leverageRr'] = leverage;
                }
            }
        }
        else {
            const effectiveLeverage = leverage || buyLeverage;
            if ((effectiveLeverage < 1) || (effectiveLeverage > 100)) {
                throw new BadRequest(this.id + ' setLeverage() leverage should be between 1 and 100');
            }
            if (marginMode === 'cross') {
                request['leverage'] = -1 * effectiveLeverage;
            }
            else {
                request['leverage'] = effectiveLeverage;
            }
        }
        params = this.omit(params, 'leverage', 'buyLeverage', 'sellLeverage', 'marginMode', 'positionMode');
        return await this[method](this.extend(request, params));
    }
    async transfer(code, amount, fromAccount, toAccount, params = {}) {
        /**
         * @method
         * @name phemex#transfer
         * @description transfer currency internally between wallets on the same account
         * @param {string} code unified currency code
         * @param {float} amount amount to transfer
         * @param {string} fromAccount account to transfer from
         * @param {string} toAccount account to transfer to
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @param {string|undefined} params.bizType for transferring between main and sub-acounts either 'SPOT' or 'PERPETUAL' default is 'SPOT'
         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const accountsByType = this.safeValue(this.options, 'accountsByType', {});
        const fromId = this.safeString(accountsByType, fromAccount, fromAccount);
        const toId = this.safeString(accountsByType, toAccount, toAccount);
        const scaledAmount = this.toEv(amount, currency);
        let direction = undefined;
        let transfer = undefined;
        if (fromId === 'spot' && toId === 'future') {
            direction = 2;
        }
        else if (fromId === 'future' && toId === 'spot') {
            direction = 1;
        }
        if (direction !== undefined) {
            const request = {
                'currency': currency['id'],
                'moveOp': direction,
                'amountEv': scaledAmount,
            };
            const response = await this.privatePostAssetsTransfer(this.extend(request, params));
            //
            //     {
            //         code: '0',
            //         msg: 'OK',
            //         data: {
            //             linkKey: '8564eba4-c9ec-49d6-9b8c-2ec5001a0fb9',
            //             userId: '4018340',
            //             currency: 'USD',
            //             amountEv: '10',
            //             side: '2',
            //             status: '10'
            //         }
            //     }
            //
            const data = this.safeValue(response, 'data', {});
            transfer = this.parseTransfer(data, currency);
        }
        else { // sub account transfer
            const request = {
                'fromUserId': fromId,
                'toUserId': toId,
                'amountEv': scaledAmount,
                'currency': currency['id'],
                'bizType': this.safeString(params, 'bizType', 'SPOT'),
            };
            const response = await this.privatePostAssetsUniversalTransfer(this.extend(request, params));
            //
            //     {
            //         code: '0',
            //         msg: 'OK',
            //         data: 'API-923db826-aaaa-aaaa-aaaa-4d98c3a7c9fd'
            //     }
            //
            transfer = this.parseTransfer(response);
        }
        const transferOptions = this.safeValue(this.options, 'transfer', {});
        const fillResponseFromRequest = this.safeValue(transferOptions, 'fillResponseFromRequest', true);
        if (fillResponseFromRequest) {
            if (transfer['fromAccount'] === undefined) {
                transfer['fromAccount'] = fromAccount;
            }
            if (transfer['toAccount'] === undefined) {
                transfer['toAccount'] = toAccount;
            }
            if (transfer['amount'] === undefined) {
                transfer['amount'] = amount;
            }
            if (transfer['currency'] === undefined) {
                transfer['currency'] = code;
            }
        }
        return transfer;
    }
    async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#fetchTransfers
         * @description fetch a history of internal transfers made on an account
         * @param {string|undefined} code unified currency code of the currency transferred
         * @param {int|undefined} since the earliest time in ms to fetch transfers for
         * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        if (code === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchTransfers() requires a code argument');
        }
        const currency = this.currency(code);
        const request = {
            'currency': currency['id'],
        };
        if (since !== undefined) {
            request['start'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetAssetsTransfer(this.extend(request, params));
        //
        //     {
        //         "code": 0,
        //         "msg": "OK",
        //         "data": {
        //             "rows": [
        //                 {
        //                     "linkKey": "87c071a3-8628-4ac2-aca1-6ce0d1fad66c",
        //                     "userId": 4148428,
        //                     "currency": "BTC",
        //                     "amountEv": 67932,
        //                     "side": 2,
        //                     "status": 10,
        //                     "createTime": 1652832467000,
        //                     "bizType": 10
        //                 }
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        const transfers = this.safeValue(data, 'rows', []);
        return this.parseTransfers(transfers, currency, since, limit);
    }
    parseTransfer(transfer, currency = undefined) {
        //
        // transfer
        //
        //     {
        //         linkKey: '8564eba4-c9ec-49d6-9b8c-2ec5001a0fb9',
        //         userId: '4018340',
        //         currency: 'USD',
        //         amountEv: '10',
        //         side: '2',
        //         status: '10'
        //     }
        //
        // fetchTransfers
        //
        //     {
        //         "linkKey": "87c071a3-8628-4ac2-aca1-6ce0d1fad66c",
        //         "userId": 4148428,
        //         "currency": "BTC",
        //         "amountEv": 67932,
        //         "side": 2,
        //         "status": 10,
        //         "createTime": 1652832467000,
        //         "bizType": 10
        //     }
        //
        const id = this.safeString(transfer, 'linkKey');
        const status = this.safeString(transfer, 'status');
        const amountEv = this.safeString(transfer, 'amountEv');
        const amountTransfered = this.fromEv(amountEv, currency);
        const currencyId = this.safeString(transfer, 'currency');
        const code = this.safeCurrencyCode(currencyId, currency);
        const side = this.safeInteger(transfer, 'side');
        let fromId = undefined;
        let toId = undefined;
        if (side === 1) {
            fromId = 'swap';
            toId = 'spot';
        }
        else if (side === 2) {
            fromId = 'spot';
            toId = 'swap';
        }
        const timestamp = this.safeInteger(transfer, 'createTime');
        return {
            'info': transfer,
            'id': id,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'currency': code,
            'amount': amountTransfered,
            'fromAccount': fromId,
            'toAccount': toId,
            'status': this.parseTransferStatus(status),
        };
    }
    parseTransferStatus(status) {
        const statuses = {
            '3': 'rejected',
            '6': 'canceled',
            '10': 'ok',
            '11': 'failed', // 'Failed',
        };
        return this.safeString(statuses, status, status);
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (response === undefined) {
            return; // fallback to default error handler
        }
        //
        //     {"code":30018,"msg":"phemex.data.size.uplimt","data":null}
        //     {"code":412,"msg":"Missing parameter - resolution","data":null}
        //     {"code":412,"msg":"Missing parameter - to","data":null}
        //     {"error":{"code":6001,"message":"invalid argument"},"id":null,"result":null}
        //
        const error = this.safeValue(response, 'error', response);
        const errorCode = this.safeString(error, 'code');
        const message = this.safeString(error, 'msg');
        if ((errorCode !== undefined) && (errorCode !== '0')) {
            const feedback = this.id + ' ' + body;
            this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
            this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
            throw new ExchangeError(feedback); // unknown message
        }
    }
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class woo$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'woo',
            'name': 'WOO X',
            'countries': ['KY'],
            'rateLimit': 100,
            'version': 'v1',
            'certified': false,
            'pro': true,
            'hostname': 'woo.org',
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': true,
                'swap': true,
                'future': false,
                'option': false,
                'addMargin': false,
                'borrowMargin': false,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'cancelWithdraw': false,
                'createDepositAddress': false,
                'createMarketOrder': false,
                'createOrder': true,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': false,
                'createStopMarketOrder': false,
                'createStopOrder': false,
                'fetchAccounts': true,
                'fetchBalance': true,
                'fetchCanceledOrders': false,
                'fetchClosedOrder': false,
                'fetchClosedOrders': false,
                'fetchCurrencies': true,
                'fetchDepositAddress': false,
                'fetchDeposits': true,
                'fetchFundingHistory': true,
                'fetchFundingRate': true,
                'fetchFundingRateHistory': true,
                'fetchFundingRates': true,
                'fetchIndexOHLCV': false,
                'fetchLedger': true,
                'fetchLeverage': true,
                'fetchMarginMode': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrder': false,
                'fetchOpenOrders': false,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrders': true,
                'fetchOrderTrades': true,
                'fetchPosition': true,
                'fetchPositionMode': false,
                'fetchPositions': true,
                'fetchPremiumIndexOHLCV': false,
                'fetchStatus': false,
                'fetchTicker': false,
                'fetchTickers': false,
                'fetchTime': false,
                'fetchTrades': true,
                'fetchTradingFee': false,
                'fetchTradingFees': true,
                'fetchTransactions': true,
                'fetchTransfers': true,
                'fetchWithdrawals': true,
                'reduceMargin': false,
                'repayMargin': true,
                'setLeverage': true,
                'setMargin': false,
                'transfer': true,
                'withdraw': true, // exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs: https://kronosresearch.github.io/wootrade-documents/#token-withdraw
            },
            'timeframes': {
                '1m': '1',
                '3m': '3',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '2h',
                '4h': '4h',
                '8h': '8h',
                '12h': '12h',
                '1d': '1D',
                '3d': '3D',
                '1w': '1W',
                '1M': '1M',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
                'api': {
                    'pub': 'https://api-pub.woo.org',
                    'public': 'https://api.{hostname}',
                    'private': 'https://api.{hostname}',
                },
                'test': {
                    'pub': 'https://api-pub.staging.woo.org',
                    'public': 'https://api.staging.woo.org',
                    'private': 'https://api.staging.woo.org',
                },
                'www': 'https://woo.org/',
                'doc': [
                    'https://docs.woo.org/',
                ],
                'fees': [
                    'https://support.woo.org/hc/en-001/articles/4404611795353--Trading-Fees',
                ],
                'referral': 'https://referral.woo.org/BAJS6oNmZb3vi3RGA',
            },
            'api': {
                'v1': {
                    'pub': {
                        'get': {
                            'hist/kline': 10,
                            'hist/trades': 1,
                        },
                    },
                    'public': {
                        'get': {
                            'info': 1,
                            'info/{symbol}': 1,
                            'system_info': 1,
                            'kline': 1,
                            'market_trades': 1,
                            'token': 1,
                            'token_network': 1,
                            'funding_rates': 1,
                            'funding_rate/{symbol}': 1,
                            'funding_rate_history': 1,
                            'futures': 1,
                            'futures/{symbol}': 1,
                            'tv/history': 1,
                        },
                    },
                    'private': {
                        'get': {
                            'client/token': 1,
                            'order/{oid}': 1,
                            'client/order/{client_order_id}': 1,
                            'orders': 1,
                            'orderbook/{symbol}': 1,
                            'client/trade/{tid}': 1,
                            'order/{oid}/trades': 1,
                            'client/trades': 1,
                            'client/info': 60,
                            'asset/deposit': 10,
                            'asset/history': 60,
                            'sub_account/all': 60,
                            'sub_account/assets': 60,
                            'token_interest': 60,
                            'token_interest/{token}': 60,
                            'interest/history': 60,
                            'interest/repay': 60,
                            'funding_fee/history': 30,
                            'positions': 3.33,
                            'position/{symbol}': 3.33,
                        },
                        'post': {
                            'order': 5,
                            'asset/main_sub_transfer': 30,
                            'asset/withdraw': 30,
                            'interest/repay': 60,
                            'client/account_mode': 120,
                            'client/leverage': 120,
                        },
                        'delete': {
                            'order': 1,
                            'client/order': 1,
                            'orders': 1,
                            'asset/withdraw': 120, // implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                        },
                    },
                },
                'v2': {
                    'private': {
                        'get': {
                            'client/holding': 1,
                        },
                    },
                },
                'v3': {
                    'private': {
                        'get': {
                            'algo/order/{oid}': 1,
                            'algo/orders': 1,
                            'balances': 1,
                            'accountinfo': 60,
                            'positions': 3.33,
                            'buypower': 1,
                        },
                        'post': {
                            'algo/order': 5,
                        },
                        'put': {
                            'order/{oid}': 2,
                            'order/client/{oid}': 2,
                            'algo/order/{oid}': 2,
                            'algo/order/client/{oid}': 2,
                        },
                        'delete': {
                            'algo/order/{oid}': 1,
                            'algo/orders/pending': 1,
                            'algo/orders/pending/{symbol}': 1,
                            'orders/pending': 1,
                        },
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'maker': this.parseNumber('0.0002'),
                    'taker': this.parseNumber('0.0005'),
                },
            },
            'options': {
                'createMarketBuyOrderRequiresPrice': true,
                // these network aliases require manual mapping here
                'network-aliases-for-tokens': {
                    'HT': 'ERC20',
                    'OMG': 'ERC20',
                    'UATOM': 'ATOM',
                    'ZRX': 'ZRX',
                },
                'networks': {
                    'TRX': 'TRON',
                    'TRC20': 'TRON',
                    'ERC20': 'ETH',
                    'BEP20': 'BSC',
                },
                // override defaultNetworkCodePriorities for a specific currency
                'defaultNetworkCodeForCurrencies': {
                // 'USDT': 'TRC20',
                // 'BTC': 'BTC',
                },
                'transfer': {
                    'fillResponseFromRequest': true,
                },
                'brokerId': 'ab82cb09-cfec-4473-80a3-b740779d0644',
            },
            'commonCurrencies': {},
            'exceptions': {
                'exact': {
                    '-1000': ExchangeError,
                    '-1001': AuthenticationError,
                    '-1002': AuthenticationError,
                    '-1003': RateLimitExceeded,
                    '-1004': BadRequest,
                    '-1005': BadRequest,
                    '-1006': BadRequest,
                    '-1007': BadRequest,
                    '-1008': InvalidOrder,
                    '-1009': BadRequest,
                    '-1011': ExchangeError,
                    '-1012': BadRequest,
                    '-1101': InvalidOrder,
                    '-1102': InvalidOrder,
                    '-1103': InvalidOrder,
                    '-1104': InvalidOrder,
                    '-1105': InvalidOrder, // { "code": -1105,  "message": "Price is X% too high or X% too low from the mid price." }
                },
                'broad': {
                    'symbol must not be blank': BadRequest,
                    'The token is not supported': BadRequest,
                    'Your order and symbol are not valid or already canceled': BadRequest,
                    'Insufficient WOO. Please enable margin trading for leverage trading': BadRequest, // when selling insufficent token [-1012]
                },
            },
            'precisionMode': TICK_SIZE$1,
        });
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name woo#fetchMarkets
         * @description retrieves data on all markets for woo
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        const response = await this.v1PublicGetInfo(params);
        //
        // {
        //     rows: [
        //         {
        //             symbol: "SPOT_AAVE_USDT",
        //             quote_min: 0,
        //             quote_max: 100000,
        //             quote_tick: 0.01,
        //             base_min: 0.01,
        //             base_max: 7284,
        //             base_tick: 0.0001,
        //             min_notional: 10,
        //             price_range: 0.1,
        //             created_time: "0",
        //             updated_time: "1639107647.988",
        //             is_stable: 0
        //         },
        //         ...
        //     success: true
        // }
        //
        const result = [];
        const data = this.safeValue(response, 'rows', []);
        for (let i = 0; i < data.length; i++) {
            const market = data[i];
            const marketId = this.safeString(market, 'symbol');
            const parts = marketId.split('_');
            let marketType = this.safeStringLower(parts, 0);
            const isSpot = marketType === 'spot';
            const isSwap = marketType === 'perp';
            const baseId = this.safeString(parts, 1);
            const quoteId = this.safeString(parts, 2);
            const base = this.safeCurrencyCode(baseId);
            const quote = this.safeCurrencyCode(quoteId);
            let settleId = undefined;
            let settle = undefined;
            let symbol = base + '/' + quote;
            let contractSize = undefined;
            let linear = undefined;
            if (isSpot) {
                continue;
            }
            if (isSwap) {
                settleId = this.safeString(parts, 2);
                settle = this.safeCurrencyCode(settleId);
                symbol = base + '/' + quote + ':' + settle;
                contractSize = this.parseNumber('1');
                marketType = 'swap';
                linear = true;
            }
            result.push({
                'id': marketId,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': settle,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': settleId,
                'type': marketType,
                'spot': isSpot,
                'margin': true,
                'swap': isSwap,
                'future': false,
                'option': false,
                'active': undefined,
                'contract': isSwap,
                'linear': linear,
                'inverse': undefined,
                'contractSize': contractSize,
                'expiry': undefined,
                'expiryDatetime': undefined,
                'strike': undefined,
                'optionType': undefined,
                'precision': {
                    'amount': this.safeNumber(market, 'base_tick'),
                    'price': this.safeNumber(market, 'quote_tick'),
                },
                'limits': {
                    'leverage': {
                        'min': undefined,
                        'max': undefined,
                    },
                    'amount': {
                        'min': this.safeNumber(market, 'base_min'),
                        'max': this.safeNumber(market, 'base_max'),
                    },
                    'price': {
                        'min': this.safeNumber(market, 'quote_min'),
                        'max': this.safeNumber(market, 'quote_max'),
                    },
                    'cost': {
                        'min': this.safeNumber(market, 'min_notional'),
                        'max': undefined,
                    },
                },
                'info': market,
            });
        }
        return result;
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchTrades() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.v1PublicGetMarketTrades(this.extend(request, params));
        //
        // {
        //     success: true,
        //     rows: [
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "SELL",
        //             executed_price: 46222.35,
        //             executed_quantity: 0.0012,
        //             executed_timestamp: "1641241162.329"
        //         },
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "SELL",
        //             executed_price: 46222.35,
        //             executed_quantity: 0.0012,
        //             executed_timestamp: "1641241162.329"
        //         },
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "BUY",
        //             executed_price: 46224.32,
        //             executed_quantity: 0.00039,
        //             executed_timestamp: "1641241162.287"
        //         },
        //         ...
        //      ]
        // }
        //
        const resultResponse = this.safeValue(response, 'rows', {});
        return this.parseTrades(resultResponse, market, since, limit);
    }
    parseTrade(trade, market = undefined) {
        //
        // public/market_trades
        //
        //     {
        //         symbol: "SPOT_BTC_USDT",
        //         side: "SELL",
        //         executed_price: 46222.35,
        //         executed_quantity: 0.0012,
        //         executed_timestamp: "1641241162.329"
        //     }
        //
        // fetchOrderTrades, fetchOrder
        //
        //     {
        //         id: '99119876',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641481113.084',
        //         order_id: '87001234',
        //         order_tag: 'default', <-- this param only in "fetchOrderTrades"
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //     }
        //
        const isFromFetchOrder = ('id' in trade);
        const timestamp = this.safeTimestamp(trade, 'executed_timestamp');
        const marketId = this.safeString(trade, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString(trade, 'executed_price');
        const amount = this.safeString(trade, 'executed_quantity');
        const order_id = this.safeString(trade, 'order_id');
        const fee = this.parseTokenAndFeeTemp(trade, 'fee_asset', 'fee');
        const cost = Precise.stringMul(price, amount);
        const side = this.safeStringLower(trade, 'side');
        const id = this.safeString(trade, 'id');
        let takerOrMaker = undefined;
        if (isFromFetchOrder) {
            const isMaker = this.safeString(trade, 'is_maker') === '1';
            takerOrMaker = isMaker ? 'maker' : 'taker';
        }
        return this.safeTrade({
            'id': id,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'order': order_id,
            'takerOrMaker': takerOrMaker,
            'type': undefined,
            'fee': fee,
            'info': trade,
        }, market);
    }
    parseTokenAndFeeTemp(item, feeTokenKey, feeAmountKey) {
        const feeCost = this.safeString(item, feeAmountKey);
        let fee = undefined;
        if (feeCost !== undefined) {
            const feeCurrencyId = this.safeString(item, feeTokenKey);
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            };
        }
        return fee;
    }
    async fetchTradingFees(params = {}) {
        /**
         * @method
         * @name woo#fetchTradingFees
         * @description fetch the trading fees for multiple markets
         * @see https://docs.woo.org/#get-account-information-new
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const response = await this.v3PrivateGetAccountinfo(params);
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "applicationId": "dsa",
        //             "account": "dsa",
        //             "alias": "haha",
        //             "accountMode": "MARGIN",
        //             "leverage": 1,
        //             "takerFeeRate": 1,
        //             "makerFeeRate": 1,
        //             "interestRate": 1,
        //             "futuresTakerFeeRate": 1,
        //             "futuresMakerFeeRate": 1,
        //             "otpauth": true,
        //             "marginRatio": 1,
        //             "openMarginRatio": 1,
        //             "initialMarginRatio": 1,
        //             "maintenanceMarginRatio": 1,
        //             "totalCollateral": 1,
        //             "freeCollateral": 1,
        //             "totalAccountValue": 1,
        //             "totalVaultValue": 1,
        //             "totalStakingValue": 1
        //         },
        //         "timestamp": 1673323685109
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        const maker = this.safeString(data, 'makerFeeRate');
        const taker = this.safeString(data, 'takerFeeRate');
        const result = {};
        for (let i = 0; i < this.symbols.length; i++) {
            const symbol = this.symbols[i];
            result[symbol] = {
                'info': response,
                'symbol': symbol,
                'maker': this.parseNumber(Precise.stringDiv(maker, '10000')),
                'taker': this.parseNumber(Precise.stringDiv(taker, '10000')),
                'percentage': true,
                'tierBased': true,
            };
        }
        return result;
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name woo#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an associative dictionary of currencies
         */
        const result = {};
        const tokenResponse = await this.v1PublicGetToken(params);
        //
        // {
        //     rows: [
        //         {
        //             token: "ETH_USDT",
        //             fullname: "Tether",
        //             decimals: 6,
        //             balance_token: "USDT",
        //             created_time: "0",
        //             updated_time: "0"
        //         },
        //         {
        //             token: "BSC_USDT",
        //             fullname: "Tether",
        //             decimals: 18,
        //             balance_token: "USDT",
        //             created_time: "0",
        //             updated_time: "0"
        //         },
        //         {
        //             token: "ZEC",
        //             fullname: "ZCash",
        //             decimals: 8,
        //             balance_token: "ZEC",
        //             created_time: "0",
        //             updated_time: "0"
        //         },
        //         ...
        //     ],
        //     success: true
        // }
        //
        // only make one request for currrencies...
        // const tokenNetworkResponse = await this.v1PublicGetTokenNetwork (params);
        //
        // {
        //     rows: [
        //         {
        //             protocol: "ERC20",
        //             token: "USDT",
        //             name: "Ethereum",
        //             minimum_withdrawal: 30,
        //             withdrawal_fee: 25,
        //             allow_deposit: 1,
        //             allow_withdraw: 1
        //         },
        //         {
        //             protocol: "TRC20",
        //             token: "USDT",
        //             name: "Tron",
        //             minimum_withdrawal: 30,
        //             withdrawal_fee: 1,
        //             allow_deposit: 1,
        //             allow_withdraw: 1
        //         },
        //         ...
        //     ],
        //     success: true
        // }
        //
        const tokenRows = this.safeValue(tokenResponse, 'rows', []);
        const networksByCurrencyId = this.groupBy(tokenRows, 'balance_token');
        const currencyIds = Object.keys(networksByCurrencyId);
        for (let i = 0; i < currencyIds.length; i++) {
            const currencyId = currencyIds[i];
            const networks = networksByCurrencyId[currencyId];
            const code = this.safeCurrencyCode(currencyId);
            let name = undefined;
            let minPrecision = undefined;
            const resultingNetworks = {};
            for (let j = 0; j < networks.length; j++) {
                const network = networks[j];
                name = this.safeString(network, 'fullname');
                const networkId = this.safeString(network, 'token');
                const splitted = networkId.split('_');
                const unifiedNetwork = splitted[0];
                const precision = this.parsePrecision(this.safeString(network, 'decimals'));
                if (precision !== undefined) {
                    minPrecision = (minPrecision === undefined) ? precision : Precise.stringMin(precision, minPrecision);
                }
                resultingNetworks[unifiedNetwork] = {
                    'id': networkId,
                    'network': unifiedNetwork,
                    'limits': {
                        'withdraw': {
                            'min': undefined,
                            'max': undefined,
                        },
                        'deposit': {
                            'min': undefined,
                            'max': undefined,
                        },
                    },
                    'active': undefined,
                    'deposit': undefined,
                    'withdraw': undefined,
                    'fee': undefined,
                    'precision': this.parseNumber(precision),
                    'info': network,
                };
            }
            result[code] = {
                'id': currencyId,
                'name': name,
                'code': code,
                'precision': this.parseNumber(minPrecision),
                'active': undefined,
                'fee': undefined,
                'networks': resultingNetworks,
                'deposit': undefined,
                'withdraw': undefined,
                'limits': {
                    'deposit': {
                        'min': undefined,
                        'max': undefined,
                    },
                    'withdraw': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'info': networks,
            };
        }
        return result;
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name woo#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        // quick order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 29116.0
        // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        //
        // limit order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 28520.0
        // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        //
        // no post = 'timeInForce': 'GTC',
        //
        // SL
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        //
        // TP
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        //
        // LIMIT TP
        //
        // BTC/USDT:USDT
        // stopLimit
        // sell
        // 4.0
        // 33000.0
        // {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        const reduceOnly = this.safeValue2(params, 'reduceOnly', 'close');
        const orderType = type.toUpperCase();
        if (orderType === 'STOP' || orderType === 'STOPLIMIT') {
            await this.loadMarkets();
            const market = this.market(symbol);
            const orderSide = side.toUpperCase();
            let algoOrderType = 'MARKET';
            if (orderType !== 'STOP') {
                algoOrderType = 'LIMIT';
            }
            const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
            const request = {
                'symbol': market['id'],
                'algoType': 'STOP',
                'type': algoOrderType,
                'side': orderSide,
            };
            if (reduceOnly) {
                request['reduceOnly'] = reduceOnly;
            }
            if (price !== undefined) {
                request['price'] = this.priceToPrecision(symbol, price);
            }
            request['triggerPrice'] = triggerPrice;
            request['quantity'] = this.amountToPrecision(symbol, amount);
            params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
            // const response = await (this as any).v3PrivatePostAlgoOrder (this.extend (request, params));
            const brokerId = this.safeString(this.options, 'brokerId');
            if (brokerId !== undefined) {
                request['brokerId'] = brokerId;
            }
            const response = await this.v3PrivatePostAlgoOrder(request);
            // {
            //     success: true,
            //     timestamp: '1641383206.489',
            //     order_id: '86980774',
            //     order_type: 'LIMIT',
            //     order_price: '1', // null for 'MARKET' order
            //     order_quantity: '12', // null for 'MARKET' order
            //     order_amount: null, // NOT-null for 'MARKET' order
            //     client_order_id: '0'
            // }
            // response -> data -> rows -> [0]
            const data = this.safeValue(response, 'data');
            const rows = this.safeValue(data, 'rows', []);
            // return this.extend (
            //     this.parseOrder (rows[0], market),
            //     { 'type': type }
            // );
            return this.extend(this.parseOrder(rows[0], market), { 'status': 'open' });
        }
        else {
            await this.loadMarkets();
            const market = this.market(symbol);
            const orderSide = side.toUpperCase();
            const request = {
                'symbol': market['id'],
                'order_type': orderType,
                'side': orderSide,
            };
            const isMarket = orderType === 'MARKET';
            const timeInForce = this.safeStringLower(params, 'timeInForce');
            const postOnly = this.isPostOnly(isMarket, undefined, params);
            if (postOnly) {
                request['order_type'] = 'POST_ONLY';
            }
            else if (timeInForce === 'fok') {
                request['order_type'] = 'FOK';
            }
            else if (timeInForce === 'ioc') {
                request['order_type'] = 'IOC';
            }
            if (reduceOnly) {
                request['reduce_only'] = reduceOnly;
            }
            if (price !== undefined) {
                request['order_price'] = this.priceToPrecision(symbol, price);
            }
            request['order_quantity'] = this.amountToPrecision(symbol, amount);
            const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
            if (clientOrderId !== undefined) {
                request['client_order_id'] = clientOrderId;
            }
            const brokerId = this.safeString(this.options, 'brokerId');
            if (brokerId !== undefined) {
                request['broker_id'] = brokerId;
            }
            params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
            const response = await this.v1PrivatePostOrder(this.extend(request, params));
            // {
            //     success: true,
            //     timestamp: '1641383206.489',
            //     order_id: '86980774',
            //     order_type: 'LIMIT',
            //     order_price: '1', // null for 'MARKET' order
            //     order_quantity: '12', // null for 'MARKET' order
            //     order_amount: null, // NOT-null for 'MARKET' order
            //     client_order_id: '0'
            // }
            return this.extend(this.parseOrder(response, market), { 'type': type, 'status': 'open' });
        }
    }
    async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name woo#editOrder
         * @description edit a trade order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'oid': id,
            // 'quantity': this.amountToPrecision (symbol, amount),
            // 'price': this.priceToPrecision (symbol, price),
        };
        if (price !== undefined && type !== 'stop') {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
        if (triggerPrice !== undefined) {
            request['triggerPrice'] = triggerPrice;
        }
        if (amount !== undefined) {
            request['quantity'] = this.amountToPrecision(symbol, amount);
        }
        let method = 'v3PrivatePutOrderOid';
        if (this.maybeAlgoOrderId(id)) {
            method = 'v3PrivatePutAlgoOrderOid';
        }
        const response = await this[method](this.extend(request, params));
        //
        //     {
        //         "code": 0,
        //         "data": {
        //             "status": "string",
        //             "success": true
        //         },
        //         "message": "string",
        //         "success": true,
        //         "timestamp": 0
        //     }
        //
        const data = this.safeValue(response, 'data', {});
        return this.parseOrder(data, market);
    }
    maybeAlgoOrderId(id) {
        const stringId = this.numberToString(id);
        if (stringId.length < 9) {
            return true;
        }
        return false;
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        if (this.maybeAlgoOrderId(id)) {
            return this.cancelAlgoOrder(id, symbol, params);
        }
        else {
            return this.cancelRegularOrder(id, symbol, params);
        }
    }
    async cancelAlgoOrder(id, symbol = undefined, params = {}) {
        const request = {};
        request['oid'] = id;
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        request['symbol'] = market['id'];
        const response = await this.v3PrivateDeleteAlgoOrderOid(this.extend(request, params));
        //
        // { success: true, status: 'CANCEL_SENT' }
        //
        const extendParams = { 'symbol': symbol };
        extendParams['id'] = id;
        return this.extend(this.parseOrder(response), extendParams);
    }
    async cancelRegularOrder(id, symbol = undefined, params = {}) {
        const request = {};
        const clientOrderIdUnified = this.safeString2(params, 'clOrdID', 'clientOrderId');
        const clientOrderIdExchangeSpecific = this.safeString2(params, 'client_order_id', clientOrderIdUnified);
        const isByClientOrder = clientOrderIdExchangeSpecific !== undefined;
        if (isByClientOrder) {
            request['client_order_id'] = clientOrderIdExchangeSpecific;
            params = this.omit(params, ['clOrdID', 'clientOrderId', 'client_order_id']);
        }
        else {
            request['order_id'] = id;
        }
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        request['symbol'] = market['id'];
        const response = await this.v1PrivateDeleteOrder(this.extend(request, params));
        //
        // { success: true, status: 'CANCEL_SENT' }
        //
        const extendParams = { 'symbol': symbol };
        if (isByClientOrder) {
            extendParams['client_order_id'] = clientOrderIdExchangeSpecific;
        }
        else {
            extendParams['id'] = id;
        }
        return this.extend(this.parseOrder(response), extendParams);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#cancelAllOrders
         * @description cancel all open orders in a market
         * @param {string|undefined} symbol unified market symbol
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' canelOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PrivateDeleteOrders(this.extend(request, params));
        await this.v3PrivateDeleteAlgoOrdersPending(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "status":"CANCEL_ALL_SENT"
        //     }
        //
        return response;
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string|undefined} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = (symbol !== undefined) ? this.market(symbol) : undefined;
        const request = {};
        const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
        let chosenSpotMethod = undefined;
        if (this.maybeAlgoOrderId(id)) {
            chosenSpotMethod = 'v3PrivateDeleteAlgoOrderOid';
        }
        else if (clientOrderId) {
            chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
            request['client_order_id'] = clientOrderId;
        }
        else {
            chosenSpotMethod = 'v1PrivateGetOrderOid';
            request['oid'] = id;
        }
        const response = await this[chosenSpotMethod](this.extend(request, params));
        //
        // {
        //     success: true,
        //     symbol: 'SPOT_WOO_USDT',
        //     status: 'FILLED', // FILLED, NEW
        //     side: 'BUY',
        //     created_time: '1641480933.000',
        //     order_id: '87541111',
        //     order_tag: 'default',
        //     price: '1',
        //     type: 'LIMIT',
        //     quantity: '12',
        //     amount: null,
        //     visible: '12',
        //     executed: '12', // or any partial amount
        //     total_fee: '0.0024',
        //     fee_asset: 'WOO',
        //     client_order_id: null,
        //     average_executed_price: '1',
        //     Transactions: [
        //       {
        //         id: '99111647',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641482113.084',
        //         order_id: '87541111',
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //       }
        //     ]
        // }
        //
        return this.parseOrder(response, market);
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrders
         * @description fetches information on multiple orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        request['size'] = 500;
        request['status'] = 'INCOMPLETE';
        const ordersResponse = await this.v1PrivateGetOrders(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "meta":{
        //             "total":1,
        //             "records_per_page":100,
        //             "current_page":1
        //         },
        //         "rows":[
        //             {
        //                 "symbol":"PERP_BTC_USDT",
        //                 "status":"FILLED",
        //                 "side":"SELL",
        //                 "created_time":"1611617776.000",
        //                 "updated_time":"1611617776.000",
        //                 "order_id":52121167,
        //                 "order_tag":"default",
        //                 "price":null,
        //                 "type":"MARKET",
        //                 "quantity":0.002,
        //                 "amount":null,
        //                 "visible":0,
        //                 "executed":0.002,
        //                 "total_fee":0.01732885,
        //                 "fee_asset":"USDT",
        //                 "client_order_id":null,
        //                 "average_executed_price":28881.41
        //             }
        //         ]
        //     }
        //
        const ordersData = this.safeValue(ordersResponse, 'rows');
        let total = 0;
        let algoOrdersRows = [];
        for (let i = 0; i < 50; i++) {
            request['size'] = 50;
            request['page'] = i + 1;
            const algoOrdersResponse = await this.v3PrivateGetAlgoOrders(this.extend(request, params));
            const algoOrdersData = this.safeValue(algoOrdersResponse, 'data');
            const algoOrdersMeta = this.safeValue(algoOrdersData, 'meta');
            const newRows = this.safeValue(algoOrdersData, 'rows');
            total = total + newRows.length;
            algoOrdersRows = this.arrayConcat(algoOrdersRows, newRows);
            const knownTotal = this.safeInteger(algoOrdersMeta, 'total');
            if (total >= knownTotal) {
                break;
            }
        }
        const allOrdersData = this.arrayConcat(ordersData, algoOrdersRows);
        return this.parseOrders(allOrdersData, market, since, limit, params);
    }
    parseTimeInForce(timeInForce) {
        const timeInForces = {
            'ioc': 'IOC',
            'fok': 'FOK',
            'post_only': 'PO',
        };
        return this.safeString(timeInForces, timeInForce, undefined);
    }
    parseOrderType(type, algoType = undefined) {
        if (algoType !== undefined) {
            if (algoType === 'take_profit') {
                if (type === 'market') {
                    return 'stop';
                }
                else {
                    return 'stopLimit';
                }
            }
        }
        // LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE
        const types = {
            'limit': 'limit',
            'market': 'market',
            'post_only': 'limit',
            'ioc': 'limit',
            'fok': 'limit',
            'liquidate': 'limit',
            // 'stop_market': 'stop',
            // 'take_profit_market': 'stop',
            // 'take_profit_limit': 'stopLimit',
            // 'trigger_limit': 'stopLimit',
            // 'trigger_market': 'stop',
        };
        return this.safeStringLower(types, type, type);
    }
    parseOrder(order, market = undefined) {
        const isAlgoOrder = 'algoType' in order;
        if (isAlgoOrder) {
            return this.parseAlgoOrder(order, market);
        }
        else {
            return this.parseRegularOrder(order, market);
        }
    }
    parseRegularOrder(order, market = undefined) {
        //
        // Possible input functions:
        // * createOrder
        // * cancelOrder
        // * fetchOrder
        // * fetchOrders
        // const isFromFetchOrder = ('order_tag' in order); TO_DO
        const timestamp = this.safeTimestamp2(order, 'timestamp', 'created_time');
        const orderId = this.safeString2(order, 'order_id', 'orderId');
        const clientOrderId = this.safeString2(order, 'client_order_id', 'clientOrderId'); // Somehow, this always returns 0 for limit order
        const marketId = this.safeString(order, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString2(order, 'order_price', 'price');
        const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
        const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
        const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'));
        const status = this.safeValue(order, 'status');
        const side = this.safeStringLower(order, 'side');
        const type = this.safeStringUpper(order, 'type');
        const postOnly = type === 'POST_ONLY';
        const filled = this.safeValue(order, 'executed');
        const average = this.safeString2(order, 'average_executed_price', 'executedPrice');
        const remaining = Precise.stringSub(cost, filled);
        const fee = this.safeValue2(order, 'total_fee', 'totalFee');
        const feeCurrency = this.safeString2(order, 'fee_asset', 'feeAsset');
        const transactions = this.safeValue(order, 'Transactions');
        return this.safeOrder({
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': undefined,
            'status': this.parseOrderStatus(status),
            'symbol': symbol,
            'type': orderType,
            'timeInForce': this.parseTimeInForce(orderType),
            'postOnly': postOnly,
            'reduceOnly': this.safeValue(order, 'reduce_only'),
            'side': side,
            'price': price,
            'stopPrice': undefined,
            'triggerPrice': undefined,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': cost,
            'trades': transactions,
            'fee': {
                'cost': fee,
                'currency': feeCurrency,
            },
            'info': order,
        }, market);
    }
    parseAlgoOrder(order, market = undefined) {
        //
        // Possible input functions:
        // * createOrder
        // * cancelOrder
        // * fetchOrder
        // * fetchOrders
        // const isFromFetchOrder = ('order_tag' in order); TO_DO
        const timestamp = this.safeTimestamp2(order, 'timestamp', 'createdTime');
        const orderId = this.safeString(order, 'algoOrderId');
        const clientOrderId = this.safeString(order, 'clientOrderId'); // Somehow, this always returns 0 for limit order
        const marketId = this.safeString(order, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString2(order, 'price', 'triggerPrice');
        const stopPrice = this.safeString2(order, 'triggerPrice', 'price');
        const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
        const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
        const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'), this.safeStringLower(order, 'algoType'));
        let tsOrderType = orderType;
        if (orderType === 'market') {
            tsOrderType = 'stop';
        }
        const status = this.safeValue(order, 'algoStatus');
        const side = this.safeStringLower(order, 'side');
        const filled = this.safeValue(order, 'executed');
        const average = this.safeString(order, 'average_executed_price');
        const remaining = Precise.stringSub(cost, filled);
        const fee = this.safeValue(order, 'totalFee');
        const feeCurrency = this.safeString(order, 'feeAsset');
        const transactions = this.safeValue(order, 'Transactions');
        return this.safeOrder({
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': undefined,
            'status': this.parseOrderStatus(status),
            'symbol': symbol,
            'type': tsOrderType,
            'timeInForce': this.parseTimeInForce(orderType),
            'postOnly': undefined,
            'reduceOnly': this.safeValue(order, 'reduceOnly'),
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': undefined,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': cost,
            'trades': transactions,
            'fee': {
                'cost': fee,
                'currency': feeCurrency,
            },
            'info': order,
            // TEALSTREET
            'reduce': this.safeValue(order, 'reduceOnly'),
            'trigger': 'Mark',
            // we don't know this from api
            // 'close': this.safeValue (order, 'closeOnTrigger'),
            // TEALSTREET
        }, market);
    }
    parseOrderStatus(status) {
        if (status !== undefined) {
            const statuses = {
                'NEW': 'open',
                'FILLED': 'closed',
                'CANCEL_SENT': 'canceled',
                'CANCEL_ALL_SENT': 'canceled',
                'CANCELLED': 'canceled',
                'PARTIAL_FILLED': 'open',
                'REJECTED': 'rejected',
                'INCOMPLETE': 'open',
                'REPLACED': 'open',
                'COMPLETED': 'closed',
            };
            return this.safeString(statuses, status, status);
        }
        return status;
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            limit = Math.min(limit, 1000);
            request['max_level'] = limit;
        }
        const response = await this.v1PrivateGetOrderbookSymbol(this.extend(request, params));
        //
        // {
        //   success: true,
        //   timestamp: '1641562961192',
        //   asks: [
        //     { price: '0.921', quantity: '76.01' },
        //     { price: '0.933', quantity: '477.10' },
        //     ...
        //   ],
        //   bids: [
        //     { price: '0.940', quantity: '13502.47' },
        //     { price: '0.932', quantity: '43.91' },
        //     ...
        //   ]
        // }
        //
        const timestamp = this.safeInteger(response, 'timestamp');
        return this.parseOrderBook(response, symbol, timestamp, 'bids', 'asks', 'price', 'quantity');
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'resolution': this.timeframes[timeframe],
            'from': since / 1000,
        };
        const parsedTimeFrame = this.parseTimeframe(timeframe);
        const duration = parsedTimeFrame * 1000 * limit;
        const to = this.sum(since, duration);
        request['to'] = to / 1000;
        const response = await this.v1PublicGetTvHistory(this.extend(request, params));
        const res = [];
        if (response.s === 'ok') {
            const length = response.t.length;
            for (let i = 0; i < length; i++) {
                res.push([
                    response.t[i] * 1000,
                    response.o[i],
                    response.h[i],
                    response.l[i],
                    response.c[i],
                    response.v[i],
                ]);
            }
        }
        else {
            throw (response.s);
        }
        return res;
    }
    parseOHLCV(ohlcv, market = undefined) {
        // example response in fetchOHLCV
        return [
            this.safeInteger(ohlcv, 'start_timestamp'),
            this.safeNumber(ohlcv, 'open'),
            this.safeNumber(ohlcv, 'high'),
            this.safeNumber(ohlcv, 'low'),
            this.safeNumber(ohlcv, 'close'),
            this.safeNumber(ohlcv, 'volume'),
        ];
    }
    async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrderTrades
         * @description fetch all the trades made from a single order
         * @param {string} id order id
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        const request = {
            'oid': id,
        };
        const response = await this.v1PrivateGetOrderOidTrades(this.extend(request, params));
        // {
        //     success: true,
        //     rows: [
        //       {
        //         id: '99111647',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641482113.084',
        //         order_id: '87541111',
        //         order_tag: 'default',
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //       }
        //     ]
        // }
        const trades = this.safeValue(response, 'rows', []);
        return this.parseTrades(trades, market, since, limit, params);
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        const response = await this.v1PrivateGetClientTrades(this.extend(request, params));
        // {
        //     "success": true,
        //     "meta": {
        //         "records_per_page": 25,
        //         "current_page": 1
        //     },
        //     "rows": [
        //         {
        //             "id": 5,
        //             "symbol": "SPOT_BTC_USDT",
        //             "order_id": 211,
        //             "order_tag": "default",
        //             "executed_price": 10892.84,
        //             "executed_quantity": 0.002,
        //             "is_maker": 0,
        //             "side": "SELL",
        //             "fee": 0,
        //             "fee_asset": "USDT",
        //             "executed_timestamp": "1566264290.250"
        //         },
        //         ...
        //     ]
        // }
        const trades = this.safeValue(response, 'rows', []);
        return this.parseTrades(trades, market, since, limit, params);
    }
    async fetchAccounts(params = {}) {
        /**
         * @method
         * @name woo#fetchAccounts
         * @description fetch all the accounts associated with a profile
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
         */
        const response = await this.v1PrivateGetSubAccountAssets(params);
        //
        //     {
        //         rows: [{
        //                 application_id: '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
        //                 account: 'Main',
        //                 usdt_balance: '4.0'
        //             },
        //             {
        //                 application_id: '432952aa-a401-4e26-aff6-972920aebba3',
        //                 account: 'subaccount',
        //                 usdt_balance: '1.0'
        //             }
        //         ],
        //         success: true
        //     }
        //
        const rows = this.safeValue(response, 'rows', []);
        return this.parseAccounts(rows, params);
    }
    parseAccount(account) {
        //
        //     {
        //         application_id: '336952aa-a401-4e26-aff6-972920aebba3',
        //         account: 'subaccount',
        //         usdt_balance: '1.0',
        //     }
        //
        const accountId = this.safeString(account, 'account');
        return {
            'info': account,
            'id': this.safeString(account, 'application_id'),
            'name': accountId,
            'code': undefined,
            'type': accountId === 'Main' ? 'main' : 'subaccount',
        };
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name woo#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://docs.woo.org/#get-current-holding-get-balance-new
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const response = await this.v3PrivateGetBalances(params);
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "holding": [
        //                 {
        //                     "token": "0_token",
        //                     "holding": 1,
        //                     "frozen": 0,
        //                     "staked": 0,
        //                     "unbonding": 0,
        //                     "vault": 0,
        //                     "interest": 0,
        //                     "pendingShortQty": 0,
        //                     "pendingLongQty": 0,
        //                     "availableBalance": 0,
        //                     "updatedTime": 312321.121
        //                 }
        //             ]
        //         },
        //         "timestamp": 1673323746259
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseBalance(data);
    }
    parseBalance(response) {
        const result = {
            'info': response,
        };
        const balances = this.safeValue(response, 'holding', []);
        for (let i = 0; i < balances.length; i++) {
            const balance = balances[i];
            const code = this.safeCurrencyCode(this.safeString(balance, 'token'));
            const account = this.account();
            account['total'] = this.safeString(balance, 'holding');
            account['free'] = this.safeString(balance, 'availableBalance');
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    async fetchDepositAddress(code, params = {}) {
        /**
         * @method
         * @name woo#fetchDepositAddress
         * @description fetch the deposit address for a currency associated with this account
         * @param {string} code unified currency code
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
         */
        // this method is TODO because of networks unification
        await this.loadMarkets();
        const currency = this.currency(code);
        const networkCodeDefault = this.defaultNetworkCodeForCurrency(code);
        const networkCode = this.safeString(params, 'network', networkCodeDefault);
        params = this.omit(params, 'network');
        const codeForExchange = networkCode + '_' + currency['code'];
        const request = {
            'token': codeForExchange,
        };
        const response = await this.v1PrivateGetAssetDeposit(this.extend(request, params));
        // {
        //     success: true,
        //     address: '3Jmtjx5544T4smrit9Eroe4PCrRkpDeKjP',
        //     extra: ''
        // }
        const tag = this.safeString(response, 'extra');
        const address = this.safeString(response, 'address');
        this.checkAddress(address);
        return {
            'currency': code,
            'address': address,
            'tag': tag,
            'network': networkCode,
            'info': response,
        };
    }
    async getAssetHistoryRows(code = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        let currency = undefined;
        if (code !== undefined) {
            currency = this.currency(code);
            request['balance_token'] = currency['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        if (limit !== undefined) {
            request['pageSize'] = limit;
        }
        const transactionType = this.safeString(params, 'type');
        params = this.omit(params, 'type');
        if (transactionType !== undefined) {
            request['type'] = transactionType;
        }
        const response = await this.v1PrivateGetAssetHistory(this.extend(request, params));
        // {
        //     rows: [
        //       {
        //         id: '22010508193900165',
        //         token: 'TRON_USDT',
        //         extra: '',
        //         amount: '13.75848500',
        //         status: 'COMPLETED',
        //         account: null,
        //         description: null,
        //         user_id: '42222',
        //         application_id: '6ad2b303-f354-45c0-8105-9f5f19d0e335',
        //         external_id: '220105081900134',
        //         target_address: 'TXnyFSnAYad3YCaqtwMw9jvXKkeU39NLnK',
        //         source_address: 'TYDzsYUEpvnYmQk4zGP9sWWcTEd2MiAtW6',
        //         type: 'BALANCE',
        //         token_side: 'DEPOSIT',
        //         tx_id: '35b0004022f6b3ad07f39a0b7af199f6b258c2c3e2c7cdc93c67efa74fd625ee',
        //         fee_token: '',
        //         fee_amount: '0.00000000',
        //         created_time: '1641370779.442',
        //         updated_time: '1641370779.465',
        //         is_new_target_address: null,
        //         confirmed_number: '29',
        //         confirming_threshold: '27',
        //         audit_tag: '1',
        //         audit_result: '0',
        //         balance_token: null, // TODO -write to support, that this seems broken. here should be the token id
        //         network_name: null // TODO -write to support, that this seems broken. here should be the network id
        //       }
        //     ],
        //     meta: { total: '1', records_per_page: '25', current_page: '1' },
        //     success: true
        // }
        return [currency, this.safeValue(response, 'rows', {})];
    }
    async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchLedger
         * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
         * @param {string|undefined} code unified currency code, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
         * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
         */
        const [currency, rows] = await this.getAssetHistoryRows(code, since, limit, params);
        return this.parseLedger(rows, currency, since, limit, params);
    }
    parseLedgerEntry(item, currency = undefined) {
        const networkizedCode = this.safeString(item, 'token');
        const currencyDefined = this.getCurrencyFromChaincode(networkizedCode, currency);
        const code = currencyDefined['code'];
        const amount = this.safeNumber(item, 'amount');
        const side = this.safeString(item, 'token_side');
        const direction = (side === 'DEPOSIT') ? 'in' : 'out';
        const timestamp = this.safeTimestamp(item, 'created_time');
        const fee = this.parseTokenAndFeeTemp(item, 'fee_token', 'fee_amount');
        return {
            'id': this.safeString(item, 'id'),
            'currency': code,
            'account': this.safeString(item, 'account'),
            'referenceAccount': undefined,
            'referenceId': this.safeString(item, 'tx_id'),
            'status': this.parseTransactionStatus(this.safeString(item, 'status')),
            'amount': amount,
            'before': undefined,
            'after': undefined,
            'fee': fee,
            'direction': direction,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'type': this.parseLedgerEntryType(this.safeString(item, 'type')),
            'info': item,
        };
    }
    parseLedgerEntryType(type) {
        const types = {
            'BALANCE': 'transaction',
            'COLLATERAL': 'transfer', // Funds moved between portfolios
        };
        return this.safeString(types, type, type);
    }
    getCurrencyFromChaincode(networkizedCode, currency) {
        if (currency !== undefined) {
            return currency;
        }
        else {
            const parts = networkizedCode.split('_');
            const partsLength = parts.length;
            const firstPart = this.safeString(parts, 0);
            let currencyId = this.safeString(parts, 1, firstPart);
            if (partsLength > 2) {
                currencyId += '_' + this.safeString(parts, 2);
            }
            currency = this.safeCurrency(currencyId);
        }
        return currency;
    }
    async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchDeposits
         * @description fetch all deposits made to an account
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch deposits for
         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        const request = {
            'token_side': 'DEPOSIT',
        };
        return await this.fetchTransactions(code, since, limit, this.extend(request, params));
    }
    async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchWithdrawals
         * @description fetch all withdrawals made from an account
         * @param {string|undefined} code unified currency code
         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        const request = {
            'token_side': 'WITHDRAW',
        };
        return await this.fetchTransactions(code, since, limit, this.extend(request, params));
    }
    async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchTransactions
         * @description fetch history of deposits and withdrawals
         * @param {string|undefined} code unified currency code for the currency of the transactions, default is undefined
         * @param {int|undefined} since timestamp in ms of the earliest transaction, default is undefined
         * @param {int|undefined} limit max number of transactions to return, default is undefined
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        const request = {
            'type': 'BALANCE',
        };
        const [currency, rows] = await this.getAssetHistoryRows(code, since, limit, this.extend(request, params));
        //
        //     {
        //         "rows":[],
        //         "meta":{
        //             "total":0,
        //             "records_per_page":25,
        //             "current_page":1
        //         },
        //         "success":true
        //     }
        //
        return this.parseTransactions(rows, currency, since, limit, params);
    }
    parseTransaction(transaction, currency = undefined) {
        // example in fetchLedger
        const networkizedCode = this.safeString(transaction, 'token');
        const currencyDefined = this.getCurrencyFromChaincode(networkizedCode, currency);
        const code = currencyDefined['code'];
        let movementDirection = this.safeStringLower(transaction, 'token_side');
        if (movementDirection === 'withdraw') {
            movementDirection = 'withdrawal';
        }
        const fee = this.parseTokenAndFeeTemp(transaction, 'fee_token', 'fee_amount');
        const addressTo = this.safeString(transaction, 'target_address');
        const addressFrom = this.safeString(transaction, 'source_address');
        const timestamp = this.safeTimestamp(transaction, 'created_time');
        return {
            'id': this.safeString2(transaction, 'id', 'withdraw_id'),
            'txid': this.safeString(transaction, 'tx_id'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'address': undefined,
            'addressFrom': addressFrom,
            'addressTo': addressTo,
            'tag': this.safeString(transaction, 'extra'),
            'type': movementDirection,
            'amount': this.safeNumber(transaction, 'amount'),
            'currency': code,
            'status': this.parseTransactionStatus(this.safeString(transaction, 'status')),
            'updated': this.safeTimestamp(transaction, 'updated_time'),
            'fee': fee,
            'info': transaction,
        };
    }
    parseTransactionStatus(status) {
        const statuses = {
            'NEW': 'pending',
            'CONFIRMING': 'pending',
            'PROCESSING': 'pending',
            'COMPLETED': 'ok',
            'CANCELED': 'canceled',
        };
        return this.safeString(statuses, status, status);
    }
    async transfer(code, amount, fromAccount, toAccount, params = {}) {
        /**
         * @method
         * @name woo#transfer
         * @description transfer currency internally between wallets on the same account
         * @param {string} code unified currency code
         * @param {float} amount amount to transfer
         * @param {string} fromAccount account to transfer from
         * @param {string} toAccount account to transfer to
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        await this.loadMarkets();
        const currency = this.currency(code);
        const request = {
            'token': currency['id'],
            'amount': this.parseNumber(amount),
            'from_application_id': fromAccount,
            'to_application_id': toAccount,
        };
        const response = await this.v1PrivatePostAssetMainSubTransfer(this.extend(request, params));
        //
        //     {
        //         "success": true,
        //         "id": 200
        //     }
        //
        const transfer = this.parseTransfer(response, currency);
        const transferOptions = this.safeValue(this.options, 'transfer', {});
        const fillResponseFromRequest = this.safeValue(transferOptions, 'fillResponseFromRequest', true);
        if (fillResponseFromRequest) {
            transfer['amount'] = amount;
            transfer['fromAccount'] = fromAccount;
            transfer['toAccount'] = toAccount;
        }
        return transfer;
    }
    async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchTransfers
         * @description fetch a history of internal transfers made on an account
         * @param {string|undefined} code unified currency code of the currency transferred
         * @param {int|undefined} since the earliest time in ms to fetch transfers for
         * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
         */
        const request = {
            'type': 'COLLATERAL',
        };
        const [currency, rows] = await this.getAssetHistoryRows(code, since, limit, this.extend(request, params));
        return this.parseTransfers(rows, currency, since, limit, params);
    }
    parseTransfer(transfer, currency = undefined) {
        //
        //    getAssetHistoryRows
        //        {
        //            "created_time": "1579399877.041",  // Unix epoch time in seconds
        //            "updated_time": "1579399877.041",  // Unix epoch time in seconds
        //            "id": "202029292829292",
        //            "external_id": "202029292829292",
        //            "application_id": null,
        //            "token": "ETH",
        //            "target_address": "0x31d64B3230f8baDD91dE1710A65DF536aF8f7cDa",
        //            "source_address": "0x70fd25717f769c7f9a46b319f0f9103c0d887af0",
        //            "extra": "",
        //            "type": "BALANCE",
        //            "token_side": "DEPOSIT",
        //            "amount": 1000,
        //            "tx_id": "0x8a74c517bc104c8ebad0c3c3f64b1f302ed5f8bca598ae4459c63419038106b6",
        //            "fee_token": null,
        //            "fee_amount": null,
        //            "status": "CONFIRMING"
        //        }
        //
        //    v1PrivatePostAssetMainSubTransfer
        //        {
        //            "success": true,
        //            "id": 200
        //        }
        //
        const networkizedCode = this.safeString(transfer, 'token');
        const currencyDefined = this.getCurrencyFromChaincode(networkizedCode, currency);
        const code = currencyDefined['code'];
        let movementDirection = this.safeStringLower(transfer, 'token_side');
        if (movementDirection === 'withdraw') {
            movementDirection = 'withdrawal';
        }
        let fromAccount = undefined;
        let toAccount = undefined;
        if (movementDirection === 'withdraw') {
            fromAccount = undefined;
            toAccount = 'spot';
        }
        else if (movementDirection === 'deposit') {
            fromAccount = 'spot';
            toAccount = undefined;
        }
        const timestamp = this.safeTimestamp(transfer, 'created_time');
        const success = this.safeValue(transfer, 'success');
        let status = undefined;
        if (success !== undefined) {
            status = success ? 'ok' : 'failed';
        }
        return {
            'id': this.safeString(transfer, 'id'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'currency': code,
            'amount': this.safeNumber(transfer, 'amount'),
            'fromAccount': fromAccount,
            'toAccount': toAccount,
            'status': this.parseTransferStatus(this.safeString(transfer, 'status', status)),
            'info': transfer,
        };
    }
    parseTransferStatus(status) {
        const statuses = {
            'NEW': 'pending',
            'CONFIRMING': 'pending',
            'PROCESSING': 'pending',
            'COMPLETED': 'ok',
            'CANCELED': 'canceled',
        };
        return this.safeString(statuses, status, status);
    }
    async withdraw(code, amount, address, tag = undefined, params = {}) {
        /**
         * @method
         * @name woo#withdraw
         * @description make a withdrawal
         * @param {string} code unified currency code
         * @param {float} amount the amount to withdraw
         * @param {string} address the address to withdraw to
         * @param {string|undefined} tag
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
         */
        [tag, params] = this.handleWithdrawTagAndParams(tag, params);
        await this.loadMarkets();
        this.checkAddress(address);
        const currency = this.currency(code);
        const request = {
            'amount': amount,
            'address': address,
        };
        if (tag !== undefined) {
            request['extra'] = tag;
        }
        const networks = this.safeValue(this.options, 'networks', {});
        const currencyNetworks = this.safeValue(currency, 'networks', {});
        const network = this.safeStringUpper(params, 'network');
        const networkId = this.safeString(networks, network, network);
        const coinNetwork = this.safeValue(currencyNetworks, networkId, {});
        const coinNetworkId = this.safeString(coinNetwork, 'id');
        if (coinNetworkId === undefined) {
            throw new BadRequest(this.id + ' withdraw() require network parameter');
        }
        request['token'] = coinNetworkId;
        const response = await this.v1PrivatePostAssetWithdraw(this.extend(request, params));
        //
        //     {
        //         "success": true,
        //         "withdraw_id": "20200119145703654"
        //     }
        //
        return this.parseTransaction(response, currency);
    }
    async repayMargin(code, amount, symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#repayMargin
         * @description repay borrowed margin and interest
         * @see https://docs.woo.org/#repay-interest
         * @param {string} code unified currency code of the currency to repay
         * @param {float} amount the amount to repay
         * @param {string|undefined} symbol not used by woo.repayMargin ()
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
        }
        const currency = this.currency(code);
        const request = {
            'token': currency['id'],
            'amount': this.currencyToPrecision(code, amount),
        };
        const response = await this.v1PrivatePostInterestRepay(this.extend(request, params));
        //
        //     {
        //         "success": true,
        //     }
        //
        const transaction = this.parseMarginLoan(response, currency);
        return this.extend(transaction, {
            'amount': amount,
            'symbol': symbol,
        });
    }
    parseMarginLoan(info, currency = undefined) {
        //
        //     {
        //         "success": true,
        //     }
        //
        return {
            'id': undefined,
            'currency': this.safeCurrencyCode(undefined, currency),
            'amount': undefined,
            'symbol': undefined,
            'timestamp': undefined,
            'datetime': undefined,
            'info': info,
        };
    }
    nonce() {
        return this.milliseconds();
    }
    sign(path, section = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const version = section[0];
        const access = section[1];
        const isUdfPath = path === 'tv/history';
        const pathWithParams = this.implodeParams(path, params);
        let url = this.implodeHostname(this.urls['api'][access]);
        if (isUdfPath) {
            url += '/';
        }
        else {
            url += '/' + version + '/';
        }
        params = this.omit(params, this.extractParams(path));
        params = this.keysort(params);
        if (access === 'public') {
            if (isUdfPath) {
                url += pathWithParams;
            }
            else {
                url += access + '/' + pathWithParams;
            }
            if (Object.keys(params).length) {
                url += '?' + this.urlencode(params);
            }
        }
        else if (access === 'pub') {
            url += pathWithParams;
            if (Object.keys(params).length) {
                url += '?' + this.urlencode(params);
            }
        }
        else {
            this.checkRequiredCredentials();
            let auth = '';
            const ts = this.nonce().toString();
            url += pathWithParams;
            headers = {
                'x-api-key': this.apiKey,
                'x-api-timestamp': ts,
            };
            if (version === 'v3') {
                auth = ts + method + '/' + version + '/' + pathWithParams;
                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
                    body = this.json(params);
                    auth += body;
                }
                else {
                    if (Object.keys(params).length) {
                        const query = this.urlencode(params);
                        url += '?' + query;
                        auth += '?' + query;
                    }
                }
                headers['content-type'] = 'application/json';
            }
            else {
                auth = this.urlencode(params);
                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
                    body = auth;
                }
                else {
                    url += '?' + auth;
                }
                auth += '|' + ts;
                headers['content-type'] = 'application/x-www-form-urlencoded';
            }
            headers['x-api-signature'] = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (!response) {
            return; // fallback to default error handler
        }
        //
        //     400 Bad Request {"success":false,"code":-1012,"message":"Amount is required for buy market orders when margin disabled."}
        //
        const success = this.safeValue(response, 'success');
        const errorCode = this.safeString(response, 'code');
        if (!success) {
            const feedback = this.id + ' ' + this.json(response);
            this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);
            this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        }
    }
    parseIncome(income, market = undefined) {
        //
        //     {
        //         "id":666666,
        //         "symbol":"PERP_BTC_USDT",
        //         "funding_rate":0.00001198,
        //         "mark_price":28941.04000000,
        //         "funding_fee":0.00069343,
        //         "payment_type":"Pay",
        //         "status":"COMPLETED",
        //         "created_time":"1653616000.666",
        //         "updated_time":"1653616000.605"
        //     }
        //
        const marketId = this.safeString(income, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const amount = this.safeNumber(income, 'funding_fee');
        const code = this.safeCurrencyCode('USD');
        const id = this.safeString(income, 'id');
        const timestamp = this.safeTimestamp(income, 'updated_time');
        const rate = this.safeNumber(income, 'funding_rate');
        return {
            'info': income,
            'symbol': symbol,
            'code': code,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'id': id,
            'amount': amount,
            'rate': rate,
        };
    }
    async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        const response = await this.v1PrivateGetFundingFeeHistory(this.extend(request, params));
        //
        //     {
        //         "rows":[
        //             {
        //                 "id":666666,
        //                 "symbol":"PERP_BTC_USDT",
        //                 "funding_rate":0.00001198,
        //                 "mark_price":28941.04000000,
        //                 "funding_fee":0.00069343,
        //                 "payment_type":"Pay",
        //                 "status":"COMPLETED",
        //                 "created_time":"1653616000.666",
        //                 "updated_time":"1653616000.605"
        //             }
        //         ],
        //         "meta":{
        //             "total":235,
        //             "records_per_page":25,
        //             "current_page":1
        //         },
        //         "success":true
        //     }
        //
        const result = this.safeValue(response, 'rows', []);
        return this.parseIncomes(result, market, since, limit);
    }
    parseFundingRate(fundingRate, market = undefined) {
        //
        //         {
        //             "symbol":"PERP_AAVE_USDT",
        //             "est_funding_rate":-0.00003447,
        //             "est_funding_rate_timestamp":1653633959001,
        //             "last_funding_rate":-0.00002094,
        //             "last_funding_rate_timestamp":1653631200000,
        //             "next_funding_time":1653634800000
        //         }
        //
        //
        const symbol = this.safeString(fundingRate, 'symbol');
        market = this.market(symbol);
        const nextFundingTimestamp = this.safeInteger(fundingRate, 'next_funding_time');
        const estFundingRateTimestamp = this.safeInteger(fundingRate, 'est_funding_rate_timestamp');
        const lastFundingRateTimestamp = this.safeInteger(fundingRate, 'last_funding_rate_timestamp');
        return {
            'info': fundingRate,
            'symbol': market['symbol'],
            'markPrice': undefined,
            'indexPrice': undefined,
            'interestRate': this.parseNumber('0'),
            'estimatedSettlePrice': undefined,
            'timestamp': estFundingRateTimestamp,
            'datetime': this.iso8601(estFundingRateTimestamp),
            'fundingRate': this.safeNumber(fundingRate, 'est_funding_rate'),
            'fundingTimestamp': nextFundingTimestamp,
            'fundingDatetime': this.iso8601(nextFundingTimestamp),
            'nextFundingRate': undefined,
            'nextFundingTimestamp': undefined,
            'nextFundingDatetime': undefined,
            'previousFundingRate': this.safeNumber(fundingRate, 'last_funding_rate'),
            'previousFundingTimestamp': lastFundingRateTimestamp,
            'previousFundingDatetime': this.iso8601(lastFundingRateTimestamp),
        };
    }
    async fetchFundingRate(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PublicGetFundingRateSymbol(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "timestamp":1653640572711,
        //         "symbol":"PERP_BTC_USDT",
        //         "est_funding_rate":0.00000738,
        //         "est_funding_rate_timestamp":1653640559003,
        //         "last_funding_rate":0.00000629,
        //         "last_funding_rate_timestamp":1653638400000,
        //         "next_funding_time":1653642000000
        //     }
        //
        return this.parseFundingRate(response, market);
    }
    async fetchFundingRates(symbols = undefined, params = {}) {
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const response = await this.v1PublicGetFundingRates(params);
        //
        //     {
        //         "success":true,
        //         "rows":[
        //             {
        //                 "symbol":"PERP_AAVE_USDT",
        //                 "est_funding_rate":-0.00003447,
        //                 "est_funding_rate_timestamp":1653633959001,
        //                 "last_funding_rate":-0.00002094,
        //                 "last_funding_rate_timestamp":1653631200000,
        //                 "next_funding_time":1653634800000
        //             }
        //         ],
        //         "timestamp":1653633985646
        //     }
        //
        const rows = this.safeValue(response, 'rows', {});
        const result = this.parseFundingRates(rows);
        return this.filterByArray(result, 'symbol', symbols);
    }
    async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        if (symbol !== undefined) {
            const market = this.market(symbol);
            symbol = market['symbol'];
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = this.parseToInt(since / 1000);
        }
        const response = await this.v1PublicGetFundingRateHistory(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "meta":{
        //             "total":2464,
        //             "records_per_page":25,
        //             "current_page":1
        //         },
        //         "rows":[
        //             {
        //                 "symbol":"PERP_BTC_USDT",
        //                 "funding_rate":0.00000629,
        //                 "funding_rate_timestamp":1653638400000,
        //                 "next_funding_time":1653642000000
        //             }
        //         ],
        //         "timestamp":1653640814885
        //     }
        //
        const result = this.safeValue(response, 'rows');
        const rates = [];
        for (let i = 0; i < result.length; i++) {
            const entry = result[i];
            const marketId = this.safeString(entry, 'symbol');
            const timestamp = this.safeInteger(entry, 'funding_rate_timestamp');
            rates.push({
                'info': entry,
                'symbol': this.safeSymbol(marketId),
                'fundingRate': this.safeNumber(entry, 'funding_rate'),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
            });
        }
        const sorted = this.sortBy(rates, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    async fetchLeverage(symbol, params = {}) {
        await this.loadMarkets();
        const response = await this.v3PrivateGetAccountinfo(params);
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "applicationId": "dsa",
        //             "account": "dsa",
        //             "alias": "haha",
        //             "accountMode": "MARGIN",
        //             "leverage": 1,
        //             "takerFeeRate": 1,
        //             "makerFeeRate": 1,
        //             "interestRate": 1,
        //             "futuresTakerFeeRate": 1,
        //             "futuresMakerFeeRate": 1,
        //             "otpauth": true,
        //             "marginRatio": 1,
        //             "openMarginRatio": 1,
        //             "initialMarginRatio": 1,
        //             "maintenanceMarginRatio": 1,
        //             "totalCollateral": 1,
        //             "freeCollateral": 1,
        //             "totalAccountValue": 1,
        //             "totalVaultValue": 1,
        //             "totalStakingValue": 1
        //         },
        //         "timestamp": 1673323685109
        //     }
        //
        const result = this.safeValue(response, 'data');
        const leverage = this.safeNumber(result, 'leverage');
        return {
            'info': response,
            'leverage': leverage,
        };
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        await this.loadMarkets();
        if ((leverage !== 1) && (leverage !== 2) && (leverage !== 3) && (leverage !== 4) && (leverage !== 5) && (leverage !== 10) && (leverage !== 15) && (leverage !== 20) && (leverage !== 50)) {
            throw new BadRequest(this.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
        }
        const request = {
            'leverage': leverage,
        };
        return await this.v1PrivatePostClientLeverage(this.extend(request, params));
    }
    async fetchPosition(symbol = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PrivateGetPositionSymbol(this.extend(request, params));
        //
        //     {
        //         "symbol":"PERP_ETC_USDT",
        //         "holding":0.0,
        //         "pnl_24_h":0,
        //         "settle_price":0.0,
        //         "average_open_price":0,
        //         "success":true,
        //         "mark_price":22.6955,
        //         "pending_short_qty":0.0,
        //         "pending_long_qty":0.0,
        //         "fee_24_h":0,
        //         "timestamp":"1652231044.920"
        //     }
        //
        return this.parsePosition(response, market);
    }
    async fetchPositions(symbols = undefined, params = {}) {
        await this.loadMarkets();
        const response = await this.v3PrivateGetPositions(params);
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "positions": [
        //                 {
        //                     "symbol": "0_symbol",
        //                     "holding": 1,
        //                     "pendingLongQty": 0,
        //                     "pendingShortQty": 1,
        //                     "settlePrice": 1,
        //                     "averageOpenPrice": 1,
        //                     "pnl24H": 1,
        //                     "fee24H": 1,
        //                     "markPrice": 1,
        //                     "estLiqPrice": 1,
        //                     "timestamp": 12321321
        //                 }
        //             ]
        //         },
        //         "timestamp": 1673323880342
        //     }
        //
        const result = this.safeValue(response, 'data', {});
        const positions = this.safeValue(result, 'positions', []);
        return this.parsePositions(positions, symbols);
    }
    parsePosition(position, market = undefined) {
        //
        //     {
        //         "symbol": "0_symbol",
        //         "holding": 1,
        //         "pendingLongQty": 0,
        //         "pendingShortQty": 1,
        //         "settlePrice": 1,
        //         "averageOpenPrice": 1,
        //         "pnl24H": 1,
        //         "fee24H": 1,
        //         "markPrice": 1,
        //         "estLiqPrice": 1,
        //         "timestamp": 12321321
        //     }
        //
        const contract = this.safeString(position, 'symbol');
        market = this.safeMarket(contract, market);
        const size = this.safeString(position, 'holding');
        let side = undefined;
        if (Precise.stringGt(size, '0')) {
            side = 'long';
        }
        else {
            side = 'short';
        }
        const contractSize = this.safeString(market, 'contractSize');
        const markPrice = this.safeString(position, 'markPrice');
        const timestamp = this.safeTimestamp(position, 'timestamp');
        const entryPrice = this.safeString(position, 'averageOpenPrice');
        const priceDifference = Precise.stringSub(markPrice, entryPrice);
        const unrealisedPnl = Precise.stringMul(priceDifference, size);
        return {
            'info': position,
            'id': market['symbol'] + ':' + side,
            'symbol': market['symbol'],
            'notional': undefined,
            'marginMode': 'cross',
            'liquidationPrice': this.safeNumber(position, 'estLiqPrice'),
            'entryPrice': this.parseNumber(entryPrice),
            'realizedPnl': this.safeString(position, 'pnl24H'),
            'unrealizedPnl': this.parseNumber(unrealisedPnl),
            'percentage': undefined,
            'contracts': this.parseNumber(size),
            'contractSize': this.parseNumber(contractSize),
            'markPrice': this.parseNumber(markPrice),
            'side': side,
            'hedged': false,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'maintenanceMargin': undefined,
            'maintenanceMarginPercentage': undefined,
            'collateral': undefined,
            'initialMargin': undefined,
            'initialMarginPercentage': undefined,
            'leverage': undefined,
            'marginRatio': undefined,
        };
    }
    defaultNetworkCodeForCurrency(code) {
        const currencyItem = this.currency(code);
        const networks = currencyItem['networks'];
        const networkKeys = Object.keys(networks);
        for (let i = 0; i < networkKeys.length; i++) {
            const network = networkKeys[i];
            if (network === 'ETH') {
                return network;
            }
        }
        // if it was not returned according to above options, then return the first network of currency
        return this.safeValue(networkKeys, 0);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name woo#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the paymium api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PublicGetFuturesSymbol(this.extend(request, params));
        //
        // {
        //   "symbol": "BTC-USDT",
        //   "priceChange": "10.00",
        //   "priceChangePercent": "10",
        //   "lastPrice": "5738.23",
        //   "lastVolume": "31.21",
        //   "highPrice": "5938.23",
        //   "lowPrice": "5238.23",
        //   "volume": "23211231.13",
        //   "dayVolume": "213124412412.47",
        //   "openPrice": "5828.32"
        // }
        //
        const ticker = this.safeValue(response, 'info');
        return this.parseTicker(ticker, market);
    }
    parseTicker(ticker, market = undefined) {
        //
        // {
        //   "symbol": "PERP_BTC_USDT",
        //   "index_price": 56727.31344564,
        //   "mark_price": 56727.31344564,
        //   "est_funding_rate": 0.12345689,
        //   "last_funding_rate": 0.12345689,
        //   "next_funding_time": 1567411795000,
        //   "open_interest": 0.12345689,
        //   "24h_open": 0.16112,
        //   "24h_close": 0.32206,
        //   "24h_high": 0.33000,
        //   "24h_low": 0.14251,
        //   "24h_volume": 89040821.98,
        //   "24h_amount": 22493062.21
        // }
        //
        const symbol = this.safeSymbol(undefined, market);
        const timestamp = this.milliseconds();
        const baseVolume = this.safeString(ticker, '24h_volume');
        const openFloat = this.safeFloat(ticker, '24h_open');
        const currentFloat = this.safeFloat(ticker, 'index_price');
        const percentage = currentFloat / openFloat * 100;
        const last = this.safeString(ticker, 'index_price');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeString(ticker, '24h_high'),
            'low': this.safeString(ticker, '24h_low'),
            'bid': this.safeString(ticker, 'index_price'),
            'bidVolume': undefined,
            'ask': this.safeString(ticker, 'index_price'),
            'askVolume': undefined,
            'open': this.safeString(ticker, '24h_open'),
            'close': last,
            'last': last,
            'mark': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': this.numberToString(percentage),
            'average': undefined,
            'baseVolume': baseVolume,
            'info': ticker,
        }, market);
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const leverageInfo = await this.fetchLeverage(market['id']);
        const leverage = this.safeInteger(leverageInfo, 'leverage');
        const accountConfig = {
            'marginMode': 'cross',
            'positionMode': 'oneway',
            'markets': {},
            'leverage': leverage,
        };
        const leverageConfigs = accountConfig['markets'];
        leverageConfigs[market['symbol']] = {
            'leverage': leverage,
            'buyLeverage': leverage,
            'sellLeverage': leverage,
        };
        return accountConfig;
    }
}

// eslint-disable-next-line import/prefer-default-export
class Signer {
    // eslint-disable-next-line no-useless-constructor, no-unused-vars, no-empty-function
    constructor(_account_id, _private_key) {
    }
    // eslint-disable-next-line no-unused-vars
    sign_request(_message) {
        return '';
    }
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class woofi$1 extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'woofi',
            'name': 'WOOFI',
            'countries': ['KY'],
            'rateLimit': 100,
            'version': 'v1',
            'certified': false,
            'pro': true,
            'hostname': 'dex.woo.org',
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': true,
                'swap': true,
                'future': false,
                'option': false,
                'addMargin': false,
                'borrowMargin': false,
                'cancelAllOrders': true,
                'cancelOrder': true,
                'cancelWithdraw': false,
                'createDepositAddress': false,
                'createMarketOrder': false,
                'createOrder': true,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': false,
                'createStopMarketOrder': false,
                'createStopOrder': false,
                'fetchAccounts': true,
                'fetchBalance': true,
                'fetchCanceledOrders': false,
                'fetchClosedOrder': false,
                'fetchClosedOrders': false,
                'fetchCurrencies': true,
                'fetchDepositAddress': false,
                'fetchDeposits': true,
                'fetchFundingHistory': true,
                'fetchFundingRate': true,
                'fetchFundingRateHistory': true,
                'fetchFundingRates': true,
                'fetchIndexOHLCV': false,
                'fetchLedger': true,
                'fetchLeverage': true,
                'fetchMarginMode': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': true,
                'fetchOHLCV': true,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrder': false,
                'fetchOpenOrders': false,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrders': true,
                'fetchOrderTrades': true,
                'fetchPosition': true,
                'fetchPositionMode': false,
                'fetchPositions': true,
                'fetchPremiumIndexOHLCV': false,
                'fetchStatus': false,
                'fetchTicker': false,
                'fetchTickers': false,
                'fetchTime': false,
                'fetchTrades': true,
                'fetchTradingFee': false,
                'fetchTradingFees': false,
                'fetchTransactions': true,
                'fetchTransfers': true,
                'fetchWithdrawals': true,
                'reduceMargin': false,
                'repayMargin': true,
                'setLeverage': true,
                'setMargin': false,
                'transfer': true,
                'withdraw': true, // exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs: https://kronosresearch.github.io/wootrade-documents/#token-withdraw
            },
            'timeframes': {
                '1m': '1',
                '3m': '3',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '2h',
                '4h': '4h',
                '8h': '8h',
                '12h': '12h',
                '1d': '1D',
                '3d': '3D',
                '1w': '1W',
                '1M': '1M',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
                'api': {
                    'pub': 'https://api-evm.orderly.org',
                    'public': 'https://api-evm.orderly.org',
                    'private': 'https://api-evm.orderly.org',
                },
                'test': {
                    'pub': 'https://testnet-api-evm.orderly.org',
                    'public': 'https://testnet-api-evm.orderly.org',
                    'private': 'https://testnet-api-evm.orderly.org',
                },
                'www': 'https://woo.org/',
                'doc': [
                    'https://docs.woo.org/',
                ],
                'fees': [
                    'https://support.woo.org/hc/en-001/articles/4404611795353--Trading-Fees',
                ],
                'referral': 'https://referral.woo.org/BAJS6oNmZb3vi3RGA',
            },
            'api': {
                'v1': {
                    'pub': {
                        'get': {
                            'hist/kline': 10,
                            'hist/trades': 1,
                        },
                    },
                    'public': {
                        'get': {
                            'info': 1,
                            'info/{symbol}': 1,
                            'system_info': 1,
                            'kline': 1,
                            'market_trades': 1,
                            'token': 1,
                            'token_network': 1,
                            'funding_rates': 1,
                            'funding_rate/{symbol}': 1,
                            'funding_rate_history': 1,
                            'futures': 1,
                            'futures/{symbol}': 1,
                            'tv/history': 1,
                        },
                    },
                    'private': {
                        'get': {
                            'client/token': 1,
                            'order/{oid}': 1,
                            'client/order/{client_order_id}': 1,
                            'orders': 1,
                            'orderbook/{symbol}': 1,
                            'client/trade/{tid}': 1,
                            'order/{oid}/trades': 1,
                            'client/trades': 1,
                            'client/info': 60,
                            'asset/deposit': 10,
                            'asset/history': 60,
                            'sub_account/all': 60,
                            'sub_account/assets': 60,
                            'token_interest': 60,
                            'token_interest/{token}': 60,
                            'interest/history': 60,
                            'interest/repay': 60,
                            'funding_fee/history': 30,
                            'positions': 3.33,
                            'position/{symbol}': 3.33,
                            'client/holding': 1,
                            'algo/order/{oid}': 1,
                            'algo/orders': 1,
                            'balances': 1,
                            'accountinfo': 60,
                            'buypower': 1,
                        },
                        'post': {
                            'order': 5,
                            'asset/main_sub_transfer': 30,
                            'asset/withdraw': 30,
                            'interest/repay': 60,
                            'client/account_mode': 120,
                            'client/leverage': 120,
                            'algo/order': 5,
                        },
                        'put': {
                            'order': 2,
                            'order/client/{oid}': 2,
                            'algo/order': 2,
                            'algo/order/client/{oid}': 2,
                        },
                        'delete': {
                            'order': 1,
                            'client/order': 1,
                            'orders': 1,
                            'asset/withdraw': 120,
                            'algo/order': 1,
                            'algo/orders/pending': 1,
                            'algo/orders/pending/{symbol}': 1,
                            'orders/pending': 1,
                        },
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'maker': this.parseNumber('0.0002'),
                    'taker': this.parseNumber('0.0005'),
                },
            },
            'options': {
                'createMarketBuyOrderRequiresPrice': true,
                // these network aliases require manual mapping here
                'network-aliases-for-tokens': {
                    'HT': 'ERC20',
                    'OMG': 'ERC20',
                    'UATOM': 'ATOM',
                    'ZRX': 'ZRX',
                },
                'networks': {
                    'TRX': 'TRON',
                    'TRC20': 'TRON',
                    'ERC20': 'ETH',
                    'BEP20': 'BSC',
                },
                // override defaultNetworkCodePriorities for a specific currency
                'defaultNetworkCodeForCurrencies': {
                // 'USDT': 'TRC20',
                // 'BTC': 'BTC',
                },
                'transfer': {
                    'fillResponseFromRequest': true,
                },
                'brokerId': 'ab82cb09-cfec-4473-80a3-b740779d0644',
            },
            'commonCurrencies': {},
            'exceptions': {
                'exact': {
                    '-1000': ExchangeError,
                    '-1001': AuthenticationError,
                    '-1002': AuthenticationError,
                    '-1003': RateLimitExceeded,
                    '-1004': BadRequest,
                    '-1005': BadRequest,
                    '-1006': BadRequest,
                    '-1007': BadRequest,
                    '-1008': InvalidOrder,
                    '-1009': BadRequest,
                    '-1011': ExchangeError,
                    '-1012': BadRequest,
                    '-1101': InvalidOrder,
                    '-1102': InvalidOrder,
                    '-1103': InvalidOrder,
                    '-1104': InvalidOrder,
                    '-1105': InvalidOrder, // { "code": -1105,  "message": "Price is X% too high or X% too low from the mid price." }
                },
                'broad': {
                    'symbol must not be blank': BadRequest,
                    'The token is not supported': BadRequest,
                    'Your order and symbol are not valid or already canceled': BadRequest,
                    'Insufficient WOO. Please enable margin trading for leverage trading': BadRequest, // when selling insufficent token [-1012]
                },
            },
            'precisionMode': TICK_SIZE$1,
        });
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name woo#fetchMarkets
         * @description retrieves data on all markets for woo
         * @param {object} params extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        const response = await this.v1PublicGetInfo(params);
        //
        // {
        //     rows: [
        //         {
        //             symbol: "SPOT_AAVE_USDT",
        //             quote_min: 0,
        //             quote_max: 100000,
        //             quote_tick: 0.01,
        //             base_min: 0.01,
        //             base_max: 7284,
        //             base_tick: 0.0001,
        //             min_notional: 10,
        //             price_range: 0.1,
        //             created_time: "0",
        //             updated_time: "1639107647.988",
        //             is_stable: 0
        //         },
        //         ...
        //     success: true
        // }
        //
        const result = [];
        const data = this.safeValue(response, 'data', {});
        const rows = this.safeValue(data, 'rows', []);
        for (let i = 0; i < rows.length; i++) {
            const market = rows[i];
            const marketId = this.safeString(market, 'symbol');
            const parts = marketId.split('_');
            let marketType = this.safeStringLower(parts, 0);
            const isSpot = marketType === 'spot';
            const isSwap = marketType === 'perp';
            const baseId = this.safeString(parts, 1);
            const quoteId = this.safeString(parts, 2);
            const base = this.safeCurrencyCode(baseId);
            const quote = this.safeCurrencyCode(quoteId);
            let settleId = undefined;
            let settle = undefined;
            let symbol = base + '/' + quote;
            let contractSize = undefined;
            let linear = undefined;
            if (isSpot) {
                continue;
            }
            if (isSwap) {
                settleId = this.safeString(parts, 2);
                settle = this.safeCurrencyCode(settleId);
                symbol = base + '/' + quote + ':' + settle;
                contractSize = this.parseNumber('1');
                marketType = 'swap';
                linear = true;
            }
            result.push({
                'id': marketId,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': settle,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': settleId,
                'type': marketType,
                'spot': isSpot,
                'margin': true,
                'swap': isSwap,
                'future': false,
                'option': false,
                'active': undefined,
                'contract': isSwap,
                'linear': linear,
                'inverse': undefined,
                'contractSize': contractSize,
                'expiry': undefined,
                'expiryDatetime': undefined,
                'strike': undefined,
                'optionType': undefined,
                'precision': {
                    'amount': this.safeNumber(market, 'base_tick'),
                    'price': this.safeNumber(market, 'quote_tick'),
                },
                'limits': {
                    'leverage': {
                        'min': undefined,
                        'max': undefined,
                    },
                    'amount': {
                        'min': this.safeNumber(market, 'base_min'),
                        'max': this.safeNumber(market, 'base_max'),
                    },
                    'price': {
                        'min': this.safeNumber(market, 'quote_min'),
                        'max': this.safeNumber(market, 'quote_max'),
                    },
                    'cost': {
                        'min': this.safeNumber(market, 'min_notional'),
                        'max': undefined,
                    },
                },
                'info': market,
            });
        }
        return result;
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' fetchTrades() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.v1PublicGetMarketTrades(this.extend(request, params));
        //
        // {
        //     success: true,
        //     rows: [
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "SELL",
        //             executed_price: 46222.35,
        //             executed_quantity: 0.0012,
        //             executed_timestamp: "1641241162.329"
        //         },
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "SELL",
        //             executed_price: 46222.35,
        //             executed_quantity: 0.0012,
        //             executed_timestamp: "1641241162.329"
        //         },
        //         {
        //             symbol: "SPOT_BTC_USDT",
        //             side: "BUY",
        //             executed_price: 46224.32,
        //             executed_quantity: 0.00039,
        //             executed_timestamp: "1641241162.287"
        //         },
        //         ...
        //      ]
        // }
        //
        const resultResponse = this.safeValue(response, 'rows', {});
        return this.parseTrades(resultResponse, market, since, limit);
    }
    parseTrade(trade, market = undefined) {
        //
        // public/market_trades
        //
        //     {
        //         symbol: "SPOT_BTC_USDT",
        //         side: "SELL",
        //         executed_price: 46222.35,
        //         executed_quantity: 0.0012,
        //         executed_timestamp: "1641241162.329"
        //     }
        //
        // fetchOrderTrades, fetchOrder
        //
        //     {
        //         id: '99119876',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641481113.084',
        //         order_id: '87001234',
        //         order_tag: 'default', <-- this param only in "fetchOrderTrades"
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //     }
        //
        const isFromFetchOrder = ('id' in trade);
        const timestamp = this.safeTimestamp(trade, 'executed_timestamp');
        const marketId = this.safeString(trade, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString(trade, 'executed_price');
        const amount = this.safeString(trade, 'executed_quantity');
        const order_id = this.safeString(trade, 'order_id');
        const fee = this.parseTokenAndFeeTemp(trade, 'fee_asset', 'fee');
        const cost = Precise.stringMul(price, amount);
        const side = this.safeStringLower(trade, 'side');
        const id = this.safeString(trade, 'id');
        let takerOrMaker = undefined;
        if (isFromFetchOrder) {
            const isMaker = this.safeString(trade, 'is_maker') === '1';
            takerOrMaker = isMaker ? 'maker' : 'taker';
        }
        return this.safeTrade({
            'id': id,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'order': order_id,
            'takerOrMaker': takerOrMaker,
            'type': undefined,
            'fee': fee,
            'info': trade,
        }, market);
    }
    parseTokenAndFeeTemp(item, feeTokenKey, feeAmountKey) {
        const feeCost = this.safeString(item, feeAmountKey);
        let fee = undefined;
        if (feeCost !== undefined) {
            const feeCurrencyId = this.safeString(item, feeTokenKey);
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            };
        }
        return fee;
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name woo#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an associative dictionary of currencies
         */
        const result = {};
        const tokenResponse = await this.v1PublicGetToken(params);
        //
        // {
        //     rows: [
        //         {
        //             token: "ETH_USDT",
        //             fullname: "Tether",
        //             decimals: 6,
        //             balance_token: "USDT",
        //             created_time: "0",
        //             updated_time: "0"
        //         },
        //         {
        //             token: "BSC_USDT",
        //             fullname: "Tether",
        //             decimals: 18,
        //             balance_token: "USDT",
        //             created_time: "0",
        //             updated_time: "0"
        //         },
        //         {
        //             token: "ZEC",
        //             fullname: "ZCash",
        //             decimals: 8,
        //             balance_token: "ZEC",
        //             created_time: "0",
        //             updated_time: "0"
        //         },
        //         ...
        //     ],
        //     success: true
        // }
        //
        // only make one request for currrencies...
        // const tokenNetworkResponse = await this.v1PublicGetTokenNetwork (params);
        //
        // {
        //     rows: [
        //         {
        //             protocol: "ERC20",
        //             token: "USDT",
        //             name: "Ethereum",
        //             minimum_withdrawal: 30,
        //             withdrawal_fee: 25,
        //             allow_deposit: 1,
        //             allow_withdraw: 1
        //         },
        //         {
        //             protocol: "TRC20",
        //             token: "USDT",
        //             name: "Tron",
        //             minimum_withdrawal: 30,
        //             withdrawal_fee: 1,
        //             allow_deposit: 1,
        //             allow_withdraw: 1
        //         },
        //         ...
        //     ],
        //     success: true
        // }
        //
        const tokenRows = this.safeValue(tokenResponse, 'rows', []);
        const networksByCurrencyId = this.groupBy(tokenRows, 'balance_token');
        const currencyIds = Object.keys(networksByCurrencyId);
        for (let i = 0; i < currencyIds.length; i++) {
            const currencyId = currencyIds[i];
            const networks = networksByCurrencyId[currencyId];
            const code = this.safeCurrencyCode(currencyId);
            let name = undefined;
            let minPrecision = undefined;
            const resultingNetworks = {};
            for (let j = 0; j < networks.length; j++) {
                const network = networks[j];
                name = this.safeString(network, 'fullname');
                const networkId = this.safeString(network, 'token');
                const splitted = networkId.split('_');
                const unifiedNetwork = splitted[0];
                const precision = this.parsePrecision(this.safeString(network, 'decimals'));
                if (precision !== undefined) {
                    minPrecision = (minPrecision === undefined) ? precision : Precise.stringMin(precision, minPrecision);
                }
                resultingNetworks[unifiedNetwork] = {
                    'id': networkId,
                    'network': unifiedNetwork,
                    'limits': {
                        'withdraw': {
                            'min': undefined,
                            'max': undefined,
                        },
                        'deposit': {
                            'min': undefined,
                            'max': undefined,
                        },
                    },
                    'active': undefined,
                    'deposit': undefined,
                    'withdraw': undefined,
                    'fee': undefined,
                    'precision': this.parseNumber(precision),
                    'info': network,
                };
            }
            result[code] = {
                'id': currencyId,
                'name': name,
                'code': code,
                'precision': this.parseNumber(minPrecision),
                'active': undefined,
                'fee': undefined,
                'networks': resultingNetworks,
                'deposit': undefined,
                'withdraw': undefined,
                'limits': {
                    'deposit': {
                        'min': undefined,
                        'max': undefined,
                    },
                    'withdraw': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'info': networks,
            };
        }
        return result;
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name woo#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        // quick order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 29116.0
        // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        //
        // limit order:
        //
        // BTC/USDT:USDT
        // limit
        // buy
        // 4.0
        // 28520.0
        // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
        //
        // no post = 'timeInForce': 'GTC',
        //
        // SL
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        //
        // TP
        //
        // BTC/USDT:USDT
        // stop
        // sell
        // 20.0
        // None
        // {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        //
        // LIMIT TP
        //
        // BTC/USDT:USDT
        // stopLimit
        // sell
        // 4.0
        // 33000.0
        // {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
        const reduceOnly = this.safeValue2(params, 'reduceOnly', 'close');
        const orderType = type.toUpperCase();
        if (orderType === 'STOP' || orderType === 'STOPLIMIT') {
            await this.loadMarkets();
            const market = this.market(symbol);
            const orderSide = side.toUpperCase();
            let algoOrderType = 'MARKET';
            if (orderType !== 'STOP') {
                algoOrderType = 'LIMIT';
            }
            const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
            const request = {
                'symbol': market['id'],
                'algo_type': 'STOP',
                'type': algoOrderType,
                'side': orderSide,
            };
            if (reduceOnly) {
                request['reduce_only'] = reduceOnly;
            }
            // if (price !== undefined) {
            //     request['price'] = this.priceToPrecision (symbol, price);
            // }
            request['trigger_price'] = triggerPrice;
            request['trigger_price_type'] = 'MARK_PRICE';
            request['quantity'] = this.amountToPrecision(symbol, amount);
            params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
            // const response = await (this as any).v1PrivatePostAlgoOrder (this.extend (request, params));
            request['order_tag'] = 'TEALSTREET';
            const response = await this.v1PrivatePostAlgoOrder(request);
            // {
            //     success: true,
            //     timestamp: '1641383206.489',
            //     order_id: '86980774',
            //     order_type: 'LIMIT',
            //     order_price: '1', // null for 'MARKET' order
            //     order_quantity: '12', // null for 'MARKET' order
            //     order_amount: null, // NOT-null for 'MARKET' order
            //     client_order_id: '0'
            // }
            // response -> data -> rows -> [0]
            const data = this.safeValue(response, 'data');
            const rows = this.safeValue(data, 'rows', []);
            // return this.extend (
            //     this.parseOrder (rows[0], market),
            //     { 'type': type }
            // );
            return this.extend(this.parseOrder(rows[0], market), { 'status': 'open' });
        }
        else {
            await this.loadMarkets();
            const market = this.market(symbol);
            const orderSide = side.toUpperCase();
            const request = {
                'symbol': market['id'],
                'order_type': orderType,
                'side': orderSide,
            };
            const isMarket = orderType === 'MARKET';
            const timeInForce = this.safeStringLower(params, 'timeInForce');
            const postOnly = this.isPostOnly(isMarket, undefined, params);
            if (postOnly) {
                request['order_type'] = 'POST_ONLY';
            }
            else if (timeInForce === 'fok') {
                request['order_type'] = 'FOK';
            }
            else if (timeInForce === 'ioc') {
                request['order_type'] = 'IOC';
            }
            if (reduceOnly) {
                request['reduce_only'] = reduceOnly;
            }
            if (price !== undefined) {
                request['order_price'] = this.priceToPrecision(symbol, price);
            }
            request['order_quantity'] = this.amountToPrecision(symbol, amount);
            const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
            if (clientOrderId !== undefined) {
                request['client_order_id'] = clientOrderId;
            }
            request['order_tag'] = 'TEALSTREET';
            params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
            const response = await this.v1PrivatePostOrder(this.extend(request, params));
            // {
            //     success: true,
            //     timestamp: '1641383206.489',
            //     order_id: '86980774',
            //     order_type: 'LIMIT',
            //     order_price: '1', // null for 'MARKET' order
            //     order_quantity: '12', // null for 'MARKET' order
            //     order_amount: null, // NOT-null for 'MARKET' order
            //     client_order_id: '0'
            // }
            return this.extend(this.parseOrder(response, market), { 'type': type, 'status': 'open' });
        }
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
        }
        await this.loadMarkets();
        if (params['type'] === 'stop') {
            return this.cancelAlgoOrder(id, symbol, params);
        }
        else {
            return this.cancelRegularOrder(id, symbol, params);
        }
    }
    async cancelAlgoOrder(id, symbol = undefined, params = {}) {
        const request = {};
        request['order_id'] = id;
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        request['symbol'] = market['id'];
        const response = await this.v1PrivateDeleteAlgoOrder(this.extend(request, params));
        //
        // { success: true, status: 'CANCEL_SENT' }
        //
        const extendParams = { 'symbol': symbol };
        extendParams['id'] = id;
        return this.extend(this.parseOrder(response), extendParams);
    }
    async cancelRegularOrder(id, symbol = undefined, params = {}) {
        const request = {};
        const clientOrderIdUnified = this.safeString2(params, 'clOrdID', 'clientOrderId');
        const clientOrderIdExchangeSpecific = this.safeString2(params, 'client_order_id', clientOrderIdUnified);
        const isByClientOrder = clientOrderIdExchangeSpecific !== undefined;
        if (isByClientOrder) {
            request['client_order_id'] = clientOrderIdExchangeSpecific;
            params = this.omit(params, ['clOrdID', 'clientOrderId', 'client_order_id', 'type']);
        }
        else {
            params = this.omit(params, ['type']);
            request['order_id'] = id;
        }
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        request['symbol'] = market['id'];
        const response = await this.v1PrivateDeleteOrder(this.extend(request, params));
        //
        // { success: true, status: 'CANCEL_SENT' }
        //
        const extendParams = { 'symbol': symbol };
        // if (isByClientOrder) {
        //     extendParams['client_order_id'] = clientOrderIdExchangeSpecific;
        // } else {
        extendParams['id'] = id;
        // }
        return this.extend(this.parseOrder(response), extendParams);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#cancelAllOrders
         * @description cancel all open orders in a market
         * @param {string|undefined} symbol unified market symbol
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        if (symbol === undefined) {
            throw new ArgumentsRequired(this.id + ' canelOrders() requires a symbol argument');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PrivateDeleteOrders(this.extend(request, params));
        await this.v1PrivateDeleteAlgoOrdersPending(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "status":"CANCEL_ALL_SENT"
        //     }
        //
        return response;
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string|undefined} symbol unified symbol of the market the order was made in
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = (symbol !== undefined) ? this.market(symbol) : undefined;
        const request = {};
        const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
        let chosenSpotMethod = undefined;
        if (clientOrderId) {
            chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
            request['client_order_id'] = clientOrderId;
        }
        else {
            chosenSpotMethod = 'v1PrivateGetOrderOid';
            request['oid'] = id;
        }
        const response = await this[chosenSpotMethod](this.extend(request, params));
        //
        // {
        //     success: true,
        //     symbol: 'SPOT_WOO_USDT',
        //     status: 'FILLED', // FILLED, NEW
        //     side: 'BUY',
        //     created_time: '1641480933.000',
        //     order_id: '87541111',
        //     order_tag: 'default',
        //     price: '1',
        //     type: 'LIMIT',
        //     quantity: '12',
        //     amount: null,
        //     visible: '12',
        //     executed: '12', // or any partial amount
        //     total_fee: '0.0024',
        //     fee_asset: 'WOO',
        //     client_order_id: null,
        //     average_executed_price: '1',
        //     Transactions: [
        //       {
        //         id: '99111647',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641482113.084',
        //         order_id: '87541111',
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //       }
        //     ]
        // }
        //
        return this.parseOrder(response, market);
    }
    async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrders
         * @description fetches information on multiple orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        request['size'] = 500;
        request['status'] = 'INCOMPLETE';
        const ordersResponse = await this.v1PrivateGetOrders(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "meta":{
        //             "total":1,
        //             "records_per_page":100,
        //             "current_page":1
        //         },
        //         "rows":[
        //             {
        //                 "symbol":"PERP_BTC_USDT",
        //                 "status":"FILLED",
        //                 "side":"SELL",
        //                 "created_time":"1611617776.000",
        //                 "updated_time":"1611617776.000",
        //                 "order_id":52121167,
        //                 "order_tag":"default",
        //                 "price":null,
        //                 "type":"MARKET",
        //                 "quantity":0.002,
        //                 "amount":null,
        //                 "visible":0,
        //                 "executed":0.002,
        //                 "total_fee":0.01732885,
        //                 "fee_asset":"USDT",
        //                 "client_order_id":null,
        //                 "average_executed_price":28881.41
        //             }
        //         ]
        //     }
        //
        const ordersData = this.safeValue(ordersResponse, 'data', {});
        const ordersRows = this.safeValue(ordersData, 'rows', []);
        let total = 0;
        let algoOrdersRows = [];
        for (let i = 0; i < 50; i++) {
            request['size'] = 50;
            request['page'] = i + 1;
            request['algo_type'] = 'STOP';
            const algoOrdersResponse = await this.v1PrivateGetAlgoOrders(this.extend(request, params));
            const algoOrdersData = this.safeValue(algoOrdersResponse, 'data');
            const algoOrdersMeta = this.safeValue(algoOrdersData, 'meta');
            const newRows = this.safeValue(algoOrdersData, 'rows');
            total = total + newRows.length;
            algoOrdersRows = this.arrayConcat(algoOrdersRows, newRows);
            const knownTotal = this.safeInteger(algoOrdersMeta, 'total');
            if (total >= knownTotal) {
                break;
            }
        }
        const allOrdersData = this.arrayConcat(ordersRows, algoOrdersRows);
        return this.parseOrders(allOrdersData, market, since, limit, params);
    }
    parseTimeInForce(timeInForce) {
        const timeInForces = {
            'ioc': 'IOC',
            'fok': 'FOK',
            'post_only': 'PO',
        };
        return this.safeString(timeInForces, timeInForce, undefined);
    }
    parseOrderType(type, algoType = undefined) {
        if (algoType !== undefined) {
            if (algoType === 'take_profit') {
                if (type === 'market') {
                    return 'stop';
                }
                else {
                    return 'stopLimit';
                }
            }
        }
        // LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE
        const types = {
            'limit': 'limit',
            'market': 'market',
            'post_only': 'limit',
            'ioc': 'limit',
            'fok': 'limit',
            'liquidate': 'limit',
            // 'stop_market': 'stop',
            // 'take_profit_market': 'stop',
            // 'take_profit_limit': 'stopLimit',
            // 'trigger_limit': 'stopLimit',
            // 'trigger_market': 'stop',
        };
        return this.safeStringLower(types, type, type);
    }
    parseOrder(order, market = undefined) {
        const isAlgoOrder = 'algo_type' in order;
        if (isAlgoOrder) {
            return this.parseAlgoOrder(order, market);
        }
        else {
            return this.parseRegularOrder(order, market);
        }
    }
    parseRegularOrder(order, market = undefined) {
        //
        // Possible input functions:
        // * createOrder
        // * cancelOrder
        // * fetchOrder
        // * fetchOrders
        // const isFromFetchOrder = ('order_tag' in order); TO_DO
        const timestamp = this.safeTimestamp2(order, 'timestamp', 'created_time');
        const orderId = this.safeString2(order, 'order_id', 'orderId');
        const clientOrderId = this.safeString2(order, 'client_order_id', 'clientOrderId'); // Somehow, this always returns 0 for limit order
        const marketId = this.safeString(order, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString2(order, 'order_price', 'price');
        const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
        const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
        const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'));
        const status = this.safeValue(order, 'status');
        const side = this.safeStringLower(order, 'side');
        const type = this.safeStringUpper(order, 'type');
        const postOnly = type === 'POST_ONLY';
        const filled = this.safeValue(order, 'executed');
        const average = this.safeString2(order, 'average_executed_price', 'executedPrice');
        const remaining = Precise.stringSub(cost, filled);
        const fee = this.safeValue2(order, 'total_fee', 'totalFee');
        const feeCurrency = this.safeString2(order, 'fee_asset', 'feeAsset');
        const transactions = this.safeValue(order, 'Transactions');
        return this.safeOrder({
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp ? timestamp / 1000 : undefined,
            'datetime': timestamp ? this.iso8601(timestamp / 1000) : undefined,
            'lastTradeTimestamp': undefined,
            'status': this.parseOrderStatus(status),
            'symbol': symbol,
            'type': orderType,
            'timeInForce': this.parseTimeInForce(orderType),
            'postOnly': postOnly,
            'reduceOnly': this.safeValue(order, 'reduce_only'),
            'side': side,
            'price': price,
            'stopPrice': undefined,
            'triggerPrice': undefined,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': cost,
            'trades': transactions,
            'fee': {
                'cost': fee,
                'currency': feeCurrency,
            },
            'info': order,
        }, market);
    }
    parseAlgoOrder(order, market = undefined) {
        //
        // Possible input functions:
        // * createOrder
        // * cancelOrder
        // * fetchOrder
        // * fetchOrders
        // const isFromFetchOrder = ('order_tag' in order); TO_DO
        const timestamp = this.safeTimestamp2(order, 'timestamp', 'created_time');
        const orderId = this.safeStringN(order, ['algo_order_id', 'algoOrderId']);
        const clientOrderId = this.safeStringN(order, ['algo_order_id', 'algoOrderId']); // Somehow, this always returns 0 for limit order
        const marketId = this.safeString(order, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString2(order, 'price', 'trigger_price');
        const stopPrice = this.safeString2(order, 'trigger_price', 'price');
        const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
        const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
        const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'), this.safeStringLower(order, 'algo_type'));
        let tsOrderType = orderType;
        if (orderType === 'market') {
            tsOrderType = 'stop';
        }
        const status = this.safeValue(order, 'algo_status');
        const side = this.safeStringLower(order, 'side');
        const filled = this.safeValue(order, 'executed');
        const average = this.safeString(order, 'average_executed_price');
        const remaining = Precise.stringSub(cost, filled);
        const fee = this.safeValue(order, 'total_fee');
        const feeCurrency = this.safeString(order, 'fee_asset');
        // const transactions = this.safeValue (order, 'Transactions');
        return this.safeOrder({
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp ? timestamp / 1000 : undefined,
            'datetime': timestamp ? this.iso8601(timestamp / 1000) : undefined,
            'lastTradeTimestamp': undefined,
            'status': this.parseOrderStatus(status),
            'symbol': symbol,
            'type': tsOrderType,
            'timeInForce': this.parseTimeInForce(orderType),
            'postOnly': undefined,
            'reduceOnly': this.safeValue(order, 'reduceOnly'),
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': undefined,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': cost,
            // 'trades': transactions,
            'fee': {
                'cost': fee,
                'currency': feeCurrency,
            },
            'info': order,
            // TEALSTREET
            'reduce': this.safeValue(order, 'reduceOnly'),
            'trigger': 'Mark',
            // we don't know this from api
            // 'close': this.safeValue (order, 'closeOnTrigger'),
            // TEALSTREET
        }, market);
    }
    parseOrderStatus(status) {
        if (status !== undefined) {
            const statuses = {
                'NEW': 'open',
                'FILLED': 'closed',
                'CANCEL_SENT': 'canceled',
                'CANCEL_ALL_SENT': 'canceled',
                'CANCELLED': 'canceled',
                'PARTIAL_FILLED': 'open',
                'REJECTED': 'rejected',
                'INCOMPLETE': 'open',
                'REPLACED': 'open',
                'COMPLETED': 'closed',
            };
            return this.safeString(statuses, status, status);
        }
        return status;
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            limit = Math.min(limit, 1000);
            request['max_level'] = limit;
        }
        const response = await this.v1PrivateGetOrderbookSymbol(this.extend(request, params));
        //
        // {
        //   success: true,
        //   timestamp: '1641562961192',
        //   asks: [
        //     { price: '0.921', quantity: '76.01' },
        //     { price: '0.933', quantity: '477.10' },
        //     ...
        //   ],
        //   bids: [
        //     { price: '0.940', quantity: '13502.47' },
        //     { price: '0.932', quantity: '43.91' },
        //     ...
        //   ]
        // }
        //
        const timestamp = this.safeInteger(response, 'timestamp');
        return this.parseOrderBook(response, symbol, timestamp, 'bids', 'asks', 'price', 'quantity');
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'resolution': this.timeframes[timeframe],
            'from': since / 1000,
        };
        const parsedTimeFrame = this.parseTimeframe(timeframe);
        const duration = parsedTimeFrame * 1000 * limit;
        const to = this.sum(since, duration);
        request['to'] = to / 1000;
        const response = await this.v1PublicGetTvHistory(this.extend(request, params));
        const res = [];
        if (response.s === 'ok') {
            const length = response.t.length;
            for (let i = 0; i < length; i++) {
                res.push([
                    response.t[i] * 1000,
                    response.o[i],
                    response.h[i],
                    response.l[i],
                    response.c[i],
                    response.v[i],
                ]);
            }
        }
        else {
            throw (response.s);
        }
        return res;
    }
    parseOHLCV(ohlcv, market = undefined) {
        // example response in fetchOHLCV
        return [
            this.safeInteger(ohlcv, 'start_timestamp'),
            this.safeNumber(ohlcv, 'open'),
            this.safeNumber(ohlcv, 'high'),
            this.safeNumber(ohlcv, 'low'),
            this.safeNumber(ohlcv, 'close'),
            this.safeNumber(ohlcv, 'volume'),
        ];
    }
    async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchOrderTrades
         * @description fetch all the trades made from a single order
         * @param {string} id order id
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
        }
        const request = {
            'oid': id,
        };
        const response = await this.v1PrivateGetOrderOidTrades(this.extend(request, params));
        // {
        //     success: true,
        //     rows: [
        //       {
        //         id: '99111647',
        //         symbol: 'SPOT_WOO_USDT',
        //         fee: '0.0024',
        //         side: 'BUY',
        //         executed_timestamp: '1641482113.084',
        //         order_id: '87541111',
        //         order_tag: 'default',
        //         executed_price: '1',
        //         executed_quantity: '12',
        //         fee_asset: 'WOO',
        //         is_maker: '1'
        //       }
        //     ]
        // }
        const trades = this.safeValue(response, 'rows', []);
        return this.parseTrades(trades, market, since, limit, params);
    }
    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name woo#fetchMyTrades
         * @description fetch all trades made by the user
         * @param {string|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        const response = await this.v1PrivateGetClientTrades(this.extend(request, params));
        // {
        //     "success": true,
        //     "meta": {
        //         "records_per_page": 25,
        //         "current_page": 1
        //     },
        //     "rows": [
        //         {
        //             "id": 5,
        //             "symbol": "SPOT_BTC_USDT",
        //             "order_id": 211,
        //             "order_tag": "default",
        //             "executed_price": 10892.84,
        //             "executed_quantity": 0.002,
        //             "is_maker": 0,
        //             "side": "SELL",
        //             "fee": 0,
        //             "fee_asset": "USDT",
        //             "executed_timestamp": "1566264290.250"
        //         },
        //         ...
        //     ]
        // }
        const trades = this.safeValue(response, 'rows', []);
        return this.parseTrades(trades, market, since, limit, params);
    }
    async fetchAccounts(params = {}) {
        /**
         * @method
         * @name woo#fetchAccounts
         * @description fetch all the accounts associated with a profile
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
         */
        const response = await this.v1PrivateGetSubAccountAssets(params);
        //
        //     {
        //         rows: [{
        //                 application_id: '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
        //                 account: 'Main',
        //                 usdt_balance: '4.0'
        //             },
        //             {
        //                 application_id: '432952aa-a401-4e26-aff6-972920aebba3',
        //                 account: 'subaccount',
        //                 usdt_balance: '1.0'
        //             }
        //         ],
        //         success: true
        //     }
        //
        const rows = this.safeValue(response, 'rows', []);
        return this.parseAccounts(rows, params);
    }
    parseAccount(account) {
        //
        //     {
        //         application_id: '336952aa-a401-4e26-aff6-972920aebba3',
        //         account: 'subaccount',
        //         usdt_balance: '1.0',
        //     }
        //
        const accountId = this.safeString(account, 'account');
        return {
            'info': account,
            'id': this.safeString(account, 'application_id'),
            'name': accountId,
            'code': undefined,
            'type': accountId === 'Main' ? 'main' : 'subaccount',
        };
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name woo#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://docs.woo.org/#get-current-holding-get-balance-new
         * @param {object} params extra parameters specific to the woo api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const response = await this.v1PrivateGetClientHolding(params);
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "holding": [
        //                 {
        //                     "token": "0_token",
        //                     "holding": 1,
        //                     "frozen": 0,
        //                     "staked": 0,
        //                     "unbonding": 0,
        //                     "vault": 0,
        //                     "interest": 0,
        //                     "pendingShortQty": 0,
        //                     "pendingLongQty": 0,
        //                     "availableBalance": 0,
        //                     "updatedTime": 312321.121
        //                 }
        //             ]
        //         },
        //         "timestamp": 1673323746259
        //     }
        //
        const data = this.safeValue(response, 'data');
        return this.parseBalance(data);
    }
    parseBalance(response) {
        const result = {
            'info': response,
        };
        const balances = this.safeValue(response, 'holding', []);
        for (let i = 0; i < balances.length; i++) {
            const balance = balances[i];
            const code = this.safeCurrencyCode(this.safeString(balance, 'token'));
            const account = this.account();
            account['total'] = this.safeString(balance, 'holding');
            account['free'] = this.safeString(balance, 'availableBalance');
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    nonce() {
        return this.milliseconds();
    }
    sign(path, section = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const version = section[0];
        const access = section[1];
        const isUdfPath = path === 'tv/history';
        const pathWithParams = this.implodeParams(path, params);
        let url = this.implodeHostname(this.urls['api'][access]);
        if (isUdfPath) {
            url += '/';
        }
        else {
            url += '/' + version + '/';
        }
        params = this.omit(params, this.extractParams(path));
        params = this.keysort(params);
        if (access === 'public') {
            if (isUdfPath) {
                url += pathWithParams;
            }
            else {
                url += access + '/' + pathWithParams;
            }
            if (Object.keys(params).length) {
                url += '?' + this.urlencode(params);
            }
        }
        else if (access === 'pub') {
            url += pathWithParams;
            if (Object.keys(params).length) {
                url += '?' + this.urlencode(params);
            }
        }
        else {
            this.checkRequiredCredentials();
            let auth = '';
            const ts = this.nonce().toString();
            url += pathWithParams;
            headers = {
                'orderly-key': this.apiKey,
                'orderly-account-id': this.uid,
                'orderly-timestamp': ts,
            };
            if (version === 'v1') {
                auth = ts + method + '/' + version + '/' + pathWithParams;
                if (method === 'POST' || method === 'PUT') {
                    headers['content-type'] = 'application/x-www-form-urlencoded';
                    body = this.json(params);
                    auth += body;
                }
                else {
                    if (Object.keys(params).length) {
                        const query = this.urlencode(params);
                        url += '?' + query;
                        auth += '?' + query;
                    }
                }
                if (method === 'DELETE') {
                    headers['content-type'] = 'application/x-www-form-urlencoded';
                }
                else {
                    headers['content-type'] = 'application/json';
                }
            }
            else {
                auth = this.urlencode(params);
                if (method === 'POST' || method === 'PUT') {
                    body = auth;
                }
                else {
                    url += '?' + auth;
                }
                auth += '|' + ts;
                headers['content-type'] = 'application/x-www-form-urlencoded';
            }
            // headers['orderly-signature'] = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256');
            const signer = new Signer(this.uid, this.secret);
            headers['orderly-signature'] = signer.sign_request(auth);
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (!response) {
            return; // fallback to default error handler
        }
        //
        //     400 Bad Request {"success":false,"code":-1012,"message":"Amount is required for buy market orders when margin disabled."}
        //
        const success = this.safeValue(response, 'success');
        const errorCode = this.safeString(response, 'code');
        if (!success) {
            const feedback = this.id + ' ' + this.json(response);
            this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);
            this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        }
    }
    parseIncome(income, market = undefined) {
        //
        //     {
        //         "id":666666,
        //         "symbol":"PERP_BTC_USDT",
        //         "funding_rate":0.00001198,
        //         "mark_price":28941.04000000,
        //         "funding_fee":0.00069343,
        //         "payment_type":"Pay",
        //         "status":"COMPLETED",
        //         "created_time":"1653616000.666",
        //         "updated_time":"1653616000.605"
        //     }
        //
        const marketId = this.safeString(income, 'symbol');
        const symbol = this.safeSymbol(marketId, market);
        const amount = this.safeNumber(income, 'funding_fee');
        const code = this.safeCurrencyCode('USD');
        const id = this.safeString(income, 'id');
        const timestamp = this.safeTimestamp(income, 'updated_time');
        const rate = this.safeNumber(income, 'funding_rate');
        return {
            'info': income,
            'symbol': symbol,
            'code': code,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'id': id,
            'amount': amount,
            'rate': rate,
        };
    }
    async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = since;
        }
        const response = await this.v1PrivateGetFundingFeeHistory(this.extend(request, params));
        //
        //     {
        //         "rows":[
        //             {
        //                 "id":666666,
        //                 "symbol":"PERP_BTC_USDT",
        //                 "funding_rate":0.00001198,
        //                 "mark_price":28941.04000000,
        //                 "funding_fee":0.00069343,
        //                 "payment_type":"Pay",
        //                 "status":"COMPLETED",
        //                 "created_time":"1653616000.666",
        //                 "updated_time":"1653616000.605"
        //             }
        //         ],
        //         "meta":{
        //             "total":235,
        //             "records_per_page":25,
        //             "current_page":1
        //         },
        //         "success":true
        //     }
        //
        const result = this.safeValue(response, 'rows', []);
        return this.parseIncomes(result, market, since, limit);
    }
    parseFundingRate(fundingRate, market = undefined) {
        //
        //         {
        //             "symbol":"PERP_AAVE_USDT",
        //             "est_funding_rate":-0.00003447,
        //             "est_funding_rate_timestamp":1653633959001,
        //             "last_funding_rate":-0.00002094,
        //             "last_funding_rate_timestamp":1653631200000,
        //             "next_funding_time":1653634800000
        //         }
        //
        //
        const symbol = this.safeString(fundingRate, 'symbol');
        market = this.market(symbol);
        const nextFundingTimestamp = this.safeInteger(fundingRate, 'next_funding_time');
        const estFundingRateTimestamp = this.safeInteger(fundingRate, 'est_funding_rate_timestamp');
        const lastFundingRateTimestamp = this.safeInteger(fundingRate, 'last_funding_rate_timestamp');
        return {
            'info': fundingRate,
            'symbol': market['symbol'],
            'markPrice': undefined,
            'indexPrice': undefined,
            'interestRate': this.parseNumber('0'),
            'estimatedSettlePrice': undefined,
            'timestamp': estFundingRateTimestamp,
            'datetime': this.iso8601(estFundingRateTimestamp),
            'fundingRate': this.safeNumber(fundingRate, 'est_funding_rate'),
            'fundingTimestamp': nextFundingTimestamp,
            'fundingDatetime': this.iso8601(nextFundingTimestamp),
            'nextFundingRate': undefined,
            'nextFundingTimestamp': undefined,
            'nextFundingDatetime': undefined,
            'previousFundingRate': this.safeNumber(fundingRate, 'last_funding_rate'),
            'previousFundingTimestamp': lastFundingRateTimestamp,
            'previousFundingDatetime': this.iso8601(lastFundingRateTimestamp),
        };
    }
    async fetchFundingRate(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PublicGetFundingRateSymbol(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "timestamp":1653640572711,
        //         "symbol":"PERP_BTC_USDT",
        //         "est_funding_rate":0.00000738,
        //         "est_funding_rate_timestamp":1653640559003,
        //         "last_funding_rate":0.00000629,
        //         "last_funding_rate_timestamp":1653638400000,
        //         "next_funding_time":1653642000000
        //     }
        //
        return this.parseFundingRate(response, market);
    }
    async fetchFundingRates(symbols = undefined, params = {}) {
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const response = await this.v1PublicGetFundingRates(params);
        //
        //     {
        //         "success":true,
        //         "rows":[
        //             {
        //                 "symbol":"PERP_AAVE_USDT",
        //                 "est_funding_rate":-0.00003447,
        //                 "est_funding_rate_timestamp":1653633959001,
        //                 "last_funding_rate":-0.00002094,
        //                 "last_funding_rate_timestamp":1653631200000,
        //                 "next_funding_time":1653634800000
        //             }
        //         ],
        //         "timestamp":1653633985646
        //     }
        //
        const rows = this.safeValue(response, 'rows', {});
        const result = this.parseFundingRates(rows);
        return this.filterByArray(result, 'symbol', symbols);
    }
    async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const request = {};
        if (symbol !== undefined) {
            const market = this.market(symbol);
            symbol = market['symbol'];
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_t'] = this.parseToInt(since / 1000);
        }
        const response = await this.v1PublicGetFundingRateHistory(this.extend(request, params));
        //
        //     {
        //         "success":true,
        //         "meta":{
        //             "total":2464,
        //             "records_per_page":25,
        //             "current_page":1
        //         },
        //         "rows":[
        //             {
        //                 "symbol":"PERP_BTC_USDT",
        //                 "funding_rate":0.00000629,
        //                 "funding_rate_timestamp":1653638400000,
        //                 "next_funding_time":1653642000000
        //             }
        //         ],
        //         "timestamp":1653640814885
        //     }
        //
        const result = this.safeValue(response, 'rows');
        const rates = [];
        for (let i = 0; i < result.length; i++) {
            const entry = result[i];
            const marketId = this.safeString(entry, 'symbol');
            const timestamp = this.safeInteger(entry, 'funding_rate_timestamp');
            rates.push({
                'info': entry,
                'symbol': this.safeSymbol(marketId),
                'fundingRate': this.safeNumber(entry, 'funding_rate'),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
            });
        }
        const sorted = this.sortBy(rates, 'timestamp');
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }
    async fetchLeverage(symbol, params = {}) {
        await this.loadMarkets();
        const response = await this.v1PrivateGetClientInfo(params);
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "applicationId": "dsa",
        //             "account": "dsa",
        //             "alias": "haha",
        //             "accountMode": "MARGIN",
        //             "leverage": 1,
        //             "takerFeeRate": 1,
        //             "makerFeeRate": 1,
        //             "interestRate": 1,
        //             "futuresTakerFeeRate": 1,
        //             "futuresMakerFeeRate": 1,
        //             "otpauth": true,
        //             "marginRatio": 1,
        //             "openMarginRatio": 1,
        //             "initialMarginRatio": 1,
        //             "maintenanceMarginRatio": 1,
        //             "totalCollateral": 1,
        //             "freeCollateral": 1,
        //             "totalAccountValue": 1,
        //             "totalVaultValue": 1,
        //             "totalStakingValue": 1
        //         },
        //         "timestamp": 1673323685109
        //     }
        //
        const result = this.safeValue(response, 'data');
        const leverage = this.safeNumber(result, 'max_leverage');
        return {
            'info': response,
            'leverage': leverage,
        };
    }
    async setLeverage(leverage, symbol = undefined, params = {}) {
        await this.loadMarkets();
        if ((leverage !== 1) && (leverage !== 2) && (leverage !== 3) && (leverage !== 4) && (leverage !== 5) && (leverage !== 10) && (leverage !== 15) && (leverage !== 20) && (leverage !== 50)) {
            throw new BadRequest(this.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
        }
        const request = {
            'leverage': leverage,
        };
        return await this.v1PrivatePostClientLeverage(this.extend(request, params));
    }
    async fetchPosition(symbol = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PrivateGetPositionSymbol(this.extend(request, params));
        //
        //     {
        //         "symbol":"PERP_ETC_USDT",
        //         "holding":0.0,
        //         "pnl_24_h":0,
        //         "settle_price":0.0,
        //         "average_open_price":0,
        //         "success":true,
        //         "mark_price":22.6955,
        //         "pending_short_qty":0.0,
        //         "pending_long_qty":0.0,
        //         "fee_24_h":0,
        //         "timestamp":"1652231044.920"
        //     }
        //
        return this.parsePosition(response, market);
    }
    async fetchPositions(symbols = undefined, params = {}) {
        await this.loadMarkets();
        const response = await this.v1PrivateGetPositions(params);
        //
        //     {
        //         "success": true,
        //         "data": {
        //             "positions": [
        //                 {
        //                     "symbol": "0_symbol",
        //                     "holding": 1,
        //                     "pendingLongQty": 0,
        //                     "pendingShortQty": 1,
        //                     "settlePrice": 1,
        //                     "averageOpenPrice": 1,
        //                     "pnl24H": 1,
        //                     "fee24H": 1,
        //                     "markPrice": 1,
        //                     "estLiqPrice": 1,
        //                     "timestamp": 12321321
        //                 }
        //             ]
        //         },
        //         "timestamp": 1673323880342
        //     }
        //
        const result = this.safeValue(response, 'data', {});
        const positions = this.safeValue(result, 'rows', []);
        return this.parsePositions(positions, symbols);
    }
    parsePosition(position, market = undefined) {
        //
        //     {
        //         "symbol": "0_symbol",
        //         "holding": 1,
        //         "pendingLongQty": 0,
        //         "pendingShortQty": 1,
        //         "settlePrice": 1,
        //         "averageOpenPrice": 1,
        //         "pnl24H": 1,
        //         "fee24H": 1,
        //         "markPrice": 1,
        //         "estLiqPrice": 1,
        //         "timestamp": 12321321
        //     }
        //
        const contract = this.safeString(position, 'symbol');
        market = this.safeMarket(contract, market);
        const size = this.safeString(position, 'position_qty');
        let side = undefined;
        if (Precise.stringGt(size, '0')) {
            side = 'long';
        }
        else {
            side = 'short';
        }
        const contractSize = this.safeString(market, 'contractSize');
        const markPrice = this.safeString(position, 'mark_price');
        const timestamp = this.safeTimestamp(position, 'timestamp');
        const entryPrice = this.safeString(position, 'average_open_price');
        const priceDifference = Precise.stringSub(markPrice, entryPrice);
        const unrealisedPnl = Precise.stringMul(priceDifference, size);
        return {
            'info': position,
            'id': market['symbol'] + ':' + side,
            'symbol': market['symbol'],
            'notional': undefined,
            'marginMode': 'cross',
            'liquidationPrice': this.safeNumber(position, 'est_liq_price'),
            'entryPrice': this.parseNumber(entryPrice),
            'realizedPnl': this.safeString(position, 'pnl_24_h'),
            'unrealizedPnl': this.parseNumber(unrealisedPnl),
            'percentage': undefined,
            'contracts': this.parseNumber(size),
            'contractSize': this.parseNumber(contractSize),
            'markPrice': this.parseNumber(markPrice),
            'side': side,
            'hedged': false,
            'timestamp': timestamp / 1000,
            'datetime': this.iso8601(timestamp / 1000),
            'maintenanceMargin': undefined,
            'maintenanceMarginPercentage': undefined,
            'collateral': undefined,
            'initialMargin': undefined,
            'initialMarginPercentage': undefined,
            'leverage': undefined,
            'marginRatio': undefined,
        };
    }
    defaultNetworkCodeForCurrency(code) {
        const currencyItem = this.currency(code);
        const networks = currencyItem['networks'];
        const networkKeys = Object.keys(networks);
        for (let i = 0; i < networkKeys.length; i++) {
            const network = networkKeys[i];
            if (network === 'ETH') {
                return network;
            }
        }
        // if it was not returned according to above options, then return the first network of currency
        return this.safeValue(networkKeys, 0);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name woo#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the paymium api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.v1PublicGetFuturesSymbol(this.extend(request, params));
        //
        // {
        //   "symbol": "BTC-USDT",
        //   "priceChange": "10.00",
        //   "priceChangePercent": "10",
        //   "lastPrice": "5738.23",
        //   "lastVolume": "31.21",
        //   "highPrice": "5938.23",
        //   "lowPrice": "5238.23",
        //   "volume": "23211231.13",
        //   "dayVolume": "213124412412.47",
        //   "openPrice": "5828.32"
        // }
        //
        const ticker = this.safeValue(response, 'info');
        return this.parseTicker(ticker, market);
    }
    parseTicker(ticker, market = undefined) {
        //
        // {
        //   "symbol": "PERP_BTC_USDT",
        //   "index_price": 56727.31344564,
        //   "mark_price": 56727.31344564,
        //   "est_funding_rate": 0.12345689,
        //   "last_funding_rate": 0.12345689,
        //   "next_funding_time": 1567411795000,
        //   "open_interest": 0.12345689,
        //   "24h_open": 0.16112,
        //   "24h_close": 0.32206,
        //   "24h_high": 0.33000,
        //   "24h_low": 0.14251,
        //   "24h_volume": 89040821.98,
        //   "24h_amount": 22493062.21
        // }
        //
        const symbol = this.safeSymbol(undefined, market);
        const timestamp = this.milliseconds();
        const baseVolume = this.safeString(ticker, '24h_volume');
        const openFloat = this.safeFloat(ticker, '24h_open');
        const currentFloat = this.safeFloat(ticker, 'index_price');
        const percentage = currentFloat / openFloat * 100;
        const last = this.safeString(ticker, 'index_price');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeString(ticker, '24h_high'),
            'low': this.safeString(ticker, '24h_low'),
            'bid': this.safeString(ticker, 'index_price'),
            'bidVolume': undefined,
            'ask': this.safeString(ticker, 'index_price'),
            'askVolume': undefined,
            'open': this.safeString(ticker, '24h_open'),
            'close': last,
            'last': last,
            'mark': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': this.numberToString(percentage),
            'average': undefined,
            'baseVolume': baseVolume,
            'info': ticker,
        }, market);
    }
    async fetchAccountConfiguration(symbol, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const leverageInfo = await this.fetchLeverage(market['id']);
        const leverage = this.safeInteger(leverageInfo, 'leverage');
        const accountConfig = {
            'marginMode': 'cross',
            'positionMode': 'oneway',
            'markets': {},
            'leverage': leverage,
        };
        const leverageConfigs = accountConfig['markets'];
        leverageConfigs[market['symbol']] = {
            'leverage': leverage,
            'buyLeverage': leverage,
            'sellLeverage': leverage,
        };
        return accountConfig;
    }
}

/* eslint-disable max-classes-per-file */
// @ts-nocheck
class BaseCache extends Array {
    constructor(maxSize = undefined) {
        super();
        Object.defineProperty(this, 'maxSize', {
            __proto__: null,
            value: maxSize,
            writable: true,
        });
    }
    clear() {
        this.length = 0;
    }
}
class ArrayCache extends BaseCache {
    constructor(maxSize = undefined) {
        super(maxSize);
        Object.defineProperty(this, 'nestedNewUpdatesBySymbol', {
            __proto__: null,
            value: false,
            writable: true,
        });
        Object.defineProperty(this, 'newUpdatesBySymbol', {
            __proto__: null,
            value: {},
            writable: true,
        });
        Object.defineProperty(this, 'clearUpdatesBySymbol', {
            __proto__: null,
            value: {},
            writable: true,
        });
        Object.defineProperty(this, 'allNewUpdates', {
            __proto__: null,
            value: 0,
            writable: true,
        });
        Object.defineProperty(this, 'clearAllUpdates', {
            __proto__: null,
            value: false,
            writable: true,
        });
    }
    getLimit(symbol, limit) {
        let newUpdatesValue = undefined;
        if (symbol === undefined) {
            newUpdatesValue = this.allNewUpdates;
            this.clearAllUpdates = true;
        }
        else {
            newUpdatesValue = this.newUpdatesBySymbol[symbol];
            if ((newUpdatesValue !== undefined) && this.nestedNewUpdatesBySymbol) {
                newUpdatesValue = newUpdatesValue.size;
            }
            this.clearUpdatesBySymbol[symbol] = true;
        }
        if (newUpdatesValue === undefined) {
            return limit;
        }
        else if (limit !== undefined) {
            return Math.min(newUpdatesValue, limit);
        }
        else {
            return newUpdatesValue;
        }
    }
    append(item) {
        // maxSize may be 0 when initialized by a .filter() copy-construction
        if (this.maxSize && (this.length === this.maxSize)) {
            this.shift();
        }
        this.push(item);
        if (this.clearAllUpdates) {
            this.clearAllUpdates = false;
            this.clearUpdatesBySymbol = {};
            this.allNewUpdates = 0;
            this.newUpdatesBySymbol = {};
        }
        if (this.clearUpdatesBySymbol[item.symbol]) {
            this.clearUpdatesBySymbol[item.symbol] = false;
            this.newUpdatesBySymbol[item.symbol] = 0;
        }
        this.newUpdatesBySymbol[item.symbol] = (this.newUpdatesBySymbol[item.symbol] || 0) + 1;
        this.allNewUpdates = (this.allNewUpdates || 0) + 1;
    }
}
class ArrayCacheByTimestamp extends BaseCache {
    constructor(maxSize = undefined) {
        super(maxSize);
        Object.defineProperty(this, 'hashmap', {
            __proto__: null,
            value: {},
            writable: true,
        });
        Object.defineProperty(this, 'sizeTracker', {
            __proto__: null,
            value: new Set(),
            writable: true,
        });
        Object.defineProperty(this, 'newUpdates', {
            __proto__: null,
            value: 0,
            writable: true,
        });
        Object.defineProperty(this, 'clearUpdates', {
            __proto__: null,
            value: false,
            writable: true,
        });
    }
    getLimit(symbol, limit) {
        this.clearUpdates = true;
        if (limit === undefined) {
            return this.newUpdates;
        }
        return Math.min(this.newUpdates, limit);
    }
    append(item) {
        if (item[0] in this.hashmap) {
            const reference = this.hashmap[item[0]];
            if (reference !== item) {
                for (const prop in item) {
                    reference[prop] = item[prop];
                }
            }
        }
        else {
            this.hashmap[item[0]] = item;
            if (this.maxSize && (this.length === this.maxSize)) {
                const deleteReference = this.shift();
                delete this.hashmap[deleteReference[0]];
            }
            this.push(item);
        }
        if (this.clearUpdates) {
            this.clearUpdates = false;
            this.sizeTracker.clear();
        }
        this.sizeTracker.add(item[0]);
        this.newUpdates = this.sizeTracker.size;
    }
}
class ArrayCacheBySymbolById extends ArrayCache {
    constructor(maxSize = undefined) {
        super(maxSize);
        this.nestedNewUpdatesBySymbol = true;
        Object.defineProperty(this, 'hashmap', {
            __proto__: null,
            value: {},
            writable: true,
        });
    }
    append(item) {
        const byId = this.hashmap[item.symbol] = this.hashmap[item.symbol] || {};
        if (item.id in byId) {
            const reference = byId[item.id];
            if (reference !== item) {
                for (const prop in item) {
                    reference[prop] = item[prop];
                }
            }
            item = reference;
            const index = this.findIndex((x) => x.id === item.id);
            // move the order to the end of the array
            this.splice(index, 1);
        }
        else {
            byId[item.id] = item;
        }
        if (this.maxSize && (this.length === this.maxSize)) {
            const deleteReference = this.shift();
            delete this.hashmap[deleteReference.symbol][deleteReference.id];
        }
        this.push(item);
        if (this.clearAllUpdates) {
            this.clearAllUpdates = false;
            this.clearUpdatesBySymbol = {};
            this.allNewUpdates = 0;
            this.newUpdatesBySymbol = {};
        }
        if (this.newUpdatesBySymbol[item.symbol] === undefined) {
            this.newUpdatesBySymbol[item.symbol] = new Set();
        }
        if (this.clearUpdatesBySymbol[item.symbol]) {
            this.clearUpdatesBySymbol[item.symbol] = false;
            this.newUpdatesBySymbol[item.symbol].clear();
        }
        // in case an exchange updates the same order id twice
        const idSet = this.newUpdatesBySymbol[item.symbol];
        const beforeLength = idSet.size;
        idSet.add(item.id);
        const afterLength = idSet.size;
        this.allNewUpdates = (this.allNewUpdates || 0) + (afterLength - beforeLength);
    }
}

// ----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
class binance extends binance$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': true,
                'watchMyTrades': true,
                'watchOHLCV': true,
                'watchOrderBook': true,
                'watchOrders': true,
                'watchTicker': true,
                'watchTickers': true,
                'watchTrades': true,
            },
            'urls': {
                'test': {
                    'ws': {
                        'spot': 'wss://testnet.binance.vision/ws',
                        'margin': 'wss://testnet.binance.vision/ws',
                        'future': 'wss://stream.binancefuture.com/ws',
                        'delivery': 'wss://dstream.binancefuture.com/ws',
                    },
                },
                'api': {
                    'ws': {
                        'spot': 'wss://stream.binance.com:9443/ws',
                        'margin': 'wss://stream.binance.com:9443/ws',
                        'future': 'wss://fstream.binance.com/ws',
                        'delivery': 'wss://dstream.binance.com/ws',
                    },
                },
            },
            'streaming': {
                'keepAlive': 180000,
            },
            'options': {
                'streamLimits': {
                    'spot': 50,
                    'margin': 50,
                    'future': 50,
                    'delivery': 50, // max 200
                },
                'streamBySubscriptionsHash': {},
                'streamIndex': -1,
                // get updates every 1000ms or 100ms
                // or every 0ms in real-time for futures
                'watchOrderBookRate': 100,
                'tradesLimit': 1000,
                'ordersLimit': 1000,
                'OHLCVLimit': 1000,
                'requestId': {},
                'watchOrderBookLimit': 1000,
                'watchTrades': {
                    'name': 'trade', // 'trade' or 'aggTrade'
                },
                'watchTicker': {
                    'name': 'ticker', // ticker = 1000ms L1+OHLCV, bookTicker = real-time L1
                },
                'watchTickers': {
                    'name': 'ticker', // ticker or miniTicker or bookTicker
                },
                'watchOHLCV': {
                    'name': 'kline', // or indexPriceKline or markPriceKline (coin-m futures)
                },
                'watchBalance': {
                    'fetchBalanceSnapshot': false,
                    'awaitBalanceSnapshot': true, // whether to wait for the balance snapshot before providing updates
                },
                'wallet': 'wb',
                'listenKeyRefreshRate': 1200000,
                'ws': {
                    'cost': 5,
                },
            },
        });
    }
    requestId(url) {
        const options = this.safeValue(this.options, 'requestId', {});
        const previousValue = this.safeInteger(options, url, 0);
        const newValue = this.sum(previousValue, 1);
        this.options['requestId'][url] = newValue;
        return newValue;
    }
    stream(type, subscriptionHash) {
        const streamBySubscriptionsHash = this.safeValue(this.options, 'streamBySubscriptionsHash', {});
        let stream = this.safeString(streamBySubscriptionsHash, subscriptionHash);
        if (stream === undefined) {
            let streamIndex = this.safeInteger(this.options, 'streamIndex', -1);
            const streamLimits = this.safeValue(this.options, 'streamLimits');
            const streamLimit = this.safeInteger(streamLimits, type);
            streamIndex = streamIndex + 1;
            const normalizedIndex = streamIndex % streamLimit;
            this.options['streamIndex'] = streamIndex;
            stream = this.numberToString(normalizedIndex);
            this.options['streamBySubscriptionsHash'][subscriptionHash] = stream;
        }
        return stream;
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        //
        // todo add support for <levels>-snapshots (depth)
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#partial-book-depth-streams        // <symbol>@depth<levels>@100ms or <symbol>@depth<levels> (1000ms)
        // valid <levels> are 5, 10, or 20
        //
        // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000
        if (limit !== undefined) {
            if ((limit !== 5) && (limit !== 10) && (limit !== 20) && (limit !== 50) && (limit !== 100) && (limit !== 500) && (limit !== 1000)) {
                throw new ExchangeError(this.id + ' watchOrderBook limit argument must be undefined, 5, 10, 20, 50, 100, 500 or 1000');
            }
        }
        //
        await this.loadMarkets();
        const market = this.market(symbol);
        let type = market['type'];
        if (market['contract']) {
            type = market['linear'] ? 'future' : 'delivery';
        }
        //
        // notice the differences between trading futures and spot trading
        // the algorithms use different urls in step 1
        // delta caching and merging also differs in steps 4, 5, 6
        //
        // spot/margin
        // https://binance-docs.github.io/apidocs/spot/en/#how-to-manage-a-local-order-book-correctly
        //
        // 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
        // 2. Buffer the events you receive from the stream.
        // 3. Get a depth snapshot from https://www.binance.com/api/v1/depth?symbol=BNBBTC&limit=1000 .
        // 4. Drop any event where u is <= lastUpdateId in the snapshot.
        // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1.
        // 6. While listening to the stream, each new event's U should be equal to the previous event's u+1.
        // 7. The data in each event is the absolute quantity for a price level.
        // 8. If the quantity is 0, remove the price level.
        // 9. Receiving an event that removes a price level that is not in your local order book can happen and is normal.
        //
        // futures
        // https://binance-docs.github.io/apidocs/futures/en/#how-to-manage-a-local-order-book-correctly
        //
        // 1. Open a stream to wss://fstream.binance.com/stream?streams=btcusdt@depth.
        // 2. Buffer the events you receive from the stream. For same price, latest received update covers the previous one.
        // 3. Get a depth snapshot from https://fapi.binance.com/fapi/v1/depth?symbol=BTCUSDT&limit=1000 .
        // 4. Drop any event where u is < lastUpdateId in the snapshot.
        // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
        // 6. While listening to the stream, each new event's pu should be equal to the previous event's u, otherwise initialize the process from step 3.
        // 7. The data in each event is the absolute quantity for a price level.
        // 8. If the quantity is 0, remove the price level.
        // 9. Receiving an event that removes a price level that is not in your local order book can happen and is normal.
        //
        const name = 'depth';
        const messageHash = market['lowercaseId'] + '@' + name;
        const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
        const requestId = this.requestId(url);
        const watchOrderBookRate = this.safeString(this.options, 'watchOrderBookRate', '100');
        const request = {
            'method': 'SUBSCRIBE',
            'params': [
                messageHash + '@' + watchOrderBookRate + 'ms',
            ],
            'id': requestId,
        };
        const subscription = {
            'id': requestId.toString(),
            'messageHash': messageHash,
            'name': name,
            'symbol': market['symbol'],
            'method': this.handleOrderBookSubscription,
            'limit': limit,
            'type': type,
            'params': params,
        };
        const message = this.extend(request, params);
        // 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
        const orderbook = await this.watch(url, messageHash, message, messageHash, subscription);
        return orderbook.limit();
    }
    async fetchOrderBookSnapshot(client, message, subscription) {
        const messageHash = this.safeString(subscription, 'messageHash');
        const symbol = this.safeString(subscription, 'symbol');
        try {
            const defaultLimit = this.safeInteger(this.options, 'watchOrderBookLimit', 1000);
            const type = this.safeValue(subscription, 'type');
            const limit = this.safeInteger(subscription, 'limit', defaultLimit);
            const params = this.safeValue(subscription, 'params');
            // 3. Get a depth snapshot from https://www.binance.com/api/v1/depth?symbol=BNBBTC&limit=1000 .
            // todo: this is a synch blocking call in ccxt.php - make it async
            // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000
            const snapshot = await this.fetchOrderBook(symbol, limit, params);
            const orderbook = this.safeValue(this.orderbooks, symbol);
            if (orderbook === undefined) {
                // if the orderbook is dropped before the snapshot is received
                return;
            }
            orderbook.reset(snapshot);
            // unroll the accumulated deltas
            const messages = orderbook.cache;
            for (let i = 0; i < messages.length; i++) {
                const message = messages[i];
                const U = this.safeInteger(message, 'U');
                const u = this.safeInteger(message, 'u');
                const pu = this.safeInteger(message, 'pu');
                if (type === 'future') {
                    // 4. Drop any event where u is < lastUpdateId in the snapshot
                    if (u < orderbook['nonce']) {
                        continue;
                    }
                    // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
                    if ((U <= orderbook['nonce']) && (u >= orderbook['nonce']) || (pu === orderbook['nonce'])) {
                        this.handleOrderBookMessage(client, message, orderbook);
                    }
                }
                else {
                    // 4. Drop any event where u is <= lastUpdateId in the snapshot
                    if (u <= orderbook['nonce']) {
                        continue;
                    }
                    // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1
                    if (((U - 1) <= orderbook['nonce']) && ((u - 1) >= orderbook['nonce'])) {
                        this.handleOrderBookMessage(client, message, orderbook);
                    }
                }
            }
            this.orderbooks[symbol] = orderbook;
            client.resolve(orderbook, messageHash);
        }
        catch (e) {
            delete client.subscriptions[messageHash];
            client.reject(e, messageHash);
        }
    }
    handleDelta(bookside, delta) {
        const price = this.safeFloat(delta, 0);
        const amount = this.safeFloat(delta, 1);
        bookside.store(price, amount);
    }
    handleDeltas(bookside, deltas) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(bookside, deltas[i]);
        }
    }
    handleOrderBookMessage(client, message, orderbook) {
        const u = this.safeInteger(message, 'u');
        this.handleDeltas(orderbook['asks'], this.safeValue(message, 'a', []));
        this.handleDeltas(orderbook['bids'], this.safeValue(message, 'b', []));
        orderbook['nonce'] = u;
        const timestamp = this.safeInteger(message, 'E');
        orderbook['timestamp'] = timestamp;
        orderbook['datetime'] = this.iso8601(timestamp);
        return orderbook;
    }
    handleOrderBook(client, message) {
        //
        // initial snapshot is fetched with ccxt's fetchOrderBook
        // the feed does not include a snapshot, just the deltas
        //
        //     {
        //         "e": "depthUpdate", // Event type
        //         "E": 1577554482280, // Event time
        //         "s": "BNBBTC", // Symbol
        //         "U": 157, // First update ID in event
        //         "u": 160, // Final update ID in event
        //         "b": [ // bids
        //             [ "0.0024", "10" ], // price, size
        //         ],
        //         "a": [ // asks
        //             [ "0.0026", "100" ], // price, size
        //         ]
        //     }
        //
        const index = client.url.indexOf('/stream');
        const marketType = (index >= 0) ? 'spot' : 'contract';
        const marketId = this.safeString(message, 's');
        const market = this.safeMarket(marketId, undefined, undefined, marketType);
        const symbol = market['symbol'];
        const name = 'depth';
        const messageHash = market['lowercaseId'] + '@' + name;
        const orderbook = this.safeValue(this.orderbooks, symbol);
        if (orderbook === undefined) {
            //
            // https://github.com/ccxt/ccxt/issues/6672
            //
            // Sometimes Binance sends the first delta before the subscription
            // confirmation arrives. At that point the orderbook is not
            // initialized yet and the snapshot has not been requested yet
            // therefore it is safe to drop these premature messages.
            //
            return;
        }
        const nonce = this.safeInteger(orderbook, 'nonce');
        if (nonce === undefined) {
            // 2. Buffer the events you receive from the stream.
            orderbook.cache.push(message);
        }
        else {
            try {
                const U = this.safeInteger(message, 'U');
                const u = this.safeInteger(message, 'u');
                const pu = this.safeInteger(message, 'pu');
                if (pu === undefined) {
                    // spot
                    // 4. Drop any event where u is <= lastUpdateId in the snapshot
                    if (u > orderbook['nonce']) {
                        const timestamp = this.safeInteger(orderbook, 'timestamp');
                        let conditional = undefined;
                        if (timestamp === undefined) {
                            // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1
                            conditional = ((U - 1) <= orderbook['nonce']) && ((u - 1) >= orderbook['nonce']);
                        }
                        else {
                            // 6. While listening to the stream, each new event's U should be equal to the previous event's u+1.
                            conditional = ((U - 1) === orderbook['nonce']);
                        }
                        if (conditional) {
                            this.handleOrderBookMessage(client, message, orderbook);
                            if (nonce < orderbook['nonce']) {
                                client.resolve(orderbook, messageHash);
                            }
                        }
                        else {
                            // todo: client.reject from handleOrderBookMessage properly
                            throw new ExchangeError(this.id + ' handleOrderBook received an out-of-order nonce');
                        }
                    }
                }
                else {
                    // future
                    // 4. Drop any event where u is < lastUpdateId in the snapshot
                    if (u >= orderbook['nonce']) {
                        // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
                        // 6. While listening to the stream, each new event's pu should be equal to the previous event's u, otherwise initialize the process from step 3
                        if ((U <= orderbook['nonce']) || (pu === orderbook['nonce'])) {
                            this.handleOrderBookMessage(client, message, orderbook);
                            if (nonce <= orderbook['nonce']) {
                                client.resolve(orderbook, messageHash);
                            }
                        }
                        else {
                            // todo: client.reject from handleOrderBookMessage properly
                            throw new ExchangeError(this.id + ' handleOrderBook received an out-of-order nonce');
                        }
                    }
                }
            }
            catch (e) {
                delete this.orderbooks[symbol];
                delete client.subscriptions[messageHash];
                client.reject(e, messageHash);
            }
        }
    }
    handleOrderBookSubscription(client, message, subscription) {
        const defaultLimit = this.safeInteger(this.options, 'watchOrderBookLimit', 1000);
        const symbol = this.safeString(subscription, 'symbol');
        const limit = this.safeInteger(subscription, 'limit', defaultLimit);
        if (symbol in this.orderbooks) {
            delete this.orderbooks[symbol];
        }
        this.orderbooks[symbol] = this.orderBook({}, limit);
        // fetch the snapshot in a separate async call
        this.spawn(this.fetchOrderBookSnapshot, client, message, subscription);
    }
    handleSubscriptionStatus(client, message) {
        //
        //     {
        //         "result": null,
        //         "id": 1574649734450
        //     }
        //
        const id = this.safeString(message, 'id');
        const subscriptionsById = this.indexBy(client.subscriptions, 'id');
        const subscription = this.safeValue(subscriptionsById, id, {});
        const method = this.safeValue(subscription, 'method');
        if (method !== undefined) {
            method.call(this, client, message, subscription);
        }
        return message;
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#watchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const options = this.safeValue(this.options, 'watchTrades', {});
        const name = this.safeString(options, 'name', 'trade');
        const messageHash = market['lowercaseId'] + '@' + name;
        let type = market['type'];
        if (market['contract']) {
            type = market['linear'] ? 'future' : 'delivery';
        }
        const query = this.omit(params, 'type');
        const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
        const requestId = this.requestId(url);
        const request = {
            'method': 'SUBSCRIBE',
            'params': [
                messageHash,
            ],
            'id': requestId,
        };
        const subscribe = {
            'id': requestId,
        };
        const trades = await this.watch(url, messageHash, this.extend(request, query), messageHash, subscribe);
        if (this.newUpdates) {
            limit = trades.getLimit(market['symbol'], limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    parseTrade(trade, market = undefined) {
        //
        // public watchTrades
        //
        //     {
        //         e: 'trade',       // event type
        //         E: 1579481530911, // event time
        //         s: 'ETHBTC',      // symbol
        //         t: 158410082,     // trade id
        //         p: '0.01914100',  // price
        //         q: '0.00700000',  // quantity
        //         b: 586187049,     // buyer order id
        //         a: 586186710,     // seller order id
        //         T: 1579481530910, // trade time
        //         m: false,         // is the buyer the market maker
        //         M: true           // binance docs say it should be ignored
        //     }
        //
        //     {
        //        "e": "aggTrade",  // Event type
        //        "E": 123456789,   // Event time
        //        "s": "BNBBTC",    // Symbol
        //        "a": 12345,       // Aggregate trade ID
        //        "p": "0.001",     // Price
        //        "q": "100",       // Quantity
        //        "f": 100,         // First trade ID
        //        "l": 105,         // Last trade ID
        //        "T": 123456785,   // Trade time
        //        "m": true,        // Is the buyer the market maker?
        //        "M": true         // Ignore
        //     }
        //
        // private watchMyTrades spot
        //
        //     {
        //         e: 'executionReport',
        //         E: 1611063861489,
        //         s: 'BNBUSDT',
        //         c: 'm4M6AD5MF3b1ERe65l4SPq',
        //         S: 'BUY',
        //         o: 'MARKET',
        //         f: 'GTC',
        //         q: '2.00000000',
        //         p: '0.00000000',
        //         P: '0.00000000',
        //         F: '0.00000000',
        //         g: -1,
        //         C: '',
        //         x: 'TRADE',
        //         X: 'PARTIALLY_FILLED',
        //         r: 'NONE',
        //         i: 1296882607,
        //         l: '0.33200000',
        //         z: '0.33200000',
        //         L: '46.86600000',
        //         n: '0.00033200',
        //         N: 'BNB',
        //         T: 1611063861488,
        //         t: 109747654,
        //         I: 2696953381,
        //         w: false,
        //         m: false,
        //         M: true,
        //         O: 1611063861488,
        //         Z: '15.55951200',
        //         Y: '15.55951200',
        //         Q: '0.00000000'
        //     }
        //
        // private watchMyTrades future/delivery
        //
        //     {
        //         s: 'BTCUSDT',
        //         c: 'pb2jD6ZQHpfzSdUac8VqMK',
        //         S: 'SELL',
        //         o: 'MARKET',
        //         f: 'GTC',
        //         q: '0.001',
        //         p: '0',
        //         ap: '33468.46000',
        //         sp: '0',
        //         x: 'TRADE',
        //         X: 'FILLED',
        //         i: 13351197194,
        //         l: '0.001',
        //         z: '0.001',
        //         L: '33468.46',
        //         n: '0.00027086',
        //         N: 'BNB',
        //         T: 1612095165362,
        //         t: 458032604,
        //         b: '0',
        //         a: '0',
        //         m: false,
        //         R: false,
        //         wt: 'CONTRACT_PRICE',
        //         ot: 'MARKET',
        //         ps: 'BOTH',
        //         cp: false,
        //         rp: '0.00335000',
        //         pP: false,
        //         si: 0,
        //         ss: 0
        //     }
        //
        const executionType = this.safeString(trade, 'x');
        const isTradeExecution = (executionType === 'TRADE');
        if (!isTradeExecution) {
            return super.parseTrade(trade, market);
        }
        const id = this.safeString2(trade, 't', 'a');
        const timestamp = this.safeInteger(trade, 'T');
        const price = this.safeString2(trade, 'L', 'p');
        let amount = this.safeString(trade, 'q');
        if (isTradeExecution) {
            amount = this.safeString(trade, 'l', amount);
        }
        let cost = this.safeString(trade, 'Y');
        if (cost === undefined) {
            if ((price !== undefined) && (amount !== undefined)) {
                cost = Precise.stringMul(price, amount);
            }
        }
        const marketId = this.safeString(trade, 's');
        const marketType = ('ps' in trade) ? 'contract' : 'spot';
        const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
        let side = this.safeStringLower(trade, 'S');
        let takerOrMaker = undefined;
        const orderId = this.safeString(trade, 'i');
        if ('m' in trade) {
            if (side === undefined) {
                side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally
            }
            takerOrMaker = trade['m'] ? 'maker' : 'taker';
        }
        let fee = undefined;
        const feeCost = this.safeString(trade, 'n');
        if (feeCost !== undefined) {
            const feeCurrencyId = this.safeString(trade, 'N');
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            };
        }
        const type = this.safeStringLower(trade, 'o');
        return this.safeTrade({
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'id': id,
            'order': orderId,
            'type': type,
            'takerOrMaker': takerOrMaker,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        });
    }
    handleTrade(client, message) {
        // the trade streams push raw trade information in real-time
        // each trade has a unique buyer and seller
        const index = client.url.indexOf('/stream');
        const marketType = (index >= 0) ? 'spot' : 'contract';
        const marketId = this.safeString(message, 's');
        const market = this.safeMarket(marketId, undefined, undefined, marketType);
        const symbol = market['symbol'];
        const lowerCaseId = this.safeStringLower(message, 's');
        const event = this.safeString(message, 'e');
        const messageHash = lowerCaseId + '@' + event;
        const trade = this.parseTrade(message, market);
        let tradesArray = this.safeValue(this.trades, symbol);
        if (tradesArray === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            tradesArray = new ArrayCache(limit);
        }
        tradesArray.append(trade);
        this.trades[symbol] = tradesArray;
        client.resolve(tradesArray, messageHash);
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#watchOHLCV
         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        let marketId = market['lowercaseId'];
        const interval = this.safeString(this.timeframes, timeframe, timeframe);
        const options = this.safeValue(this.options, 'watchOHLCV', {});
        const nameOption = this.safeString(options, 'name', 'kline');
        const name = this.safeString(params, 'name', nameOption);
        if (name === 'indexPriceKline') {
            // weird behavior for index price kline we can't use the perp suffix
            marketId = marketId.replace('_perp', '');
        }
        params = this.omit(params, 'name');
        const messageHash = marketId + '@' + name + '_' + interval;
        let type = market['type'];
        if (market['contract']) {
            type = market['linear'] ? 'future' : 'delivery';
        }
        const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
        const requestId = this.requestId(url);
        const request = {
            'method': 'SUBSCRIBE',
            'params': [
                messageHash,
            ],
            'id': requestId,
        };
        const subscribe = {
            'id': requestId,
        };
        const ohlcv = await this.watch(url, messageHash, this.extend(request, params), messageHash, subscribe);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        //
        //     {
        //         e: 'kline',
        //         E: 1579482921215,
        //         s: 'ETHBTC',
        //         k: {
        //             t: 1579482900000,
        //             T: 1579482959999,
        //             s: 'ETHBTC',
        //             i: '1m',
        //             f: 158411535,
        //             L: 158411550,
        //             o: '0.01913200',
        //             c: '0.01913500',
        //             h: '0.01913700',
        //             l: '0.01913200',
        //             v: '5.08400000',
        //             n: 16,
        //             x: false,
        //             q: '0.09728060',
        //             V: '3.30200000',
        //             Q: '0.06318500',
        //             B: '0'
        //         }
        //     }
        //
        let event = this.safeString(message, 'e');
        const eventMap = {
            'indexPrice_kline': 'indexPriceKline',
            'markPrice_kline': 'markPriceKline',
        };
        event = this.safeString(eventMap, event, event);
        const kline = this.safeValue(message, 'k');
        let marketId = this.safeString2(kline, 's', 'ps');
        if (event === 'indexPriceKline') {
            // indexPriceKline doesn't have the _PERP suffix
            marketId = this.safeString(message, 'ps');
        }
        const lowercaseMarketId = marketId.toLowerCase();
        const interval = this.safeString(kline, 'i');
        // use a reverse lookup in a static map instead
        const timeframe = this.findTimeframe(interval);
        const messageHash = lowercaseMarketId + '@' + event + '_' + interval;
        const parsed = [
            this.safeInteger(kline, 't'),
            this.safeFloat(kline, 'o'),
            this.safeFloat(kline, 'h'),
            this.safeFloat(kline, 'l'),
            this.safeFloat(kline, 'c'),
            this.safeFloat(kline, 'v'),
        ];
        const index = client.url.indexOf('/stream');
        const marketType = (index >= 0) ? 'spot' : 'contract';
        const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
        this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
        let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
            stored = new ArrayCacheByTimestamp(limit);
            this.ohlcvs[symbol][timeframe] = stored;
        }
        stored.append(parsed);
        client.resolve(stored, messageHash);
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name binance#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the binance api endpoint
         * @param {string} params.name stream to use can be ticker or bookTicker
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const marketId = market['lowercaseId'];
        let type = market['type'];
        if (market['contract']) {
            type = market['linear'] ? 'future' : 'delivery';
        }
        const options = this.safeValue(this.options, 'watchTicker', {});
        let name = this.safeString(options, 'name', 'ticker');
        name = this.safeString(params, 'name', name);
        params = this.omit(params, 'name');
        const messageHash = marketId + '@' + name;
        const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
        const requestId = this.requestId(url);
        const request = {
            'method': 'SUBSCRIBE',
            'params': [
                messageHash,
            ],
            'id': requestId,
        };
        const subscribe = {
            'id': requestId,
        };
        return await this.watch(url, messageHash, this.extend(request, params), messageHash, subscribe);
    }
    async watchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name binance#watchTickers
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
         * @param {[string]} symbols unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        const marketIds = this.marketIds(symbols);
        let market = undefined;
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('watchTickers', market, params);
        if (marketIds !== undefined) {
            market = this.safeMarket(marketIds[0], undefined, undefined, type);
        }
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('watchTickers', market, params);
        if (this.isLinear(type, subType)) {
            type = 'future';
        }
        else if (this.isInverse(type, subType)) {
            type = 'delivery';
        }
        const options = this.safeValue(this.options, 'watchTickers', {});
        let name = this.safeString(options, 'name', 'ticker');
        name = this.safeString(params, 'name', name);
        const oriParams = params;
        params = this.omit(params, 'name');
        let wsParams = [];
        const messageHash = '!' + name + '@arr';
        if (name === 'bookTicker') {
            if (marketIds === undefined) {
                throw new ArgumentsRequired(this.id + ' watchTickers() requires symbols for bookTicker');
            }
            // simulate watchTickers with subscribe multiple individual bookTicker topic
            for (let i = 0; i < marketIds.length; i++) {
                wsParams.push(marketIds[i].toLowerCase() + '@bookTicker');
            }
        }
        else {
            wsParams = [
                messageHash,
            ];
        }
        const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
        const requestId = this.requestId(url);
        const request = {
            'method': 'SUBSCRIBE',
            'params': wsParams,
            'id': requestId,
        };
        const subscribe = {
            'id': requestId,
        };
        const tickers = await this.watch(url, messageHash, this.extend(request, params), messageHash, subscribe);
        const result = {};
        for (let i = 0; i < tickers.length; i++) {
            const ticker = tickers[i];
            const tickerSymbol = ticker['symbol'];
            if (symbols === undefined || this.inArray(tickerSymbol, symbols)) {
                result[tickerSymbol] = ticker;
            }
        }
        const resultKeys = Object.keys(result);
        const resultKeysLength = resultKeys.length;
        if (resultKeysLength > 0) {
            if (this.newUpdates) {
                return result;
            }
            return this.filterByArray(this.tickers, 'symbol', symbols);
        }
        return await this.watchTickers(symbols, oriParams);
    }
    parseWsTicker(message, marketType) {
        //
        // ticker
        //     {
        //         e: '24hrTicker',      // event type
        //         E: 1579485598569,     // event time
        //         s: 'ETHBTC',          // symbol
        //         p: '-0.00004000',     // price change
        //         P: '-0.209',          // price change percent
        //         w: '0.01920495',      // weighted average price
        //         x: '0.01916500',      // the price of the first trade before the 24hr rolling window
        //         c: '0.01912500',      // last (closing) price
        //         Q: '0.10400000',      // last quantity
        //         b: '0.01912200',      // best bid
        //         B: '4.10400000',      // best bid quantity
        //         a: '0.01912500',      // best ask
        //         A: '0.00100000',      // best ask quantity
        //         o: '0.01916500',      // open price
        //         h: '0.01956500',      // high price
        //         l: '0.01887700',      // low price
        //         v: '173518.11900000', // base volume
        //         q: '3332.40703994',   // quote volume
        //         O: 1579399197842,     // open time
        //         C: 1579485597842,     // close time
        //         F: 158251292,         // first trade id
        //         L: 158414513,         // last trade id
        //         n: 163222,            // total number of trades
        //     }
        //
        // miniTicker
        //     {
        //         e: '24hrMiniTicker',
        //         E: 1671617114585,
        //         s: 'MOBBUSD',
        //         c: '0.95900000',
        //         o: '0.91200000',
        //         h: '1.04000000',
        //         l: '0.89400000',
        //         v: '2109995.32000000',
        //         q: '2019254.05788000'
        //     }
        //
        let event = this.safeString(message, 'e', 'bookTicker');
        if (event === '24hrTicker') {
            event = 'ticker';
        }
        let timestamp = undefined;
        const now = this.milliseconds();
        if (event === 'bookTicker') {
            // take the event timestamp, if available, for spot tickers it is not
            timestamp = this.safeInteger(message, 'E', now);
        }
        else {
            // take the timestamp of the closing price for candlestick streams
            timestamp = this.safeInteger(message, 'C', now);
        }
        const marketId = this.safeString(message, 's');
        const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
        const last = this.safeFloat(message, 'c');
        const ticker = {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(message, 'h'),
            'low': this.safeFloat(message, 'l'),
            'bid': this.safeFloat(message, 'b'),
            'bidVolume': this.safeFloat(message, 'B'),
            'ask': this.safeFloat(message, 'a'),
            'askVolume': this.safeFloat(message, 'A'),
            'vwap': this.safeFloat(message, 'w'),
            'open': this.safeFloat(message, 'o'),
            'close': last,
            'last': last,
            'previousClose': this.safeFloat(message, 'x'),
            'change': this.safeFloat(message, 'p'),
            'percentage': this.safeFloat(message, 'P'),
            'average': undefined,
            'baseVolume': this.safeFloat(message, 'v'),
            'quoteVolume': this.safeFloat(message, 'q'),
            'info': message,
        };
        return ticker;
    }
    handleTicker(client, message) {
        //
        // 24hr rolling window ticker statistics for a single symbol
        // These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs
        // Update Speed 1000ms
        //
        //     {
        //         e: '24hrTicker',      // event type
        //         E: 1579485598569,     // event time
        //         s: 'ETHBTC',          // symbol
        //         p: '-0.00004000',     // price change
        //         P: '-0.209',          // price change percent
        //         w: '0.01920495',      // weighted average price
        //         x: '0.01916500',      // the price of the first trade before the 24hr rolling window
        //         c: '0.01912500',      // last (closing) price
        //         Q: '0.10400000',      // last quantity
        //         b: '0.01912200',      // best bid
        //         B: '4.10400000',      // best bid quantity
        //         a: '0.01912500',      // best ask
        //         A: '0.00100000',      // best ask quantity
        //         o: '0.01916500',      // open price
        //         h: '0.01956500',      // high price
        //         l: '0.01887700',      // low price
        //         v: '173518.11900000', // base volume
        //         q: '3332.40703994',   // quote volume
        //         O: 1579399197842,     // open time
        //         C: 1579485597842,     // close time
        //         F: 158251292,         // first trade id
        //         L: 158414513,         // last trade id
        //         n: 163222,            // total number of trades
        //     }
        //
        let event = this.safeString(message, 'e', 'bookTicker');
        if (event === '24hrTicker') {
            event = 'ticker';
        }
        else if (event === '24hrMiniTicker') {
            event = 'miniTicker';
        }
        const wsMarketId = this.safeStringLower(message, 's');
        const messageHash = wsMarketId + '@' + event;
        const index = client.url.indexOf('/stream');
        const marketType = (index >= 0) ? 'spot' : 'contract';
        const result = this.parseWsTicker(message, marketType);
        const symbol = result['symbol'];
        this.tickers[symbol] = result;
        client.resolve(result, messageHash);
        if (event === 'bookTicker') {
            // watch bookTickers
            client.resolve([result], '!' + 'bookTicker@arr');
        }
    }
    handleTickers(client, message) {
        let event = undefined;
        const index = client.url.indexOf('/stream');
        const marketType = (index >= 0) ? 'spot' : 'contract';
        for (let i = 0; i < message.length; i++) {
            const ticker = message[i];
            event = this.safeString(ticker, 'e');
            if (event === '24hrTicker') {
                event = 'ticker';
            }
            else if (event === '24hrMiniTicker') {
                event = 'miniTicker';
            }
            const wsMarketId = this.safeStringLower(ticker, 's');
            const messageHash = wsMarketId + '@' + event;
            const result = this.parseWsTicker(ticker, marketType);
            const symbol = result['symbol'];
            this.tickers[symbol] = result;
            client.resolve(result, messageHash);
        }
        const values = Object.values(this.tickers);
        client.resolve(values, '!' + event + '@arr');
    }
    async authenticate(params = {}) {
        const time = this.milliseconds();
        let type = this.safeString2(this.options, 'defaultType', 'authenticate', 'spot');
        type = this.safeString(params, 'type', type);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('authenticate', undefined, params);
        if (this.isLinear(type, subType)) {
            type = 'future';
        }
        else if (this.isInverse(type, subType)) {
            type = 'delivery';
        }
        let marginMode = undefined;
        [marginMode, params] = this.handleMarginModeAndParams('authenticate', params);
        const isIsolatedMargin = (marginMode === 'isolated');
        const isCrossMargin = (marginMode === 'cross') || (marginMode === undefined);
        const symbol = this.safeString(params, 'symbol');
        params = this.omit(params, 'symbol');
        const options = this.safeValue(this.options, type, {});
        const lastAuthenticatedTime = this.safeInteger(options, 'lastAuthenticatedTime', 0);
        const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
        const delay = this.sum(listenKeyRefreshRate, 10000);
        if (time - lastAuthenticatedTime > delay) {
            let method = 'publicPostUserDataStream';
            if (type === 'future') {
                method = 'fapiPrivatePostListenKey';
            }
            else if (type === 'delivery') {
                method = 'dapiPrivatePostListenKey';
            }
            else if (type === 'margin' && isCrossMargin) {
                method = 'sapiPostUserDataStream';
            }
            else if (isIsolatedMargin) {
                method = 'sapiPostUserDataStreamIsolated';
                if (symbol === undefined) {
                    throw new ArgumentsRequired(this.id + ' authenticate() requires a symbol argument for isolated margin mode');
                }
                const marketId = this.marketId(symbol);
                params['symbol'] = marketId;
            }
            const response = await this[method](params);
            this.options[type] = this.extend(options, {
                'listenKey': this.safeString(response, 'listenKey'),
                'lastAuthenticatedTime': time,
            });
            this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
        }
    }
    async keepAliveListenKey(params = {}) {
        // https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot
        let type = this.safeString2(this.options, 'defaultType', 'authenticate', 'spot');
        type = this.safeString(params, 'type', type);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('keepAliveListenKey', undefined, params);
        if (this.isLinear(type, subType)) {
            type = 'future';
        }
        else if (this.isInverse(type, subType)) {
            type = 'delivery';
        }
        const options = this.safeValue(this.options, type, {});
        const listenKey = this.safeString(options, 'listenKey');
        if (listenKey === undefined) {
            // A network error happened: we can't renew a listen key that does not exist.
            return;
        }
        let method = 'publicPutUserDataStream';
        if (type === 'future') {
            method = 'fapiPrivatePutListenKey';
        }
        else if (type === 'delivery') {
            method = 'dapiPrivatePutListenKey';
        }
        else if (type === 'margin') {
            method = 'sapiPutUserDataStream';
        }
        const request = {
            'listenKey': listenKey,
        };
        const time = this.milliseconds();
        const sendParams = this.omit(params, 'type');
        try {
            await this[method](this.extend(request, sendParams));
        }
        catch (error) {
            const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
            const client = this.client(url);
            const messageHashes = Object.keys(client.futures);
            for (let i = 0; i < messageHashes.length; i++) {
                const messageHash = messageHashes[i];
                client.reject(error, messageHash);
            }
            this.options[type] = this.extend(options, {
                'listenKey': undefined,
                'lastAuthenticatedTime': 0,
            });
            return;
        }
        this.options[type] = this.extend(options, {
            'listenKey': listenKey,
            'lastAuthenticatedTime': time,
        });
        // whether or not to schedule another listenKey keepAlive request
        const clients = Object.values(this.clients);
        const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
        for (let i = 0; i < clients.length; i++) {
            const client = clients[i];
            const subscriptionKeys = Object.keys(client.subscriptions);
            for (let j = 0; j < subscriptionKeys.length; j++) {
                const subscribeType = subscriptionKeys[j];
                if (subscribeType === type) {
                    return this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
                }
            }
        }
    }
    setBalanceCache(client, type) {
        if (type in client.subscriptions) {
            return undefined;
        }
        const options = this.safeValue(this.options, 'watchBalance');
        const fetchBalanceSnapshot = this.safeValue(options, 'fetchBalanceSnapshot', false);
        if (fetchBalanceSnapshot) {
            const messageHash = type + ':fetchBalanceSnapshot';
            if (!(messageHash in client.futures)) {
                client.future(messageHash);
                this.spawn(this.loadBalanceSnapshot, client, messageHash, type);
            }
        }
        else {
            this.balance[type] = {};
        }
    }
    async loadBalanceSnapshot(client, messageHash, type) {
        const response = await this.fetchBalance({ 'type': type });
        this.balance[type] = this.extend(response, this.safeValue(this.balance, type, {}));
        // don't remove the future from the .futures cache
        const future = client.futures[messageHash];
        future.resolve();
        client.resolve(this.balance[type], type + ':balance');
    }
    async watchBalance(params = {}) {
        /**
         * @method
         * @name binance#watchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        await this.authenticate(params);
        const defaultType = this.safeString(this.options, 'defaultType', 'spot');
        let type = this.safeString(params, 'type', defaultType);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('watchBalance', undefined, params);
        if (this.isLinear(type, subType)) {
            type = 'future';
        }
        else if (this.isInverse(type, subType)) {
            type = 'delivery';
        }
        const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
        const client = this.client(url);
        this.setBalanceCache(client, type);
        const options = this.safeValue(this.options, 'watchBalance');
        const fetchBalanceSnapshot = this.safeValue(options, 'fetchBalanceSnapshot', false);
        const awaitBalanceSnapshot = this.safeValue(options, 'awaitBalanceSnapshot', true);
        if (fetchBalanceSnapshot && awaitBalanceSnapshot) {
            await client.future(type + ':fetchBalanceSnapshot');
        }
        const messageHash = type + ':balance';
        const message = undefined;
        return await this.watch(url, messageHash, message, type);
    }
    handleBalance(client, message) {
        //
        // sent upon a balance update not related to orders
        //
        //     {
        //         e: 'balanceUpdate',
        //         E: 1629352505586,
        //         a: 'IOTX',
        //         d: '0.43750000',
        //         T: 1629352505585
        //     }
        //
        // sent upon creating or filling an order
        //
        //     {
        //         "e": "outboundAccountPosition", // Event type
        //         "E": 1564034571105,             // Event Time
        //         "u": 1564034571073,             // Time of last account update
        //         "B": [                          // Balances Array
        //             {
        //                 "a": "ETH",                 // Asset
        //                 "f": "10000.000000",        // Free
        //                 "l": "0.000000"             // Locked
        //             }
        //         ]
        //     }
        //
        // future/delivery
        //
        //     {
        //         "e": "ACCOUNT_UPDATE",            // Event Type
        //         "E": 1564745798939,               // Event Time
        //         "T": 1564745798938 ,              // Transaction
        //         "i": "SfsR",                      // Account Alias
        //         "a": {                            // Update Data
        //             "m":"ORDER",                  // Event reason type
        //             "B":[                         // Balances
        //                 {
        //                     "a":"BTC",                // Asset
        //                     "wb":"122624.12345678",   // Wallet Balance
        //                     "cw":"100.12345678"       // Cross Wallet Balance
        //                 },
        //             ],
        //             "P":[
        //                 {
        //                     "s":"BTCUSD_200925",      // Symbol
        //                     "pa":"0",                 // Position Amount
        //                     "ep":"0.0",               // Entry Price
        //                     "cr":"200",               // (Pre-fee) Accumulated Realized
        //                     "up":"0",                 // Unrealized PnL
        //                     "mt":"isolated",          // Margin Type
        //                     "iw":"0.00000000",        // Isolated Wallet (if isolated position)
        //                     "ps":"BOTH"               // Position Side
        //                 },
        //             ]
        //         }
        //     }
        //
        const wallet = this.safeValue(this.options, 'wallet', 'wb'); // cw for cross wallet
        // each account is connected to a different endpoint
        // and has exactly one subscriptionhash which is the account type
        const subscriptions = Object.keys(client.subscriptions);
        const accountType = subscriptions[0];
        const messageHash = accountType + ':balance';
        this.balance[accountType]['info'] = message;
        const event = this.safeString(message, 'e');
        if (event === 'balanceUpdate') {
            const currencyId = this.safeString(message, 'a');
            const code = this.safeCurrencyCode(currencyId);
            const account = this.account();
            const delta = this.safeString(message, 'd');
            if (code in this.balance[accountType]) {
                let previousValue = this.balance[accountType][code]['free'];
                if (typeof previousValue !== 'string') {
                    previousValue = this.numberToString(previousValue);
                }
                account['free'] = Precise.stringAdd(previousValue, delta);
            }
            else {
                account['free'] = delta;
            }
            this.balance[accountType][code] = account;
        }
        else {
            message = this.safeValue(message, 'a', message);
            const B = this.safeValue(message, 'B');
            for (let i = 0; i < B.length; i++) {
                const entry = B[i];
                const currencyId = this.safeString(entry, 'a');
                const code = this.safeCurrencyCode(currencyId);
                const account = this.account();
                account['free'] = this.safeString(entry, 'f');
                account['used'] = this.safeString(entry, 'l');
                account['total'] = this.safeString(entry, wallet);
                this.balance[accountType][code] = account;
            }
        }
        const timestamp = this.safeInteger(message, 'E');
        this.balance[accountType]['timestamp'] = timestamp;
        this.balance[accountType]['datetime'] = this.iso8601(timestamp);
        this.balance[accountType] = this.safeBalance(this.balance[accountType]);
        client.resolve(this.balance[accountType], messageHash);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#watchOrders
         * @description watches information on multiple orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let messageHash = 'orders';
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            messageHash += ':' + symbol;
            params['symbol'] = symbol; // needed inside authenticate for isolated margin
        }
        await this.authenticate(params);
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('watchOrders', market, params);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('watchOrders', market, params);
        if (this.isLinear(type, subType)) {
            type = 'future';
        }
        else if (this.isInverse(type, subType)) {
            type = 'delivery';
        }
        const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
        const client = this.client(url);
        this.setBalanceCache(client, type);
        const message = undefined;
        const orders = await this.watch(url, messageHash, message, type);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    parseWsOrder(order, market = undefined) {
        //
        // spot
        //
        //     {
        //         "e": "executionReport",        // Event type
        //         "E": 1499405658658,            // Event time
        //         "s": "ETHBTC",                 // Symbol
        //         "c": "mUvoqJxFIILMdfAW5iGSOW", // Client order ID
        //         "S": "BUY",                    // Side
        //         "o": "LIMIT",                  // Order type
        //         "f": "GTC",                    // Time in force
        //         "q": "1.00000000",             // Order quantity
        //         "p": "0.10264410",             // Order price
        //         "P": "0.00000000",             // Stop price
        //         "F": "0.00000000",             // Iceberg quantity
        //         "g": -1,                       // OrderListId
        //         "C": null,                     // Original client order ID; This is the ID of the order being canceled
        //         "x": "NEW",                    // Current execution type
        //         "X": "NEW",                    // Current order status
        //         "r": "NONE",                   // Order reject reason; will be an error code.
        //         "i": 4293153,                  // Order ID
        //         "l": "0.00000000",             // Last executed quantity
        //         "z": "0.00000000",             // Cumulative filled quantity
        //         "L": "0.00000000",             // Last executed price
        //         "n": "0",                      // Commission amount
        //         "N": null,                     // Commission asset
        //         "T": 1499405658657,            // Transaction time
        //         "t": -1,                       // Trade ID
        //         "I": 8641984,                  // Ignore
        //         "w": true,                     // Is the order on the book?
        //         "m": false,                    // Is this trade the maker side?
        //         "M": false,                    // Ignore
        //         "O": 1499405658657,            // Order creation time
        //         "Z": "0.00000000",             // Cumulative quote asset transacted quantity
        //         "Y": "0.00000000"              // Last quote asset transacted quantity (i.e. lastPrice * lastQty),
        //         "Q": "0.00000000"              // Quote Order Qty
        //     }
        //
        // future
        //
        //     {
        //         "s":"BTCUSDT",                 // Symbol
        //         "c":"TEST",                    // Client Order Id
        //                                        // special client order id:
        //                                        // starts with "autoclose-": liquidation order
        //                                        // "adl_autoclose": ADL auto close order
        //         "S":"SELL",                    // Side
        //         "o":"TRAILING_STOP_MARKET",    // Order Type
        //         "f":"GTC",                     // Time in Force
        //         "q":"0.001",                   // Original Quantity
        //         "p":"0",                       // Original Price
        //         "ap":"0",                      // Average Price
        //         "sp":"7103.04",                // Stop Price. Please ignore with TRAILING_STOP_MARKET order
        //         "x":"NEW",                     // Execution Type
        //         "X":"NEW",                     // Order Status
        //         "i":8886774,                   // Order Id
        //         "l":"0",                       // Order Last Filled Quantity
        //         "z":"0",                       // Order Filled Accumulated Quantity
        //         "L":"0",                       // Last Filled Price
        //         "N":"USDT",                    // Commission Asset, will not push if no commission
        //         "n":"0",                       // Commission, will not push if no commission
        //         "T":1568879465651,             // Order Trade Time
        //         "t":0,                         // Trade Id
        //         "b":"0",                       // Bids Notional
        //         "a":"9.91",                    // Ask Notional
        //         "m":false,                     // Is this trade the maker side?
        //         "R":false,                     // Is this reduce only
        //         "wt":"CONTRACT_PRICE",         // Stop Price Working Type
        //         "ot":"TRAILING_STOP_MARKET",   // Original Order Type
        //         "ps":"LONG",                   // Position Side
        //         "cp":false,                    // If Close-All, pushed with conditional order
        //         "AP":"7476.89",                // Activation Price, only puhed with TRAILING_STOP_MARKET order
        //         "cr":"5.0",                    // Callback Rate, only puhed with TRAILING_STOP_MARKET order
        //         "rp":"0"                       // Realized Profit of the trade
        //     }
        //
        const executionType = this.safeString(order, 'x');
        const orderId = this.safeString(order, 'i');
        const marketId = this.safeString(order, 's');
        const marketType = ('ps' in order) ? 'contract' : 'spot';
        const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
        let timestamp = this.safeInteger(order, 'O');
        const T = this.safeInteger(order, 'T');
        let lastTradeTimestamp = undefined;
        if (executionType === 'NEW') {
            if (timestamp === undefined) {
                timestamp = T;
            }
        }
        else if (executionType === 'TRADE') {
            lastTradeTimestamp = T;
        }
        let fee = undefined;
        const feeCost = this.safeString(order, 'n');
        if ((feeCost !== undefined) && (Precise.stringGt(feeCost, '0'))) {
            const feeCurrencyId = this.safeString(order, 'N');
            const feeCurrency = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': feeCost,
                'currency': feeCurrency,
            };
        }
        const price = this.safeString(order, 'p');
        const amount = this.safeString(order, 'q');
        const side = this.safeStringLower(order, 'S');
        const type = this.safeStringLower(order, 'o');
        const filled = this.safeString(order, 'z');
        const cost = this.safeString(order, 'Z');
        const average = this.safeString(order, 'ap');
        const rawStatus = this.safeString(order, 'X');
        const status = this.parseOrderStatus(rawStatus);
        const trades = undefined;
        let clientOrderId = this.safeString(order, 'C');
        if ((clientOrderId === undefined) || (clientOrderId.length === 0)) {
            clientOrderId = this.safeString(order, 'c');
        }
        const stopPrice = this.safeString2(order, 'P', 'sp');
        let timeInForce = this.safeString(order, 'f');
        if (timeInForce === 'GTX') {
            // GTX means "Good Till Crossing" and is an equivalent way of saying Post Only
            timeInForce = 'PO';
        }
        return this.safeOrder({
            'info': order,
            'symbol': symbol,
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': undefined,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': stopPrice,
            'amount': amount,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': fee,
            'trades': trades,
        });
    }
    handleOrderUpdate(client, message) {
        //
        // spot
        //
        //     {
        //         "e": "executionReport",        // Event type
        //         "E": 1499405658658,            // Event time
        //         "s": "ETHBTC",                 // Symbol
        //         "c": "mUvoqJxFIILMdfAW5iGSOW", // Client order ID
        //         "S": "BUY",                    // Side
        //         "o": "LIMIT",                  // Order type
        //         "f": "GTC",                    // Time in force
        //         "q": "1.00000000",             // Order quantity
        //         "p": "0.10264410",             // Order price
        //         "P": "0.00000000",             // Stop price
        //         "F": "0.00000000",             // Iceberg quantity
        //         "g": -1,                       // OrderListId
        //         "C": null,                     // Original client order ID; This is the ID of the order being canceled
        //         "x": "NEW",                    // Current execution type
        //         "X": "NEW",                    // Current order status
        //         "r": "NONE",                   // Order reject reason; will be an error code.
        //         "i": 4293153,                  // Order ID
        //         "l": "0.00000000",             // Last executed quantity
        //         "z": "0.00000000",             // Cumulative filled quantity
        //         "L": "0.00000000",             // Last executed price
        //         "n": "0",                      // Commission amount
        //         "N": null,                     // Commission asset
        //         "T": 1499405658657,            // Transaction time
        //         "t": -1,                       // Trade ID
        //         "I": 8641984,                  // Ignore
        //         "w": true,                     // Is the order on the book?
        //         "m": false,                    // Is this trade the maker side?
        //         "M": false,                    // Ignore
        //         "O": 1499405658657,            // Order creation time
        //         "Z": "0.00000000",             // Cumulative quote asset transacted quantity
        //         "Y": "0.00000000"              // Last quote asset transacted quantity (i.e. lastPrice * lastQty),
        //         "Q": "0.00000000"              // Quote Order Qty
        //     }
        //
        // future
        //
        //     {
        //         "e":"ORDER_TRADE_UPDATE",           // Event Type
        //         "E":1568879465651,                  // Event Time
        //         "T":1568879465650,                  // Trasaction Time
        //         "o": {
        //             "s":"BTCUSDT",                  // Symbol
        //             "c":"TEST",                     // Client Order Id
        //                                             // special client order id:
        //                                             // starts with "autoclose-": liquidation order
        //                                             // "adl_autoclose": ADL auto close order
        //             "S":"SELL",                     // Side
        //             "o":"TRAILING_STOP_MARKET",     // Order Type
        //             "f":"GTC",                      // Time in Force
        //             "q":"0.001",                    // Original Quantity
        //             "p":"0",                        // Original Price
        //             "ap":"0",                       // Average Price
        //             "sp":"7103.04",                 // Stop Price. Please ignore with TRAILING_STOP_MARKET order
        //             "x":"NEW",                      // Execution Type
        //             "X":"NEW",                      // Order Status
        //             "i":8886774,                    // Order Id
        //             "l":"0",                        // Order Last Filled Quantity
        //             "z":"0",                        // Order Filled Accumulated Quantity
        //             "L":"0",                        // Last Filled Price
        //             "N":"USDT",                     // Commission Asset, will not push if no commission
        //             "n":"0",                        // Commission, will not push if no commission
        //             "T":1568879465651,              // Order Trade Time
        //             "t":0,                          // Trade Id
        //             "b":"0",                        // Bids Notional
        //             "a":"9.91",                     // Ask Notional
        //             "m":false,                      // Is this trade the maker side?
        //             "R":false,                      // Is this reduce only
        //             "wt":"CONTRACT_PRICE",          // Stop Price Working Type
        //             "ot":"TRAILING_STOP_MARKET",    // Original Order Type
        //             "ps":"LONG",                    // Position Side
        //             "cp":false,                     // If Close-All, pushed with conditional order
        //             "AP":"7476.89",                 // Activation Price, only puhed with TRAILING_STOP_MARKET order
        //             "cr":"5.0",                     // Callback Rate, only puhed with TRAILING_STOP_MARKET order
        //             "rp":"0"                        // Realized Profit of the trade
        //         }
        //     }
        //
        const e = this.safeString(message, 'e');
        if (e === 'ORDER_TRADE_UPDATE') {
            message = this.safeValue(message, 'o', message);
        }
        this.handleMyTrade(client, message);
        this.handleOrder(client, message);
    }
    async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name binance#watchMyTrades
         * @description watches information on multiple trades made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the binance api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        const defaultType = this.safeString2(this.options, 'watchMyTrades', 'defaultType', 'spot');
        let type = this.safeString(params, 'type', defaultType);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('watchMyTrades', undefined, params);
        if (this.isLinear(type, subType)) {
            type = 'future';
        }
        else if (this.isInverse(type, subType)) {
            type = 'delivery';
        }
        let messageHash = 'myTrades';
        if (symbol !== undefined) {
            symbol = this.symbol(symbol);
            messageHash += ':' + symbol;
            params['symbol'] = symbol;
        }
        await this.authenticate(params);
        const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
        const client = this.client(url);
        this.setBalanceCache(client, type);
        const message = undefined;
        const trades = await this.watch(url, messageHash, message, type);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }
    handleMyTrade(client, message) {
        const messageHash = 'myTrades';
        const executionType = this.safeString(message, 'x');
        if (executionType === 'TRADE') {
            const trade = this.parseTrade(message);
            const orderId = this.safeString(trade, 'order');
            const tradeFee = this.safeValue(trade, 'fee');
            const symbol = this.safeString(trade, 'symbol');
            if (orderId !== undefined && tradeFee !== undefined && symbol !== undefined) {
                const cachedOrders = this.orders;
                if (cachedOrders !== undefined) {
                    const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
                    const order = this.safeValue(orders, orderId);
                    if (order !== undefined) {
                        // accumulate order fees
                        const fees = this.safeValue(order, 'fees');
                        const fee = this.safeValue(order, 'fee');
                        if (fees !== undefined) {
                            let insertNewFeeCurrency = true;
                            for (let i = 0; i < fees.length; i++) {
                                const orderFee = fees[i];
                                if (orderFee['currency'] === tradeFee['currency']) {
                                    const feeCost = this.sum(tradeFee['cost'], orderFee['cost']);
                                    order['fees'][i]['cost'] = parseFloat(this.currencyToPrecision(tradeFee['currency'], feeCost));
                                    insertNewFeeCurrency = false;
                                    break;
                                }
                            }
                            if (insertNewFeeCurrency) {
                                order['fees'].push(tradeFee);
                            }
                        }
                        else if (fee !== undefined) {
                            if (fee['currency'] === tradeFee['currency']) {
                                const feeCost = this.sum(fee['cost'], tradeFee['cost']);
                                order['fee']['cost'] = parseFloat(this.currencyToPrecision(tradeFee['currency'], feeCost));
                            }
                            else if (fee['currency'] === undefined) {
                                order['fee'] = tradeFee;
                            }
                            else {
                                order['fees'] = [fee, tradeFee];
                                order['fee'] = undefined;
                            }
                        }
                        else {
                            order['fee'] = tradeFee;
                        }
                        // save this trade in the order
                        const orderTrades = this.safeValue(order, 'trades', []);
                        orderTrades.push(trade);
                        order['trades'] = orderTrades;
                        // don't append twice cause it breaks newUpdates mode
                        // this order already exists in the cache
                    }
                }
            }
            if (this.myTrades === undefined) {
                const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
                this.myTrades = new ArrayCacheBySymbolById(limit);
            }
            const myTrades = this.myTrades;
            myTrades.append(trade);
            client.resolve(this.myTrades, messageHash);
            const messageHashSymbol = messageHash + ':' + symbol;
            client.resolve(this.myTrades, messageHashSymbol);
        }
    }
    handleOrder(client, message) {
        const messageHash = 'orders';
        const parsed = this.parseWsOrder(message);
        const symbol = this.safeString(parsed, 'symbol');
        const orderId = this.safeString(parsed, 'id');
        if (symbol !== undefined) {
            if (this.orders === undefined) {
                const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            const cachedOrders = this.orders;
            const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
            const order = this.safeValue(orders, orderId);
            if (order !== undefined) {
                const fee = this.safeValue(order, 'fee');
                if (fee !== undefined) {
                    parsed['fee'] = fee;
                }
                const fees = this.safeValue(order, 'fees');
                if (fees !== undefined) {
                    parsed['fees'] = fees;
                }
                parsed['trades'] = this.safeValue(order, 'trades');
                parsed['timestamp'] = this.safeInteger(order, 'timestamp');
                parsed['datetime'] = this.safeString(order, 'datetime');
            }
            cachedOrders.append(parsed);
            client.resolve(this.orders, messageHash);
            const messageHashSymbol = messageHash + ':' + symbol;
            client.resolve(this.orders, messageHashSymbol);
        }
    }
    handleMessage(client, message) {
        const methods = {
            'depthUpdate': this.handleOrderBook,
            'trade': this.handleTrade,
            'aggTrade': this.handleTrade,
            'kline': this.handleOHLCV,
            'markPrice_kline': this.handleOHLCV,
            'indexPrice_kline': this.handleOHLCV,
            '24hrTicker@arr': this.handleTickers,
            '24hrMiniTicker@arr': this.handleTickers,
            '24hrTicker': this.handleTicker,
            '24hrMiniTicker': this.handleTicker,
            'bookTicker': this.handleTicker,
            'outboundAccountPosition': this.handleBalance,
            'balanceUpdate': this.handleBalance,
            'ACCOUNT_UPDATE': this.handleBalance,
            'executionReport': this.handleOrderUpdate,
            'ORDER_TRADE_UPDATE': this.handleOrderUpdate,
        };
        let event = this.safeString(message, 'e');
        if (Array.isArray(message)) {
            const data = message[0];
            event = this.safeString(data, 'e') + '@arr';
        }
        const method = this.safeValue(methods, event);
        if (method === undefined) {
            const requestId = this.safeString(message, 'id');
            if (requestId !== undefined) {
                return this.handleSubscriptionStatus(client, message);
            }
            // special case for the real-time bookTicker, since it comes without an event identifier
            //
            //     {
            //         u: 7488717758,
            //         s: 'BTCUSDT',
            //         b: '28621.74000000',
            //         B: '1.43278800',
            //         a: '28621.75000000',
            //         A: '2.52500800'
            //     }
            //
            if (event === undefined) {
                this.handleTicker(client, message);
            }
        }
        else {
            return method.call(this, client, message);
        }
    }
}

//  ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class binancecoinm extends binance {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'binancecoinm',
            'name': 'Binance COIN-M',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
            },
            'options': {
                'fetchMarkets': ['inverse'],
                'defaultSubType': 'inverse',
            },
        });
    }
}

//  ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class binanceusdm extends binance {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'binanceusdm',
            'name': 'Binance USDⓈ-M',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
            },
            'options': {
                'fetchMarkets': ['linear'],
                'defaultSubType': 'linear',
            },
        });
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bingx extends bingx$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': false,
                'watchMyTrades': false,
                'watchOHLCV': false,
                'watchOrderBook': true,
                'watchOrders': true,
                'watchTicker': true,
                'watchTickers': false,
                'watchTrades': true,
                'watchPosition': undefined,
            },
            'urls': {
                'api': {
                    'ws': 'wss://ws-market-swap.we-api.com/ws',
                    'ws2': 'wss://open-api-swap.bingx.com/swap-market',
                },
            },
            'options': {
                'wsTimeFrames': {
                    '1m': '1min',
                    '3m': '3min',
                    '5m': '5min',
                    '15m': '15min',
                    '30m': '30min',
                    '1h': '1hour',
                    '2h': '2hour',
                    '4h': '4hour',
                    '6h': '6hour',
                    '12h': '12hour',
                    '1d': '1day',
                    '1w': '1week',
                    '1M': '1month',
                },
                'spot': {
                    'timeframes': {
                        '1m': '1m',
                        '3m': '3m',
                        '5m': '5m',
                        '15m': '15m',
                        '30m': '30m',
                        '1h': '1h',
                        '2h': '2h',
                        '4h': '4h',
                        '6h': '6h',
                        '12h': '12h',
                        '1d': '1d',
                        '1w': '1w',
                        '1M': '1M',
                    },
                },
                'contract': {
                    'timeframes': {
                        '1m': '1',
                        '3m': '3',
                        '5m': '5',
                        '15m': '15',
                        '30m': '30',
                        '1h': '60',
                        '2h': '120',
                        '4h': '240',
                        '6h': '360',
                        '12h': '720',
                        '1d': 'D',
                        '1w': 'W',
                        '1M': 'M',
                    },
                },
            },
            'streaming': {
                'ping': this.ping,
                'keepAlive': 20000,
            },
            'exceptions': {
                'ws': {
                    'exact': {},
                },
            },
        });
    }
    requestId() {
        const requestId = this.sum(this.safeInteger(this.options, 'requestId', 0), 1);
        this.options['requestId'] = requestId;
        return requestId;
    }
    cleanParams(params) {
        params = this.omit(params, ['type', 'subType', 'settle', 'defaultSettle', 'unifiedMargin']);
        return params;
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://bingx-exchange.github.io/docs/v5/websocket/public/orderbook
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return.
         * @param {object} params extra parameters specific to the bingx api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.urls['api']['ws'];
        params = this.cleanParams(params);
        const messageHash = 'orderbook' + ':' + symbol;
        if (limit === undefined) {
            limit = 100;
        }
        else {
            if ((limit !== 5) && (limit !== 10) && (limit !== 20) && (limit !== 50) && (limit !== 100)) {
                throw new BadRequest(this.id + ' watchOrderBook() can only use limit 1, 50, 200 and 500.');
            }
        }
        const topics = ['market.depth.' + market['id'] + '.step0.level' + limit.toString()];
        const orderbook = await this.watchTopics(url, messageHash, topics, params, false);
        // return orderbook.limit ();
        return orderbook;
    }
    handleOrderBook(client, message) {
        const data = this.safeValue(message, 'data', {});
        const dataType = this.safeValue(message, 'dataType', '');
        const parts = dataType.split('.');
        const marketId = this.safeString(parts, 2);
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const latestTrade = this.safeValue(data, 'latestTrade', {});
        const timestamp = this.safeInteger(latestTrade, 'rawTs');
        // let orderbook = this.safeValue (this.orderbooks, symbol);
        // if (orderbook === undefined) {
        //     orderbook = this.orderBook ({}, 100);
        // }
        const orderbook = this.orderBook();
        const asks = this.safeValue(data, 'asks', []);
        const bids = this.safeValue(data, 'bids', []);
        this.handleDeltas(orderbook['asks'], asks);
        this.handleDeltas(orderbook['bids'], bids);
        orderbook['timestamp'] = timestamp;
        orderbook['datetime'] = this.iso8601(timestamp);
        const messageHash = 'orderbook' + ':' + symbol;
        this.orderbooks[symbol] = orderbook;
        client.resolve(orderbook, messageHash);
    }
    handleDelta(bookside, delta) {
        const bidAsk = this.parseBidAsk(delta, 'price', 'volume');
        bookside.storeArray(bidAsk);
    }
    handleDeltas(bookside, deltas) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(bookside, deltas[i]);
        }
    }
    handleOHLCV(client, message) {
        // {
        //     "code": 0,
        //     "dataType": "market.kline.1INCH-USDT.1hour.trade.utc+8",
        //     "data": {
        //     "klineInfosVo": [
        //         {
        //             "time": 1683982800000,
        //             "statDate": "2023-05-13T21:00:00.000+0800",
        //             "open": 0.4107,
        //             "close": 0.4089,
        //             "high": 0.4119,
        //             "low": 0.4077,
        //             "volume": 936484,
        //             "fairPrice": 0
        //         }
        //     ]
        // }
        // }
        const data = this.safeValue(message, 'data', {});
        const topic = this.safeString(message, 'dataType');
        const parts = topic.split('.');
        const marketId = this.safeString(parts, 2);
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const candles = this.safeValue(data, 'klineInfosVo', []);
        const wsTimeFrame = this.safeString(parts, 3);
        const wsTimeFrames = this.safeValue(this.options, 'wsTimeFrames', {});
        const timeframe = this.findTimeframe(wsTimeFrame, wsTimeFrames);
        if (timeframe !== undefined) {
            const messageHash = 'ohlcv' + ':' + wsTimeFrame + ':' + symbol;
            const ohlcvs = this.parseOHLCVs(candles, market);
            this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
            let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
            if (stored === undefined) {
                const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
                stored = new ArrayCacheByTimestamp(limit);
                this.ohlcvs[symbol][timeframe] = stored;
            }
            for (let i = 0; i < ohlcvs.length; i++) {
                const candle = ohlcvs[i];
                stored.append(candle);
            }
            client.resolve(stored, messageHash);
        }
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#watchTrades
         * @description watches information on multiple trades made in a market
         * @see https://bingx-exchange.github.io/docs/v5/websocket/public/trade
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bingx api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.urls['api']['ws'];
        params = this.cleanParams(params);
        const wsTimeframe = this.safeValue(this.options['wsTimeFrames'], timeframe, '1hour');
        const messageHash = 'ohlcv' + ':' + wsTimeframe + ':' + symbol;
        const topic = 'market.kline.' + market['id'] + '.' + wsTimeframe + '.trade.utc+8';
        const ohlcv = await this.watchTopics(url, messageHash, [topic], params);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#watchTrades
         * @description watches information on multiple trades made in a market
         * @see https://bingx-exchange.github.io/docs/v5/websocket/public/trade
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bingx api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.urls['api']['ws'];
        params = this.cleanParams(params);
        const messageHash = 'trade:' + symbol;
        const topic = 'market.trade.detail.' + market['id'];
        const trades = await this.watchTopics(url, messageHash, [topic], params, false);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        // since BingX always returns duplicate set of klines via ws, and we are not sending since from
        // ts client, emulate it
        let tradesSince = undefined;
        if (this.options['tradesSince'] !== undefined) {
            tradesSince = this.options['tradesSince'];
        }
        const newTrades = this.filterBySinceLimit(trades, tradesSince, limit, 'timestamp', true);
        this.options = this.extend(this.options, { 'tradesSince': this.milliseconds() - 0 });
        return newTrades;
    }
    handleTrades(client, message) {
        //
        //     {
        //         "topic": "publicTrade.BTCUSDT",
        //         "type": "snapshot",
        //         "ts": 1672304486868,
        //         "data": [
        //             {
        //                 "T": 1672304486865,
        //                 "s": "BTCUSDT",
        //                 "S": "Buy",
        //                 "v": "0.001",
        //                 "p": "16578.50",
        //                 "L": "PlusTick",
        //                 "i": "20f43950-d8dd-5b31-9112-a178eb6023af",
        //                 "BT": false
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(message, 'data', {});
        const topic = this.safeString(message, 'dataType');
        let trades = [];
        if (this.isArray(data.trades)) {
            trades = data.trades.reverse();
        }
        const parts = topic.split('.');
        const marketId = this.safeString(parts, 3);
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        let stored = this.safeValue(this.trades, symbol);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            stored = new ArrayCache(limit);
            this.trades[symbol] = stored;
        }
        for (let j = 0; j < trades.length; j++) {
            const parsed = this.parseWsTrade(trades[j], market);
            stored.append(parsed);
        }
        const messageHash = 'trade' + ':' + symbol;
        client.resolve(stored, messageHash);
    }
    parseWsTrade(trade, market = undefined) {
        //
        // public
        //    {
        // makerSide
        // "Ask"
        // price
        // "27563.5"
        // time
        // "03:06:43"
        // volume
        // "0.2312"
        //     }
        //
        const symbol = market['symbol'];
        const timestamp = this.safeInteger(trade, 'rawTs');
        const id = '' + timestamp;
        const m = this.safeValue(trade, 'makerSide');
        const side = m ? 'Bid' : 'Ask';
        const price = this.safeString(trade, 'price');
        const amount = this.safeFloat(trade, 'volume');
        return this.safeTrade({
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': undefined,
            'type': undefined,
            'side': side,
            'takerOrMaker': 'taker',
            'price': price,
            'amount': amount * market['contractSize'],
            'cost': undefined,
            'fee': undefined,
        }, market);
    }
    getPrivateType(url) {
        if (url.indexOf('spot') >= 0) {
            return 'spot';
        }
        else if (url.indexOf('v5/private') >= 0) {
            return 'unified';
        }
        else {
            return 'usdc';
        }
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#watchOrders
         * @description watches information on multiple orders made by the user
         * @see https://bingx-exchange.github.io/docs/v5/websocket/private/order
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bingx api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        let messageHash = 'orders';
        if (symbol !== undefined) {
            symbol = this.symbol(symbol);
            messageHash += ':' + symbol;
        }
        const url = this.urls['api']['ws'];
        await this.authenticate();
        const topicsByMarket = {
            'spot': ['order', 'stopOrder'],
            'unified': ['order'],
            'usdc': ['user.openapi.perp.order'],
        };
        const topics = this.safeValue(topicsByMarket, this.getPrivateType(url));
        const orders = await this.watchTopics(url, messageHash, topics, params);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    handleOrder(client, message, subscription = undefined) {
        //
        //     spot
        //     {
        //         "type": "snapshot",
        //         "topic": "order",
        //         "ts": "1662348310441",
        //         "data": [
        //             {
        //                 "e": "order",
        //                 "E": "1662348310441",
        //                 "s": "BTCUSDT",
        //                 "c": "spotx008",
        //                 "S": "BUY",
        //                 "o": "MARKET_OF_QUOTE",
        //                 "f": "GTC",
        //                 "q": "20",
        //                 "p": "0",
        //                 "X": "CANCELED",
        //                 "i": "1238261807653647872",
        //                 "M": "1238225004531834368",
        //                 "l": "0.001007",
        //                 "z": "0.001007",
        //                 "L": "19842.02",
        //                 "n": "0",
        //                 "N": "BTC",
        //                 "u": true,
        //                 "w": true,
        //                 "m": false,
        //                 "O": "1662348310368",
        //                 "Z": "19.98091414",
        //                 "A": "0",
        //                 "C": false,
        //                 "v": "0",
        //                 "d": "NO_LIQ",
        //                 "t": "2100000000002220938"
        //             }
        //         ]
        //     }
        // unified
        //     {
        //         "id": "5923240c6880ab-c59f-420b-9adb-3639adc9dd90",
        //         "topic": "order",
        //         "creationTime": 1672364262474,
        //         "data": [
        //             {
        //                 "symbol": "ETH-30DEC22-1400-C",
        //                 "orderId": "5cf98598-39a7-459e-97bf-76ca765ee020",
        //                 "side": "Sell",
        //                 "orderType": "Market",
        //                 "cancelType": "UNKNOWN",
        //                 "price": "72.5",
        //                 "qty": "1",
        //                 "orderIv": "",
        //                 "timeInForce": "IOC",
        //                 "orderStatus": "Filled",
        //                 "orderLinkId": "",
        //                 "lastPriceOnCreated": "",
        //                 "reduceOnly": false,
        //                 "leavesQty": "",
        //                 "leavesValue": "",
        //                 "cumExecQty": "1",
        //                 "cumExecValue": "75",
        //                 "avgPrice": "75",
        //                 "blockTradeId": "",
        //                 "positionIdx": 0,
        //                 "cumExecFee": "0.358635",
        //                 "createdTime": "1672364262444",
        //                 "updatedTime": "1672364262457",
        //                 "rejectReason": "EC_NoError",
        //                 "stopOrderType": "",
        //                 "triggerPrice": "",
        //                 "takeProfit": "",
        //                 "stopLoss": "",
        //                 "tpTriggerBy": "",
        //                 "slTriggerBy": "",
        //                 "triggerDirection": 0,
        //                 "triggerBy": "",
        //                 "closeOnTrigger": false,
        //                 "category": "option"
        //             }
        //         ]
        //     }
        //
        if (this.orders === undefined) {
            const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        const orders = this.orders;
        let rawOrders = [];
        let parser = undefined;
        parser = 'parseContractOrder';
        rawOrders = this.safeValue(message, 'data', []);
        rawOrders = this.safeValue(rawOrders, 'result', rawOrders);
        const symbols = {};
        for (let i = 0; i < rawOrders.length; i++) {
            const parsed = this[parser](rawOrders[i]);
            const symbol = parsed['symbol'];
            symbols[symbol] = true;
            orders.append(parsed);
        }
        const symbolsArray = Object.keys(symbols);
        for (let i = 0; i < symbolsArray.length; i++) {
            const messageHash = 'orders:' + symbolsArray[i];
            client.resolve(orders, messageHash);
        }
        const messageHash = 'orders';
        client.resolve(orders, messageHash);
    }
    async watchTopics(url, messageHash, topics = [], params = {}, shouldThrottle = true) {
        const request = {
            'id': '' + this.requestId(),
            'reqType': 'sub',
            'dataType': topics[0],
        };
        const message = this.extend(request, params);
        return await this.watch(url, messageHash, message, messageHash, shouldThrottle);
    }
    async authenticate(params = {}) {
        // this.checkRequiredCredentials ();
        // const messageHash = 'authenticated';
        // const url = this.urls['api']['ws'];
        // const client = this.client (url);
        // let future = this.safeValue (client.subscriptions, messageHash);
        // if (future === undefined) {
        //     const request = {
        //         'reqType': 'req',
        //         'id': this.uuid (),
        //         'dataType': 'account.user.auth',
        //         'data': {
        //             'token': this.apiKey + '.' + this.secret,
        //             'platformId': '30',
        //         },
        //     };
        //     const message = this.extend (request, params);
        //     future = this.watch (url, messageHash, message);
        //     client.subscriptions[messageHash] = future;
        // }
        // return future;
        const time = this.milliseconds();
        const lastAuthenticatedTime = this.safeInteger(this.options, 'lastAuthenticatedTime', 0);
        const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
        const delay = this.sum(listenKeyRefreshRate, 10000);
        if (time - lastAuthenticatedTime > delay) {
            const method = 'swap2OpenApiPrivatePostUserAuthUserDataStream';
            const response = await this[method](params);
            this.options = this.extend(this.options, {
                'listenKey': this.safeString(response, 'listenKey'),
                'lastAuthenticatedTime': time,
            });
            this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
        }
    }
    async keepAliveListenKey(params = {}) {
        const listenKey = this.safeString(this.options, 'listenKey');
        if (listenKey === undefined) {
            // A network error happened: we can't renew a listen key that does not exist.
            return;
        }
        const method = 'swap2OpenApiPrivatePutUserAuthUserDataStream';
        const request = {
            'listenKey': listenKey,
        };
        const time = this.milliseconds();
        const sendParams = this.omit(params, 'type');
        try {
            await this[method](this.extend(request, sendParams));
        }
        catch (error) {
            const url = this.urls['api']['ws2'] + '?' + this.options['listenKey'];
            const client = this.client(url);
            const messageHashes = Object.keys(client.futures);
            for (let i = 0; i < messageHashes.length; i++) {
                const messageHash = messageHashes[i];
                client.reject(error, messageHash);
            }
            this.options = this.extend(this.options, {
                'listenKey': undefined,
                'lastAuthenticatedTime': 0,
            });
            return;
        }
        this.options = this.extend(this.options, {
            'listenKey': listenKey,
            'lastAuthenticatedTime': time,
        });
        // whether or not to schedule another listenKey keepAlive request
        const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
        return this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
    }
    handleErrorMessage(client, message) {
        //
        //   {
        //       success: false,
        //       ret_msg: 'error:invalid op',
        //       conn_id: '5e079fdd-9c7f-404d-9dbf-969d650838b5',
        //       request: { op: '', args: null }
        //   }
        //
        // auth error
        //
        //   {
        //       success: false,
        //       ret_msg: 'error:USVC1111',
        //       conn_id: 'e73770fb-a0dc-45bd-8028-140e20958090',
        //       request: {
        //         op: 'auth',
        //         args: [
        //           '9rFT6uR4uz9Imkw4Wx',
        //           '1653405853543',
        //           '542e71bd85597b4db0290f0ce2d13ed1fd4bb5df3188716c1e9cc69a879f7889'
        //         ]
        //   }
        //
        //   { code: '-10009', desc: 'Invalid period!' }
        //
        const code = this.safeInteger(message, 'code');
        try {
            if (code !== 0) {
                const feedback = this.id + ' ' + this.json(message);
                throw new ExchangeError(feedback);
            }
            const success = this.safeValue(message, 'success');
            if (success !== undefined && !success) {
                const ret_msg = this.safeString(message, 'ret_msg');
                const request = this.safeValue(message, 'request', {});
                const op = this.safeString(request, 'op');
                if (op === 'auth') {
                    throw new AuthenticationError('Authentication failed: ' + ret_msg);
                }
                else {
                    throw new ExchangeError(this.id + ' ' + ret_msg);
                }
            }
            return false;
        }
        catch (error) {
            if (error instanceof AuthenticationError) {
                const messageHash = 'authenticated';
                client.reject(error, messageHash);
                if (messageHash in client.subscriptions) {
                    delete client.subscriptions[messageHash];
                }
            }
            else {
                client.reject(error);
            }
            return true;
        }
    }
    handleMessage(client, message) {
        // pong
        if (message === 'Ping' || this.safeString(message, 'ping', '') !== '') {
            return this.sendPong(client, message);
        }
        if (message === 'Pong' || this.safeString(message, 'pong', '') !== '') {
            return this.handlePong(client, message);
        }
        if (this.handleErrorMessage(client, message)) {
            return;
        }
        // const event = this.safeString (message, 'event');
        // if (event === 'sub') {
        //     this.handleSubscriptionStatus (client, message);
        //     return;
        // }
        const topic = this.safeString(message, 'dataType', '');
        const methods = {
            // 'market.depth.': this.handleOrderBook,
            // 'order': this.handleOrder,
            // 'stopOrder': this.handleOrder,
            // 'trade': this.handleTrades,
            // 'publicTrade': this.handleTrades,
            'market.depth.': this.handleOrderBook,
            'market.trade.detail.': this.handleTrades,
            'market.contracts': this.handleTicker,
            'market.kline': this.handleOHLCV,
            // 'wallet': this.handleBalance,
            // 'outboundAccountInfo': this.handleBalance,
            // 'execution': this.handleMyTrades,
            // 'ticketInfo': this.handleMyTrades,
            // 'user.openapi.perp.trade': this.handleMyTrades,
        };
        const keys = Object.keys(methods);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (topic.indexOf(keys[i]) >= 0) {
                const method = methods[key];
                method.call(this, client, message);
                return;
            }
        }
        // unified auth acknowledgement
        // const type = this.safeString (message, 'type');
        // if ((op === 'auth') || (type === 'AUTH_RESP')) {
        //     this.handleAuthenticate (client, message);
        // }
    }
    ping(client) {
        this.client(this.urls['api']['ws']).send('Ping');
        return {
            'ping': this.uuid(),
            'time': this.iso8601(this.milliseconds()),
        }; // XD
    }
    sendPong(client, message) {
        this.client(this.urls['api']['ws']).send('Pong');
        this.client(this.urls['api']['ws']).send(this.json({
            'ping': this.uuid(),
            'time': this.iso8601(this.milliseconds()),
        }));
    }
    handleAuthenticate(client, message) {
        //
        //    {
        //        success: true,
        //        ret_msg: '',
        //        op: 'auth',
        //        conn_id: 'ce3dpomvha7dha97tvp0-2xh'
        //    }
        //
        const success = this.safeValue(message, 'success');
        const messageHash = 'authenticated';
        if (success) {
            client.resolve(message, messageHash);
        }
        else {
            const error = new AuthenticationError(this.id + ' ' + this.json(message));
            client.reject(error, messageHash);
            if (messageHash in client.subscriptions) {
                delete client.subscriptions[messageHash];
            }
        }
        return message;
    }
    handleSubscriptionStatus(client, message) {
        //
        //    {
        //        topic: 'kline',
        //        event: 'sub',
        //        params: {
        //          symbol: 'LTCUSDT',
        //          binary: 'false',
        //          klineType: '1m',
        //          symbolName: 'LTCUSDT'
        //        },
        //        code: '0',
        //        msg: 'Success'
        //    }
        //
        return message;
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name bybit#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/ticker
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/etp-ticker
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const messageHash = 'ticker:' + market['symbol'];
        const url = this.urls['api']['ws'];
        params = this.cleanParams(params);
        const topics = ['market.contracts'];
        return await this.watchTopics(url, messageHash, topics, params);
    }
    handleTicker(client, message) {
        const data = this.safeValue(message, 'data', {});
        const contracts = this.safeValue(data, 'contracts', []);
        for (let i = 0; i < contracts.length; i++) {
            let symbol = undefined;
            let parsed = undefined;
            parsed = this.parseTicker(contracts[i]);
            symbol = parsed['symbol'];
            const timestamp = this.milliseconds() - 0;
            parsed['timestamp'] = timestamp;
            parsed['datetime'] = this.iso8601(timestamp);
            this.tickers[symbol] = parsed;
            const messageHash = 'ticker:' + symbol;
            client.resolve(this.tickers[symbol], messageHash);
        }
    }
    parseTicker(ticker, market = undefined) {
        const timestamp = this.milliseconds() - 0;
        const marketId = this.safeString(ticker, 'symbol');
        market = this.safeMarket(marketId);
        const symbol = this.safeSymbol(marketId);
        const last = this.safeString(ticker, 'tradePrice');
        const mark = this.safeString(ticker, 'fairPrice');
        const open = this.safeString(ticker, 'open');
        const percentage = this.safeString(ticker, 'changePercentage');
        // const quoteVolume = this.safeString (ticker, 'volume2');
        // const baseVolume = this.safeString (ticker, 'volume');
        const bid = this.safeString(ticker, 'tradePrice');
        const ask = this.safeString(ticker, 'tradePrice');
        const high = this.safeString(ticker, 'high');
        const low = this.safeString(ticker, 'low');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': bid,
            'bidVolume': this.safeString2(ticker, 'bidSize', 'bid1Size'),
            'ask': ask,
            'askVolume': this.safeString2(ticker, 'askSize', 'ask1Size'),
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'mark': mark,
            'previousClose': undefined,
            'change': undefined,
            'percentage': percentage,
            'average': undefined,
            'baseVolume': '0',
            'quoteVolume': '0',
            'info': ticker,
        }, market);
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bitget extends bitget$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': true,
                'watchMyTrades': true,
                'watchOHLCV': true,
                'watchOrderBook': true,
                'watchOrders': true,
                'watchTicker': true,
                'watchTickers': false,
                'watchTrades': true,
            },
            'urls': {
                'api': {
                    'ws': 'wss://ws.bitget.com/mix/v1/stream',
                },
            },
            'options': {
                'tradesLimit': 1000,
                'OHLCVLimit': 1000,
                // WS timeframes differ from REST timeframes
                'timeframes': {
                    '1m': '1m',
                    '5m': '5m',
                    '15m': '15m',
                    '30m': '30m',
                    '1h': '1H',
                    '4h': '4H',
                    '12h': '12H',
                    '1d': '1D',
                    '1w': '1W',
                },
            },
            'streaming': {
                'ping': this.ping,
            },
            'exceptions': {
                'ws': {
                    'exact': {
                        '30001': BadRequest,
                        '30015': AuthenticationError, // { event: 'error', code: 30015, msg: 'Invalid sign' }
                    },
                },
            },
        });
    }
    getWsMarketId(market) {
        // WS don't use the same 'id'
        // as the rest version
        if (market['spot']) {
            return market['info']['symbolName'];
        }
        else {
            let formattedId = market['id'];
            const marketIdParts = formattedId.split('_');
            if (marketIdParts.length >= 2) {
                const prefix = marketIdParts[0];
                // const suffix = marketIdParts[1];
                formattedId = prefix;
            }
            return formattedId;
        }
    }
    getMarketIdFromArg(arg) {
        //
        // { arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' }
        //
        const instType = this.safeString(arg, 'instType');
        let marketId = this.safeString(arg, 'instId');
        if (instType === 'sp') {
            marketId += '_SPBL';
        }
        else if (marketId[0] === 'S' && marketId.length > 6 && marketId.slice(-5) === 'SPERP') {
            marketId = marketId + '_SCMCBL';
        }
        else if (marketId[0] === 'S' && marketId.length > 6 && marketId.slice(-5) === 'SUSDT') {
            marketId = marketId + '_SUMCBL';
        }
        else if (marketId[0] === 'S' && marketId.length > 6 && marketId.slice(-4) === 'SUSD') {
            marketId = marketId + '_SDMCBL';
        }
        else if (marketId.slice(-4) === 'PERP') {
            marketId = marketId + '_CMCBL';
        }
        else if (marketId.slice(-4) === 'USDT') {
            marketId = marketId + '_UMCBL';
        }
        else if (marketId.slice(-3) === 'USD') {
            marketId = marketId + '_DMCBL';
        }
        return marketId;
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name bitget#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {str} symbol unified symbol of the market to fetch the ticker for
         * @param {dict} params extra parameters specific to the bitget api endpoint
         * @returns {dict} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const messageHash = 'ticker:' + symbol;
        const instType = market['spot'] ? 'sp' : 'mc';
        const args = {
            'instType': instType,
            'channel': 'ticker',
            'instId': this.getWsMarketId(market),
        };
        return await this.watchPublic(messageHash, args, params);
    }
    handleTicker(client, message) {
        //
        //   {
        //       action: 'snapshot',
        //       arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' },
        //       data: [
        //         {
        //           instId: 'BTCUSDT',
        //           last: '21150.53',
        //           open24h: '20759.65',
        //           high24h: '21202.29',
        //           low24h: '20518.82',
        //           bestBid: '21150.500000',
        //           bestAsk: '21150.600000',
        //           baseVolume: '25402.1961',
        //           quoteVolume: '530452554.2156',
        //           ts: 1656408934044,
        //           labeId: 0
        //         }
        //       ]
        //   }
        //
        const ticker = this.parseWsTicker(message);
        const symbol = ticker['symbol'];
        this.tickers[symbol] = ticker;
        const messageHash = 'ticker:' + symbol;
        client.resolve(ticker, messageHash);
        return message;
    }
    parseWsTicker(message, market = undefined) {
        //
        // spot
        //     {
        //         action: 'snapshot',
        //         arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' },
        //         data: [
        //           {
        //             instId: 'BTCUSDT',
        //             last: '21150.53',
        //             open24h: '20759.65',
        //             high24h: '21202.29',
        //             low24h: '20518.82',
        //             bestBid: '21150.500000',
        //             bestAsk: '21150.600000',
        //             baseVolume: '25402.1961',
        //             quoteVolume: '530452554.2156',
        //             ts: 1656408934044,
        //             labeId: 0
        //           }
        //         ]
        //     }
        //
        // contract
        //
        //     {
        //         "action":"snapshot",
        //         "arg":{
        //            "instType":"mc",
        //            "channel":"ticker",
        //            "instId":"LTCUSDT"
        //         },
        //         "data":[
        //            {
        //               "instId":"LTCUSDT",
        //               "last":"52.77",
        //               "bestAsk":"52.78",
        //               "bestBid":"52.75",
        //               "high24h":"54.83",
        //               "low24h":"51.32",
        //               "priceChangePercent":"-0.02",
        //               "capitalRate":"-0.000100",
        //               "nextSettleTime":1656514800000,
        //               "systemTime":1656513146169,
        //               "markPrice":"52.77",
        //               "indexPrice":"52.80",
        //               "holding":"269813.9",
        //               "baseVolume":"75422.0",
        //               "quoteVolume":"3986579.8"
        //            }
        //         ]
        //     }
        //
        const arg = this.safeValue(message, 'arg', {});
        const data = this.safeValue(message, 'data', []);
        const ticker = this.safeValue(data, 0, {});
        const timestamp = this.safeInteger2(ticker, 'ts', 'systemTime');
        const marketId = this.getMarketIdFromArg(arg);
        market = this.safeMarket(marketId, market);
        const close = this.safeString(ticker, 'last');
        const mark = this.safeString(ticker, 'markPrice');
        const open = this.safeString(ticker, 'open24h');
        const high = this.safeString(ticker, 'high24h');
        const low = this.safeString(ticker, 'low24h');
        const baseVolume = this.safeString(ticker, 'baseVolume');
        const quoteVolume = this.safeString(ticker, 'quoteVolume');
        const bid = this.safeString(ticker, 'bestBid');
        const ask = this.safeString(ticker, 'bestAsk');
        return this.safeTicker({
            'symbol': market['symbol'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': bid,
            'bidVolume': undefined,
            'ask': ask,
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': close,
            'last': close,
            'mark': mark,
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#watchOHLCV
         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {str} symbol unified symbol of the market to fetch OHLCV data for
         * @param {str} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {dict} params extra parameters specific to the bitget api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const timeframes = this.safeValue(this.options, 'timeframes');
        const interval = this.safeString(timeframes, timeframe);
        const messageHash = 'candles:' + timeframe + ':' + symbol;
        const instType = market['spot'] ? 'sp' : 'mc';
        const args = {
            'instType': instType,
            'channel': 'candle' + interval,
            'instId': this.getWsMarketId(market),
        };
        const ohlcv = await this.watchPublic(messageHash, args, params);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        //
        //   {
        //       "action":"snapshot",
        //       "arg":{
        //          "instType":"sp",
        //          "channel":"candle1W",
        //          "instId":"BTCUSDT"
        //       },
        //       "data":[
        //          [
        //             "1595779200000",
        //             "9960.05",
        //             "12099.95",
        //             "9839.7",
        //             "11088.68",
        //             "462484.9738"
        //          ],
        //          [
        //             "1596384000000",
        //             "11088.68",
        //             "11909.89",
        //             "10937.54",
        //             "11571.88",
        //             "547596.6484"
        //          ]
        //       ]
        //   }
        //
        const arg = this.safeValue(message, 'arg', {});
        const marketId = this.getMarketIdFromArg(arg);
        const channel = this.safeString(arg, 'channel');
        const interval = channel.replace('candle', '');
        const timeframes = this.safeValue(this.options, 'timeframes');
        const timeframe = this.findTimeframe(interval, timeframes);
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
        let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
            stored = new ArrayCacheByTimestamp(limit);
            this.ohlcvs[symbol][timeframe] = stored;
        }
        const data = this.safeValue(message, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const parsed = this.parseWsOHLCV(data[i]);
            stored.append(parsed);
        }
        const messageHash = 'candles:' + timeframe + ':' + symbol;
        client.resolve(stored, messageHash);
    }
    parseWsOHLCV(ohlcv, market = undefined) {
        //
        //   [
        //      "1595779200000", // timestamp
        //      "9960.05", // open
        //      "12099.95", // high
        //      "9839.7", // low
        //      "11088.68", // close
        //      "462484.9738" // volume
        //   ]
        //
        return [
            this.safeInteger(ohlcv, 0),
            this.safeNumber(ohlcv, 1),
            this.safeNumber(ohlcv, 2),
            this.safeNumber(ohlcv, 3),
            this.safeNumber(ohlcv, 4),
        ];
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {str} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {dict} params extra parameters specific to the bitget api endpoint
         * @returns {dict} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        // symbol = 'BTCUSD';
        const messageHash = 'orderbook' + ':' + symbol;
        const instType = market['spot'] ? 'sp' : 'mc';
        let channel = 'books';
        let incrementalFeed = true;
        if ((limit === 5) || (limit === 15)) {
            channel += limit.toString();
            incrementalFeed = false;
        }
        const args = {
            'instType': instType,
            'channel': channel,
            'instId': this.getWsMarketId(market),
        };
        const orderbook = await this.watchPublic(messageHash, args, params, false);
        if (incrementalFeed) {
            return orderbook.limit();
        }
        else {
            return orderbook;
        }
    }
    handleOrderBook(client, message) {
        //
        //   {
        //       "action":"snapshot",
        //       "arg":{
        //          "instType":"sp",
        //          "channel":"books5",
        //          "instId":"BTCUSDT"
        //       },
        //       "data":[
        //          {
        //             "asks":[
        //                ["21041.11","0.0445"],
        //                ["21041.16","0.0411"],
        //                ["21041.21","0.0421"],
        //                ["21041.26","0.0811"],
        //                ["21041.65","1.9465"]
        //             ],
        //             "bids":[
        //                ["21040.76","0.0417"],
        //                ["21040.71","0.0434"],
        //                ["21040.66","0.1141"],
        //                ["21040.61","0.3004"],
        //                ["21040.60","1.3357"]
        //             ],
        //             "ts":"1656413855484"
        //          }
        //       ]
        //   }
        //
        const arg = this.safeValue(message, 'arg');
        const channel = this.safeString(arg, 'channel');
        const marketId = this.getMarketIdFromArg(arg);
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const messageHash = 'orderbook:' + symbol;
        const data = this.safeValue(message, 'data');
        const rawOrderBook = this.safeValue(data, 0);
        const timestamp = this.safeInteger(rawOrderBook, 'ts');
        const incrementalBook = channel === 'books';
        let storedOrderBook = undefined;
        if (incrementalBook) {
            storedOrderBook = this.safeValue(this.orderbooks, symbol);
            if (storedOrderBook === undefined) {
                storedOrderBook = this.countedOrderBook({});
            }
            const asks = this.safeValue(rawOrderBook, 'asks', []);
            const bids = this.safeValue(rawOrderBook, 'bids', []);
            this.handleDeltas(storedOrderBook['asks'], asks);
            this.handleDeltas(storedOrderBook['bids'], bids);
            storedOrderBook['timestamp'] = timestamp;
            storedOrderBook['datetime'] = this.iso8601(timestamp);
            const checksum = this.safeValue(this.options, 'checksum', true);
            if (checksum) {
                const storedAsks = storedOrderBook['asks'];
                const storedBids = storedOrderBook['bids'];
                const asksLength = storedAsks.length;
                const bidsLength = storedBids.length;
                const payloadArray = [];
                for (let i = 0; i < 25; i++) {
                    if (i < bidsLength) {
                        payloadArray.push(storedBids[i][2][0]);
                        payloadArray.push(storedBids[i][2][1]);
                    }
                    if (i < asksLength) {
                        payloadArray.push(storedAsks[i][2][0]);
                        payloadArray.push(storedAsks[i][2][1]);
                    }
                }
                const payload = payloadArray.join(':');
                const calculatedChecksum = this.crc32(payload, true);
                const responseChecksum = this.safeInteger(rawOrderBook, 'checksum');
                if (calculatedChecksum !== responseChecksum) {
                    const error = new InvalidNonce(this.id + ' invalid checksum');
                    client.reject(error, messageHash);
                }
            }
        }
        else {
            storedOrderBook = this.parseOrderBook(rawOrderBook, symbol, timestamp);
        }
        this.orderbooks[symbol] = storedOrderBook;
        client.resolve(storedOrderBook, messageHash);
    }
    handleDelta(bookside, delta) {
        const bidAsk = this.parseBidAsk(delta, 0, 1);
        // we store the string representations in the orderbook for checksum calculation
        // this simplifies the code for generating checksums as we do not need to do any complex number transformations
        bidAsk.push(delta);
        bookside.storeArray(bidAsk);
    }
    handleDeltas(bookside, deltas) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(bookside, deltas[i]);
        }
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#watchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {str} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {dict} params extra parameters specific to the bitget api endpoint
         * @returns {[dict]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const messageHash = 'trade:' + symbol;
        const instType = market['spot'] ? 'sp' : 'mc';
        const args = {
            'instType': instType,
            'channel': 'trade',
            'instId': this.getWsMarketId(market),
        };
        const trades = await this.watchPublic(messageHash, args, params, false);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    handleTrades(client, message) {
        //
        //    {
        //        action: 'snapshot',
        //        arg: { instType: 'sp', channel: 'trade', instId: 'BTCUSDT' },
        //        data: [
        //          [ '1656411148032', '21047.78', '2.2294', 'buy' ],
        //          [ '1656411142030', '21047.85', '2.1225', 'buy' ],
        //          [ '1656411133064', '21045.88', '1.7704', 'sell' ],
        //          [ '1656411126037', '21052.39', '2.6905', 'buy' ],
        //          [ '1656411118029', '21056.87', '1.2308', 'sell' ],
        //          [ '1656411108028', '21060.01', '1.7186', 'sell' ],
        //          [ '1656411100027', '21060.4', '1.3641', 'buy' ],
        //          [ '1656411093030', '21058.76', '1.5049', 'sell' ]
        //        ]
        //    }
        //
        const arg = this.safeValue(message, 'arg', {});
        const marketId = this.getMarketIdFromArg(arg);
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        let stored = this.safeValue(this.trades, symbol);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            stored = new ArrayCache(limit);
            this.trades[symbol] = stored;
        }
        const data = this.safeValue(message, 'data', []);
        for (let j = 0; j < data.length; j++) {
            const rawTrade = data[j];
            const parsed = this.parseWsTrade(rawTrade, market);
            stored.append(parsed);
        }
        const messageHash = 'trade:' + symbol;
        client.resolve(stored, messageHash);
    }
    parseWsTrade(trade, market = undefined) {
        //
        // public trade
        //
        //   [
        //       '1656411148032', // timestamp
        //       '21047.78', // price
        //       '2.2294', // size
        //       'buy', // side
        //   ]
        //
        market = this.safeMarket(undefined, market);
        const timestamp = this.safeInteger(trade, 0);
        const side = this.safeString(trade, 3);
        const price = this.safeString(trade, 1);
        const amount = this.safeString(trade, 2);
        return this.safeTrade({
            'info': trade,
            'id': this.uuid(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'takerOrMaker': undefined,
            'price': price,
            'amount': amount,
            'cost': undefined,
            'fee': undefined,
        }, market);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#watchOrders
         * @description watches information on multiple orders made by the user
         * @param {str} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {dict} params extra parameters specific to the bitget api endpoint
         * @returns {[dict]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure
         */
        await this.loadMarkets();
        let market = undefined;
        let marketId = undefined;
        let messageHash = 'order:';
        const subscriptionHash = 'order:trades';
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            marketId = market['id'];
            messageHash += market['symbol'];
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('watchOrders', market, params);
        if ((type === 'spot') && (symbol === undefined)) {
            throw new ArgumentsRequired(this.id + ' watchOrders requires a symbol argument for ' + type + ' markets.');
        }
        const instType = (type === 'spot') ? 'spbl' : 'umcbl';
        const instId = (type === 'spot') ? marketId : 'default'; // different from other streams here the 'rest' id is required for spot markets, contract markets require default here
        const args = {
            'instType': instType,
            'channel': 'orders',
            'instId': instId,
        };
        const orders = await this.watchPrivate(messageHash, subscriptionHash, args, params);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    handleOrder(client, message, subscription = undefined) {
        //
        //
        // spot order
        //    {
        //        action: 'snapshot',
        //        arg: { instType: 'spbl', channel: 'orders', instId: 'LTCUSDT_SPBL' // instId='default' for contracts },
        //        data: [
        //          {
        //            instId: 'LTCUSDT_SPBL',
        //            ordId: '925999649898545152',
        //            clOrdId: '8b2aa69a-6a09-46c0-a50d-7ed50277394c',
        //            px: '20.00',
        //            sz: '0.3000',
        //            notional: '6.000000',
        //            ordType: 'limit',
        //            force: 'normal',
        //            side: 'buy',
        //            accFillSz: '0.0000',
        //            avgPx: '0.00',
        //            status: 'new',
        //            cTime: 1656501441454,
        //            uTime: 1656501441454,
        //            orderFee: []
        //          }
        //        ]
        //    }
        //
        const arg = this.safeValue(message, 'arg', {});
        const instType = this.safeString(arg, 'instType');
        const isContractUpdate = instType === 'umcbl';
        const data = this.safeValue(message, 'data', []);
        if (this.orders === undefined) {
            const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        const stored = this.orders;
        const marketSymbols = {};
        for (let i = 0; i < data.length; i++) {
            const order = data[i];
            const execType = this.safeString(order, 'execType');
            if ((execType === 'T') && isContractUpdate) {
                // partial order updates have the trade info inside
                this.handleMyTrades(client, order);
            }
            const parsed = this.parseWsOrder(order);
            stored.append(parsed);
            const symbol = parsed['symbol'];
            marketSymbols[symbol] = true;
        }
        const keys = Object.keys(marketSymbols);
        for (let i = 0; i < keys.length; i++) {
            const symbol = keys[i];
            const messageHash = 'order:' + symbol;
            client.resolve(stored, messageHash);
        }
    }
    parseWsOrder(order, market = undefined) {
        //
        // spot order
        //     {
        //         instId: 'LTCUSDT_SPBL',
        //         ordId: '925999649898545152',
        //         clOrdId: '8b2aa69a-6a09-46c0-a50d-7ed50277394c',
        //         px: '20.00',
        //         sz: '0.3000',
        //         notional: '6.000000',
        //         ordType: 'limit',
        //         force: 'normal',
        //         side: 'buy',
        //         accFillSz: '0.0000',
        //         avgPx: '0.00',
        //         status: 'new',
        //         cTime: 1656501441454,
        //         uTime: 1656501441454,
        //         orderFee: []
        //     }
        // partial fill
        //
        //    {
        //        instId: 'LTCUSDT_SPBL',
        //        ordId: '926006174213914625',
        //        clOrdId: '7ce28714-0016-46d0-a971-9a713a9923c5',
        //        notional: '5.000000',
        //        ordType: 'market',
        //        force: 'normal',
        //        side: 'buy',
        //        fillPx: '52.11',
        //        tradeId: '926006174514073601',
        //        fillSz: '0.0959',
        //        fillTime: '1656502997043',
        //        fillFee: '-0.0000959',
        //        fillFeeCcy: 'LTC',
        //        execType: 'T',
        //        accFillSz: '0.0959',
        //        avgPx: '52.11',
        //        status: 'partial-fill',
        //        cTime: 1656502996972,
        //        uTime: 1656502997119,
        //        orderFee: [Array]
        //    }
        //
        // contract order
        //    {
        //        accFillSz: '0',
        //        cTime: 1656510642518,
        //        clOrdId: '926038241960431617',
        //        force: 'normal',
        //        instId: 'LTCUSDT_UMCBL',
        //        lever: '20',
        //        notionalUsd: '7.5',
        //        ordId: '926038241859768320',
        //        ordType: 'limit',
        //        orderFee: [
        //             {feeCcy: 'USDT', fee: '0'}
        //        ]
        //        posSide: 'long',
        //        px: '25',
        //        side: 'buy',
        //        status: 'new',
        //        sz: '0.3',
        //        tdMode: 'cross',
        //        tgtCcy: 'USDT',
        //        uTime: 1656510642518
        //    }
        //
        const marketId = this.safeString(order, 'instId');
        market = this.safeMarket(marketId, market);
        const id = this.safeString(order, 'ordId');
        const clientOrderId = this.safeString(order, 'clOrdId');
        const price = this.safeString(order, 'px');
        const filled = this.safeString(order, 'fillSz');
        const amount = this.safeString(order, 'sz');
        const cost = this.safeString2(order, 'notional', 'notionalUsd');
        const average = this.omitZero(this.safeString(order, 'avgPx'));
        const type = this.safeString(order, 'ordType');
        const timestamp = this.safeInteger(order, 'cTime');
        const symbol = market['symbol'];
        let side = this.safeString2(order, 'side', 'posSide');
        if ((side === 'open_long') || (side === 'close_short')) {
            side = 'buy';
        }
        else if ((side === 'close_long') || (side === 'open_short')) {
            side = 'sell';
        }
        const rawStatus = this.safeString(order, 'status', 'state');
        const timeInForce = this.safeString(order, 'force');
        const status = this.parseWsOrderStatus(rawStatus);
        const orderFee = this.safeValue(order, 'orderFee', []);
        const fee = this.safeValue(orderFee, 0);
        const feeAmount = this.safeString(fee, 'fee');
        let feeObject = undefined;
        if (feeAmount !== undefined) {
            const feeCurrency = this.safeString(fee, 'feeCcy');
            feeObject = {
                'cost': Precise.stringAbs(feeAmount),
                'currency': this.safeCurrencyCode(feeCurrency),
            };
        }
        return this.safeOrder({
            'info': order,
            'symbol': symbol,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': undefined,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': undefined,
            'side': side,
            'price': price,
            'stopPrice': undefined,
            'amount': amount,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': feeObject,
            'trades': undefined,
        }, market);
    }
    parseWsOrderStatus(status) {
        const statuses = {
            'new': 'open',
            'partial-fill': 'open',
            'full-fill': 'closed',
            'filled': 'closed',
            'cancelled': 'canceled',
        };
        return this.safeString(statuses, status, status);
    }
    async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitget#watchMyTrades
         * @description watches trades made by the user
         * @param {str|undefined} symbol unified market symbol
         * @param {int|undefined} since the earliest time in ms to fetch trades for
         * @param {int|undefined} limit the maximum number of trades structures to retrieve
         * @param {dict} params extra parameters specific to the bitget api endpoint
         * @returns {[dict]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
         */
        // only contracts stream provides the trade info consistently in between order updates
        // the spot stream only provides on limit orders updates so we can't support it for spot
        await this.loadMarkets();
        let market = undefined;
        let messageHash = 'myTrades';
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            messageHash = messageHash + ':' + symbol;
        }
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('watchMyTrades', market, params);
        if (type === 'spot') {
            throw new NotSupported(this.id + ' watchMyTrades is not supported for ' + type + ' markets.');
        }
        const subscriptionHash = 'order:trades';
        const args = {
            'instType': 'umcbl',
            'channel': 'orders',
            'instId': 'default',
        };
        const trades = await this.watchPrivate(messageHash, subscriptionHash, args, params);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }
    handleMyTrades(client, message) {
        //
        // order and trade mixin (contract)
        //
        //   {
        //       accFillSz: '0.1',
        //       avgPx: '52.81',
        //       cTime: 1656511777208,
        //       clOrdId: '926043001195237376',
        //       execType: 'T',
        //       fillFee: '-0.0031686',
        //       fillFeeCcy: 'USDT',
        //       fillNotionalUsd: '5.281',
        //       fillPx: '52.81',
        //       fillSz: '0.1',
        //       fillTime: '1656511777266',
        //       force: 'normal',
        //       instId: 'LTCUSDT_UMCBL',
        //       lever: '1',
        //       notionalUsd: '5.281',
        //       ordId: '926043001132322816',
        //       ordType: 'market',
        //       orderFee: [Array],
        //       pnl: '0.004',
        //       posSide: 'long',
        //       px: '0',
        //       side: 'sell',
        //       status: 'full-fill',
        //       sz: '0.1',
        //       tdMode: 'cross',
        //       tgtCcy: 'USDT',
        //       tradeId: '926043001438552105',
        //       uTime: 1656511777266
        //   }
        //
        if (this.myTrades === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            this.myTrades = new ArrayCache(limit);
        }
        const stored = this.myTrades;
        const parsed = this.parseWsMyTrade(message);
        stored.append(parsed);
        const symbol = parsed['symbol'];
        const messageHash = 'myTrades';
        client.resolve(stored, messageHash);
        const symbolSpecificMessageHash = 'myTrades:' + symbol;
        client.resolve(stored, symbolSpecificMessageHash);
    }
    parseWsMyTrade(trade, market = undefined) {
        //
        // order and trade mixin (contract)
        //
        //   {
        //       accFillSz: '0.1',
        //       avgPx: '52.81',
        //       cTime: 1656511777208,
        //       clOrdId: '926043001195237376',
        //       execType: 'T',
        //       fillFee: '-0.0031686',
        //       fillFeeCcy: 'USDT',
        //       fillNotionalUsd: '5.281',
        //       fillPx: '52.81',
        //       fillSz: '0.1',
        //       fillTime: '1656511777266',
        //       force: 'normal',
        //       instId: 'LTCUSDT_UMCBL',
        //       lever: '1',
        //       notionalUsd: '5.281',
        //       ordId: '926043001132322816',
        //       ordType: 'market',
        //       orderFee: [Array],
        //       pnl: '0.004',
        //       posSide: 'long',
        //       px: '0',
        //       side: 'sell',
        //       status: 'full-fill',
        //       sz: '0.1',
        //       tdMode: 'cross',
        //       tgtCcy: 'USDT',
        //       tradeId: '926043001438552105',
        //       uTime: 1656511777266
        //   }
        //
        const id = this.safeString(trade, 'tradeId');
        const orderId = this.safeString(trade, 'ordId');
        const marketId = this.safeString(trade, 'instId');
        market = this.safeMarket(marketId, market);
        const timestamp = this.safeInteger(trade, 'fillTime');
        const side = this.safeString(trade, 'side');
        const price = this.safeString(trade, 'fillPx');
        const amount = this.safeString(trade, 'fillSz');
        const type = this.safeString(trade, 'ordType');
        const cost = this.safeString(trade, 'notional');
        const feeCurrency = this.safeString(trade, 'fillFeeCcy');
        const feeAmount = Precise.stringAbs(this.safeString(trade, 'fillFee'));
        const fee = {
            'code': this.safeCurrencyCode(feeCurrency),
            'cost': feeAmount,
        };
        return this.safeTrade({
            'info': trade,
            'id': id,
            'order': orderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': type,
            'side': side,
            'takerOrMaker': undefined,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        }, market);
    }
    async watchBalance(params = {}) {
        /**
         * @method
         * @name bitget#watchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} params extra parameters specific to the bitget api endpoint
         * @param {str|undefined} params.type spot or contract if not provided this.options['defaultType'] is used
         * @returns {dict} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('watchOrders', undefined, params);
        const instType = (type === 'spot') ? 'spbl' : 'umcbl';
        const args = {
            'instType': instType,
            'channel': 'account',
            'instId': 'default',
        };
        const messageHash = 'balance:' + instType;
        return await this.watchPrivate(messageHash, messageHash, args, params);
    }
    handleBalance(client, message) {
        //
        //    {
        //        action: 'snapshot',
        //        arg: { instType: 'spbl', channel: 'account', instId: 'default' },
        //        data: [
        //          { coinId: '5', coinName: 'LTC', available: '0.1060938000000000' },
        //          { coinId: '2', coinName: 'USDT', available: '13.4498240000000000' }
        //        ]
        //    }
        //
        const data = this.safeValue(message, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const rawBalance = data[i];
            const currencyId = this.safeString(rawBalance, 'coinName');
            const code = this.safeCurrencyCode(currencyId);
            const account = (code in this.balance) ? this.balance[code] : this.account();
            account['free'] = this.safeString(rawBalance, 'available');
            this.balance[code] = account;
        }
        this.balance = this.safeBalance(this.balance);
        const arg = this.safeValue(message, 'arg');
        const instType = this.safeStringLower(arg, 'instType');
        const messageHash = 'balance:' + instType;
        client.resolve(this.balance, messageHash);
    }
    async watchPublic(messageHash, args, params = {}, shouldThrottle = true) {
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [args],
        };
        const message = this.extend(request, params);
        return await this.watch(url, messageHash, message, messageHash, shouldThrottle);
    }
    async authenticate(params = {}) {
        this.checkRequiredCredentials();
        const url = this.urls['api']['ws'];
        const client = this.client(url);
        const future = client.future('authenticated');
        const messageHash = 'login';
        const authenticated = this.safeValue(client.subscriptions, messageHash);
        if (authenticated === undefined) {
            const timestamp = this.seconds().toString();
            const auth = timestamp + 'GET' + '/user/verify';
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
            const request = {
                'op': messageHash,
                'args': [
                    {
                        'apiKey': this.apiKey,
                        'passphrase': this.password,
                        'timestamp': timestamp,
                        'sign': signature,
                    },
                ],
            };
            this.spawn(this.watch, url, messageHash, this.extend(request, params), messageHash);
        }
        return await future;
    }
    async watchPrivate(messageHash, subscriptionHash, args, params = {}) {
        await this.authenticate();
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [args],
        };
        const message = this.extend(request, params);
        return await this.watch(url, messageHash, message, subscriptionHash);
    }
    handleAuthenticate(client, message) {
        //
        //  { event: 'login', code: 0 }
        //
        const future = client.futures['authenticated'];
        future.resolve(1);
        client.resolve(1, 'login');
        return message;
    }
    handleErrorMessage(client, message) {
        //
        //    { event: 'error', code: 30015, msg: 'Invalid sign' }
        //
        const event = this.safeString(message, 'event');
        try {
            if (event === 'error') {
                const code = this.safeString(message, 'code');
                const feedback = this.id + ' ' + this.json(message);
                this.throwExactlyMatchedException(this.exceptions['ws']['exact'], code, feedback);
            }
        }
        catch (e) {
            if (e instanceof AuthenticationError) {
                return false;
            }
        }
        return message;
    }
    handleMessage(client, message) {
        //
        //   {
        //       action: 'snapshot',
        //       arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' },
        //       data: [
        //         {
        //           instId: 'BTCUSDT',
        //           last: '21150.53',
        //           open24h: '20759.65',
        //           high24h: '21202.29',
        //           low24h: '20518.82',
        //           bestBid: '21150.500000',
        //           bestAsk: '21150.600000',
        //           baseVolume: '25402.1961',
        //           quoteVolume: '530452554.2156',
        //           ts: 1656408934044,
        //           labeId: 0
        //         }
        //       ]
        //   }
        // pong message
        //    'pong'
        //
        // login
        //
        //     { event: 'login', code: 0 }
        //
        // subscribe
        //
        //    {
        //        event: 'subscribe',
        //        arg: { instType: 'spbl', channel: 'account', instId: 'default' }
        //    }
        //
        if (!this.handleErrorMessage(client, message)) {
            return;
        }
        const content = this.safeString(message, 'message');
        if (content === 'pong') {
            this.handlePong(client, message);
            return;
        }
        if (message === 'pong') {
            this.handlePong(client, message);
            return;
        }
        const event = this.safeString(message, 'event');
        if (event === 'login') {
            this.handleAuthenticate(client, message);
            return;
        }
        if (event === 'subscribe') {
            this.handleSubscriptionStatus(client, message);
            return;
        }
        const methods = {
            'ticker': this.handleTicker,
            'trade': this.handleTrades,
            'orders': this.handleOrder,
            'account': this.handleBalance,
        };
        const arg = this.safeValue(message, 'arg', {});
        const topic = this.safeValue(arg, 'channel', '');
        const method = this.safeValue(methods, topic);
        if (method !== undefined) {
            method.call(this, client, message);
        }
        if (topic.indexOf('candle') >= 0) {
            this.handleOHLCV(client, message);
        }
        if (topic.indexOf('books') >= 0) {
            this.handleOrderBook(client, message);
        }
    }
    ping(client) {
        return 'ping';
    }
    handleSubscriptionStatus(client, message) {
        //
        //    {
        //        event: 'subscribe',
        //        arg: { instType: 'spbl', channel: 'account', instId: 'default' }
        //    }
        //
        return message;
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bitmex extends bitmex$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': true,
                'watchMyTrades': true,
                'watchOHLCV': true,
                'watchOrderBook': true,
                'watchOrders': true,
                'watchTicker': true,
                'watchTickers': false,
                'watchTrades': true,
            },
            'urls': {
                'test': {
                    'ws': 'wss://ws.testnet.bitmex.com/realtime',
                },
                'api': {
                    'ws': 'wss://ws.bitmex.com/realtime',
                },
            },
            // 'versions': {
            //     'ws': '0.2.0',
            // },
            'options': {
                'watchOrderBookLevel': 'orderBookL2',
                'tradesLimit': 1000,
                'OHLCVLimit': 1000,
            },
            'exceptions': {
                'ws': {
                    'exact': {},
                    'broad': {
                        'Rate limit exceeded': RateLimitExceeded,
                    },
                },
            },
        });
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name bitmex#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const name = 'instrument';
        const messageHash = name + ':' + market['id'];
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [
                messageHash,
            ],
        };
        return await this.watch(url, messageHash, this.extend(request, params), messageHash);
    }
    handleTicker(client, message) {
        //
        //     {
        //         table: 'instrument',
        //         action: 'partial',
        //         keys: [ 'symbol' ],
        //         types: {
        //             symbol: 'symbol',
        //             rootSymbol: 'symbol',
        //             state: 'symbol',
        //             typ: 'symbol',
        //             listing: 'timestamp',
        //             front: 'timestamp',
        //             expiry: 'timestamp',
        //             settle: 'timestamp',
        //             relistInterval: 'timespan',
        //             inverseLeg: 'symbol',
        //             sellLeg: 'symbol',
        //             buyLeg: 'symbol',
        //             optionStrikePcnt: 'float',
        //             optionStrikeRound: 'float',
        //             optionStrikePrice: 'float',
        //             optionMultiplier: 'float',
        //             positionCurrency: 'symbol',
        //             underlying: 'symbol',
        //             quoteCurrency: 'symbol',
        //             underlyingSymbol: 'symbol',
        //             reference: 'symbol',
        //             referenceSymbol: 'symbol',
        //             calcInterval: 'timespan',
        //             publishInterval: 'timespan',
        //             publishTime: 'timespan',
        //             maxOrderQty: 'long',
        //             maxPrice: 'float',
        //             lotSize: 'long',
        //             tickSize: 'float',
        //             multiplier: 'long',
        //             settlCurrency: 'symbol',
        //             underlyingToPositionMultiplier: 'long',
        //             underlyingToSettleMultiplier: 'long',
        //             quoteToSettleMultiplier: 'long',
        //             isQuanto: 'boolean',
        //             isInverse: 'boolean',
        //             initMargin: 'float',
        //             maintMargin: 'float',
        //             riskLimit: 'long',
        //             riskStep: 'long',
        //             limit: 'float',
        //             capped: 'boolean',
        //             taxed: 'boolean',
        //             deleverage: 'boolean',
        //             makerFee: 'float',
        //             takerFee: 'float',
        //             settlementFee: 'float',
        //             insuranceFee: 'float',
        //             fundingBaseSymbol: 'symbol',
        //             fundingQuoteSymbol: 'symbol',
        //             fundingPremiumSymbol: 'symbol',
        //             fundingTimestamp: 'timestamp',
        //             fundingInterval: 'timespan',
        //             fundingRate: 'float',
        //             indicativeFundingRate: 'float',
        //             rebalanceTimestamp: 'timestamp',
        //             rebalanceInterval: 'timespan',
        //             openingTimestamp: 'timestamp',
        //             closingTimestamp: 'timestamp',
        //             sessionInterval: 'timespan',
        //             prevClosePrice: 'float',
        //             limitDownPrice: 'float',
        //             limitUpPrice: 'float',
        //             bankruptLimitDownPrice: 'float',
        //             bankruptLimitUpPrice: 'float',
        //             prevTotalVolume: 'long',
        //             totalVolume: 'long',
        //             volume: 'long',
        //             volume24h: 'long',
        //             prevTotalTurnover: 'long',
        //             totalTurnover: 'long',
        //             turnover: 'long',
        //             turnover24h: 'long',
        //             homeNotional24h: 'float',
        //             foreignNotional24h: 'float',
        //             prevPrice24h: 'float',
        //             vwap: 'float',
        //             highPrice: 'float',
        //             lowPrice: 'float',
        //             lastPrice: 'float',
        //             lastPriceProtected: 'float',
        //             lastTickDirection: 'symbol',
        //             lastChangePcnt: 'float',
        //             bidPrice: 'float',
        //             midPrice: 'float',
        //             askPrice: 'float',
        //             impactBidPrice: 'float',
        //             impactMidPrice: 'float',
        //             impactAskPrice: 'float',
        //             hasLiquidity: 'boolean',
        //             openInterest: 'long',
        //             openValue: 'long',
        //             fairMethod: 'symbol',
        //             fairBasisRate: 'float',
        //             fairBasis: 'float',
        //             fairPrice: 'float',
        //             markMethod: 'symbol',
        //             markPrice: 'float',
        //             indicativeTaxRate: 'float',
        //             indicativeSettlePrice: 'float',
        //             optionUnderlyingPrice: 'float',
        //             settledPrice: 'float',
        //             timestamp: 'timestamp'
        //         },
        //         foreignKeys: {
        //             inverseLeg: 'instrument',
        //             sellLeg: 'instrument',
        //             buyLeg: 'instrument'
        //         },
        //         attributes: { symbol: 'unique' },
        //         filter: { symbol: 'XBTUSD' },
        //         data: [
        //             {
        //                 symbol: 'XBTUSD',
        //                 rootSymbol: 'XBT',
        //                 state: 'Open',
        //                 typ: 'FFWCSX',
        //                 listing: '2016-05-13T12:00:00.000Z',
        //                 front: '2016-05-13T12:00:00.000Z',
        //                 expiry: null,
        //                 settle: null,
        //                 relistInterval: null,
        //                 inverseLeg: '',
        //                 sellLeg: '',
        //                 buyLeg: '',
        //                 optionStrikePcnt: null,
        //                 optionStrikeRound: null,
        //                 optionStrikePrice: null,
        //                 optionMultiplier: null,
        //                 positionCurrency: 'USD',
        //                 underlying: 'XBT',
        //                 quoteCurrency: 'USD',
        //                 underlyingSymbol: 'XBT=',
        //                 reference: 'BMEX',
        //                 referenceSymbol: '.BXBT',
        //                 calcInterval: null,
        //                 publishInterval: null,
        //                 publishTime: null,
        //                 maxOrderQty: 10000000,
        //                 maxPrice: 1000000,
        //                 lotSize: 1,
        //                 tickSize: 0.5,
        //                 multiplier: -100000000,
        //                 settlCurrency: 'XBt',
        //                 underlyingToPositionMultiplier: null,
        //                 underlyingToSettleMultiplier: -100000000,
        //                 quoteToSettleMultiplier: null,
        //                 isQuanto: false,
        //                 isInverse: true,
        //                 initMargin: 0.01,
        //                 maintMargin: 0.005,
        //                 riskLimit: 20000000000,
        //                 riskStep: 10000000000,
        //                 limit: null,
        //                 capped: false,
        //                 taxed: true,
        //                 deleverage: true,
        //                 makerFee: -0.00025,
        //                 takerFee: 0.00075,
        //                 settlementFee: 0,
        //                 insuranceFee: 0,
        //                 fundingBaseSymbol: '.XBTBON8H',
        //                 fundingQuoteSymbol: '.USDBON8H',
        //                 fundingPremiumSymbol: '.XBTUSDPI8H',
        //                 fundingTimestamp: '2020-01-29T12:00:00.000Z',
        //                 fundingInterval: '2000-01-01T08:00:00.000Z',
        //                 fundingRate: 0.000597,
        //                 indicativeFundingRate: 0.000652,
        //                 rebalanceTimestamp: null,
        //                 rebalanceInterval: null,
        //                 openingTimestamp: '2020-01-29T11:00:00.000Z',
        //                 closingTimestamp: '2020-01-29T12:00:00.000Z',
        //                 sessionInterval: '2000-01-01T01:00:00.000Z',
        //                 prevClosePrice: 9063.96,
        //                 limitDownPrice: null,
        //                 limitUpPrice: null,
        //                 bankruptLimitDownPrice: null,
        //                 bankruptLimitUpPrice: null,
        //                 prevTotalVolume: 1989881049026,
        //                 totalVolume: 1990196740950,
        //                 volume: 315691924,
        //                 volume24h: 4491824765,
        //                 prevTotalTurnover: 27865497128425564,
        //                 totalTurnover: 27868891594857150,
        //                 turnover: 3394466431587,
        //                 turnover24h: 48863390064843,
        //                 homeNotional24h: 488633.9006484273,
        //                 foreignNotional24h: 4491824765,
        //                 prevPrice24h: 9091,
        //                 vwap: 9192.8663,
        //                 highPrice: 9440,
        //                 lowPrice: 8886,
        //                 lastPrice: 9287,
        //                 lastPriceProtected: 9287,
        //                 lastTickDirection: 'PlusTick',
        //                 lastChangePcnt: 0.0216,
        //                 bidPrice: 9286,
        //                 midPrice: 9286.25,
        //                 askPrice: 9286.5,
        //                 impactBidPrice: 9285.9133,
        //                 impactMidPrice: 9286.75,
        //                 impactAskPrice: 9287.6382,
        //                 hasLiquidity: true,
        //                 openInterest: 967826984,
        //                 openValue: 10432207060536,
        //                 fairMethod: 'FundingRate',
        //                 fairBasisRate: 0.6537149999999999,
        //                 fairBasis: 0.33,
        //                 fairPrice: 9277.2,
        //                 markMethod: 'FairPrice',
        //                 markPrice: 9277.2,
        //                 indicativeTaxRate: 0,
        //                 indicativeSettlePrice: 9276.87,
        //                 optionUnderlyingPrice: null,
        //                 settledPrice: null,
        //                 timestamp: '2020-01-29T11:31:37.114Z'
        //             }
        //         ]
        //     }
        //
        const table = this.safeString(message, 'table');
        const data = this.safeValue(message, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const update = data[i];
            const marketId = this.safeValue(update, 'symbol');
            const market = this.safeMarket(marketId);
            const symbol = market['symbol'];
            const messageHash = table + ':' + marketId;
            let ticker = this.safeValue(this.tickers, symbol, {});
            const info = this.safeValue(ticker, 'info', {});
            ticker = this.parseTicker(this.extend(info, update), market);
            this.tickers[symbol] = ticker;
            client.resolve(ticker, messageHash);
        }
        return message;
    }
    async watchBalance(params = {}) {
        /**
         * @method
         * @name bitmex#watchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        await this.authenticate();
        const messageHash = 'margin';
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [
                messageHash,
            ],
        };
        return await this.watch(url, messageHash, this.extend(request, params), messageHash);
    }
    handleBalance(client, message) {
        //
        //     {
        //         table: 'margin',
        //         action: 'partial',
        //         keys: [ 'account' ],
        //         types: {
        //             account: 'long',
        //             currency: 'symbol',
        //             riskLimit: 'long',
        //             prevState: 'symbol',
        //             state: 'symbol',
        //             action: 'symbol',
        //             amount: 'long',
        //             pendingCredit: 'long',
        //             pendingDebit: 'long',
        //             confirmedDebit: 'long',
        //             prevRealisedPnl: 'long',
        //             prevUnrealisedPnl: 'long',
        //             grossComm: 'long',
        //             grossOpenCost: 'long',
        //             grossOpenPremium: 'long',
        //             grossExecCost: 'long',
        //             grossMarkValue: 'long',
        //             riskValue: 'long',
        //             taxableMargin: 'long',
        //             initMargin: 'long',
        //             maintMargin: 'long',
        //             sessionMargin: 'long',
        //             targetExcessMargin: 'long',
        //             varMargin: 'long',
        //             realisedPnl: 'long',
        //             unrealisedPnl: 'long',
        //             indicativeTax: 'long',
        //             unrealisedProfit: 'long',
        //             syntheticMargin: 'long',
        //             walletBalance: 'long',
        //             marginBalance: 'long',
        //             marginBalancePcnt: 'float',
        //             marginLeverage: 'float',
        //             marginUsedPcnt: 'float',
        //             excessMargin: 'long',
        //             excessMarginPcnt: 'float',
        //             availableMargin: 'long',
        //             withdrawableMargin: 'long',
        //             timestamp: 'timestamp',
        //             grossLastValue: 'long',
        //             commission: 'float'
        //         },
        //         foreignKeys: {},
        //         attributes: { account: 'sorted' },
        //         filter: { account: 1455728 },
        //         data: [
        //             {
        //                 account: 1455728,
        //                 currency: 'XBt',
        //                 riskLimit: 1000000000000,
        //                 prevState: '',
        //                 state: '',
        //                 action: '',
        //                 amount: 263542,
        //                 pendingCredit: 0,
        //                 pendingDebit: 0,
        //                 confirmedDebit: 0,
        //                 prevRealisedPnl: 0,
        //                 prevUnrealisedPnl: 0,
        //                 grossComm: 0,
        //                 grossOpenCost: 0,
        //                 grossOpenPremium: 0,
        //                 grossExecCost: 0,
        //                 grossMarkValue: 0,
        //                 riskValue: 0,
        //                 taxableMargin: 0,
        //                 initMargin: 0,
        //                 maintMargin: 0,
        //                 sessionMargin: 0,
        //                 targetExcessMargin: 0,
        //                 varMargin: 0,
        //                 realisedPnl: 0,
        //                 unrealisedPnl: 0,
        //                 indicativeTax: 0,
        //                 unrealisedProfit: 0,
        //                 syntheticMargin: null,
        //                 walletBalance: 263542,
        //                 marginBalance: 263542,
        //                 marginBalancePcnt: 1,
        //                 marginLeverage: 0,
        //                 marginUsedPcnt: 0,
        //                 excessMargin: 263542,
        //                 excessMarginPcnt: 1,
        //                 availableMargin: 263542,
        //                 withdrawableMargin: 263542,
        //                 timestamp: '2020-08-03T12:01:01.246Z',
        //                 grossLastValue: 0,
        //                 commission: null
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(message, 'data');
        const balance = this.parseBalance(data);
        this.balance = this.extend(this.balance, balance);
        const messageHash = this.safeString(message, 'table');
        client.resolve(this.balance, messageHash);
    }
    handleTrades(client, message) {
        //
        // initial snapshot
        //
        //     {
        //         table: 'trade',
        //         action: 'partial',
        //         keys: [],
        //         types: {
        //             timestamp: 'timestamp',
        //             symbol: 'symbol',
        //             side: 'symbol',
        //             size: 'long',
        //             price: 'float',
        //             tickDirection: 'symbol',
        //             trdMatchID: 'guid',
        //             grossValue: 'long',
        //             homeNotional: 'float',
        //             foreignNotional: 'float'
        //         },
        //         foreignKeys: { symbol: 'instrument', side: 'side' },
        //         attributes: { timestamp: 'sorted', symbol: 'grouped' },
        //         filter: { symbol: 'XBTUSD' },
        //         data: [
        //             {
        //                 timestamp: '2020-01-30T17:03:07.854Z',
        //                 symbol: 'XBTUSD',
        //                 side: 'Buy',
        //                 size: 15000,
        //                 price: 9378,
        //                 tickDirection: 'ZeroPlusTick',
        //                 trdMatchID: '5b426e7f-83d1-2c80-295d-ee995b8ceb4a',
        //                 grossValue: 159945000,
        //                 homeNotional: 1.59945,
        //                 foreignNotional: 15000
        //             }
        //         ]
        //     }
        //
        // updates
        //
        //     {
        //         table: 'trade',
        //         action: 'insert',
        //         data: [
        //             {
        //                 timestamp: '2020-01-30T17:31:40.160Z',
        //                 symbol: 'XBTUSD',
        //                 side: 'Sell',
        //                 size: 37412,
        //                 price: 9521.5,
        //                 tickDirection: 'ZeroMinusTick',
        //                 trdMatchID: 'a4bfc6bc-6cf1-1a11-622e-270eef8ca5c7',
        //                 grossValue: 392938236,
        //                 homeNotional: 3.92938236,
        //                 foreignNotional: 37412
        //             }
        //         ]
        //     }
        //
        const table = 'trade';
        const data = this.safeValue(message, 'data', []);
        const dataByMarketIds = this.groupBy(data, 'symbol');
        const marketIds = Object.keys(dataByMarketIds);
        for (let i = 0; i < marketIds.length; i++) {
            const marketId = marketIds[i];
            const market = this.safeMarket(marketId);
            const messageHash = table + ':' + marketId;
            const symbol = market['symbol'];
            const trades = this.parseTrades(dataByMarketIds[marketId], market);
            let stored = this.safeValue(this.trades, symbol);
            if (stored === undefined) {
                const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
                stored = new ArrayCache(limit);
                this.trades[symbol] = stored;
            }
            for (let j = 0; j < trades.length; j++) {
                stored.append(trades[j]);
            }
            client.resolve(stored, messageHash);
        }
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#watchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const table = 'trade';
        const messageHash = table + ':' + market['id'];
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [
                messageHash,
            ],
        };
        const trades = await this.watch(url, messageHash, this.extend(request, params), messageHash, false);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    async authenticate(params = {}) {
        const url = this.urls['api']['ws'];
        const client = this.client(url);
        const future = client.future('authenticated');
        const action = 'authKeyExpires';
        const authenticated = this.safeValue(client.subscriptions, action);
        if (authenticated === undefined) {
            try {
                this.checkRequiredCredentials();
                const timestamp = this.milliseconds();
                const message = 'GET' + '/realtime' + timestamp.toString();
                const signature = this.hmac(this.encode(message), this.encode(this.secret));
                const request = {
                    'op': action,
                    'args': [
                        this.apiKey,
                        timestamp,
                        signature,
                    ],
                };
                this.spawn(this.watch, url, action, request, action);
            }
            catch (e) {
                client.reject(e, 'authenticated');
                if (action in client.subscriptions) {
                    delete client.subscriptions[action];
                }
            }
        }
        return future;
    }
    handleAuthenticationMessage(client, message) {
        const authenticated = this.safeValue(message, 'success', false);
        if (authenticated) {
            // we resolve the future here permanently so authentication only happens once
            client.resolve(message, 'authenticated');
        }
        else {
            const error = new AuthenticationError(this.json(message));
            client.reject(error, 'authenticated');
            // allows further authentication attempts
            const event = 'authKeyExpires';
            if (event in client.subscriptions) {
                delete client.subscriptions[event];
            }
        }
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#watchOrders
         * @description watches information on multiple orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        await this.authenticate();
        const name = 'order';
        const subscriptionHash = name;
        let messageHash = name;
        if (symbol !== undefined) {
            symbol = this.symbol(symbol);
            messageHash += ':' + symbol;
        }
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [
                subscriptionHash,
            ],
        };
        const orders = await this.watch(url, messageHash, request, subscriptionHash);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    handleOrders(client, message) {
        //
        //     {
        //         table: 'order',
        //         action: 'partial',
        //         keys: [ 'orderID' ],
        //         types: {
        //             orderID: 'guid',
        //             clOrdID: 'string',
        //             clOrdLinkID: 'symbol',
        //             account: 'long',
        //             symbol: 'symbol',
        //             side: 'symbol',
        //             simpleOrderQty: 'float',
        //             orderQty: 'long',
        //             price: 'float',
        //             displayQty: 'long',
        //             stopPx: 'float',
        //             pegOffsetValue: 'float',
        //             pegPriceType: 'symbol',
        //             currency: 'symbol',
        //             settlCurrency: 'symbol',
        //             ordType: 'symbol',
        //             timeInForce: 'symbol',
        //             execInst: 'symbol',
        //             contingencyType: 'symbol',
        //             exDestination: 'symbol',
        //             ordStatus: 'symbol',
        //             triggered: 'symbol',
        //             workingIndicator: 'boolean',
        //             ordRejReason: 'symbol',
        //             simpleLeavesQty: 'float',
        //             leavesQty: 'long',
        //             simpleCumQty: 'float',
        //             cumQty: 'long',
        //             avgPx: 'float',
        //             multiLegReportingType: 'symbol',
        //             text: 'string',
        //             transactTime: 'timestamp',
        //             timestamp: 'timestamp'
        //         },
        //         foreignKeys: { symbol: 'instrument', side: 'side', ordStatus: 'ordStatus' },
        //         attributes: {
        //             orderID: 'grouped',
        //             account: 'grouped',
        //             ordStatus: 'grouped',
        //             workingIndicator: 'grouped'
        //         },
        //         filter: { account: 1455728 },
        //         data: [
        //             {
        //                 orderID: '56222c7a-9956-413a-82cf-99f4812c214b',
        //                 clOrdID: '',
        //                 clOrdLinkID: '',
        //                 account: 1455728,
        //                 symbol: 'XBTUSD',
        //                 side: 'Sell',
        //                 simpleOrderQty: null,
        //                 orderQty: 1,
        //                 price: 40000,
        //                 displayQty: null,
        //                 stopPx: null,
        //                 pegOffsetValue: null,
        //                 pegPriceType: '',
        //                 currency: 'USD',
        //                 settlCurrency: 'XBt',
        //                 ordType: 'Limit',
        //                 timeInForce: 'GoodTillCancel',
        //                 execInst: '',
        //                 contingencyType: '',
        //                 exDestination: 'XBME',
        //                 ordStatus: 'New',
        //                 triggered: '',
        //                 workingIndicator: true,
        //                 ordRejReason: '',
        //                 simpleLeavesQty: null,
        //                 leavesQty: 1,
        //                 simpleCumQty: null,
        //                 cumQty: 0,
        //                 avgPx: null,
        //                 multiLegReportingType: 'SingleSecurity',
        //                 text: 'Submitted via API.',
        //                 transactTime: '2021-01-02T21:38:49.246Z',
        //                 timestamp: '2021-01-02T21:38:49.246Z'
        //             }
        //         ]
        //     }
        //
        //     {
        //         table: 'order',
        //         action: 'insert',
        //         data: [
        //             {
        //                 orderID: 'fa993d8e-f7e4-46ed-8097-04f8e9393585',
        //                 clOrdID: '',
        //                 clOrdLinkID: '',
        //                 account: 1455728,
        //                 symbol: 'XBTUSD',
        //                 side: 'Sell',
        //                 simpleOrderQty: null,
        //                 orderQty: 1,
        //                 price: 40000,
        //                 displayQty: null,
        //                 stopPx: null,
        //                 pegOffsetValue: null,
        //                 pegPriceType: '',
        //                 currency: 'USD',
        //                 settlCurrency: 'XBt',
        //                 ordType: 'Limit',
        //                 timeInForce: 'GoodTillCancel',
        //                 execInst: '',
        //                 contingencyType: '',
        //                 exDestination: 'XBME',
        //                 ordStatus: 'New',
        //                 triggered: '',
        //                 workingIndicator: true,
        //                 ordRejReason: '',
        //                 simpleLeavesQty: null,
        //                 leavesQty: 1,
        //                 simpleCumQty: null,
        //                 cumQty: 0,
        //                 avgPx: null,
        //                 multiLegReportingType: 'SingleSecurity',
        //                 text: 'Submitted via API.',
        //                 transactTime: '2021-01-02T23:49:02.286Z',
        //                 timestamp: '2021-01-02T23:49:02.286Z'
        //             }
        //         ]
        //     }
        //
        //
        //
        //     {
        //         table: 'order',
        //         action: 'update',
        //         data: [
        //             {
        //                 orderID: 'fa993d8e-f7e4-46ed-8097-04f8e9393585',
        //                 ordStatus: 'Canceled',
        //                 workingIndicator: false,
        //                 leavesQty: 0,
        //                 text: 'Canceled: Canceled via API.\nSubmitted via API.',
        //                 timestamp: '2021-01-02T23:50:51.272Z',
        //                 clOrdID: '',
        //                 account: 1455728,
        //                 symbol: 'XBTUSD'
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(message, 'data', []);
        const messageHash = 'order';
        // initial subscription response with multiple orders
        const dataLength = data.length;
        if (dataLength > 0) {
            if (this.orders === undefined) {
                const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            const stored = this.orders;
            const symbols = {};
            for (let i = 0; i < dataLength; i++) {
                const currentOrder = data[i];
                const orderId = this.safeString(currentOrder, 'orderID');
                const previousOrder = this.safeValue(stored.hashmap, orderId);
                let rawOrder = currentOrder;
                if (previousOrder !== undefined) {
                    rawOrder = this.extend(previousOrder['info'], currentOrder);
                }
                const order = this.parseOrder(rawOrder);
                stored.append(order);
                const symbol = order['symbol'];
                symbols[symbol] = true;
            }
            client.resolve(this.orders, messageHash);
            const keys = Object.keys(symbols);
            for (let i = 0; i < keys.length; i++) {
                const symbol = keys[i];
                client.resolve(this.orders, messageHash + ':' + symbol);
            }
        }
    }
    async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#watchMyTrades
         * @description watches information on multiple trades made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        await this.authenticate();
        const name = 'execution';
        const subscriptionHash = name;
        let messageHash = name;
        if (symbol !== undefined) {
            symbol = this.symbol(symbol);
            messageHash += ':' + symbol;
        }
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [
                subscriptionHash,
            ],
        };
        const trades = await this.watch(url, messageHash, request, subscriptionHash);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }
    handleMyTrades(client, message) {
        //
        //     {
        //         "table":"execution",
        //         "action":"insert",
        //         "data":[
        //             {
        //                 "execID":"0193e879-cb6f-2891-d099-2c4eb40fee21",
        //                 "orderID":"00000000-0000-0000-0000-000000000000",
        //                 "clOrdID":"",
        //                 "clOrdLinkID":"",
        //                 "account":2,
        //                 "symbol":"XBTUSD",
        //                 "side":"Sell",
        //                 "lastQty":1,
        //                 "lastPx":1134.37,
        //                 "underlyingLastPx":null,
        //                 "lastMkt":"XBME",
        //                 "lastLiquidityInd":"RemovedLiquidity",
        //                 "simpleOrderQty":null,
        //                 "orderQty":1,
        //                 "price":1134.37,
        //                 "displayQty":null,
        //                 "stopPx":null,
        //                 "pegOffsetValue":null,
        //                 "pegPriceType":"",
        //                 "currency":"USD",
        //                 "settlCurrency":"XBt",
        //                 "execType":"Trade",
        //                 "ordType":"Limit",
        //                 "timeInForce":"ImmediateOrCancel",
        //                 "execInst":"",
        //                 "contingencyType":"",
        //                 "exDestination":"XBME",
        //                 "ordStatus":"Filled",
        //                 "triggered":"",
        //                 "workingIndicator":false,
        //                 "ordRejReason":"",
        //                 "simpleLeavesQty":0,
        //                 "leavesQty":0,
        //                 "simpleCumQty":0.001,
        //                 "cumQty":1,
        //                 "avgPx":1134.37,
        //                 "commission":0.00075,
        //                 "tradePublishIndicator":"DoNotPublishTrade",
        //                 "multiLegReportingType":"SingleSecurity",
        //                 "text":"Liquidation",
        //                 "trdMatchID":"7f4ab7f6-0006-3234-76f4-ae1385aad00f",
        //                 "execCost":88155,
        //                 "execComm":66,
        //                 "homeNotional":-0.00088155,
        //                 "foreignNotional":1,
        //                 "transactTime":"2017-04-04T22:07:46.035Z",
        //                 "timestamp":"2017-04-04T22:07:46.035Z"
        //             }
        //         ]
        //     }
        //
        const messageHash = this.safeString(message, 'table');
        const data = this.safeValue(message, 'data', []);
        const dataByExecType = this.groupBy(data, 'execType');
        const rawTrades = this.safeValue(dataByExecType, 'Trade', []);
        const trades = this.parseTrades(rawTrades);
        if (this.myTrades === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            this.myTrades = new ArrayCacheBySymbolById(limit);
        }
        const stored = this.myTrades;
        const symbols = {};
        for (let j = 0; j < trades.length; j++) {
            const trade = trades[j];
            const symbol = trade['symbol'];
            stored.append(trade);
            symbols[symbol] = trade;
        }
        const numTrades = trades.length;
        if (numTrades > 0) {
            client.resolve(stored, messageHash);
        }
        const keys = Object.keys(symbols);
        for (let i = 0; i < keys.length; i++) {
            client.resolve(stored, messageHash + ':' + keys[i]);
        }
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        let table = undefined;
        if (limit === undefined) {
            table = this.safeString(this.options, 'watchOrderBookLevel', 'orderBookL2');
        }
        else if (limit === 25) {
            table = 'orderBookL2_25';
        }
        else if (limit === 10) {
            table = 'orderBookL10';
        }
        else {
            throw new ExchangeError(this.id + ' watchOrderBook limit argument must be undefined (L2), 25 (L2) or 10 (L3)');
        }
        await this.loadMarkets();
        const market = this.market(symbol);
        const messageHash = table + ':' + market['id'];
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [
                messageHash,
            ],
        };
        const orderbook = await this.watch(url, messageHash, this.deepExtend(request, params), messageHash, false);
        return orderbook.limit();
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bitmex#watchOHLCV
         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the bitmex api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const table = 'tradeBin' + this.safeString(this.timeframes, timeframe, timeframe);
        const messageHash = table + ':' + market['id'];
        const url = this.urls['api']['ws'];
        const request = {
            'op': 'subscribe',
            'args': [
                messageHash,
            ],
        };
        const ohlcv = await this.watch(url, messageHash, this.extend(request, params), messageHash);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        //
        //     {
        //         table: 'tradeBin1m',
        //         action: 'partial',
        //         keys: [],
        //         types: {
        //             timestamp: 'timestamp',
        //             symbol: 'symbol',
        //             open: 'float',
        //             high: 'float',
        //             low: 'float',
        //             close: 'float',
        //             trades: 'long',
        //             volume: 'long',
        //             vwap: 'float',
        //             lastSize: 'long',
        //             turnover: 'long',
        //             homeNotional: 'float',
        //             foreignNotional: 'float'
        //         },
        //         foreignKeys: { symbol: 'instrument' },
        //         attributes: { timestamp: 'sorted', symbol: 'grouped' },
        //         filter: { symbol: 'XBTUSD' },
        //         data: [
        //             {
        //                 timestamp: '2020-02-03T01:13:00.000Z',
        //                 symbol: 'XBTUSD',
        //                 open: 9395,
        //                 high: 9395.5,
        //                 low: 9394.5,
        //                 close: 9395,
        //                 trades: 221,
        //                 volume: 839204,
        //                 vwap: 9394.9643,
        //                 lastSize: 1874,
        //                 turnover: 8932641535,
        //                 homeNotional: 89.32641534999999,
        //                 foreignNotional: 839204
        //             }
        //         ]
        //     }
        //
        //
        //     {
        //         table: 'tradeBin1m',
        //         action: 'insert',
        //         data: [
        //             {
        //                 timestamp: '2020-02-03T18:28:00.000Z',
        //                 symbol: 'XBTUSD',
        //                 open: 9256,
        //                 high: 9256.5,
        //                 low: 9256,
        //                 close: 9256,
        //                 trades: 29,
        //                 volume: 79057,
        //                 vwap: 9256.688,
        //                 lastSize: 100,
        //                 turnover: 854077082,
        //                 homeNotional: 8.540770820000002,
        //                 foreignNotional: 79057
        //             }
        //         ]
        //     }
        //
        const table = this.safeString(message, 'table');
        const interval = table.replace('tradeBin', '');
        const timeframe = this.findTimeframe(interval);
        const duration = this.parseTimeframe(timeframe);
        const candles = this.safeValue(message, 'data', []);
        const results = {};
        for (let i = 0; i < candles.length; i++) {
            const candle = candles[i];
            const marketId = this.safeString(candle, 'symbol');
            const market = this.safeMarket(marketId);
            const symbol = market['symbol'];
            const messageHash = table + ':' + market['id'];
            const result = [
                this.parse8601(this.safeString(candle, 'timestamp')) - duration * 1000,
                this.safeFloat(candle, 'open'),
                this.safeFloat(candle, 'high'),
                this.safeFloat(candle, 'low'),
                this.safeFloat(candle, 'close'),
                this.safeFloat(candle, 'volume'),
            ];
            this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
            let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
            if (stored === undefined) {
                const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
                stored = new ArrayCacheByTimestamp(limit);
                this.ohlcvs[symbol][timeframe] = stored;
            }
            stored.append(result);
            results[messageHash] = stored;
        }
        const messageHashes = Object.keys(results);
        for (let i = 0; i < messageHashes.length; i++) {
            const messageHash = messageHashes[i];
            client.resolve(results[messageHash], messageHash);
        }
    }
    async watchHeartbeat(params = {}) {
        await this.loadMarkets();
        const event = 'heartbeat';
        const url = this.urls['api']['ws'];
        return await this.watch(url, event);
    }
    handleOrderBook(client, message) {
        //
        // first snapshot
        //
        //     {
        //         table: 'orderBookL2',
        //         action: 'partial',
        //         keys: [ 'symbol', 'id', 'side' ],
        //         types: {
        //             symbol: 'symbol',
        //             id: 'long',
        //             side: 'symbol',
        //             size: 'long',
        //             price: 'float'
        //         },
        //         foreignKeys: { symbol: 'instrument', side: 'side' },
        //         attributes: { symbol: 'parted', id: 'sorted' },
        //         filter: { symbol: 'XBTUSD' },
        //         data: [
        //             { symbol: 'XBTUSD', id: 8700000100, side: 'Sell', size: 1, price: 999999 },
        //             { symbol: 'XBTUSD', id: 8700000200, side: 'Sell', size: 3, price: 999998 },
        //             { symbol: 'XBTUSD', id: 8716991250, side: 'Sell', size: 26, price: 830087.5 },
        //             { symbol: 'XBTUSD', id: 8728701950, side: 'Sell', size: 1720, price: 712980.5 },
        //         ]
        //     }
        //
        // subsequent updates
        //
        //     {
        //         table: 'orderBookL2',
        //         action: 'update',
        //         data: [
        //             { symbol: 'XBTUSD', id: 8799285100, side: 'Sell', size: 70590 },
        //             { symbol: 'XBTUSD', id: 8799285550, side: 'Sell', size: 217652 },
        //             { symbol: 'XBTUSD', id: 8799288950, side: 'Buy', size: 47552 },
        //             { symbol: 'XBTUSD', id: 8799289250, side: 'Buy', size: 78217 },
        //         ]
        //     }
        //
        const action = this.safeString(message, 'action');
        const table = this.safeString(message, 'table');
        const data = this.safeValue(message, 'data', []);
        // if it's an initial snapshot
        if (action === 'partial') {
            const filter = this.safeValue(message, 'filter', {});
            const marketId = this.safeValue(filter, 'symbol');
            const market = this.safeMarket(marketId);
            const symbol = market['symbol'];
            if (table === 'orderBookL2') {
                this.orderbooks[symbol] = this.indexedOrderBook();
            }
            else if (table === 'orderBookL2_25') {
                this.orderbooks[symbol] = this.indexedOrderBook({}, 25);
            }
            else if (table === 'orderBook10') {
                this.orderbooks[symbol] = this.indexedOrderBook({}, 10);
            }
            const orderbook = this.orderbooks[symbol];
            for (let i = 0; i < data.length; i++) {
                const price = this.safeFloat(data[i], 'price');
                const size = this.safeFloat(data[i], 'size');
                const id = this.safeString(data[i], 'id');
                let side = this.safeString(data[i], 'side');
                side = (side === 'Buy') ? 'bids' : 'asks';
                const bookside = orderbook[side];
                bookside.store(price, size, id);
            }
            const messageHash = table + ':' + marketId;
            client.resolve(orderbook, messageHash);
        }
        else {
            const numUpdatesByMarketId = {};
            for (let i = 0; i < data.length; i++) {
                const marketId = this.safeValue(data[i], 'symbol');
                if (!(marketId in numUpdatesByMarketId)) {
                    numUpdatesByMarketId[marketId] = 0;
                }
                numUpdatesByMarketId[marketId] = this.sum(numUpdatesByMarketId, 1);
                const market = this.safeMarket(marketId);
                const symbol = market['symbol'];
                const orderbook = this.orderbooks[symbol];
                const price = this.safeFloat(data[i], 'price');
                const size = this.safeFloat(data[i], 'size', 0);
                const id = this.safeString(data[i], 'id');
                let side = this.safeString(data[i], 'side');
                side = (side === 'Buy') ? 'bids' : 'asks';
                const bookside = orderbook[side];
                bookside.store(price, size, id);
            }
            const marketIds = Object.keys(numUpdatesByMarketId);
            for (let i = 0; i < marketIds.length; i++) {
                const marketId = marketIds[i];
                const messageHash = table + ':' + marketId;
                const market = this.safeMarket(marketId);
                const symbol = market['symbol'];
                const orderbook = this.orderbooks[symbol];
                client.resolve(orderbook, messageHash);
            }
        }
    }
    handleSystemStatus(client, message) {
        //
        // todo answer the question whether handleSystemStatus should be renamed
        // and unified as handleStatus for any usage pattern that
        // involves system status and maintenance updates
        //
        //     {
        //         info: 'Welcome to the BitMEX Realtime API.',
        //         version: '2019-11-22T00:24:37.000Z',
        //         timestamp: '2019-11-23T09:02:27.771Z',
        //         docs: 'https://www.bitmex.com/app/wsAPI',
        //         limit: { remaining: 39 }
        //     }
        //
        return message;
    }
    handleSubscriptionStatus(client, message) {
        //
        //     {
        //         success: true,
        //         subscribe: 'orderBookL2:XBTUSD',
        //         request: { op: 'subscribe', args: [ 'orderBookL2:XBTUSD' ] }
        //     }
        //
        return message;
    }
    handleErrorMessage(client, message) {
        //
        // generic error format
        //
        //     { "error": errorMessage }
        //
        // examples
        //
        //     {
        //         "status": 429,
        //         "error": "Rate limit exceeded, retry in 1 seconds.",
        //         "meta": { "retryAfter": 1 },
        //         "request": { "op": "subscribe", "args": "orderBook" },
        //     }
        //
        //     { "error": "Rate limit exceeded, retry in 29 seconds." }
        //
        const error = this.safeValue(message, 'error');
        if (error !== undefined) {
            const request = this.safeValue(message, 'request', {});
            const args = this.safeValue(request, 'args', []);
            const numArgs = args.length;
            if (numArgs > 0) {
                const messageHash = args[0];
                const broad = this.exceptions['ws']['broad'];
                const broadKey = this.findBroadlyMatchedKey(broad, error);
                let exception = undefined;
                if (broadKey === undefined) {
                    exception = new ExchangeError(error);
                }
                else {
                    exception = new broad[broadKey](error);
                }
                client.reject(exception, messageHash);
                return false;
            }
        }
        return true;
    }
    handleMessage(client, message) {
        //
        //     {
        //         info: 'Welcome to the BitMEX Realtime API.',
        //         version: '2019-11-22T00:24:37.000Z',
        //         timestamp: '2019-11-23T09:04:42.569Z',
        //         docs: 'https://www.bitmex.com/app/wsAPI',
        //         limit: { remaining: 38 }
        //     }
        //
        //     {
        //         success: true,
        //         subscribe: 'orderBookL2:XBTUSD',
        //         request: { op: 'subscribe', args: [ 'orderBookL2:XBTUSD' ] }
        //     }
        //
        //     {
        //         table: 'orderBookL2',
        //         action: 'update',
        //         data: [
        //             { symbol: 'XBTUSD', id: 8799284800, side: 'Sell', size: 721000 },
        //             { symbol: 'XBTUSD', id: 8799285100, side: 'Sell', size: 70590 },
        //             { symbol: 'XBTUSD', id: 8799285550, side: 'Sell', size: 217652 },
        //             { symbol: 'XBTUSD', id: 8799285850, side: 'Sell', size: 105578 },
        //             { symbol: 'XBTUSD', id: 8799286350, side: 'Sell', size: 172093 },
        //             { symbol: 'XBTUSD', id: 8799286650, side: 'Sell', size: 201125 },
        //             { symbol: 'XBTUSD', id: 8799288950, side: 'Buy', size: 47552 },
        //             { symbol: 'XBTUSD', id: 8799289250, side: 'Buy', size: 78217 },
        //             { symbol: 'XBTUSD', id: 8799289700, side: 'Buy', size: 193677 },
        //             { symbol: 'XBTUSD', id: 8799290000, side: 'Buy', size: 818161 },
        //             { symbol: 'XBTUSD', id: 8799290500, side: 'Buy', size: 218806 },
        //             { symbol: 'XBTUSD', id: 8799290800, side: 'Buy', size: 102946 }
        //         ]
        //     }
        //
        if (this.handleErrorMessage(client, message)) {
            const table = this.safeString(message, 'table');
            const methods = {
                'orderBookL2': this.handleOrderBook,
                'orderBookL2_25': this.handleOrderBook,
                'orderBook10': this.handleOrderBook,
                'instrument': this.handleTicker,
                'trade': this.handleTrades,
                'tradeBin1m': this.handleOHLCV,
                'tradeBin5m': this.handleOHLCV,
                'tradeBin1h': this.handleOHLCV,
                'tradeBin1d': this.handleOHLCV,
                'order': this.handleOrders,
                'execution': this.handleMyTrades,
                'margin': this.handleBalance,
            };
            const method = this.safeValue(methods, table);
            if (method === undefined) {
                const request = this.safeValue(message, 'request', {});
                const op = this.safeValue(request, 'op');
                if (op === 'authKeyExpires') {
                    return this.handleAuthenticationMessage.call(this, client, message);
                }
                else {
                    return message;
                }
            }
            else {
                return method.call(this, client, message);
            }
        }
    }
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
class blofin extends blofin$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': false,
                'watchMyTrades': false,
                'watchOHLCV': true,
                'watchOrderBook': true,
                'watchOrders': false,
                'watchTicker': true,
                'watchTickers': true,
                'watchTrades': true,
            },
            'urls': {
                'api': {
                    'ws': {
                        'public': 'wss://openapi.blofin.com/ws/public',
                        'private': 'wss://openapi.blofin.com/ws/private',
                    },
                },
                'test': {
                    'ws': {
                        'public': 'wss://openapi.blofin.com/ws/public',
                        'private': 'wss://openapi.blofin.com/ws/private',
                    },
                },
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true,
            },
            'options': {
                'watchOrderBook': {
                    'depth': 'books',
                },
                'tradesLimit': 1000,
                'ordersLimit': 1000,
                'requestId': {},
            },
            'streaming': {
                'ping': this.ping,
                'keepAlive': 10000,
            },
        });
    }
    requestId(url) {
        const options = this.safeValue(this.options, 'requestId', {});
        const previousValue = this.safeInteger(options, url, 0);
        const newValue = this.sum(previousValue, 1);
        this.options['requestId'][url] = newValue;
        return newValue;
    }
    async subscribe(access, channel, symbol, params = {}, shouldThrottle = true) {
        await this.loadMarkets();
        const url = this.urls['api']['ws'][access];
        let messageHash = channel;
        const firstArgument = {
            'channel': channel,
        };
        if (symbol !== undefined) {
            const market = this.market(symbol);
            messageHash += ':' + market['id'];
            firstArgument['instId'] = market['id'];
        }
        const request = {
            'op': 'subscribe',
            'args': [firstArgument],
        };
        return await this.watch(url, messageHash, this.deepExtend(request, params), messageHash, shouldThrottle);
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        const trades = await this.subscribe('public', 'trades', symbol, params);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    handleTrades(client, message) {
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const data = this.safeValue(message, 'data', []);
        const tradesLimit = this.safeInteger(this.options, 'tradesLimit', 1000);
        for (let i = 0; i < data.length; i++) {
            const trade = this.parseTrade(data[i]);
            const symbol = trade['symbol'];
            const marketId = this.safeString(trade['info'], 'instId');
            const messageHash = channel + ':' + marketId;
            let stored = this.safeValue(this.trades, symbol);
            if (stored === undefined) {
                stored = new ArrayCache(tradesLimit);
                this.trades[symbol] = stored;
            }
            stored.append(trade);
            client.resolve(stored, messageHash);
        }
        return message;
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name okx#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        return await this.subscribe('public', 'tickers', symbol, params);
    }
    handleTicker(client, message) {
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const data = this.safeValue(message, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const ticker = this.parseTicker(data[i]);
            const symbol = ticker['symbol'];
            const marketId = this.safeString(ticker['info'], 'instId');
            const messageHash = channel + ':' + marketId;
            this.tickers[symbol] = ticker;
            client.resolve(ticker, messageHash);
        }
        return message;
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        const interval = this.safeString(this.timeframes, timeframe, timeframe);
        const name = 'candle' + interval;
        const ohlcv = await this.subscribe('public', name, symbol, params);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const data = this.safeValue(message, 'data', []);
        const marketId = this.safeString(arg, 'instId');
        const market = this.safeMarket(marketId);
        const symbol = market['id'];
        const interval = channel.replace('candle', '');
        // use a reverse lookup in a static map instead
        const timeframe = this.findTimeframe(interval);
        for (let i = 0; i < data.length; i++) {
            const parsed = this.parseOHLCV(data[i], market);
            this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
            let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
            if (stored === undefined) {
                const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
                stored = new ArrayCacheByTimestamp(limit);
                this.ohlcvs[symbol][timeframe] = stored;
            }
            stored.append(parsed);
            const messageHash = channel + ':' + marketId;
            client.resolve(stored, messageHash);
        }
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        const options = this.safeValue(this.options, 'watchOrderBook', {});
        // books, 400 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed every 100 ms when there is change in order book.
        // books5, 5 depth levels will be pushed every time. Data will be pushed every 100 ms when there is change in order book.
        // books50-l2-tbt, 50 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed tick by tick, i.e. whenever there is change in order book.
        // books-l2-tbt, 400 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed tick by tick, i.e. whenever there is change in order book.
        const depth = this.safeString(options, 'depth', 'books-l2-tbt');
        const orderbook = await this.subscribe('public', depth, symbol, params, false);
        return orderbook.limit(limit);
    }
    handleDelta(bookside, delta) {
        const price = this.safeFloat(delta, 0);
        const amount = this.safeFloat(delta, 1);
        bookside.store(price, amount);
    }
    handleDeltas(bookside, deltas) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(bookside, deltas[i]);
        }
    }
    handleOrderBookMessage(client, message, orderbook, messageHash) {
        const asks = this.safeValue(message, 'asks', []);
        const bids = this.safeValue(message, 'bids', []);
        const storedAsks = orderbook['asks'];
        const storedBids = orderbook['bids'];
        this.handleDeltas(storedAsks, asks);
        this.handleDeltas(storedBids, bids);
        const checksum = this.safeValue(this.options, 'checksum', true);
        if (checksum) {
            const asksLength = storedAsks.length;
            const bidsLength = storedBids.length;
            const payloadArray = [];
            for (let i = 0; i < 25; i++) {
                if (i < bidsLength) {
                    payloadArray.push(this.numberToString(storedBids[i][0]));
                    payloadArray.push(this.numberToString(storedBids[i][1]));
                }
                if (i < asksLength) {
                    payloadArray.push(this.numberToString(storedAsks[i][0]));
                    payloadArray.push(this.numberToString(storedAsks[i][1]));
                }
            }
            // const payload = payloadArray.join (':');
            // const responseChecksum = this.safeInteger (message, 'checksum');
            // const localChecksum = this.crc32 (payload, true);
            // if (responseChecksum !== localChecksum) {
            //     const error = new InvalidNonce (this.id + ' invalid checksum');
            //     client.reject (error, messageHash);
            // }
        }
        const timestamp = this.safeInteger(message, 'ts');
        orderbook['timestamp'] = timestamp;
        orderbook['datetime'] = this.iso8601(timestamp);
        return orderbook;
    }
    handleOrderBook(client, message) {
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const action = this.safeString(message, 'action');
        const data = this.safeValue(message, 'data', {});
        const marketId = this.safeString(arg, 'instId');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const depths = {
            'bbo-tbt': 1,
            'books': 400,
            'books5': 5,
            'books-l2-tbt': 400,
            'books50-l2-tbt': 50,
        };
        const limit = this.safeInteger(depths, channel);
        const messageHash = channel + ':' + marketId;
        if (action === 'snapshot') {
            const update = data;
            const orderbook = this.orderBook({}, limit);
            this.orderbooks[symbol] = orderbook;
            orderbook['symbol'] = symbol;
            this.handleOrderBookMessage(client, update, orderbook, messageHash);
            client.resolve(orderbook, messageHash);
        }
        else if (action === 'update') {
            if (symbol in this.orderbooks) {
                const orderbook = this.orderbooks[symbol];
                const update = data;
                this.handleOrderBookMessage(client, update, orderbook, messageHash);
                client.resolve(orderbook, messageHash);
            }
        }
        //  else if ((channel === 'books5') || (channel === 'bbo-tbt')) {
        //     let orderbook = this.safeValue (this.orderbooks, symbol);
        //     if (orderbook === undefined) {
        //         orderbook = this.orderBook ({}, limit);
        //     }
        //     this.orderbooks[symbol] = orderbook;
        //     for (let i = 0; i < data.length; i++) {
        //         const update = data[i];
        //         const timestamp = this.safeInteger (update, 'ts');
        //         const snapshot = this.parseOrderBook (update, symbol, timestamp, 'bids', 'asks', 0, 1);
        //         orderbook.reset (snapshot);
        //         client.resolve (orderbook, messageHash);
        //     }
        // }
        return message;
    }
    checkRequiredUid() {
        // checkRequiredUid (error = true) {
        return true;
        // if (!this.uid) {
        //     if (error) {
        //         throw new AuthenticationError (this.id + ' requires `uid` credential');
        //     } else {
        //         return false;
        //     }
        // }
        // return true;
    }
    authenticate(params = {}) {
        this.checkRequiredCredentials();
        const url = this.urls['api']['ws']['private'] + '/' + this.uid;
        const client = this.client(url);
        const messageHash = 'authenticated';
        const event = 'auth';
        let future = this.safeValue(client.subscriptions, messageHash);
        if (future === undefined) {
            const ts = this.nonce().toString();
            const auth = '|' + ts;
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
            const request = {
                'event': event,
                'params': {
                    'apikey': this.apiKey,
                    'sign': signature,
                    'timestamp': ts,
                },
            };
            const message = this.extend(request, params);
            future = this.watch(url, messageHash, message);
            client.subscriptions[messageHash] = future;
        }
        return future;
    }
    async watchPrivate(messageHash, message, params = {}) {
        await this.authenticate(params);
        const url = this.urls['api']['ws']['private'] + '/' + this.uid;
        const requestId = this.requestId(url);
        const subscribe = {
            'id': requestId,
        };
        const request = this.extend(subscribe, message);
        return await this.watch(url, messageHash, request, messageHash, subscribe);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const topic = 'executionreport';
        let messageHash = topic;
        if (symbol !== undefined) {
            const market = this.market(symbol);
            symbol = market['symbol'];
            messageHash += ':' + symbol;
        }
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const orders = await this.watchPrivate(messageHash, message);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    parseWsOrder(order, market = undefined) {
        return this.parseOrder(order, market);
    }
    handleOrderUpdate(client, message) {
        //
        //     {
        //         topic: 'executionreport',
        //         ts: 1657515556799,
        //         data: {
        //             symbol: 'PERP_BTC_USDT',
        //             clientOrderId: 0,
        //             orderId: 52952826,
        //             type: 'LIMIT',
        //             side: 'SELL',
        //             quantity: 0.01,
        //             price: 22000,
        //             tradeId: 0,
        //             executedPrice: 0,
        //             executedQuantity: 0,
        //             fee: 0,
        //             feeAsset: 'USDT',
        //             totalExecutedQuantity: 0,
        //             status: 'NEW',
        //             reason: '',
        //             orderTag: 'default',
        //             totalFee: 0,
        //             visible: 0.01,
        //             timestamp: 1657515556799,
        //             reduceOnly: false,
        //             maker: false
        //         }
        //     }
        //
        const order = this.safeValue(message, 'data');
        this.handleOrder(client, order);
    }
    handleOrder(client, message) {
        const topic = 'executionreport';
        const parsed = this.parseWsOrder(message);
        const symbol = this.safeString(parsed, 'symbol');
        const orderId = this.safeString(parsed, 'id');
        if (symbol !== undefined) {
            if (this.orders === undefined) {
                const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            const cachedOrders = this.orders;
            const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
            const order = this.safeValue(orders, orderId);
            if (order !== undefined) {
                const fee = this.safeValue(order, 'fee');
                if (fee !== undefined) {
                    parsed['fee'] = fee;
                }
                const fees = this.safeValue(order, 'fees');
                if (fees !== undefined) {
                    parsed['fees'] = fees;
                }
                parsed['trades'] = this.safeValue(order, 'trades');
                parsed['timestamp'] = this.safeInteger(order, 'timestamp');
                parsed['datetime'] = this.safeString(order, 'datetime');
            }
            cachedOrders.append(parsed);
            client.resolve(this.orders, topic);
            const messageHashSymbol = topic + ':' + symbol;
            client.resolve(this.orders, messageHashSymbol);
        }
    }
    handleMessage(client, message) {
        if (!this.handleErrorMessage(client, message)) {
            return;
        }
        //
        //     { event: 'subscribe', arg: { channel: 'tickers', instId: 'BTC-USDT' } }
        //     { event: 'login', msg: '', code: '0' }
        //
        //     {
        //         arg: { channel: 'tickers', instId: 'BTC-USDT' },
        //         data: [
        //             {
        //                 instType: 'SPOT',
        //                 instId: 'BTC-USDT',
        //                 last: '31500.1',
        //                 lastSz: '0.00001754',
        //                 askPx: '31500.1',
        //                 askSz: '0.00998144',
        //                 bidPx: '31500',
        //                 bidSz: '3.05652439',
        //                 open24h: '31697',
        //                 high24h: '32248',
        //                 low24h: '31165.6',
        //                 sodUtc0: '31385.5',
        //                 sodUtc8: '32134.9',
        //                 volCcy24h: '503403597.38138519',
        //                 vol24h: '15937.10781721',
        //                 ts: '1626526618762'
        //             }
        //         ]
        //     }
        //
        //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
        //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
        //     { event: 'error', msg: 'Invalid OK_ACCESS_KEY', code: '60005' }
        //     {
        //         event: 'error',
        //         msg: 'Illegal request: {"op":"login","args":["de89b035-b233-44b2-9a13-0ccdd00bda0e","7KUcc8YzQhnxBE3K","1626691289","H57N99mBt5NvW8U19FITrPdOxycAERFMaapQWRqLaSE="]}',
        //         code: '60012'
        //     }
        //
        //
        //
        if (message === 'pong') {
            return this.handlePong(client, message);
        }
        // const table = this.safeString (message, 'table');
        // if (table === undefined) {
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const methods = {
            'bbo-tbt': this.handleOrderBook,
            'books': this.handleOrderBook,
            'books5': this.handleOrderBook,
            'books50-l2-tbt': this.handleOrderBook,
            'books-l2-tbt': this.handleOrderBook,
            'tickers': this.handleTicker,
            'trades': this.handleTrades,
        };
        const method = this.safeValue(methods, channel);
        if (method === undefined) {
            if ((channel === null || channel === void 0 ? void 0 : channel.indexOf('candle')) === 0) {
                this.handleOHLCV(client, message);
            }
            else {
                return message;
            }
        }
        else {
            return method.call(this, client, message);
        }
    }
    ping(client) {
        // okex does not support built-in ws protocol-level ping-pong
        // instead it requires custom text-based ping-pong
        return 'ping';
    }
    handlePong(client, message) {
        client.lastPong = this.milliseconds();
        return message;
    }
    handleErrorMessage(client, message) {
        //
        //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
        //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
        //
        const errorCode = this.safeInteger(message, 'code');
        try {
            if (errorCode) {
                const feedback = this.id + ' ' + this.json(message);
                this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
                const messageString = this.safeValue2(message, 'message', 'msg');
                if (messageString !== undefined) {
                    this.throwBroadlyMatchedException(this.exceptions['broad'], messageString, feedback);
                }
            }
        }
        catch (e) {
            if (e instanceof AuthenticationError) {
                const messageHash = 'authenticated';
                client.reject(e, messageHash);
                if (messageHash in client.subscriptions) {
                    delete client.subscriptions[messageHash];
                }
                return false;
            }
        }
        return message;
    }
    handleSubscribe(client, message) {
        //
        //     {
        //         id: '666888',
        //         event: 'subscribe',
        //         success: true,
        //         ts: 1657117712212
        //     }
        //
        return message;
    }
    handleAuth(client, message) {
        //
        //     {
        //         event: 'auth',
        //         success: true,
        //         ts: 1657463158812
        //     }
        //
        const messageHash = 'authenticated';
        const success = this.safeValue(message, 'success');
        if (success) {
            client.resolve(message, messageHash);
        }
        else {
            const error = new AuthenticationError(this.json(message));
            client.reject(error, messageHash);
            // allows further authentication attempts
            if (messageHash in client.subscriptions) {
                delete client.subscriptions['authenticated'];
            }
        }
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class bybit extends bybit$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': true,
                'watchMyTrades': true,
                'watchOHLCV': true,
                'watchOrderBook': true,
                'watchOrders': true,
                'watchTicker': true,
                'watchTickers': false,
                'watchTrades': true,
                'watchPosition': undefined,
            },
            'urls': {
                'api': {
                    'ws': {
                        'public': {
                            'spot': 'wss://stream.{hostname}/v5/public/spot',
                            'inverse': 'wss://stream.{hostname}/v5/public/inverse',
                            'option': 'wss://stream.{hostname}/v5/public/option',
                            'linear': 'wss://stream.{hostname}/v5/public/linear',
                        },
                        'private': {
                            'spot': {
                                'unified': 'wss://stream.{hostname}/v5/private',
                                'nonUnified': 'wss://stream.{hostname}/spot/private/v3',
                            },
                            'contract': 'wss://stream.{hostname}/v5/private',
                            'usdc': 'wss://stream.{hostname}/trade/option/usdc/private/v1',
                        },
                    },
                },
                'test': {
                    'ws': {
                        'public': {
                            'spot': 'wss://stream-testnet.{hostname}/v5/public/spot',
                            'inverse': 'wss://stream-testnet.{hostname}/v5/public/inverse',
                            'linear': 'wss://stream-testnet.{hostname}/v5/public/linear',
                            'option': 'wss://stream-testnet.{hostname}/v5/public/option',
                        },
                        'private': {
                            'spot': {
                                'unified': 'wss://stream-testnet.{hostname}/v5/private',
                                'nonUnified': 'wss://stream-testnet.{hostname}/spot/private/v3',
                            },
                            'contract': 'wss://stream-testnet.{hostname}/v5/private',
                            'usdc': 'wss://stream-testnet.{hostname}/trade/option/usdc/private/v1',
                        },
                    },
                },
            },
            'options': {
                'watchTicker': {
                    'name': 'tickers', // 'tickers' for 24hr statistical ticker or 'tickers_lt' for leverage token ticker
                },
                'spot': {
                    'timeframes': {
                        '1m': '1m',
                        '3m': '3m',
                        '5m': '5m',
                        '15m': '15m',
                        '30m': '30m',
                        '1h': '1h',
                        '2h': '2h',
                        '4h': '4h',
                        '6h': '6h',
                        '12h': '12h',
                        '1d': '1d',
                        '1w': '1w',
                        '1M': '1M',
                    },
                },
                'contract': {
                    'timeframes': {
                        '1m': '1',
                        '3m': '3',
                        '5m': '5',
                        '15m': '15',
                        '30m': '30',
                        '1h': '60',
                        '2h': '120',
                        '4h': '240',
                        '6h': '360',
                        '12h': '720',
                        '1d': 'D',
                        '1w': 'W',
                        '1M': 'M',
                    },
                },
            },
            'streaming': {
                'ping': this.ping,
                'keepAlive': 20000,
            },
            'exceptions': {
                'ws': {
                    'exact': {},
                },
            },
        });
    }
    requestId() {
        const requestId = this.sum(this.safeInteger(this.options, 'requestId', 0), 1);
        this.options['requestId'] = requestId;
        return requestId;
    }
    getUrlByMarketType(symbol = undefined, isPrivate = false, method = undefined, params = {}) {
        const accessibility = isPrivate ? 'private' : 'public';
        let isUsdcSettled = undefined;
        let isSpot = undefined;
        let type = undefined;
        let market = undefined;
        let url = this.urls['api']['ws'];
        if (symbol !== undefined) {
            market = this.market(symbol);
            isUsdcSettled = market['settle'] === 'USDC';
            type = market['type'];
        }
        else {
            [type, params] = this.handleMarketTypeAndParams(method, undefined, params);
            let defaultSettle = this.safeString(this.options, 'defaultSettle');
            defaultSettle = this.safeString2(params, 'settle', 'defaultSettle', defaultSettle);
            isUsdcSettled = (defaultSettle === 'USDC');
        }
        isSpot = (type === 'spot');
        if (isPrivate) {
            url = (isUsdcSettled) ? url[accessibility]['usdc'] : url[accessibility]['contract'];
        }
        else {
            if (isSpot) {
                url = url[accessibility]['spot'];
            }
            else if (type === 'swap') {
                let subType = undefined;
                [subType, params] = this.handleSubTypeAndParams(method, market, params, 'linear');
                url = url[accessibility][subType];
            }
            else {
                // option
                url = url[accessibility]['option'];
            }
        }
        url = this.implodeHostname(url);
        return url;
    }
    cleanParams(params) {
        params = this.omit(params, ['type', 'subType', 'settle', 'defaultSettle', 'unifiedMargin']);
        return params;
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name bybit#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/ticker
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/etp-ticker
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const messageHash = 'ticker:' + market['symbol'];
        const url = this.getUrlByMarketType(symbol, false, params);
        params = this.cleanParams(params);
        const options = this.safeValue(this.options, 'watchTicker', {});
        let topic = this.safeString(options, 'name', 'tickers');
        if (!market['spot'] && topic !== 'tickers') {
            throw new BadRequest(this.id + ' watchTicker() only supports name tickers for contract markets');
        }
        topic += '.' + market['id'];
        const topics = [topic];
        return await this.watchTopics(url, messageHash, topics, params);
    }
    handleTicker(client, message) {
        //
        // linear
        //     {
        //         "topic": "tickers.BTCUSDT",
        //         "type": "snapshot",
        //         "data": {
        //             "symbol": "BTCUSDT",
        //             "tickDirection": "PlusTick",
        //             "price24hPcnt": "0.017103",
        //             "lastPrice": "17216.00",
        //             "prevPrice24h": "16926.50",
        //             "highPrice24h": "17281.50",
        //             "lowPrice24h": "16915.00",
        //             "prevPrice1h": "17238.00",
        //             "markPrice": "17217.33",
        //             "indexPrice": "17227.36",
        //             "openInterest": "68744.761",
        //             "openInterestValue": "1183601235.91",
        //             "turnover24h": "1570383121.943499",
        //             "volume24h": "91705.276",
        //             "nextFundingTime": "1673280000000",
        //             "fundingRate": "-0.000212",
        //             "bid1Price": "17215.50",
        //             "bid1Size": "84.489",
        //             "ask1Price": "17216.00",
        //             "ask1Size": "83.020"
        //         },
        //         "cs": 24987956059,
        //         "ts": 1673272861686
        //     }
        //
        // option
        //     {
        //         "id": "tickers.BTC-6JAN23-17500-C-2480334983-1672917511074",
        //         "topic": "tickers.BTC-6JAN23-17500-C",
        //         "ts": 1672917511074,
        //         "data": {
        //             "symbol": "BTC-6JAN23-17500-C",
        //             "bidPrice": "0",
        //             "bidSize": "0",
        //             "bidIv": "0",
        //             "askPrice": "10",
        //             "askSize": "5.1",
        //             "askIv": "0.514",
        //             "lastPrice": "10",
        //             "highPrice24h": "25",
        //             "lowPrice24h": "5",
        //             "markPrice": "7.86976724",
        //             "indexPrice": "16823.73",
        //             "markPriceIv": "0.4896",
        //             "underlyingPrice": "16815.1",
        //             "openInterest": "49.85",
        //             "turnover24h": "446802.8473",
        //             "volume24h": "26.55",
        //             "totalVolume": "86",
        //             "totalTurnover": "1437431",
        //             "delta": "0.047831",
        //             "gamma": "0.00021453",
        //             "vega": "0.81351067",
        //             "theta": "-19.9115368",
        //             "predictedDeliveryPrice": "0",
        //             "change24h": "-0.33333334"
        //         },
        //         "type": "snapshot"
        //     }
        //
        // spot
        //     {
        //         "topic": "tickers.BTCUSDT",
        //         "ts": 1673853746003,
        //         "type": "snapshot",
        //         "cs": 2588407389,
        //         "data": {
        //             "symbol": "BTCUSDT",
        //             "lastPrice": "21109.77",
        //             "highPrice24h": "21426.99",
        //             "lowPrice24h": "20575",
        //             "prevPrice24h": "20704.93",
        //             "volume24h": "6780.866843",
        //             "turnover24h": "141946527.22907118",
        //             "price24hPcnt": "0.0196",
        //             "usdIndexPrice": "21120.2400136"
        //         }
        //     }
        //
        // lt ticker
        //     {
        //         "topic": "tickers_lt.EOS3LUSDT",
        //         "ts": 1672325446847,
        //         "type": "snapshot",
        //         "data": {
        //             "symbol": "EOS3LUSDT",
        //             "lastPrice": "0.41477848043290448",
        //             "highPrice24h": "0.435285472510871305",
        //             "lowPrice24h": "0.394601507960931382",
        //             "prevPrice24h": "0.431502290172376349",
        //             "price24hPcnt": "-0.0388"
        //         }
        //     }
        //
        const topic = this.safeString(message, 'topic', '');
        const updateType = this.safeString(message, 'type', '');
        const data = this.safeValue(message, 'data', {});
        const isSpot = this.safeString(data, 's') !== undefined;
        let symbol = undefined;
        let parsed = undefined;
        if ((updateType === 'snapshot') || isSpot) {
            parsed = this.parseTicker(data);
            symbol = parsed['symbol'];
        }
        else if (updateType === 'delta') {
            const topicParts = topic.split('.');
            const topicLength = topicParts.length;
            const marketId = this.safeString(topicParts, topicLength - 1);
            const market = this.market(marketId);
            symbol = market['symbol'];
            // update the info in place
            const ticker = this.safeValue(this.tickers, symbol, {});
            const rawTicker = this.safeValue(ticker, 'info', {});
            const merged = this.extend(rawTicker, data);
            parsed = this.parseTicker(merged);
        }
        const timestamp = this.safeInteger(message, 'ts');
        parsed['timestamp'] = timestamp;
        parsed['datetime'] = this.iso8601(timestamp);
        this.tickers[symbol] = parsed;
        const messageHash = 'ticker:' + symbol;
        client.resolve(this.tickers[symbol], messageHash);
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#watchOHLCV
         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/kline
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/etp-kline
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.getUrlByMarketType(symbol, false, params);
        params = this.cleanParams(params);
        let ohlcv = undefined;
        const timeframeId = this.safeString(this.timeframes, timeframe, timeframe);
        const topics = ['kline.' + timeframeId + '.' + market['id']];
        const messageHash = 'kline' + ':' + timeframeId + ':' + symbol;
        ohlcv = await this.watchTopics(url, messageHash, topics, params);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        //
        //     {
        //         "topic": "kline.5.BTCUSDT",
        //         "data": [
        //             {
        //                 "start": 1672324800000,
        //                 "end": 1672325099999,
        //                 "interval": "5",
        //                 "open": "16649.5",
        //                 "close": "16677",
        //                 "high": "16677",
        //                 "low": "16608",
        //                 "volume": "2.081",
        //                 "turnover": "34666.4005",
        //                 "confirm": false,
        //                 "timestamp": 1672324988882
        //             }
        //         ],
        //         "ts": 1672324988882,
        //         "type": "snapshot"
        //     }
        //
        const data = this.safeValue(message, 'data', {});
        const topic = this.safeString(message, 'topic');
        const topicParts = topic.split('.');
        const topicLength = topicParts.length;
        const timeframeId = this.safeString(topicParts, 1);
        const marketId = this.safeString(topicParts, topicLength - 1);
        const isSpot = client.url.indexOf('spot') > -1;
        const marketType = isSpot ? 'spot' : 'contract';
        const market = this.safeMarket(marketId, undefined, undefined, marketType);
        const symbol = market['symbol'];
        const ohlcvsByTimeframe = this.safeValue(this.ohlcvs, symbol);
        if (ohlcvsByTimeframe === undefined) {
            this.ohlcvs[symbol] = {};
        }
        let stored = this.safeValue(ohlcvsByTimeframe, timeframeId);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
            stored = new ArrayCacheByTimestamp(limit);
            this.ohlcvs[symbol][timeframeId] = stored;
        }
        for (let i = 0; i < data.length; i++) {
            const parsed = this.parseWsOHLCV(data[i]);
            stored.append(parsed);
        }
        const messageHash = 'kline' + ':' + timeframeId + ':' + symbol;
        client.resolve(stored, messageHash);
    }
    parseWsOHLCV(ohlcv) {
        //
        //     {
        //         "start": 1670363160000,
        //         "end": 1670363219999,
        //         "interval": "1",
        //         "open": "16987.5",
        //         "close": "16987.5",
        //         "high": "16988",
        //         "low": "16987.5",
        //         "volume": "23.511",
        //         "turnover": "399396.344",
        //         "confirm": false,
        //         "timestamp": 1670363219614
        //     }
        //
        return [
            this.safeInteger(ohlcv, 'timestamp'),
            this.safeNumber(ohlcv, 'open'),
            this.safeNumber(ohlcv, 'high'),
            this.safeNumber(ohlcv, 'low'),
            this.safeNumber(ohlcv, 'close'),
            this.safeNumber2(ohlcv, 'volume', 'turnover'),
        ];
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return.
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.getUrlByMarketType(symbol, false, params);
        params = this.cleanParams(params);
        const messageHash = 'orderbook' + ':' + symbol;
        if (limit === undefined) {
            if (market['spot']) {
                limit = 50;
            }
            else {
                limit = 500;
            }
        }
        else {
            if (!market['spot']) {
                // bybit only support limit 1, 50, 200, 500 for contract
                if ((limit !== 1) && (limit !== 50) && (limit !== 200) && (limit !== 500)) {
                    throw new BadRequest(this.id + ' watchOrderBook() can only use limit 1, 50, 200 and 500.');
                }
            }
        }
        const topics = ['orderbook.' + limit.toString() + '.' + market['id']];
        const orderbook = await this.watchTopics(url, messageHash, topics, params);
        return orderbook.limit();
    }
    handleOrderBook(client, message) {
        //
        //     {
        //         "topic": "orderbook.50.BTCUSDT",
        //         "type": "snapshot",
        //         "ts": 1672304484978,
        //         "data": {
        //             "s": "BTCUSDT",
        //             "b": [
        //                 ...,
        //                 [
        //                     "16493.50",
        //                     "0.006"
        //                 ],
        //                 [
        //                     "16493.00",
        //                     "0.100"
        //                 ]
        //             ],
        //             "a": [
        //                 [
        //                     "16611.00",
        //                     "0.029"
        //                 ],
        //                 [
        //                     "16612.00",
        //                     "0.213"
        //                 ],
        //             ],
        //             "u": 18521288,
        //             "seq": 7961638724
        //         }
        //     }
        //
        const isSpot = client.url.indexOf('spot') >= 0;
        const type = this.safeString(message, 'type');
        const isSnapshot = (type === 'snapshot');
        const data = this.safeValue(message, 'data', {});
        const marketId = this.safeString(data, 's');
        const marketType = isSpot ? 'spot' : 'contract';
        const market = this.safeMarket(marketId, undefined, undefined, marketType);
        const symbol = market['symbol'];
        const timestamp = this.safeInteger(message, 'ts');
        let orderbook = this.safeValue(this.orderbooks, symbol);
        if (orderbook === undefined) {
            orderbook = this.orderBook();
        }
        if (isSnapshot) {
            const snapshot = this.parseOrderBook(data, symbol, timestamp, 'b', 'a');
            orderbook.reset(snapshot);
        }
        else {
            const asks = this.safeValue(data, 'a', []);
            const bids = this.safeValue(data, 'b', []);
            this.handleDeltas(orderbook['asks'], asks);
            this.handleDeltas(orderbook['bids'], bids);
            orderbook['timestamp'] = timestamp;
            orderbook['datetime'] = this.iso8601(timestamp);
        }
        const messageHash = 'orderbook' + ':' + symbol;
        this.orderbooks[symbol] = orderbook;
        client.resolve(orderbook, messageHash);
    }
    handleDelta(bookside, delta) {
        const bidAsk = this.parseBidAsk(delta, 0, 1);
        bookside.storeArray(bidAsk);
    }
    handleDeltas(bookside, deltas) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(bookside, deltas[i]);
        }
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#watchTrades
         * @description watches information on multiple trades made in a market
         * @see https://bybit-exchange.github.io/docs/v5/websocket/public/trade
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.getUrlByMarketType(symbol, false, params);
        params = this.cleanParams(params);
        const messageHash = 'trade:' + symbol;
        const topic = 'publicTrade.' + market['id'];
        const trades = await this.watchTopics(url, messageHash, [topic], params);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    handleTrades(client, message) {
        //
        //     {
        //         "topic": "publicTrade.BTCUSDT",
        //         "type": "snapshot",
        //         "ts": 1672304486868,
        //         "data": [
        //             {
        //                 "T": 1672304486865,
        //                 "s": "BTCUSDT",
        //                 "S": "Buy",
        //                 "v": "0.001",
        //                 "p": "16578.50",
        //                 "L": "PlusTick",
        //                 "i": "20f43950-d8dd-5b31-9112-a178eb6023af",
        //                 "BT": false
        //             }
        //         ]
        //     }
        //
        const data = this.safeValue(message, 'data', {});
        const topic = this.safeString(message, 'topic');
        const trades = data;
        const parts = topic.split('.');
        const isSpot = client.url.indexOf('spot') >= 0;
        const marketType = (isSpot) ? 'spot' : 'contract';
        const marketId = this.safeString(parts, 1);
        const market = this.safeMarket(marketId, undefined, undefined, marketType);
        const symbol = market['symbol'];
        let stored = this.safeValue(this.trades, symbol);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            stored = new ArrayCache(limit);
            this.trades[symbol] = stored;
        }
        for (let j = 0; j < trades.length; j++) {
            const parsed = this.parseWsTrade(trades[j], market);
            stored.append(parsed);
        }
        const messageHash = 'trade' + ':' + symbol;
        client.resolve(stored, messageHash);
    }
    parseWsTrade(trade, market = undefined) {
        //
        // public
        //    {
        //         "T": 1672304486865,
        //         "s": "BTCUSDT",
        //         "S": "Buy",
        //         "v": "0.001",
        //         "p": "16578.50",
        //         "L": "PlusTick",
        //         "i": "20f43950-d8dd-5b31-9112-a178eb6023af",
        //         "BT": false
        //     }
        //
        // spot private
        //     {
        //         "e": "ticketInfo",
        //         "E": "1662348310386",
        //         "s": "BTCUSDT",
        //         "q": "0.001007",
        //         "t": "1662348310373",
        //         "p": "19842.02",
        //         "T": "2100000000002220938",
        //         "o": "1238261807653647872",
        //         "c": "spotx008",
        //         "O": "1238225004531834368",
        //         "a": "533287",
        //         "A": "642908",
        //         "m": false,
        //         "S": "BUY"
        //     }
        //
        const id = this.safeStringN(trade, ['i', 'T', 'v']);
        const isContract = ('BT' in trade);
        let marketType = isContract ? 'contract' : 'spot';
        if (market !== undefined) {
            marketType = market['type'];
        }
        const marketId = this.safeString(trade, 's');
        market = this.safeMarket(marketId, market, undefined, marketType);
        const symbol = market['symbol'];
        const timestamp = this.safeInteger2(trade, 't', 'T');
        let side = this.safeStringLower(trade, 'S');
        let takerOrMaker = undefined;
        const m = this.safeValue(trade, 'm');
        if (side === undefined) {
            side = m ? 'buy' : 'sell';
        }
        else {
            // spot private
            takerOrMaker = m;
        }
        const price = this.safeString(trade, 'p');
        const amount = this.safeString2(trade, 'q', 'v');
        const orderId = this.safeString(trade, 'o');
        return this.safeTrade({
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': orderId,
            'type': undefined,
            'side': side,
            'takerOrMaker': takerOrMaker,
            'price': price,
            'amount': amount,
            'cost': undefined,
            'fee': undefined,
        }, market);
    }
    getPrivateType(url) {
        if (url.indexOf('spot') >= 0) {
            return 'spot';
        }
        else if (url.indexOf('v5/private') >= 0) {
            return 'unified';
        }
        else {
            return 'usdc';
        }
    }
    async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#watchMyTrades
         * @description watches information on multiple trades made by the user
         * @see https://bybit-exchange.github.io/docs/v5/websocket/private/execution
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @param {boolean} params.unifiedMargin use unified margin account
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        const method = 'watchMyTrades';
        let messageHash = 'myTrades';
        await this.loadMarkets();
        if (symbol !== undefined) {
            symbol = this.symbol(symbol);
            messageHash += ':' + symbol;
        }
        const url = this.getUrlByMarketType(symbol, true, method, params);
        await this.authenticate(url);
        const topicByMarket = {
            'spot': 'ticketInfo',
            'unified': 'execution',
            'usdc': 'user.openapi.perp.trade',
        };
        const topic = this.safeValue(topicByMarket, this.getPrivateType(url));
        const trades = await this.watchTopics(url, messageHash, [topic], params);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    handleMyTrades(client, message) {
        //
        // spot
        //    {
        //        "type": "snapshot",
        //        "topic": "ticketInfo",
        //        "ts": "1662348310388",
        //        "data": [
        //            {
        //                "e": "ticketInfo",
        //                "E": "1662348310386",
        //                "s": "BTCUSDT",
        //                "q": "0.001007",
        //                "t": "1662348310373",
        //                "p": "19842.02",
        //                "T": "2100000000002220938",
        //                "o": "1238261807653647872",
        //                "c": "spotx008",
        //                "O": "1238225004531834368",
        //                "a": "533287",
        //                "A": "642908",
        //                "m": false,
        //                "S": "BUY"
        //            }
        //        ]
        //    }
        // unified
        //     {
        //         "id": "592324803b2785-26fa-4214-9963-bdd4727f07be",
        //         "topic": "execution",
        //         "creationTime": 1672364174455,
        //         "data": [
        //             {
        //                 "category": "linear",
        //                 "symbol": "XRPUSDT",
        //                 "execFee": "0.005061",
        //                 "execId": "7e2ae69c-4edf-5800-a352-893d52b446aa",
        //                 "execPrice": "0.3374",
        //                 "execQty": "25",
        //                 "execType": "Trade",
        //                 "execValue": "8.435",
        //                 "isMaker": false,
        //                 "feeRate": "0.0006",
        //                 "tradeIv": "",
        //                 "markIv": "",
        //                 "blockTradeId": "",
        //                 "markPrice": "0.3391",
        //                 "indexPrice": "",
        //                 "underlyingPrice": "",
        //                 "leavesQty": "0",
        //                 "orderId": "f6e324ff-99c2-4e89-9739-3086e47f9381",
        //                 "orderLinkId": "",
        //                 "orderPrice": "0.3207",
        //                 "orderQty": "25",
        //                 "orderType": "Market",
        //                 "stopOrderType": "UNKNOWN",
        //                 "side": "Sell",
        //                 "execTime": "1672364174443",
        //                 "isLeverage": "0"
        //             }
        //         ]
        //     }
        //
        const topic = this.safeString(message, 'topic');
        const spot = topic === 'ticketInfo';
        let data = this.safeValue(message, 'data', []);
        if (!Array.isArray(data)) {
            data = this.safeValue(data, 'result', []);
        }
        if (this.myTrades === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            this.myTrades = new ArrayCacheBySymbolById(limit);
        }
        const trades = this.myTrades;
        const symbols = {};
        const method = spot ? 'parseWsTrade' : 'parseTrade';
        for (let i = 0; i < data.length; i++) {
            const rawTrade = data[i];
            const parsed = this[method](rawTrade);
            const symbol = parsed['symbol'];
            symbols[symbol] = true;
            trades.append(parsed);
        }
        const keys = Object.keys(symbols);
        for (let i = 0; i < keys.length; i++) {
            const messageHash = 'myTrades:' + keys[i];
            client.resolve(trades, messageHash);
        }
        // non-symbol specific
        const messageHash = 'myTrades';
        client.resolve(trades, messageHash);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bybit#watchOrders
         * @description watches information on multiple orders made by the user
         * @see https://bybit-exchange.github.io/docs/v5/websocket/private/order
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        const method = 'watchOrders';
        let messageHash = 'orders';
        if (symbol !== undefined) {
            symbol = this.symbol(symbol);
            messageHash += ':' + symbol;
        }
        const url = this.getUrlByMarketType(symbol, true, method, params);
        await this.authenticate(url);
        const topicsByMarket = {
            'spot': ['order', 'stopOrder'],
            'unified': ['order'],
            'usdc': ['user.openapi.perp.order'],
        };
        const topics = this.safeValue(topicsByMarket, this.getPrivateType(url));
        const orders = await this.watchTopics(url, messageHash, topics, params);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    handleOrder(client, message, subscription = undefined) {
        //
        //     spot
        //     {
        //         "type": "snapshot",
        //         "topic": "order",
        //         "ts": "1662348310441",
        //         "data": [
        //             {
        //                 "e": "order",
        //                 "E": "1662348310441",
        //                 "s": "BTCUSDT",
        //                 "c": "spotx008",
        //                 "S": "BUY",
        //                 "o": "MARKET_OF_QUOTE",
        //                 "f": "GTC",
        //                 "q": "20",
        //                 "p": "0",
        //                 "X": "CANCELED",
        //                 "i": "1238261807653647872",
        //                 "M": "1238225004531834368",
        //                 "l": "0.001007",
        //                 "z": "0.001007",
        //                 "L": "19842.02",
        //                 "n": "0",
        //                 "N": "BTC",
        //                 "u": true,
        //                 "w": true,
        //                 "m": false,
        //                 "O": "1662348310368",
        //                 "Z": "19.98091414",
        //                 "A": "0",
        //                 "C": false,
        //                 "v": "0",
        //                 "d": "NO_LIQ",
        //                 "t": "2100000000002220938"
        //             }
        //         ]
        //     }
        // unified
        //     {
        //         "id": "5923240c6880ab-c59f-420b-9adb-3639adc9dd90",
        //         "topic": "order",
        //         "creationTime": 1672364262474,
        //         "data": [
        //             {
        //                 "symbol": "ETH-30DEC22-1400-C",
        //                 "orderId": "5cf98598-39a7-459e-97bf-76ca765ee020",
        //                 "side": "Sell",
        //                 "orderType": "Market",
        //                 "cancelType": "UNKNOWN",
        //                 "price": "72.5",
        //                 "qty": "1",
        //                 "orderIv": "",
        //                 "timeInForce": "IOC",
        //                 "orderStatus": "Filled",
        //                 "orderLinkId": "",
        //                 "lastPriceOnCreated": "",
        //                 "reduceOnly": false,
        //                 "leavesQty": "",
        //                 "leavesValue": "",
        //                 "cumExecQty": "1",
        //                 "cumExecValue": "75",
        //                 "avgPrice": "75",
        //                 "blockTradeId": "",
        //                 "positionIdx": 0,
        //                 "cumExecFee": "0.358635",
        //                 "createdTime": "1672364262444",
        //                 "updatedTime": "1672364262457",
        //                 "rejectReason": "EC_NoError",
        //                 "stopOrderType": "",
        //                 "triggerPrice": "",
        //                 "takeProfit": "",
        //                 "stopLoss": "",
        //                 "tpTriggerBy": "",
        //                 "slTriggerBy": "",
        //                 "triggerDirection": 0,
        //                 "triggerBy": "",
        //                 "closeOnTrigger": false,
        //                 "category": "option"
        //             }
        //         ]
        //     }
        //
        const type = this.safeString(message, 'type', '');
        if (this.orders === undefined) {
            const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        const orders = this.orders;
        let rawOrders = [];
        let parser = undefined;
        if (type === 'snapshot') {
            rawOrders = this.safeValue(message, 'data', []);
            parser = 'parseWsSpotOrder';
        }
        else {
            parser = 'parseContractOrder';
            rawOrders = this.safeValue(message, 'data', []);
            rawOrders = this.safeValue(rawOrders, 'result', rawOrders);
        }
        const symbols = {};
        for (let i = 0; i < rawOrders.length; i++) {
            const parsed = this[parser](rawOrders[i]);
            const symbol = parsed['symbol'];
            symbols[symbol] = true;
            orders.append(parsed);
        }
        const symbolsArray = Object.keys(symbols);
        for (let i = 0; i < symbolsArray.length; i++) {
            const messageHash = 'orders:' + symbolsArray[i];
            client.resolve(orders, messageHash);
        }
        const messageHash = 'orders';
        client.resolve(orders, messageHash);
    }
    parseWsSpotOrder(order, market = undefined) {
        //
        //    {
        //        e: 'executionReport',
        //        E: '1653297251061', // timestamp
        //        s: 'LTCUSDT', // symbol
        //        c: '1653297250740', // user id
        //        S: 'SELL', // side
        //        o: 'MARKET_OF_BASE', // order type
        //        f: 'GTC', // time in force
        //        q: '0.16233', // quantity
        //        p: '0', // price
        //        X: 'NEW', // status
        //        i: '1162336018974750208', // order id
        //        M: '0',
        //        l: '0', // last filled
        //        z: '0', // total filled
        //        L: '0', // last traded price
        //        n: '0', // trading fee
        //        N: '', // fee asset
        //        u: true,
        //        w: true,
        //        m: false, // is limit_maker
        //        O: '1653297251042', // order creation
        //        Z: '0', // total filled
        //        A: '0', // account id
        //        C: false, // is close
        //        v: '0', // leverage
        //        d: 'NO_LIQ'
        //    }
        //
        const id = this.safeString(order, 'i');
        const marketId = this.safeString(order, 's');
        const symbol = this.safeSymbol(marketId, market, undefined, 'spot');
        const timestamp = this.safeInteger(order, 'O');
        let price = this.safeString(order, 'p');
        if (price === '0') {
            price = undefined; // market orders
        }
        const filled = this.safeString(order, 'z');
        const status = this.parseOrderStatus(this.safeString(order, 'X'));
        const side = this.safeStringLower(order, 'S');
        const lastTradeTimestamp = this.safeString(order, 'E');
        const timeInForce = this.safeString(order, 'f');
        let amount = undefined;
        const cost = this.safeString(order, 'Z');
        const q = this.safeString(order, 'q');
        let type = this.safeStringLower(order, 'o');
        if (type.indexOf('quote') >= 0) {
            amount = filled;
        }
        else {
            amount = q;
        }
        if (type.indexOf('market') >= 0) {
            type = 'market';
        }
        let fee = undefined;
        const feeCost = this.safeString(order, 'n');
        if (feeCost !== undefined && feeCost !== '0') {
            const feeCurrencyId = this.safeString(order, 'N');
            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            };
        }
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': this.safeString(order, 'c'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': undefined,
            'side': side,
            'price': price,
            'stopPrice': undefined,
            'triggerPrice': undefined,
            'amount': amount,
            'cost': cost,
            'average': undefined,
            'filled': filled,
            'remaining': undefined,
            'status': status,
            'fee': fee,
        }, market);
    }
    async watchBalance(params = {}) {
        /**
         * @method
         * @name bybit#watchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://bybit-exchange.github.io/docs/v5/websocket/private/wallet
         * @param {object} params extra parameters specific to the bybit api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const method = 'watchBalance';
        let messageHash = 'balances';
        let type = undefined;
        [type, params] = this.handleMarketTypeAndParams('watchBalance', undefined, params);
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('watchBalance', undefined, params);
        const unified = await this.isUnifiedEnabled();
        const isUnifiedMargin = this.safeValue(unified, 0, false);
        const isUnifiedAccount = this.safeValue(unified, 1, false);
        const url = this.getUrlByMarketType(undefined, true, method, params);
        await this.authenticate(url);
        const topicByMarket = {
            'spot': 'outboundAccountInfo',
            'unified': 'wallet',
        };
        if (isUnifiedAccount) {
            // unified account
            if (subType === 'inverse') {
                messageHash += ':contract';
            }
            else {
                messageHash += ':unified';
            }
        }
        if (!isUnifiedMargin && !isUnifiedAccount) {
            // normal account using v5
            if (type === 'spot') {
                messageHash += ':spot';
            }
            else {
                messageHash += ':contract';
            }
        }
        if (isUnifiedMargin) {
            // unified margin account using v5
            if (type === 'spot') {
                messageHash += ':spot';
            }
            else {
                if (subType === 'linear') {
                    messageHash += ':unified';
                }
                else {
                    messageHash += ':contract';
                }
            }
        }
        const topics = [this.safeValue(topicByMarket, this.getPrivateType(url))];
        return await this.watchTopics(url, messageHash, topics, params);
    }
    handleBalance(client, message) {
        //
        // spot
        //    {
        //        "type": "snapshot",
        //        "topic": "outboundAccountInfo",
        //        "ts": "1662107217641",
        //        "data": [
        //            {
        //                "e": "outboundAccountInfo",
        //                "E": "1662107217640",
        //                "T": true,
        //                "W": true,
        //                "D": true,
        //                "B": [
        //                    {
        //                        "a": "USDT",
        //                        "f": "176.81254174",
        //                        "l": "201.575"
        //                    }
        //                ]
        //            }
        //        ]
        //    }
        // unified
        //     {
        //         "id": "5923242c464be9-25ca-483d-a743-c60101fc656f",
        //         "topic": "wallet",
        //         "creationTime": 1672364262482,
        //         "data": [
        //             {
        //                 "accountIMRate": "0.016",
        //                 "accountMMRate": "0.003",
        //                 "totalEquity": "12837.78330098",
        //                 "totalWalletBalance": "12840.4045924",
        //                 "totalMarginBalance": "12837.78330188",
        //                 "totalAvailableBalance": "12632.05767702",
        //                 "totalPerpUPL": "-2.62129051",
        //                 "totalInitialMargin": "205.72562486",
        //                 "totalMaintenanceMargin": "39.42876721",
        //                 "coin": [
        //                     {
        //                         "coin": "USDC",
        //                         "equity": "200.62572554",
        //                         "usdValue": "200.62572554",
        //                         "walletBalance": "201.34882644",
        //                         "availableToWithdraw": "0",
        //                         "availableToBorrow": "1500000",
        //                         "borrowAmount": "0",
        //                         "accruedInterest": "0",
        //                         "totalOrderIM": "0",
        //                         "totalPositionIM": "202.99874213",
        //                         "totalPositionMM": "39.14289747",
        //                         "unrealisedPnl": "74.2768991",
        //                         "cumRealisedPnl": "-209.1544627",
        //                         "bonus": "0"
        //                     },
        //                     {
        //                         "coin": "BTC",
        //                         "equity": "0.06488393",
        //                         "usdValue": "1023.08402268",
        //                         "walletBalance": "0.06488393",
        //                         "availableToWithdraw": "0.06488393",
        //                         "availableToBorrow": "2.5",
        //                         "borrowAmount": "0",
        //                         "accruedInterest": "0",
        //                         "totalOrderIM": "0",
        //                         "totalPositionIM": "0",
        //                         "totalPositionMM": "0",
        //                         "unrealisedPnl": "0",
        //                         "cumRealisedPnl": "0",
        //                         "bonus": "0"
        //                     },
        //                     {
        //                         "coin": "ETH",
        //                         "equity": "0",
        //                         "usdValue": "0",
        //                         "walletBalance": "0",
        //                         "availableToWithdraw": "0",
        //                         "availableToBorrow": "26",
        //                         "borrowAmount": "0",
        //                         "accruedInterest": "0",
        //                         "totalOrderIM": "0",
        //                         "totalPositionIM": "0",
        //                         "totalPositionMM": "0",
        //                         "unrealisedPnl": "0",
        //                         "cumRealisedPnl": "0",
        //                         "bonus": "0"
        //                     },
        //                     {
        //                         "coin": "USDT",
        //                         "equity": "11726.64664904",
        //                         "usdValue": "11613.58597018",
        //                         "walletBalance": "11728.54414904",
        //                         "availableToWithdraw": "11723.92075829",
        //                         "availableToBorrow": "2500000",
        //                         "borrowAmount": "0",
        //                         "accruedInterest": "0",
        //                         "totalOrderIM": "0",
        //                         "totalPositionIM": "2.72589075",
        //                         "totalPositionMM": "0.28576575",
        //                         "unrealisedPnl": "-1.8975",
        //                         "cumRealisedPnl": "0.64782276",
        //                         "bonus": "0"
        //                     },
        //                     {
        //                         "coin": "EOS3L",
        //                         "equity": "215.0570412",
        //                         "usdValue": "0",
        //                         "walletBalance": "215.0570412",
        //                         "availableToWithdraw": "215.0570412",
        //                         "availableToBorrow": "0",
        //                         "borrowAmount": "0",
        //                         "accruedInterest": "",
        //                         "totalOrderIM": "0",
        //                         "totalPositionIM": "0",
        //                         "totalPositionMM": "0",
        //                         "unrealisedPnl": "0",
        //                         "cumRealisedPnl": "0",
        //                         "bonus": "0"
        //                     },
        //                     {
        //                         "coin": "BIT",
        //                         "equity": "1.82",
        //                         "usdValue": "0.48758257",
        //                         "walletBalance": "1.82",
        //                         "availableToWithdraw": "1.82",
        //                         "availableToBorrow": "0",
        //                         "borrowAmount": "0",
        //                         "accruedInterest": "",
        //                         "totalOrderIM": "0",
        //                         "totalPositionIM": "0",
        //                         "totalPositionMM": "0",
        //                         "unrealisedPnl": "0",
        //                         "cumRealisedPnl": "0",
        //                         "bonus": "0"
        //                     }
        //                 ],
        //                 "accountType": "UNIFIED"
        //             }
        //         ]
        //     }
        //
        if (this.balance === undefined) {
            this.balance = {};
        }
        let messageHash = 'balance';
        const topic = this.safeValue(message, 'topic');
        let info = undefined;
        let rawBalances = [];
        let account = undefined;
        if (topic === 'outboundAccountInfo') {
            account = 'spot';
            const data = this.safeValue(message, 'data', []);
            for (let i = 0; i < data.length; i++) {
                const B = this.safeValue(data[i], 'B', []);
                rawBalances = this.arrayConcat(rawBalances, B);
            }
            info = rawBalances;
        }
        if (topic === 'wallet') {
            const data = this.safeValue(message, 'data', {});
            for (let i = 0; i < data.length; i++) {
                const result = this.safeValue(data, 0, {});
                account = this.safeStringLower(result, 'accountType');
                rawBalances = this.arrayConcat(rawBalances, this.safeValue(result, 'coin', []));
            }
            info = data;
        }
        for (let i = 0; i < rawBalances.length; i++) {
            this.parseWsBalance(rawBalances[i], account);
        }
        if (account !== undefined) {
            if (this.safeValue(this.balance, account) === undefined) {
                this.balance[account] = {};
            }
            this.balance[account]['info'] = info;
            const timestamp = this.safeInteger(message, 'ts');
            this.balance[account]['timestamp'] = timestamp;
            this.balance[account]['datetime'] = this.iso8601(timestamp);
            this.balance[account] = this.safeBalance(this.balance[account]);
            messageHash = 'balances:' + account;
            client.resolve(this.balance[account], messageHash);
        }
        else {
            this.balance['info'] = info;
            const timestamp = this.safeInteger(message, 'ts');
            this.balance['timestamp'] = timestamp;
            this.balance['datetime'] = this.iso8601(timestamp);
            this.balance = this.safeBalance(this.balance);
            messageHash = 'balances';
            client.resolve(this.balance, messageHash);
        }
    }
    parseWsBalance(balance, accountType = undefined) {
        //
        // spot
        //    {
        //        "a": "USDT",
        //        "f": "176.81254174",
        //        "l": "201.575"
        //    }
        // unified
        //     {
        //         "coin": "BTC",
        //         "equity": "0.06488393",
        //         "usdValue": "1023.08402268",
        //         "walletBalance": "0.06488393",
        //         "availableToWithdraw": "0.06488393",
        //         "availableToBorrow": "2.5",
        //         "borrowAmount": "0",
        //         "accruedInterest": "0",
        //         "totalOrderIM": "0",
        //         "totalPositionIM": "0",
        //         "totalPositionMM": "0",
        //         "unrealisedPnl": "0",
        //         "cumRealisedPnl": "0",
        //         "bonus": "0"
        //     }
        //
        const account = this.account();
        const currencyId = this.safeString2(balance, 'a', 'coin');
        const code = this.safeCurrencyCode(currencyId);
        account['free'] = this.safeStringN(balance, ['availableToWithdraw', 'f', 'free', 'availableToWithdraw']);
        account['used'] = this.safeString2(balance, 'l', 'locked');
        account['total'] = this.safeString(balance, 'walletBalance');
        if (accountType !== undefined) {
            if (this.safeValue(this.balance, accountType) === undefined) {
                this.balance[accountType] = {};
            }
            this.balance[accountType][code] = account;
        }
        else {
            this.balance[code] = account;
        }
    }
    async watchTopics(url, messageHash, topics = [], params = {}) {
        const request = {
            'op': 'subscribe',
            'req_id': this.requestId(),
            'args': topics,
        };
        const message = this.extend(request, params);
        return await this.watch(url, messageHash, message, messageHash);
    }
    authenticate(url, params = {}) {
        this.checkRequiredCredentials();
        const messageHash = 'authenticated';
        const client = this.client(url);
        let future = this.safeValue(client.subscriptions, messageHash);
        if (future === undefined) {
            const expiresInt = this.milliseconds() + 10000;
            const expires = expiresInt.toString();
            const path = 'GET/realtime';
            const auth = path + expires;
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'hex');
            const request = {
                'op': 'auth',
                'args': [
                    this.apiKey, expires, signature,
                ],
            };
            const message = this.extend(request, params);
            future = this.watch(url, messageHash, message);
            client.subscriptions[messageHash] = future;
        }
        return future;
    }
    handleErrorMessage(client, message) {
        //
        //   {
        //       success: false,
        //       ret_msg: 'error:invalid op',
        //       conn_id: '5e079fdd-9c7f-404d-9dbf-969d650838b5',
        //       request: { op: '', args: null }
        //   }
        //
        // auth error
        //
        //   {
        //       success: false,
        //       ret_msg: 'error:USVC1111',
        //       conn_id: 'e73770fb-a0dc-45bd-8028-140e20958090',
        //       request: {
        //         op: 'auth',
        //         args: [
        //           '9rFT6uR4uz9Imkw4Wx',
        //           '1653405853543',
        //           '542e71bd85597b4db0290f0ce2d13ed1fd4bb5df3188716c1e9cc69a879f7889'
        //         ]
        //   }
        //
        //   { code: '-10009', desc: 'Invalid period!' }
        //
        const code = this.safeString2(message, 'code', 'ret_code');
        try {
            if (code !== undefined) {
                const feedback = this.id + ' ' + this.json(message);
                this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);
            }
            const success = this.safeValue(message, 'success');
            if (success !== undefined && !success) {
                const ret_msg = this.safeString(message, 'ret_msg');
                const request = this.safeValue(message, 'request', {});
                const op = this.safeString(request, 'op');
                if (op === 'auth') {
                    throw new AuthenticationError('Authentication failed: ' + ret_msg);
                }
                else {
                    throw new ExchangeError(this.id + ' ' + ret_msg);
                }
            }
            return false;
        }
        catch (error) {
            if (error instanceof AuthenticationError) {
                const messageHash = 'authenticated';
                client.reject(error, messageHash);
                if (messageHash in client.subscriptions) {
                    delete client.subscriptions[messageHash];
                }
            }
            else {
                client.reject(error);
            }
            return true;
        }
    }
    handleMessage(client, message) {
        if (this.handleErrorMessage(client, message)) {
            return;
        }
        // contract pong
        const ret_msg = this.safeString(message, 'ret_msg');
        if (ret_msg === 'pong') {
            this.handlePong(client, message);
            return;
        }
        // spot pong
        const pong = this.safeInteger(message, 'pong');
        if (pong !== undefined) {
            this.handlePong(client, message);
            return;
        }
        // pong
        const op = this.safeString(message, 'op');
        if (op === 'pong') {
            this.handlePong(client, message);
            return;
        }
        const event = this.safeString(message, 'event');
        if (event === 'sub') {
            this.handleSubscriptionStatus(client, message);
            return;
        }
        const topic = this.safeString(message, 'topic', '');
        const methods = {
            'orderbook': this.handleOrderBook,
            'kline': this.handleOHLCV,
            'order': this.handleOrder,
            'stopOrder': this.handleOrder,
            'ticker': this.handleTicker,
            'trade': this.handleTrades,
            'publicTrade': this.handleTrades,
            'depth': this.handleOrderBook,
            'wallet': this.handleBalance,
            'outboundAccountInfo': this.handleBalance,
            'execution': this.handleMyTrades,
            'ticketInfo': this.handleMyTrades,
            'user.openapi.perp.trade': this.handleMyTrades,
        };
        const exacMethod = this.safeValue(methods, topic);
        if (exacMethod !== undefined) {
            exacMethod.call(this, client, message);
            return;
        }
        const keys = Object.keys(methods);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (topic.indexOf(keys[i]) >= 0) {
                const method = methods[key];
                method.call(this, client, message);
                return;
            }
        }
        // unified auth acknowledgement
        const type = this.safeString(message, 'type');
        if ((op === 'auth') || (type === 'AUTH_RESP')) {
            this.handleAuthenticate(client, message);
        }
    }
    ping(client) {
        return {
            'req_id': this.requestId(),
            'op': 'ping',
        };
    }
    handlePong(client, message) {
        //
        //   {
        //       success: true,
        //       ret_msg: 'pong',
        //       conn_id: 'db3158a0-8960-44b9-a9de-ac350ee13158',
        //       request: { op: 'ping', args: null }
        //   }
        //
        //   { pong: 1653296711335 }
        //
        client.lastPong = this.safeInteger(message, 'pong');
        return message;
    }
    handleAuthenticate(client, message) {
        //
        //    {
        //        success: true,
        //        ret_msg: '',
        //        op: 'auth',
        //        conn_id: 'ce3dpomvha7dha97tvp0-2xh'
        //    }
        //
        const success = this.safeValue(message, 'success');
        const messageHash = 'authenticated';
        if (success) {
            client.resolve(message, messageHash);
        }
        else {
            const error = new AuthenticationError(this.id + ' ' + this.json(message));
            client.reject(error, messageHash);
            if (messageHash in client.subscriptions) {
                delete client.subscriptions[messageHash];
            }
        }
        return message;
    }
    handleSubscriptionStatus(client, message) {
        //
        //    {
        //        topic: 'kline',
        //        event: 'sub',
        //        params: {
        //          symbol: 'LTCUSDT',
        //          binary: 'false',
        //          klineType: '1m',
        //          symbolName: 'LTCUSDT'
        //        },
        //        code: '0',
        //        msg: 'Success'
        //    }
        //
        return message;
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class okx extends okx$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchTicker': true,
                // 'watchTickers': false, // for now
                'watchOrderBook': true,
                'watchTrades': true,
                'watchBalance': true,
                'watchOHLCV': true,
                'watchOrders': true,
            },
            'urls': {
                'api': {
                    'ws': {
                        'public': 'wss://ws.okx.com:8443/ws/v5/public',
                        'private': 'wss://ws.okx.com:8443/ws/v5/private', // wss://wsaws.okx.com:8443/ws/v5/private
                    },
                },
                'test': {
                    'ws': {
                        'public': 'wss://wspap.okx.com:8443/ws/v5/public?brokerId=9999',
                        'private': 'wss://wspap.okx.com:8443/ws/v5/private?brokerId=9999',
                    },
                },
            },
            'options': {
                'watchOrderBook': {
                    //
                    // bbo-tbt
                    // 1. Newly added channel that sends tick-by-tick Level 1 data
                    // 2. All API users can subscribe
                    // 3. Public depth channel, verification not required
                    //
                    // books-l2-tbt
                    // 1. Only users who're VIP5 and above can subscribe
                    // 2. Identity verification required before subscription
                    //
                    // books50-l2-tbt
                    // 1. Only users who're VIP4 and above can subscribe
                    // 2. Identity verification required before subscription
                    //
                    // books
                    // 1. All API users can subscribe
                    // 2. Public depth channel, verification not required
                    //
                    // books5
                    // 1. All API users can subscribe
                    // 2. Public depth channel, verification not required
                    // 3. Data feeds will be delivered every 100ms (vs. every 200ms now)
                    //
                    'depth': 'books',
                },
                'watchBalance': 'spot',
                'ws': {
                // 'inflate': true,
                },
                'checksum': true,
            },
            'streaming': {
                // okex does not support built-in ws protocol-level ping-pong
                // instead it requires a custom text-based ping-pong
                'ping': this.ping,
                'keepAlive': 20000,
            },
        });
    }
    async subscribe(access, channel, symbol, params = {}) {
        await this.loadMarkets();
        const url = this.urls['api']['ws'][access];
        let messageHash = channel;
        const firstArgument = {
            'channel': channel,
        };
        if (symbol !== undefined) {
            const market = this.market(symbol);
            messageHash += ':' + market['id'];
            firstArgument['instId'] = market['id'];
        }
        const request = {
            'op': 'subscribe',
            'args': [
                this.deepExtend(firstArgument, params),
            ],
        };
        return await this.watch(url, messageHash, request, messageHash);
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#watchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        const trades = await this.subscribe('public', 'trades', symbol, params);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    handleTrades(client, message) {
        //
        //     {
        //         arg: { channel: 'trades', instId: 'BTC-USDT' },
        //         data: [
        //             {
        //                 instId: 'BTC-USDT',
        //                 tradeId: '216970876',
        //                 px: '31684.5',
        //                 sz: '0.00001186',
        //                 side: 'buy',
        //                 ts: '1626531038288'
        //             }
        //         ]
        //     }
        //
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const data = this.safeValue(message, 'data', []);
        const tradesLimit = this.safeInteger(this.options, 'tradesLimit', 1000);
        for (let i = 0; i < data.length; i++) {
            const trade = this.parseTrade(data[i]);
            const symbol = trade['symbol'];
            const marketId = this.safeString(trade['info'], 'instId');
            const messageHash = channel + ':' + marketId;
            let stored = this.safeValue(this.trades, symbol);
            if (stored === undefined) {
                stored = new ArrayCache(tradesLimit);
                this.trades[symbol] = stored;
            }
            stored.append(trade);
            client.resolve(stored, messageHash);
        }
        return message;
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name okx#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        return await this.subscribe('public', 'tickers', symbol, params);
    }
    handleTicker(client, message) {
        //
        //     {
        //         arg: { channel: 'tickers', instId: 'BTC-USDT' },
        //         data: [
        //             {
        //                 instType: 'SPOT',
        //                 instId: 'BTC-USDT',
        //                 last: '31500.1',
        //                 lastSz: '0.00001754',
        //                 askPx: '31500.1',
        //                 askSz: '0.00998144',
        //                 bidPx: '31500',
        //                 bidSz: '3.05652439',
        //                 open24h: '31697',
        //                 high24h: '32248',
        //                 low24h: '31165.6',
        //                 sodUtc0: '31385.5',
        //                 sodUtc8: '32134.9',
        //                 volCcy24h: '503403597.38138519',
        //                 vol24h: '15937.10781721',
        //                 ts: '1626526618762'
        //             }
        //         ]
        //     }
        //
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const data = this.safeValue(message, 'data', []);
        for (let i = 0; i < data.length; i++) {
            const ticker = this.parseTicker(data[i]);
            const symbol = ticker['symbol'];
            const marketId = this.safeString(ticker['info'], 'instId');
            const messageHash = channel + ':' + marketId;
            this.tickers[symbol] = ticker;
            client.resolve(ticker, messageHash);
        }
        return message;
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#watchOHLCV
         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        const interval = this.safeString(this.timeframes, timeframe, timeframe);
        const name = 'candle' + interval;
        const ohlcv = await this.subscribe('public', name, symbol, params);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        //
        //     {
        //         arg: { channel: 'candle1m', instId: 'BTC-USDT' },
        //         data: [
        //             [
        //                 '1626690720000',
        //                 '31334',
        //                 '31334',
        //                 '31334',
        //                 '31334',
        //                 '0.0077',
        //                 '241.2718'
        //             ]
        //         ]
        //     }
        //
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const data = this.safeValue(message, 'data', []);
        const marketId = this.safeString(arg, 'instId');
        const market = this.safeMarket(marketId);
        const symbol = market['id'];
        const interval = channel.replace('candle', '');
        // use a reverse lookup in a static map instead
        const timeframe = this.findTimeframe(interval);
        for (let i = 0; i < data.length; i++) {
            const parsed = this.parseOHLCV(data[i], market);
            this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
            let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
            if (stored === undefined) {
                const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
                stored = new ArrayCacheByTimestamp(limit);
                this.ohlcvs[symbol][timeframe] = stored;
            }
            stored.append(parsed);
            const messageHash = channel + ':' + marketId;
            client.resolve(stored, messageHash);
        }
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        const options = this.safeValue(this.options, 'watchOrderBook', {});
        //
        // bbo-tbt
        // 1. Newly added channel that sends tick-by-tick Level 1 data
        // 2. All API users can subscribe
        // 3. Public depth channel, verification not required
        //
        // books-l2-tbt
        // 1. Only users who're VIP5 and above can subscribe
        // 2. Identity verification required before subscription
        //
        // books50-l2-tbt
        // 1. Only users who're VIP4 and above can subscribe
        // 2. Identity verification required before subscription
        //
        // books
        // 1. All API users can subscribe
        // 2. Public depth channel, verification not required
        //
        // books5
        // 1. All API users can subscribe
        // 2. Public depth channel, verification not required
        // 3. Data feeds will be delivered every 100ms (vs. every 200ms now)
        //
        const depth = this.safeString(options, 'depth', 'books');
        if ((depth === 'books-l2-tbt') || (depth === 'books50-l2-tbt')) {
            await this.authenticate({ 'access': 'public' });
        }
        const orderbook = await this.subscribe('public', depth, symbol, params);
        return orderbook.limit();
    }
    handleDelta(bookside, delta) {
        //
        //     [
        //         '31685', // price
        //         '0.78069158', // amount
        //         '0', // liquidated orders
        //         '17' // orders
        //     ]
        //
        const price = this.safeFloat(delta, 0);
        const amount = this.safeFloat(delta, 1);
        bookside.store(price, amount);
    }
    handleDeltas(bookside, deltas) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(bookside, deltas[i]);
        }
    }
    handleOrderBookMessage(client, message, orderbook, messageHash) {
        //
        //     {
        //         asks: [
        //             [ '31738.3', '0.05973179', '0', '3' ],
        //             [ '31738.5', '0.11035404', '0', '2' ],
        //             [ '31739.6', '0.01', '0', '1' ],
        //         ],
        //         bids: [
        //             [ '31738.2', '0.67557666', '0', '9' ],
        //             [ '31738', '0.02466947', '0', '2' ],
        //             [ '31736.3', '0.01705046', '0', '2' ],
        //         ],
        //         instId: 'BTC-USDT',
        //         ts: '1626537446491'
        //     }
        //
        const asks = this.safeValue(message, 'asks', []);
        const bids = this.safeValue(message, 'bids', []);
        const storedAsks = orderbook['asks'];
        const storedBids = orderbook['bids'];
        this.handleDeltas(storedAsks, asks);
        this.handleDeltas(storedBids, bids);
        const checksum = this.safeValue(this.options, 'checksum', true);
        if (checksum) {
            const asksLength = storedAsks.length;
            const bidsLength = storedBids.length;
            const payloadArray = [];
            for (let i = 0; i < 25; i++) {
                if (i < bidsLength) {
                    payloadArray.push(this.numberToString(storedBids[i][0]));
                    payloadArray.push(this.numberToString(storedBids[i][1]));
                }
                if (i < asksLength) {
                    payloadArray.push(this.numberToString(storedAsks[i][0]));
                    payloadArray.push(this.numberToString(storedAsks[i][1]));
                }
            }
            const payload = payloadArray.join(':');
            const responseChecksum = this.safeInteger(message, 'checksum');
            const localChecksum = this.crc32(payload, true);
            if (responseChecksum !== localChecksum) {
                const error = new InvalidNonce(this.id + ' invalid checksum');
                client.reject(error, messageHash);
            }
        }
        const timestamp = this.safeInteger(message, 'ts');
        orderbook['timestamp'] = timestamp;
        orderbook['datetime'] = this.iso8601(timestamp);
        return orderbook;
    }
    handleOrderBook(client, message) {
        //
        // snapshot
        //
        //     {
        //         arg: { channel: 'books-l2-tbt', instId: 'BTC-USDT' },
        //         action: 'snapshot',
        //         data: [
        //             {
        //                 asks: [
        //                     [ '31685', '0.78069158', '0', '17' ],
        //                     [ '31685.1', '0.0001', '0', '1' ],
        //                     [ '31685.6', '0.04543165', '0', '1' ],
        //                 ],
        //                 bids: [
        //                     [ '31684.9', '0.01', '0', '1' ],
        //                     [ '31682.9', '0.0001', '0', '1' ],
        //                     [ '31680.7', '0.01', '0', '1' ],
        //                 ],
        //                 ts: '1626532416403',
        //                 checksum: -1023440116
        //             }
        //         ]
        //     }
        //
        // update
        //
        //     {
        //         arg: { channel: 'books-l2-tbt', instId: 'BTC-USDT' },
        //         action: 'update',
        //         data: [
        //             {
        //                 asks: [
        //                     [ '31657.7', '0', '0', '0' ],
        //                     [ '31659.7', '0.01', '0', '1' ],
        //                     [ '31987.3', '0.01', '0', '1' ]
        //                 ],
        //                 bids: [
        //                     [ '31642.9', '0.50296385', '0', '4' ],
        //                     [ '31639.9', '0', '0', '0' ],
        //                     [ '31638.7', '0.01', '0', '1' ],
        //                 ],
        //                 ts: '1626535709008',
        //                 checksum: 830931827
        //             }
        //         ]
        //     }
        //
        // books5
        //
        //     {
        //         arg: { channel: 'books5', instId: 'BTC-USDT' },
        //         data: [
        //             {
        //                 asks: [
        //                     [ '31738.3', '0.05973179', '0', '3' ],
        //                     [ '31738.5', '0.11035404', '0', '2' ],
        //                     [ '31739.6', '0.01', '0', '1' ],
        //                 ],
        //                 bids: [
        //                     [ '31738.2', '0.67557666', '0', '9' ],
        //                     [ '31738', '0.02466947', '0', '2' ],
        //                     [ '31736.3', '0.01705046', '0', '2' ],
        //                 ],
        //                 instId: 'BTC-USDT',
        //                 ts: '1626537446491'
        //             }
        //         ]
        //     }
        //
        // bbo-tbt
        //
        //     {
        //         "arg":{
        //             "channel":"bbo-tbt",
        //             "instId":"BTC-USDT"
        //         },
        //         "data":[
        //             {
        //                 "asks":[["36232.2","1.8826134","0","17"]],
        //                 "bids":[["36232.1","0.00572212","0","2"]],
        //                 "ts":"1651826598363"
        //             }
        //         ]
        //     }
        //
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const action = this.safeString(message, 'action');
        const data = this.safeValue(message, 'data', []);
        const marketId = this.safeString(arg, 'instId');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const depths = {
            'bbo-tbt': 1,
            'books': 400,
            'books5': 5,
            'books-l2-tbt': 400,
            'books50-l2-tbt': 50,
        };
        const limit = this.safeInteger(depths, channel);
        const messageHash = channel + ':' + marketId;
        if (action === 'snapshot') {
            for (let i = 0; i < data.length; i++) {
                const update = data[i];
                const orderbook = this.orderBook({}, limit);
                this.orderbooks[symbol] = orderbook;
                orderbook['symbol'] = symbol;
                this.handleOrderBookMessage(client, update, orderbook, messageHash);
                client.resolve(orderbook, messageHash);
            }
        }
        else if (action === 'update') {
            if (symbol in this.orderbooks) {
                const orderbook = this.orderbooks[symbol];
                for (let i = 0; i < data.length; i++) {
                    const update = data[i];
                    this.handleOrderBookMessage(client, update, orderbook, messageHash);
                    client.resolve(orderbook, messageHash);
                }
            }
        }
        else if ((channel === 'books5') || (channel === 'bbo-tbt')) {
            let orderbook = this.safeValue(this.orderbooks, symbol);
            if (orderbook === undefined) {
                orderbook = this.orderBook({}, limit);
            }
            this.orderbooks[symbol] = orderbook;
            for (let i = 0; i < data.length; i++) {
                const update = data[i];
                const timestamp = this.safeInteger(update, 'ts');
                const snapshot = this.parseOrderBook(update, symbol, timestamp, 'bids', 'asks', 0, 1);
                orderbook.reset(snapshot);
                client.resolve(orderbook, messageHash);
            }
        }
        return message;
    }
    authenticate(params = {}) {
        this.checkRequiredCredentials();
        const access = this.safeString(params, 'access', 'private');
        params = this.omit(params, ['access']);
        const url = this.urls['api']['ws'][access];
        const messageHash = 'authenticated';
        const client = this.client(url);
        let future = this.safeValue(client.subscriptions, messageHash);
        if (future === undefined) {
            const timestamp = this.seconds().toString();
            const method = 'GET';
            const path = '/users/self/verify';
            const auth = timestamp + method + path;
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
            const operation = 'login';
            const request = {
                'op': operation,
                'args': [
                    {
                        'apiKey': this.apiKey,
                        'passphrase': this.password,
                        'timestamp': timestamp,
                        'sign': signature,
                    },
                ],
            };
            const message = this.extend(request, params);
            future = this.watch(url, messageHash, message);
            client.subscriptions[messageHash] = future;
        }
        return future;
    }
    async watchBalance(params = {}) {
        /**
         * @method
         * @name okx#watchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the okx api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        await this.authenticate();
        return await this.subscribe('private', 'account', undefined, params);
    }
    handleBalance(client, message) {
        //
        //     {
        //         arg: { channel: 'account' },
        //         data: [
        //             {
        //                 adjEq: '',
        //                 details: [
        //                     {
        //                         availBal: '',
        //                         availEq: '8.21009913',
        //                         cashBal: '8.21009913',
        //                         ccy: 'USDT',
        //                         coinUsdPrice: '0.99994',
        //                         crossLiab: '',
        //                         disEq: '8.2096065240522',
        //                         eq: '8.21009913',
        //                         eqUsd: '8.2096065240522',
        //                         frozenBal: '0',
        //                         interest: '',
        //                         isoEq: '0',
        //                         isoLiab: '',
        //                         liab: '',
        //                         maxLoan: '',
        //                         mgnRatio: '',
        //                         notionalLever: '0',
        //                         ordFrozen: '0',
        //                         twap: '0',
        //                         uTime: '1621927314996',
        //                         upl: '0'
        //                     },
        //                 ],
        //                 imr: '',
        //                 isoEq: '0',
        //                 mgnRatio: '',
        //                 mmr: '',
        //                 notionalUsd: '',
        //                 ordFroz: '',
        //                 totalEq: '22.1930992296832',
        //                 uTime: '1626692120916'
        //             }
        //         ]
        //     }
        //
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const type = 'spot';
        const balance = this.parseTradingBalance(message);
        const oldBalance = this.safeValue(this.balance, type, {});
        const newBalance = this.deepExtend(oldBalance, balance);
        this.balance[type] = this.safeBalance(newBalance);
        client.resolve(this.balance[type], channel);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name okx#watchOrders
         * @description watches information on multiple orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the okx api endpoint
         * @param {bool} params.stop true if fetching trigger or conditional orders
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        await this.authenticate();
        //
        //     {
        //         "op": "subscribe",
        //         "args": [
        //             {
        //                 "channel": "orders",
        //                 "instType": "FUTURES",
        //                 "uly": "BTC-USD",
        //                 "instId": "BTC-USD-200329"
        //             }
        //         ]
        //     }
        //
        const options = this.safeValue(this.options, 'watchOrders', {});
        // By default, receive order updates from any instrument type
        let type = this.safeString(options, 'type', 'ANY');
        type = this.safeString(params, 'type', type);
        const isStop = this.safeValue(params, 'stop', false);
        params = this.omit(params, ['type', 'stop']);
        let market = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            type = market['type'];
        }
        if (type === 'future') {
            type = 'futures';
        }
        const uppercaseType = type.toUpperCase();
        const request = {
            'instType': uppercaseType,
        };
        const channel = isStop ? 'orders-algo' : 'orders';
        const orders = await this.subscribe('private', channel, symbol, this.extend(request, params));
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    handleOrders(client, message, subscription = undefined) {
        //
        //     {
        //         "arg":{
        //             "channel":"orders",
        //             "instType":"SPOT"
        //         },
        //         "data":[
        //             {
        //                 "accFillSz":"0",
        //                 "amendResult":"",
        //                 "avgPx":"",
        //                 "cTime":"1634548275191",
        //                 "category":"normal",
        //                 "ccy":"",
        //                 "clOrdId":"e847386590ce4dBC330547db94a08ba0",
        //                 "code":"0",
        //                 "execType":"",
        //                 "fee":"0",
        //                 "feeCcy":"USDT",
        //                 "fillFee":"0",
        //                 "fillFeeCcy":"",
        //                 "fillNotionalUsd":"",
        //                 "fillPx":"",
        //                 "fillSz":"0",
        //                 "fillTime":"",
        //                 "instId":"ETH-USDT",
        //                 "instType":"SPOT",
        //                 "lever":"",
        //                 "msg":"",
        //                 "notionalUsd":"451.4516256",
        //                 "ordId":"370257534141235201",
        //                 "ordType":"limit",
        //                 "pnl":"0",
        //                 "posSide":"",
        //                 "px":"60000",
        //                 "rebate":"0",
        //                 "rebateCcy":"ETH",
        //                 "reqId":"",
        //                 "side":"sell",
        //                 "slOrdPx":"",
        //                 "slTriggerPx":"",
        //                 "state":"live",
        //                 "sz":"0.007526",
        //                 "tag":"",
        //                 "tdMode":"cash",
        //                 "tgtCcy":"",
        //                 "tpOrdPx":"",
        //                 "tpTriggerPx":"",
        //                 "tradeId":"",
        //                 "uTime":"1634548275191"
        //             }
        //         ]
        //     }
        //
        const arg = this.safeValue(message, 'arg', {});
        const channel = this.safeString(arg, 'channel');
        const orders = this.safeValue(message, 'data', []);
        const ordersLength = orders.length;
        if (ordersLength > 0) {
            const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
            if (this.orders === undefined) {
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            const stored = this.orders;
            const marketIds = [];
            const parsed = this.parseOrders(orders);
            for (let i = 0; i < parsed.length; i++) {
                const order = parsed[i];
                stored.append(order);
                const symbol = order['symbol'];
                const market = this.market(symbol);
                marketIds.push(market['id']);
            }
            client.resolve(this.orders, channel);
            for (let i = 0; i < marketIds.length; i++) {
                const messageHash = channel + ':' + marketIds[i];
                client.resolve(this.orders, messageHash);
            }
        }
    }
    handleSubscriptionStatus(client, message) {
        //
        //     { event: 'subscribe', arg: { channel: 'tickers', instId: 'BTC-USDT' } }
        //
        // const channel = this.safeString (message, 'channel');
        // client.subscriptions[channel] = message;
        return message;
    }
    handleAuthenticate(client, message) {
        //
        //     { event: 'login', success: true }
        //
        client.resolve(message, 'authenticated');
    }
    ping(client) {
        // okex does not support built-in ws protocol-level ping-pong
        // instead it requires custom text-based ping-pong
        return 'ping';
    }
    handlePong(client, message) {
        client.lastPong = this.milliseconds();
        return message;
    }
    handleErrorMessage(client, message) {
        //
        //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
        //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
        //
        const errorCode = this.safeInteger(message, 'code');
        try {
            if (errorCode) {
                const feedback = this.id + ' ' + this.json(message);
                this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
                const messageString = this.safeValue(message, 'message');
                if (messageString !== undefined) {
                    this.throwBroadlyMatchedException(this.exceptions['broad'], messageString, feedback);
                }
            }
        }
        catch (e) {
            if (e instanceof AuthenticationError) {
                const messageHash = 'authenticated';
                client.reject(e, messageHash);
                if (messageHash in client.subscriptions) {
                    delete client.subscriptions[messageHash];
                }
                return false;
            }
        }
        return message;
    }
    handleMessage(client, message) {
        if (!this.handleErrorMessage(client, message)) {
            return;
        }
        //
        //     { event: 'subscribe', arg: { channel: 'tickers', instId: 'BTC-USDT' } }
        //     { event: 'login', msg: '', code: '0' }
        //
        //     {
        //         arg: { channel: 'tickers', instId: 'BTC-USDT' },
        //         data: [
        //             {
        //                 instType: 'SPOT',
        //                 instId: 'BTC-USDT',
        //                 last: '31500.1',
        //                 lastSz: '0.00001754',
        //                 askPx: '31500.1',
        //                 askSz: '0.00998144',
        //                 bidPx: '31500',
        //                 bidSz: '3.05652439',
        //                 open24h: '31697',
        //                 high24h: '32248',
        //                 low24h: '31165.6',
        //                 sodUtc0: '31385.5',
        //                 sodUtc8: '32134.9',
        //                 volCcy24h: '503403597.38138519',
        //                 vol24h: '15937.10781721',
        //                 ts: '1626526618762'
        //             }
        //         ]
        //     }
        //
        //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
        //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
        //     { event: 'error', msg: 'Invalid OK_ACCESS_KEY', code: '60005' }
        //     {
        //         event: 'error',
        //         msg: 'Illegal request: {"op":"login","args":["de89b035-b233-44b2-9a13-0ccdd00bda0e","7KUcc8YzQhnxBE3K","1626691289","H57N99mBt5NvW8U19FITrPdOxycAERFMaapQWRqLaSE="]}',
        //         code: '60012'
        //     }
        //
        //
        //
        if (message === 'pong') {
            return this.handlePong(client, message);
        }
        // const table = this.safeString (message, 'table');
        // if (table === undefined) {
        const event = this.safeString(message, 'event');
        if (event !== undefined) {
            const methods = {
                // 'info': this.handleSystemStatus,
                // 'book': 'handleOrderBook',
                'login': this.handleAuthenticate,
                'subscribe': this.handleSubscriptionStatus,
            };
            const method = this.safeValue(methods, event);
            if (method === undefined) {
                return message;
            }
            else {
                return method.call(this, client, message);
            }
        }
        else {
            const arg = this.safeValue(message, 'arg', {});
            const channel = this.safeString(arg, 'channel');
            const methods = {
                'bbo-tbt': this.handleOrderBook,
                'books': this.handleOrderBook,
                'books5': this.handleOrderBook,
                'books50-l2-tbt': this.handleOrderBook,
                'books-l2-tbt': this.handleOrderBook,
                'tickers': this.handleTicker,
                'trades': this.handleTrades,
                'account': this.handleBalance,
                // 'margin_account': this.handleBalance,
                'orders': this.handleOrders,
                'orders-algo': this.handleOrders,
            };
            const method = this.safeValue(methods, channel);
            if (method === undefined) {
                if (channel.indexOf('candle') === 0) {
                    this.handleOHLCV(client, message);
                }
                else {
                    return message;
                }
            }
            else {
                return method.call(this, client, message);
            }
        }
    }
}

//  ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
class okex extends okx {
    describe() {
        return this.deepExtend(super.describe(), {
            'alias': true,
            'id': 'okex',
        });
    }
}

//  ---------------------------------------------------------------------------
//  ---------------------------------------------------------------------------
class phemex extends phemex$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchTicker': true,
                'watchTickers': false,
                'watchTrades': true,
                'watchMyTrades': true,
                'watchOrders': true,
                'watchOrderBook': true,
                'watchOHLCV': true,
            },
            'urls': {
                'test': {
                    'ws': 'wss://testnet.phemex.com/ws',
                },
                'api': {
                    'ws': 'wss://ws.phemex.com/',
                },
            },
            'options': {
                'tradesLimit': 1000,
                'OHLCVLimit': 1000,
            },
            'streaming': {
                'keepAlive': 20000,
            },
        });
    }
    fromEn(en, scale) {
        if (en === undefined) {
            return undefined;
        }
        const precise = new Precise(en);
        precise.decimals = this.sum(precise.decimals, scale);
        precise.reduce();
        return precise.toString();
    }
    fromEp(ep, market = undefined) {
        if ((ep === undefined) || (market === undefined)) {
            return ep;
        }
        return this.fromEn(ep, this.safeInteger(market, 'priceScale'));
    }
    fromEv(ev, market = undefined) {
        if ((ev === undefined) || (market === undefined)) {
            return ev;
        }
        return this.fromEn(ev, this.safeInteger(market, 'valueScale'));
    }
    fromEr(er, market = undefined) {
        if ((er === undefined) || (market === undefined)) {
            return er;
        }
        return this.fromEn(er, this.safeInteger(market, 'ratioScale'));
    }
    requestId() {
        const requestId = this.sum(this.safeInteger(this.options, 'requestId', 0), 1);
        this.options['requestId'] = requestId;
        return requestId;
    }
    parseUsdtTicker(ticker, market = undefined) {
        // [
        //     "BTCUSDT",
        //     "28262.2",   open
        //     "28505.9",   high
        //     "27505.5",   low
        //     "28218.6",   close
        //     "27175.609",
        //     "760874852.225",
        //     "1183.968",
        //     "28245.61",   index
        //     "28227.262",  mark
        //     "0.0001",
        //     "0.0001"
        // ]
        const marketId = this.safeString(ticker, 0);
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const timestamp = this.milliseconds();
        const open = this.safeNumber(ticker, 1);
        const high = this.safeNumber(ticker, 2);
        const low = this.safeNumber(ticker, 3);
        const last = this.safeNumber(ticker, 4);
        const index = this.safeNumber(ticker, 8);
        const mark = this.safeNumber(ticker, 9);
        const change = this.safeNumber(ticker, 7);
        const average = this.sum(open, last) / 2;
        const baseVolume = this.safeNumber(ticker, 5);
        const quoteVolume = this.safeNumber(ticker, 6);
        const result = {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': undefined,
            'bidVolume': undefined,
            'ask': undefined,
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': change,
            'percentage': undefined,
            'average': average,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
            'index': index,
            'mark': mark,
        };
        return result;
    }
    parseSwapTicker(ticker, market = undefined) {
        //
        //     {
        //         close: 442800,
        //         fundingRate: 10000,
        //         high: 445400,
        //         indexPrice: 442621,
        //         low: 428400,
        //         markPrice: 442659,
        //         open: 432200,
        //         openInterest: 744183,
        //         predFundingRate: 10000,
        //         symbol: 'LTCUSD',
        //         turnover: 8133238294,
        //         volume: 934292
        //     }
        //
        const marketId = this.safeString(ticker, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const timestamp = this.safeIntegerProduct(ticker, 'timestamp', 0.000001);
        const lastString = this.fromEp(this.safeString(ticker, 'close'), market);
        const last = this.parseNumber(lastString);
        const quoteVolume = this.parseNumber(this.fromEv(this.safeString(ticker, 'turnover'), market));
        const baseVolume = this.parseNumber(this.fromEv(this.safeString(ticker, 'volume'), market));
        let change = undefined;
        let percentage = undefined;
        let average = undefined;
        const openString = this.omitZero(this.fromEp(this.safeString(ticker, 'open'), market));
        const open = this.parseNumber(openString);
        if ((openString !== undefined) && (lastString !== undefined)) {
            change = this.parseNumber(Precise.stringSub(lastString, openString));
            average = this.parseNumber(Precise.stringDiv(Precise.stringAdd(lastString, openString), '2'));
            percentage = this.parseNumber(Precise.stringMul(Precise.stringSub(Precise.stringDiv(lastString, openString), '1'), '100'));
        }
        const result = {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.parseNumber(this.fromEp(this.safeString(ticker, 'high'), market)),
            'low': this.parseNumber(this.fromEp(this.safeString(ticker, 'low'), market)),
            'bid': undefined,
            'bidVolume': undefined,
            'ask': undefined,
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': change,
            'percentage': percentage,
            'average': average,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        };
        return result;
    }
    handlePackedTickers(client, message) {
        // {
        //     data: [
        //         [ 'ARBUSDT', '1.2836', '1.2853', '1.1097', '1.1336', '67516998', '80802821.8848', '927730', '1.13333999', '1.133479632', '0.0001', '0.0001' ],
        //         [ 'VGXUSDT', '0.347', '0.351', '0.319', '0.319', '3993395', '1341385.4816', '331386', '0.32088837', '0.320870637', '0.0001', '0.0001' ],
        //         ...
        //     ];
        // }
        const tickers = this.safeValue(message, 'data', []);
        for (let i = 0; i < tickers.length; i++) {
            const ticker = tickers[i];
            const result = this.parseUsdtTicker(ticker);
            const symbol = result['symbol'];
            const messageHash = 'perp_market24h_pack_p' + ':' + symbol;
            const timestamp = this.safeIntegerProduct(message, 'timestamp', 0.000001);
            result['timestamp'] = timestamp;
            result['datetime'] = this.iso8601(timestamp);
            this.tickers[symbol] = result;
            client.resolve(result, messageHash);
        }
    }
    handleTicker(client, message) {
        //
        //     {
        //         spot_market24h: {
        //             askEp: 958148000000,
        //             bidEp: 957884000000,
        //             highEp: 962000000000,
        //             lastEp: 958220000000,
        //             lowEp: 928049000000,
        //             openEp: 935597000000,
        //             symbol: 'sBTCUSDT',
        //             turnoverEv: 146074214388978,
        //             volumeEv: 15492228900
        //         },
        //         timestamp: 1592847265888272100
        //     }
        //
        // swap
        //
        //     {
        //         market24h: {
        //             close: 442800,
        //             fundingRate: 10000,
        //             high: 445400,
        //             indexPrice: 442621,
        //             low: 428400,
        //             markPrice: 442659,
        //             open: 432200,
        //             openInterest: 744183,
        //             predFundingRate: 10000,
        //             symbol: 'LTCUSD',
        //             turnover: 8133238294,
        //             volume: 934292
        //         },
        //         timestamp: 1592845585373374500
        //     }
        //
        let name = 'spot_market24h';
        let ticker = this.safeValue(message, name);
        let result = undefined;
        if (ticker === undefined) {
            name = 'market24h';
            ticker = this.safeValue(message, name);
            result = this.parseSwapTicker(ticker);
        }
        else {
            result = this.parseTicker(ticker);
        }
        const symbol = result['symbol'];
        const messageHash = name + ':' + symbol;
        const timestamp = this.safeIntegerProduct(message, 'timestamp', 0.000001);
        result['timestamp'] = timestamp;
        result['datetime'] = this.iso8601(timestamp);
        this.tickers[symbol] = result;
        client.resolve(result, messageHash);
    }
    async watchBalance(params = {}) {
        /**
         * @method
         * @name phemex#watchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        await this.loadMarkets();
        const [type, query] = this.handleMarketTypeAndParams('watchBalance', undefined, params);
        const messageHash = type + ':balance';
        return await this.subscribePrivate(type, messageHash, query);
    }
    handleBalance(type, client, message) {
        // spot
        //    [
        //       {
        //           balanceEv: 0,
        //           currency: 'BTC',
        //           lastUpdateTimeNs: '1650442638722099092',
        //           lockedTradingBalanceEv: 0,
        //           lockedWithdrawEv: 0,
        //           userID: 2647224
        //         },
        //         {
        //           balanceEv: 1154232337,
        //           currency: 'USDT',
        //           lastUpdateTimeNs: '1650442617610017597',
        //           lockedTradingBalanceEv: 0,
        //           lockedWithdrawEv: 0,
        //           userID: 2647224
        //         }
        //    ]
        //
        // swap
        //    [
        //         {
        //           accountBalanceEv: 0,
        //           accountID: 26472240001,
        //           bonusBalanceEv: 0,
        //           currency: 'BTC',
        //           totalUsedBalanceEv: 0,
        //           userID: 2647224
        //         }
        //    ]
        //
        this.balance['info'] = message;
        for (let i = 0; i < message.length; i++) {
            const balance = message[i];
            const currencyId = this.safeString(balance, 'currency');
            const code = this.safeCurrencyCode(currencyId);
            const currency = this.safeValue(this.currencies, code, {});
            const scale = this.safeInteger(currency, 'valueScale', 8);
            const account = this.account();
            let usedEv = this.safeString(balance, 'totalUsedBalanceEv');
            if (usedEv === undefined) {
                const lockedTradingBalanceEv = this.safeString(balance, 'lockedTradingBalanceEv');
                const lockedWithdrawEv = this.safeString(balance, 'lockedWithdrawEv');
                usedEv = Precise.stringAdd(lockedTradingBalanceEv, lockedWithdrawEv);
            }
            const totalEv = this.safeString2(balance, 'accountBalanceEv', 'balanceEv');
            account['used'] = this.fromEn(usedEv, scale);
            account['total'] = this.fromEn(totalEv, scale);
            this.balance[code] = account;
            this.balance = this.safeBalance(this.balance);
        }
        const messageHash = type + ':balance';
        client.resolve(this.balance, messageHash);
    }
    handleTrades(client, message) {
        //
        //     {
        //         sequence: 1795484727,
        //         symbol: 'sBTCUSDT',
        //         trades: [
        //             [ 1592891002064516600, 'Buy', 964020000000, 1431000 ],
        //             [ 1592890978987934500, 'Sell', 963704000000, 1401800 ],
        //             [ 1592890972918701800, 'Buy', 963938000000, 2018600 ],
        //         ],
        //         type: 'snapshot'
        //     }
        //
        const name = 'trade';
        const marketId = this.safeString(message, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const messageHash = name + ':' + symbol;
        let stored = this.safeValue(this.trades, symbol);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            stored = new ArrayCache(limit);
            this.trades[symbol] = stored;
        }
        const trades = this.safeValue(message, 'trades', []);
        const parsed = this.parseTrades(trades, market);
        for (let i = 0; i < parsed.length; i++) {
            stored.append(parsed[i]);
        }
        client.resolve(stored, messageHash);
    }
    handleOHLCV(client, message) {
        //
        //     {
        //         kline: [
        //             [ 1592905200, 60, 960688000000, 960709000000, 960709000000, 960400000000, 960400000000, 848100, 8146756046 ],
        //             [ 1592905140, 60, 960718000000, 960716000000, 960717000000, 960560000000, 960688000000, 4284900, 41163743512 ],
        //             [ 1592905080, 60, 960513000000, 960684000000, 960718000000, 960684000000, 960718000000, 4880500, 46887494349 ],
        //         ],
        //         sequence: 1804401474,
        //         symbol: 'sBTCUSDT',
        //         type: 'snapshot'
        //     }
        //
        let name = 'kline';
        const marketId = this.safeString(message, 'symbol');
        const market = this.safeMarket(marketId);
        if (market['settle'] === 'USDT') {
            name = 'kline_p';
        }
        const symbol = market['symbol'];
        const candles = this.safeValue(message, name, []);
        const first = this.safeValue(candles, 0, []);
        const interval = this.safeString(first, 1);
        const timeframe = this.findTimeframe(interval);
        if (timeframe !== undefined) {
            const messageHash = name + ':' + timeframe + ':' + symbol;
            const ohlcvs = this.parseOHLCVs(candles, market);
            this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
            let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
            if (stored === undefined) {
                const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
                stored = new ArrayCacheByTimestamp(limit);
                this.ohlcvs[symbol][timeframe] = stored;
            }
            for (let i = 0; i < ohlcvs.length; i++) {
                const candle = ohlcvs[i];
                stored.append(candle);
            }
            client.resolve(stored, messageHash);
        }
    }
    async watchTicker(symbol, params = {}) {
        /**
         * @method
         * @name phemex#watchTicker
         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        let name = undefined;
        if (market['spot']) {
            name = 'spot_market24h';
        }
        else if (market['settle'] === 'USDT') {
            name = 'perp_market24h_pack_p';
        }
        else {
            name = 'market24h';
        }
        const url = this.urls['api']['ws'];
        const requestId = this.requestId();
        const subscriptionHash = name + '.subscribe';
        const messageHash = name + ':' + symbol;
        const subscribe = {
            'method': subscriptionHash,
            'id': requestId,
            'params': [],
        };
        const request = this.deepExtend(subscribe, params);
        return await this.watch(url, messageHash, request, subscriptionHash);
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#watchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
         * @param {int|undefined} limit the maximum amount of trades to fetch
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.urls['api']['ws'];
        const requestId = this.requestId();
        const quote = market['quote'];
        let name = 'trade_p';
        if (quote.toUpperCase() !== 'USDT') {
            name = 'trade';
        }
        const messageHash = name + ':' + symbol;
        const method = name + '.subscribe';
        const subscribe = {
            'method': method,
            'id': requestId,
            'params': [
                market['id'],
            ],
        };
        const request = this.deepExtend(subscribe, params);
        const trades = await this.watch(url, messageHash, request, messageHash);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int|undefined} limit the maximum amount of order book entries to return
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.urls['api']['ws'];
        const requestId = this.requestId();
        let name = 'book';
        if (market['settle'] === 'USDT') {
            name = 'orderbook_p';
        }
        const messageHash = name + ':' + symbol;
        const method = name + '.subscribe';
        const subscribe = {
            'method': method,
            'id': requestId,
            'params': [
                market['id'],
                true,
            ],
        };
        const request = this.deepExtend(subscribe, params);
        const orderbook = await this.watch(url, messageHash, request, messageHash);
        return orderbook.limit();
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#watchOHLCV
         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
         * @param {int|undefined} limit the maximum amount of candles to fetch
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        symbol = market['symbol'];
        const url = this.urls['api']['ws'];
        const requestId = this.requestId();
        let name = 'kline';
        if (market['settle'] === 'USDT') {
            name = 'kline_p';
        }
        const messageHash = name + ':' + timeframe + ':' + symbol;
        const method = name + '.subscribe';
        const subscribe = {
            'method': method,
            'id': requestId,
            'params': [
                market['id'],
                this.safeInteger(this.timeframes, timeframe),
            ],
        };
        const request = this.deepExtend(subscribe, params);
        const ohlcv = await this.watch(url, messageHash, request, messageHash);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(symbol, limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleDelta(bookside, delta, market = undefined) {
        const bidAsk = this.parseBidAsk(delta, 0, 1, market);
        bookside.storeArray(bidAsk);
    }
    handleDeltas(bookside, deltas, market = undefined) {
        for (let i = 0; i < deltas.length; i++) {
            this.handleDelta(bookside, deltas[i], market);
        }
    }
    handleOrderBook(client, message) {
        //
        //     {
        //         book: {
        //             asks: [
        //                 [ 960316000000, 6993800 ],
        //                 [ 960318000000, 13183000 ],
        //                 [ 960319000000, 9170200 ],
        //             ],
        //             bids: [
        //                 [ 959941000000, 8385300 ],
        //                 [ 959939000000, 10296600 ],
        //                 [ 959930000000, 3672400 ],
        //             ]
        //         },
        //         depth: 30,
        //         sequence: 1805784701,
        //         symbol: 'sBTCUSDT',
        //         timestamp: 1592908460404461600,
        //         type: 'snapshot'
        //     }
        //
        const marketId = this.safeString(message, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const type = this.safeString(message, 'type');
        const depth = this.safeInteger(message, 'depth');
        let name = 'book';
        if (market['settle'] === 'USDT') {
            name = 'orderbook_p';
        }
        const messageHash = name + ':' + symbol;
        const nonce = this.safeInteger(message, 'sequence');
        const timestamp = this.safeIntegerProduct(message, 'timestamp', 0.000001);
        if (type === 'snapshot') {
            const book = this.safeValue2(message, 'book', 'orderbook_p', {});
            const snapshot = this.customParseOrderBook(book, symbol, timestamp, 'bids', 'asks', 0, 1, market);
            snapshot['nonce'] = nonce;
            const orderbook = this.orderBook(snapshot, depth);
            this.orderbooks[symbol] = orderbook;
            client.resolve(orderbook, messageHash);
        }
        else {
            const orderbook = this.safeValue(this.orderbooks, symbol);
            if (orderbook !== undefined) {
                const changes = this.safeValue2(message, 'book', 'orderbook_p', {});
                const asks = this.safeValue(changes, 'asks', []);
                const bids = this.safeValue(changes, 'bids', []);
                this.handleDeltas(orderbook['asks'], asks, market);
                this.handleDeltas(orderbook['bids'], bids, market);
                orderbook['nonce'] = nonce;
                orderbook['timestamp'] = timestamp;
                orderbook['datetime'] = this.iso8601(timestamp);
                this.orderbooks[symbol] = orderbook;
                client.resolve(orderbook, messageHash);
            }
        }
    }
    async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#watchMyTrades
         * @description watches information on multiple trades made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
         */
        await this.loadMarkets();
        let messageHash = 'trades';
        let market = undefined;
        let type = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            messageHash = messageHash + ':' + market['symbol'];
        }
        [type, params] = this.handleMarketTypeAndParams('watchMyTrades', market, params);
        if (symbol === undefined) {
            messageHash = messageHash + ':' + type;
        }
        const trades = await this.subscribePrivate(type, messageHash, params);
        if (this.newUpdates) {
            limit = trades.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }
    handleMyTrades(client, message) {
        //
        // [
        //    {
        //       "avgPriceEp":4138763000000,
        //       "baseCurrency":"BTC",
        //       "baseQtyEv":0,
        //       "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
        //       "execBaseQtyEv":30100,
        //       "execFeeEv":31,
        //       "execID":"d3b10cfa-84e3-5752-828e-78a79617e598",
        //       "execPriceEp":4138763000000,
        //       "execQuoteQtyEv":1245767663,
        //       "feeCurrency":"BTC",
        //       "lastLiquidityInd":"RemovedLiquidity",
        //       "ordType":"Market",
        //       "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
        //       "priceEp":4549022000000,
        //       "qtyType":"ByQuote",
        //       "quoteCurrency":"USDT",
        //       "quoteQtyEv":1248000000,
        //       "side":"Buy",
        //       "symbol":"sBTCUSDT",
        //       "tradeType":"Trade",
        //       "transactTimeNs":"1650442617609928764",
        //       "userID":2647224
        //    }
        //  ]
        //
        const channel = 'trades';
        const tradesLength = message.length;
        if (tradesLength === 0) {
            return;
        }
        let cachedTrades = this.myTrades;
        if (cachedTrades === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            cachedTrades = new ArrayCacheBySymbolById(limit);
        }
        const marketIds = {};
        let type = undefined;
        for (let i = 0; i < message.length; i++) {
            const rawTrade = message[i];
            const marketId = this.safeString(rawTrade, 'symbol');
            const market = this.safeMarket(marketId);
            const parsed = this.parseTrade(rawTrade);
            cachedTrades.append(parsed);
            const symbol = parsed['symbol'];
            if (type === undefined) {
                type = market['type'];
            }
            marketIds[symbol] = true;
        }
        const keys = Object.keys(marketIds);
        for (let i = 0; i < keys.length; i++) {
            const market = keys[i];
            const hash = channel + ':' + market;
            client.resolve(cachedTrades, hash);
        }
        // generic subscription
        const messageHash = channel + ':' + type;
        client.resolve(cachedTrades, messageHash);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name phemex#watchOrders
         * @description watches information on multiple orders made by the user
         * @param {string|undefined} symbol unified market symbol of the market orders were made in
         * @param {int|undefined} since the earliest time in ms to fetch orders for
         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
         * @param {object} params extra parameters specific to the phemex api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        let messageHash = 'orders';
        let market = undefined;
        let type = undefined;
        if (symbol !== undefined) {
            market = this.market(symbol);
            symbol = market['symbol'];
            messageHash = messageHash + ':' + market['symbol'];
        }
        [type, params] = this.handleMarketTypeAndParams('watchOrders', market, params);
        if (symbol === undefined) {
            messageHash = messageHash + ':' + type;
        }
        const orders = await this.subscribePrivate(type, messageHash, params);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    handleOrders(client, message) {
        // spot update
        // {
        //        "closed":[
        //           {
        //              "action":"New",
        //              "avgPriceEp":4138763000000,
        //              "baseCurrency":"BTC",
        //              "baseQtyEv":0,
        //              "bizError":0,
        //              "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
        //              "createTimeNs":"1650442617606017583",
        //              "cumBaseQtyEv":30100,
        //              "cumFeeEv":31,
        //              "cumQuoteQtyEv":1245767663,
        //              "cxlRejReason":0,
        //              "feeCurrency":"BTC",
        //              "leavesBaseQtyEv":0,
        //              "leavesQuoteQtyEv":0,
        //              "ordStatus":"Filled",
        //              "ordType":"Market",
        //              "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
        //              "pegOffsetValueEp":0,
        //              "priceEp":4549022000000,
        //              "qtyType":"ByQuote",
        //              "quoteCurrency":"USDT",
        //              "quoteQtyEv":1248000000,
        //              "side":"Buy",
        //              "stopPxEp":0,
        //              "symbol":"sBTCUSDT",
        //              "timeInForce":"ImmediateOrCancel",
        //              "tradeType":"Trade",
        //              "transactTimeNs":"1650442617609928764",
        //              "triggerTimeNs":0,
        //              "userID":2647224
        //           }
        //        ],
        //        "fills":[
        //           {
        //              "avgPriceEp":4138763000000,
        //              "baseCurrency":"BTC",
        //              "baseQtyEv":0,
        //              "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
        //              "execBaseQtyEv":30100,
        //              "execFeeEv":31,
        //              "execID":"d3b10cfa-84e3-5752-828e-78a79617e598",
        //              "execPriceEp":4138763000000,
        //              "execQuoteQtyEv":1245767663,
        //              "feeCurrency":"BTC",
        //              "lastLiquidityInd":"RemovedLiquidity",
        //              "ordType":"Market",
        //              "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
        //              "priceEp":4549022000000,
        //              "qtyType":"ByQuote",
        //              "quoteCurrency":"USDT",
        //              "quoteQtyEv":1248000000,
        //              "side":"Buy",
        //              "symbol":"sBTCUSDT",
        //              "tradeType":"Trade",
        //              "transactTimeNs":"1650442617609928764",
        //              "userID":2647224
        //           }
        //        ],
        //        "open":[
        //           {
        //              "action":"New",
        //              "avgPriceEp":0,
        //              "baseCurrency":"LTC",
        //              "baseQtyEv":0,
        //              "bizError":0,
        //              "clOrdID":"2c0e5eb5-efb7-60d3-2e5f-df175df412ef",
        //              "createTimeNs":"1650446670073853755",
        //              "cumBaseQtyEv":0,
        //              "cumFeeEv":0,
        //              "cumQuoteQtyEv":0,
        //              "cxlRejReason":0,
        //              "feeCurrency":"LTC",
        //              "leavesBaseQtyEv":0,
        //              "leavesQuoteQtyEv":1000000000,
        //              "ordStatus":"New",
        //              "ordType":"Limit",
        //              "orderID":"d2aad92f-50f5-441a-957b-8184b146e3fb",
        //              "pegOffsetValueEp":0,
        //              "priceEp":5000000000,
        //              "qtyType":"ByQuote",
        //              "quoteCurrency":"USDT",
        //              "quoteQtyEv":1000000000,
        //              "side":"Buy",
        //            }
        //        ]
        //  },
        //
        let trades = [];
        const parsedOrders = [];
        if (('closed' in message) || ('fills' in message) || ('open' in message)) {
            const closed = this.safeValue(message, 'closed', []);
            const open = this.safeValue(message, 'open', []);
            const orders = this.arrayConcat(open, closed);
            const ordersLength = orders.length;
            if (ordersLength === 0) {
                return;
            }
            trades = this.safeValue(message, 'fills', []);
            for (let i = 0; i < orders.length; i++) {
                const rawOrder = orders[i];
                const parsedOrder = this.parseOrder(rawOrder);
                parsedOrders.push(parsedOrder);
            }
        }
        else {
            for (let i = 0; i < message.length; i++) {
                const update = message[i];
                const action = this.safeString(update, 'action');
                if ((action !== undefined) && (action !== 'Cancel')) {
                    // order + trade info together
                    trades.push(update);
                }
                const parsedOrder = this.parseWSSwapOrder(update);
                parsedOrders.push(parsedOrder);
            }
        }
        this.handleMyTrades(client, trades);
        const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
        const marketIds = {};
        if (this.orders === undefined) {
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        let type = undefined;
        const stored = this.orders;
        for (let i = 0; i < parsedOrders.length; i++) {
            const parsed = parsedOrders[i];
            stored.append(parsed);
            const symbol = parsed['symbol'];
            const market = this.market(symbol);
            if (type === undefined) {
                type = market['type'];
            }
            marketIds[symbol] = true;
        }
        const keys = Object.keys(marketIds);
        for (let i = 0; i < keys.length; i++) {
            const messageHash = 'orders' + ':' + keys[i];
            client.resolve(this.orders, messageHash);
        }
        // resolve generic subscription (spot or swap)
        const messageHash = 'orders:' + type;
        client.resolve(this.orders, messageHash);
    }
    parseWSSwapOrder(order, market = undefined) {
        //
        // {
        //     "accountID":26472240002,
        //     "action":"Cancel",
        //     "actionBy":"ByUser",
        //     "actionTimeNs":"1650450096104760797",
        //     "addedSeq":26975849309,
        //     "bonusChangedAmountEv":0,
        //     "clOrdID":"d9675963-5e4e-6fc8-898a-ec8b934c1c61",
        //     "closedPnlEv":0,
        //     "closedSize":0,
        //     "code":0,
        //     "cumQty":0,
        //     "cumValueEv":0,
        //     "curAccBalanceEv":400079,
        //     "curAssignedPosBalanceEv":0,
        //     "curBonusBalanceEv":0,
        //     "curLeverageEr":0,
        //     "curPosSide":"None",
        //     "curPosSize":0,
        //     "curPosTerm":1,
        //     "curPosValueEv":0,
        //     "curRiskLimitEv":5000000000,
        //     "currency":"USD",
        //     "cxlRejReason":0,
        //     "displayQty":0,
        //     "execFeeEv":0,
        //     "execID":"00000000-0000-0000-0000-000000000000",
        //     "execPriceEp":0,
        //     "execQty":1,
        //     "execSeq":26975862338,
        //     "execStatus":"Canceled",
        //     "execValueEv":0,
        //     "feeRateEr":0,
        //     "leavesQty":0,
        //     "leavesValueEv":0,
        //     "message":"No error",
        //     "ordStatus":"Canceled",
        //     "ordType":"Limit",
        //     "orderID":"8141deb9-8f94-48f6-9421-a4e3a791537b",
        //     "orderQty":1,
        //     "pegOffsetValueEp":0,
        //     "priceEp":9521,
        //     "relatedPosTerm":1,
        //     "relatedReqNum":4,
        //     "side":"Buy",
        //     "slTrigger":"ByMarkPrice",
        //     "stopLossEp":0,
        //     "stopPxEp":0,
        //     "symbol":"ADAUSD",
        //     "takeProfitEp":0,
        //     "timeInForce":"GoodTillCancel",
        //     "tpTrigger":"ByLastPrice",
        //     "transactTimeNs":"1650450096108143014",
        //     "userID":2647224
        //  }
        //
        const id = this.safeString(order, 'orderID');
        let clientOrderId = this.safeString(order, 'clOrdID');
        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {
            clientOrderId = undefined;
        }
        const marketId = this.safeString(order, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
        const side = this.safeStringLower(order, 'side');
        const type = this.parseOrderType(this.safeString(order, 'ordType'));
        const price = this.parseNumber(this.fromEp(this.safeString(order, 'priceEp'), market));
        const amount = this.safeString(order, 'orderQty');
        const filled = this.safeString(order, 'cumQty');
        const remaining = this.safeString(order, 'leavesQty');
        const timestamp = this.safeIntegerProduct(order, 'actionTimeNs', 0.000001);
        const costEv = this.safeString(order, 'cumValueEv');
        const cost = this.fromEv(costEv, market);
        let lastTradeTimestamp = this.safeIntegerProduct(order, 'transactTimeNs', 0.000001);
        if (lastTradeTimestamp === 0) {
            lastTradeTimestamp = undefined;
        }
        const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
        const stopPrice = this.safeString(order, 'stopPx');
        const postOnly = (timeInForce === 'PO');
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'datetime': this.iso8601(timestamp),
            'timestamp': timestamp,
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': stopPrice,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': cost,
            'average': undefined,
            'status': status,
            'fee': undefined,
            'trades': undefined,
        }, market);
    }
    handleMessage(client, message) {
        // private spot update
        // {
        //     orders: { closed: [ ], fills: [ ], open: [] },
        //     sequence: 40435835,
        //     timestamp: '1650443245600839241',
        //     type: 'snapshot',
        //     wallets: [
        //       {
        //         balanceEv: 0,
        //         currency: 'BTC',
        //         lastUpdateTimeNs: '1650442638722099092',
        //         lockedTradingBalanceEv: 0,
        //         lockedWithdrawEv: 0,
        //         userID: 2647224
        //       },
        //       {
        //         balanceEv: 1154232337,
        //         currency: 'USDT',
        //         lastUpdateTimeNs: '1650442617610017597',
        //         lockedTradingBalanceEv: 0,
        //         lockedWithdrawEv: 0,
        //         userID: 2647224
        //       }
        //     ]
        // }
        // private swap update
        // {
        //     sequence: 83839628,
        //     timestamp: '1650382581827447829',
        //     type: 'snapshot',
        //     accounts: [
        //       {
        //         accountBalanceEv: 0,
        //         accountID: 26472240001,
        //         bonusBalanceEv: 0,
        //         currency: 'BTC',
        //         totalUsedBalanceEv: 0,
        //         userID: 2647224
        //       }
        //     ],
        //     orders: [],
        //     positions: [
        //       {
        //         accountID: 26472240001,
        //         assignedPosBalanceEv: 0,
        //         avgEntryPriceEp: 0,
        //         bankruptCommEv: 0,
        //         bankruptPriceEp: 0,
        //         buyLeavesQty: 0,
        //         buyLeavesValueEv: 0,
        //         buyValueToCostEr: 1150750,
        //         createdAtNs: 0,
        //         crossSharedBalanceEv: 0,
        //         cumClosedPnlEv: 0,
        //         cumFundingFeeEv: 0,
        //         cumTransactFeeEv: 0,
        //         curTermRealisedPnlEv: 0,
        //         currency: 'BTC',
        //         dataVer: 2,
        //         deleveragePercentileEr: 0,
        //         displayLeverageEr: 10000000000,
        //         estimatedOrdLossEv: 0,
        //         execSeq: 0,
        //         freeCostEv: 0,
        //         freeQty: 0,
        //         initMarginReqEr: 1000000,
        //         lastFundingTime: '1640601827712091793',
        //         lastTermEndTime: 0,
        //         leverageEr: 0,
        //         liquidationPriceEp: 0,
        //         maintMarginReqEr: 500000,
        //         makerFeeRateEr: 0,
        //         markPriceEp: 507806777,
        //         orderCostEv: 0,
        //         posCostEv: 0,
        //         positionMarginEv: 0,
        //         positionStatus: 'Normal',
        //         riskLimitEv: 10000000000,
        //         sellLeavesQty: 0,
        //         sellLeavesValueEv: 0,
        //         sellValueToCostEr: 1149250,
        //         side: 'None',
        //         size: 0,
        //         symbol: 'BTCUSD',
        //         takerFeeRateEr: 0,
        //         term: 1,
        //         transactTimeNs: 0,
        //         unrealisedPnlEv: 0,
        //         updatedAtNs: 0,
        //         usedBalanceEv: 0,
        //         userID: 2647224,
        //         valueEv: 0
        //       }
        //     ]
        // }
        const id = this.safeInteger(message, 'id');
        if (id !== undefined) {
            // not every method stores its subscription
            // as an object so we can't do indeById here
            const subs = client.subscriptions;
            const values = Object.values(subs);
            for (let i = 0; i < values.length; i++) {
                const subscription = values[i];
                if (subscription !== true) {
                    const subId = this.safeInteger(subscription, 'id');
                    if ((subId !== undefined) && (subId === id)) {
                        const method = this.safeValue(subscription, 'method');
                        if (method !== undefined) {
                            method.call(this, client, message);
                            return;
                        }
                    }
                }
            }
        }
        const method = this.safeValue(message, 'method', '');
        if (method === 'server.ping' || this.safeString(message, 'result') === 'pong') {
            this.handlePong(client, message);
        }
        else if (('spot_market24h' in message) || ('market24h' in message)) {
            return this.handleTicker(client, message);
        }
        else if (method.indexOf('perp_market24h_pack_p') >= 0) {
            return this.handlePackedTickers(client, message);
        }
        else if ('trades' in message) {
            return this.handleTrades(client, message);
        }
        else if ('kline' in message || 'kline_p' in message) {
            return this.handleOHLCV(client, message);
        }
        else if ('book' in message || 'orderbook_p' in message) {
            return this.handleOrderBook(client, message);
        }
        if ('orders' in message) {
            const orders = this.safeValue(message, 'orders', {});
            this.handleOrders(client, orders);
        }
        if (('accounts' in message) || ('wallets' in message)) {
            const type = ('accounts' in message) ? 'swap' : 'spot';
            const accounts = this.safeValue2(message, 'accounts', 'wallets', []);
            this.handleBalance(type, client, accounts);
        }
    }
    handleAuthenticate(client, message) {
        //
        // {
        //     "error": null,
        //     "id": 1234,
        //     "result": {
        //       "status": "success"
        //     }
        // }
        //
        const future = client.futures['authenticated'];
        future.resolve(1);
        return message;
    }
    async subscribePrivate(type, messageHash, params = {}) {
        await this.loadMarkets();
        await this.authenticate();
        const url = this.urls['api']['ws'];
        const requestId = this.seconds();
        const channel = (type === 'spot') ? 'wo.subscribe' : 'aop.subscribe';
        let request = {
            'id': requestId,
            'method': channel,
            'params': [],
        };
        request = this.extend(request, params);
        const subscription = {
            'id': requestId,
            'messageHash': messageHash,
        };
        return await this.watch(url, messageHash, request, channel, subscription);
    }
    async authenticate(params = {}) {
        this.checkRequiredCredentials();
        const url = this.urls['api']['ws'];
        const client = this.client(url);
        const time = this.seconds();
        const messageHash = 'authenticated';
        const future = client.future(messageHash);
        const authenticated = this.safeValue(client.subscriptions, messageHash);
        if (authenticated === undefined) {
            const expiryDelta = this.safeInteger(this.options, 'expires', 120);
            const expiration = this.seconds() + expiryDelta;
            const payload = this.apiKey + expiration.toString();
            const signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256');
            const request = {
                'method': 'user.auth',
                'params': ['API', this.apiKey, signature, expiration],
                'id': time,
            };
            const subscription = {
                'id': time,
                'method': this.handleAuthenticate,
            };
            this.spawn(this.watch, url, messageHash, request, messageHash, subscription);
        }
        return await future;
    }
    ping(client) {
        const requestId = this.requestId();
        const subscriptionHash = 'server.ping';
        return {
            'method': subscriptionHash,
            'id': requestId,
            'params': [],
        };
    }
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
class woo extends woo$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': false,
                'watchMyTrades': false,
                'watchOHLCV': true,
                'watchOrderBook': true,
                'watchOrders': true,
                'watchTicker': true,
                'watchTickers': true,
                'watchTrades': true,
            },
            'urls': {
                'api': {
                    'ws': {
                        'public': 'wss://wss.woo.org/ws/stream',
                        'private': 'wss://wss.woo.network/v2/ws/private/stream',
                    },
                },
                'test': {
                    'ws': {
                        'public': 'wss://wss.staging.woo.org/ws/stream',
                        'private': 'wss://wss.staging.woo.org/v2/ws/private/stream',
                    },
                },
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true,
            },
            'options': {
                'tradesLimit': 1000,
                'ordersLimit': 1000,
                'requestId': {},
            },
            'streaming': {
                'ping': this.ping,
                'keepAlive': 10000,
            },
        });
    }
    requestId(url) {
        const options = this.safeValue(this.options, 'requestId', {});
        const previousValue = this.safeInteger(options, url, 0);
        const newValue = this.sum(previousValue, 1);
        this.options['requestId'][url] = newValue;
        return newValue;
    }
    async watchPublic(messageHash, message, shouldThrottle = true) {
        this.checkRequiredUid();
        // const url = this.urls['api']['ws']['public'] + '/' + this.uid;
        const url = this.urls['api']['ws']['public'] + '/' + 'OqdphuyCtYWxwzhxyLLjOWNdFP7sQt8RPWzmb5xY';
        const requestId = this.requestId(url);
        const subscribe = {
            'id': requestId,
        };
        const request = this.extend(subscribe, message);
        return await this.watch(url, messageHash, request, messageHash, subscribe, shouldThrottle);
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        await this.loadMarkets();
        const name = 'orderbook';
        const market = this.market(symbol);
        const topic = market['id'] + '@' + name;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const orderbook = await this.watchPublic(topic, message, false);
        return orderbook.limit();
    }
    handleOrderBook(client, message) {
        //
        //     {
        //         topic: 'PERP_BTC_USDT@orderbook',
        //         ts: 1650121915308,
        //         data: {
        //             symbol: 'PERP_BTC_USDT',
        //             bids: [
        //                 [
        //                     0.30891,
        //                     2469.98
        //                 ]
        //             ],
        //             asks: [
        //                 [
        //                     0.31075,
        //                     2379.63
        //                 ]
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(message, 'data');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const topic = this.safeString(message, 'topic');
        let orderbook = this.safeValue(this.orderbooks, symbol);
        if (orderbook === undefined) {
            orderbook = this.orderBook({});
        }
        const timestamp = this.safeInteger(message, 'ts');
        const snapshot = this.parseOrderBook(data, symbol, timestamp, 'bids', 'asks');
        orderbook.reset(snapshot);
        client.resolve(orderbook, topic);
    }
    async watchTicker(symbol, params = {}) {
        await this.loadMarkets();
        const name = 'ticker';
        const market = this.market(symbol);
        const topic = market['id'] + '@' + name;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        return await this.watchPublic(topic, message);
    }
    parseWsTicker(ticker, market = undefined) {
        //
        //     {
        //         symbol: 'PERP_BTC_USDT',
        //         open: 19441.5,
        //         close: 20147.07,
        //         high: 20761.87,
        //         low: 19320.54,
        //         volume: 2481.103,
        //         amount: 50037935.0286,
        //         count: 3689
        //     }
        //
        const timestamp = this.safeInteger(ticker, 'date', this.milliseconds());
        return this.safeTicker({
            'symbol': this.safeSymbol(undefined, market),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeString(ticker, 'high'),
            'low': this.safeString(ticker, 'low'),
            'bid': undefined,
            'bidVolume': undefined,
            'ask': undefined,
            'askVolume': undefined,
            'vwap': undefined,
            'open': this.safeString(ticker, 'open'),
            'close': this.safeString(ticker, 'close'),
            'last': this.safeString(ticker, 'close'),
            'mark': this.safeString(ticker, 'close'),
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeString(ticker, 'volume'),
            'quoteVolume': this.safeString(ticker, 'amount'),
            'info': ticker,
        }, market);
    }
    handleTicker(client, message) {
        //
        //     {
        //         topic: 'PERP_BTC_USDT@ticker',
        //         ts: 1657120017000,
        //         data: {
        //             symbol: 'PERP_BTC_USDT',
        //             open: 19441.5,
        //             close: 20147.07,
        //             high: 20761.87,
        //             low: 19320.54,
        //             volume: 2481.103,
        //             amount: 50037935.0286,
        //             count: 3689
        //         }
        //     }
        //
        const data = this.safeValue(message, 'data');
        const topic = this.safeValue(message, 'topic');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const timestamp = this.safeInteger(message, 'ts');
        data['date'] = timestamp;
        const ticker = this.parseWsTicker(data, market);
        ticker['symbol'] = market['symbol'];
        this.tickers[market['symbol']] = ticker;
        client.resolve(ticker, topic);
        return message;
    }
    async watchTickers(symbols = undefined, params = {}) {
        await this.loadMarkets();
        const name = 'tickers';
        const topic = name;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const tickers = await this.watchPublic(topic, message);
        return this.filterByArray(tickers, 'symbol', symbols);
    }
    handleTickers(client, message) {
        //
        //     {
        //         "topic":"tickers",
        //         "ts":1618820615000,
        //         "data":[
        //             {
        //                 "symbol":"SPOT_OKB_USDT",
        //                 "open":16.297,
        //                 "close":17.183,
        //                 "high":24.707,
        //                 "low":11.997,
        //                 "volume":0,
        //                 "amount":0,
        //                 "count":0
        //             },
        //             {
        //                 "symbol":"SPOT_XRP_USDT",
        //                 "open":1.3515,
        //                 "close":1.43794,
        //                 "high":1.96674,
        //                 "low":0.39264,
        //                 "volume":750127.1,
        //                 "amount":985440.5122,
        //                 "count":396
        //             },
        //         ...
        //         ]
        //     }
        //
        const topic = this.safeValue(message, 'topic');
        const data = this.safeValue(message, 'data');
        const timestamp = this.safeInteger(message, 'ts');
        const result = [];
        for (let i = 0; i < data.length; i++) {
            const marketId = this.safeString(data[i], 'symbol');
            const market = this.safeMarket(marketId);
            const ticker = this.parseWsTicker(this.extend(data[i], { 'date': timestamp }), market);
            this.tickers[market['symbol']] = ticker;
            result.push(ticker);
        }
        client.resolve(result, topic);
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        if ((timeframe !== '1m') && (timeframe !== '5m') && (timeframe !== '15m') && (timeframe !== '30m') && (timeframe !== '1h') && (timeframe !== '1d') && (timeframe !== '1w') && (timeframe !== '1M')) {
            throw new ExchangeError(this.id + ' watchOHLCV timeframe argument must be 1m, 5m, 15m, 30m, 1h, 1d, 1w, 1M');
        }
        const market = this.market(symbol);
        const interval = this.safeString(this.timeframes, timeframe, timeframe);
        const name = 'kline';
        const topic = market['id'] + '@' + name + '_' + interval;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const ohlcv = await this.watchPublic(topic, message);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(market['symbol'], limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        //
        //     {
        //         "topic":"SPOT_BTC_USDT@kline_1m",
        //         "ts":1618822432146,
        //         "data":{
        //             "symbol":"SPOT_BTC_USDT",
        //             "type":"1m",
        //             "open":56948.97,
        //             "close":56891.76,
        //             "high":56948.97,
        //             "low":56889.06,
        //             "volume":44.00947568,
        //             "amount":2504584.9,
        //             "startTime":1618822380000,
        //             "endTime":1618822440000
        //         }
        //     }
        //
        const data = this.safeValue(message, 'data');
        const topic = this.safeValue(message, 'topic');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const interval = this.safeString(data, 'type');
        const timeframe = this.findTimeframe(interval);
        const parsed = [
            this.safeInteger(data, 'startTime'),
            this.safeFloat(data, 'open'),
            this.safeFloat(data, 'high'),
            this.safeFloat(data, 'low'),
            this.safeFloat(data, 'close'),
            this.safeFloat(data, 'volume'),
        ];
        this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
        let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
            stored = new ArrayCacheByTimestamp(limit);
            this.ohlcvs[symbol][timeframe] = stored;
        }
        stored.append(parsed);
        client.resolve(stored, topic);
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const topic = market['id'] + '@trade';
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const trades = await this.watchPublic(topic, message, false);
        if (this.newUpdates) {
            limit = trades.getLimit(market['symbol'], limit);
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }
    handleTrade(client, message) {
        //
        // {
        //     "topic":"SPOT_ADA_USDT@trade",
        //     "ts":1618820361552,
        //     "data":{
        //         "symbol":"SPOT_ADA_USDT",
        //         "price":1.27988,
        //         "size":300,
        //         "side":"BUY",
        //         "source":0
        //     }
        // }
        //
        const topic = this.safeString(message, 'topic');
        const timestamp = this.safeInteger(message, 'ts');
        const data = this.safeValue(message, 'data');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const trade = this.parseWsTrade(this.extend(data, { 'timestamp': timestamp }), market);
        let tradesArray = this.safeValue(this.trades, symbol);
        if (tradesArray === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            tradesArray = new ArrayCache(limit);
        }
        tradesArray.append(trade);
        this.trades[symbol] = tradesArray;
        client.resolve(tradesArray, topic);
    }
    parseWsTrade(trade, market = undefined) {
        //
        //     {
        //         "symbol":"SPOT_ADA_USDT",
        //         "timestamp":1618820361552,
        //         "price":1.27988,
        //         "size":300,
        //         "side":"BUY",
        //         "source":0
        //     }
        //
        const marketId = this.safeString(trade, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString(trade, 'price');
        const amount = this.safeString(trade, 'size');
        const cost = Precise.stringMul(price, amount);
        const side = this.safeStringLower(trade, 'side');
        const timestamp = this.safeInteger(trade, 'timestamp');
        return this.safeTrade({
            'id': timestamp,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'order': undefined,
            'takerOrMaker': undefined,
            'type': undefined,
            'fee': undefined,
            'info': trade,
        }, market);
    }
    checkRequiredUid() {
        // checkRequiredUid (error = true) {
        return true;
        // if (!this.uid) {
        //     if (error) {
        //         throw new AuthenticationError (this.id + ' requires `uid` credential');
        //     } else {
        //         return false;
        //     }
        // }
        // return true;
    }
    authenticate(params = {}) {
        this.checkRequiredCredentials();
        const url = this.urls['api']['ws']['private'] + '/' + this.uid;
        const client = this.client(url);
        const messageHash = 'authenticated';
        const event = 'auth';
        let future = this.safeValue(client.subscriptions, messageHash);
        if (future === undefined) {
            const ts = this.nonce().toString();
            const auth = '|' + ts;
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
            const request = {
                'event': event,
                'params': {
                    'apikey': this.apiKey,
                    'sign': signature,
                    'timestamp': ts,
                },
            };
            const message = this.extend(request, params);
            future = this.watch(url, messageHash, message);
            client.subscriptions[messageHash] = future;
        }
        return future;
    }
    async watchPrivate(messageHash, message, params = {}) {
        await this.authenticate(params);
        const url = this.urls['api']['ws']['private'] + '/' + this.uid;
        const requestId = this.requestId(url);
        const subscribe = {
            'id': requestId,
        };
        const request = this.extend(subscribe, message);
        return await this.watch(url, messageHash, request, messageHash, subscribe);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const topic = 'executionreport';
        let messageHash = topic;
        if (symbol !== undefined) {
            const market = this.market(symbol);
            symbol = market['symbol'];
            messageHash += ':' + symbol;
        }
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const orders = await this.watchPrivate(messageHash, message);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    parseWsOrder(order, market = undefined) {
        const isAlgoOrder = 'algoType' in order;
        if (isAlgoOrder) {
            return this.parseAlgoOrder(order, market);
        }
        else {
            return this.parseRegularOrder(order, market);
        }
    }
    handleOrderUpdate(client, message) {
        //
        //     {
        //         topic: 'executionreport',
        //         ts: 1657515556799,
        //         data: {
        //             symbol: 'PERP_BTC_USDT',
        //             clientOrderId: 0,
        //             orderId: 52952826,
        //             type: 'LIMIT',
        //             side: 'SELL',
        //             quantity: 0.01,
        //             price: 22000,
        //             tradeId: 0,
        //             executedPrice: 0,
        //             executedQuantity: 0,
        //             fee: 0,
        //             feeAsset: 'USDT',
        //             totalExecutedQuantity: 0,
        //             status: 'NEW',
        //             reason: '',
        //             orderTag: 'default',
        //             totalFee: 0,
        //             visible: 0.01,
        //             timestamp: 1657515556799,
        //             reduceOnly: false,
        //             maker: false
        //         }
        //     }
        //
        const order = this.safeValue(message, 'data');
        this.handleOrder(client, order);
    }
    handleOrder(client, message) {
        const topic = 'executionreport';
        const parsed = this.parseWsOrder(message);
        const symbol = this.safeString(parsed, 'symbol');
        const orderId = this.safeString(parsed, 'id');
        if (symbol !== undefined) {
            if (this.orders === undefined) {
                const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            const cachedOrders = this.orders;
            const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
            const order = this.safeValue(orders, orderId);
            if (order !== undefined) {
                const fee = this.safeValue(order, 'fee');
                if (fee !== undefined) {
                    parsed['fee'] = fee;
                }
                const fees = this.safeValue(order, 'fees');
                if (fees !== undefined) {
                    parsed['fees'] = fees;
                }
                parsed['trades'] = this.safeValue(order, 'trades');
                parsed['timestamp'] = this.safeInteger(order, 'timestamp');
                parsed['datetime'] = this.safeString(order, 'datetime');
            }
            cachedOrders.append(parsed);
            client.resolve(this.orders, topic);
            const messageHashSymbol = topic + ':' + symbol;
            client.resolve(this.orders, messageHashSymbol);
        }
    }
    handleMessage(client, message) {
        const methods = {
            'ping': this.handlePing,
            'pong': this.handlePong,
            'subscribe': this.handleSubscribe,
            'orderbook': this.handleOrderBook,
            'ticker': this.handleTicker,
            'tickers': this.handleTickers,
            'kline': this.handleOHLCV,
            'auth': this.handleAuth,
            'executionreport': this.handleOrderUpdate,
            'trade': this.handleTrade,
        };
        const event = this.safeString(message, 'event');
        let method = this.safeValue(methods, event);
        if (method !== undefined) {
            return method.call(this, client, message);
        }
        const topic = this.safeString(message, 'topic');
        if (topic !== undefined) {
            method = this.safeValue(methods, topic);
            if (method !== undefined) {
                return method.call(this, client, message);
            }
            const splitTopic = topic.split('@');
            const splitLength = splitTopic.length;
            if (splitLength === 2) {
                const name = this.safeString(splitTopic, 1);
                method = this.safeValue(methods, name);
                if (method !== undefined) {
                    return method.call(this, client, message);
                }
                const splitName = name.split('_');
                const splitNameLength = splitTopic.length;
                if (splitNameLength === 2) {
                    method = this.safeValue(methods, this.safeString(splitName, 0));
                    if (method !== undefined) {
                        return method.call(this, client, message);
                    }
                }
            }
        }
        return message;
    }
    ping(client) {
        return { 'event': 'ping' };
    }
    handlePing(client, message) {
        return { 'event': 'pong' };
    }
    handlePong(client, message) {
        //
        // { event: 'pong', ts: 1657117026090 }
        //
        client.lastPong = this.milliseconds();
        return message;
    }
    handleSubscribe(client, message) {
        //
        //     {
        //         id: '666888',
        //         event: 'subscribe',
        //         success: true,
        //         ts: 1657117712212
        //     }
        //
        return message;
    }
    handleAuth(client, message) {
        //
        //     {
        //         event: 'auth',
        //         success: true,
        //         ts: 1657463158812
        //     }
        //
        const messageHash = 'authenticated';
        const success = this.safeValue(message, 'success');
        if (success) {
            client.resolve(message, messageHash);
        }
        else {
            const error = new AuthenticationError(this.json(message));
            client.reject(error, messageHash);
            // allows further authentication attempts
            if (messageHash in client.subscriptions) {
                delete client.subscriptions['authenticated'];
            }
        }
    }
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
class woofi extends woofi$1 {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'watchBalance': false,
                'watchMyTrades': false,
                'watchOHLCV': true,
                'watchOrderBook': true,
                'watchOrders': true,
                'watchTicker': true,
                'watchTickers': true,
                'watchTrades': true,
            },
            'urls': {
                'api': {
                    'ws': {
                        'public': 'wss://ws-evm.orderly.org/ws/stream',
                        'private': 'wss://ws-private-evm.orderly.org/v2/ws/private/stream',
                    },
                },
                'test': {
                    'ws': {
                        'public': 'wss://testnet-ws-evm.orderly.org/ws/stream',
                        'private': 'wss://testnet-ws-private-evm.orderly.org/v2/ws/private/stream',
                    },
                },
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true,
            },
            'options': {
                'tradesLimit': 1000,
                'ordersLimit': 1000,
                'requestId': {},
            },
            'streaming': {
                'ping': this.ping,
                'keepAlive': 10000,
            },
        });
    }
    requestId(url) {
        const options = this.safeValue(this.options, 'requestId', {});
        const previousValue = this.safeInteger(options, url, 0);
        const newValue = this.sum(previousValue, 1);
        this.options['requestId'][url] = newValue;
        return newValue;
    }
    async watchPublic(messageHash, message, shouldThrottle = true) {
        this.checkRequiredUid();
        // const url = this.urls['api']['ws']['public'] + '/' + this.uid;
        const url = this.urls['api']['ws']['public'] + '/' + 'OqdphuyCtYWxwzhxyLLjOWNdFP7sQt8RPWzmb5xY';
        const requestId = this.requestId(url);
        const subscribe = {
            'id': requestId,
        };
        const request = this.extend(subscribe, message);
        return await this.watch(url, messageHash, request, messageHash, subscribe, shouldThrottle);
    }
    async watchOrderBook(symbol, limit = undefined, params = {}) {
        await this.loadMarkets();
        const name = 'orderbook';
        const market = this.market(symbol);
        const topic = market['id'] + '@' + name;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const orderbook = await this.watchPublic(topic, message, false);
        return orderbook.limit();
    }
    handleOrderBook(client, message) {
        //
        //     {
        //         topic: 'PERP_BTC_USDT@orderbook',
        //         ts: 1650121915308,
        //         data: {
        //             symbol: 'PERP_BTC_USDT',
        //             bids: [
        //                 [
        //                     0.30891,
        //                     2469.98
        //                 ]
        //             ],
        //             asks: [
        //                 [
        //                     0.31075,
        //                     2379.63
        //                 ]
        //             ]
        //         }
        //     }
        //
        const data = this.safeValue(message, 'data');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const topic = this.safeString(message, 'topic');
        let orderbook = this.safeValue(this.orderbooks, symbol);
        if (orderbook === undefined) {
            orderbook = this.orderBook({});
        }
        const timestamp = this.safeInteger(message, 'ts');
        const snapshot = this.parseOrderBook(data, symbol, timestamp, 'bids', 'asks');
        orderbook.reset(snapshot);
        client.resolve(orderbook, topic);
    }
    async watchTicker(symbol, params = {}) {
        await this.loadMarkets();
        const name = 'ticker';
        const market = this.market(symbol);
        const topic = market['id'] + '@' + name;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        return await this.watchPublic(topic, message);
    }
    parseWsTicker(ticker, market = undefined) {
        //
        //     {
        //         symbol: 'PERP_BTC_USDT',
        //         open: 19441.5,
        //         close: 20147.07,
        //         high: 20761.87,
        //         low: 19320.54,
        //         volume: 2481.103,
        //         amount: 50037935.0286,
        //         count: 3689
        //     }
        //
        const timestamp = this.safeInteger(ticker, 'date', this.milliseconds());
        return this.safeTicker({
            'symbol': this.safeSymbol(undefined, market),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeString(ticker, 'high'),
            'low': this.safeString(ticker, 'low'),
            'bid': undefined,
            'bidVolume': undefined,
            'ask': undefined,
            'askVolume': undefined,
            'vwap': undefined,
            'open': this.safeString(ticker, 'open'),
            'close': this.safeString(ticker, 'close'),
            'last': this.safeString(ticker, 'close'),
            'mark': this.safeString(ticker, 'close'),
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeString(ticker, 'volume'),
            'quoteVolume': this.safeString(ticker, 'amount'),
            'info': ticker,
        }, market);
    }
    handleTicker(client, message) {
        //
        //     {
        //         topic: 'PERP_BTC_USDT@ticker',
        //         ts: 1657120017000,
        //         data: {
        //             symbol: 'PERP_BTC_USDT',
        //             open: 19441.5,
        //             close: 20147.07,
        //             high: 20761.87,
        //             low: 19320.54,
        //             volume: 2481.103,
        //             amount: 50037935.0286,
        //             count: 3689
        //         }
        //     }
        //
        const data = this.safeValue(message, 'data');
        const topic = this.safeValue(message, 'topic');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const timestamp = this.safeInteger(message, 'ts');
        data['date'] = timestamp;
        const ticker = this.parseWsTicker(data, market);
        ticker['symbol'] = market['symbol'];
        this.tickers[market['symbol']] = ticker;
        client.resolve(ticker, topic);
        return message;
    }
    async watchTickers(symbols = undefined, params = {}) {
        await this.loadMarkets();
        const name = 'tickers';
        const topic = name;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const tickers = await this.watchPublic(topic, message);
        return this.filterByArray(tickers, 'symbol', symbols);
    }
    handleTickers(client, message) {
        //
        //     {
        //         "topic":"tickers",
        //         "ts":1618820615000,
        //         "data":[
        //             {
        //                 "symbol":"SPOT_OKB_USDT",
        //                 "open":16.297,
        //                 "close":17.183,
        //                 "high":24.707,
        //                 "low":11.997,
        //                 "volume":0,
        //                 "amount":0,
        //                 "count":0
        //             },
        //             {
        //                 "symbol":"SPOT_XRP_USDT",
        //                 "open":1.3515,
        //                 "close":1.43794,
        //                 "high":1.96674,
        //                 "low":0.39264,
        //                 "volume":750127.1,
        //                 "amount":985440.5122,
        //                 "count":396
        //             },
        //         ...
        //         ]
        //     }
        //
        const topic = this.safeValue(message, 'topic');
        const data = this.safeValue(message, 'data');
        const timestamp = this.safeInteger(message, 'ts');
        const result = [];
        for (let i = 0; i < data.length; i++) {
            const marketId = this.safeString(data[i], 'symbol');
            const market = this.safeMarket(marketId);
            const ticker = this.parseWsTicker(this.extend(data[i], { 'date': timestamp }), market);
            this.tickers[market['symbol']] = ticker;
            result.push(ticker);
        }
        client.resolve(result, topic);
    }
    async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        if ((timeframe !== '1m') && (timeframe !== '5m') && (timeframe !== '15m') && (timeframe !== '30m') && (timeframe !== '1h') && (timeframe !== '1d') && (timeframe !== '1w') && (timeframe !== '1M')) {
            throw new ExchangeError(this.id + ' watchOHLCV timeframe argument must be 1m, 5m, 15m, 30m, 1h, 1d, 1w, 1M');
        }
        const market = this.market(symbol);
        const interval = this.safeString(this.timeframes, timeframe, timeframe);
        const name = 'kline';
        const topic = market['id'] + '@' + name + '_' + interval;
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const ohlcv = await this.watchPublic(topic, message);
        if (this.newUpdates) {
            limit = ohlcv.getLimit(market['symbol'], limit);
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }
    handleOHLCV(client, message) {
        //
        //     {
        //         "topic":"SPOT_BTC_USDT@kline_1m",
        //         "ts":1618822432146,
        //         "data":{
        //             "symbol":"SPOT_BTC_USDT",
        //             "type":"1m",
        //             "open":56948.97,
        //             "close":56891.76,
        //             "high":56948.97,
        //             "low":56889.06,
        //             "volume":44.00947568,
        //             "amount":2504584.9,
        //             "startTime":1618822380000,
        //             "endTime":1618822440000
        //         }
        //     }
        //
        const data = this.safeValue(message, 'data');
        const topic = this.safeValue(message, 'topic');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const interval = this.safeString(data, 'type');
        const timeframe = this.findTimeframe(interval);
        const parsed = [
            this.safeInteger(data, 'startTime'),
            this.safeFloat(data, 'open'),
            this.safeFloat(data, 'high'),
            this.safeFloat(data, 'low'),
            this.safeFloat(data, 'close'),
            this.safeFloat(data, 'volume'),
        ];
        this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
        let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
        if (stored === undefined) {
            const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
            stored = new ArrayCacheByTimestamp(limit);
            this.ohlcvs[symbol][timeframe] = stored;
        }
        stored.append(parsed);
        client.resolve(stored, topic);
    }
    async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const market = this.market(symbol);
        const topic = market['id'] + '@trade';
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const trades = await this.watchPublic(topic, message, false);
        if (this.newUpdates) {
            limit = trades.getLimit(market['symbol'], limit);
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }
    handleTrade(client, message) {
        //
        // {
        //     "topic":"SPOT_ADA_USDT@trade",
        //     "ts":1618820361552,
        //     "data":{
        //         "symbol":"SPOT_ADA_USDT",
        //         "price":1.27988,
        //         "size":300,
        //         "side":"BUY",
        //         "source":0
        //     }
        // }
        //
        const topic = this.safeString(message, 'topic');
        const timestamp = this.safeInteger(message, 'ts');
        const data = this.safeValue(message, 'data');
        const marketId = this.safeString(data, 'symbol');
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const trade = this.parseWsTrade(this.extend(data, { 'timestamp': timestamp }), market);
        let tradesArray = this.safeValue(this.trades, symbol);
        if (tradesArray === undefined) {
            const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
            tradesArray = new ArrayCache(limit);
        }
        tradesArray.append(trade);
        this.trades[symbol] = tradesArray;
        client.resolve(tradesArray, topic);
    }
    parseWsTrade(trade, market = undefined) {
        //
        //     {
        //         "symbol":"SPOT_ADA_USDT",
        //         "timestamp":1618820361552,
        //         "price":1.27988,
        //         "size":300,
        //         "side":"BUY",
        //         "source":0
        //     }
        //
        const marketId = this.safeString(trade, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const price = this.safeString(trade, 'price');
        const amount = this.safeString(trade, 'size');
        const cost = Precise.stringMul(price, amount);
        const side = this.safeStringLower(trade, 'side');
        const timestamp = this.safeInteger(trade, 'timestamp');
        return this.safeTrade({
            'id': timestamp,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'order': undefined,
            'takerOrMaker': undefined,
            'type': undefined,
            'fee': undefined,
            'info': trade,
        }, market);
    }
    checkRequiredUid() {
        // checkRequiredUid (error = true) {
        return true;
        // if (!this.uid) {
        //     if (error) {
        //         throw new AuthenticationError (this.id + ' requires `uid` credential');
        //     } else {
        //         return false;
        //     }
        // }
        // return true;
    }
    authenticate(params = {}) {
        this.checkRequiredCredentials();
        const url = this.urls['api']['ws']['private'] + '/' + this.uid;
        const client = this.client(url);
        const messageHash = 'authenticated';
        const event = 'auth';
        let future = this.safeValue(client.subscriptions, messageHash);
        if (future === undefined) {
            const ts = this.nonce().toString();
            const auth = '|' + ts;
            const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
            const request = {
                'event': event,
                'params': {
                    'apikey': this.apiKey,
                    'sign': signature,
                    'timestamp': ts,
                },
            };
            const message = this.extend(request, params);
            future = this.watch(url, messageHash, message);
            client.subscriptions[messageHash] = future;
        }
        return future;
    }
    async watchPrivate(messageHash, message, params = {}) {
        await this.authenticate(params);
        const url = this.urls['api']['ws']['private'] + '/' + this.uid;
        const requestId = this.requestId(url);
        const subscribe = {
            'id': requestId,
        };
        const request = this.extend(subscribe, message);
        return await this.watch(url, messageHash, request, messageHash, subscribe);
    }
    async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        await this.loadMarkets();
        const topic = 'executionreport';
        let messageHash = topic;
        if (symbol !== undefined) {
            const market = this.market(symbol);
            symbol = market['symbol'];
            messageHash += ':' + symbol;
        }
        const request = {
            'event': 'subscribe',
            'topic': topic,
        };
        const message = this.extend(request, params);
        const orders = await this.watchPrivate(messageHash, message);
        if (this.newUpdates) {
            limit = orders.getLimit(symbol, limit);
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }
    parseWsOrder(order, market = undefined) {
        const isAlgoOrder = 'algoType' in order;
        if (isAlgoOrder) {
            return this.parseAlgoOrder(order, market);
        }
        else {
            return this.parseRegularOrder(order, market);
        }
    }
    handleOrderUpdate(client, message) {
        //
        //     {
        //         topic: 'executionreport',
        //         ts: 1657515556799,
        //         data: {
        //             symbol: 'PERP_BTC_USDT',
        //             clientOrderId: 0,
        //             orderId: 52952826,
        //             type: 'LIMIT',
        //             side: 'SELL',
        //             quantity: 0.01,
        //             price: 22000,
        //             tradeId: 0,
        //             executedPrice: 0,
        //             executedQuantity: 0,
        //             fee: 0,
        //             feeAsset: 'USDT',
        //             totalExecutedQuantity: 0,
        //             status: 'NEW',
        //             reason: '',
        //             orderTag: 'default',
        //             totalFee: 0,
        //             visible: 0.01,
        //             timestamp: 1657515556799,
        //             reduceOnly: false,
        //             maker: false
        //         }
        //     }
        //
        const order = this.safeValue(message, 'data');
        this.handleOrder(client, order);
    }
    handleOrder(client, message) {
        const topic = 'executionreport';
        const parsed = this.parseWsOrder(message);
        const symbol = this.safeString(parsed, 'symbol');
        const orderId = this.safeString(parsed, 'id');
        if (symbol !== undefined) {
            if (this.orders === undefined) {
                const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            const cachedOrders = this.orders;
            const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
            const order = this.safeValue(orders, orderId);
            if (order !== undefined) {
                const fee = this.safeValue(order, 'fee');
                if (fee !== undefined) {
                    parsed['fee'] = fee;
                }
                const fees = this.safeValue(order, 'fees');
                if (fees !== undefined) {
                    parsed['fees'] = fees;
                }
                parsed['trades'] = this.safeValue(order, 'trades');
                parsed['timestamp'] = this.safeInteger(order, 'timestamp');
                parsed['datetime'] = this.safeString(order, 'datetime');
            }
            cachedOrders.append(parsed);
            client.resolve(this.orders, topic);
            const messageHashSymbol = topic + ':' + symbol;
            client.resolve(this.orders, messageHashSymbol);
        }
    }
    handleMessage(client, message) {
        const methods = {
            'ping': this.handlePing,
            'pong': this.handlePong,
            'subscribe': this.handleSubscribe,
            'orderbook': this.handleOrderBook,
            'ticker': this.handleTicker,
            'tickers': this.handleTickers,
            'kline': this.handleOHLCV,
            'auth': this.handleAuth,
            'executionreport': this.handleOrderUpdate,
            'trade': this.handleTrade,
        };
        const event = this.safeString(message, 'event');
        let method = this.safeValue(methods, event);
        if (method !== undefined) {
            return method.call(this, client, message);
        }
        const topic = this.safeString(message, 'topic');
        if (topic !== undefined) {
            method = this.safeValue(methods, topic);
            if (method !== undefined) {
                return method.call(this, client, message);
            }
            const splitTopic = topic.split('@');
            const splitLength = splitTopic.length;
            if (splitLength === 2) {
                const name = this.safeString(splitTopic, 1);
                method = this.safeValue(methods, name);
                if (method !== undefined) {
                    return method.call(this, client, message);
                }
                const splitName = name.split('_');
                const splitNameLength = splitTopic.length;
                if (splitNameLength === 2) {
                    method = this.safeValue(methods, this.safeString(splitName, 0));
                    if (method !== undefined) {
                        return method.call(this, client, message);
                    }
                }
            }
        }
        return message;
    }
    ping(client) {
        return { 'event': 'ping' };
    }
    handlePing(client, message) {
        return { 'event': 'pong' };
    }
    handlePong(client, message) {
        //
        // { event: 'pong', ts: 1657117026090 }
        //
        client.lastPong = this.milliseconds();
        return message;
    }
    handleSubscribe(client, message) {
        //
        //     {
        //         id: '666888',
        //         event: 'subscribe',
        //         success: true,
        //         ts: 1657117712212
        //     }
        //
        return message;
    }
    handleAuth(client, message) {
        //
        //     {
        //         event: 'auth',
        //         success: true,
        //         ts: 1657463158812
        //     }
        //
        const messageHash = 'authenticated';
        const success = this.safeValue(message, 'success');
        if (success) {
            client.resolve(message, messageHash);
        }
        else {
            const error = new AuthenticationError(this.json(message));
            client.reject(error, messageHash);
            // allows further authentication attempts
            if (messageHash in client.subscriptions) {
                delete client.subscriptions['authenticated'];
            }
        }
    }
}

//-----------------------------------------------------------------------------
// this is updated by vss.js when building
const version = '3.0.22';
Exchange.ccxtVersion = version;
const exchanges = {
    'binance': binance$1,
    'binancecoinm': binancecoinm$1,
    'binanceusdm': binanceusdm$1,
    'bingx': bingx$1,
    'bitget': bitget$1,
    'bitmex': bitmex$1,
    'blofin': blofin$1,
    'bybit': bybit$1,
    'okex': okex$1,
    'okex5': okex5,
    'okx': okx$1,
    'phemex': phemex$1,
    'woo': woo$1,
    'woofi': woofi$1,
};
const pro = {
    'binance': binance,
    'binancecoinm': binancecoinm,
    'binanceusdm': binanceusdm,
    'bingx': bingx,
    'bitget': bitget,
    'bitmex': bitmex,
    'blofin': blofin,
    'bybit': bybit,
    'okex': okex,
    'okx': okx,
    'phemex': phemex,
    'woo': woo,
    'woofi': woofi,
};
pro.exchanges = Object.keys(pro);
pro['Exchange'] = Exchange; // now the same for rest and ts
//-----------------------------------------------------------------------------
const ccxt = Object.assign({ version, Exchange, Precise, 'exchanges': Object.keys(exchanges), 'pro': pro }, exchanges, functions, errors$1);
//-----------------------------------------------------------------------------

// /**
//  * Index.js
//  *
//  * a request API compatible with window.fetch
//  *
//  * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
//  */
//
// import http from 'node:http';
// import https from 'node:https';
// import zlib from 'node:zlib';
// import Stream, {PassThrough, pipeline as pump} from 'node:stream';
// import {Buffer} from 'node:buffer';
//
// // import dataUriToBuffer from 'data-uri-to-buffer';
//
// import {writeToStream, clone} from './body.js';
// import Response from './response.js';
// import Headers, {fromRawHeaders} from './headers.js';
// import Request, {getNodeRequestOptions} from './request.js';
// import {FetchError} from './errors/fetch-error.js';
// import {AbortError} from './errors/abort-error.js';
// import {isRedirect} from './utils/is-redirect.js';
// // import {FormData} from 'formdata-polyfill/esm.min.js';
// import {isDomainOrSubdomain, isSameProtocol} from './utils/is.js';
// import {parseReferrerPolicyFromHeader} from './utils/referrer.js';
// /* import {
// 	Blob,
// 	File,
// 	fileFromSync,
// 	fileFrom,
// 	blobFromSync,
// 	blobFrom
// } from 'fetch-blob/from.js';*/
//
// // export {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};
// // export {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};
//
// export {Headers, Request, Response, FetchError, AbortError, isRedirect};
//
// const supportedSchemas = new Set(['data:', 'http:', 'https:']);
//
// /**
//  * Fetch function
//  *
//  * @param   {string | URL | import('./request').default} url - Absolute url or Request instance
//  * @param   {*} [options_] - Fetch options
//  * @return  {Promise<import('./response').default>}
//  */
// export default async function fetch(url, options_) {
// 	return new Promise((resolve, reject) => {
// 		// Build request object
// 		const request = new Request(url, options_);
// 		const {parsedURL, options} = getNodeRequestOptions(request);
// 		if (!supportedSchemas.has(parsedURL.protocol)) {
// 			throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(/:$/, '')}" is not supported.`);
// 		}
//
// 		/*if (parsedURL.protocol === 'data:') {
// 			const data = dataUriToBuffer(request.url);
// 			const response = new Response(data, {headers: {'Content-Type': data.typeFull}});
// 			resolve(response);
// 			return;
// 		}*/
//
// 		// Wrap http.request into fetch
// 		const send = (parsedURL.protocol === 'https:' ? https : http).request;
// 		const {signal} = request;
// 		let response = null;
//
// 		const abort = () => {
// 			const error = new AbortError('The operation was aborted.');
// 			reject(error);
// 			if (request.body && request.body instanceof Stream.Readable) {
// 				request.body.destroy(error);
// 			}
//
// 			if (!response || !response.body) {
// 				return;
// 			}
//
// 			response.body.emit('error', error);
// 		};
//
// 		if (signal && signal.aborted) {
// 			abort();
// 			return;
// 		}
//
// 		const abortAndFinalize = () => {
// 			abort();
// 			finalize();
// 		};
//
// 		// Send request
// 		const request_ = send(parsedURL.toString(), options);
//
// 		if (signal) {
// 			signal.addEventListener('abort', abortAndFinalize);
// 		}
//
// 		const finalize = () => {
// 			request_.abort();
// 			if (signal) {
// 				signal.removeEventListener('abort', abortAndFinalize);
// 			}
// 		};
//
// 		request_.on('error', error => {
// 			reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));
// 			finalize();
// 		});
//
// 		fixResponseChunkedTransferBadEnding(request_, error => {
// 			if (response && response.body) {
// 				response.body.destroy(error);
// 			}
// 		});
//
// 		/* c8 ignore next 18 */
// 		if (process.version < 'v14') {
// 			// Before Node.js 14, pipeline() does not fully support async iterators and does not always
// 			// properly handle when the socket close/end events are out of order.
// 			request_.on('socket', s => {
// 				let endedWithEventsCount;
// 				s.prependListener('end', () => {
// 					endedWithEventsCount = s._eventsCount;
// 				});
// 				s.prependListener('close', hadError => {
// 					// if end happened before close but the socket didn't emit an error, do it now
// 					if (response && endedWithEventsCount < s._eventsCount && !hadError) {
// 						const error = new Error('Premature close');
// 						error.code = 'ERR_STREAM_PREMATURE_CLOSE';
// 						response.body.emit('error', error);
// 					}
// 				});
// 			});
// 		}
//
// 		request_.on('response', response_ => {
// 			request_.setTimeout(0);
// 			const headers = fromRawHeaders(response_.rawHeaders);
//
// 			// HTTP fetch step 5
// 			if (isRedirect(response_.statusCode)) {
// 				// HTTP fetch step 5.2
// 				const location = headers.get('Location');
//
// 				// HTTP fetch step 5.3
// 				let locationURL = null;
// 				try {
// 					locationURL = location === null ? null : new URL(location, request.url);
// 				} catch {
// 					// error here can only be invalid URL in Location: header
// 					// do not throw when options.redirect == manual
// 					// let the user extract the errorneous redirect URL
// 					if (request.redirect !== 'manual') {
// 						reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
// 						finalize();
// 						return;
// 					}
// 				}
//
// 				// HTTP fetch step 5.5
// 				switch (request.redirect) {
// 					case 'error':
// 						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
// 						finalize();
// 						return;
// 					case 'manual':
// 						// Nothing to do
// 						break;
// 					case 'follow': {
// 						// HTTP-redirect fetch step 2
// 						if (locationURL === null) {
// 							break;
// 						}
//
// 						// HTTP-redirect fetch step 5
// 						if (request.counter >= request.follow) {
// 							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
// 							finalize();
// 							return;
// 						}
//
// 						// HTTP-redirect fetch step 6 (counter increment)
// 						// Create a new Request object.
// 						const requestOptions = {
// 							headers: new Headers(request.headers),
// 							follow: request.follow,
// 							counter: request.counter + 1,
// 							agent: request.agent,
// 							compress: request.compress,
// 							method: request.method,
// 							body: clone(request),
// 							signal: request.signal,
// 							size: request.size,
// 							referrer: request.referrer,
// 							referrerPolicy: request.referrerPolicy
// 						};
//
// 						// when forwarding sensitive headers like "Authorization",
// 						// "WWW-Authenticate", and "Cookie" to untrusted targets,
// 						// headers will be ignored when following a redirect to a domain
// 						// that is not a subdomain match or exact match of the initial domain.
// 						// For example, a redirect from "foo.com" to either "foo.com" or "sub.foo.com"
// 						// will forward the sensitive headers, but a redirect to "bar.com" will not.
// 						// headers will also be ignored when following a redirect to a domain using
// 						// a different protocol. For example, a redirect from "https://foo.com" to "http://foo.com"
// 						// will not forward the sensitive headers
// 						if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
// 							for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
// 								requestOptions.headers.delete(name);
// 							}
// 						}
//
// 						// HTTP-redirect fetch step 9
// 						if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {
// 							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
// 							finalize();
// 							return;
// 						}
//
// 						// HTTP-redirect fetch step 11
// 						if (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {
// 							requestOptions.method = 'GET';
// 							requestOptions.body = undefined;
// 							requestOptions.headers.delete('content-length');
// 						}
//
// 						// HTTP-redirect fetch step 14
// 						const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
// 						if (responseReferrerPolicy) {
// 							requestOptions.referrerPolicy = responseReferrerPolicy;
// 						}
//
// 						// HTTP-redirect fetch step 15
// 						resolve(fetch(new Request(locationURL, requestOptions)));
// 						finalize();
// 						return;
// 					}
//
// 					default:
// 						return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
// 				}
// 			}
//
// 			// Prepare response
// 			if (signal) {
// 				response_.once('end', () => {
// 					signal.removeEventListener('abort', abortAndFinalize);
// 				});
// 			}
//
// 			let body = pump(response_, new PassThrough(), error => {
// 				if (error) {
// 					reject(error);
// 				}
// 			});
// 			// see https://github.com/nodejs/node/pull/29376
// 			/* c8 ignore next 3 */
// 			if (process.version < 'v12.10') {
// 				response_.on('aborted', abortAndFinalize);
// 			}
//
// 			const responseOptions = {
// 				url: request.url,
// 				status: response_.statusCode,
// 				statusText: response_.statusMessage,
// 				headers,
// 				size: request.size,
// 				counter: request.counter,
// 				highWaterMark: request.highWaterMark
// 			};
//
// 			// HTTP-network fetch step 12.1.1.3
// 			const codings = headers.get('Content-Encoding');
//
// 			// HTTP-network fetch step 12.1.1.4: handle content codings
//
// 			// in following scenarios we ignore compression support
// 			// 1. compression support is disabled
// 			// 2. HEAD request
// 			// 3. no Content-Encoding header
// 			// 4. no content response (204)
// 			// 5. content not modified response (304)
// 			if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
// 				response = new Response(body, responseOptions);
// 				resolve(response);
// 				return;
// 			}
//
// 			// For Node v6+
// 			// Be less strict when decoding compressed responses, since sometimes
// 			// servers send slightly invalid responses that are still accepted
// 			// by common browsers.
// 			// Always using Z_SYNC_FLUSH is what cURL does.
// 			const zlibOptions = {
// 				flush: zlib.Z_SYNC_FLUSH,
// 				finishFlush: zlib.Z_SYNC_FLUSH
// 			};
//
// 			// For gzip
// 			if (codings === 'gzip' || codings === 'x-gzip') {
// 				body = pump(body, zlib.createGunzip(zlibOptions), error => {
// 					if (error) {
// 						reject(error);
// 					}
// 				});
// 				response = new Response(body, responseOptions);
// 				resolve(response);
// 				return;
// 			}
//
// 			// For deflate
// 			if (codings === 'deflate' || codings === 'x-deflate') {
// 				// Handle the infamous raw deflate response from old servers
// 				// a hack for old IIS and Apache servers
// 				const raw = pump(response_, new PassThrough(), error => {
// 					if (error) {
// 						reject(error);
// 					}
// 				});
// 				raw.once('data', chunk => {
// 					// See http://stackoverflow.com/questions/37519828
// 					if ((chunk[0] & 0x0F) === 0x08) {
// 						body = pump(body, zlib.createInflate(), error => {
// 							if (error) {
// 								reject(error);
// 							}
// 						});
// 					} else {
// 						body = pump(body, zlib.createInflateRaw(), error => {
// 							if (error) {
// 								reject(error);
// 							}
// 						});
// 					}
//
// 					response = new Response(body, responseOptions);
// 					resolve(response);
// 				});
// 				raw.once('end', () => {
// 					// Some old IIS servers return zero-length OK deflate responses, so
// 					// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903
// 					if (!response) {
// 						response = new Response(body, responseOptions);
// 						resolve(response);
// 					}
// 				});
// 				return;
// 			}
//
// 			// For br
// 			if (codings === 'br') {
// 				body = pump(body, zlib.createBrotliDecompress(), error => {
// 					if (error) {
// 						reject(error);
// 					}
// 				});
// 				response = new Response(body, responseOptions);
// 				resolve(response);
// 				return;
// 			}
//
// 			// Otherwise, use response as-is
// 			response = new Response(body, responseOptions);
// 			resolve(response);
// 		});
//
// 		// eslint-disable-next-line promise/prefer-await-to-then
// 		writeToStream(request_, request).catch(reject);
// 	});
// }
//
// function fixResponseChunkedTransferBadEnding(request, errorCallback) {
// 	const LAST_CHUNK = Buffer.from('0\r\n\r\n');
//
// 	let isChunkedTransfer = false;
// 	let properLastChunkReceived = false;
// 	let previousChunk;
//
// 	request.on('response', response => {
// 		const {headers} = response;
// 		isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];
// 	});
//
// 	request.on('socket', socket => {
// 		const onSocketClose = () => {
// 			if (isChunkedTransfer && !properLastChunkReceived) {
// 				const error = new Error('Premature close');
// 				error.code = 'ERR_STREAM_PREMATURE_CLOSE';
// 				errorCallback(error);
// 			}
// 		};
//
// 		const onData = buf => {
// 			properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;
//
// 			// Sometimes final 0-length chunk and end of message code are in separate packets
// 			if (!properLastChunkReceived && previousChunk) {
// 				properLastChunkReceived = (
// 					Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&
// 					Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0
// 				);
// 			}
//
// 			previousChunk = buf;
// 		};
//
// 		socket.prependListener('close', onSocketClose);
// 		socket.on('data', onData);
//
// 		request.on('close', () => {
// 			socket.removeListener('close', onSocketClose);
// 			socket.removeListener('data', onData);
// 		});
// 	});
// }
// //
// // // TEALSTREET
async function fetch(url, options_) {
    return null;
}

var index = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': fetch
});

exports.AccountNotEnabled = AccountNotEnabled;
exports.AccountSuspended = AccountSuspended;
exports.AddressPending = AddressPending;
exports.ArgumentsRequired = ArgumentsRequired;
exports.AuthenticationError = AuthenticationError;
exports.BadRequest = BadRequest;
exports.BadResponse = BadResponse;
exports.BadSymbol = BadSymbol;
exports.BaseError = BaseError;
exports.CancelPending = CancelPending;
exports.DDoSProtection = DDoSProtection;
exports.DuplicateOrderId = DuplicateOrderId;
exports.Exchange = Exchange;
exports.ExchangeError = ExchangeError;
exports.ExchangeNotAvailable = ExchangeNotAvailable;
exports.InsufficientFunds = InsufficientFunds;
exports.InvalidAddress = InvalidAddress;
exports.InvalidNonce = InvalidNonce;
exports.InvalidOrder = InvalidOrder;
exports.MarginModeAlreadySet = MarginModeAlreadySet;
exports.NetworkError = NetworkError;
exports.NotSupported = NotSupported;
exports.NullResponse = NullResponse;
exports.OnMaintenance = OnMaintenance;
exports.OrderImmediatelyFillable = OrderImmediatelyFillable;
exports.OrderNotCached = OrderNotCached;
exports.OrderNotFillable = OrderNotFillable;
exports.OrderNotFound = OrderNotFound;
exports.PermissionDenied = PermissionDenied;
exports.Precise = Precise;
exports.RateLimitExceeded = RateLimitExceeded;
exports.RequestTimeout = RequestTimeout;
exports.binance = binance$1;
exports.binancecoinm = binancecoinm$1;
exports.binanceusdm = binanceusdm$1;
exports.bingx = bingx$1;
exports.bitget = bitget$1;
exports.bitmex = bitmex$1;
exports.blofin = blofin$1;
exports.bybit = bybit$1;
exports["default"] = ccxt;
exports.errors = errors$1;
exports.exchanges = exchanges;
exports.functions = functions;
exports.okex = okex$1;
exports.okex5 = okex5;
exports.okx = okx$1;
exports.phemex = phemex$1;
exports.pro = pro;
exports.version = version;
exports.woo = woo$1;
exports.woofi = woofi$1;
