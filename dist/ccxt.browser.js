(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ccxt = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccountNotEnabled", {
  enumerable: true,
  get: function () {
    return errors.AccountNotEnabled;
  }
});
Object.defineProperty(exports, "AccountSuspended", {
  enumerable: true,
  get: function () {
    return errors.AccountSuspended;
  }
});
Object.defineProperty(exports, "AddressPending", {
  enumerable: true,
  get: function () {
    return errors.AddressPending;
  }
});
Object.defineProperty(exports, "ArgumentsRequired", {
  enumerable: true,
  get: function () {
    return errors.ArgumentsRequired;
  }
});
Object.defineProperty(exports, "AuthenticationError", {
  enumerable: true,
  get: function () {
    return errors.AuthenticationError;
  }
});
Object.defineProperty(exports, "BadRequest", {
  enumerable: true,
  get: function () {
    return errors.BadRequest;
  }
});
Object.defineProperty(exports, "BadResponse", {
  enumerable: true,
  get: function () {
    return errors.BadResponse;
  }
});
Object.defineProperty(exports, "BadSymbol", {
  enumerable: true,
  get: function () {
    return errors.BadSymbol;
  }
});
Object.defineProperty(exports, "BaseError", {
  enumerable: true,
  get: function () {
    return errors.BaseError;
  }
});
Object.defineProperty(exports, "CancelPending", {
  enumerable: true,
  get: function () {
    return errors.CancelPending;
  }
});
Object.defineProperty(exports, "DDoSProtection", {
  enumerable: true,
  get: function () {
    return errors.DDoSProtection;
  }
});
Object.defineProperty(exports, "DuplicateOrderId", {
  enumerable: true,
  get: function () {
    return errors.DuplicateOrderId;
  }
});
Object.defineProperty(exports, "Exchange", {
  enumerable: true,
  get: function () {
    return _Exchange.Exchange;
  }
});
Object.defineProperty(exports, "ExchangeError", {
  enumerable: true,
  get: function () {
    return errors.ExchangeError;
  }
});
Object.defineProperty(exports, "ExchangeNotAvailable", {
  enumerable: true,
  get: function () {
    return errors.ExchangeNotAvailable;
  }
});
Object.defineProperty(exports, "InsufficientFunds", {
  enumerable: true,
  get: function () {
    return errors.InsufficientFunds;
  }
});
Object.defineProperty(exports, "InvalidAddress", {
  enumerable: true,
  get: function () {
    return errors.InvalidAddress;
  }
});
Object.defineProperty(exports, "InvalidNonce", {
  enumerable: true,
  get: function () {
    return errors.InvalidNonce;
  }
});
Object.defineProperty(exports, "InvalidOrder", {
  enumerable: true,
  get: function () {
    return errors.InvalidOrder;
  }
});
Object.defineProperty(exports, "MarginModeAlreadySet", {
  enumerable: true,
  get: function () {
    return errors.MarginModeAlreadySet;
  }
});
Object.defineProperty(exports, "NetworkError", {
  enumerable: true,
  get: function () {
    return errors.NetworkError;
  }
});
Object.defineProperty(exports, "NotSupported", {
  enumerable: true,
  get: function () {
    return errors.NotSupported;
  }
});
Object.defineProperty(exports, "NullResponse", {
  enumerable: true,
  get: function () {
    return errors.NullResponse;
  }
});
Object.defineProperty(exports, "OnMaintenance", {
  enumerable: true,
  get: function () {
    return errors.OnMaintenance;
  }
});
Object.defineProperty(exports, "OrderImmediatelyFillable", {
  enumerable: true,
  get: function () {
    return errors.OrderImmediatelyFillable;
  }
});
Object.defineProperty(exports, "OrderNotCached", {
  enumerable: true,
  get: function () {
    return errors.OrderNotCached;
  }
});
Object.defineProperty(exports, "OrderNotFillable", {
  enumerable: true,
  get: function () {
    return errors.OrderNotFillable;
  }
});
Object.defineProperty(exports, "OrderNotFound", {
  enumerable: true,
  get: function () {
    return errors.OrderNotFound;
  }
});
Object.defineProperty(exports, "PermissionDenied", {
  enumerable: true,
  get: function () {
    return errors.PermissionDenied;
  }
});
Object.defineProperty(exports, "Precise", {
  enumerable: true,
  get: function () {
    return _Precise.Precise;
  }
});
Object.defineProperty(exports, "RateLimitExceeded", {
  enumerable: true,
  get: function () {
    return errors.RateLimitExceeded;
  }
});
Object.defineProperty(exports, "RequestTimeout", {
  enumerable: true,
  get: function () {
    return errors.RequestTimeout;
  }
});
Object.defineProperty(exports, "binance", {
  enumerable: true,
  get: function () {
    return _binance.default;
  }
});
Object.defineProperty(exports, "binancecoinm", {
  enumerable: true,
  get: function () {
    return _binancecoinm.default;
  }
});
Object.defineProperty(exports, "binanceusdm", {
  enumerable: true,
  get: function () {
    return _binanceusdm.default;
  }
});
Object.defineProperty(exports, "bingx", {
  enumerable: true,
  get: function () {
    return _bingx.default;
  }
});
Object.defineProperty(exports, "bitget", {
  enumerable: true,
  get: function () {
    return _bitget.default;
  }
});
Object.defineProperty(exports, "bitmex", {
  enumerable: true,
  get: function () {
    return _bitmex.default;
  }
});
Object.defineProperty(exports, "blofin", {
  enumerable: true,
  get: function () {
    return _blofin.default;
  }
});
Object.defineProperty(exports, "bybit", {
  enumerable: true,
  get: function () {
    return _bybit.default;
  }
});
exports.functions = exports.exchanges = exports.errors = exports.default = void 0;
Object.defineProperty(exports, "okex", {
  enumerable: true,
  get: function () {
    return _okex.default;
  }
});
Object.defineProperty(exports, "okex5", {
  enumerable: true,
  get: function () {
    return _okex2.default;
  }
});
Object.defineProperty(exports, "okx", {
  enumerable: true,
  get: function () {
    return _okx.default;
  }
});
Object.defineProperty(exports, "phemex", {
  enumerable: true,
  get: function () {
    return _phemex.default;
  }
});
exports.version = exports.pro = void 0;
Object.defineProperty(exports, "woo", {
  enumerable: true,
  get: function () {
    return _woo.default;
  }
});
Object.defineProperty(exports, "woofi", {
  enumerable: true,
  get: function () {
    return _woofi.default;
  }
});
var _Exchange = require("./src/base/Exchange.js");
var _Precise = require("./src/base/Precise.js");
var functions = _interopRequireWildcard(require("./src/base/functions.js"));
exports.functions = functions;
var errors = _interopRequireWildcard(require("./src/base/errors.js"));
exports.errors = errors;
var _binance = _interopRequireDefault(require("./src/binance.js"));
var _binancecoinm = _interopRequireDefault(require("./src/binancecoinm.js"));
var _binanceusdm = _interopRequireDefault(require("./src/binanceusdm.js"));
var _bingx = _interopRequireDefault(require("./src/bingx.js"));
var _bitget = _interopRequireDefault(require("./src/bitget.js"));
var _bitmex = _interopRequireDefault(require("./src/bitmex.js"));
var _blofin = _interopRequireDefault(require("./src/blofin.js"));
var _bybit = _interopRequireDefault(require("./src/bybit.js"));
var _okex = _interopRequireDefault(require("./src/okex.js"));
var _okex2 = _interopRequireDefault(require("./src/okex5.js"));
var _okx = _interopRequireDefault(require("./src/okx.js"));
var _phemex = _interopRequireDefault(require("./src/phemex.js"));
var _woo = _interopRequireDefault(require("./src/woo.js"));
var _woofi = _interopRequireDefault(require("./src/woofi.js"));
var _binance2 = _interopRequireDefault(require("./src/pro/binance.js"));
var _binancecoinm2 = _interopRequireDefault(require("./src/pro/binancecoinm.js"));
var _binanceusdm2 = _interopRequireDefault(require("./src/pro/binanceusdm.js"));
var _bingx2 = _interopRequireDefault(require("./src/pro/bingx.js"));
var _bitget2 = _interopRequireDefault(require("./src/pro/bitget.js"));
var _bitmex2 = _interopRequireDefault(require("./src/pro/bitmex.js"));
var _blofin2 = _interopRequireDefault(require("./src/pro/blofin.js"));
var _bybit2 = _interopRequireDefault(require("./src/pro/bybit.js"));
var _okex3 = _interopRequireDefault(require("./src/pro/okex.js"));
var _okx2 = _interopRequireDefault(require("./src/pro/okx.js"));
var _phemex2 = _interopRequireDefault(require("./src/pro/phemex.js"));
var _woo2 = _interopRequireDefault(require("./src/pro/woo.js"));
var _woofi2 = _interopRequireDefault(require("./src/pro/woofi.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*

MIT License

Copyright (c) 2017 Igor Kroitor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//-----------------------------------------------------------------------------
/* eslint-disable */

//-----------------------------------------------------------------------------
// this is updated by vss.js when building
const version = '3.0.22';
exports.version = version;
_Exchange.Exchange.ccxtVersion = version;
//-----------------------------------------------------------------------------

const exchanges = {
  'binance': _binance.default,
  'binancecoinm': _binancecoinm.default,
  'binanceusdm': _binanceusdm.default,
  'bingx': _bingx.default,
  'bitget': _bitget.default,
  'bitmex': _bitmex.default,
  'blofin': _blofin.default,
  'bybit': _bybit.default,
  'okex': _okex.default,
  'okex5': _okex2.default,
  'okx': _okx.default,
  'phemex': _phemex.default,
  'woo': _woo.default,
  'woofi': _woofi.default
};
exports.exchanges = exchanges;
const pro = {
  'binance': _binance2.default,
  'binancecoinm': _binancecoinm2.default,
  'binanceusdm': _binanceusdm2.default,
  'bingx': _bingx2.default,
  'bitget': _bitget2.default,
  'bitmex': _bitmex2.default,
  'blofin': _blofin2.default,
  'bybit': _bybit2.default,
  'okex': _okex3.default,
  'okx': _okx2.default,
  'phemex': _phemex2.default,
  'woo': _woo2.default,
  'woofi': _woofi2.default
};
exports.pro = pro;
for (const exchange in pro) {
  // const ccxtExchange = exchanges[exchange]
  // const baseExchange = Object.getPrototypeOf (ccxtExchange)
  // if (baseExchange.name === 'Exchange') {
  //     Object.setPrototypeOf (ccxtExchange, wsExchange)
  //     Object.setPrototypeOf (ccxtExchange.prototype, wsExchange.prototype)
  // }
}
pro.exchanges = Object.keys(pro);
pro['Exchange'] = _Exchange.Exchange; // now the same for rest and ts
//-----------------------------------------------------------------------------
const ccxt = Object.assign({
  version,
  Exchange: _Exchange.Exchange,
  Precise: _Precise.Precise,
  'exchanges': Object.keys(exchanges),
  'pro': pro
}, exchanges, functions, errors);
var _default = ccxt; //-----------------------------------------------------------------------------
exports.default = _default;

},{"./src/base/Exchange.js":2,"./src/base/Precise.js":3,"./src/base/errors.js":5,"./src/base/functions.js":6,"./src/binance.js":24,"./src/binancecoinm.js":25,"./src/binanceusdm.js":26,"./src/bingx.js":27,"./src/bitget.js":28,"./src/bitmex.js":29,"./src/blofin.js":30,"./src/bybit.js":31,"./src/okex.js":32,"./src/okex5.js":33,"./src/okx.js":34,"./src/phemex.js":35,"./src/pro/binance.js":36,"./src/pro/binancecoinm.js":37,"./src/pro/binanceusdm.js":38,"./src/pro/bingx.js":39,"./src/pro/bitget.js":40,"./src/pro/bitmex.js":41,"./src/pro/blofin.js":42,"./src/pro/bybit.js":43,"./src/pro/okex.js":44,"./src/pro/okx.js":45,"./src/pro/phemex.js":46,"./src/pro/woo.js":47,"./src/pro/woofi.js":48,"./src/woo.js":87,"./src/woofi.js":88}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Exchange = void 0;
var functions = _interopRequireWildcard(require("./functions.js"));
var _functions2 = require("./ws/functions.js");
var _errors = require("./errors.js");
var _Precise = require("./Precise.js");
var _WsClient = _interopRequireDefault(require("./ws/WsClient.js"));
var _Future = _interopRequireDefault(require("./ws/Future.js"));
var _OrderBook = require("./ws/OrderBook.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// ----------------------------------------------------------------------------
/* eslint-disable */

const {
  isNode,
  keys,
  values,
  deepExtend,
  extend,
  clone,
  flatten,
  pluck,
  unique,
  indexBy,
  sortBy,
  sortBy2,
  safeFloat2,
  groupBy,
  aggregate,
  uuid,
  unCamelCase,
  precisionFromString,
  throttle,
  capitalize,
  now,
  buildOHLCVC,
  decimalToPrecision,
  safeValue,
  safeValue2,
  safeString,
  safeString2,
  seconds,
  milliseconds,
  binaryToBase16,
  numberToBE,
  base16ToBinary,
  stringToBinary,
  iso8601,
  omit,
  isJsonEncodedObject,
  safeInteger,
  sum,
  omitZero,
  implodeParams,
  extractParams,
  json,
  vwap,
  merge,
  binaryConcat,
  hash,
  ecdsa,
  totp,
  arrayConcat,
  encode,
  urlencode,
  hmac,
  numberToString,
  parseTimeframe,
  safeInteger2,
  safeStringLower,
  parse8601,
  yyyymmdd,
  safeStringUpper,
  safeTimestamp,
  binaryConcatArray,
  uuidv1,
  numberToLE,
  ymdhms,
  stringToBase64,
  decode,
  uuid22,
  safeIntegerProduct2,
  safeIntegerProduct,
  safeStringLower2,
  yymmdd,
  base58ToBinary,
  eddsa,
  safeTimestamp2,
  rawencode,
  keysort,
  inArray,
  isEmpty,
  ordered,
  jwt,
  filterBy,
  uuid16,
  safeFloat,
  base64ToBinary,
  safeStringUpper2,
  urlencodeWithArrayRepeat,
  microseconds,
  binaryToBase64,
  rsa,
  strip,
  toArray,
  safeFloatN,
  safeIntegerN,
  safeIntegerProductN,
  safeTimestampN,
  safeValueN,
  safeStringN,
  safeStringLowerN,
  safeStringUpperN,
  urlencodeNested,
  parseDate,
  ymd,
  isArray,
  base64ToString,
  crc32,
  TRUNCATE,
  ROUND,
  DECIMAL_PLACES,
  NO_PADDING,
  TICK_SIZE
} = functions;
// ----------------------------------------------------------------------------
// move this elsewhere
// ----------------------------------------------------------------------------
class Exchange {
  constructor(userConfig = {}) {
    this.httpAgent = undefined;
    this.httpsAgent = undefined;
    this.agent = undefined;
    this.api = undefined;
    // prepended to URL, like https://proxy.com/https://exchange.com/api...
    this.proxy = '';
    this.origin = '*'; // CORS origin
    this.minFundingAddressLength = 1; // used in checkAddress
    this.substituteCommonCurrencyCodes = true; // reserved
    this.quoteJsonNumbers = true; // treat numbers in json as quoted precise strings
    this.number = Number; // or String (a pointer to a function)
    this.handleContentTypeApplicationZip = false;
    // whether fees should be summed by currency code
    this.reduceFees = true;
    this.validateServerSsl = true;
    this.validateClientSsl = false;
    this.timeout = 10000; // milliseconds
    this.verbose = false;
    this.debug = false;
    this.userAgent = undefined;
    this.twofa = undefined; // two-factor authentication (2FA)
    this.apiKey = undefined;
    this.secret = undefined;
    this.uid = undefined;
    this.login = undefined;
    this.password = undefined;
    this.privateKey = undefined; // a "0x"-prefixed hexstring private key for a wallet
    this.walletAddress = undefined; // a wallet address "0x"-prefixed hexstring
    this.token = undefined; // reserved for HTTP auth in some cases
    this.balance = {};
    this.orderbooks = {};
    this.tickers = {};
    this.orders = undefined;
    this.transactions = {};
    this.positions = {};
    this.urls = {};
    this.requiresWeb3 = false;
    this.requiresEddsa = false;
    this.precision = {};
    this.enableLastJsonResponse = true;
    this.enableLastHttpResponse = true;
    this.enableLastResponseHeaders = true;
    this.last_http_response = undefined;
    this.last_json_response = undefined;
    this.last_response_headers = undefined;
    this.id = undefined;
    this.markets = undefined;
    this.has = {};
    this.status = undefined;
    this.requiredCredentials = undefined;
    this.rateLimit = undefined;
    this.tokenBucket = undefined;
    this.throttle = undefined;
    this.enableRateLimit = undefined;
    this.enableWsRateLimit = undefined;
    this.httpExceptions = undefined;
    this.limits = undefined;
    this.fees = undefined;
    this.markets_by_id = undefined;
    this.symbols = undefined;
    this.ids = undefined;
    this.currencies = undefined;
    this.baseCurrencies = undefined;
    this.quoteCurrencies = undefined;
    this.currencies_by_id = undefined;
    this.codes = undefined;
    this.reloadingMarkets = undefined;
    this.marketsLoading = undefined;
    this.accounts = undefined;
    this.accountsById = undefined;
    this.commonCurrencies = undefined;
    this.hostname = undefined;
    this.precisionMode = undefined;
    this.paddingMode = undefined;
    this.exceptions = {};
    this.timeframes = [];
    this.version = undefined;
    this.marketsByAltname = undefined;
    this.name = undefined;
    this.lastRestRequestTimestamp = undefined;
    this.targetAccount = undefined;
    this.stablePairs = {};
    // WS/PRO options
    this.clients = {};
    this.newUpdates = true;
    this.streaming = {};
    this.deepExtend = deepExtend;
    this.isNode = isNode;
    this.keys = keys;
    this.values = values;
    this.extend = extend;
    this.clone = clone;
    this.flatten = flatten;
    this.pluck = pluck;
    this.unique = unique;
    this.indexBy = indexBy;
    this.sortBy = sortBy;
    this.sortBy2 = sortBy2;
    this.groupBy = groupBy;
    this.aggregate = aggregate;
    this.uuid = uuid;
    this.unCamelCase = unCamelCase;
    this.precisionFromString = precisionFromString;
    this.capitalize = capitalize;
    this.now = now;
    this.buildOHLCVC = buildOHLCVC;
    this.decimalToPrecision = decimalToPrecision;
    this.safeValue = safeValue;
    this.safeValue2 = safeValue2;
    this.safeString = safeString;
    this.safeString2 = safeString2;
    this.safeFloat = safeFloat;
    this.safeFloat2 = safeFloat2;
    this.seconds = seconds;
    this.milliseconds = milliseconds;
    this.binaryToBase16 = binaryToBase16;
    this.numberToBE = numberToBE;
    this.base16ToBinary = base16ToBinary;
    this.stringToBinary = stringToBinary;
    this.iso8601 = iso8601;
    this.omit = omit;
    this.isJsonEncodedObject = isJsonEncodedObject;
    this.safeInteger = safeInteger;
    this.sum = sum;
    this.omitZero = omitZero;
    this.implodeParams = implodeParams;
    this.extractParams = extractParams;
    this.json = json;
    this.vwap = vwap;
    this.merge = merge;
    this.binaryConcat = binaryConcat;
    this.hash = hash;
    this.ecdsa = ecdsa;
    this.totp = totp;
    this.arrayConcat = arrayConcat;
    this.encode = encode;
    this.urlencode = urlencode;
    this.hmac = hmac;
    this.numberToString = numberToString;
    this.parseTimeframe = parseTimeframe;
    this.safeInteger2 = safeInteger2;
    this.safeStringLower = safeStringLower;
    this.parse8601 = parse8601;
    this.yyyymmdd = yyyymmdd;
    this.safeStringUpper = safeStringUpper;
    this.safeTimestamp = safeTimestamp;
    this.binaryConcatArray = binaryConcatArray;
    this.uuidv1 = uuidv1;
    this.numberToLE = numberToLE;
    this.ymdhms = ymdhms;
    this.yymmdd = yymmdd;
    this.stringToBase64 = stringToBase64;
    this.decode = decode;
    this.uuid22 = uuid22;
    this.safeIntegerProduct2 = safeIntegerProduct2;
    this.safeIntegerProduct = safeIntegerProduct;
    this.base58ToBinary = base58ToBinary;
    this.base64ToBinary = base64ToBinary;
    this.eddsa = eddsa;
    this.safeTimestamp2 = safeTimestamp2;
    this.rawencode = rawencode;
    this.keysort = keysort;
    this.inArray = inArray;
    this.safeStringLower2 = safeStringLower2;
    this.safeStringUpper2 = safeStringUpper2;
    this.isEmpty = isEmpty;
    this.ordered = ordered;
    this.jwt = jwt;
    this.filterBy = filterBy;
    this.uuid16 = uuid16;
    this.urlencodeWithArrayRepeat = urlencodeWithArrayRepeat;
    this.microseconds = microseconds;
    this.binaryToBase64 = binaryToBase64;
    this.rsa = rsa;
    this.strip = strip;
    this.toArray = toArray;
    this.safeFloatN = safeFloatN;
    this.safeIntegerN = safeIntegerN;
    this.safeIntegerProductN = safeIntegerProductN;
    this.safeTimestampN = safeTimestampN;
    this.safeValueN = safeValueN;
    this.safeStringN = safeStringN;
    this.safeStringLowerN = safeStringLowerN;
    this.safeStringUpperN = safeStringUpperN;
    this.urlencodeNested = urlencodeNested;
    this.parseDate = parseDate;
    this.ymd = ymd;
    this.isArray = isArray;
    this.base64ToString = base64ToString;
    this.crc32 = crc32;
    this.inflate = _functions2.inflate;
    this.inflate64 = _functions2.inflate64;
    this.gunzip = _functions2.gunzip;
    Object.assign(this, functions);
    //
    //     if (isNode) {
    //         this.nodeVersion = process.version.match (/\d+\.\d+\.\d+/)[0]
    //         this.userAgent = {
    //             'User-Agent': 'ccxt/' + (Exchange as any).ccxtVersion +
    //                 ' (+https://github.com/ccxt/ccxt)' +
    //                 ' Node.js/' + this.nodeVersion + ' (JavaScript)'
    //         }
    //     }
    //
    this.options = this.getDefaultOptions(); // exchange-specific options, if any
    // fetch implementation options (JS only)
    this.fetchOptions = {
      // keepalive: true, // does not work in Chrome, https://github.com/ccxt/ccxt/issues/6368
    };
    // http properties
    this.userAgents = {
      'chrome': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',
      'chrome39': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36',
      'chrome100': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36'
    };
    this.headers = {};
    // prepended to URL, like https://proxy.com/https://exchange.com/api...
    this.proxy = '';
    this.origin = '*'; // CORS origin
    // underlying properties
    this.minFundingAddressLength = 1; // used in checkAddress
    this.substituteCommonCurrencyCodes = true; // reserved
    this.quoteJsonNumbers = true; // treat numbers in json as quoted precise strings
    this.number = Number; // or String (a pointer to a function)
    this.handleContentTypeApplicationZip = false;
    // whether fees should be summed by currency code
    this.reduceFees = true;
    // do not delete this line, it is needed for users to be able to define their own fetchImplementation
    this.fetchImplementation = undefined;
    this.validateServerSsl = true;
    this.validateClientSsl = false;
    // default property values
    this.timeout = 10000; // milliseconds
    this.verbose = false;
    this.debug = false;
    this.userAgent = undefined;
    this.twofa = undefined; // two-factor authentication (2FA)
    // default credentials
    this.apiKey = undefined;
    this.secret = undefined;
    this.uid = undefined;
    this.login = undefined;
    this.password = undefined;
    this.privateKey = undefined; // a "0x"-prefixed hexstring private key for a wallet
    this.walletAddress = undefined; // a wallet address "0x"-prefixed hexstring
    this.token = undefined; // reserved for HTTP auth in some cases
    // placeholders for cached data
    this.balance = {};
    this.orderbooks = {};
    this.tickers = {};
    this.orders = undefined;
    this.trades = {};
    this.transactions = {};
    this.ohlcvs = {};
    this.myTrades = undefined;
    this.positions = {};
    // web3 and cryptography flags
    this.requiresWeb3 = false;
    this.requiresEddsa = false;
    this.precision = {};
    // response handling flags and properties
    this.lastRestRequestTimestamp = 0;
    this.enableLastJsonResponse = true;
    this.enableLastHttpResponse = true;
    this.enableLastResponseHeaders = true;
    this.last_http_response = undefined;
    this.last_json_response = undefined;
    this.last_response_headers = undefined;
    // camelCase and snake_notation support
    const unCamelCaseProperties = (obj = this) => {
      if (obj !== null) {
        const ownPropertyNames = Object.getOwnPropertyNames(obj);
        for (let i = 0; i < ownPropertyNames.length; i++) {
          const k = ownPropertyNames[i];
          this[unCamelCase(k)] = this[k];
        }
        unCamelCaseProperties(Object.getPrototypeOf(obj));
      }
    };
    unCamelCaseProperties();
    // merge constructor overrides to this instance
    const configEntries = Object.entries(this.describe()).concat(Object.entries(userConfig));
    for (let i = 0; i < configEntries.length; i++) {
      const [property, value] = configEntries[i];
      if (value && Object.getPrototypeOf(value) === Object.prototype) {
        this[property] = this.deepExtend(this[property], value);
      } else {
        this[property] = value;
      }
    }
    // http client options
    const agentOptions = {
      'keepAlive': true
    };
    // ssl options
    if (!this.validateServerSsl) {
      agentOptions['rejectUnauthorized'] = false;
    }
    // generate old metainfo interface
    const hasKeys = Object.keys(this.has);
    for (let i = 0; i < hasKeys.length; i++) {
      const k = hasKeys[i];
      this['has' + this.capitalize(k)] = !!this.has[k]; // converts 'emulated' to true
    }
    // generate implicit api
    if (this.api) {
      this.defineRestApi(this.api, 'request');
    }
    // init the request rate limiter
    this.initRestRateLimiter();
    // TEALSTREET
    this._loadMarketsPromise = new Promise((resolve, reject) => {
      this._loadMarketsResolve = resolve;
      this._loadMarketsReject = reject;
    });
    // init predefined markets if any
    if (this.markets) {
      this.setMarkets(this.markets);
    }
    this.newUpdates = this.options.newUpdates !== undefined ? this.options.newUpdates : true;
  }
  describe() {
    return {
      'id': undefined,
      'name': undefined,
      'countries': undefined,
      'enableRateLimit': true,
      'enableWsRateLimit': true,
      'rateLimit': 2000,
      'certified': false,
      'pro': false,
      'alias': false,
      'has': {
        'publicAPI': true,
        'privateAPI': true,
        'CORS': undefined,
        'spot': undefined,
        'margin': undefined,
        'swap': undefined,
        'future': undefined,
        'option': undefined,
        'addMargin': undefined,
        'cancelAllOrders': undefined,
        'cancelOrder': true,
        'cancelOrders': undefined,
        'createDepositAddress': undefined,
        'createLimitOrder': true,
        'createMarketOrder': true,
        'createOrder': true,
        'createPostOnlyOrder': undefined,
        'createReduceOnlyOrder': undefined,
        'createStopOrder': undefined,
        'createStopLimitOrder': undefined,
        'createStopMarketOrder': undefined,
        'editOrder': 'emulated',
        'fetchAccounts': undefined,
        'fetchBalance': true,
        'fetchBidsAsks': undefined,
        'fetchBorrowInterest': undefined,
        'fetchBorrowRate': undefined,
        'fetchBorrowRateHistory': undefined,
        'fetchBorrowRatesPerSymbol': undefined,
        'fetchBorrowRates': undefined,
        'fetchCanceledOrders': undefined,
        'fetchClosedOrder': undefined,
        'fetchClosedOrders': undefined,
        'fetchCurrencies': 'emulated',
        'fetchDeposit': undefined,
        'fetchDepositAddress': undefined,
        'fetchDepositAddresses': undefined,
        'fetchDepositAddressesByNetwork': undefined,
        'fetchDeposits': undefined,
        'fetchTransactionFee': undefined,
        'fetchTransactionFees': undefined,
        'fetchFundingHistory': undefined,
        'fetchFundingRate': undefined,
        'fetchFundingRateHistory': undefined,
        'fetchFundingRates': undefined,
        'fetchIndexOHLCV': undefined,
        'fetchL2OrderBook': true,
        'fetchLastPrices': undefined,
        'fetchLedger': undefined,
        'fetchLedgerEntry': undefined,
        'fetchLeverageTiers': undefined,
        'fetchMarketLeverageTiers': undefined,
        'fetchMarkets': true,
        'fetchMarkOHLCV': undefined,
        'fetchMyTrades': undefined,
        'fetchOHLCV': 'emulated',
        'fetchOpenInterest': undefined,
        'fetchOpenInterestHistory': undefined,
        'fetchOpenOrder': undefined,
        'fetchOpenOrders': undefined,
        'fetchOrder': undefined,
        'fetchOrderBook': true,
        'fetchOrderBooks': undefined,
        'fetchOrders': undefined,
        'fetchOrderTrades': undefined,
        'fetchPermissions': undefined,
        'fetchPosition': undefined,
        'fetchPositions': undefined,
        'fetchPositionsRisk': undefined,
        'fetchPremiumIndexOHLCV': undefined,
        'fetchStatus': 'emulated',
        'fetchTicker': true,
        'fetchTickers': undefined,
        'fetchTime': undefined,
        'fetchTrades': true,
        'fetchTradingFee': undefined,
        'fetchTradingFees': undefined,
        'fetchTradingLimits': undefined,
        'fetchTransactions': undefined,
        'fetchTransfers': undefined,
        'fetchWithdrawAddresses': undefined,
        'fetchWithdrawal': undefined,
        'fetchWithdrawals': undefined,
        'reduceMargin': undefined,
        'setLeverage': undefined,
        'setMargin': undefined,
        'setMarginMode': undefined,
        'setPositionMode': undefined,
        'signIn': undefined,
        'transfer': undefined,
        'withdraw': undefined
      },
      'urls': {
        'logo': undefined,
        'api': undefined,
        'www': undefined,
        'doc': undefined,
        'fees': undefined
      },
      'api': undefined,
      'requiredCredentials': {
        'apiKey': true,
        'secret': true,
        'uid': false,
        'login': false,
        'password': false,
        'twofa': false,
        'privateKey': false,
        'walletAddress': false,
        'token': false // reserved for HTTP auth in some cases
      },

      'markets': undefined,
      'currencies': {},
      'timeframes': undefined,
      'fees': {
        'trading': {
          'tierBased': undefined,
          'percentage': undefined,
          'taker': undefined,
          'maker': undefined
        },
        'funding': {
          'tierBased': undefined,
          'percentage': undefined,
          'withdraw': {},
          'deposit': {}
        }
      },
      'status': {
        'status': 'ok',
        'updated': undefined,
        'eta': undefined,
        'url': undefined
      },
      'exceptions': undefined,
      'httpExceptions': {
        '422': _errors.ExchangeError,
        '418': _errors.DDoSProtection,
        '429': _errors.RateLimitExceeded,
        '404': _errors.ExchangeNotAvailable,
        '409': _errors.ExchangeNotAvailable,
        '410': _errors.ExchangeNotAvailable,
        '451': _errors.ExchangeNotAvailable,
        '500': _errors.ExchangeNotAvailable,
        '501': _errors.ExchangeNotAvailable,
        '502': _errors.ExchangeNotAvailable,
        '520': _errors.ExchangeNotAvailable,
        '521': _errors.ExchangeNotAvailable,
        '522': _errors.ExchangeNotAvailable,
        '525': _errors.ExchangeNotAvailable,
        '526': _errors.ExchangeNotAvailable,
        '400': _errors.ExchangeNotAvailable,
        '403': _errors.ExchangeNotAvailable,
        '405': _errors.ExchangeNotAvailable,
        '503': _errors.ExchangeNotAvailable,
        '530': _errors.ExchangeNotAvailable,
        '408': _errors.RequestTimeout,
        '504': _errors.RequestTimeout,
        '401': _errors.AuthenticationError,
        '407': _errors.AuthenticationError,
        '511': _errors.AuthenticationError
      },
      'commonCurrencies': {
        'XBT': 'BTC',
        'BCC': 'BCH',
        'BCHABC': 'BCH',
        'BCHSV': 'BSV'
      },
      'precisionMode': DECIMAL_PLACES,
      'paddingMode': NO_PADDING,
      'limits': {
        'leverage': {
          'min': undefined,
          'max': undefined
        },
        'amount': {
          'min': undefined,
          'max': undefined
        },
        'price': {
          'min': undefined,
          'max': undefined
        },
        'cost': {
          'min': undefined,
          'max': undefined
        }
      }
    }; // return
  } // describe ()
  encodeURIComponent(...args) {
    // @ts-expect-error
    return encodeURIComponent(...args);
  }
  checkRequiredVersion(requiredVersion, error = true) {
    let result = true;
    const [major1, minor1, patch1] = requiredVersion.split('.'),
      [major2, minor2, patch2] = Exchange.ccxtVersion.split('.'),
      intMajor1 = this.parseToInt(major1),
      intMinor1 = this.parseToInt(minor1),
      intPatch1 = this.parseToInt(patch1),
      intMajor2 = this.parseToInt(major2),
      intMinor2 = this.parseToInt(minor2),
      intPatch2 = this.parseToInt(patch2);
    if (intMajor1 > intMajor2) {
      result = false;
    }
    if (intMajor1 === intMajor2) {
      if (intMinor1 > intMinor2) {
        result = false;
      } else if (intMinor1 === intMinor2 && intPatch1 > intPatch2) {
        result = false;
      }
    }
    if (!result) {
      if (error) {
        throw new _errors.NotSupported('Your current version of CCXT is ' + Exchange.ccxtVersion + ', a newer version ' + requiredVersion + ' is required, please, upgrade your version of CCXT');
      } else {
        return error;
      }
    }
    return result;
  }
  checkAddress(address) {
    if (address === undefined) {
      throw new _errors.InvalidAddress(this.id + ' address is undefined');
    }
    // check the address is not the same letter like 'aaaaa' nor too short nor has a space
    if (this.unique(address).length === 1 || address.length < this.minFundingAddressLength || address.includes(' ')) {
      throw new _errors.InvalidAddress(this.id + ' address is invalid or has less than ' + this.minFundingAddressLength.toString() + ' characters: "' + this.json(address) + '"');
    }
    return address;
  }
  initRestRateLimiter() {
    if (this.rateLimit === undefined) {
      throw new Error(this.id + '.rateLimit property is not configured');
    }
    this.tokenBucket = this.extend({
      delay: 0.001,
      capacity: 1,
      cost: 1,
      maxCapacity: 1000,
      refillRate: this.rateLimit > 0 ? 1 / this.rateLimit : Number.MAX_VALUE
    }, this.tokenBucket);
    this.throttle = throttle(this.tokenBucket);
  }
  setSandboxMode(enabled) {
    if (!!enabled) {
      // eslint-disable-line no-extra-boolean-cast
      if ('test' in this.urls) {
        if (typeof this.urls['api'] === 'string') {
          this.urls['apiBackup'] = this.urls['api'];
          this.urls['api'] = this.urls['test'];
        } else {
          this.urls['apiBackup'] = clone(this.urls['api']);
          this.urls['api'] = clone(this.urls['test']);
        }
      } else {
        throw new _errors.NotSupported(this.id + ' does not have a sandbox URL');
      }
    } else if ('apiBackup' in this.urls) {
      if (typeof this.urls['api'] === 'string') {
        this.urls['api'] = this.urls['apiBackup'];
      } else {
        this.urls['api'] = clone(this.urls['apiBackup']);
      }
    }
  }
  defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths, config = {}) {
    const splitPath = path.split(/[^a-zA-Z0-9]/);
    const camelcaseSuffix = splitPath.map(this.capitalize).join('');
    const underscoreSuffix = splitPath.map(x => x.trim().toLowerCase()).filter(x => x.length > 0).join('_');
    const camelcasePrefix = [paths[0]].concat(paths.slice(1).map(this.capitalize)).join('');
    const underscorePrefix = [paths[0]].concat(paths.slice(1).map(x => x.trim()).filter(x => x.length > 0)).join('_');
    const camelcase = camelcasePrefix + camelcaseMethod + this.capitalize(camelcaseSuffix);
    const underscore = underscorePrefix + '_' + lowercaseMethod + '_' + underscoreSuffix;
    const typeArgument = paths.length > 1 ? paths : paths[0];
    // handle call costs here
    const partial = async (params = {}, context = {}) => this[methodName](path, typeArgument, uppercaseMethod, params, undefined, undefined, config, context);
    // const partial = async (params) => this[methodName] (path, typeArgument, uppercaseMethod, params || {})
    this[camelcase] = partial;
    this[underscore] = partial;
  }
  defineRestApi(api, methodName, paths = []) {
    const keys = Object.keys(api);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const value = api[key];
      const uppercaseMethod = key.toUpperCase();
      const lowercaseMethod = key.toLowerCase();
      const camelcaseMethod = this.capitalize(lowercaseMethod);
      if (Array.isArray(value)) {
        for (let k = 0; k < value.length; k++) {
          const path = value[k].trim();
          this.defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths);
        }
        // the options HTTP method conflicts with the 'options' API url path
        // } else if (key.match (/^(?:get|post|put|delete|options|head|patch)$/i)) {
      } else if (key.match(/^(?:get|post|put|delete|head|patch)$/i)) {
        const endpoints = Object.keys(value);
        for (let j = 0; j < endpoints.length; j++) {
          const endpoint = endpoints[j];
          const path = endpoint.trim();
          const config = value[endpoint];
          if (typeof config === 'object') {
            this.defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths, config);
          } else if (typeof config === 'number') {
            this.defineRestApiEndpoint(methodName, uppercaseMethod, lowercaseMethod, camelcaseMethod, path, paths, {
              cost: config
            });
          } else {
            throw new _errors.NotSupported(this.id + ' defineRestApi() API format is not supported, API leafs must strings, objects or numbers');
          }
        }
      } else {
        this.defineRestApi(value, methodName, paths.concat([key]));
      }
    }
  }
  log(...args) {
    console.log(...args);
  }
  async fetch(url, method = 'GET', headers = undefined, body = undefined) {
    if (isNode && this.userAgent) {
      if (typeof this.userAgent === 'string') {
        headers = this.extend({
          'User-Agent': this.userAgent
        }, headers);
      } else if (typeof this.userAgent === 'object' && 'User-Agent' in this.userAgent) {
        headers = this.extend(this.userAgent, headers);
      }
    }
    if (typeof this.proxy === 'function') {
      url = this.proxy(url);
      if (isNode) {
        headers = this.extend({
          'Origin': this.origin
        }, headers);
      }
    } else if (typeof this.proxy === 'string') {
      if (this.proxy.length && isNode) {
        headers = this.extend({
          'Origin': this.origin
        }, headers);
      }
      url = this.proxy + url;
    }
    headers = this.extend(this.headers, headers);
    headers = this.setHeaders(headers);
    if (this.verbose) {
      this.log("fetch Request:\n", this.id, method, url, "\nRequestHeaders:\n", headers, "\nRequestBody:\n", body, "\n");
    }
    if (this.fetchImplementation === undefined) {
      if (isNode) {
        const module = await import('../static_dependencies/node-fetch/index.js');
        this.AbortError = module.AbortError;
        this.fetchImplementation = module.default;
        this.FetchError = module.FetchError;
      } else {
        this.fetchImplementation = self.fetch;
        this.AbortError = DOMException;
        this.FetchError = TypeError;
      }
    }
    // fetchImplementation cannot be called on this. in browsers:
    // TypeError Failed to execute 'fetch' on 'Window': Illegal invocation
    const fetchImplementation = this.fetchImplementation;
    const params = {
      method,
      headers,
      body,
      timeout: this.timeout
    };
    if (this.agent) {
      params['agent'] = this.agent;
    } else if (this.httpAgent && url.indexOf('http://') === 0) {
      params['agent'] = this.httpAgent;
    } else if (this.httpsAgent && url.indexOf('https://') === 0) {
      params['agent'] = this.httpsAgent;
    }
    const controller = new AbortController();
    params['signal'] = controller.signal;
    const timeout = setTimeout(() => {
      controller.abort();
    }, this.timeout);
    try {
      const response = await fetchImplementation(url, this.extend(params, this.fetchOptions));
      clearTimeout(timeout);
      return this.handleRestResponse(response, url, method, headers, body);
    } catch (e) {
      if (e instanceof this.AbortError) {
        throw new _errors.RequestTimeout(this.id + ' ' + method + ' ' + url + ' request timed out (' + this.timeout + ' ms)');
      } else if (e instanceof this.FetchError) {
        throw new _errors.NetworkError(this.id + ' ' + method + ' ' + url + ' fetch failed');
      }
      throw e;
    }
  }
  parseJson(jsonString) {
    try {
      if (this.isJsonEncodedObject(jsonString)) {
        return JSON.parse(this.onJsonResponse(jsonString));
      }
    } catch (e) {
      // SyntaxError
      return undefined;
    }
  }
  getResponseHeaders(response) {
    const result = {};
    response.headers.forEach((value, key) => {
      key = key.split('-').map(word => this.capitalize(word)).join('-');
      result[key] = value;
    });
    return result;
  }
  handleRestResponse(response, url, method = 'GET', requestHeaders = undefined, requestBody = undefined) {
    const responseHeaders = this.getResponseHeaders(response);
    if (this.handleContentTypeApplicationZip && responseHeaders['Content-Type'] === 'application/zip') {
      const responseBuffer = response.buffer();
      if (this.enableLastResponseHeaders) {
        this.last_response_headers = responseHeaders;
      }
      if (this.enableLastHttpResponse) {
        this.last_http_response = responseBuffer;
      }
      if (this.verbose) {
        this.log("handleRestResponse:\n", this.id, method, url, response.status, response.statusText, "\nResponseHeaders:\n", responseHeaders, "ZIP redacted", "\n");
      }
      // no error handler needed, because it would not be a zip response in case of an error
      return responseBuffer;
    }
    return response.text().then(responseBody => {
      const bodyText = this.onRestResponse(response.status, response.statusText, url, method, responseHeaders, responseBody, requestHeaders, requestBody);
      const json = this.parseJson(bodyText);
      if (this.enableLastResponseHeaders) {
        this.last_response_headers = responseHeaders;
      }
      if (this.enableLastHttpResponse) {
        this.last_http_response = responseBody;
      }
      if (this.enableLastJsonResponse) {
        this.last_json_response = json;
      }
      if (this.verbose) {
        this.log("handleRestResponse:\n", this.id, method, url, response.status, response.statusText, "\nResponseHeaders:\n", responseHeaders, "\nResponseBody:\n", responseBody, "\n");
      }
      const skipFurtherErrorHandling = this.handleErrors(response.status, response.statusText, url, method, responseHeaders, responseBody, json, requestHeaders, requestBody);
      if (!skipFurtherErrorHandling) {
        this.handleHttpStatusCode(response.status, response.statusText, url, method, responseBody);
      }
      return json || responseBody;
    });
  }
  onRestResponse(statusCode, statusText, url, method, responseHeaders, responseBody, requestHeaders, requestBody) {
    return responseBody.trim();
  }
  onJsonResponse(responseBody) {
    return this.quoteJsonNumbers ? responseBody.replace(/":([+.0-9eE-]+)([,}])/g, '":"$1"$2') : responseBody;
  }
  // TEALSTREET
  setMarketsAndResolve(markets, currencies = undefined) {
    this.setMarkets(markets, currencies);
    this._loadMarketsResolve && this._loadMarketsResolve(this.markets);
    return this.markets;
  }
  async loadMarketsHelper(reload = false, params = {}) {
    if (!reload && this.markets) {
      if (!this.markets_by_id) {
        return this.setMarketsAndResolve(this.markets);
      }
      return this.markets;
    }
    let currencies = undefined;
    // only call if exchange API provides endpoint (true), thus avoid emulated versions ('emulated')
    if (this.has['fetchCurrencies'] === true) {
      currencies = await this.fetchCurrencies();
    }
    const markets = await this.fetchMarkets(params);
    return this.setMarketsAndResolve(markets, currencies);
  }
  loadMarkets(reload = false, params = {}) {
    // this method is async, it returns a promise
    if (reload && !this.reloadingMarkets || !this.marketsLoading) {
      this.reloadingMarkets = true;
      this.marketsLoading = this.loadMarketsHelper(reload, params).then(resolved => {
        this.reloadingMarkets = false;
        return resolved;
      }, error => {
        this.reloadingMarkets = false;
        throw error;
      });
    }
    return this._loadMarketsPromise;
  }
  fetchCurrencies(params = {}) {
    // markets are returned as a list
    // currencies are returned as a dict
    // this is for historical reasons
    // and may be changed for consistency later
    return new Promise((resolve, reject) => resolve(this.currencies));
  }
  fetchMarkets(params = {}) {
    // markets are returned as a list
    // currencies are returned as a dict
    // this is for historical reasons
    // and may be changed for consistency later
    return new Promise((resolve, reject) => resolve(Object.values(this.markets)));
  }
  filterBySinceLimit(array, since = undefined, limit = undefined, key = 'timestamp', tail = false) {
    const sinceIsDefined = since !== undefined && since !== null;
    if (sinceIsDefined) {
      array = array.filter(entry => entry[key] >= since);
    }
    if (limit !== undefined && limit !== null) {
      array = tail ? array.slice(-limit) : array.slice(0, limit);
    }
    return array;
  }
  filterByValueSinceLimit(array, field, value = undefined, since = undefined, limit = undefined, key = 'timestamp', tail = false) {
    const valueIsDefined = value !== undefined && value !== null;
    const sinceIsDefined = since !== undefined && since !== null;
    // single-pass filter for both symbol and since
    if (valueIsDefined || sinceIsDefined) {
      array = array.filter(entry => (valueIsDefined ? entry[field] === value : true) && (sinceIsDefined ? entry[key] >= since : true));
    }
    if (limit !== undefined && limit !== null) {
      array = tail ? array.slice(-limit) : array.slice(0, limit);
    }
    return array;
  }
  checkRequiredDependencies() {
    return;
  }
  remove0xPrefix(hexData) {
    if (hexData.slice(0, 2) === '0x') {
      return hexData.slice(2);
    } else {
      return hexData;
    }
  }
  hashMessage(message) {
    // takes a hex encoded message
    const binaryMessage = this.base16ToBinary(this.remove0xPrefix(message));
    const prefix = this.stringToBinary('\x19Ethereum Signed Message:\n' + binaryMessage.sigBytes);
    return '0x' + this.hash(this.binaryConcat(prefix, binaryMessage), 'keccak', 'hex');
  }
  signHash(hash, privateKey) {
    const signature = this.ecdsa(hash.slice(-64), privateKey.slice(-64), 'secp256k1', undefined);
    return {
      'r': '0x' + signature['r'],
      's': '0x' + signature['s'],
      'v': 27 + signature['v']
    };
  }
  signMessage(message, privateKey) {
    return this.signHash(this.hashMessage(message), privateKey.slice(-64));
  }
  signMessageString(message, privateKey) {
    // still takes the input as a hex string
    // same as above but returns a string instead of an object
    const signature = this.signMessage(message, privateKey);
    return signature['r'] + this.remove0xPrefix(signature['s']) + this.binaryToBase16(this.numberToBE(signature['v']));
  }
  parseNumber(value, d = undefined) {
    if (value === undefined) {
      return d;
    } else {
      try {
        return this.number(value);
      } catch (e) {
        return d;
      }
    }
  }
  checkOrderArguments(market, type, side, amount, price, params) {
    if (price === undefined) {
      if (type === 'limit') {
        throw new _errors.ArgumentsRequired(this.id + ' createOrder() requires a price argument for a limit order');
      }
    }
    if (amount <= 0) {
      throw new _errors.ArgumentsRequired(this.id + ' createOrder() amount should be above 0');
    }
  }
  handleHttpStatusCode(code, reason, url, method, body) {
    const codeAsString = code.toString();
    if (codeAsString in this.httpExceptions) {
      const ErrorClass = this.httpExceptions[codeAsString];
      throw new ErrorClass(this.id + ' ' + method + ' ' + url + ' ' + codeAsString + ' ' + reason + ' ' + body);
    }
  }
  // method to override
  findTimeframe(timeframe, timeframes = undefined) {
    timeframes = timeframes || this.timeframes;
    const keys = Object.keys(timeframes);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (timeframes[key] === timeframe) {
        return key;
      }
    }
    return undefined;
  }
  formatScientificNotationFTX(n) {
    if (n === 0) {
      return '0e-00';
    }
    return n.toExponential().replace('e-', 'e-0');
  }
  spawn(method, ...args) {
    const future = (0, _Future.default)();
    method.apply(this, args).then(future.resolve).catch(future.reject);
    return future;
  }
  delay(timeout, method, ...args) {
    setTimeout(() => {
      this.spawn(method, ...args);
    }, timeout);
  }
  // -----------------------------------------------------------------------
  // -----------------------------------------------------------------------
  // WS/PRO methods
  orderBook(snapshot = {}, depth = Number.MAX_SAFE_INTEGER) {
    return new _OrderBook.OrderBook(snapshot, depth);
  }
  indexedOrderBook(snapshot = {}, depth = Number.MAX_SAFE_INTEGER) {
    return new _OrderBook.IndexedOrderBook(snapshot, depth);
  }
  countedOrderBook(snapshot = {}, depth = Number.MAX_SAFE_INTEGER) {
    return new _OrderBook.CountedOrderBook(snapshot, depth);
  }
  handleMessage(client, message) {} // stub to override
  // ping (client) {} // stub to override
  client(url) {
    this.clients = this.clients || {};
    if (!this.clients[url]) {
      const onMessage = this.handleMessage.bind(this);
      const onError = this.onError.bind(this);
      const onClose = this.onClose.bind(this);
      const onConnected = this.onConnected.bind(this);
      // decide client type here: ws / signalr / socketio
      const wsOptions = this.safeValue(this.options, 'ws', {});
      const options = this.deepExtend(this.streaming, {
        'log': this.log ? this.log.bind(this) : this.log,
        'ping': this.ping ? this.ping.bind(this) : this.ping,
        'verbose': this.verbose,
        'throttle': throttle(this.tokenBucket),
        // add support for proxies
        'options': {
          'agent': this.agent || this.httpsAgent || this.httpAgent
        }
      }, wsOptions);
      this.clients[url] = new _WsClient.default(url, onMessage, onError, onClose, onConnected, options);
    }
    return this.clients[url];
  }
  watch(url, messageHash, message = undefined, subscribeHash = undefined, subscription = undefined, shouldThrottle = true) {
    //
    // Without comments the code of this method is short and easy:
    //
    //     const client = this.client (url)
    //     const backoffDelay = 0
    //     const future = client.future (messageHash)
    //     const connected = client.connect (backoffDelay)
    //     connected.then (() => {
    //         if (message && !client.subscriptions[subscribeHash]) {
    //             client.subscriptions[subscribeHash] = true
    //             client.send (message)
    //         }
    //     }).catch ((error) => {})
    //     return future
    //
    // The following is a longer version of this method with comments
    //
    const client = this.client(url);
    // todo: calculate the backoff using the clients cache
    const backoffDelay = 0;
    //
    //  watchOrderBook ---- future ----+---------------+----→ user
    //                                 |               |
    //                                 ↓               ↑
    //                                 |               |
    //                              connect ......→ resolve
    //                                 |               |
    //                                 ↓               ↑
    //                                 |               |
    //                             subscribe -----→ receive
    //
    const future = client.future(messageHash);
    // we intentionally do not use await here to avoid unhandled exceptions
    // the policy is to make sure that 100% of promises are resolved or rejected
    // either with a call to client.resolve or client.reject with
    //  a proper exception class instance
    const connected = client.connect(backoffDelay);
    // the following is executed only if the catch-clause does not
    // catch any connection-level exceptions from the client
    // (connection established successfully)
    connected.then(() => {
      if (!client.subscriptions[subscribeHash]) {
        client.subscriptions[subscribeHash] = subscription || true;
        const options = this.safeValue(this.options, 'ws');
        const cost = this.safeValue(options, 'cost', 1);
        if (message) {
          if (this.enableWsRateLimit && client.throttle) {
            // add cost here |
            //               |
            //               V
            client.throttle(cost, shouldThrottle).then(() => {
              client.send(message);
            }).catch(e => {
              throw e;
            });
          } else {
            client.send(message);
          }
        }
      }
    });
    return future;
  }
  onConnected(client, message = undefined) {
    // for user hooks
    // console.log ('Connected to', client.url)
  }
  onError(client, error) {
    if (client.url in this.clients && this.clients[client.url].error) {
      if (!this.safeValue(this.clients[client.url].connection, 'willReconnect', false)) {
        delete this.clients[client.url];
      } else {
        this.clients[client.url].subscriptions = {};
      }
    }
  }
  onClose(client, error) {
    if (client.error) {
      // connection closed due to an error, do nothing
    } else {
      // server disconnected a working connection
      if (this.clients[client.url]) {
        if (!this.safeValue(this.clients[client.url].connection, 'willReconnect', false)) {
          delete this.clients[client.url];
        } else {
          this.clients[client.url].subscriptions = {};
        }
      }
    }
  }
  async close() {
    const clients = Object.values(this.clients || {});
    for (let i = 0; i < clients.length; i++) {
      const client = clients[i];
      client.subscriptions = {};
      delete this.clients[client.url];
      await client.close();
    }
  }
  reconnect() {
    const clients = Object.values(this.clients || {});
    for (let i = 0; i < clients.length; i++) {
      const client = clients[i];
      if (client.connection) {
        if (this.safeValue(client.connection, 'willReconnect', false)) {
          // @ts-ignore
          client.connection.reconnect();
        } else {
          throw new _errors.ExchangeError(this.id + ' reconnect() client is not reconnecting client: ' + client);
        }
      }
    }
  }
  handleDelta(bookside, delta, nonce = undefined) {
    //stub
  }
  async loadOrderBook(client, messageHash, symbol, limit = undefined, params = {}) {
    if (!(symbol in this.orderbooks)) {
      client.reject(new _errors.ExchangeError(this.id + ' loadOrderBook() orderbook is not initiated'), messageHash);
      return;
    }
    const maxRetries = this.handleOption('watchOrderBook', 'maxRetries', 3);
    let tries = 0;
    try {
      const stored = this.orderbooks[symbol];
      while (tries < maxRetries) {
        const cache = stored.cache;
        const orderBook = await this.fetchOrderBook(symbol, limit, params);
        const index = this.getCacheIndex(orderBook, cache);
        if (index >= 0) {
          stored.reset(orderBook);
          this.handleDeltas(stored, cache.slice(index));
          stored.cache.length = 0;
          client.resolve(stored, messageHash);
          return;
        }
        tries++;
      }
      client.reject(new _errors.ExchangeError(this.id + ' nonce is behind the cache after ' + maxRetries.toString() + ' tries.'), messageHash);
      delete this.clients[client.url];
    } catch (e) {
      client.reject(e, messageHash);
      await this.loadOrderBook(client, messageHash, symbol, limit, params);
    }
  }
  handleDeltas(orderbook, deltas, nonce = undefined) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(orderbook, deltas[i]);
    }
  }
  // eslint-disable-next-line no-unused-vars
  getCacheIndex(orderbook, deltas) {
    // return the first index of the cache that can be applied to the orderbook or -1 if not possible
    return -1;
  }
  /* eslint-enable */
  // ------------------------------------------------------------------------
  // ########################################################################
  // ########################################################################
  // ########################################################################
  // ########################################################################
  // ########                        ########                        ########
  // ########                        ########                        ########
  // ########                        ########                        ########
  // ########                        ########                        ########
  // ########        ########################        ########################
  // ########        ########################        ########################
  // ########        ########################        ########################
  // ########        ########################        ########################
  // ########                        ########                        ########
  // ########                        ########                        ########
  // ########                        ########                        ########
  // ########                        ########                        ########
  // ########################################################################
  // ########################################################################
  // ########################################################################
  // ########################################################################
  // ########        ########        ########                        ########
  // ########        ########        ########                        ########
  // ########        ########        ########                        ########
  // ########        ########        ########                        ########
  // ################        ########################        ################
  // ################        ########################        ################
  // ################        ########################        ################
  // ################        ########################        ################
  // ########        ########        ################        ################
  // ########        ########        ################        ################
  // ########        ########        ################        ################
  // ########        ########        ################        ################
  // ########################################################################
  // ########################################################################
  // ########################################################################
  // ########################################################################
  // ------------------------------------------------------------------------
  // METHODS BELOW THIS LINE ARE TRANSPILED FROM JAVASCRIPT TO PYTHON AND PHP
  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    return {};
  }
  async fetchAccounts(params = {}) {
    return undefined;
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    return undefined;
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    return undefined;
  }
  async fetchDepositAddresses(codes = undefined, params = {}) {
    return undefined;
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    return undefined;
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    return undefined;
  }
  async fetchTime(params = {}) {
    return undefined;
  }
  async fetchTradingLimits(symbols = undefined, params = {}) {
    return undefined;
  }
  parseTicker(ticker, market = undefined) {
    return undefined;
  }
  parseDepositAddress(depositAddress, currency = undefined) {
    return undefined;
  }
  parseTrade(trade, market = undefined) {
    return undefined;
  }
  parseTransaction(transaction, currency = undefined) {
    return undefined;
  }
  parseTransfer(transfer, currency = undefined) {
    return undefined;
  }
  parseAccount(account) {
    return undefined;
  }
  parseLedgerEntry(item, currency = undefined) {
    return undefined;
  }
  parseOrder(order, market = undefined) {
    return undefined;
  }
  async fetchBorrowRates(params = {}) {
    return undefined;
  }
  parseMarketLeverageTiers(info, market = undefined) {
    return undefined;
  }
  async fetchLeverageTiers(symbols = undefined, params = {}) {
    return undefined;
  }
  parsePosition(position, market = undefined) {
    return undefined;
  }
  parseFundingRateHistory(info, market = undefined) {
    return undefined;
  }
  parseBorrowInterest(info, market = undefined) {
    return undefined;
  }
  async fetchFundingRates(symbols = undefined, params = {}) {
    return undefined;
  }
  async transfer(code, amount, fromAccount, toAccount, params = {}) {
    return undefined;
  }
  async withdraw(code, amount, address, tag = undefined, params = {}) {
    return undefined;
  }
  async createDepositAddress(code, params = {}) {
    return undefined;
  }
  parseToInt(number) {
    // Solve Common parseInt misuse ex: parseInt ((since / 1000).toString ())
    // using a number as parameter which is not valid in ts
    const stringifiedNumber = number.toString();
    const convertedNumber = parseFloat(stringifiedNumber);
    return parseInt(convertedNumber);
  }
  getDefaultOptions() {
    return {
      'defaultNetworkCodeReplacements': {
        'ETH': {
          'ERC20': 'ETH'
        },
        'TRX': {
          'TRC20': 'TRX'
        },
        'CRO': {
          'CRC20': 'CRONOS'
        }
      }
    };
  }
  safeLedgerEntry(entry, currency = undefined) {
    currency = this.safeCurrency(undefined, currency);
    let direction = this.safeString(entry, 'direction');
    let before = this.safeString(entry, 'before');
    let after = this.safeString(entry, 'after');
    const amount = this.safeString(entry, 'amount');
    if (amount !== undefined) {
      if (before === undefined && after !== undefined) {
        before = _Precise.Precise.stringSub(after, amount);
      } else if (before !== undefined && after === undefined) {
        after = _Precise.Precise.stringAdd(before, amount);
      }
    }
    if (before !== undefined && after !== undefined) {
      if (direction === undefined) {
        if (_Precise.Precise.stringGt(before, after)) {
          direction = 'out';
        }
        if (_Precise.Precise.stringGt(after, before)) {
          direction = 'in';
        }
      }
    }
    const fee = this.safeValue(entry, 'fee');
    if (fee !== undefined) {
      fee['cost'] = this.safeNumber(fee, 'cost');
    }
    const timestamp = this.safeInteger(entry, 'timestamp');
    return {
      'id': this.safeString(entry, 'id'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'direction': direction,
      'account': this.safeString(entry, 'account'),
      'referenceId': this.safeString(entry, 'referenceId'),
      'referenceAccount': this.safeString(entry, 'referenceAccount'),
      'type': this.safeString(entry, 'type'),
      'currency': currency['code'],
      'amount': this.parseNumber(amount),
      'before': this.parseNumber(before),
      'after': this.parseNumber(after),
      'status': this.safeString(entry, 'status'),
      'fee': fee,
      'info': entry
    };
  }
  setMarkets(markets, currencies = undefined) {
    const values = [];
    this.markets_by_id = {};
    // handle marketId conflicts
    // we insert spot markets first
    const marketValues = this.sortBy(this.toArray(markets), 'spot', true);
    for (let i = 0; i < marketValues.length; i++) {
      const value = marketValues[i];
      if (value['id'] in this.markets_by_id) {
        this.markets_by_id[value['id']].push(value);
      } else {
        this.markets_by_id[value['id']] = [value];
      }
      const market = this.deepExtend(this.safeMarket(), {
        'precision': this.precision,
        'limits': this.limits
      }, this.fees['trading'], value);
      values.push(market);
    }
    this.markets = this.indexBy(values, 'symbol');
    const marketsSortedBySymbol = this.keysort(this.markets);
    const marketsSortedById = this.keysort(this.markets_by_id);
    this.symbols = Object.keys(marketsSortedBySymbol);
    this.ids = Object.keys(marketsSortedById);
    if (currencies !== undefined) {
      this.currencies = this.deepExtend(this.currencies, currencies);
    } else {
      let baseCurrencies = [];
      let quoteCurrencies = [];
      for (let i = 0; i < values.length; i++) {
        const market = values[i];
        const defaultCurrencyPrecision = this.precisionMode === DECIMAL_PLACES ? 8 : this.parseNumber('1e-8');
        const marketPrecision = this.safeValue(market, 'precision', {});
        if ('base' in market) {
          const currencyPrecision = this.safeValue2(marketPrecision, 'base', 'amount', defaultCurrencyPrecision);
          const currency = {
            'id': this.safeString2(market, 'baseId', 'base'),
            'numericId': this.safeString(market, 'baseNumericId'),
            'code': this.safeString(market, 'base'),
            'precision': currencyPrecision
          };
          baseCurrencies.push(currency);
        }
        if ('quote' in market) {
          const currencyPrecision = this.safeValue2(marketPrecision, 'quote', 'price', defaultCurrencyPrecision);
          const currency = {
            'id': this.safeString2(market, 'quoteId', 'quote'),
            'numericId': this.safeString(market, 'quoteNumericId'),
            'code': this.safeString(market, 'quote'),
            'precision': currencyPrecision
          };
          quoteCurrencies.push(currency);
        }
      }
      baseCurrencies = this.sortBy(baseCurrencies, 'code');
      quoteCurrencies = this.sortBy(quoteCurrencies, 'code');
      this.baseCurrencies = this.indexBy(baseCurrencies, 'code');
      this.quoteCurrencies = this.indexBy(quoteCurrencies, 'code');
      const allCurrencies = this.arrayConcat(baseCurrencies, quoteCurrencies);
      const groupedCurrencies = this.groupBy(allCurrencies, 'code');
      const codes = Object.keys(groupedCurrencies);
      const resultingCurrencies = [];
      for (let i = 0; i < codes.length; i++) {
        const code = codes[i];
        const groupedCurrenciesCode = this.safeValue(groupedCurrencies, code, []);
        let highestPrecisionCurrency = this.safeValue(groupedCurrenciesCode, 0);
        for (let j = 1; j < groupedCurrenciesCode.length; j++) {
          const currentCurrency = groupedCurrenciesCode[j];
          if (this.precisionMode === TICK_SIZE) {
            highestPrecisionCurrency = currentCurrency['precision'] < highestPrecisionCurrency['precision'] ? currentCurrency : highestPrecisionCurrency;
          } else {
            highestPrecisionCurrency = currentCurrency['precision'] > highestPrecisionCurrency['precision'] ? currentCurrency : highestPrecisionCurrency;
          }
        }
        resultingCurrencies.push(highestPrecisionCurrency);
      }
      const sortedCurrencies = this.sortBy(resultingCurrencies, 'code');
      this.currencies = this.deepExtend(this.currencies, this.indexBy(sortedCurrencies, 'code'));
    }
    this.currencies_by_id = this.indexBy(this.currencies, 'id');
    const currenciesSortedByCode = this.keysort(this.currencies);
    this.codes = Object.keys(currenciesSortedByCode);
    // TEALSTREET
    const markets_by_id_no_spot = {};
    const market_symbols = Object.keys(this.markets_by_id);
    for (let i = 0; i < market_symbols.length; i++) {
      for (let j = 0; j < this.markets_by_id[market_symbols[i]].length; j++) {
        if (this.markets_by_id[market_symbols[i]][j]['type'] !== 'spot') {
          if (market_symbols[i] in markets_by_id_no_spot) {
            markets_by_id_no_spot[market_symbols[i]].push(this.markets_by_id[market_symbols[i]][j]);
          } else {
            markets_by_id_no_spot[market_symbols[i]] = [this.markets_by_id[market_symbols[i]][j]];
          }
        }
      }
    }
    this.markets_by_id = markets_by_id_no_spot;
    // TEALSTREET
    return this.markets;
  }
  safeBalance(balance) {
    const balances = this.omit(balance, ['info', 'timestamp', 'datetime', 'free', 'used', 'total']);
    const codes = Object.keys(balances);
    balance['free'] = {};
    balance['used'] = {};
    balance['total'] = {};
    const debtBalance = {};
    for (let i = 0; i < codes.length; i++) {
      const code = codes[i];
      let total = this.safeString(balance[code], 'total');
      let free = this.safeString(balance[code], 'free');
      let used = this.safeString(balance[code], 'used');
      const debt = this.safeString(balance[code], 'debt');
      if (total === undefined && free !== undefined && used !== undefined) {
        total = _Precise.Precise.stringAdd(free, used);
      }
      if (free === undefined && total !== undefined && used !== undefined) {
        free = _Precise.Precise.stringSub(total, used);
      }
      if (used === undefined && total !== undefined && free !== undefined) {
        used = _Precise.Precise.stringSub(total, free);
      }
      balance[code]['free'] = this.parseNumber(free);
      balance[code]['used'] = this.parseNumber(used);
      balance[code]['total'] = this.parseNumber(total);
      balance['free'][code] = balance[code]['free'];
      balance['used'][code] = balance[code]['used'];
      balance['total'][code] = balance[code]['total'];
      if (debt !== undefined) {
        balance[code]['debt'] = this.parseNumber(debt);
        debtBalance[code] = balance[code]['debt'];
      }
    }
    const debtBalanceArray = Object.keys(debtBalance);
    const length = debtBalanceArray.length;
    if (length) {
      balance['debt'] = debtBalance;
    }
    return balance;
  }
  safeOrder(order, market = undefined) {
    // parses numbers as strings
    // * it is important pass the trades as unparsed rawTrades
    let amount = this.omitZero(this.safeString(order, 'amount'));
    let remaining = this.safeString(order, 'remaining');
    let filled = this.safeString(order, 'filled');
    let cost = this.safeString(order, 'cost');
    let average = this.omitZero(this.safeString(order, 'average'));
    let price = this.omitZero(this.safeString(order, 'price'));
    let lastTradeTimeTimestamp = this.safeInteger(order, 'lastTradeTimestamp');
    let symbol = this.safeString(order, 'symbol');
    let side = this.safeString(order, 'side');
    const parseFilled = filled === undefined;
    const parseCost = cost === undefined;
    const parseLastTradeTimeTimestamp = lastTradeTimeTimestamp === undefined;
    const fee = this.safeValue(order, 'fee');
    const parseFee = fee === undefined;
    const parseFees = this.safeValue(order, 'fees') === undefined;
    const parseSymbol = symbol === undefined;
    const parseSide = side === undefined;
    const shouldParseFees = parseFee || parseFees;
    const fees = this.safeValue(order, 'fees', []);
    let trades = [];
    if (parseFilled || parseCost || shouldParseFees) {
      const rawTrades = this.safeValue(order, 'trades', trades);
      const oldNumber = this.number;
      // we parse trades as strings here!
      this.number = String;
      trades = this.parseTrades(rawTrades, market);
      this.number = oldNumber;
      let tradesLength = 0;
      const isArray = Array.isArray(trades);
      if (isArray) {
        tradesLength = trades.length;
      }
      if (isArray && tradesLength > 0) {
        // move properties that are defined in trades up into the order
        if (order['symbol'] === undefined) {
          order['symbol'] = trades[0]['symbol'];
        }
        if (order['side'] === undefined) {
          order['side'] = trades[0]['side'];
        }
        if (order['type'] === undefined) {
          order['type'] = trades[0]['type'];
        }
        if (order['id'] === undefined) {
          order['id'] = trades[0]['order'];
        }
        if (parseFilled) {
          filled = '0';
        }
        if (parseCost) {
          cost = '0';
        }
        for (let i = 0; i < trades.length; i++) {
          const trade = trades[i];
          const tradeAmount = this.safeString(trade, 'amount');
          if (parseFilled && tradeAmount !== undefined) {
            filled = _Precise.Precise.stringAdd(filled, tradeAmount);
          }
          const tradeCost = this.safeString(trade, 'cost');
          if (parseCost && tradeCost !== undefined) {
            cost = _Precise.Precise.stringAdd(cost, tradeCost);
          }
          if (parseSymbol) {
            symbol = this.safeString(trade, 'symbol');
          }
          if (parseSide) {
            side = this.safeString(trade, 'side');
          }
          const tradeTimestamp = this.safeValue(trade, 'timestamp');
          if (parseLastTradeTimeTimestamp && tradeTimestamp !== undefined) {
            if (lastTradeTimeTimestamp === undefined) {
              lastTradeTimeTimestamp = tradeTimestamp;
            } else {
              lastTradeTimeTimestamp = Math.max(lastTradeTimeTimestamp, tradeTimestamp);
            }
          }
          if (shouldParseFees) {
            const tradeFees = this.safeValue(trade, 'fees');
            if (tradeFees !== undefined) {
              for (let j = 0; j < tradeFees.length; j++) {
                const tradeFee = tradeFees[j];
                fees.push(this.extend({}, tradeFee));
              }
            } else {
              const tradeFee = this.safeValue(trade, 'fee');
              if (tradeFee !== undefined) {
                fees.push(this.extend({}, tradeFee));
              }
            }
          }
        }
      }
    }
    if (shouldParseFees) {
      const reducedFees = this.reduceFees ? this.reduceFeesByCurrency(fees) : fees;
      const reducedLength = reducedFees.length;
      for (let i = 0; i < reducedLength; i++) {
        reducedFees[i]['cost'] = this.safeNumber(reducedFees[i], 'cost');
        if ('rate' in reducedFees[i]) {
          reducedFees[i]['rate'] = this.safeNumber(reducedFees[i], 'rate');
        }
      }
      if (!parseFee && reducedLength === 0) {
        fee['cost'] = this.safeNumber(fee, 'cost');
        if ('rate' in fee) {
          fee['rate'] = this.safeNumber(fee, 'rate');
        }
        reducedFees.push(fee);
      }
      order['fees'] = reducedFees;
      if (parseFee && reducedLength === 1) {
        order['fee'] = reducedFees[0];
      }
    }
    if (amount === undefined) {
      // ensure amount = filled + remaining
      if (filled !== undefined && remaining !== undefined) {
        amount = _Precise.Precise.stringAdd(filled, remaining);
      } else if (this.safeString(order, 'status') === 'closed') {
        amount = filled;
      }
    }
    if (filled === undefined) {
      if (amount !== undefined && remaining !== undefined) {
        filled = _Precise.Precise.stringSub(amount, remaining);
      }
    }
    if (remaining === undefined) {
      if (amount !== undefined && filled !== undefined) {
        remaining = _Precise.Precise.stringSub(amount, filled);
      }
    }
    // ensure that the average field is calculated correctly
    const inverse = this.safeValue(market, 'inverse', false);
    const contractSize = this.numberToString(this.safeValue(market, 'contractSize', 1));
    // inverse
    // price = filled * contract size / cost
    //
    // linear
    // price = cost / (filled * contract size)
    if (average === undefined) {
      if (filled !== undefined && cost !== undefined && _Precise.Precise.stringGt(filled, '0')) {
        const filledTimesContractSize = _Precise.Precise.stringMul(filled, contractSize);
        if (inverse) {
          average = _Precise.Precise.stringDiv(filledTimesContractSize, cost);
        } else {
          average = _Precise.Precise.stringDiv(cost, filledTimesContractSize);
        }
      }
    }
    // similarly
    // inverse
    // cost = filled * contract size / price
    //
    // linear
    // cost = filled * contract size * price
    const costPriceExists = average !== undefined || price !== undefined;
    if (parseCost && filled !== undefined && costPriceExists) {
      let multiplyPrice = undefined;
      if (average === undefined) {
        multiplyPrice = price;
      } else {
        multiplyPrice = average;
      }
      // contract trading
      const filledTimesContractSize = _Precise.Precise.stringMul(filled, contractSize);
      if (inverse) {
        cost = _Precise.Precise.stringDiv(filledTimesContractSize, multiplyPrice);
      } else {
        cost = _Precise.Precise.stringMul(filledTimesContractSize, multiplyPrice);
      }
    }
    // support for market orders
    const orderType = this.safeValue(order, 'type');
    const emptyPrice = price === undefined || _Precise.Precise.stringEquals(price, '0');
    if (emptyPrice && orderType === 'market') {
      price = average;
    }
    // we have trades with string values at this point so we will mutate them
    for (let i = 0; i < trades.length; i++) {
      const entry = trades[i];
      entry['amount'] = this.safeNumber(entry, 'amount');
      entry['price'] = this.safeNumber(entry, 'price');
      entry['cost'] = this.safeNumber(entry, 'cost');
      const fee = this.safeValue(entry, 'fee', {});
      fee['cost'] = this.safeNumber(fee, 'cost');
      if ('rate' in fee) {
        fee['rate'] = this.safeNumber(fee, 'rate');
      }
      entry['fee'] = fee;
    }
    let timeInForce = this.safeString(order, 'timeInForce');
    let postOnly = this.safeValue(order, 'postOnly');
    // timeInForceHandling
    if (timeInForce === undefined) {
      if (this.safeString(order, 'type') === 'market') {
        timeInForce = 'IOC';
      }
      // allow postOnly override
      if (postOnly) {
        timeInForce = 'PO';
      }
    } else if (postOnly === undefined) {
      // timeInForce is not undefined here
      postOnly = timeInForce === 'PO';
    }
    const timestamp = this.safeInteger(order, 'timestamp');
    let datetime = this.safeString(order, 'datetime');
    if (datetime === undefined) {
      datetime = this.iso8601(timestamp);
    }
    const triggerPrice = this.parseNumber(this.safeString2(order, 'triggerPrice', 'stopPrice'));
    return this.extend(order, {
      'id': this.safeString(order, 'id'),
      'clientOrderId': this.safeString(order, 'clientOrderId'),
      'timestamp': timestamp,
      'datetime': datetime,
      'symbol': symbol,
      'type': this.safeString(order, 'type'),
      'side': side,
      'lastTradeTimestamp': lastTradeTimeTimestamp,
      'price': this.parseNumber(price),
      'amount': this.parseNumber(amount),
      'cost': this.parseNumber(cost),
      'average': this.parseNumber(average),
      'filled': this.parseNumber(filled),
      'remaining': this.parseNumber(remaining),
      'timeInForce': timeInForce,
      'postOnly': postOnly,
      'trades': trades,
      'reduceOnly': this.safeValue(order, 'reduceOnly'),
      'stopPrice': triggerPrice,
      'triggerPrice': triggerPrice,
      'status': this.safeString(order, 'status'),
      'fee': this.safeValue(order, 'fee')
    });
  }
  parseOrders(orders, market = undefined, since = undefined, limit = undefined, params = {}) {
    //
    // the value of orders is either a dict or a list
    //
    // dict
    //
    //     {
    //         'id1': { ... },
    //         'id2': { ... },
    //         'id3': { ... },
    //         ...
    //     }
    //
    // list
    //
    //     [
    //         { 'id': 'id1', ... },
    //         { 'id': 'id2', ... },
    //         { 'id': 'id3', ... },
    //         ...
    //     ]
    //
    let results = [];
    if (Array.isArray(orders)) {
      for (let i = 0; i < orders.length; i++) {
        const order = this.extend(this.parseOrder(orders[i], market), params);
        results.push(order);
      }
    } else {
      const ids = Object.keys(orders);
      for (let i = 0; i < ids.length; i++) {
        const id = ids[i];
        const order = this.extend(this.parseOrder(this.extend({
          'id': id
        }, orders[id]), market), params);
        results.push(order);
      }
    }
    results = this.sortBy(results, 'timestamp');
    const symbol = market !== undefined ? market['symbol'] : undefined;
    const tail = since === undefined;
    return this.filterBySymbolSinceLimit(results, symbol, since, limit, tail);
  }
  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {
    if (type === 'market' && takerOrMaker === 'maker') {
      throw new _errors.ArgumentsRequired(this.id + ' calculateFee() - you have provided incompatible arguments - "market" type order can not be "maker". Change either the "type" or the "takerOrMaker" argument to calculate the fee.');
    }
    const market = this.markets[symbol];
    const feeSide = this.safeString(market, 'feeSide', 'quote');
    let key = 'quote';
    let cost = undefined;
    const amountString = this.numberToString(amount);
    const priceString = this.numberToString(price);
    if (feeSide === 'quote') {
      // the fee is always in quote currency
      cost = _Precise.Precise.stringMul(amountString, priceString);
    } else if (feeSide === 'base') {
      // the fee is always in base currency
      cost = amountString;
    } else if (feeSide === 'get') {
      // the fee is always in the currency you get
      cost = amountString;
      if (side === 'sell') {
        cost = _Precise.Precise.stringMul(cost, priceString);
      } else {
        key = 'base';
      }
    } else if (feeSide === 'give') {
      // the fee is always in the currency you give
      cost = amountString;
      if (side === 'buy') {
        cost = _Precise.Precise.stringMul(cost, priceString);
      } else {
        key = 'base';
      }
    }
    // for derivatives, the fee is in 'settle' currency
    if (!market['spot']) {
      key = 'settle';
    }
    // even if `takerOrMaker` argument was set to 'maker', for 'market' orders we should forcefully override it to 'taker'
    if (type === 'market') {
      takerOrMaker = 'taker';
    }
    const rate = this.safeString(market, takerOrMaker);
    if (cost !== undefined) {
      cost = _Precise.Precise.stringMul(cost, rate);
    }
    return {
      'type': takerOrMaker,
      'currency': market[key],
      'rate': this.parseNumber(rate),
      'cost': this.parseNumber(cost)
    };
  }
  safeTrade(trade, market = undefined) {
    const amount = this.safeString(trade, 'amount');
    const price = this.safeString(trade, 'price');
    let cost = this.safeString(trade, 'cost');
    if (cost === undefined) {
      // contract trading
      const contractSize = this.safeString(market, 'contractSize');
      let multiplyPrice = price;
      if (contractSize !== undefined) {
        const inverse = this.safeValue(market, 'inverse', false);
        if (inverse) {
          multiplyPrice = _Precise.Precise.stringDiv('1', price);
        }
        multiplyPrice = _Precise.Precise.stringMul(multiplyPrice, contractSize);
      }
      cost = _Precise.Precise.stringMul(multiplyPrice, amount);
    }
    const parseFee = this.safeValue(trade, 'fee') === undefined;
    const parseFees = this.safeValue(trade, 'fees') === undefined;
    const shouldParseFees = parseFee || parseFees;
    const fees = [];
    const fee = this.safeValue(trade, 'fee');
    if (shouldParseFees) {
      const reducedFees = this.reduceFees ? this.reduceFeesByCurrency(fees) : fees;
      const reducedLength = reducedFees.length;
      for (let i = 0; i < reducedLength; i++) {
        reducedFees[i]['cost'] = this.safeNumber(reducedFees[i], 'cost');
        if ('rate' in reducedFees[i]) {
          reducedFees[i]['rate'] = this.safeNumber(reducedFees[i], 'rate');
        }
      }
      if (!parseFee && reducedLength === 0) {
        fee['cost'] = this.safeNumber(fee, 'cost');
        if ('rate' in fee) {
          fee['rate'] = this.safeNumber(fee, 'rate');
        }
        reducedFees.push(fee);
      }
      if (parseFees) {
        trade['fees'] = reducedFees;
      }
      if (parseFee && reducedLength === 1) {
        trade['fee'] = reducedFees[0];
      }
      const tradeFee = this.safeValue(trade, 'fee');
      if (tradeFee !== undefined) {
        tradeFee['cost'] = this.safeNumber(tradeFee, 'cost');
        if ('rate' in tradeFee) {
          tradeFee['rate'] = this.safeNumber(tradeFee, 'rate');
        }
        trade['fee'] = tradeFee;
      }
    }
    trade['amount'] = this.parseNumber(amount);
    trade['price'] = this.parseNumber(price);
    trade['cost'] = this.parseNumber(cost);
    return trade;
  }
  reduceFeesByCurrency(fees) {
    //
    // this function takes a list of fee structures having the following format
    //
    //     string = true
    //
    //     [
    //         { 'currency': 'BTC', 'cost': '0.1' },
    //         { 'currency': 'BTC', 'cost': '0.2'  },
    //         { 'currency': 'BTC', 'cost': '0.2', 'rate': '0.00123' },
    //         { 'currency': 'BTC', 'cost': '0.4', 'rate': '0.00123' },
    //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
    //         { 'currency': 'USDT', 'cost': '12.3456' },
    //     ]
    //
    //     string = false
    //
    //     [
    //         { 'currency': 'BTC', 'cost': 0.1 },
    //         { 'currency': 'BTC', 'cost': 0.2 },
    //         { 'currency': 'BTC', 'cost': 0.2, 'rate': 0.00123 },
    //         { 'currency': 'BTC', 'cost': 0.4, 'rate': 0.00123 },
    //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
    //         { 'currency': 'USDT', 'cost': 12.3456 },
    //     ]
    //
    // and returns a reduced fee list, where fees are summed per currency and rate (if any)
    //
    //     string = true
    //
    //     [
    //         { 'currency': 'BTC', 'cost': '0.3'  },
    //         { 'currency': 'BTC', 'cost': '0.6', 'rate': '0.00123' },
    //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
    //         { 'currency': 'USDT', 'cost': '12.3456' },
    //     ]
    //
    //     string  = false
    //
    //     [
    //         { 'currency': 'BTC', 'cost': 0.3  },
    //         { 'currency': 'BTC', 'cost': 0.6, 'rate': 0.00123 },
    //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
    //         { 'currency': 'USDT', 'cost': 12.3456 },
    //     ]
    //
    const reduced = {};
    for (let i = 0; i < fees.length; i++) {
      const fee = fees[i];
      const feeCurrencyCode = this.safeString(fee, 'currency');
      if (feeCurrencyCode !== undefined) {
        const rate = this.safeString(fee, 'rate');
        const cost = this.safeValue(fee, 'cost');
        if (_Precise.Precise.stringEq(cost, '0')) {
          // omit zero cost fees
          continue;
        }
        if (!(feeCurrencyCode in reduced)) {
          reduced[feeCurrencyCode] = {};
        }
        const rateKey = rate === undefined ? '' : rate;
        if (rateKey in reduced[feeCurrencyCode]) {
          reduced[feeCurrencyCode][rateKey]['cost'] = _Precise.Precise.stringAdd(reduced[feeCurrencyCode][rateKey]['cost'], cost);
        } else {
          reduced[feeCurrencyCode][rateKey] = {
            'currency': feeCurrencyCode,
            'cost': cost
          };
          if (rate !== undefined) {
            reduced[feeCurrencyCode][rateKey]['rate'] = rate;
          }
        }
      }
    }
    let result = [];
    const feeValues = Object.values(reduced);
    for (let i = 0; i < feeValues.length; i++) {
      const reducedFeeValues = Object.values(feeValues[i]);
      result = this.arrayConcat(result, reducedFeeValues);
    }
    return result;
  }
  safeTicker(ticker, market = undefined) {
    let open = this.safeValue(ticker, 'open');
    let close = this.safeValue(ticker, 'close');
    let last = this.safeValue(ticker, 'last');
    let change = this.safeValue(ticker, 'change');
    let percentage = this.safeValue(ticker, 'percentage');
    let average = this.safeValue(ticker, 'average');
    let vwap = this.safeValue(ticker, 'vwap');
    const baseVolume = this.safeValue(ticker, 'baseVolume');
    const quoteVolume = this.safeValue(ticker, 'quoteVolume');
    if (vwap === undefined) {
      vwap = _Precise.Precise.stringDiv(quoteVolume, baseVolume);
    }
    if (last !== undefined && close === undefined) {
      close = last;
    } else if (last === undefined && close !== undefined) {
      last = close;
    }
    if (last !== undefined && open !== undefined) {
      if (change === undefined) {
        change = _Precise.Precise.stringSub(last, open);
      }
      if (average === undefined) {
        average = _Precise.Precise.stringDiv(_Precise.Precise.stringAdd(last, open), '2');
      }
    }
    if (percentage === undefined && change !== undefined && open !== undefined && _Precise.Precise.stringGt(open, '0')) {
      percentage = _Precise.Precise.stringMul(_Precise.Precise.stringDiv(change, open), '100');
    }
    if (change === undefined && percentage !== undefined && open !== undefined) {
      change = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(percentage, open), '100');
    }
    if (open === undefined && last !== undefined && change !== undefined) {
      open = _Precise.Precise.stringSub(last, change);
    }
    // timestamp and symbol operations don't belong in safeTicker
    // they should be done in the derived classes
    return this.extend(ticker, {
      'bid': this.safeNumber(ticker, 'bid'),
      'bidVolume': this.safeNumber(ticker, 'bidVolume'),
      'ask': this.safeNumber(ticker, 'ask'),
      'askVolume': this.safeNumber(ticker, 'askVolume'),
      'high': this.safeNumber(ticker, 'high'),
      'low': this.safeNumber(ticker, 'low'),
      'open': this.parseNumber(open),
      'close': this.parseNumber(close),
      'last': this.parseNumber(last),
      'change': this.parseNumber(change),
      'percentage': this.parseNumber(percentage),
      'average': this.parseNumber(average),
      'vwap': this.parseNumber(vwap),
      'baseVolume': this.parseNumber(baseVolume),
      'quoteVolume': this.parseNumber(quoteVolume),
      'previousClose': this.safeNumber(ticker, 'previousClose')
    });
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    if (!this.has['fetchTrades']) {
      throw new _errors.NotSupported(this.id + ' fetchOHLCV() is not supported yet');
    }
    await this.loadMarkets();
    const trades = await this.fetchTrades(symbol, since, limit, params);
    const ohlcvc = this.buildOHLCVC(trades, timeframe, since, limit);
    const result = [];
    for (let i = 0; i < ohlcvc.length; i++) {
      result.push([this.safeInteger(ohlcvc[i], 0), this.safeNumber(ohlcvc[i], 1), this.safeNumber(ohlcvc[i], 2), this.safeNumber(ohlcvc[i], 3), this.safeNumber(ohlcvc[i], 4), this.safeNumber(ohlcvc[i], 5)]);
    }
    return result;
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' watchOHLCV() is not supported yet');
  }
  convertTradingViewToOHLCV(ohlcvs, timestamp = 't', open = 'o', high = 'h', low = 'l', close = 'c', volume = 'v', ms = false) {
    const result = [];
    const timestamps = this.safeValue(ohlcvs, timestamp, []);
    const opens = this.safeValue(ohlcvs, open, []);
    const highs = this.safeValue(ohlcvs, high, []);
    const lows = this.safeValue(ohlcvs, low, []);
    const closes = this.safeValue(ohlcvs, close, []);
    const volumes = this.safeValue(ohlcvs, volume, []);
    for (let i = 0; i < timestamps.length; i++) {
      result.push([ms ? this.safeInteger(timestamps, i) : this.safeTimestamp(timestamps, i), this.safeValue(opens, i), this.safeValue(highs, i), this.safeValue(lows, i), this.safeValue(closes, i), this.safeValue(volumes, i)]);
    }
    return result;
  }
  convertOHLCVToTradingView(ohlcvs, timestamp = 't', open = 'o', high = 'h', low = 'l', close = 'c', volume = 'v', ms = false) {
    const result = {};
    result[timestamp] = [];
    result[open] = [];
    result[high] = [];
    result[low] = [];
    result[close] = [];
    result[volume] = [];
    for (let i = 0; i < ohlcvs.length; i++) {
      const ts = ms ? ohlcvs[i][0] : this.parseToInt(ohlcvs[i][0] / 1000);
      result[timestamp].push(ts);
      result[open].push(ohlcvs[i][1]);
      result[high].push(ohlcvs[i][2]);
      result[low].push(ohlcvs[i][3]);
      result[close].push(ohlcvs[i][4]);
      result[volume].push(ohlcvs[i][5]);
    }
    return result;
  }
  marketIds(symbols) {
    if (symbols === undefined) {
      return symbols;
    }
    const result = [];
    for (let i = 0; i < symbols.length; i++) {
      result.push(this.marketId(symbols[i]));
    }
    return result;
  }
  marketSymbols(symbols) {
    if (symbols === undefined) {
      return symbols;
    }
    const result = [];
    for (let i = 0; i < symbols.length; i++) {
      result.push(this.symbol(symbols[i]));
    }
    return result;
  }
  marketCodes(codes) {
    if (codes === undefined) {
      return codes;
    }
    const result = [];
    for (let i = 0; i < codes.length; i++) {
      result.push(this.commonCurrencyCode(codes[i]));
    }
    return result;
  }
  parseBidsAsks(bidasks, priceKey = 0, amountKey = 1) {
    bidasks = this.toArray(bidasks);
    const result = [];
    for (let i = 0; i < bidasks.length; i++) {
      result.push(this.parseBidAsk(bidasks[i], priceKey, amountKey));
    }
    return result;
  }
  async fetchL2OrderBook(symbol, limit = undefined, params = {}) {
    const orderbook = await this.fetchOrderBook(symbol, limit, params);
    return this.extend(orderbook, {
      'asks': this.sortBy(this.aggregate(orderbook['asks']), 0),
      'bids': this.sortBy(this.aggregate(orderbook['bids']), 0, true)
    });
  }
  filterBySymbol(objects, symbol = undefined) {
    if (symbol === undefined) {
      return objects;
    }
    const result = [];
    for (let i = 0; i < objects.length; i++) {
      const objectSymbol = this.safeString(objects[i], 'symbol');
      if (objectSymbol === symbol) {
        result.push(objects[i]);
      }
    }
    return result;
  }
  parseOHLCV(ohlcv, market = undefined) {
    if (Array.isArray(ohlcv)) {
      return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5) // volume
      ];
    }

    return ohlcv;
  }
  getNetwork(network, code) {
    network = network.toUpperCase();
    const aliases = {
      'ETHEREUM': 'ETH',
      'ETHER': 'ETH',
      'ERC20': 'ETH',
      'ETH': 'ETH',
      'TRC20': 'TRX',
      'TRON': 'TRX',
      'TRX': 'TRX',
      'BEP20': 'BSC',
      'BSC': 'BSC',
      'HRC20': 'HT',
      'HECO': 'HT',
      'SPL': 'SOL',
      'SOL': 'SOL',
      'TERRA': 'LUNA',
      'LUNA': 'LUNA',
      'POLYGON': 'MATIC',
      'MATIC': 'MATIC',
      'EOS': 'EOS',
      'WAVES': 'WAVES',
      'AVALANCHE': 'AVAX',
      'AVAX': 'AVAX',
      'QTUM': 'QTUM',
      'CHZ': 'CHZ',
      'NEO': 'NEO',
      'ONT': 'ONT',
      'RON': 'RON'
    };
    if (network === code) {
      return network;
    } else if (network in aliases) {
      return aliases[network];
    } else {
      throw new _errors.NotSupported(this.id + ' network ' + network + ' is not yet supported');
    }
  }
  networkCodeToId(networkCode, currencyCode = undefined) {
    /**
     * @ignore
     * @method
     * @name exchange#networkCodeToId
     * @description tries to convert the provided networkCode (which is expected to be an unified network code) to a network id. In order to achieve this, derived class needs to have 'options->networks' defined.
     * @param {string} networkCode unified network code
     * @param {string|undefined} currencyCode unified currency code, but this argument is not required by default, unless there is an exchange (like huobi) that needs an override of the method to be able to pass currencyCode argument additionally
     * @returns {[string|undefined]} exchange-specific network id
     */
    const networkIdsByCodes = this.safeValue(this.options, 'networks', {});
    let networkId = this.safeString(networkIdsByCodes, networkCode);
    // for example, if 'ETH' is passed for networkCode, but 'ETH' key not defined in `options->networks` object
    if (networkId === undefined) {
      if (currencyCode === undefined) {
        // if currencyCode was not provided, then we just set passed value to networkId
        networkId = networkCode;
      } else {
        // if currencyCode was provided, then we try to find if that currencyCode has a replacement (i.e. ERC20 for ETH)
        const defaultNetworkCodeReplacements = this.safeValue(this.options, 'defaultNetworkCodeReplacements', {});
        if (currencyCode in defaultNetworkCodeReplacements) {
          // if there is a replacement for the passed networkCode, then we use it to find network-id in `options->networks` object
          const replacementObject = defaultNetworkCodeReplacements[currencyCode]; // i.e. { 'ERC20': 'ETH' }
          const keys = Object.keys(replacementObject);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = replacementObject[key];
            // if value matches to provided unified networkCode, then we use it's key to find network-id in `options->networks` object
            if (value === networkCode) {
              networkId = this.safeString(networkIdsByCodes, key);
              break;
            }
          }
        }
        // if it wasn't found, we just set the provided value to network-id
        if (networkId === undefined) {
          networkId = networkCode;
        }
      }
    }
    return networkId;
  }
  networkIdToCode(networkId, currencyCode = undefined) {
    /**
     * @ignore
     * @method
     * @name exchange#networkIdToCode
     * @description tries to convert the provided exchange-specific networkId to an unified network Code. In order to achieve this, derived class needs to have 'options->networksById' defined.
     * @param {string} networkId unified network code
     * @param {string|undefined} currencyCode unified currency code, but this argument is not required by default, unless there is an exchange (like huobi) that needs an override of the method to be able to pass currencyCode argument additionally
     * @returns {[string|undefined]} unified network code
     */
    const networkCodesByIds = this.safeValue(this.options, 'networksById', {});
    let networkCode = this.safeString(networkCodesByIds, networkId, networkId);
    // replace mainnet network-codes (i.e. ERC20->ETH)
    if (currencyCode !== undefined) {
      const defaultNetworkCodeReplacements = this.safeValue(this.options, 'defaultNetworkCodeReplacements', {});
      if (currencyCode in defaultNetworkCodeReplacements) {
        const replacementObject = this.safeValue(defaultNetworkCodeReplacements, currencyCode, {});
        networkCode = this.safeString(replacementObject, networkCode, networkCode);
      }
    }
    return networkCode;
  }
  networkCodesToIds(networkCodes = undefined) {
    /**
     * @ignore
     * @method
     * @name exchange#networkCodesToIds
     * @description tries to convert the provided networkCode (which is expected to be an unified network code) to a network id. In order to achieve this, derived class needs to have 'options->networks' defined.
     * @param {[string]|undefined} networkCodes unified network codes
     * @returns {[string|undefined]} exchange-specific network ids
     */
    if (networkCodes === undefined) {
      return undefined;
    }
    const ids = [];
    for (let i = 0; i < networkCodes.length; i++) {
      const networkCode = networkCodes[i];
      ids.push(this.networkCodeToId(networkCode));
    }
    return ids;
  }
  handleNetworkCodeAndParams(params) {
    const networkCodeInParams = this.safeString2(params, 'networkCode', 'network');
    if (networkCodeInParams !== undefined) {
      params = this.omit(params, ['networkCode', 'network']);
    }
    // if it was not defined by user, we should not set it from 'defaultNetworks', because handleNetworkCodeAndParams is for only request-side and thus we do not fill it with anything. We can only use 'defaultNetworks' after parsing response-side
    return [networkCodeInParams, params];
  }
  defaultNetworkCode(currencyCode) {
    let defaultNetworkCode = undefined;
    const defaultNetworks = this.safeValue(this.options, 'defaultNetworks', {});
    if (currencyCode in defaultNetworks) {
      // if currency had set its network in "defaultNetworks", use it
      defaultNetworkCode = defaultNetworks[currencyCode];
    } else {
      // otherwise, try to use the global-scope 'defaultNetwork' value (even if that network is not supported by currency, it doesn't make any problem, this will be just used "at first" if currency supports this network at all)
      const defaultNetwork = this.safeValue(this.options, 'defaultNetwork');
      if (defaultNetwork !== undefined) {
        defaultNetworkCode = defaultNetwork;
      }
    }
    return defaultNetworkCode;
  }
  selectNetworkCodeFromUnifiedNetworks(currencyCode, networkCode, indexedNetworkEntries) {
    return this.selectNetworkKeyFromNetworks(currencyCode, networkCode, indexedNetworkEntries, true);
  }
  selectNetworkIdFromRawNetworks(currencyCode, networkCode, indexedNetworkEntries) {
    return this.selectNetworkKeyFromNetworks(currencyCode, networkCode, indexedNetworkEntries, false);
  }
  selectNetworkKeyFromNetworks(currencyCode, networkCode, indexedNetworkEntries, isIndexedByUnifiedNetworkCode = false) {
    // this method is used against raw & unparse network entries, which are just indexed by network id
    let chosenNetworkId = undefined;
    const availableNetworkIds = Object.keys(indexedNetworkEntries);
    const responseNetworksLength = availableNetworkIds.length;
    if (networkCode !== undefined) {
      if (responseNetworksLength === 0) {
        throw new _errors.NotSupported(this.id + ' - ' + networkCode + ' network did not return any result for ' + currencyCode);
      } else {
        // if networkCode was provided by user, we should check it after response, as the referenced exchange doesn't support network-code during request
        const networkId = isIndexedByUnifiedNetworkCode ? networkCode : this.networkCodeToId(networkCode, currencyCode);
        if (networkId in indexedNetworkEntries) {
          chosenNetworkId = networkId;
        } else {
          throw new _errors.NotSupported(this.id + ' - ' + networkId + ' network was not found for ' + currencyCode + ', use one of ' + availableNetworkIds.join(', '));
        }
      }
    } else {
      if (responseNetworksLength === 0) {
        throw new _errors.NotSupported(this.id + ' - no networks were returned for ' + currencyCode);
      } else {
        // if networkCode was not provided by user, then we try to use the default network (if it was defined in "defaultNetworks"), otherwise, we just return the first network entry
        const defaultNetworkCode = this.defaultNetworkCode(currencyCode);
        const defaultNetworkId = isIndexedByUnifiedNetworkCode ? defaultNetworkCode : this.networkCodeToId(defaultNetworkCode, currencyCode);
        chosenNetworkId = defaultNetworkId in indexedNetworkEntries ? defaultNetworkId : availableNetworkIds[0];
      }
    }
    return chosenNetworkId;
  }
  safeNumber2(dictionary, key1, key2, d = undefined) {
    const value = this.safeString2(dictionary, key1, key2);
    return this.parseNumber(value, d);
  }
  parseOrderBook(orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1) {
    const bids = this.parseBidsAsks(this.safeValue(orderbook, bidsKey, []), priceKey, amountKey);
    const asks = this.parseBidsAsks(this.safeValue(orderbook, asksKey, []), priceKey, amountKey);
    return {
      'symbol': symbol,
      'bids': this.sortBy(bids, 0, true),
      'asks': this.sortBy(asks, 0),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'nonce': undefined
    };
  }
  parseOHLCVs(ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
    const results = [];
    for (let i = 0; i < ohlcvs.length; i++) {
      results.push(this.parseOHLCV(ohlcvs[i], market));
    }
    const sorted = this.sortBy(results, 0);
    const tail = since === undefined;
    return this.filterBySinceLimit(sorted, since, limit, 0, tail);
  }
  parseLeverageTiers(response, symbols = undefined, marketIdKey = undefined) {
    // marketIdKey should only be undefined when response is a dictionary
    symbols = this.marketSymbols(symbols);
    const tiers = {};
    for (let i = 0; i < response.length; i++) {
      const item = response[i];
      const id = this.safeString(item, marketIdKey);
      const market = this.safeMarket(id, undefined, undefined, this.safeString(this.options, 'defaultType'));
      const symbol = market['symbol'];
      const contract = this.safeValue(market, 'contract', false);
      if (contract && (symbols === undefined || this.inArray(symbol, symbols))) {
        tiers[symbol] = this.parseMarketLeverageTiers(item, market);
      }
    }
    return tiers;
  }
  async loadTradingLimits(symbols = undefined, reload = false, params = {}) {
    if (this.has['fetchTradingLimits']) {
      if (reload || !('limitsLoaded' in this.options)) {
        const response = await this.fetchTradingLimits(symbols);
        for (let i = 0; i < symbols.length; i++) {
          const symbol = symbols[i];
          this.markets[symbol] = this.deepExtend(this.markets[symbol], response[symbol]);
        }
        this.options['limitsLoaded'] = this.milliseconds();
      }
    }
    return this.markets;
  }
  parsePositions(positions, symbols = undefined, params = {}) {
    symbols = this.marketSymbols(symbols);
    positions = this.toArray(positions);
    const result = [];
    for (let i = 0; i < positions.length; i++) {
      const position = this.extend(this.parsePosition(positions[i], undefined), params);
      result.push(position);
    }
    return this.filterByArray(result, 'symbol', symbols, false);
  }
  parseAccounts(accounts, params = {}) {
    accounts = this.toArray(accounts);
    const result = [];
    for (let i = 0; i < accounts.length; i++) {
      const account = this.extend(this.parseAccount(accounts[i]), params);
      result.push(account);
    }
    return result;
  }
  parseTrades(trades, market = undefined, since = undefined, limit = undefined, params = {}) {
    trades = this.toArray(trades);
    let result = [];
    for (let i = 0; i < trades.length; i++) {
      const trade = this.extend(this.parseTrade(trades[i], market), params);
      result.push(trade);
    }
    result = this.sortBy2(result, 'timestamp', 'id');
    const symbol = market !== undefined ? market['symbol'] : undefined;
    const tail = since === undefined;
    return this.filterBySymbolSinceLimit(result, symbol, since, limit, tail);
  }
  parseTransactions(transactions, currency = undefined, since = undefined, limit = undefined, params = {}) {
    transactions = this.toArray(transactions);
    let result = [];
    for (let i = 0; i < transactions.length; i++) {
      const transaction = this.extend(this.parseTransaction(transactions[i], currency), params);
      result.push(transaction);
    }
    result = this.sortBy(result, 'timestamp');
    const code = currency !== undefined ? currency['code'] : undefined;
    const tail = since === undefined;
    return this.filterByCurrencySinceLimit(result, code, since, limit, tail);
  }
  parseTransfers(transfers, currency = undefined, since = undefined, limit = undefined, params = {}) {
    transfers = this.toArray(transfers);
    let result = [];
    for (let i = 0; i < transfers.length; i++) {
      const transfer = this.extend(this.parseTransfer(transfers[i], currency), params);
      result.push(transfer);
    }
    result = this.sortBy(result, 'timestamp');
    const code = currency !== undefined ? currency['code'] : undefined;
    const tail = since === undefined;
    return this.filterByCurrencySinceLimit(result, code, since, limit, tail);
  }
  parseLedger(data, currency = undefined, since = undefined, limit = undefined, params = {}) {
    let result = [];
    const arrayData = this.toArray(data);
    for (let i = 0; i < arrayData.length; i++) {
      const itemOrItems = this.parseLedgerEntry(arrayData[i], currency);
      if (Array.isArray(itemOrItems)) {
        for (let j = 0; j < itemOrItems.length; j++) {
          result.push(this.extend(itemOrItems[j], params));
        }
      } else {
        result.push(this.extend(itemOrItems, params));
      }
    }
    result = this.sortBy(result, 'timestamp');
    const code = currency !== undefined ? currency['code'] : undefined;
    const tail = since === undefined;
    return this.filterByCurrencySinceLimit(result, code, since, limit, tail);
  }
  nonce() {
    return this.seconds();
  }
  setHeaders(headers) {
    return headers;
  }
  marketId(symbol) {
    const market = this.market(symbol);
    if (market !== undefined) {
      return market['id'];
    }
    return symbol;
  }
  symbol(symbol) {
    const market = this.market(symbol);
    return this.safeString(market, 'symbol', symbol);
  }
  resolvePath(path, params) {
    return [this.implodeParams(path, params), this.omit(params, this.extractParams(path))];
  }
  filterByArray(objects, key, values = undefined, indexed = true) {
    objects = this.toArray(objects);
    // return all of them if no values were passed
    if (values === undefined || !values) {
      return indexed ? this.indexBy(objects, key) : objects;
    }
    const results = [];
    for (let i = 0; i < objects.length; i++) {
      if (this.inArray(objects[i][key], values)) {
        results.push(objects[i]);
      }
    }
    return indexed ? this.indexBy(results, key) : results;
  }
  async fetch2(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined, config = {}, context = {}) {
    if (this.enableRateLimit) {
      const cost = this.calculateRateLimiterCost(api, method, path, params, config, context);
      await this.throttle(cost);
    }
    this.lastRestRequestTimestamp = this.milliseconds();
    const request = this.sign(path, api, method, params, headers, body);
    return await this.fetch(request['url'], request['method'], request['headers'], request['body']);
  }
  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined, config = {}, context = {}) {
    return await this.fetch2(path, api, method, params, headers, body, config, context);
  }
  async loadAccounts(reload = false, params = {}) {
    if (reload) {
      this.accounts = await this.fetchAccounts(params);
    } else {
      if (this.accounts) {
        return this.accounts;
      } else {
        this.accounts = await this.fetchAccounts(params);
      }
    }
    this.accountsById = this.indexBy(this.accounts, 'id');
    return this.accounts;
  }
  async fetchOHLCVC(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    if (!this.has['fetchTrades']) {
      throw new _errors.NotSupported(this.id + ' fetchOHLCV() is not supported yet');
    }
    await this.loadMarkets();
    const trades = await this.fetchTrades(symbol, since, limit, params);
    return this.buildOHLCVC(trades, timeframe, since, limit);
  }
  parseTradingViewOHLCV(ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
    const result = this.convertTradingViewToOHLCV(ohlcvs);
    return this.parseOHLCVs(result, market, timeframe, since, limit);
  }
  async editLimitBuyOrder(id, symbol, amount, price = undefined, params = {}) {
    return await this.editLimitOrder(id, symbol, 'buy', amount, price, params);
  }
  async editLimitSellOrder(id, symbol, amount, price = undefined, params = {}) {
    return await this.editLimitOrder(id, symbol, 'sell', amount, price, params);
  }
  async editLimitOrder(id, symbol, side, amount, price = undefined, params = {}) {
    return await this.editOrder(id, symbol, 'limit', side, amount, price, params);
  }
  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
    await this.cancelOrder(id, symbol);
    return await this.createOrder(symbol, type, side, amount, price, params);
  }
  async fetchPermissions(params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchPermissions() is not supported yet');
  }
  async fetchPosition(symbol, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchPosition() is not supported yet');
  }
  async fetchPositions(symbols = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchPositions() is not supported yet');
  }
  async fetchPositionsRisk(symbols = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchPositionsRisk() is not supported yet');
  }
  async fetchBidsAsks(symbols = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchBidsAsks() is not supported yet');
  }
  parseBidAsk(bidask, priceKey = 0, amountKey = 1) {
    const price = this.safeNumber(bidask, priceKey);
    const amount = this.safeNumber(bidask, amountKey);
    return [price, amount];
  }
  safeCurrency(currencyId, currency = undefined) {
    if (currencyId === undefined && currency !== undefined) {
      return currency;
    }
    if (this.currencies_by_id !== undefined && currencyId in this.currencies_by_id && this.currencies_by_id[currencyId] !== undefined) {
      return this.currencies_by_id[currencyId];
    }
    let code = currencyId;
    if (currencyId !== undefined) {
      code = this.commonCurrencyCode(currencyId.toUpperCase());
    }
    return {
      'id': currencyId,
      'code': code
    };
  }
  safeMarket(marketId = undefined, market = undefined, delimiter = undefined, marketType = undefined) {
    const result = {
      'id': marketId,
      'symbol': marketId,
      'base': undefined,
      'quote': undefined,
      'baseId': undefined,
      'quoteId': undefined,
      'active': undefined,
      'type': undefined,
      'linear': undefined,
      'inverse': undefined,
      'spot': false,
      'swap': false,
      'future': false,
      'option': false,
      'margin': false,
      'contract': false,
      'contractSize': undefined,
      'expiry': undefined,
      'expiryDatetime': undefined,
      'optionType': undefined,
      'strike': undefined,
      'settle': undefined,
      'settleId': undefined,
      'precision': {
        'amount': undefined,
        'price': undefined
      },
      'limits': {
        'amount': {
          'min': undefined,
          'max': undefined
        },
        'price': {
          'min': undefined,
          'max': undefined
        },
        'cost': {
          'min': undefined,
          'max': undefined
        }
      },
      'info': undefined
    };
    if (marketId !== undefined) {
      if (this.markets_by_id !== undefined && marketId in this.markets_by_id) {
        const markets = this.markets_by_id[marketId];
        const numMarkets = markets.length;
        if (numMarkets === 1) {
          return markets[0];
        } else {
          if (marketType === undefined) {
            throw new _errors.ArgumentsRequired(this.id + ' safeMarket() requires a fourth argument for ' + marketId + ' to disambiguate between different markets with the same market id');
          }
          for (let i = 0; i < markets.length; i++) {
            const market = markets[i];
            if (market[marketType]) {
              return market;
            }
          }
        }
      } else if (delimiter !== undefined) {
        const parts = marketId.split(delimiter);
        const partsLength = parts.length;
        if (partsLength === 2) {
          result['baseId'] = this.safeString(parts, 0);
          result['quoteId'] = this.safeString(parts, 1);
          result['base'] = this.safeCurrencyCode(result['baseId']);
          result['quote'] = this.safeCurrencyCode(result['quoteId']);
          result['symbol'] = result['base'] + '/' + result['quote'];
          return result;
        } else {
          return result;
        }
      }
    }
    if (market !== undefined) {
      return market;
    }
    return result;
  }
  checkRequiredCredentials(error = true) {
    const keys = Object.keys(this.requiredCredentials);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (this.requiredCredentials[key] && !this[key]) {
        if (error) {
          throw new _errors.AuthenticationError(this.id + ' requires "' + key + '" credential');
        } else {
          return false;
        }
      }
    }
    return true;
  }
  oath() {
    if (this.twofa !== undefined) {
      return this.totp(this.twofa);
    } else {
      throw new _errors.ExchangeError(this.id + ' exchange.twofa has not been set for 2FA Two-Factor Authentication');
    }
  }
  async fetchBalance(params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchBalance() is not supported yet');
  }
  async watchBalance(params = {}) {
    throw new _errors.NotSupported(this.id + ' watchBalance() is not supported yet');
  }
  async fetchPartialBalance(part, params = {}) {
    const balance = await this.fetchBalance(params);
    return balance[part];
  }
  async fetchFreeBalance(params = {}) {
    return await this.fetchPartialBalance('free', params);
  }
  async fetchUsedBalance(params = {}) {
    return await this.fetchPartialBalance('used', params);
  }
  async fetchTotalBalance(params = {}) {
    return await this.fetchPartialBalance('total', params);
  }
  async fetchStatus(params = {}) {
    if (this.has['fetchTime']) {
      const time = await this.fetchTime(params);
      this.status = this.extend(this.status, {
        'updated': time
      });
    }
    if (!('info' in this.status)) {
      this.status['info'] = undefined;
    }
    return this.status;
  }
  async fetchFundingFee(code, params = {}) {
    const warnOnFetchFundingFee = this.safeValue(this.options, 'warnOnFetchFundingFee', true);
    if (warnOnFetchFundingFee) {
      throw new _errors.NotSupported(this.id + ' fetchFundingFee() method is deprecated, it will be removed in July 2022, please, use fetchTransactionFee() or set exchange.options["warnOnFetchFundingFee"] = false to suppress this warning');
    }
    return await this.fetchTransactionFee(code, params);
  }
  async fetchFundingFees(codes = undefined, params = {}) {
    const warnOnFetchFundingFees = this.safeValue(this.options, 'warnOnFetchFundingFees', true);
    if (warnOnFetchFundingFees) {
      throw new _errors.NotSupported(this.id + ' fetchFundingFees() method is deprecated, it will be removed in July 2022. Please, use fetchTransactionFees() or set exchange.options["warnOnFetchFundingFees"] = false to suppress this warning');
    }
    return await this.fetchTransactionFees(codes, params);
  }
  async fetchTransactionFee(code, params = {}) {
    if (!this.has['fetchTransactionFees']) {
      throw new _errors.NotSupported(this.id + ' fetchTransactionFee() is not supported yet');
    }
    return await this.fetchTransactionFees([code], params);
  }
  async fetchTransactionFees(codes = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchTransactionFees() is not supported yet');
  }
  async fetchDepositWithdrawFees(codes = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchDepositWithdrawFees() is not supported yet');
  }
  async fetchDepositWithdrawFee(code, params = {}) {
    if (!this.has['fetchDepositWithdrawFees']) {
      throw new _errors.NotSupported(this.id + ' fetchDepositWithdrawFee() is not supported yet');
    }
    const fees = await this.fetchDepositWithdrawFees([code], params);
    return this.safeValue(fees, code);
  }
  getSupportedMapping(key, mapping = {}) {
    if (key in mapping) {
      return mapping[key];
    } else {
      throw new _errors.NotSupported(this.id + ' ' + key + ' does not have a value in mapping');
    }
  }
  async fetchBorrowRate(code, params = {}) {
    await this.loadMarkets();
    if (!this.has['fetchBorrowRates']) {
      throw new _errors.NotSupported(this.id + ' fetchBorrowRate() is not supported yet');
    }
    const borrowRates = await this.fetchBorrowRates(params);
    const rate = this.safeValue(borrowRates, code);
    if (rate === undefined) {
      throw new _errors.ExchangeError(this.id + ' fetchBorrowRate() could not find the borrow rate for currency code ' + code);
    }
    return rate;
  }
  handleOptionAndParams(params, methodName, optionName, defaultValue = undefined) {
    // This method can be used to obtain method specific properties, i.e: this.handleOptionAndParams (params, 'fetchPosition', 'marginMode', 'isolated')
    const defaultOptionName = 'default' + this.capitalize(optionName); // we also need to check the 'defaultXyzWhatever'
    // check if params contain the key
    let value = this.safeValue2(params, optionName, defaultOptionName);
    if (value !== undefined) {
      params = this.omit(params, [optionName, defaultOptionName]);
    } else {
      // check if exchange has properties for this method
      const exchangeWideMethodOptions = this.safeValue(this.options, methodName);
      if (exchangeWideMethodOptions !== undefined) {
        // check if the option is defined in this method's props
        value = this.safeValue2(exchangeWideMethodOptions, optionName, defaultOptionName);
      }
      if (value === undefined) {
        // if it's still undefined, check if global exchange-wide option exists
        value = this.safeValue2(this.options, optionName, defaultOptionName);
      }
      // if it's still undefined, use the default value
      value = value !== undefined ? value : defaultValue;
    }
    return [value, params];
  }
  handleOption(methodName, optionName, defaultValue = undefined) {
    // eslint-disable-next-line no-unused-vars
    const [result, empty] = this.handleOptionAndParams({}, methodName, optionName, defaultValue);
    return result;
  }
  handleMarketTypeAndParams(methodName, market = undefined, params = {}) {
    const defaultType = this.safeString2(this.options, 'defaultType', 'type', 'spot');
    const methodOptions = this.safeValue(this.options, methodName);
    let methodType = defaultType;
    if (methodOptions !== undefined) {
      if (typeof methodOptions === 'string') {
        methodType = methodOptions;
      } else {
        methodType = this.safeString2(methodOptions, 'defaultType', 'type', methodType);
      }
    }
    const marketType = market === undefined ? methodType : market['type'];
    const type = this.safeString2(params, 'defaultType', 'type', marketType);
    params = this.omit(params, ['defaultType', 'type']);
    return [type, params];
  }
  handleSubTypeAndParams(methodName, market = undefined, params = {}, defaultValue = undefined) {
    let subType = undefined;
    // if set in params, it takes precedence
    const subTypeInParams = this.safeString2(params, 'subType', 'defaultSubType');
    // avoid omitting if it's not present
    if (subTypeInParams !== undefined) {
      subType = subTypeInParams;
      params = this.omit(params, ['subType', 'defaultSubType']);
    } else {
      // at first, check from market object
      if (market !== undefined) {
        if (market['linear']) {
          subType = 'linear';
        } else if (market['inverse']) {
          subType = 'inverse';
        }
      }
      // if it was not defined in market object
      if (subType === undefined) {
        const values = this.handleOptionAndParams(undefined, methodName, 'subType', defaultValue); // no need to re-test params here
        subType = values[0];
      }
    }
    return [subType, params];
  }
  handleMarginModeAndParams(methodName, params = {}, defaultValue = undefined) {
    /**
     * @ignore
     * @method
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[string|undefined, object]} the marginMode in lowercase as specified by params["marginMode"], params["defaultMarginMode"] this.options["marginMode"] or this.options["defaultMarginMode"]
     */
    return this.handleOptionAndParams(params, methodName, 'marginMode', defaultValue);
  }
  throwExactlyMatchedException(exact, string, message) {
    if (string in exact) {
      throw new exact[string](message);
    }
  }
  throwBroadlyMatchedException(broad, string, message) {
    const broadKey = this.findBroadlyMatchedKey(broad, string);
    if (broadKey !== undefined) {
      throw new broad[broadKey](message);
    }
  }
  findBroadlyMatchedKey(broad, string) {
    // a helper for matching error strings exactly vs broadly
    const keys = Object.keys(broad);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (string !== undefined) {
        // #issues/12698
        if (string.indexOf(key) >= 0) {
          return key;
        }
      }
    }
    return undefined;
  }
  handleErrors(statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {
    // it is a stub method that must be overrided in the derived exchange classes
    // throw new NotSupported (this.id + ' handleErrors() not implemented yet');
    return undefined;
  }
  calculateRateLimiterCost(api, method, path, params, config = {}, context = {}) {
    return this.safeValue(config, 'cost', 1);
  }
  async fetchTicker(symbol, params = {}) {
    if (this.has['fetchTickers']) {
      await this.loadMarkets();
      const market = this.market(symbol);
      symbol = market['symbol'];
      const tickers = await this.fetchTickers([symbol], params);
      const ticker = this.safeValue(tickers, symbol);
      if (ticker === undefined) {
        throw new _errors.NullResponse(this.id + ' fetchTickers() could not find a ticker for ' + symbol);
      } else {
        return ticker;
      }
    } else {
      throw new _errors.NotSupported(this.id + ' fetchTicker() is not supported yet');
    }
  }
  async watchTicker(symbol, params = {}) {
    throw new _errors.NotSupported(this.id + ' watchTicker() is not supported yet');
  }
  async fetchTickers(symbols = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchTickers() is not supported yet');
  }
  async watchTickers(symbols = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' watchTickers() is not supported yet');
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchOrder() is not supported yet');
  }
  async fetchOrderStatus(id, symbol = undefined, params = {}) {
    const order = await this.fetchOrder(id, symbol, params);
    return order['status'];
  }
  async fetchUnifiedOrder(order, params = {}) {
    return await this.fetchOrder(this.safeValue(order, 'id'), this.safeValue(order, 'symbol'), params);
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' createOrder() is not supported yet');
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' cancelOrder() is not supported yet');
  }
  async cancelUnifiedOrder(order, params = {}) {
    return this.cancelOrder(this.safeValue(order, 'id'), this.safeValue(order, 'symbol'), params);
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchOrders() is not supported yet');
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' watchOrders() is not supported yet');
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchOpenOrders() is not supported yet');
  }
  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchClosedOrders() is not supported yet');
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchMyTrades() is not supported yet');
  }
  async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' watchMyTrades() is not supported yet');
  }
  async fetchTransactions(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchTransactions() is not supported yet');
  }
  async fetchDeposits(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchDeposits() is not supported yet');
  }
  async fetchWithdrawals(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchWithdrawals() is not supported yet');
  }
  parseLastPrice(price, market = undefined) {
    throw new _errors.NotSupported(this.id + ' parseLastPrice() is not supported yet');
  }
  async fetchDepositAddress(code, params = {}) {
    if (this.has['fetchDepositAddresses']) {
      const depositAddresses = await this.fetchDepositAddresses([code], params);
      const depositAddress = this.safeValue(depositAddresses, code);
      if (depositAddress === undefined) {
        throw new _errors.InvalidAddress(this.id + ' fetchDepositAddress() could not find a deposit address for ' + code + ', make sure you have created a corresponding deposit address in your wallet on the exchange website');
      } else {
        return depositAddress;
      }
    } else {
      throw new _errors.NotSupported(this.id + ' fetchDepositAddress() is not supported yet');
    }
  }
  account() {
    return {
      'free': undefined,
      'used': undefined,
      'total': undefined
    };
  }
  commonCurrencyCode(currency) {
    if (!this.substituteCommonCurrencyCodes) {
      return currency;
    }
    return this.safeString(this.commonCurrencies, currency, currency);
  }
  currency(code) {
    if (this.currencies === undefined) {
      throw new _errors.ExchangeError(this.id + ' currencies not loaded');
    }
    if (typeof code === 'string') {
      if (code in this.currencies) {
        return this.currencies[code];
      } else if (code in this.currencies_by_id) {
        return this.currencies_by_id[code];
      }
    }
    throw new _errors.ExchangeError(this.id + ' does not have currency code ' + code);
  }
  marketHelper(symbol) {
    if (typeof symbol === 'string') {
      if (symbol in this.markets) {
        return this.markets[symbol];
      } else if (symbol in this.markets_by_id) {
        const markets = this.markets_by_id[symbol];
        const defaultType = this.safeString2(this.options, 'defaultType', 'defaultSubType', 'spot');
        for (let i = 0; i < markets.length; i++) {
          const market = markets[i];
          if (market[defaultType]) {
            return market;
          }
        }
        return markets[0];
      }
    }
  }
  market(symbol) {
    // symbol = symbol + ':USDT';
    if (this.markets === undefined) {
      throw new _errors.ExchangeError(this.id + ' markets not loaded');
    }
    if (this.markets_by_id === undefined) {
      throw new _errors.ExchangeError(this.id + ' markets not loaded');
    }
    // TEALSTREET patch for backwards compatability
    // this.marketHelper (symbol.split (':')[0]);
    let foundMarket = this.marketHelper(symbol);
    if (foundMarket) {
      return foundMarket;
    }
    const marketStem = symbol.split(':')[0];
    const marketParts = marketStem.split('/');
    if (marketParts.length === 2) {
      foundMarket = this.marketHelper(marketParts[0] + '/' + marketParts[1] + ':' + marketParts[1]);
    }
    if (foundMarket) {
      return foundMarket;
    }
    foundMarket = this.marketHelper(marketStem + ':USDT') || this.marketHelper(marketStem + ':BTC') || this.marketHelper(marketStem);
    if (foundMarket) {
      return foundMarket;
    }
    // eslint-disable-next-line no-console
    // console.log (symbol);
    // eslint-disable-next-line no-console
    // console.log (this.markets);
    throw new _errors.BadSymbol(this.id + ' does not have market symbol ' + symbol);
  }
  handleWithdrawTagAndParams(tag, params) {
    if (typeof tag === 'object') {
      params = this.extend(tag, params);
      tag = undefined;
    }
    if (tag === undefined) {
      tag = this.safeString(params, 'tag');
      if (tag !== undefined) {
        params = this.omit(params, 'tag');
      }
    }
    return [tag, params];
  }
  async createLimitOrder(symbol, side, amount, price, params = {}) {
    return await this.createOrder(symbol, 'limit', side, amount, price, params);
  }
  async createMarketOrder(symbol, side, amount, price = undefined, params = {}) {
    return await this.createOrder(symbol, 'market', side, amount, price, params);
  }
  async createLimitBuyOrder(symbol, amount, price, params = {}) {
    return await this.createOrder(symbol, 'limit', 'buy', amount, price, params);
  }
  async createLimitSellOrder(symbol, amount, price, params = {}) {
    return await this.createOrder(symbol, 'limit', 'sell', amount, price, params);
  }
  async createMarketBuyOrder(symbol, amount, params = {}) {
    return await this.createOrder(symbol, 'market', 'buy', amount, undefined, params);
  }
  async createMarketSellOrder(symbol, amount, params = {}) {
    return await this.createOrder(symbol, 'market', 'sell', amount, undefined, params);
  }
  costToPrecision(symbol, cost) {
    const market = this.market(symbol);
    return this.decimalToPrecision(cost, TRUNCATE, market['precision']['price'], this.precisionMode, this.paddingMode);
  }
  priceToPrecision(symbol, price) {
    const market = this.market(symbol);
    const result = this.decimalToPrecision(price, ROUND, market['precision']['price'], this.precisionMode, this.paddingMode);
    if (result === '0') {
      throw new _errors.ArgumentsRequired(this.id + ' price of ' + market['symbol'] + ' must be greater than minimum price precision of ' + this.numberToString(market['precision']['price']));
    }
    return result;
  }
  amountToPrecision(symbol, amount) {
    const market = this.market(symbol);
    const result = this.decimalToPrecision(amount, TRUNCATE, market['precision']['amount'], this.precisionMode, this.paddingMode);
    if (result === '0') {
      throw new _errors.ArgumentsRequired(this.id + ' amount of ' + market['symbol'] + ' must be greater than minimum amount precision of ' + this.numberToString(market['precision']['amount']));
    }
    return result;
  }
  feeToPrecision(symbol, fee) {
    const market = this.market(symbol);
    return this.decimalToPrecision(fee, ROUND, market['precision']['price'], this.precisionMode, this.paddingMode);
  }
  currencyToPrecision(code, fee, networkCode = undefined) {
    const currency = this.currencies[code];
    let precision = this.safeValue(currency, 'precision');
    if (networkCode !== undefined) {
      const networks = this.safeValue(currency, 'networks', {});
      const networkItem = this.safeValue(networks, networkCode, {});
      precision = this.safeValue(networkItem, 'precision', precision);
    }
    if (precision === undefined) {
      return fee;
    } else {
      return this.decimalToPrecision(fee, ROUND, precision, this.precisionMode, this.paddingMode);
    }
  }
  safeNumber(obj, key, defaultNumber = undefined) {
    const value = this.safeString(obj, key);
    return this.parseNumber(value, defaultNumber);
  }
  safeNumberN(object, arr, defaultNumber = undefined) {
    const value = this.safeStringN(object, arr);
    return this.parseNumber(value, defaultNumber);
  }
  parsePrecision(precision) {
    /**
     * @ignore
     * @method
     * @param {string} precision The number of digits to the right of the decimal
     * @returns {string} a string number equal to 1e-precision
     */
    if (precision === undefined) {
      return undefined;
    }
    const precisionNumber = parseInt(precision);
    let parsedPrecision = '0.';
    for (let i = 0; i < precisionNumber - 1; i++) {
      parsedPrecision = parsedPrecision + '0';
    }
    return parsedPrecision + '1';
  }
  async loadTimeDifference(params = {}) {
    const serverTime = await this.fetchTime(params);
    const after = this.milliseconds();
    this.options['timeDifference'] = after - serverTime;
    return this.options['timeDifference'];
  }
  implodeHostname(url) {
    return this.implodeParams(url, {
      'hostname': this.hostname
    });
  }
  async fetchMarketLeverageTiers(symbol, params = {}) {
    if (this.has['fetchLeverageTiers']) {
      const market = await this.market(symbol);
      if (!market['contract']) {
        throw new _errors.BadSymbol(this.id + ' fetchMarketLeverageTiers() supports contract markets only');
      }
      const tiers = await this.fetchLeverageTiers([symbol]);
      return this.safeValue(tiers, symbol);
    } else {
      throw new _errors.NotSupported(this.id + ' fetchMarketLeverageTiers() is not supported yet');
    }
  }
  async createPostOnlyOrder(symbol, type, side, amount, price, params = {}) {
    if (!this.has['createPostOnlyOrder']) {
      throw new _errors.NotSupported(this.id + 'createPostOnlyOrder() is not supported yet');
    }
    const query = this.extend(params, {
      'postOnly': true
    });
    return await this.createOrder(symbol, type, side, amount, price, query);
  }
  async createReduceOnlyOrder(symbol, type, side, amount, price, params = {}) {
    if (!this.has['createReduceOnlyOrder']) {
      throw new _errors.NotSupported(this.id + 'createReduceOnlyOrder() is not supported yet');
    }
    const query = this.extend(params, {
      'reduceOnly': true
    });
    return await this.createOrder(symbol, type, side, amount, price, query);
  }
  async createStopOrder(symbol, type, side, amount, price = undefined, stopPrice = undefined, params = {}) {
    if (!this.has['createStopOrder']) {
      throw new _errors.NotSupported(this.id + ' createStopOrder() is not supported yet');
    }
    if (stopPrice === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' create_stop_order() requires a stopPrice argument');
    }
    const query = this.extend(params, {
      'stopPrice': stopPrice
    });
    return await this.createOrder(symbol, type, side, amount, price, query);
  }
  async createStopLimitOrder(symbol, side, amount, price, stopPrice, params = {}) {
    if (!this.has['createStopLimitOrder']) {
      throw new _errors.NotSupported(this.id + ' createStopLimitOrder() is not supported yet');
    }
    const query = this.extend(params, {
      'stopPrice': stopPrice
    });
    return await this.createOrder(symbol, 'limit', side, amount, price, query);
  }
  async createStopMarketOrder(symbol, side, amount, stopPrice, params = {}) {
    if (!this.has['createStopMarketOrder']) {
      throw new _errors.NotSupported(this.id + ' createStopMarketOrder() is not supported yet');
    }
    const query = this.extend(params, {
      'stopPrice': stopPrice
    });
    return await this.createOrder(symbol, 'market', side, amount, undefined, query);
  }
  safeCurrencyCode(currencyId, currency = undefined) {
    currency = this.safeCurrency(currencyId, currency);
    return currency['code'];
  }
  filterBySymbolSinceLimit(array, symbol = undefined, since = undefined, limit = undefined, tail = false) {
    return this.filterByValueSinceLimit(array, 'symbol', symbol, since, limit, 'timestamp', tail);
  }
  filterByCurrencySinceLimit(array, code = undefined, since = undefined, limit = undefined, tail = false) {
    return this.filterByValueSinceLimit(array, 'currency', code, since, limit, 'timestamp', tail);
  }
  parseLastPrices(pricesData, symbols = undefined, params = {}) {
    //
    // the value of tickers is either a dict or a list
    //
    // dict
    //
    //     {
    //         'marketId1': { ... },
    //         'marketId2': { ... },
    //         ...
    //     }
    //
    // list
    //
    //     [
    //         { 'market': 'marketId1', ... },
    //         { 'market': 'marketId2', ... },
    //         ...
    //     ]
    //
    const results = [];
    if (Array.isArray(pricesData)) {
      for (let i = 0; i < pricesData.length; i++) {
        const priceData = this.extend(this.parseLastPrice(pricesData[i]), params);
        results.push(priceData);
      }
    } else {
      const marketIds = Object.keys(pricesData);
      for (let i = 0; i < marketIds.length; i++) {
        const marketId = marketIds[i];
        const market = this.safeMarket(marketId);
        const priceData = this.extend(this.parseLastPrice(pricesData[marketId], market), params);
        results.push(priceData);
      }
    }
    symbols = this.marketSymbols(symbols);
    return this.filterByArray(results, 'symbol', symbols);
  }
  parseTickers(tickers, symbols = undefined, params = {}) {
    //
    // the value of tickers is either a dict or a list
    //
    // dict
    //
    //     {
    //         'marketId1': { ... },
    //         'marketId2': { ... },
    //         'marketId3': { ... },
    //         ...
    //     }
    //
    // list
    //
    //     [
    //         { 'market': 'marketId1', ... },
    //         { 'market': 'marketId2', ... },
    //         { 'market': 'marketId3', ... },
    //         ...
    //     ]
    //
    const results = [];
    if (Array.isArray(tickers)) {
      for (let i = 0; i < tickers.length; i++) {
        const ticker = this.extend(this.parseTicker(tickers[i]), params);
        results.push(ticker);
      }
    } else {
      const marketIds = Object.keys(tickers);
      for (let i = 0; i < marketIds.length; i++) {
        const marketId = marketIds[i];
        const market = this.safeMarket(marketId);
        const ticker = this.extend(this.parseTicker(tickers[marketId], market), params);
        results.push(ticker);
      }
    }
    symbols = this.marketSymbols(symbols);
    return this.filterByArray(results, 'symbol', symbols);
  }
  parseDepositAddresses(addresses, codes = undefined, indexed = true, params = {}) {
    let result = [];
    for (let i = 0; i < addresses.length; i++) {
      const address = this.extend(this.parseDepositAddress(addresses[i]), params);
      result.push(address);
    }
    if (codes !== undefined) {
      result = this.filterByArray(result, 'currency', codes, false);
    }
    if (indexed) {
      return this.indexBy(result, 'currency');
    }
    return result;
  }
  parseBorrowInterests(response, market = undefined) {
    const interests = [];
    for (let i = 0; i < response.length; i++) {
      const row = response[i];
      interests.push(this.parseBorrowInterest(row, market));
    }
    return interests;
  }
  parseFundingRateHistories(response, market = undefined, since = undefined, limit = undefined) {
    const rates = [];
    for (let i = 0; i < response.length; i++) {
      const entry = response[i];
      rates.push(this.parseFundingRateHistory(entry, market));
    }
    const sorted = this.sortBy(rates, 'timestamp');
    const symbol = market === undefined ? undefined : market['symbol'];
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  safeSymbol(marketId, market = undefined, delimiter = undefined, marketType = undefined) {
    market = this.safeMarket(marketId, market, delimiter, marketType);
    return market['symbol'];
  }
  parseFundingRate(contract, market = undefined) {
    throw new _errors.NotSupported(this.id + ' parseFundingRate() is not supported yet');
  }
  parseFundingRates(response, market = undefined) {
    const result = {};
    for (let i = 0; i < response.length; i++) {
      const parsed = this.parseFundingRate(response[i], market);
      result[parsed['symbol']] = parsed;
    }
    return result;
  }
  isTriggerOrder(params) {
    const isTrigger = this.safeValue2(params, 'trigger', 'stop');
    if (isTrigger) {
      params = this.omit(params, ['trigger', 'stop']);
    }
    return [isTrigger, params];
  }
  isPostOnly(isMarketOrder, exchangeSpecificParam, params = {}) {
    /**
     * @ignore
     * @method
     * @param {string} type Order type
     * @param {boolean} exchangeSpecificParam exchange specific postOnly
     * @param {object} params exchange specific params
     * @returns {boolean} true if a post only order, false otherwise
     */
    const timeInForce = this.safeStringUpper(params, 'timeInForce');
    let postOnly = this.safeValue2(params, 'postOnly', 'post_only', false);
    // we assume timeInForce is uppercase from safeStringUpper (params, 'timeInForce')
    const ioc = timeInForce === 'IOC';
    const fok = timeInForce === 'FOK';
    const timeInForcePostOnly = timeInForce === 'PO';
    postOnly = postOnly || timeInForcePostOnly || exchangeSpecificParam;
    if (postOnly) {
      if (ioc || fok) {
        throw new _errors.InvalidOrder(this.id + ' postOnly orders cannot have timeInForce equal to ' + timeInForce);
      } else if (isMarketOrder) {
        throw new _errors.InvalidOrder(this.id + ' market orders cannot be postOnly');
      } else {
        return true;
      }
    } else {
      return false;
    }
  }
  async fetchLastPrices(params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchLastPrices() is not supported yet');
  }
  async fetchTradingFees(params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchTradingFees() is not supported yet');
  }
  async fetchTradingFee(symbol, params = {}) {
    if (!this.has['fetchTradingFees']) {
      throw new _errors.NotSupported(this.id + ' fetchTradingFee() is not supported yet');
    }
    return await this.fetchTradingFees(params);
  }
  parseOpenInterest(interest, market = undefined) {
    throw new _errors.NotSupported(this.id + ' parseOpenInterest () is not supported yet');
  }
  parseOpenInterests(response, market = undefined, since = undefined, limit = undefined) {
    const interests = [];
    for (let i = 0; i < response.length; i++) {
      const entry = response[i];
      const interest = this.parseOpenInterest(entry, market);
      interests.push(interest);
    }
    const sorted = this.sortBy(interests, 'timestamp');
    const symbol = this.safeString(market, 'symbol');
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  async fetchFundingRate(symbol, params = {}) {
    if (this.has['fetchFundingRates']) {
      await this.loadMarkets();
      const market = this.market(symbol);
      if (!market['contract']) {
        throw new _errors.BadSymbol(this.id + ' fetchFundingRate() supports contract markets only');
      }
      const rates = await this.fetchFundingRates([symbol], params);
      const rate = this.safeValue(rates, symbol);
      if (rate === undefined) {
        throw new _errors.NullResponse(this.id + ' fetchFundingRate () returned no data for ' + symbol);
      } else {
        return rate;
      }
    } else {
      throw new _errors.NotSupported(this.id + ' fetchFundingRate () is not supported yet');
    }
  }
  async fetchMarkOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name exchange#fetchMarkOHLCV
     * @description fetches historical mark price candlestick data containing the open, high, low, and close price of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
     */
    if (this.has['fetchMarkOHLCV']) {
      const request = {
        'price': 'mark'
      };
      return await this.fetchOHLCV(symbol, timeframe, since, limit, this.extend(request, params));
    } else {
      throw new _errors.NotSupported(this.id + ' fetchMarkOHLCV () is not supported yet');
    }
  }
  async fetchIndexOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name exchange#fetchIndexOHLCV
     * @description fetches historical index price candlestick data containing the open, high, low, and close price of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
     */
    if (this.has['fetchIndexOHLCV']) {
      const request = {
        'price': 'index'
      };
      return await this.fetchOHLCV(symbol, timeframe, since, limit, this.extend(request, params));
    } else {
      throw new _errors.NotSupported(this.id + ' fetchIndexOHLCV () is not supported yet');
    }
  }
  async fetchPremiumIndexOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name exchange#fetchPremiumIndexOHLCV
     * @description fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
     */
    if (this.has['fetchPremiumIndexOHLCV']) {
      const request = {
        'price': 'premiumIndex'
      };
      return await this.fetchOHLCV(symbol, timeframe, since, limit, this.extend(request, params));
    } else {
      throw new _errors.NotSupported(this.id + ' fetchPremiumIndexOHLCV () is not supported yet');
    }
  }
  handleTimeInForce(params = {}) {
    /**
     * @ignore
     * @method
     * * Must add timeInForce to this.options to use this method
     * @return {string} returns the exchange specific value for timeInForce
     */
    const timeInForce = this.safeStringUpper(params, 'timeInForce'); // supported values GTC, IOC, PO
    if (timeInForce !== undefined) {
      const exchangeValue = this.safeString(this.options['timeInForce'], timeInForce);
      if (exchangeValue === undefined) {
        throw new _errors.ExchangeError(this.id + ' does not support timeInForce "' + timeInForce + '"');
      }
      return exchangeValue;
    }
    return undefined;
  }
  convertTypeToAccount(account) {
    /**
     * @ignore
     * @method
     * * Must add accountsByType to this.options to use this method
     * @param {string} account key for account name in this.options['accountsByType']
     * @returns the exchange specific account name or the isolated margin id for transfers
     */
    const accountsByType = this.safeValue(this.options, 'accountsByType', {});
    const lowercaseAccount = account.toLowerCase();
    if (lowercaseAccount in accountsByType) {
      return accountsByType[lowercaseAccount];
    } else if (account in this.markets || account in this.markets_by_id) {
      const market = this.market(account);
      return market['id'];
    } else {
      return account;
    }
  }
  checkRequiredArgument(methodName, argument, argumentName, options = []) {
    /**
     * @ignore
     * @method
     * @param {string} argument the argument to check
     * @param {string} argumentName the name of the argument to check
     * @param {string} methodName the name of the method that the argument is being checked for
     * @param {[string]} options a list of options that the argument can be
     * @returns {undefined}
     */
    const optionsLength = options.length;
    if (argument === undefined || optionsLength > 0 && !this.inArray(argument, options)) {
      const messageOptions = options.join(', ');
      let message = this.id + ' ' + methodName + '() requires a ' + argumentName + ' argument';
      if (messageOptions !== '') {
        message += ', one of ' + '(' + messageOptions + ')';
      }
      throw new _errors.ArgumentsRequired(message);
    }
  }
  checkRequiredMarginArgument(methodName, symbol, marginMode) {
    /**
     * @ignore
     * @method
     * @param {string} symbol unified symbol of the market
     * @param {string} methodName name of the method that requires a symbol
     * @param {string} marginMode is either 'isolated' or 'cross'
     */
    if (marginMode === 'isolated' && symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' ' + methodName + '() requires a symbol argument for isolated margin');
    } else if (marginMode === 'cross' && symbol !== undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' ' + methodName + '() cannot have a symbol argument for cross margin');
    }
  }
  checkRequiredSymbol(methodName, symbol) {
    /**
     * @ignore
     * @method
     * @param {string} symbol unified symbol of the market
     * @param {string} methodName name of the method that requires a symbol
     */
    this.checkRequiredArgument(methodName, symbol, 'symbol');
  }
  parseDepositWithdrawFees(response, codes = undefined, currencyIdKey = undefined) {
    /**
     * @ignore
     * @method
     * @param {[object]|object} response unparsed response from the exchange
     * @param {[string]|undefined} codes the unified currency codes to fetch transactions fees for, returns all currencies when undefined
     * @param {str|undefined} currencyIdKey *should only be undefined when response is a dictionary* the object key that corresponds to the currency id
     * @returns {object} objects with withdraw and deposit fees, indexed by currency codes
     */
    const depositWithdrawFees = {};
    codes = this.marketCodes(codes);
    const isArray = Array.isArray(response);
    let responseKeys = response;
    if (!isArray) {
      responseKeys = Object.keys(response);
    }
    for (let i = 0; i < responseKeys.length; i++) {
      const entry = responseKeys[i];
      const dictionary = isArray ? entry : response[entry];
      const currencyId = isArray ? this.safeString(dictionary, currencyIdKey) : entry;
      const currency = this.safeValue(this.currencies_by_id, currencyId);
      const code = this.safeString(currency, 'code', currencyId);
      if (codes === undefined || this.inArray(code, codes)) {
        depositWithdrawFees[code] = this.parseDepositWithdrawFee(dictionary, currency);
      }
    }
    return depositWithdrawFees;
  }
  parseDepositWithdrawFee(fee, currency = undefined) {
    throw new _errors.NotSupported(this.id + ' parseDepositWithdrawFee() is not supported yet');
  }
  depositWithdrawFee(info) {
    return {
      'info': info,
      'withdraw': {
        'fee': undefined,
        'percentage': undefined
      },
      'deposit': {
        'fee': undefined,
        'percentage': undefined
      },
      'networks': {}
    };
  }
  assignDefaultDepositWithdrawFees(fee, currency = undefined) {
    /**
     * @ignore
     * @method
     * @description Takes a depositWithdrawFee structure and assigns the default values for withdraw and deposit
     * @param {object} fee A deposit withdraw fee structure
     * @param {object} currency A currency structure, the response from this.currency ()
     * @returns {object} A deposit withdraw fee structure
     */
    const networkKeys = Object.keys(fee['networks']);
    const numNetworks = networkKeys.length;
    if (numNetworks === 1) {
      fee['withdraw'] = fee['networks'][networkKeys[0]]['withdraw'];
      fee['deposit'] = fee['networks'][networkKeys[0]]['deposit'];
      return fee;
    }
    const currencyCode = this.safeString(currency, 'code');
    for (let i = 0; i < numNetworks; i++) {
      const network = networkKeys[i];
      if (network === currencyCode) {
        fee['withdraw'] = fee['networks'][networkKeys[i]]['withdraw'];
        fee['deposit'] = fee['networks'][networkKeys[i]]['deposit'];
      }
    }
    return fee;
  }
  parseIncome(info, market = undefined) {
    throw new _errors.NotSupported(this.id + ' parseIncome () is not supported yet');
  }
  parseIncomes(incomes, market = undefined, since = undefined, limit = undefined) {
    /**
     * @ignore
     * @method
     * @description parses funding fee info from exchange response
     * @param {[object]} incomes each item describes once instance of currency being received or paid
     * @param {object|undefined} market ccxt market
     * @param {int|undefined} since when defined, the response items are filtered to only include items after this timestamp
     * @param {int|undefined} limit limits the number of items in the response
     * @returns {[object]} an array of [funding history structures]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
     */
    const result = [];
    for (let i = 0; i < incomes.length; i++) {
      const entry = incomes[i];
      const parsed = this.parseIncome(entry, market);
      result.push(parsed);
    }
    const sorted = this.sortBy(result, 'timestamp');
    return this.filterBySinceLimit(sorted, since, limit);
  }
  getMarketFromSymbols(symbols = undefined) {
    if (symbols === undefined) {
      return undefined;
    }
    const firstMarket = this.safeString(symbols, 0);
    const market = this.market(firstMarket);
    return market;
  }
  rejectAllClients() {
    const clientMap = this.clients || {};
    const clients = Object.values(clientMap);
    for (let i = 0; i < clients.length; i++) {
      const client = clients[i];
      try {
        client.reject();
      } catch (e) {
        if (this.verbose) {
          // eslint-disable-next-line no-console
          console.log(e);
        }
      }
      client.reject();
    }
  }
  async setLeverage(symbol, buyLeverage, sellLeverage, params = {}) {
    throw new _errors.NotSupported(this.id + ' setLeverage() is not supported yet');
  }
  async setPositionMode(hedged, symbol = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' setPositionMode() is not supported yet');
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' setMarginMode() is not supported yet');
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    return {};
  }
  getUrl() {
    return this.urls['api']['ws'];
  }
  createClientFuture(url, messageHash) {
    url = url || this.getUrl();
    const client = this.client(url);
    return client.future(messageHash);
  }
  async watchHeartbeat() {
    const messageHash = 'ping';
    const url = this.getUrl();
    return await this.createClientFuture(url, messageHash);
  }
  handlePong(client, message) {
    client.lastPong = this.milliseconds();
    client.resolve('pong', 'ping');
    return message;
  }
}
exports.Exchange = exports.default = Exchange;

},{"./Precise.js":3,"./errors.js":5,"./functions.js":6,"./ws/Future.js":19,"./ws/OrderBook.js":20,"./ws/WsClient.js":22,"./ws/functions.js":23}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Precise = void 0;
const zero = BigInt(0);
const minusOne = BigInt(-1);
const base = BigInt(10);
class Precise {
  constructor(number, decimals = undefined) {
    this.decimals = undefined;
    this.integer = undefined;
    this.base = undefined;
    if (decimals === undefined) {
      let modifier = 0;
      number = number.toLowerCase();
      if (number.indexOf('e') > -1) {
        [number, modifier] = number.split('e');
        modifier = parseInt(modifier.toString());
      }
      const decimalIndex = number.indexOf('.');
      this.decimals = decimalIndex > -1 ? number.length - decimalIndex - 1 : 0;
      const integerString = number.replace('.', '');
      this.integer = BigInt(integerString);
      this.decimals = this.decimals - modifier;
    } else {
      this.integer = number;
      this.decimals = decimals;
    }
  }
  mul(other) {
    // other must be another instance of Precise
    const integerResult = this.integer * other.integer;
    return new Precise(integerResult, this.decimals + other.decimals);
  }
  div(other, precision = 18) {
    const distance = precision - this.decimals + other.decimals;
    let numerator = undefined;
    if (distance === 0) {
      numerator = this.integer;
    } else if (distance < 0) {
      const exponent = base ** BigInt(-distance);
      numerator = this.integer / exponent;
    } else {
      const exponent = base ** BigInt(distance);
      numerator = this.integer * exponent;
    }
    const result = numerator / other.integer;
    return new Precise(result, precision);
  }
  add(other) {
    if (this.decimals === other.decimals) {
      const integerResult = this.integer + other.integer;
      return new Precise(integerResult, this.decimals);
    } else {
      const [smaller, bigger] = this.decimals > other.decimals ? [other, this] : [this, other];
      const exponent = bigger.decimals - smaller.decimals;
      const normalised = smaller.integer * base ** BigInt(exponent);
      const result = normalised + bigger.integer;
      return new Precise(result, bigger.decimals);
    }
  }
  mod(other) {
    const rationizerNumerator = Math.max(-this.decimals + other.decimals, 0);
    const numerator = this.integer * base ** BigInt(rationizerNumerator);
    const rationizerDenominator = Math.max(-other.decimals + this.decimals, 0);
    const denominator = other.integer * base ** BigInt(rationizerDenominator);
    const result = numerator % denominator;
    return new Precise(result, rationizerDenominator + other.decimals);
  }
  sub(other) {
    const negative = new Precise(-other.integer, other.decimals);
    return this.add(negative);
  }
  abs() {
    return new Precise(this.integer < 0 ? this.integer * minusOne : this.integer, this.decimals);
  }
  neg() {
    return new Precise(-this.integer, this.decimals);
  }
  min(other) {
    return this.lt(other) ? this : other;
  }
  max(other) {
    return this.gt(other) ? this : other;
  }
  gt(other) {
    const sum = this.sub(other);
    return sum.integer > 0;
  }
  ge(other) {
    const sum = this.sub(other);
    return sum.integer >= 0;
  }
  lt(other) {
    return other.gt(this);
  }
  le(other) {
    return other.ge(this);
  }
  reduce() {
    const string = this.integer.toString();
    const start = string.length - 1;
    if (start === 0) {
      if (string === '0') {
        this.decimals = 0;
      }
      return this;
    }
    let i;
    for (i = start; i >= 0; i--) {
      if (string.charAt(i) !== '0') {
        break;
      }
    }
    const difference = start - i;
    if (difference === 0) {
      return this;
    }
    this.decimals -= difference;
    this.integer = BigInt(string.slice(0, i + 1));
  }
  equals(other) {
    this.reduce();
    other.reduce();
    return this.decimals === other.decimals && this.integer === other.integer;
  }
  toString() {
    this.reduce();
    let sign;
    let abs;
    if (this.integer < 0) {
      sign = '-';
      abs = -this.integer;
    } else {
      sign = '';
      abs = this.integer;
    }
    const integerArray = Array.from(abs.toString(Number(base)).padStart(this.decimals, '0'));
    const index = integerArray.length - this.decimals;
    let item;
    if (index === 0) {
      // if we are adding to the front
      item = '0.';
    } else if (this.decimals < 0) {
      item = '0'.repeat(-this.decimals);
    } else if (this.decimals === 0) {
      item = '';
    } else {
      item = '.';
    }
    integerArray.splice(index, 0, item);
    return sign + integerArray.join('');
  }
  static stringMul(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).mul(new Precise(string2)).toString();
  }
  static stringDiv(string1, string2, precision = 18) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    const string2Precise = new Precise(string2);
    if (string2Precise.integer === zero) {
      return undefined;
    }
    return new Precise(string1).div(string2Precise, precision).toString();
  }
  static stringAdd(string1, string2) {
    if (string1 === undefined && string2 === undefined) {
      return undefined;
    }
    if (string1 === undefined) {
      return string2;
    } else if (string2 === undefined) {
      return string1;
    }
    return new Precise(string1).add(new Precise(string2)).toString();
  }
  static stringSub(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).sub(new Precise(string2)).toString();
  }
  static stringAbs(string) {
    if (string === undefined) {
      return undefined;
    }
    return new Precise(string).abs().toString();
  }
  static stringNeg(string) {
    if (string === undefined) {
      return undefined;
    }
    return new Precise(string).neg().toString();
  }
  static stringMod(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).mod(new Precise(string2)).toString();
  }
  static stringEquals(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).equals(new Precise(string2));
  }
  static stringEq(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).equals(new Precise(string2));
  }
  static stringMin(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).min(new Precise(string2)).toString();
  }
  static stringMax(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).max(new Precise(string2)).toString();
  }
  static stringGt(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).gt(new Precise(string2));
  }
  static stringGe(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).ge(new Precise(string2));
  }
  static stringLt(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).lt(new Precise(string2));
  }
  static stringLe(string1, string2) {
    if (string1 === undefined || string2 === undefined) {
      return undefined;
    }
    return new Precise(string1).le(new Precise(string2));
  }
}
exports.Precise = Precise;
var _default = Precise;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Signer = void 0;
// eslint-disable-next-line import/prefer-default-export
class Signer {
  // eslint-disable-next-line no-useless-constructor, no-unused-vars, no-empty-function
  constructor(_account_id, _private_key) {}
  // eslint-disable-next-line no-unused-vars
  sign_request(_message) {
    return '';
  }
}
exports.Signer = Signer;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RequestTimeout = exports.RateLimitExceeded = exports.PermissionDenied = exports.OrderNotFound = exports.OrderNotFillable = exports.OrderNotCached = exports.OrderImmediatelyFillable = exports.OnMaintenance = exports.NullResponse = exports.NotSupported = exports.NetworkError = exports.MarginModeAlreadySet = exports.InvalidOrder = exports.InvalidNonce = exports.InvalidAddress = exports.InsufficientFunds = exports.ExchangeNotAvailable = exports.ExchangeError = exports.DuplicateOrderId = exports.DDoSProtection = exports.CancelPending = exports.BaseError = exports.BadSymbol = exports.BadResponse = exports.BadRequest = exports.AuthenticationError = exports.ArgumentsRequired = exports.AddressPending = exports.AccountSuspended = exports.AccountNotEnabled = void 0;
/* eslint-disable max-classes-per-file */
// import { errorHierarchy } from './errorHierarchy.js';
// Commented out since I'm not sure this is mandatory anymore
// and does not work out of the box with esm
// /*  ------------------------------------------------------------------------ */
// function subclass (BaseClass, classes, namespace = {}) {
//     for (const [className, subclasses] of Object.entries (classes)) {
//         const Class = Object.assign (namespace, {
//         /*  By creating a named property, we trick compiler to assign our class constructor function a name.
//             Otherwise, all our error constructors would be shown as [Function: Error] in the debugger! And
//             the super-useful `e.constructor.name` magic wouldn't work — we then would have no chance to
//             obtain a error type string from an error instance programmatically!                               */
//             [className]: class extends BaseClass {
//                 constructor (message) {
//                     super (message)
//                 /*  A workaround to make `instanceof` work on custom Error classes in transpiled ES5.
//                     See my blog post for the explanation of this hack:
//                     https://medium.com/@xpl/javascript-deriving-from-error-properly-8d2f8f315801        */
//                     this.constructor = Class
//                     this.__proto__   = Class.prototype
//                     this.name        = className
//                     this.message     = message
//                     // https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work
//                     Object.setPrototypeOf (this, Class.prototype)
//                 }
//             }
//         })[className]
//         subclass (Class, subclasses, namespace)
//     }
//     return namespace
// }
class BaseError extends Error {
  constructor(message) {
    super(message);
    this.name = 'BaseError';
  }
}
// Exchange Error errors
exports.BaseError = BaseError;
class ExchangeError extends Error {
  constructor(message) {
    super(message);
    this.name = 'ExchangeError';
  }
}
exports.ExchangeError = ExchangeError;
class AuthenticationError extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'AuthenticationError';
  }
}
exports.AuthenticationError = AuthenticationError;
class PermissionDenied extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'PermissionDenied';
  }
}
exports.PermissionDenied = PermissionDenied;
class AccountNotEnabled extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'AccountNotEnabled';
  }
}
exports.AccountNotEnabled = AccountNotEnabled;
class AccountSuspended extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'AccountSuspended';
  }
}
exports.AccountSuspended = AccountSuspended;
class ArgumentsRequired extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'ArgumentsRequired';
  }
}
exports.ArgumentsRequired = ArgumentsRequired;
class BadRequest extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'BadRequest';
  }
}
exports.BadRequest = BadRequest;
class BadSymbol extends BadRequest {
  constructor(message) {
    super(message);
    this.name = 'BadSymbol';
  }
}
exports.BadSymbol = BadSymbol;
class MarginModeAlreadySet extends BadRequest {
  constructor(message) {
    super(message);
    this.name = 'MarginModeAlreadySet';
  }
}
exports.MarginModeAlreadySet = MarginModeAlreadySet;
class BadResponse extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'BadResponse';
  }
}
exports.BadResponse = BadResponse;
class NullResponse extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'NullResponse';
  }
}
exports.NullResponse = NullResponse;
class InsufficientFunds extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'InsufficientFunds';
  }
}
exports.InsufficientFunds = InsufficientFunds;
class InvalidAddress extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'InvalidAddress';
  }
}
exports.InvalidAddress = InvalidAddress;
class AddressPending extends InvalidAddress {
  constructor(message) {
    super(message);
    this.name = 'AddressPending';
  }
}
exports.AddressPending = AddressPending;
class InvalidOrder extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'InvalidOrder';
  }
}
exports.InvalidOrder = InvalidOrder;
class OrderNotFound extends InvalidOrder {
  constructor(message) {
    super(message);
    this.name = 'OrderNotFound';
  }
}
exports.OrderNotFound = OrderNotFound;
class OrderNotCached extends InvalidOrder {
  constructor(message) {
    super(message);
    this.name = 'OrderNotCached';
  }
}
exports.OrderNotCached = OrderNotCached;
class CancelPending extends InvalidOrder {
  constructor(message) {
    super(message);
    this.name = 'CancelPending';
  }
}
exports.CancelPending = CancelPending;
class OrderImmediatelyFillable extends InvalidOrder {
  constructor(message) {
    super(message);
    this.name = 'OrderImmediatelyFillable';
  }
}
exports.OrderImmediatelyFillable = OrderImmediatelyFillable;
class OrderNotFillable extends InvalidOrder {
  constructor(message) {
    super(message);
    this.name = 'OrderNotFillable';
  }
}
exports.OrderNotFillable = OrderNotFillable;
class DuplicateOrderId extends InvalidOrder {
  constructor(message) {
    super(message);
    this.name = 'DuplicateOrderId';
  }
}
exports.DuplicateOrderId = DuplicateOrderId;
class NotSupported extends ExchangeError {
  constructor(message) {
    super(message);
    this.name = 'NotSupported';
  }
}
// Network error
exports.NotSupported = NotSupported;
class NetworkError extends BaseError {
  constructor(message) {
    super(message);
    this.name = 'NetworkError';
  }
}
exports.NetworkError = NetworkError;
class DDoSProtection extends NetworkError {
  constructor(message) {
    super(message);
    this.name = 'DDoSProtection';
  }
}
exports.DDoSProtection = DDoSProtection;
class RateLimitExceeded extends DDoSProtection {
  constructor(message) {
    super(message);
    this.name = 'RateLimitExceeded';
  }
}
exports.RateLimitExceeded = RateLimitExceeded;
class ExchangeNotAvailable extends NetworkError {
  constructor(message) {
    super(message);
    this.name = 'ExchangeNotAvailable';
  }
}
exports.ExchangeNotAvailable = ExchangeNotAvailable;
class OnMaintenance extends ExchangeNotAvailable {
  constructor(message) {
    super(message);
    this.name = 'OnMaintenance';
  }
}
exports.OnMaintenance = OnMaintenance;
class InvalidNonce extends NetworkError {
  constructor(message) {
    super(message);
    this.name = 'InvalidNonce';
  }
}
exports.InvalidNonce = InvalidNonce;
class RequestTimeout extends NetworkError {
  constructor(message) {
    super(message);
    this.name = 'RequestTimeout';
  }
}
/*  ------------------------------------------------------------------------ */
// export default subclass (
//     // Root class
//     Error,
//     // Derived class hierarchy
//     errorHierarchy
// )
exports.RequestTimeout = RequestTimeout;
const errors = {
  BaseError,
  ExchangeError,
  PermissionDenied,
  AccountNotEnabled,
  AccountSuspended,
  ArgumentsRequired,
  BadRequest,
  BadSymbol,
  MarginModeAlreadySet,
  BadResponse,
  NullResponse,
  InsufficientFunds,
  InvalidAddress,
  InvalidOrder,
  OrderNotFound,
  OrderNotCached,
  CancelPending,
  OrderImmediatelyFillable,
  OrderNotFillable,
  DuplicateOrderId,
  NotSupported,
  NetworkError,
  DDoSProtection,
  RateLimitExceeded,
  ExchangeNotAvailable,
  OnMaintenance,
  InvalidNonce,
  RequestTimeout,
  AuthenticationError,
  AddressPending
};
var _default = errors;
exports.default = _default;

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _platform = require("./functions/platform.js");
Object.keys(_platform).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _platform[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _platform[key];
    }
  });
});
var _generic = require("./functions/generic.js");
Object.keys(_generic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _generic[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generic[key];
    }
  });
});
var _string = require("./functions/string.js");
Object.keys(_string).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _string[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _string[key];
    }
  });
});
var _type = require("./functions/type.js");
Object.keys(_type).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _type[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _type[key];
    }
  });
});
var _number = require("./functions/number.js");
Object.keys(_number).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _number[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _number[key];
    }
  });
});
var _encode = require("./functions/encode.js");
Object.keys(_encode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _encode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _encode[key];
    }
  });
});
var _crypto = require("./functions/crypto.js");
Object.keys(_crypto).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _crypto[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _crypto[key];
    }
  });
});
var _time = require("./functions/time.js");
Object.keys(_time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _time[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _time[key];
    }
  });
});
var _throttle = require("./functions/throttle.js");
Object.keys(_throttle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _throttle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _throttle[key];
    }
  });
});
var _misc = require("./functions/misc.js");
Object.keys(_misc).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _misc[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _misc[key];
    }
  });
});

},{"./functions/crypto.js":7,"./functions/encode.js":8,"./functions/generic.js":9,"./functions/misc.js":10,"./functions/number.js":11,"./functions/platform.js":12,"./functions/string.js":13,"./functions/throttle.js":14,"./functions/time.js":15,"./functions/type.js":16}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.crc32 = crc32;
exports.ecdsa = ecdsa;
exports.eddsa = eddsa;
exports.hmac = exports.hash = void 0;
exports.jwt = jwt;
exports.rsa = rsa;
exports.totp = void 0;
var _bn = _interopRequireDefault(require("../../static_dependencies/BN/bn.cjs"));
var _elliptic = _interopRequireDefault(require("../../static_dependencies/elliptic/lib/elliptic.cjs"));
var _NodeRSA = _interopRequireDefault(require("../../static_dependencies/node-rsa/NodeRSA.cjs"));
var _cryptoJs = _interopRequireDefault(require("../../static_dependencies/crypto-js/crypto-js.cjs"));
var _string = require("./string.js");
var _encode = require("./encode.js");
var _errors = require("../errors.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*  ------------------------------------------------------------------------ */

// import errors from './../errors.js'

const EC = _elliptic.default.ec;
const EDDSA = _elliptic.default.eddsa;
/*  ------------------------------------------------------------------------ */
const hash = (request, hash = 'md5', digest = 'hex') => {
  const options = {};
  if (hash === 'keccak') {
    hash = 'SHA3';
    options['outputLength'] = 256;
  }
  const result = _cryptoJs.default[hash.toUpperCase()](request, options);
  return digest === 'binary' ? result : result.toString(_cryptoJs.default.enc[(0, _string.capitalize)(digest)]);
};
/*  .............................................   */
exports.hash = hash;
const hmac = (request, secret, hash = 'sha256', digest = 'hex') => {
  const result = _cryptoJs.default['Hmac' + hash.toUpperCase()](request, secret);
  if (digest) {
    const encoding = digest === 'binary' ? 'Latin1' : (0, _string.capitalize)(digest);
    return result.toString(_cryptoJs.default.enc[(0, _string.capitalize)(encoding)]);
  }
  return result;
};
/*  .............................................   */
exports.hmac = hmac;
function rsa(request, secret, alg = 'RS256') {
  const algos = {
    'RS256': 'pkcs1-sha256',
    'RS512': 'pkcs1-sha512'
  };
  if (!(alg in algos)) {
    throw new _errors.ExchangeError(alg + ' is not a supported rsa signing algorithm.');
  }
  const algorithm = algos[alg];
  const key = new _NodeRSA.default(secret, {
    'environment': 'browser',
    'signingScheme': algorithm
  });
  return key.sign(request, 'base64', 'binary');
}
/**
 * @return {string}
 */
function jwt(request, secret, alg = 'HS256') {
  const algos = {
    'HS256': 'sha256',
    'HS384': 'sha384',
    'HS512': 'sha512'
  };
  const encodedHeader = (0, _encode.urlencodeBase64)((0, _encode.stringToBase64)(JSON.stringify({
    'alg': alg,
    'typ': 'JWT'
  })));
  const encodedData = (0, _encode.urlencodeBase64)((0, _encode.stringToBase64)(JSON.stringify(request)));
  const token = [encodedHeader, encodedData].join('.');
  const algoType = alg.slice(0, 2);
  const algorithm = algos[alg];
  let signature = undefined;
  if (algoType === 'HS') {
    signature = (0, _encode.urlencodeBase64)(hmac(token, secret, algorithm, 'base64'));
  } else if (algoType === 'RS') {
    signature = (0, _encode.urlencodeBase64)(rsa(token, secret, alg));
  }
  return [token, signature].join('.');
}
function ecdsa(request, secret, algorithm = 'p256', hashFunction = undefined, fixedLength = false) {
  let digest = request;
  if (hashFunction !== undefined) {
    digest = hash(request, hashFunction, 'hex');
  }
  const curve = new EC(algorithm);
  let signature = curve.sign(digest, secret, 'hex', {
    'canonical': true
  });
  let counter = new _bn.default('0');
  const minimum_size = new _bn.default('1').shln(8 * 31).sub(new _bn.default('1'));
  while (fixedLength && (signature.r.gt(curve.nh) || signature.r.lte(minimum_size) || signature.s.lte(minimum_size))) {
    signature = curve.sign(digest, secret, 'hex', {
      'canonical': true,
      'extraEntropy': counter.toArray('le', 32)
    });
    counter = counter.add(new _bn.default('1'));
  }
  return {
    'r': signature.r.toString(16).padStart(64, '0'),
    's': signature.s.toString(16).padStart(64, '0'),
    'v': signature.recoveryParam
  };
}
function eddsa(request, secret, algorithm = 'ed25519') {
  // used for waves.exchange (that's why the output is base58)
  const curve = new EDDSA(algorithm);
  const signature = curve.signModified(request, secret);
  return (0, _encode.binaryToBase58)((0, _encode.byteArrayToWordArray)(signature.toBytes()));
}
/*  ------------------------------------------------------------------------ */
const totp = secret => {
  const dec2hex = s => (s < 15.5 ? '0' : '') + Math.round(s).toString(16);
  const hex2dec = s => parseInt(s, 16);
  const leftpad = (s, p) => (p + s).slice(-p.length); // both s and p are short strings
  const base32tohex = base32 => {
    const base32chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
    let bits = '';
    let hex = '';
    for (let i = 0; i < base32.length; i++) {
      const val = base32chars.indexOf(base32.charAt(i).toUpperCase());
      bits += leftpad(val.toString(2), '00000');
    }
    for (let i = 0; i + 4 <= bits.length; i += 4) {
      const chunk = bits.substr(i, 4);
      hex = hex + parseInt(chunk, 2).toString(16);
    }
    return hex;
  };
  const getOTP = secret => {
    secret = secret.replace(' ', ''); // support 2fa-secrets with spaces like "4TDV WOGO" → "4TDVWOGO"
    const epoch = Math.round(new Date().getTime() / 1000.0);
    const time = leftpad(dec2hex(Math.floor(epoch / 30)), '0000000000000000');
    const hmacRes = hmac(_cryptoJs.default.enc.Hex.parse(time), _cryptoJs.default.enc.Hex.parse(base32tohex(secret)), 'sha1', 'hex');
    const offset = hex2dec(hmacRes.substring(hmacRes.length - 1));
    // eslint-disable-next-line
    let otp = (hex2dec(hmacRes.substr(offset * 2, 8)) & hex2dec('7fffffff')) + '';
    otp = otp.substr(otp.length - 6, 6);
    return otp;
  };
  return getOTP(secret);
};
/*  ------------------------------------------------------------------------ */
// source: https://stackoverflow.com/a/18639975/1067003
exports.totp = totp;
function crc32(str, signed = false) {
  const crcTable = '00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D';
  if (crc32.table === undefined) {
    crc32.table = crcTable.split(' ').map(s => parseInt(s, 16));
  }
  let crc = -1;
  for (let i = 0; i < str.length; i++) {
    // eslint-disable-next-line
    crc = crc >>> 8 ^ crc32.table[(crc ^ str.charCodeAt(i)) & 0xFF];
  }
  // eslint-disable-next-line
  const unsigned = (crc ^ -1) >>> 0;
  if (signed && unsigned >= 0x80000000) {
    return unsigned - 0x100000000;
  } else {
    return unsigned;
  }
}
/*  ------------------------------------------------------------------------ */

/*  ------------------------------------------------------------------------ */

},{"../../static_dependencies/BN/bn.cjs":49,"../../static_dependencies/crypto-js/crypto-js.cjs":50,"../../static_dependencies/elliptic/lib/elliptic.cjs":51,"../../static_dependencies/node-rsa/NodeRSA.cjs":67,"../errors.js":5,"./encode.js":8,"./string.js":13}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.binaryToBase64 = exports.binaryToBase58 = exports.binaryToBase16 = exports.binaryConcatArray = exports.binaryConcat = exports.base64ToString = exports.base64ToBinary = exports.base58ToBinary = exports.base16ToBinary = void 0;
exports.byteArrayToWordArray = byteArrayToWordArray;
exports.urlencodeWithArrayRepeat = exports.urlencodeNested = exports.urlencodeBase64 = exports.urlencode = exports.stringToBinary = exports.stringToBase64 = exports.rawencode = exports.numberToLE = exports.numberToBE = exports.json = exports.isJsonEncodedObject = exports.encode = exports.decode = void 0;
var _cryptoJs = _interopRequireDefault(require("../../static_dependencies/crypto-js/crypto-js.cjs"));
var _index = _interopRequireDefault(require("../../static_dependencies/qs/index.cjs"));
var _bn = _interopRequireDefault(require("../../static_dependencies/BN/bn.cjs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint-disable */
/*  ------------------------------------------------------------------------ */

/*  ------------------------------------------------------------------------ */
// global vars for base58 encoding
const base58Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
let base58Decoder = null;
let base58Encoder = null;
/*  ------------------------------------------------------------------------ */
// TEALSTREET browser safe to yarn link
const urlencodesafe = object => {
  try {
    return _index.default.stringify(object);
  } catch (e) {
    return new URLSearchParams(object).toString();
  }
};
const urlencodeWithArrayRepeatSafe = object => {
  try {
    return _index.default.stringify(object, {
      arrayFormat: 'repeat'
    });
  } catch (e) {
    return new URLSearchParams(object).toString();
  }
};
const json = (data, params = undefined) => JSON.stringify(data),
  isJsonEncodedObject = object => typeof object === 'string' && object.length >= 2 && (object[0] === '{' || object[0] === '['),
  stringToBinary = string => _cryptoJs.default.enc.Latin1.parse(string),
  stringToBase64 = string => _cryptoJs.default.enc.Latin1.parse(string).toString(_cryptoJs.default.enc.Base64),
  base64ToBinary = string => _cryptoJs.default.enc.Base64.parse(string),
  base64ToString = string => _cryptoJs.default.enc.Base64.parse(string).toString(_cryptoJs.default.enc.Utf8),
  binaryToBase64 = binary => binary.toString(_cryptoJs.default.enc.Base64),
  base16ToBinary = string => _cryptoJs.default.enc.Hex.parse(string),
  binaryToBase16 = binary => binary.toString(_cryptoJs.default.enc.Hex),
  binaryConcat = (...args) => args.reduce((a, b) => a.concat(b)),
  binaryConcatArray = arr => arr.reduce((a, b) => a.concat(b)),
  urlencode = object => urlencodesafe(object),
  urlencodeNested = object => _index.default.stringify(object) // implemented only in python
  ,
  urlencodeWithArrayRepeat = urlencodeWithArrayRepeatSafe,
  rawencode = object => _index.default.stringify(object, {
    encode: false
  }),
  encode = x => x,
  decode = x => x
  // Url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores
  ,
  urlencodeBase64 = base64string => base64string.replace(/[=]+$/, '').replace(/\+/g, '-').replace(/\//g, '_'),
  numberToLE = (n, padding) => {
    const hexArray = new _bn.default(n).toArray('le', padding);
    return byteArrayToWordArray(hexArray);
  },
  numberToBE = (n, padding = undefined) => {
    const hexArray = new _bn.default(n).toArray('be', padding);
    return byteArrayToWordArray(hexArray);
  },
  base58ToBinary = string => {
    if (!base58Decoder) {
      base58Decoder = {};
      base58Encoder = {};
      for (let i = 0; i < 58; i++) {
        const c = base58Alphabet[i];
        const bigNum = new _bn.default(i);
        base58Decoder[c] = bigNum;
        base58Encoder[bigNum] = c;
      }
    }
    let result = new _bn.default(0);
    const base = new _bn.default(58);
    for (let i = 0; i < string.length; i++) {
      const character = string[i];
      result.imul(base);
      result.iadd(base58Decoder[character]);
    }
    return byteArrayToWordArray(result.toArray('be'));
  },
  binaryToBase58 = wordArray => {
    if (!base58Encoder) {
      base58Decoder = {};
      base58Encoder = {};
      for (let i = 0; i < 58; i++) {
        const c = base58Alphabet[i];
        const bigNum = new _bn.default(i);
        base58Decoder[c] = bigNum;
        base58Encoder[bigNum] = c;
      }
    }
    const base = new _bn.default(58);
    // hex is only compatible encoding between cryptojs and BN
    const hexString = wordArray.toString(_cryptoJs.default.enc.Hex);
    let result = new _bn.default(hexString, 16);
    let string = [];
    while (!result.isZero()) {
      const {
        div,
        mod
      } = result.divmod(base);
      result = div;
      string.push(base58Encoder[mod]);
    }
    return string.reverse().join('');
  };
exports.binaryToBase58 = binaryToBase58;
exports.base58ToBinary = base58ToBinary;
exports.numberToBE = numberToBE;
exports.numberToLE = numberToLE;
exports.urlencodeBase64 = urlencodeBase64;
exports.decode = decode;
exports.encode = encode;
exports.rawencode = rawencode;
exports.urlencodeWithArrayRepeat = urlencodeWithArrayRepeat;
exports.urlencodeNested = urlencodeNested;
exports.urlencode = urlencode;
exports.binaryConcatArray = binaryConcatArray;
exports.binaryConcat = binaryConcat;
exports.binaryToBase16 = binaryToBase16;
exports.base16ToBinary = base16ToBinary;
exports.binaryToBase64 = binaryToBase64;
exports.base64ToString = base64ToString;
exports.base64ToBinary = base64ToBinary;
exports.stringToBase64 = stringToBase64;
exports.stringToBinary = stringToBinary;
exports.isJsonEncodedObject = isJsonEncodedObject;
exports.json = json;
function byteArrayToWordArray(ba) {
  const wa = [];
  for (let i = 0; i < ba.length; i++) {
    wa[i / 4 | 0] |= ba[i] << 24 - 8 * i;
  }
  return _cryptoJs.default.lib.WordArray.create(wa, ba.length);
}

/*  ------------------------------------------------------------------------ */

},{"../../static_dependencies/BN/bn.cjs":49,"../../static_dependencies/crypto-js/crypto-js.cjs":50,"../../static_dependencies/qs/index.cjs":83}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.values = exports.unique = exports.toArray = exports.sum = exports.sortBy2 = exports.sortBy = exports.pluck = exports.ordered = exports.omit = exports.merge = exports.keysort = exports.keys = exports.isEmpty = exports.indexBy = exports.index = exports.inArray = exports.groupBy = exports.flatten = exports.filterBy = exports.extend = exports.deepExtend = exports.clone = exports.arrayConcat = void 0;
var _type = require("./type.js");
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
const keys = Object.keys; // eslint-disable-line padding-line-between-statements
exports.keys = keys;
const values = x => !(0, _type.isArray)(x) ? Object.values(x) : x; // don't copy arrays if they're already arrays
exports.values = values;
const index = x => new Set(values(x));
exports.index = index;
const extend = (...args) => Object.assign({}, ...args); // NB: side-effect free
exports.extend = extend;
const clone = x => (0, _type.isArray)(x) ? Array.from(x) : extend(x); // clone arrays or objects
// ----------------------------------------------------------------------------
exports.clone = clone;
const ordered = x => x; // a stub to keep assoc keys in order (in JS it does nothing, it's mostly for Python)
exports.ordered = ordered;
const unique = x => Array.from(index(x));
exports.unique = unique;
const arrayConcat = (a, b) => a.concat(b);
// ------------------------------------------------------------------------
exports.arrayConcat = arrayConcat;
const inArray = (needle, haystack) => haystack.includes(needle);
exports.inArray = inArray;
const toArray = object => Object.values(object);
exports.toArray = toArray;
const isEmpty = object => {
  if (!object) {
    return true;
  }
  return (Array.isArray(object) ? object : Object.keys(object)).length < 1;
};
exports.isEmpty = isEmpty;
const keysort = (x, out = {}) => {
  for (const k of keys(x).sort()) {
    out[k] = x[k];
  }
  return out;
};
/*
    Accepts a map/array of objects and a key name to be used as an index:
    array = [
        { someKey: 'value1', anotherKey: 'anotherValue1' },
        { someKey: 'value2', anotherKey: 'anotherValue2' },
        { someKey: 'value3', anotherKey: 'anotherValue3' },
    ]
    key = 'someKey'
    Returns a map:
    {
        value1: { someKey: 'value1', anotherKey: 'anotherValue1' },
        value2: { someKey: 'value2', anotherKey: 'anotherValue2' },
        value3: { someKey: 'value3', anotherKey: 'anotherValue3' },
    }
*/
exports.keysort = keysort;
const groupBy = (x, k, out = {}) => {
  for (const v of values(x)) {
    if (k in v) {
      const p = v[k];
      out[p] = out[p] || [];
      out[p].push(v);
    }
  }
  return out;
};
exports.groupBy = groupBy;
const indexBy = (x, k, out = {}) => {
  for (const v of values(x)) {
    if (k in v) {
      out[v[k]] = v;
    }
  }
  return out;
};
exports.indexBy = indexBy;
const filterBy = (x, k, value = undefined, out = []) => {
  for (const v of values(x)) {
    if (v[k] === value) {
      out.push(v);
    }
  }
  return out;
};
exports.filterBy = filterBy;
const sortBy = (array, key, descending = false, direction = descending ? -1 : 1) => array.sort((a, b) => {
  if (a[key] < b[key]) {
    return -direction;
  } else if (a[key] > b[key]) {
    return direction;
  } else {
    return 0;
  }
});
exports.sortBy = sortBy;
const sortBy2 = (array, key1, key2, descending = false, direction = descending ? -1 : 1) => array.sort((a, b) => {
  if (a[key1] < b[key1]) {
    return -direction;
  } else if (a[key1] > b[key1]) {
    return direction;
  } else {
    if (a[key2] < b[key2]) {
      return -direction;
    } else if (a[key2] > b[key2]) {
      return direction;
    } else {
      return 0;
    }
  }
});
exports.sortBy2 = sortBy2;
const flatten = function flatten(x, out = []) {
  for (const v of x) {
    if ((0, _type.isArray)(v)) {
      flatten(v, out);
    } else {
      out.push(v);
    }
  }
  return out;
};
exports.flatten = flatten;
const pluck = (x, k) => values(x).filter(v => k in v).map(v => v[k]);
exports.pluck = pluck;
const omit = (x, ...args) => {
  if (!Array.isArray(x)) {
    const out = clone(x);
    for (const k of args) {
      if ((0, _type.isArray)(k)) {
        // omit (x, ['a', 'b'])
        for (const kk of k) {
          delete out[kk];
        }
      } else {
        delete out[k]; // omit (x, 'a', 'b')
      }
    }

    return out;
  }
  return x;
};
exports.omit = omit;
const sum = (...xs) => {
  const ns = xs.filter(_type.isNumber); // leave only numbers
  return ns.length > 0 ? ns.reduce((a, b) => a + b, 0) : undefined;
};
exports.sum = sum;
const deepExtend = function deepExtend(...xs) {
  let out = undefined;
  for (const x of xs) {
    if ((0, _type.isDictionary)(x)) {
      if (!(0, _type.isDictionary)(out)) {
        out = {};
      }
      for (const k in x) {
        out[k] = deepExtend(out[k], x[k]);
      }
    } else {
      out = x;
    }
  }
  return out;
};
exports.deepExtend = deepExtend;
const merge = (target, ...args) => {
  // doesn't overwrite defined keys with undefined
  const overwrite = {};
  const merged = Object.assign({}, ...args);
  const keys = Object.keys(merged);
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    if (target[key] === undefined) {
      overwrite[key] = merged[key];
    }
  }
  // eslint-disable-next-line
  return Object.assign({}, target, overwrite);
};
exports.merge = merge;

},{"./type.js":16}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aggregate = aggregate;
exports.roundTimeframe = exports.parseTimeframe = exports.implodeParams = exports.extractParams = exports.buildOHLCVC = void 0;
exports.vwap = vwap;
var _number = require("./number.js");
var _errors = require("../errors.js");
//-------------------------------------------------------------------------
// converts timeframe to seconds
const parseTimeframe = timeframe => {
  const amount = timeframe.slice(0, -1);
  const unit = timeframe.slice(-1);
  let scale = undefined;
  if (unit === 'y') {
    scale = 60 * 60 * 24 * 365;
  } else if (unit === 'M') {
    scale = 60 * 60 * 24 * 30;
  } else if (unit === 'w') {
    scale = 60 * 60 * 24 * 7;
  } else if (unit === 'd') {
    scale = 60 * 60 * 24;
  } else if (unit === 'h') {
    scale = 60 * 60;
  } else if (unit === 'm') {
    scale = 60;
  } else if (unit === 's') {
    scale = 1;
  } else {
    throw new _errors.NotSupported('timeframe unit ' + unit + ' is not supported');
  }
  return amount * scale;
};
exports.parseTimeframe = parseTimeframe;
const roundTimeframe = (timeframe, timestamp, direction = _number.ROUND_DOWN) => {
  const ms = parseTimeframe(timeframe) * 1000;
  // Get offset based on timeframe in milliseconds
  const offset = timestamp % ms;
  return timestamp - offset + (direction === _number.ROUND_UP ? ms : 0);
};
// given a sorted arrays of trades (recent last) and a timeframe builds an array of OHLCV candles
exports.roundTimeframe = roundTimeframe;
const buildOHLCVC = (trades, timeframe = '1m', since = -Infinity, limit = Infinity) => {
  const ms = parseTimeframe(timeframe) * 1000;
  const ohlcvs = [];
  const [timestamp, /* open */, high, low, close, volume, count] = [0, 1, 2, 3, 4, 5, 6];
  const oldest = Math.min(trades.length - 1, limit);
  for (let i = 0; i <= oldest; i++) {
    const trade = trades[i];
    if (trade.timestamp < since) {
      continue;
    }
    const openingTime = Math.floor(trade.timestamp / ms) * ms; // shift to the edge of m/h/d (but not M)
    const candle = ohlcvs.length - 1;
    if (candle === -1 || openingTime >= ohlcvs[candle][timestamp] + ms) {
      // moved to a new timeframe -> create a new candle from opening trade
      ohlcvs.push([openingTime, trade.price, trade.price, trade.price, trade.price, trade.amount, 1 // count
      ]);
    } else {
      // still processing the same timeframe -> update opening trade
      ohlcvs[candle][high] = Math.max(ohlcvs[candle][high], trade.price);
      ohlcvs[candle][low] = Math.min(ohlcvs[candle][low], trade.price);
      ohlcvs[candle][close] = trade.price;
      ohlcvs[candle][volume] += trade.amount;
      ohlcvs[candle][count]++;
    } // if
  } // for
  return ohlcvs;
};
exports.buildOHLCVC = buildOHLCVC;
const extractParams = string => {
  const re = /{([\w-]+)}/g;
  const matches = [];
  let match = re.exec(string);
  while (match) {
    matches.push(match[1]);
    match = re.exec(string);
  }
  return matches;
};
exports.extractParams = extractParams;
const implodeParams = (string, params) => {
  if (!Array.isArray(params)) {
    const keys = Object.keys(params);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (!Array.isArray(params[key])) {
        string = string.replace('{' + key + '}', params[key]);
      }
    }
  }
  return string;
};
exports.implodeParams = implodeParams;
function vwap(baseVolume, quoteVolume) {
  return baseVolume !== undefined && quoteVolume !== undefined && baseVolume > 0 ? quoteVolume / baseVolume : undefined;
}
/*  ------------------------------------------------------------------------ */
function aggregate(bidasks) {
  const result = {};
  for (let i = 0; i < bidasks.length; i++) {
    const [price, volume] = bidasks[i];
    if (volume > 0) {
      result[price] = (result[price] || 0) + volume;
    }
  }
  return Object.keys(result).map(price => [parseFloat(price), parseFloat(result[price])]);
}

/*  ------------------------------------------------------------------------ */

},{"../errors.js":5,"./number.js":11}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decimalToPrecision = exports.TRUNCATE = exports.TICK_SIZE = exports.SIGNIFICANT_DIGITS = exports.ROUND_UP = exports.ROUND_DOWN = exports.ROUND = exports.PAD_WITH_ZERO = exports.NO_PADDING = exports.DECIMAL_PLACES = void 0;
exports.numberToString = numberToString;
exports.omitZero = omitZero;
exports.precisionConstants = void 0;
exports.precisionFromString = precisionFromString;
exports.truncate_to_string = exports.truncate = void 0;
// ------------------------------------------------------------------------
//
//  NB: initially, I used objects for options passing:
//
//          decimalToPrecision ('123.456', { digits: 2, round: true, afterPoint: true })
//
//  ...but it turns out it's hard to port that across different languages and it is also
//     probably has a performance penalty -- while it's a performance critical code! So
//     I switched to using named constants instead, as it is actually more readable and
//     succinct, and surely doesn't come with any inherent performance downside:
//
//          decimalToPrecision ('123.456', ROUND, 2, DECIMAL_PLACES)
const ROUND = 0; // rounding mode
exports.ROUND = ROUND;
const TRUNCATE = 1;
exports.TRUNCATE = TRUNCATE;
const ROUND_UP = 2;
exports.ROUND_UP = ROUND_UP;
const ROUND_DOWN = 3;
exports.ROUND_DOWN = ROUND_DOWN;
const DECIMAL_PLACES = 0; // digits counting mode
exports.DECIMAL_PLACES = DECIMAL_PLACES;
const SIGNIFICANT_DIGITS = 1;
exports.SIGNIFICANT_DIGITS = SIGNIFICANT_DIGITS;
const TICK_SIZE = 2;
exports.TICK_SIZE = TICK_SIZE;
const NO_PADDING = 0; // zero-padding mode
exports.NO_PADDING = NO_PADDING;
const PAD_WITH_ZERO = 1;
exports.PAD_WITH_ZERO = PAD_WITH_ZERO;
const precisionConstants = {
  ROUND,
  TRUNCATE,
  ROUND_UP,
  ROUND_DOWN,
  DECIMAL_PLACES,
  SIGNIFICANT_DIGITS,
  TICK_SIZE,
  NO_PADDING,
  PAD_WITH_ZERO
};
/*  ------------------------------------------------------------------------ */
// See https://stackoverflow.com/questions/1685680/how-to-avoid-scientific-notation-for-large-numbers-in-javascript for discussion
exports.precisionConstants = precisionConstants;
function numberToString(x) {
  if (x === undefined) return undefined;
  if (typeof x !== 'number') return x.toString();
  const s = x.toString();
  if (Math.abs(x) < 1.0) {
    const n_e = s.split('e-');
    const n = n_e[0].replace('.', '');
    const e = parseInt(n_e[1]);
    const neg = s[0] === '-';
    if (e) {
      x = (neg ? '-' : '') + '0.' + new Array(e).join('0') + n.substring(neg);
      return x;
    }
  } else {
    const parts = s.split('e');
    if (parts[1]) {
      let e = parseInt(parts[1]);
      const m = parts[0].split('.');
      let part = '';
      if (m[1]) {
        e -= m[1].length;
        part = m[1];
      }
      return m[0] + part + new Array(e + 1).join('0');
    }
  }
  return s;
}
//-----------------------------------------------------------------------------
// expects non-scientific notation
const truncate_regExpCache = [];
const truncate_to_string = (num, precision = 0) => {
  num = numberToString(num);
  if (precision > 0) {
    const re = truncate_regExpCache[precision] || (truncate_regExpCache[precision] = new RegExp('([-]*\\d+\\.\\d{' + precision + '})(\\d)'));
    const [, result] = num.toString().match(re) || [null, num];
    return result.toString();
  }
  return parseInt(num).toString();
};
exports.truncate_to_string = truncate_to_string;
const truncate = (num, precision = 0) => parseFloat(truncate_to_string(num, precision));
exports.truncate = truncate;
function precisionFromString(str) {
  // support string formats like '1e-4'
  if (str.indexOf('e') > -1) {
    const numStr = str.replace(/\de/, '');
    return parseInt(numStr) * -1;
  }
  // support integer formats (without dot) like '1', '10' etc [Note: bug in decimalToPrecision, so this should not be used atm]
  // if (str.indexOf ('.') === -1) {
  //     return str.length * -1
  // }
  // default strings like '0.0001'
  const split = str.replace(/0+$/g, '').split('.');
  return split.length > 1 ? split[1].length : 0;
}
/*  ------------------------------------------------------------------------ */
const decimalToPrecision = (x, roundingMode, numPrecisionDigits, countingMode = DECIMAL_PLACES, paddingMode = NO_PADDING) => {
  if (countingMode === TICK_SIZE) {
    if (typeof numPrecisionDigits === 'string') {
      numPrecisionDigits = parseFloat(numPrecisionDigits);
    }
    if (numPrecisionDigits <= 0) {
      throw new Error('TICK_SIZE cant be used with negative or zero numPrecisionDigits');
    }
  }
  if (numPrecisionDigits < 0) {
    const toNearest = Math.pow(10, -numPrecisionDigits);
    if (roundingMode === ROUND) {
      return (toNearest * decimalToPrecision(x / toNearest, roundingMode, 0, countingMode, paddingMode)).toString();
    }
    if (roundingMode === TRUNCATE) {
      return (x - x % toNearest).toString();
    }
  }
  /*  handle tick size */
  if (countingMode === TICK_SIZE) {
    const precisionDigitsString = decimalToPrecision(numPrecisionDigits, ROUND, 22, DECIMAL_PLACES, NO_PADDING);
    const newNumPrecisionDigits = precisionFromString(precisionDigitsString);
    let missing = x % numPrecisionDigits;
    // See: https://github.com/ccxt/ccxt/pull/6486
    missing = Number(decimalToPrecision(missing, ROUND, 8, DECIMAL_PLACES, NO_PADDING));
    const fpError = decimalToPrecision(missing / numPrecisionDigits, ROUND, Math.max(newNumPrecisionDigits, 8), DECIMAL_PLACES, NO_PADDING);
    if (precisionFromString(fpError) !== 0) {
      if (roundingMode === ROUND) {
        if (x > 0) {
          if (missing >= numPrecisionDigits / 2) {
            x = x - missing + numPrecisionDigits;
          } else {
            x = x - missing;
          }
        } else {
          if (missing >= numPrecisionDigits / 2) {
            x = Number(x) - missing;
          } else {
            x = Number(x) - missing - numPrecisionDigits;
          }
        }
      } else if (roundingMode === TRUNCATE) {
        x = x - missing;
      }
    }
    return decimalToPrecision(x, ROUND, newNumPrecisionDigits, DECIMAL_PLACES, paddingMode);
  }
  /*  Convert to a string (if needed), skip leading minus sign (if any)   */
  const str = numberToString(x);
  const isNegative = str[0] === '-';
  const strStart = isNegative ? 1 : 0;
  const strEnd = str.length;
  /*  Find the dot position in the source buffer   */
  for (var strDot = 0; strDot < strEnd; strDot++) {
    if (str[strDot] === '.') break;
  }
  const hasDot = strDot < str.length;
  /*  Char code constants         */
  const MINUS = 45;
  const DOT = 46;
  const ZERO = 48;
  const ONE = ZERO + 1;
  const FIVE = ZERO + 5;
  const NINE = ZERO + 9;
  /*  For -123.4567 the `chars` array will hold 01234567 (leading zero is reserved for rounding cases when 099 → 100)    */
  const chars = new Uint8Array(strEnd - strStart + (hasDot ? 0 : 1));
  chars[0] = ZERO;
  /*  Validate & copy digits, determine certain locations in the resulting buffer  */
  let afterDot = chars.length;
  let digitsStart = -1; // significant digits
  let digitsEnd = -1;
  for (var i = 1, j = strStart; j < strEnd; j++, i++) {
    const c = str.charCodeAt(j);
    if (c === DOT) {
      afterDot = i--;
    } else if (c < ZERO || c > NINE) {
      throw new Error(`${str}: invalid number (contains an illegal character '${str[i - 1]}')`);
    } else {
      chars[i] = c;
      if (c !== ZERO && digitsStart < 0) digitsStart = i;
    }
  }
  if (digitsStart < 0) digitsStart = 1;
  /*  Determine the range to cut  */
  let precisionStart = countingMode === DECIMAL_PLACES ? afterDot // 0.(0)001234567
  : digitsStart; // 0.00(1)234567
  let precisionEnd = precisionStart + numPrecisionDigits;
  /*  Reset the last significant digit index, as it will change during the rounding/truncation.   */
  digitsEnd = -1;
  // Perform rounding/truncation per digit, from digitsEnd to digitsStart, by using the following
  //  algorithm (rounding 999 → 1000, as an example):
  //
  //      step  =          i=3      i=2      i=1      i=0
  //
  //      chars =         0999     0999     0900     1000
  //      memo  =         ---0     --1-     -1--     0---
  let allZeros = true;
  let signNeeded = isNegative;
  for (let i = chars.length - 1, memo = 0; i >= 0; i--) {
    let c = chars[i];
    if (i !== 0) {
      c += memo;
      if (i >= precisionStart + numPrecisionDigits) {
        const ceil = roundingMode === ROUND && c >= FIVE && !(c === FIVE && memo); // prevents rounding of 1.45 to 2
        c = ceil ? NINE + 1 : ZERO;
      }
      if (c > NINE) {
        c = ZERO;
        memo = 1;
      } else memo = 0;
    } else if (memo) c = ONE; // leading extra digit (0900 → 1000)
    chars[i] = c;
    if (c !== ZERO) {
      allZeros = false;
      digitsStart = i;
      digitsEnd = digitsEnd < 0 ? i + 1 : digitsEnd;
    }
  }
  /*  Update the precision range, as `digitsStart` may have changed... & the need for a negative sign if it is only 0    */
  if (countingMode === SIGNIFICANT_DIGITS) {
    precisionStart = digitsStart;
    precisionEnd = precisionStart + numPrecisionDigits;
  }
  if (allZeros) {
    signNeeded = false;
  }
  /*  Determine the input character range     */
  const readStart = digitsStart >= afterDot || allZeros ? afterDot - 1 : digitsStart; // 0.000(1)234  ----> (0).0001234
  const readEnd = digitsEnd < afterDot ? afterDot : digitsEnd; // 12(3)000     ----> 123000( )
  /*  Compute various sub-ranges       */
  const nSign = signNeeded ? 1 : 0; // (-)123.456
  const nBeforeDot = nSign + (afterDot - readStart); // (-123).456
  const nAfterDot = Math.max(readEnd - afterDot, 0); // -123.(456)
  const actualLength = readEnd - readStart; // -(123.456)
  const desiredLength = paddingMode === NO_PADDING ? actualLength // -(123.456)
  : precisionEnd - readStart; // -(123.456    )
  const pad = Math.max(desiredLength - actualLength, 0); //  -123.456(    )
  const padStart = nBeforeDot + 1 + nAfterDot; //  -123.456( )
  const padEnd = padStart + pad; //  -123.456     ( )
  const isInteger = nAfterDot + pad === 0; //  -123
  /*  Fill the output buffer with characters    */
  const out = new Uint8Array(nBeforeDot + (isInteger ? 0 : 1) + nAfterDot + pad);
  // ------------------------------------------------------------------------------------------ // ---------------------
  if (signNeeded) out[0] = MINUS; // -     minus sign
  for (i = nSign, j = readStart; i < nBeforeDot; i++, j++) out[i] = chars[j]; // 123   before dot
  if (!isInteger) out[nBeforeDot] = DOT; // .     dot
  for (i = nBeforeDot + 1, j = afterDot; i < padStart; i++, j++) out[i] = chars[j]; // 456   after dot
  for (i = padStart; i < padEnd; i++) out[i] = ZERO; // 000   padding
  /*  Build a string from the output buffer     */
  return String.fromCharCode(...out);
};
exports.decimalToPrecision = decimalToPrecision;
function omitZero(stringNumber) {
  if (stringNumber === undefined || stringNumber === '') {
    return undefined;
  }
  if (parseFloat(stringNumber) === 0) {
    return undefined;
  }
  return stringNumber;
}
/*  ------------------------------------------------------------------------ */

/*  ------------------------------------------------------------------------ */

},{}],12:[function(require,module,exports){
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWindows = exports.isWebWorker = exports.isNode = exports.isElectron = exports.isBrowser = void 0;
// @ts-nocheck
// ----------------------------------------------------------------------------
// There's been a lot of messing with this code...
// The problem is to satisfy the following requirements:
// - properly detect isNode == true on server side and isNode == false in the browser (on client side)
// - make sure create-react-app, react-starter-kit and other react frameworks work
// - make sure it does not break the browserified version (when linked into a html from a cdn)
// - make sure it does not break the webpacking and babel-transpiled scripts
// - make sure it works in Electron
// - make sure it works with Angular.js
// - make sure it does not break other possible usage scenarios
const isBrowser = typeof window !== 'undefined';
exports.isBrowser = isBrowser;
const isElectron = typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined';
exports.isElectron = isElectron;
const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
exports.isWebWorker = isWebWorker;
const isWindows = typeof process !== 'undefined' && process.platform === "win32";
exports.isWindows = isWindows;
const isNode = !(isBrowser || isWebWorker);
// ----------------------------------------------------------------------------
exports.isNode = isNode;

}).call(this)}).call(this,require('_process'))
},{"_process":129}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uuid22 = exports.uuid16 = exports.uuid = exports.unCamelCase = exports.strip = exports.capitalize = void 0;
// ----------------------------------------------------------------------------
// unCamelCase has to work with the following edge cases
//
//     parseOHLCVs               > parse_ohlcvs
//     safeString2               > safe_string_2
//     safeStringN               > safe_string_n
//     convertOHLCVToTradingView > convert_ohlcv_to_trading_view
//     fetchL2OrderBook          > fetch_l2_order_book
//     stringToBase64            > string_to_base64
//     base64ToString            > base64_to_string
//     parseHTTPResponse         > parse_http_response
//     hasFetchOHLCV             > has_fetch_ohlcv
//
// @ts-nocheck
const unCamelCase = s => {
  return s.match(/[A-Z]/) ? s.replace(/[a-z0-9][A-Z]/g, x => x[0] + '_' + x[1]).replace(/[A-Z0-9][A-Z0-9][a-z][^$]/g, x => x[0] + '_' + x[1] + x[2] + x[3]).replace(/[a-z][0-9]$/g, x => x[0] + '_' + x[1]).toLowerCase() : s;
};
exports.unCamelCase = unCamelCase;
const capitalize = s => {
  return s.length ? s.charAt(0).toUpperCase() + s.slice(1) : s;
};
exports.capitalize = capitalize;
const strip = s => s.replace(/^\s+|\s+$/g, '');
// ----------------------------------------------------------------------------
exports.strip = strip;
const uuid = a => {
  return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);
};
exports.uuid = uuid;
const uuid16 = a => {
  return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e5] + 1e2 + 4e2 + 8e3).replace(/[018]/g, uuid16);
};
exports.uuid16 = uuid16;
const uuid22 = a => {
  return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + 1e3 + 4e3 + 8e5).replace(/[018]/g, uuid22);
};
exports.uuid22 = uuid22;

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttle = throttle;
var _time = require("./time.js");
//@ts-nocheck
/*  ------------------------------------------------------------------------ */

/*  ------------------------------------------------------------------------ */
class Throttle {
  constructor(config) {
    this.config = {
      'refillRate': 1.0,
      'delay': 0.001,
      'capacity': 1.0,
      'maxCapacity': 2000,
      'tokens': 0,
      'cost': 1.0
    };
    Object.assign(this.config, config);
    this.queue = [];
    this.running = false;
  }
  async loop() {
    let lastTimestamp = (0, _time.now)();
    while (this.running) {
      const {
        resolver,
        cost
      } = this.queue[0];
      if (this.config['tokens'] >= 0) {
        this.config['tokens'] -= cost;
        resolver();
        this.queue.shift();
        // contextswitch
        await Promise.resolve();
        if (this.queue.length === 0) {
          this.running = false;
        }
      } else {
        await (0, _time.sleep)(this.config['delay'] * 1000);
        const current = (0, _time.now)();
        const elapsed = current - lastTimestamp;
        lastTimestamp = current;
        const tokens = this.config['tokens'] + this.config['refillRate'] * elapsed;
        this.config['tokens'] = Math.min(tokens, this.config['capacity']);
      }
    }
  }
}
function throttle(config) {
  function inner(cost = undefined, shouldThrottle = true) {
    let resolver;
    const promise = new Promise((resolve, reject) => {
      resolver = resolve;
    });
    if (this.queue.length > this.config['maxCapacity']) {
      throw new Error('throttle queue is over maxCapacity (' + this.config['maxCapacity'].toString() + '), see https://github.com/ccxt/ccxt/issues/11645#issuecomment-1195695526');
    }
    cost = cost === undefined ? this.config['cost'] : cost;
    if (shouldThrottle) {
      this.queue.push({
        resolver,
        cost
      });
    } else {
      this.queue.unshift({
        resolver,
        cost
      });
    }
    if (!this.running) {
      this.running = true;
      this.loop();
    }
    return promise;
  }
  const instance = new Throttle(config);
  const bound = inner.bind(instance);
  // useful for inspecting the tokenBucket
  bound.config = instance.config;
  bound.queue = instance.queue;
  return bound;
}

// ----------------------------------------

},{"./time.js":15}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.yyyymmdd = exports.yymmdd = exports.ymdhms = exports.ymd = exports.uuidv1 = exports.timeout = exports.sleep = exports.setTimeout_safe = exports.seconds = exports.rfc2616 = exports.parseDate = exports.parse8601 = exports.now = exports.milliseconds = exports.microseconds = exports.mdy = exports.iso8601 = exports.TimedOut = void 0;
// @ts-nocheck
const now = Date.now; // TODO: figure out how to utilize performance.now () properly – it's not as easy as it does not return a unix timestamp...
exports.now = now;
const microseconds = () => now() * 1000; // TODO: utilize performance.now for that purpose
exports.microseconds = microseconds;
const milliseconds = now;
exports.milliseconds = milliseconds;
const seconds = () => Math.floor(now() / 1000);
exports.seconds = seconds;
const uuidv1 = () => {
  const biasSeconds = 12219292800; // seconds from 15th Oct 1572 to Jan 1st 1970
  const bias = biasSeconds * 10000000; // in hundreds of nanoseconds
  const time = microseconds() * 10 + bias;
  const timeHex = time.toString(16);
  const arranged = timeHex.slice(7, 15) + timeHex.slice(3, 7) + '1' + timeHex.slice(0, 3);
  // these should be random, but we're not making more than 10 requests per microsecond so who cares
  const clockId = '9696'; // a 14 bit number
  const macAddress = 'ff'.repeat(6);
  return arranged + clockId + macAddress;
};
exports.uuidv1 = uuidv1;
const setTimeout_original = setTimeout;
const setTimeout_safe = (done, ms, setTimeout = setTimeout_original /* overrideable for mocking purposes */, targetTime = now() + ms) => {
  // avoid MAX_INT issue https://github.com/ccxt/ccxt/issues/10761
  if (ms >= 2147483647) {
    throw new Error('setTimeout() function was called with unrealistic value of ' + ms.toString());
  }
  // The built-in setTimeout function can fire its callback earlier than specified, so we
  // need to ensure that it does not happen: sleep recursively until `targetTime` is reached...
  let clearInnerTimeout = () => {};
  let active = true;
  const id = setTimeout(() => {
    active = true;
    const rest = targetTime - now();
    if (rest > 0) {
      clearInnerTimeout = setTimeout_safe(done, rest, setTimeout, targetTime); // try sleep more
    } else {
      done();
    }
  }, ms);
  return function clear() {
    if (active) {
      active = false; // dunno if IDs are unique on various platforms, so it's better to rely on this flag to exclude the possible cancellation of the wrong timer (if called after completion)
      clearTimeout(id);
    }
    clearInnerTimeout();
  };
};
exports.setTimeout_safe = setTimeout_safe;
class TimedOut extends Error {
  constructor() {
    const message = 'timed out';
    super(message);
    this.constructor = TimedOut;
    // // @ts-expect-error
    this.__proto__ = TimedOut.prototype;
    this.message = message;
  }
}
exports.TimedOut = TimedOut;
const iso8601 = timestamp => {
  let _timestampNumber = undefined;
  if (typeof timestamp === 'number') {
    _timestampNumber = Math.floor(timestamp);
  } else {
    _timestampNumber = parseInt(timestamp, 10);
  }
  // undefined, null and lots of nasty non-numeric values yield NaN
  if (Number.isNaN(_timestampNumber) || _timestampNumber < 0) {
    return undefined;
  }
  // last line of defence
  try {
    return new Date(_timestampNumber).toISOString();
  } catch (e) {
    return undefined;
  }
};
exports.iso8601 = iso8601;
const parse8601 = x => {
  if (typeof x !== 'string' || !x) {
    return undefined;
  }
  if (x.match(/^[0-9]+$/)) {
    // a valid number in a string, not a date.
    return undefined;
  }
  if (x.indexOf('-') < 0 || x.indexOf(':') < 0) {
    // no date can be without a dash and a colon
    return undefined;
  }
  // last line of defence
  try {
    const candidate = Date.parse(x.indexOf('+') >= 0 || x.slice(-1) === 'Z' ? x : (x + 'Z').replace(/\s(\d\d):/, 'T$1:'));
    if (Number.isNaN(candidate)) {
      return undefined;
    }
    return candidate;
  } catch (e) {
    return undefined;
  }
};
exports.parse8601 = parse8601;
const parseDate = x => {
  if (typeof x !== 'string' || !x) {
    return undefined;
  }
  if (x.indexOf('GMT') >= 0) {
    try {
      return Date.parse(x);
    } catch (e) {
      return undefined;
    }
  }
  return parse8601(x);
};
exports.parseDate = parseDate;
const rfc2616 = (timestamp = undefined) => new Date(timestamp).toUTCString();
exports.rfc2616 = rfc2616;
const mdy = (timestamp, infix = '-') => {
  infix = infix || '';
  const date = new Date(timestamp);
  const Y = date.getUTCFullYear().toString();
  let m = date.getUTCMonth() + 1;
  let d = date.getUTCDate();
  m = m < 10 ? '0' + m : m.toString();
  d = d < 10 ? '0' + d : d.toString();
  return m + infix + d + infix + Y;
};
exports.mdy = mdy;
const ymd = (timestamp, infix, fullYear = true) => {
  infix = infix || '';
  const date = new Date(timestamp);
  const intYear = date.getUTCFullYear();
  const year = fullYear ? intYear : intYear - 2000;
  const Y = year.toString();
  let m = date.getUTCMonth() + 1;
  let d = date.getUTCDate();
  m = m < 10 ? '0' + m : m.toString();
  d = d < 10 ? '0' + d : d.toString();
  return Y + infix + m + infix + d;
};
exports.ymd = ymd;
const yymmdd = (timestamp, infix = '') => ymd(timestamp, infix, false);
exports.yymmdd = yymmdd;
const yyyymmdd = (timestamp, infix = '-') => ymd(timestamp, infix, true);
exports.yyyymmdd = yyyymmdd;
const ymdhms = (timestamp, infix = ' ') => {
  const date = new Date(timestamp);
  const Y = date.getUTCFullYear();
  let m = date.getUTCMonth() + 1;
  let d = date.getUTCDate();
  let H = date.getUTCHours();
  let M = date.getUTCMinutes();
  let S = date.getUTCSeconds();
  m = m < 10 ? '0' + m : m;
  d = d < 10 ? '0' + d : d;
  H = H < 10 ? '0' + H : H;
  M = M < 10 ? '0' + M : M;
  S = S < 10 ? '0' + S : S;
  return Y + '-' + m + '-' + d + infix + H + ':' + M + ':' + S;
};
exports.ymdhms = ymdhms;
const sleep = ms => new Promise(resolve => setTimeout_safe(resolve, ms));
exports.sleep = sleep;
const timeout = async (ms, promise) => {
  let clear = () => {};
  const expires = new Promise(resolve => clear = setTimeout_safe(resolve, ms));
  try {
    return await Promise.race([promise, expires.then(() => {
      throw new TimedOut();
    })]);
  } finally {
    clear(); // fixes https://github.com/ccxt/ccxt/issues/749
  }
};
exports.timeout = timeout;

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeValueN = exports.safeValue2 = exports.safeValue = exports.safeTimestampN = exports.safeTimestamp2 = exports.safeTimestamp = exports.safeStringUpperN = exports.safeStringUpper2 = exports.safeStringUpper = exports.safeStringN = exports.safeStringLowerN = exports.safeStringLower2 = exports.safeStringLower = exports.safeString2 = exports.safeString = exports.safeIntegerProductN = exports.safeIntegerProduct2 = exports.safeIntegerProduct = exports.safeIntegerN = exports.safeInteger2 = exports.safeInteger = exports.safeFloatN = exports.safeFloat2 = exports.safeFloat = exports.prop = exports.isStringCoercible = exports.isString = exports.isObject = exports.isNumber = exports.isInteger = exports.isDictionary = exports.isArray = exports.hasProps = exports.asInteger = exports.asFloat = void 0;
/*  ------------------------------------------------------------------------ */
const isNumber = Number.isFinite;
exports.isNumber = isNumber;
const isInteger = Number.isInteger;
exports.isInteger = isInteger;
const isArray = Array.isArray;
exports.isArray = isArray;
const hasProps = o => o !== undefined && o !== null;
exports.hasProps = hasProps;
const isString = s => typeof s === 'string';
exports.isString = isString;
const isObject = o => o !== null && typeof o === 'object';
exports.isObject = isObject;
const isRegExp = o => o instanceof RegExp;
const isDictionary = o => isObject(o) && Object.getPrototypeOf(o) === Object.prototype && !isArray(o) && !isRegExp(o);
exports.isDictionary = isDictionary;
const isStringCoercible = x => hasProps(x) && x.toString || isNumber(x);
/*  .............................................   */
exports.isStringCoercible = isStringCoercible;
const prop = (o, k) => isObject(o) && o[k] !== '' && o[k] !== null ? o[k] : undefined;
exports.prop = prop;
const prop2 = (o, k1, k2) => !isObject(o) ? undefined : o[k1] !== undefined && o[k1] !== '' && o[k1] !== null ? o[k1] : o[k2] !== '' && o[k2] !== null ? o[k2] : undefined;
const getValueFromKeysInArray = (object, array) => object[array.find(k => prop(object, k) !== undefined)];
/*  .............................................   */
const asFloat = x => isNumber(x) || isString(x) && x.length !== 0 ? parseFloat(x) : NaN;
exports.asFloat = asFloat;
const asInteger = x => isNumber(x) || isString(x) && x.length !== 0 ? Math.trunc(Number(x)) : NaN;
/*  .............................................   */
exports.asInteger = asInteger;
const safeFloat = (o, k, $default) => {
  const n = asFloat(prop(o, k));
  return isNumber(n) ? n : $default;
};
exports.safeFloat = safeFloat;
const safeInteger = (o, k, $default) => {
  const n = asInteger(prop(o, k));
  return isNumber(n) ? n : $default;
};
exports.safeInteger = safeInteger;
const safeIntegerProduct = (o, k, $factor, $default) => {
  const n = asInteger(prop(o, k));
  return isNumber(n) ? parseInt(n * $factor) : $default;
};
exports.safeIntegerProduct = safeIntegerProduct;
const safeTimestamp = (o, k, $default) => {
  const n = asFloat(prop(o, k));
  return isNumber(n) ? parseInt(n * 1000) : $default;
};
exports.safeTimestamp = safeTimestamp;
const safeValue = (o, k, $default) => {
  const x = prop(o, k);
  return hasProps(x) ? x : $default;
};
exports.safeValue = safeValue;
const safeString = (o, k, $default) => {
  const x = prop(o, k);
  return isStringCoercible(x) ? String(x) : $default;
};
exports.safeString = safeString;
const safeStringLower = (o, k, $default) => {
  const x = prop(o, k);
  return isStringCoercible(x) ? String(x).toLowerCase() : $default;
};
exports.safeStringLower = safeStringLower;
const safeStringUpper = (o, k, $default) => {
  const x = prop(o, k);
  return isStringCoercible(x) ? String(x).toUpperCase() : $default;
};
/*  .............................................   */
exports.safeStringUpper = safeStringUpper;
const safeFloat2 = (o, k1, k2, $default) => {
  const n = asFloat(prop2(o, k1, k2));
  return isNumber(n) ? n : $default;
};
exports.safeFloat2 = safeFloat2;
const safeInteger2 = (o, k1, k2, $default) => {
  const n = asInteger(prop2(o, k1, k2));
  return isNumber(n) ? n : $default;
};
exports.safeInteger2 = safeInteger2;
const safeIntegerProduct2 = (o, k1, k2, $factor, $default) => {
  const n = asInteger(prop2(o, k1, k2));
  return isNumber(n) ? parseInt(n * $factor) : $default;
};
exports.safeIntegerProduct2 = safeIntegerProduct2;
const safeTimestamp2 = (o, k1, k2, $default) => {
  const n = asFloat(prop2(o, k1, k2));
  return isNumber(n) ? parseInt(n * 1000) : $default;
};
exports.safeTimestamp2 = safeTimestamp2;
const safeValue2 = (o, k1, k2, $default) => {
  const x = prop2(o, k1, k2);
  return hasProps(x) ? x : $default;
};
exports.safeValue2 = safeValue2;
const safeString2 = (o, k1, k2, $default) => {
  const x = prop2(o, k1, k2);
  return isStringCoercible(x) ? String(x) : $default;
};
exports.safeString2 = safeString2;
const safeStringLower2 = (o, k1, k2, $default) => {
  const x = prop2(o, k1, k2);
  return isStringCoercible(x) ? String(x).toLowerCase() : $default;
};
exports.safeStringLower2 = safeStringLower2;
const safeStringUpper2 = (o, k1, k2, $default) => {
  const x = prop2(o, k1, k2);
  return isStringCoercible(x) ? String(x).toUpperCase() : $default;
};
exports.safeStringUpper2 = safeStringUpper2;
const safeFloatN = (o, k, $default) => {
  const n = asFloat(getValueFromKeysInArray(o, k));
  return isNumber(n) ? n : $default;
};
exports.safeFloatN = safeFloatN;
const safeIntegerN = (o, k, $default) => {
  const n = asInteger(getValueFromKeysInArray(o, k));
  return isNumber(n) ? n : $default;
};
exports.safeIntegerN = safeIntegerN;
const safeIntegerProductN = (o, k, $factor, $default) => {
  const n = asInteger(getValueFromKeysInArray(o, k));
  return isNumber(n) ? parseInt(n * $factor) : $default;
};
exports.safeIntegerProductN = safeIntegerProductN;
const safeTimestampN = (o, k, $default) => {
  const n = asFloat(getValueFromKeysInArray(o, k));
  return isNumber(n) ? parseInt(n * 1000) : $default;
};
exports.safeTimestampN = safeTimestampN;
const safeValueN = (o, k, $default) => {
  const x = getValueFromKeysInArray(o, k);
  return hasProps(x) ? x : $default;
};
exports.safeValueN = safeValueN;
const safeStringN = (o, k, $default) => {
  const x = getValueFromKeysInArray(o, k);
  return isStringCoercible(x) ? String(x) : $default;
};
exports.safeStringN = safeStringN;
const safeStringLowerN = (o, k, $default) => {
  const x = getValueFromKeysInArray(o, k);
  return isStringCoercible(x) ? String(x).toLowerCase() : $default;
};
exports.safeStringLowerN = safeStringLowerN;
const safeStringUpperN = (o, k, $default) => {
  const x = getValueFromKeysInArray(o, k);
  return isStringCoercible(x) ? String(x).toUpperCase() : $default;
};

/*  ------------------------------------------------------------------------ */
exports.safeStringUpperN = safeStringUpperN;

},{}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayCacheByTimestamp = exports.ArrayCacheBySymbolById = exports.ArrayCache = void 0;
/* eslint-disable max-classes-per-file */
// @ts-nocheck
class BaseCache extends Array {
  constructor(maxSize = undefined) {
    super();
    Object.defineProperty(this, 'maxSize', {
      __proto__: null,
      value: maxSize,
      writable: true
    });
  }
  clear() {
    this.length = 0;
  }
}
class ArrayCache extends BaseCache {
  constructor(maxSize = undefined) {
    super(maxSize);
    Object.defineProperty(this, 'nestedNewUpdatesBySymbol', {
      __proto__: null,
      value: false,
      writable: true
    });
    Object.defineProperty(this, 'newUpdatesBySymbol', {
      __proto__: null,
      value: {},
      writable: true
    });
    Object.defineProperty(this, 'clearUpdatesBySymbol', {
      __proto__: null,
      value: {},
      writable: true
    });
    Object.defineProperty(this, 'allNewUpdates', {
      __proto__: null,
      value: 0,
      writable: true
    });
    Object.defineProperty(this, 'clearAllUpdates', {
      __proto__: null,
      value: false,
      writable: true
    });
  }
  getLimit(symbol, limit) {
    let newUpdatesValue = undefined;
    if (symbol === undefined) {
      newUpdatesValue = this.allNewUpdates;
      this.clearAllUpdates = true;
    } else {
      newUpdatesValue = this.newUpdatesBySymbol[symbol];
      if (newUpdatesValue !== undefined && this.nestedNewUpdatesBySymbol) {
        newUpdatesValue = newUpdatesValue.size;
      }
      this.clearUpdatesBySymbol[symbol] = true;
    }
    if (newUpdatesValue === undefined) {
      return limit;
    } else if (limit !== undefined) {
      return Math.min(newUpdatesValue, limit);
    } else {
      return newUpdatesValue;
    }
  }
  append(item) {
    // maxSize may be 0 when initialized by a .filter() copy-construction
    if (this.maxSize && this.length === this.maxSize) {
      this.shift();
    }
    this.push(item);
    if (this.clearAllUpdates) {
      this.clearAllUpdates = false;
      this.clearUpdatesBySymbol = {};
      this.allNewUpdates = 0;
      this.newUpdatesBySymbol = {};
    }
    if (this.clearUpdatesBySymbol[item.symbol]) {
      this.clearUpdatesBySymbol[item.symbol] = false;
      this.newUpdatesBySymbol[item.symbol] = 0;
    }
    this.newUpdatesBySymbol[item.symbol] = (this.newUpdatesBySymbol[item.symbol] || 0) + 1;
    this.allNewUpdates = (this.allNewUpdates || 0) + 1;
  }
}
exports.ArrayCache = ArrayCache;
class ArrayCacheByTimestamp extends BaseCache {
  constructor(maxSize = undefined) {
    super(maxSize);
    Object.defineProperty(this, 'hashmap', {
      __proto__: null,
      value: {},
      writable: true
    });
    Object.defineProperty(this, 'sizeTracker', {
      __proto__: null,
      value: new Set(),
      writable: true
    });
    Object.defineProperty(this, 'newUpdates', {
      __proto__: null,
      value: 0,
      writable: true
    });
    Object.defineProperty(this, 'clearUpdates', {
      __proto__: null,
      value: false,
      writable: true
    });
  }
  getLimit(symbol, limit) {
    this.clearUpdates = true;
    if (limit === undefined) {
      return this.newUpdates;
    }
    return Math.min(this.newUpdates, limit);
  }
  append(item) {
    if (item[0] in this.hashmap) {
      const reference = this.hashmap[item[0]];
      if (reference !== item) {
        for (const prop in item) {
          reference[prop] = item[prop];
        }
      }
    } else {
      this.hashmap[item[0]] = item;
      if (this.maxSize && this.length === this.maxSize) {
        const deleteReference = this.shift();
        delete this.hashmap[deleteReference[0]];
      }
      this.push(item);
    }
    if (this.clearUpdates) {
      this.clearUpdates = false;
      this.sizeTracker.clear();
    }
    this.sizeTracker.add(item[0]);
    this.newUpdates = this.sizeTracker.size;
  }
}
exports.ArrayCacheByTimestamp = ArrayCacheByTimestamp;
class ArrayCacheBySymbolById extends ArrayCache {
  constructor(maxSize = undefined) {
    super(maxSize);
    this.nestedNewUpdatesBySymbol = true;
    Object.defineProperty(this, 'hashmap', {
      __proto__: null,
      value: {},
      writable: true
    });
  }
  append(item) {
    const byId = this.hashmap[item.symbol] = this.hashmap[item.symbol] || {};
    if (item.id in byId) {
      const reference = byId[item.id];
      if (reference !== item) {
        for (const prop in item) {
          reference[prop] = item[prop];
        }
      }
      item = reference;
      const index = this.findIndex(x => x.id === item.id);
      // move the order to the end of the array
      this.splice(index, 1);
    } else {
      byId[item.id] = item;
    }
    if (this.maxSize && this.length === this.maxSize) {
      const deleteReference = this.shift();
      delete this.hashmap[deleteReference.symbol][deleteReference.id];
    }
    this.push(item);
    if (this.clearAllUpdates) {
      this.clearAllUpdates = false;
      this.clearUpdatesBySymbol = {};
      this.allNewUpdates = 0;
      this.newUpdatesBySymbol = {};
    }
    if (this.newUpdatesBySymbol[item.symbol] === undefined) {
      this.newUpdatesBySymbol[item.symbol] = new Set();
    }
    if (this.clearUpdatesBySymbol[item.symbol]) {
      this.clearUpdatesBySymbol[item.symbol] = false;
      this.newUpdatesBySymbol[item.symbol].clear();
    }
    // in case an exchange updates the same order id twice
    const idSet = this.newUpdatesBySymbol[item.symbol];
    const beforeLength = idSet.size;
    idSet.add(item.id);
    const afterLength = idSet.size;
    this.allNewUpdates = (this.allNewUpdates || 0) + (afterLength - beforeLength);
  }
}
exports.ArrayCacheBySymbolById = ArrayCacheBySymbolById;

},{}],18:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../base/errors.js");
var _functions = require("./functions.js");
var _Future = _interopRequireDefault(require("./Future.js"));
var _functions2 = require("../../base/functions.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Client {
  constructor(url, onMessageCallback, onErrorCallback, onCloseCallback, onConnectedCallback, config = {}) {
    const defaults = {
      url,
      onMessageCallback,
      onErrorCallback,
      onCloseCallback,
      onConnectedCallback,
      verbose: false,
      protocols: undefined,
      options: undefined,
      futures: {},
      subscriptions: {},
      rejections: {},
      connected: undefined,
      error: undefined,
      connectionStarted: undefined,
      connectionEstablished: undefined,
      isConnected: false,
      connectionTimer: undefined,
      connectionTimeout: 10000,
      pingInterval: undefined,
      ping: undefined,
      keepAlive: 30000,
      maxPingPongMisses: 2.0,
      // timeout is not used atm
      // timeout: 30000, // throw if a request is not satisfied in 30 seconds, false to disable
      connection: undefined,
      startedConnecting: false,
      gunzip: false,
      inflate: false
    };
    Object.assign(this, (0, _functions2.deepExtend)(defaults, config));
    // TEALSTREET
    this.keepAlive = Math.min(this.keepAlive, 5000);
    this.maxPingPongMisses = Math.max(this.maxPingPongMisses, 5);
    // connection-related Future
    this.connected = (0, _Future.default)();
  }
  future(messageHash) {
    if (!(messageHash in this.futures)) {
      this.futures[messageHash] = (0, _Future.default)();
    }
    const future = this.futures[messageHash];
    if (messageHash in this.rejections) {
      future.reject(this.rejections[messageHash]);
      delete this.rejections[messageHash];
    }
    return future;
  }
  resolve(result, messageHash) {
    if (this.verbose && messageHash === undefined) {
      this.log(new Date(), "resolve received undefined messageHash");
    }
    if (messageHash in this.futures) {
      const promise = this.futures[messageHash];
      promise.resolve(result);
      delete this.futures[messageHash];
    }
    return result;
  }
  reject(result, messageHash = undefined) {
    if (messageHash) {
      if (messageHash in this.futures) {
        const promise = this.futures[messageHash];
        promise.reject(result);
        delete this.futures[messageHash];
      } else {
        // in the case that a promise was already fulfilled
        // and the client has not yet called watchMethod to create a new future
        // calling client.reject will do nothing
        // this means the rejection will be ignored and the code will continue executing
        // instead we store the rejection for later
        this.rejections[messageHash] = result;
      }
    } else {
      const messageHashes = Object.keys(this.futures);
      for (let i = 0; i < messageHashes.length; i++) {
        this.reject(result, messageHashes[i]);
      }
    }
    return result;
  }
  log(...args) {
    console.log(...args);
    // console.dir (args, { depth: null })
  }

  connect(backoffDelay = 0) {
    throw new _errors.NotSupported("connect() not implemented yet");
  }
  isOpen() {
    throw new _errors.NotSupported("isOpen() not implemented yet");
  }
  reset(error) {
    this.clearConnectionTimeout();
    this.clearPingInterval();
    this.reject(error);
  }
  onConnectionTimeout() {
    if (!this.isOpen()) {
      const error = new _errors.RequestTimeout("Connection to " + this.url + " failed due to a connection timeout");
      this.onError(error);
      this.connection.close(1006);
    }
  }
  setConnectionTimeout() {
    if (this.connectionTimeout) {
      const onConnectionTimeout = this.onConnectionTimeout.bind(this);
      this.connectionTimer = setTimeout(onConnectionTimeout, this.connectionTimeout);
    }
  }
  clearConnectionTimeout() {
    if (this.connectionTimer) {
      this.connectionTimer = clearTimeout(this.connectionTimer);
    }
  }
  setPingInterval() {
    if (this.keepAlive) {
      const onPingInterval = this.onPingInterval.bind(this);
      this.pingInterval = setInterval(onPingInterval, this.keepAlive);
    }
  }
  clearPingInterval() {
    if (this.pingInterval) {
      this.pingInterval = clearInterval(this.pingInterval);
    }
  }
  onPingInterval() {
    if (this.keepAlive && this.isOpen()) {
      const now = (0, _functions2.milliseconds)();
      this.lastPong = this.lastPong || now;
      if (this.lastPong + this.keepAlive * this.maxPingPongMisses < now) {
        console.error('ping-pong keepalive missed on time. Doing nothing in CCXT. Handle elsewhere...');
        // this.onError(
        //   new RequestTimeout(
        //     "Connection to " +
        //       this.url +
        //       " timed out due to a ping-pong keepalive missing on time"
        //   )
        // );
      } else {
        if (this.ping) {
          this.send(this.ping(this));
        } else if (_functions2.isNode) {
          // can't do this inside browser
          // https://stackoverflow.com/questions/10585355/sending-websocket-ping-pong-frame-from-browser
          this.connection.ping();
        } else {
          // browsers handle ping-pong automatically therefore
          // in a browser we update lastPong on every call to
          // this function as if pong just came in to prevent the
          // client from thinking it's a stalled connection
          this.lastPong = now;
        }
      }
    }
  }
  onOpen() {
    if (this.verbose) {
      this.log(new Date(), "onOpen");
    }
    this.connectionEstablished = (0, _functions2.milliseconds)();
    this.isConnected = true;
    this.connected.resolve(this.url);
    // this.connection.terminate () // debugging
    this.clearConnectionTimeout();
    this.setPingInterval();
    this.onConnectedCallback(this);
  }
  // this method is not used at this time, because in JS the ws client will
  // respond to pings coming from the server with pongs automatically
  // however, some devs may want to track connection states in their app
  onPing() {
    if (this.verbose) {
      this.log(new Date(), "onPing");
    }
  }
  onPong() {
    this.lastPong = (0, _functions2.milliseconds)();
    if (this.verbose) {
      this.log(new Date(), "onPong");
    }
  }
  onError(error) {
    if (this.verbose) {
      this.log(new Date(), "onError", error.message);
    }
    if (!(error instanceof _errors.BaseError)) {
      // in case of ErrorEvent from node_modules/ws/lib/event-target.js
      error = new _errors.NetworkError(error.message);
    }
    this.error = error;
    this.reset(this.error);
    this.onErrorCallback(this, this.error);
  }
  onClose(event) {
    if (this.verbose) {
      this.log(new Date(), "onClose", event);
    }
    if (!this.error) {
      // todo: exception types for server-side disconnects
      // TEALSTREET
      if (_errors.NetworkError) {
        this.reset(new _errors.NetworkError("connection closed by remote server, closing code " + String(event.code)));
      } else {
        this.reset(new Error("connection closed by remote server, closing code " + String(event.code)));
      }
    }
    this.onCloseCallback(this, event);
  }
  // this method is not used at this time
  // but may be used to read protocol-level data like cookies, headers, etc
  onUpgrade(message) {
    if (this.verbose) {
      this.log(new Date(), "onUpgrade");
    }
  }
  send(message) {
    if (this.verbose) {
      this.log(new Date(), "sending", message);
    }
    message = typeof message === "string" ? message : JSON.stringify(message);
    this.connection.send(message);
  }
  close() {
    throw new _errors.NotSupported("close() not implemented yet");
  }
  onMessage(message) {
    // if we use onmessage we get MessageEvent objects
    // MessageEvent {isTrusted: true, data: "{"e":"depthUpdate","E":1581358737706,"s":"ETHBTC",…"0.06200000"]],"a":[["0.02261300","0.00000000"]]}", origin: "wss://stream.binance.com:9443", lastEventId: "", source: null, …}
    message = message.data;
    if (message.byteLength !== undefined) {
      if (this.gunzip) {
        message = (0, _functions.gunzip)(message);
      } else if (this.inflate) {
        message = (0, _functions.inflate)(message);
      }
    }
    try {
      if (message instanceof Buffer) {
        message = message.toString();
      }
      if ((0, _functions2.isJsonEncodedObject)(message)) {
        message = JSON.parse(message.replace(/:(\d{15,}),/g, ':"$1",'));
      }
      if (this.verbose) {
        this.log(new Date(), "onMessage", message);
        // unlimited depth
        // this.log (new Date (), 'onMessage', util.inspect (message, false, null, true))
        // this.log (new Date (), 'onMessage', JSON.stringify (message, null, 4))
      }
    } catch (e) {
      this.log(new Date(), "onMessage JSON.parse", e);
      // reset with a json encoding error ?
    }

    this.onMessageCallback(this, message);
  }
}
exports.default = Client;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../base/errors.js":5,"../../base/functions.js":6,"./Future.js":19,"./functions.js":23,"buffer":98}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Future;
// @ts-nocheck
function Future() {
  let resolve = undefined,
    reject = undefined;
  const p = new Promise((resolve_, reject_) => {
    resolve = resolve_;
    reject = reject_;
  });
  p.resolve = function _resolve() {
    // eslint-disable-next-line prefer-rest-params
    resolve.apply(this, arguments);
  };
  p.reject = function _reject() {
    // eslint-disable-next-line prefer-rest-params
    reject.apply(this, arguments);
  };
  return p;
}
;

},{}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrderBook = exports.IndexedOrderBook = exports.CountedOrderBook = void 0;
var _time = require("../../base/functions/time.js");
var _generic = require("../../base/functions/generic.js");
var _OrderBookSide = require("./OrderBookSide.js");
/* eslint-disable max-classes-per-file */
// @ts-nocheck 

// ----------------------------------------------------------------------------
// overwrites absolute volumes at price levels
class OrderBook {
  constructor(snapshot = {}, depth = undefined) {
    Object.defineProperty(this, 'cache', {
      __proto__: null,
      value: [],
      writable: true
    });
    depth = depth || Number.MAX_SAFE_INTEGER;
    const defaults = {
      'bids': [],
      'asks': [],
      'timestamp': undefined,
      'datetime': undefined,
      'nonce': undefined,
      'symbol': undefined
    };
    // merge to this
    const entries = Object.entries((0, _generic.extend)(defaults, snapshot));
    for (let i = 0; i < entries.length; i++) {
      const [property, value] = entries[i];
      this[property] = value;
    }
    // wrap plain arrays with Bids/Asks classes if necessary
    if (this.asks.constructor.name === 'Array') {
      this.asks = new _OrderBookSide.Asks(this.asks, depth);
    }
    if (this.bids.constructor.name === 'Array') {
      this.bids = new _OrderBookSide.Bids(this.bids, depth);
    }
    if (this.timestamp) {
      this.datetime = (0, _time.iso8601)(this.timestamp);
    }
  }
  limit(n = undefined) {
    this.asks.limit(n);
    this.bids.limit(n);
    return this;
  }
  update(snapshot) {
    if (snapshot.nonce !== undefined && this.nonce !== undefined && snapshot.nonce <= this.nonce) {
      return this;
    }
    this.nonce = snapshot.nonce;
    this.timestamp = snapshot.timestamp;
    this.datetime = (0, _time.iso8601)(this.timestamp);
    return this.reset(snapshot);
  }
  reset(snapshot = {}) {
    this.asks.index.fill(Number.MAX_VALUE);
    this.asks.length = 0;
    if (snapshot.asks) {
      for (let i = 0; i < snapshot.asks.length; i++) {
        this.asks.storeArray(snapshot.asks[i]);
      }
    }
    this.bids.index.fill(Number.MAX_VALUE);
    this.bids.length = 0;
    if (snapshot.bids) {
      for (let i = 0; i < snapshot.bids.length; i++) {
        this.bids.storeArray(snapshot.bids[i]);
      }
    }
    this.nonce = snapshot.nonce;
    this.timestamp = snapshot.timestamp;
    this.datetime = (0, _time.iso8601)(this.timestamp);
    this.symbol = snapshot.symbol;
    return this;
  }
}
// ----------------------------------------------------------------------------
// overwrites absolute volumes at price levels
// or deletes price levels based on order counts (3rd value in a bidask delta)
exports.OrderBook = OrderBook;
class CountedOrderBook extends OrderBook {
  constructor(snapshot = {}, depth = undefined) {
    super((0, _generic.extend)(snapshot, {
      'asks': new _OrderBookSide.CountedAsks(snapshot.asks || [], depth),
      'bids': new _OrderBookSide.CountedBids(snapshot.bids || [], depth)
    }));
  }
}
// ----------------------------------------------------------------------------
// indexed by order ids (3rd value in a bidask delta)
exports.CountedOrderBook = CountedOrderBook;
class IndexedOrderBook extends OrderBook {
  constructor(snapshot = {}, depth = undefined) {
    super((0, _generic.extend)(snapshot, {
      'asks': new _OrderBookSide.IndexedAsks(snapshot.asks || [], depth),
      'bids': new _OrderBookSide.IndexedBids(snapshot.bids || [], depth)
    }));
  }
}
// ----------------------------------------------------------------------------
// adjusts the volumes by positive or negative relative changes or differences
// class IncrementalOrderBook extends OrderBook {
//     constructor (snapshot = {}, depth = undefined) {
//         super (extend (snapshot, {
//             'asks': new IncrementalAsks (snapshot.asks || [], depth),
//             'bids': new IncrementalBids (snapshot.bids || [], depth),
//         }))
//     }
// }
// // ----------------------------------------------------------------------------
// // incremental and indexed (2 in 1)
// class IncrementalIndexedOrderBook extends OrderBook {
//     constructor (snapshot = {}, depth = undefined) {
//         super (extend (snapshot, {
//             'asks': new IncrementalIndexedAsks (snapshot.asks || [], depth),
//             'bids': new IncrementalIndexedBids (snapshot.bids || [], depth),
//         }))
//     }
// }
// ----------------------------------------------------------------------------
exports.IndexedOrderBook = IndexedOrderBook;

},{"../../base/functions/generic.js":9,"../../base/functions/time.js":15,"./OrderBookSide.js":21}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrderBookSide = exports.IndexedOrderBookSide = exports.IndexedBids = exports.IndexedAsks = exports.CountedOrderBookSide = exports.CountedBids = exports.CountedAsks = exports.Bids = exports.Asks = void 0;
/* eslint-disable max-classes-per-file */
// @ts-nocheck
// ----------------------------------------------------------------------------
//
// Upto 10x faster after initializing memory for the floating point array
// Author: github.com/frosty00
// Email: carlo.revelli@berkeley.edu
//
function bisectLeft(array, x) {
  let low = 0;
  let high = array.length - 1;
  while (low <= high) {
    const mid = low + high >>> 1;
    if (array[mid] - x < 0) low = mid + 1;else high = mid - 1;
  }
  return low;
}
const SIZE = 1024;
const SEED = new Float64Array(new Array(SIZE).fill(Number.MAX_VALUE));
class OrderBookSide extends Array {
  constructor(deltas = [], depth = undefined) {
    super();
    // a string-keyed dictionary of price levels / ids / indices
    Object.defineProperty(this, 'index', {
      __proto__: null,
      value: new Float64Array(SEED),
      writable: true
    });
    Object.defineProperty(this, 'depth', {
      __proto__: null,
      value: depth || Number.MAX_SAFE_INTEGER,
      writable: true
    });
    Object.defineProperty(this, 'hidden', {
      __proto__: null,
      value: new Map(),
      writable: true
    });
    // sort upon initiation
    this.length = 0;
    for (let i = 0; i < deltas.length; i++) {
      this.storeArray(deltas[i].slice()); // slice is muy importante
    }
  }

  storeArray(delta) {
    const price = delta[0];
    const size = delta[1];
    const index_price = this.side ? -price : price;
    const index = bisectLeft(this.index, index_price);
    if (size) {
      if (this.index[index] === index_price) {
        if (index < this.length) {
          this[index][1] = size;
        } else {
          const entry = this.hidden.get(index_price);
          entry[1] = size;
        }
      } else {
        this.length++;
        this.index.copyWithin(index + 1, index, this.index.length);
        this.index[index] = index_price;
        if (index < this.length) {
          this.copyWithin(index + 1, index, this.length);
          this[index] = delta;
        } else {
          this.hidden.set(index_price, delta);
          this.length--;
        }
        // in the rare case of very large orderbooks being sent
        if (this.length > this.index.length - 1) {
          const existing = Array.from(this.index);
          existing.length = this.length * 2;
          existing.fill(Number.MAX_VALUE, this.index.length);
          this.index = new Float64Array(existing);
        }
      }
    } else if (this.index[index] === index_price) {
      this.index.copyWithin(index, index + 1, this.index.length);
      this.index[this.length + this.hidden.size - 1] = Number.MAX_VALUE;
      if (this.hidden.has(index_price)) {
        this.hidden.delete(index_price);
      } else {
        this.copyWithin(index, index + 1, this.length);
        this.length--;
      }
    }
  }
  // index an incoming delta in the string-price-keyed dictionary
  store(price, size) {
    this.storeArray([price, size]);
  }
  // replace stored orders with new values
  limit(n = undefined) {
    if (n < this.length) {
      // we store some hidden stuff for when the book is temporarily limited to the user
      for (let i = n; i < this.length; i++) {
        this.hidden.set(this.index[i], this[i]);
      }
      this.length = n;
    }
    if (this.hidden.size) {
      let end = this.length + this.hidden.size;
      if (n !== undefined) {
        end = Math.min(end, n);
      }
      for (let i = this.length; i < end; i++) {
        this.push(this.hidden.get(this.index[i]));
        this.hidden.delete(this.index[i]);
      }
    }
    if (this.length > this.depth) {
      for (let i = this.depth; i < this.length; i++) {
        this.index[i] = Number.MAX_VALUE;
      }
      this.hidden.clear();
      this.length = this.depth;
    }
  }
}
// ----------------------------------------------------------------------------
// overwrites absolute volumes at price levels
// or deletes price levels based on order counts (3rd value in a bidask delta)
// this class stores vector arrays of values indexed by price
exports.OrderBookSide = OrderBookSide;
class CountedOrderBookSide extends OrderBookSide {
  store(price, size, count) {
    this.storeArray([price, size, count]);
  }
  storeArray(delta) {
    const price = delta[0];
    const size = delta[1];
    const count = delta[2];
    const index_price = this.side ? -price : price;
    const index = bisectLeft(this.index, index_price);
    if (size && count) {
      if (this.index[index] == index_price) {
        if (index < this.length) {
          const entry = this[index];
          entry[1] = size;
          entry[2] = count;
        } else {
          const entry = this.hidden.get(index_price);
          entry[1] = size;
          entry[2] = count;
        }
      } else {
        this.length++;
        this.index.copyWithin(index + 1, index, this.index.length);
        this.index[index] = index_price;
        if (index < this.length) {
          this.copyWithin(index + 1, index, this.length);
          this[index] = delta;
        } else {
          this.hidden.set(index_price, delta);
          this.length--;
        }
        // in the rare case of very large orderbooks being sent
        if (this.length > this.index.length - 1) {
          const existing = Array.from(this.index);
          existing.length = this.length * 2;
          existing.fill(Number.MAX_VALUE, this.index.length);
          this.index = new Float64Array(existing);
        }
      }
    } else if (this.index[index] == index_price) {
      this.index.copyWithin(index, index + 1, this.index.length);
      this.index[this.length + this.hidden.size - 1] = Number.MAX_VALUE;
      if (this.hidden.has(index_price)) {
        this.hidden.delete(index_price);
      } else {
        this.copyWithin(index, index + 1, this.length);
        this.length--;
      }
    }
  }
}
// ----------------------------------------------------------------------------
// stores vector arrays indexed by id (3rd value in a bidask delta array)
exports.CountedOrderBookSide = CountedOrderBookSide;
class IndexedOrderBookSide extends Array {
  constructor(deltas = [], depth = Number.MAX_SAFE_INTEGER) {
    super(deltas.length);
    // a string-keyed dictionary of price levels / ids / indices
    Object.defineProperty(this, 'hashmap', {
      __proto__: null,
      value: new Map(),
      writable: true
    });
    Object.defineProperty(this, 'index', {
      __proto__: null,
      value: new Float64Array(SEED),
      writable: true
    });
    Object.defineProperty(this, 'depth', {
      __proto__: null,
      value: depth || Number.MAX_SAFE_INTEGER,
      writable: true
    });
    Object.defineProperty(this, 'hidden', {
      __proto__: null,
      value: new Map(),
      writable: true
    });
    // sort upon initiation
    for (let i = 0; i < deltas.length; i++) {
      this.length = i;
      this.storeArray(deltas[i].slice()); // slice is muy importante
    }
  }

  store(price, size, id) {
    this.storeArray([price, size, id]);
  }
  storeArray(delta) {
    const price = delta[0];
    const size = delta[1];
    const id = delta[2];
    let index_price;
    if (price !== undefined) {
      index_price = this.side ? -price : price;
    } else {
      index_price = undefined;
    }
    if (size) {
      if (this.hashmap.has(id)) {
        const old_price = this.hashmap.get(id);
        index_price = index_price || old_price;
        // in case price is not sent
        delta[0] = Math.abs(index_price);
        if (index_price === old_price) {
          const index = bisectLeft(this.index, index_price);
          this.index[index] = index_price;
          if (index < this.length) {
            this[index] = delta;
          } else {
            this.hidden.set(index_price, delta);
          }
          return;
        } else {
          // remove old price from index
          const old_index = bisectLeft(this.index, old_price);
          this.index.copyWithin(old_index, old_index + 1, this.index.length);
          this.index[this.length + this.hidden.size - 1] = Number.MAX_VALUE;
          if (this.hidden.has(old_price)) {
            this.hidden.delete(old_price);
          } else {
            this.copyWithin(old_index, old_index + 1, this.length);
            this.length--;
          }
        }
      }
      // insert new price level
      this.hashmap.set(id, index_price);
      const index = bisectLeft(this.index, index_price);
      // insert new price level into index
      this.length++;
      this.index.copyWithin(index + 1, index, this.index.length);
      this.index[index] = index_price;
      if (index < this.length) {
        this.copyWithin(index + 1, index, this.length);
        this[index] = delta;
      } else {
        this.hidden.set(index_price, delta);
        this.length--;
      }
      // in the rare case of very large orderbooks being sent
      if (this.length > this.index.length - 1) {
        const existing = Array.from(this.index);
        existing.length = this.length * 2;
        existing.fill(Number.MAX_VALUE, this.index.length);
        this.index = new Float64Array(existing);
      }
    } else if (this.hashmap.has(id)) {
      const old_price = this.hashmap.get(id);
      const index = bisectLeft(this.index, old_price);
      this.index.copyWithin(index, index + 1, this.index.length);
      this.index[this.length - 1] = Number.MAX_VALUE;
      if (this.hidden.has(old_price)) {
        this.hidden.delete(old_price);
      } else {
        this.copyWithin(index, index + 1, this.length);
        this.length--;
      }
      this.hashmap.delete(id);
    }
  }
  // replace stored orders with new values
  limit(n = undefined) {
    if (n < this.length) {
      // we store some hidden stuff for when the book is temporarily limited to the user
      for (let i = n; i < this.length; i++) {
        this.hidden.set(this.index[i], this[i]);
      }
      this.length = n;
    }
    if (this.hidden.size) {
      let end = this.length + this.hidden.size;
      if (n !== undefined) {
        end = Math.min(end, n);
      }
      for (let i = this.length; i < end; i++) {
        this.push(this.hidden.get(this.index[i]));
        this.hidden.delete(this.index[i]);
      }
    }
    if (this.length > this.depth) {
      for (let i = this.depth; i < this.length; i++) {
        // diff
        this.hashmap.delete(this.index[i]);
        this.index[i] = Number.MAX_VALUE;
      }
      this.hidden.clear();
      this.length = this.depth;
    }
  }
}
// ----------------------------------------------------------------------------
// a more elegant syntax is possible here, but native inheritance is portable
exports.IndexedOrderBookSide = IndexedOrderBookSide;
class Asks extends OrderBookSide {
  get side() {
    return false;
  }
}
exports.Asks = Asks;
class Bids extends OrderBookSide {
  get side() {
    return true;
  }
}
exports.Bids = Bids;
class CountedAsks extends CountedOrderBookSide {
  get side() {
    return false;
  }
}
exports.CountedAsks = CountedAsks;
class CountedBids extends CountedOrderBookSide {
  get side() {
    return true;
  }
}
exports.CountedBids = CountedBids;
class IndexedAsks extends IndexedOrderBookSide {
  get side() {
    return false;
  }
}
exports.IndexedAsks = IndexedAsks;
class IndexedBids extends IndexedOrderBookSide {
  get side() {
    return true;
  }
}
// ----------------------------------------------------------------------------
exports.IndexedBids = IndexedBids;

},{}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Client = _interopRequireDefault(require("./Client.js"));
var _functions = require("../../base/functions.js");
var _ws = _interopRequireDefault(require("ws"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const WebSocketPlatform = _functions.isNode ? _ws.default : self.WebSocket;
class WsClient extends _Client.default {
  createConnection() {
    if (this.verbose) {
      this.log(new Date(), "connecting to", this.url);
    }
    this.connectionStarted = (0, _functions.milliseconds)();
    this.setConnectionTimeout();
    const url = this.url.includes('phemex') ? this.url : `${this.url}${this.url.includes("?") ? "&" : "?"}${+new Date()}`;
    const wsClass = (0, _functions.safeValue)(this.options, "wsClass", WebSocketPlatform);
    if (_functions.isNode) {
      this.connection = new wsClass(url, this.protocols, this.options);
    } else {
      this.connection = new wsClass(url, this.protocols);
    }
    this.connection.onopen = this.onOpen.bind(this);
    this.connection.onmessage = this.onMessage.bind(this);
    this.connection.onerror = this.onError.bind(this);
    this.connection.onclose = this.onClose.bind(this);
    if (_functions.isNode) {
      this.connection.on("ping", this.onPing.bind(this)).on("pong", this.onPong.bind(this)).on("upgrade", this.onUpgrade.bind(this));
    }
    // this.connection.terminate () // debugging
    // this.connection.close () // debugging
  }

  connect(backoffDelay = 0) {
    if (!this.startedConnecting) {
      this.startedConnecting = true;
      // exponential backoff for consequent ws connections if necessary
      if (backoffDelay) {
        (0, _functions.sleep)(backoffDelay).then(this.createConnection.bind(this));
      } else {
        this.createConnection();
      }
    }
    return this.connected;
  }
  isOpen() {
    return this.connection.readyState === WebSocketPlatform.OPEN;
  }
  close() {
    const wsClass = (0, _functions.safeValue)(this.options, "wsClass", WebSocketPlatform);
    if (this.connection instanceof wsClass) {
      return this.connection.close();
    }
  }
}
exports.default = WsClient;

},{"../../base/functions.js":6,"./Client.js":18,"ws":152}],23:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gunzip = gunzip;
exports.inflate = inflate;
exports.inflate64 = inflate64;
var _zlib = require("zlib");
function inflate(data) {
  return (0, _zlib.inflateRawSync)(data).toString();
}
function inflate64(data) {
  return inflate(Buffer.from(data, 'base64'));
}
function gunzip(data) {
  return (0, _zlib.gunzipSync)(data).toString();
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":98,"zlib":93}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
var _number = require("./base/functions/number.js");
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class binance extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'binance',
      'name': 'Binance',
      'countries': ['JP', 'MT'],
      'rateLimit': 50,
      'certified': true,
      'pro': true,
      // new metainfo interface
      'has': {
        'CORS': undefined,
        'spot': true,
        'margin': true,
        'swap': true,
        'future': true,
        'option': undefined,
        'addMargin': true,
        'borrowMargin': true,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'cancelOrders': undefined,
        'createDepositAddress': false,
        'createOrder': true,
        'createPostOnlyOrder': true,
        'createReduceOnlyOrder': true,
        'createStopLimitOrder': true,
        'createStopMarketOrder': false,
        'createStopOrder': true,
        'editOrder': true,
        'fetchAccounts': undefined,
        'fetchBalance': true,
        'fetchBidsAsks': true,
        'fetchBorrowInterest': true,
        'fetchBorrowRate': true,
        'fetchBorrowRateHistories': false,
        'fetchBorrowRateHistory': true,
        'fetchBorrowRates': false,
        'fetchBorrowRatesPerSymbol': false,
        'fetchCanceledOrders': false,
        'fetchClosedOrder': false,
        'fetchClosedOrders': 'emulated',
        'fetchCurrencies': true,
        'fetchDeposit': false,
        'fetchDepositAddress': true,
        'fetchDepositAddresses': false,
        'fetchDepositAddressesByNetwork': false,
        'fetchDeposits': true,
        'fetchDepositWithdrawFee': 'emulated',
        'fetchDepositWithdrawFees': true,
        'fetchFundingHistory': true,
        'fetchFundingRate': true,
        'fetchFundingRateHistory': true,
        'fetchFundingRates': true,
        'fetchIndexOHLCV': true,
        'fetchL3OrderBook': undefined,
        'fetchLastPrices': true,
        'fetchLedger': true,
        'fetchLeverage': false,
        'fetchLeverageTiers': true,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': true,
        'fetchMarkOHLCV': true,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenInterest': true,
        'fetchOpenInterestHistory': true,
        'fetchOpenOrder': false,
        'fetchOpenOrders': true,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrderBooks': false,
        'fetchOrders': true,
        'fetchOrderTrades': true,
        'fetchPosition': undefined,
        'fetchPositions': true,
        'fetchPositionsRisk': true,
        'fetchPremiumIndexOHLCV': false,
        'fetchSettlementHistory': true,
        'fetchStatus': true,
        'fetchTicker': true,
        'fetchTickers': true,
        'fetchTime': true,
        'fetchTrades': true,
        'fetchTradingFee': true,
        'fetchTradingFees': true,
        'fetchTradingLimits': undefined,
        'fetchTransactionFee': undefined,
        'fetchTransactionFees': true,
        'fetchTransactions': false,
        'fetchTransfers': true,
        'fetchWithdrawal': false,
        'fetchWithdrawals': true,
        'fetchWithdrawalWhitelist': false,
        'reduceMargin': true,
        'repayMargin': true,
        'setLeverage': true,
        'setMargin': false,
        'setMarginMode': true,
        'setPositionMode': true,
        'signIn': false,
        'transfer': true,
        'withdraw': true
      },
      'timeframes': {
        '1s': '1s',
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '4h': '4h',
        '6h': '6h',
        '8h': '8h',
        '12h': '12h',
        '1d': '1d',
        '3d': '3d',
        '1w': '1w',
        '1M': '1M'
      },
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
        'test': {
          'dapiPublic': 'https://testnet.binancefuture.com/dapi/v1',
          'dapiPrivate': 'https://testnet.binancefuture.com/dapi/v1',
          'dapiPrivateV2': 'https://testnet.binancefuture.com/dapi/v2',
          'fapiPublic': 'https://testnet.binancefuture.com/fapi/v1',
          'fapiPrivate': 'https://testnet.binancefuture.com/fapi/v1',
          'fapiPrivateV2': 'https://testnet.binancefuture.com/fapi/v2',
          'public': 'https://testnet.binance.vision/api/v3',
          'private': 'https://testnet.binance.vision/api/v3',
          'v1': 'https://testnet.binance.vision/api/v1'
        },
        'api': {
          'wapi': 'https://api.binance.com/wapi/v3',
          'sapi': 'https://api.binance.com/sapi/v1',
          'sapiV2': 'https://api.binance.com/sapi/v2',
          'sapiV3': 'https://api.binance.com/sapi/v3',
          'sapiV4': 'https://api.binance.com/sapi/v4',
          'dapiPublic': 'https://dapi.binance.com/dapi/v1',
          'dapiPrivate': 'https://dapi.binance.com/dapi/v1',
          'eapiPublic': 'https://eapi.binance.com/eapi/v1',
          'eapiPrivate': 'https://eapi.binance.com/eapi/v1',
          'dapiPrivateV2': 'https://dapi.binance.com/dapi/v2',
          'dapiData': 'https://dapi.binance.com/futures/data',
          'fapiPublic': 'https://fapi.binance.com/fapi/v1',
          'fapiPrivate': 'https://fapi.binance.com/fapi/v1',
          'fapiData': 'https://fapi.binance.com/futures/data',
          'fapiPrivateV2': 'https://fapi.binance.com/fapi/v2',
          'public': 'https://api.binance.com/api/v3',
          'private': 'https://api.binance.com/api/v3',
          'v1': 'https://api.binance.com/api/v1'
        },
        'www': 'https://www.binance.com',
        'referral': {
          'url': 'https://accounts.binance.com/en/register?ref=D7YA7CLY',
          'discount': 0.1
        },
        'doc': ['https://binance-docs.github.io/apidocs/spot/en'],
        'api_management': 'https://www.binance.com/en/usercenter/settings/api-management',
        'fees': 'https://www.binance.com/en/fee/schedule'
      },
      'api': {
        // the API structure below will need 3-layer apidefs
        'sapi': {
          // IP (api) = 1200 per minute => (rateLimit = 50)
          // IP (sapi) request rate limit of 12 000 per minute
          // 1 IP (sapi) => cost = 0.1
          // 10 IP (sapi) => cost = 1
          // UID (sapi) request rate limit of 180 000 per minute
          // 1 UID (sapi) => cost = 1200 / 180 000 = 0.006667
          'get': {
            'system/status': 0.1,
            // these endpoints require this.apiKey
            'accountSnapshot': 240,
            'margin/asset': 1,
            'margin/pair': 1,
            'margin/allAssets': 0.1,
            'margin/allPairs': 0.1,
            'margin/priceIndex': 1,
            // these endpoints require this.apiKey + this.secret
            'asset/assetDividend': 1,
            'asset/dribblet': 0.1,
            'asset/transfer': 0.1,
            'asset/assetDetail': 0.1,
            'asset/tradeFee': 0.1,
            'asset/ledger-transfer/cloud-mining/queryByPage': 4,
            'margin/loan': 1,
            'margin/repay': 1,
            'margin/account': 1,
            'margin/transfer': 0.1,
            'margin/interestHistory': 0.1,
            'margin/forceLiquidationRec': 0.1,
            'margin/order': 1,
            'margin/openOrders': 1,
            'margin/allOrders': 20,
            'margin/myTrades': 1,
            'margin/maxBorrowable': 5,
            'margin/maxTransferable': 5,
            'margin/tradeCoeff': 1,
            'margin/isolated/transfer': 0.1,
            'margin/isolated/account': 1,
            'margin/isolated/pair': 1,
            'margin/isolated/allPairs': 1,
            'margin/isolated/accountLimit': 0.1,
            'margin/interestRateHistory': 0.1,
            'margin/orderList': 1,
            'margin/allOrderList': 20,
            'margin/openOrderList': 1,
            'margin/crossMarginData': {
              'cost': 0.1,
              'noCoin': 0.5
            },
            'margin/isolatedMarginData': {
              'cost': 0.1,
              'noCoin': 1
            },
            'margin/isolatedMarginTier': 0.1,
            'margin/rateLimit/order': 2,
            'margin/dribblet': 0.1,
            'margin/crossMarginCollateralRatio': 10,
            'margin/exchange-small-liability': 0.6667,
            'margin/exchange-small-liability-history': 0.6667,
            'margin/next-hourly-interest-rate': 0.6667,
            'loan/income': 40,
            'loan/ongoing/orders': 40,
            'loan/ltv/adjustment/history': 40,
            'loan/borrow/history': 40,
            'loan/repay/history': 40,
            'loan/loanable/data': 40,
            'loan/collateral/data': 40,
            'loan/repay/collateral/rate': 600,
            'loan/vip/ongoing/orders': 40,
            'loan/vip/repay/history': 40,
            'loan/vip/collateral/account': 600,
            'fiat/orders': 600.03,
            'fiat/payments': 0.1,
            'futures/transfer': 1,
            'futures/loan/borrow/history': 1,
            'futures/loan/repay/history': 1,
            'futures/loan/wallet': 1,
            'futures/loan/adjustCollateral/history': 1,
            'futures/loan/liquidationHistory': 1,
            'rebate/taxQuery': 20.001,
            // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
            'capital/config/getall': 1,
            'capital/deposit/address': 1,
            'capital/deposit/hisrec': 0.1,
            'capital/deposit/subAddress': 0.1,
            'capital/deposit/subHisrec': 0.1,
            'capital/withdraw/history': 0.1,
            'capital/contract/convertible-coins': 4.0002,
            'convert/tradeFlow': 0.6667,
            'convert/exchangeInfo': 50,
            'convert/assetInfo': 10,
            'convert/orderStatus': 0.6667,
            'account/status': 0.1,
            'account/apiTradingStatus': 0.1,
            'account/apiRestrictions/ipRestriction': 0.1,
            'bnbBurn': 0.1,
            // 'sub-account/assets': 1, (v3 endpoint)
            'sub-account/futures/account': 1,
            'sub-account/futures/accountSummary': 0.1,
            'sub-account/futures/positionRisk': 1,
            'sub-account/futures/internalTransfer': 0.1,
            'sub-account/list': 0.1,
            'sub-account/margin/account': 1,
            'sub-account/margin/accountSummary': 1,
            'sub-account/spotSummary': 0.1,
            'sub-account/status': 1,
            'sub-account/sub/transfer/history': 0.1,
            'sub-account/transfer/subUserHistory': 0.1,
            'sub-account/universalTransfer': 0.1,
            'sub-account/apiRestrictions/ipRestriction/thirdPartyList': 1,
            'managed-subaccount/asset': 0.1,
            'managed-subaccount/accountSnapshot': 240,
            'managed-subaccount/queryTransLogForInvestor': 0.1,
            'managed-subaccount/queryTransLogForTradeParent': 0.1,
            'managed-subaccount/fetch-future-asset': 0.1,
            'managed-subaccount/marginAsset': 0.1,
            // lending endpoints
            'lending/daily/product/list': 0.1,
            'lending/daily/userLeftQuota': 0.1,
            'lending/daily/userRedemptionQuota': 0.1,
            'lending/daily/token/position': 0.1,
            'lending/union/account': 0.1,
            'lending/union/purchaseRecord': 0.1,
            'lending/union/redemptionRecord': 0.1,
            'lending/union/interestHistory': 0.1,
            'lending/project/list': 0.1,
            'lending/project/position/list': 0.1,
            // mining endpoints
            'mining/pub/algoList': 0.1,
            'mining/pub/coinList': 0.1,
            'mining/worker/detail': 0.5,
            'mining/worker/list': 0.5,
            'mining/payment/list': 0.5,
            'mining/statistics/user/status': 0.5,
            'mining/statistics/user/list': 0.5,
            'mining/payment/uid': 0.5,
            // liquid swap endpoints
            'bswap/pools': 0.1,
            'bswap/liquidity': {
              'cost': 0.1,
              'noPoolId': 1
            },
            'bswap/liquidityOps': 20.001,
            'bswap/quote': 1.00005,
            'bswap/swap': 20.001,
            'bswap/poolConfigure': 1.00005,
            'bswap/addLiquidityPreview': 1.00005,
            'bswap/removeLiquidityPreview': 1.00005,
            'bswap/unclaimedRewards': 6.667,
            'bswap/claimedHistory': 6.667,
            // leveraged token endpoints
            'blvt/tokenInfo': 0.1,
            'blvt/subscribe/record': 0.1,
            'blvt/redeem/record': 0.1,
            'blvt/userLimit': 0.1,
            // broker api TODO (NOT IN DOCS)
            'apiReferral/ifNewUser': 1,
            'apiReferral/customization': 1,
            'apiReferral/userCustomization': 1,
            'apiReferral/rebate/recentRecord': 1,
            'apiReferral/rebate/historicalRecord': 1,
            'apiReferral/kickback/recentRecord': 1,
            'apiReferral/kickback/historicalRecord': 1,
            // brokerage API TODO https://binance-docs.github.io/Brokerage-API/General/ does not state ratelimits
            'broker/subAccountApi': 1,
            'broker/subAccount': 1,
            'broker/subAccountApi/commission/futures': 1,
            'broker/subAccountApi/commission/coinFutures': 1,
            'broker/info': 1,
            'broker/transfer': 1,
            'broker/transfer/futures': 1,
            'broker/rebate/recentRecord': 1,
            'broker/rebate/historicalRecord': 1,
            'broker/subAccount/bnbBurn/status': 1,
            'broker/subAccount/depositHist': 1,
            'broker/subAccount/spotSummary': 1,
            'broker/subAccount/marginSummary': 1,
            'broker/subAccount/futuresSummary': 1,
            'broker/rebate/futures/recentRecord': 1,
            'broker/subAccountApi/ipRestriction': 1,
            'broker/universalTransfer': 1,
            // v2 not supported yet
            // GET /sapi/v2/broker/subAccount/futuresSummary
            'account/apiRestrictions': 0.1,
            // c2c / p2p
            'c2c/orderMatch/listUserOrderHistory': 0.1,
            // nft endpoints
            'nft/history/transactions': 20.001,
            'nft/history/deposit': 20.001,
            'nft/history/withdraw': 20.001,
            'nft/user/getAsset': 20.001,
            'pay/transactions': 20.001,
            'giftcard/verify': 0.1,
            'giftcard/cryptography/rsa-public-key': 0.1,
            'giftcard/buyCode/token-limit': 0.1,
            'algo/futures/openOrders': 0.1,
            'algo/futures/historicalOrders': 0.1,
            'algo/futures/subOrders': 0.1,
            'portfolio/account': 0.1,
            'portfolio/collateralRate': 5,
            'portfolio/pmLoan': 3.3335,
            'portfolio/interest-history': 0.6667,
            'portfolio/interest-rate': 0.6667,
            // staking
            'staking/productList': 0.1,
            'staking/position': 0.1,
            'staking/stakingRecord': 0.1,
            'staking/personalLeftQuota': 0.1
          },
          'post': {
            'asset/dust': 1,
            'asset/dust-btc': 0.1,
            'asset/transfer': 0.1,
            'asset/get-funding-asset': 0.1,
            'asset/convert-transfer': 0.033335,
            'asset/convert-transfer/queryByPage': 0.033335,
            'account/disableFastWithdrawSwitch': 0.1,
            'account/enableFastWithdrawSwitch': 0.1,
            // 'account/apiRestrictions/ipRestriction': 1, discontinued
            // 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
            'capital/withdraw/apply': 4.0002,
            'capital/contract/convertible-coins': 4.0002,
            'margin/transfer': 1,
            'margin/loan': 20.001,
            'margin/repay': 20.001,
            'margin/order': 0.040002,
            'margin/order/oco': 0.040002,
            'margin/exchange-small-liability': 20.001,
            // 'margin/isolated/create': 1, discontinued
            'margin/isolated/transfer': 4.0002,
            'margin/isolated/account': 2.0001,
            'bnbBurn': 0.1,
            'sub-account/virtualSubAccount': 0.1,
            'sub-account/margin/transfer': 4.0002,
            'sub-account/margin/enable': 0.1,
            'sub-account/futures/enable': 0.1,
            'sub-account/futures/transfer': 0.1,
            'sub-account/futures/internalTransfer': 0.1,
            'sub-account/transfer/subToSub': 0.1,
            'sub-account/transfer/subToMaster': 0.1,
            'sub-account/universalTransfer': 0.1,
            // v2 not supported yet
            // 'sub-account/subAccountApi/ipRestriction': 20,
            'managed-subaccount/deposit': 0.1,
            'managed-subaccount/withdraw': 0.1,
            'userDataStream': 0.1,
            'userDataStream/isolated': 0.1,
            'futures/transfer': 0.1,
            // lending
            'lending/customizedFixed/purchase': 0.1,
            'lending/daily/purchase': 0.1,
            'lending/daily/redeem': 0.1,
            // liquid swap endpoints
            'bswap/liquidityAdd': 60,
            'bswap/liquidityRemove': 60,
            'bswap/swap': 60,
            'bswap/claimRewards': 6.667,
            // leveraged token endpoints
            'blvt/subscribe': 0.1,
            'blvt/redeem': 0.1,
            // brokerage API TODO: NO MENTION OF RATELIMITS IN BROKERAGE DOCS
            'apiReferral/customization': 1,
            'apiReferral/userCustomization': 1,
            'apiReferral/rebate/historicalRecord': 1,
            'apiReferral/kickback/historicalRecord': 1,
            'broker/subAccount': 1,
            'broker/subAccount/margin': 1,
            'broker/subAccount/futures': 1,
            'broker/subAccountApi': 1,
            'broker/subAccountApi/permission': 1,
            'broker/subAccountApi/commission': 1,
            'broker/subAccountApi/commission/futures': 1,
            'broker/subAccountApi/commission/coinFutures': 1,
            'broker/transfer': 1,
            'broker/transfer/futures': 1,
            'broker/rebate/historicalRecord': 1,
            'broker/subAccount/bnbBurn/spot': 1,
            'broker/subAccount/bnbBurn/marginInterest': 1,
            'broker/subAccount/blvt': 1,
            'broker/subAccountApi/ipRestriction': 1,
            'broker/subAccountApi/ipRestriction/ipList': 1,
            'broker/universalTransfer': 1,
            'broker/subAccountApi/permission/universalTransfer': 1,
            'broker/subAccountApi/permission/vanillaOptions': 1,
            //
            'giftcard/createCode': 0.1,
            'giftcard/redeemCode': 0.1,
            'giftcard/buyCode': 0.1,
            'algo/futures/newOrderVp': 20.001,
            'algo/futures/newOrderTwap': 20.001,
            // staking
            'staking/purchase': 0.1,
            'staking/redeem': 0.1,
            'staking/setAutoStaking': 0.1,
            'portfolio/repay': 20.001,
            'loan/borrow': 40,
            'loan/repay': 40,
            'loan/adjust/ltv': 40,
            'loan/customize/margin_call': 40,
            'loan/vip/repay': 40,
            'convert/getQuote': 20.001,
            'convert/acceptQuote': 3.3335
          },
          'put': {
            'userDataStream': 0.1,
            'userDataStream/isolated': 0.1
          },
          'delete': {
            // 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
            'margin/openOrders': 0.1,
            'margin/order': 0.0066667,
            'margin/orderList': 0.0066667,
            'margin/isolated/account': 2.0001,
            'userDataStream': 0.1,
            'userDataStream/isolated': 0.1,
            // brokerage API TODO NO MENTION OF RATELIMIT IN BROKERAGE DOCS
            'broker/subAccountApi': 1,
            'broker/subAccountApi/ipRestriction/ipList': 1,
            'algo/futures/order': 0.1
          }
        },
        'sapiV2': {
          'get': {
            'sub-account/futures/account': 0.1,
            'sub-account/futures/positionRisk': 0.1
          }
        },
        'sapiV3': {
          'get': {
            'sub-account/assets': 1
          },
          'post': {
            'asset/getUserAsset': 0.5
          }
        },
        'sapiV4': {
          'get': {
            'sub-account/assets': 1
          }
        },
        // deprecated
        'wapi': {
          'post': {
            'withdraw': 1,
            'sub-account/transfer': 1
          },
          'get': {
            'depositHistory': 1,
            'withdrawHistory': 1,
            'depositAddress': 1,
            'accountStatus': 1,
            'systemStatus': 1,
            'apiTradingStatus': 1,
            'userAssetDribbletLog': 1,
            'tradeFee': 1,
            'assetDetail': 1,
            'sub-account/list': 1,
            'sub-account/transfer/history': 1,
            'sub-account/assets': 1
          }
        },
        'dapiPublic': {
          'get': {
            'ping': 1,
            'time': 1,
            'exchangeInfo': 1,
            'depth': {
              'cost': 2,
              'byLimit': [[50, 2], [100, 5], [500, 10], [1000, 20]]
            },
            'trades': 5,
            'historicalTrades': 20,
            'aggTrades': 20,
            'premiumIndex': 10,
            'fundingRate': 1,
            'klines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'continuousKlines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'indexPriceKlines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'markPriceKlines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'ticker/24hr': {
              'cost': 1,
              'noSymbol': 40
            },
            'ticker/price': {
              'cost': 1,
              'noSymbol': 2
            },
            'ticker/bookTicker': {
              'cost': 1,
              'noSymbol': 2
            },
            'openInterest': 1,
            'pmExchangeInfo': 1
          }
        },
        'dapiData': {
          'get': {
            'openInterestHist': 1,
            'topLongShortAccountRatio': 1,
            'topLongShortPositionRatio': 1,
            'globalLongShortAccountRatio': 1,
            'takerBuySellVol': 1,
            'basis': 1
          }
        },
        'dapiPrivate': {
          'get': {
            'positionSide/dual': 30,
            'order': 1,
            'openOrder': 1,
            'openOrders': {
              'cost': 1,
              'noSymbol': 5
            },
            'allOrders': {
              'cost': 20,
              'noSymbol': 40
            },
            'balance': 1,
            'account': 5,
            'positionMargin/history': 1,
            'positionRisk': 1,
            'userTrades': {
              'cost': 20,
              'noSymbol': 40
            },
            'income': 20,
            'leverageBracket': 1,
            'forceOrders': {
              'cost': 20,
              'noSymbol': 50
            },
            'adlQuantile': 5,
            'orderAmendment': 1,
            'pmAccountInfo': 5
          },
          'post': {
            'positionSide/dual': 1,
            'order': 4,
            'batchOrders': 5,
            'countdownCancelAll': 10,
            'leverage': 1,
            'marginType': 1,
            'positionMargin': 1,
            'listenKey': 1
          },
          'put': {
            'listenKey': 1,
            'order': 1,
            'batchOrders': 5
          },
          'delete': {
            'order': 1,
            'allOpenOrders': 1,
            'batchOrders': 5,
            'listenKey': 1
          }
        },
        'dapiPrivateV2': {
          'get': {
            'leverageBracket': 1
          }
        },
        'fapiPublic': {
          'get': {
            'ping': 1,
            'time': 1,
            'exchangeInfo': 1,
            'depth': {
              'cost': 2,
              'byLimit': [[50, 2], [100, 5], [500, 10], [1000, 20]]
            },
            'trades': 5,
            'historicalTrades': 20,
            'aggTrades': 20,
            'klines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'continuousKlines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'markPriceKlines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'indexPriceKlines': {
              'cost': 1,
              'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]
            },
            'fundingRate': 1,
            'premiumIndex': 1,
            'ticker/24hr': {
              'cost': 1,
              'noSymbol': 40
            },
            'ticker/price': {
              'cost': 1,
              'noSymbol': 2
            },
            'ticker/bookTicker': {
              'cost': 1,
              'noSymbol': 2
            },
            'openInterest': 1,
            'indexInfo': 1,
            'apiTradingStatus': {
              'cost': 1,
              'noSymbol': 10
            },
            'lvtKlines': 1,
            'pmExchangeInfo': 1
          }
        },
        'fapiData': {
          'get': {
            'openInterestHist': 1,
            'topLongShortAccountRatio': 1,
            'topLongShortPositionRatio': 1,
            'globalLongShortAccountRatio': 1,
            'takerlongshortRatio': 1
          }
        },
        'fapiPrivate': {
          'get': {
            'forceOrders': {
              'cost': 20,
              'noSymbol': 50
            },
            'allOrders': 5,
            'openOrder': 1,
            'openOrders': 1,
            'order': 1,
            'account': 5,
            'balance': 5,
            'leverageBracket': 1,
            'positionMargin/history': 1,
            'positionRisk': 5,
            'positionSide/dual': 30,
            'userTrades': 5,
            'income': 30,
            'commissionRate': 20,
            'apiTradingStatus': 1,
            'multiAssetsMargin': 30,
            // broker endpoints
            'apiReferral/ifNewUser': 1,
            'apiReferral/customization': 1,
            'apiReferral/userCustomization': 1,
            'apiReferral/traderNum': 1,
            'apiReferral/overview': 1,
            'apiReferral/tradeVol': 1,
            'apiReferral/rebateVol': 1,
            'apiReferral/traderSummary': 1,
            'adlQuantile': 5,
            'pmAccountInfo': 5
          },
          'post': {
            'batchOrders': 5,
            'positionSide/dual': 1,
            'positionMargin': 1,
            'marginType': 1,
            'order': 4,
            'leverage': 1,
            'listenKey': 1,
            'countdownCancelAll': 10,
            'multiAssetsMargin': 1,
            // broker endpoints
            'apiReferral/customization': 1,
            'apiReferral/userCustomization': 1
          },
          'put': {
            'listenKey': 1
          },
          'delete': {
            'batchOrders': 1,
            'order': 1,
            'allOpenOrders': 1,
            'listenKey': 1
          }
        },
        'fapiPrivateV2': {
          'get': {
            'account': 1,
            'balance': 1,
            'positionRisk': 1
          }
        },
        'eapiPublic': {
          'get': {
            'ping': 1,
            'time': 1,
            'exchangeInfo': 1,
            'index': 1,
            'ticker': 5,
            'mark': 5,
            'depth': 1,
            'klines': 1,
            'trades': 5,
            'historicalTrades': 20,
            'exerciseHistory': 3,
            'openInterest': 3
          }
        },
        'eapiPrivate': {
          'get': {
            'account': 3,
            'position': 5,
            'openOrders': {
              'cost': 1,
              'noSymbol': 40
            },
            'historyOrders': 3,
            'userTrades': 5,
            'exerciseRecord': 5,
            'bill': 1,
            'marginAccount': 3,
            'mmp': 1,
            'countdownCancelAll': 1,
            'order': 1
          },
          'post': {
            'order': 1,
            'batchOrders': 5,
            'listenKey': 1,
            'mmpSet': 1,
            'mmpReset': 1,
            'countdownCancelAll': 1,
            'countdownCancelAllHeartBeat': 10
          },
          'put': {
            'listenKey': 1
          },
          'delete': {
            'order': 1,
            'batchOrders': 1,
            'allOpenOrders': 1,
            'allOpenOrdersByUnderlying': 1,
            'listenKey': 1
          }
        },
        'public': {
          'get': {
            'ping': 1,
            'time': 1,
            'depth': {
              'cost': 1,
              'byLimit': [[100, 1], [500, 5], [1000, 10], [5000, 50]]
            },
            'trades': 1,
            'aggTrades': 1,
            'historicalTrades': 5,
            'klines': 1,
            'ticker/24hr': {
              'cost': 1,
              'noSymbol': 40
            },
            'ticker/price': {
              'cost': 1,
              'noSymbol': 2
            },
            'ticker/bookTicker': {
              'cost': 1,
              'noSymbol': 2
            },
            'exchangeInfo': 10
          },
          'put': {
            'userDataStream': 1
          },
          'post': {
            'userDataStream': 1
          },
          'delete': {
            'userDataStream': 1
          }
        },
        'private': {
          'get': {
            'allOrderList': 10,
            'openOrderList': 3,
            'orderList': 2,
            'order': 2,
            'openOrders': {
              'cost': 3,
              'noSymbol': 40
            },
            'allOrders': 10,
            'account': 10,
            'myTrades': 10,
            'rateLimit/order': 20,
            'myPreventedMatches': 1
          },
          'post': {
            'order/oco': 1,
            'order': 1,
            'order/cancelReplace': 1,
            'order/test': 1
          },
          'delete': {
            'openOrders': 1,
            'orderList': 1,
            'order': 1
          }
        }
      },
      'fees': {
        'trading': {
          'feeSide': 'get',
          'tierBased': false,
          'percentage': true,
          'taker': this.parseNumber('0.001'),
          'maker': this.parseNumber('0.001')
        },
        'linear': {
          'trading': {
            'feeSide': 'quote',
            'tierBased': true,
            'percentage': true,
            'taker': this.parseNumber('0.000400'),
            'maker': this.parseNumber('0.000200'),
            'tiers': {
              'taker': [[this.parseNumber('0'), this.parseNumber('0.000400')], [this.parseNumber('250'), this.parseNumber('0.000400')], [this.parseNumber('2500'), this.parseNumber('0.000350')], [this.parseNumber('7500'), this.parseNumber('0.000320')], [this.parseNumber('22500'), this.parseNumber('0.000300')], [this.parseNumber('50000'), this.parseNumber('0.000270')], [this.parseNumber('100000'), this.parseNumber('0.000250')], [this.parseNumber('200000'), this.parseNumber('0.000220')], [this.parseNumber('400000'), this.parseNumber('0.000200')], [this.parseNumber('750000'), this.parseNumber('0.000170')]],
              'maker': [[this.parseNumber('0'), this.parseNumber('0.000200')], [this.parseNumber('250'), this.parseNumber('0.000160')], [this.parseNumber('2500'), this.parseNumber('0.000140')], [this.parseNumber('7500'), this.parseNumber('0.000120')], [this.parseNumber('22500'), this.parseNumber('0.000100')], [this.parseNumber('50000'), this.parseNumber('0.000080')], [this.parseNumber('100000'), this.parseNumber('0.000060')], [this.parseNumber('200000'), this.parseNumber('0.000040')], [this.parseNumber('400000'), this.parseNumber('0.000020')], [this.parseNumber('750000'), this.parseNumber('0')]]
            }
          }
        },
        'inverse': {
          'trading': {
            'feeSide': 'base',
            'tierBased': true,
            'percentage': true,
            'taker': this.parseNumber('0.000500'),
            'maker': this.parseNumber('0.000100'),
            'tiers': {
              'taker': [[this.parseNumber('0'), this.parseNumber('0.000500')], [this.parseNumber('250'), this.parseNumber('0.000450')], [this.parseNumber('2500'), this.parseNumber('0.000400')], [this.parseNumber('7500'), this.parseNumber('0.000300')], [this.parseNumber('22500'), this.parseNumber('0.000250')], [this.parseNumber('50000'), this.parseNumber('0.000240')], [this.parseNumber('100000'), this.parseNumber('0.000240')], [this.parseNumber('200000'), this.parseNumber('0.000240')], [this.parseNumber('400000'), this.parseNumber('0.000240')], [this.parseNumber('750000'), this.parseNumber('0.000240')]],
              'maker': [[this.parseNumber('0'), this.parseNumber('0.000100')], [this.parseNumber('250'), this.parseNumber('0.000080')], [this.parseNumber('2500'), this.parseNumber('0.000050')], [this.parseNumber('7500'), this.parseNumber('0.0000030')], [this.parseNumber('22500'), this.parseNumber('0')], [this.parseNumber('50000'), this.parseNumber('-0.000050')], [this.parseNumber('100000'), this.parseNumber('-0.000060')], [this.parseNumber('200000'), this.parseNumber('-0.000070')], [this.parseNumber('400000'), this.parseNumber('-0.000080')], [this.parseNumber('750000'), this.parseNumber('-0.000090')]]
            }
          }
        },
        'option': {}
      },
      'commonCurrencies': {
        'BCC': 'BCC',
        'YOYO': 'YOYOW'
      },
      'precisionMode': _number.DECIMAL_PLACES,
      // exchange-specific options
      'options': {
        'sandboxMode': false,
        'fetchMarkets': ['spot', 'linear', 'inverse' // allows CORS in browsers
        // 'option', // does not allow CORS, enable outside of the browser only
        ],

        'fetchCurrencies': true,
        // 'fetchTradesMethod': 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades, eapiPublicGetTrades
        'defaultTimeInForce': 'GTC',
        'defaultType': 'spot',
        'defaultSubType': undefined,
        'hasAlreadyAuthenticatedSuccessfully': false,
        'warnOnFetchOpenOrdersWithoutSymbol': true,
        // not an error
        // https://github.com/ccxt/ccxt/issues/11268
        // https://github.com/ccxt/ccxt/pull/11624
        // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
        // binanceusdm
        'throwMarginModeAlreadySet': false,
        'fetchPositions': 'positionRisk',
        'recvWindow': 10 * 1000,
        'timeDifference': 0,
        'adjustForTimeDifference': false,
        'newOrderRespType': {
          'market': 'FULL',
          'limit': 'FULL' // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)
        },

        'quoteOrderQty': true,
        'broker': {
          'spot': 'x-R4BD3S82',
          'margin': 'x-R4BD3S82',
          'future': 'x-xcKtGhcu',
          'delivery': 'x-xcKtGhcu'
        },
        'accountsByType': {
          'main': 'MAIN',
          'spot': 'MAIN',
          'funding': 'FUNDING',
          'margin': 'MARGIN',
          'cross': 'MARGIN',
          'future': 'UMFUTURE',
          'delivery': 'CMFUTURE',
          'linear': 'UMFUTURE',
          'inverse': 'CMFUTURE'
        },
        'accountsById': {
          'MAIN': 'spot',
          'FUNDING': 'funding',
          'MARGIN': 'margin',
          'UMFUTURE': 'linear',
          'CMFUTURE': 'inverse'
        },
        'networks': {
          'ERC20': 'ETH',
          'TRC20': 'TRX',
          'BEP2': 'BNB',
          'BEP20': 'BSC',
          'OMNI': 'OMNI',
          'EOS': 'EOS',
          'SPL': 'SOL'
        },
        // keeping this object for backward-compatibility
        'reverseNetworks': {
          'tronscan.org': 'TRC20',
          'etherscan.io': 'ERC20',
          'bscscan.com': 'BSC',
          'explorer.binance.org': 'BEP2',
          'bithomp.com': 'XRP',
          'bloks.io': 'EOS',
          'stellar.expert': 'XLM',
          'blockchair.com/bitcoin': 'BTC',
          'blockchair.com/bitcoin-cash': 'BCH',
          'blockchair.com/ecash': 'XEC',
          'explorer.litecoin.net': 'LTC',
          'explorer.avax.network': 'AVAX',
          'solscan.io': 'SOL',
          'polkadot.subscan.io': 'DOT',
          'dashboard.internetcomputer.org': 'ICP',
          'explorer.chiliz.com': 'CHZ',
          'cardanoscan.io': 'ADA',
          'mainnet.theoan.com': 'AION',
          'algoexplorer.io': 'ALGO',
          'explorer.ambrosus.com': 'AMB',
          'viewblock.io/zilliqa': 'ZIL',
          'viewblock.io/arweave': 'AR',
          'explorer.ark.io': 'ARK',
          'atomscan.com': 'ATOM',
          'www.mintscan.io': 'CTK',
          'explorer.bitcoindiamond.org': 'BCD',
          'btgexplorer.com': 'BTG',
          'bts.ai': 'BTS',
          'explorer.celo.org': 'CELO',
          'explorer.nervos.org': 'CKB',
          'cerebro.cortexlabs.ai': 'CTXC',
          'chainz.cryptoid.info': 'VIA',
          'explorer.dcrdata.org': 'DCR',
          'digiexplorer.info': 'DGB',
          'dock.subscan.io': 'DOCK',
          'dogechain.info': 'DOGE',
          'explorer.elrond.com': 'EGLD',
          'blockscout.com': 'ETC',
          'explore-fetchhub.fetch.ai': 'FET',
          'filfox.info': 'FIL',
          'fio.bloks.io': 'FIO',
          'explorer.firo.org': 'FIRO',
          'neoscan.io': 'NEO',
          'ftmscan.com': 'FTM',
          'explorer.gochain.io': 'GO',
          'block.gxb.io': 'GXS',
          'hash-hash.info': 'HBAR',
          'www.hiveblockexplorer.com': 'HIVE',
          'explorer.helium.com': 'HNT',
          'tracker.icon.foundation': 'ICX',
          'www.iostabc.com': 'IOST',
          'explorer.iota.org': 'IOTA',
          'iotexscan.io': 'IOTX',
          'irishub.iobscan.io': 'IRIS',
          'kava.mintscan.io': 'KAVA',
          'scope.klaytn.com': 'KLAY',
          'kmdexplorer.io': 'KMD',
          'kusama.subscan.io': 'KSM',
          'explorer.lto.network': 'LTO',
          'polygonscan.com': 'POLYGON',
          'explorer.ont.io': 'ONT',
          'minaexplorer.com': 'MINA',
          'nanolooker.com': 'NANO',
          'explorer.nebulas.io': 'NAS',
          'explorer.nbs.plus': 'NBS',
          'explorer.nebl.io': 'NEBL',
          'nulscan.io': 'NULS',
          'nxscan.com': 'NXS',
          'explorer.harmony.one': 'ONE',
          'explorer.poa.network': 'POA',
          'qtum.info': 'QTUM',
          'explorer.rsk.co': 'RSK',
          'www.oasisscan.com': 'ROSE',
          'ravencoin.network': 'RVN',
          'sc.tokenview.com': 'SC',
          'secretnodes.com': 'SCRT',
          'explorer.skycoin.com': 'SKY',
          'steemscan.com': 'STEEM',
          'explorer.stacks.co': 'STX',
          'www.thetascan.io': 'THETA',
          'scan.tomochain.com': 'TOMO',
          'explore.vechain.org': 'VET',
          'explorer.vite.net': 'VITE',
          'www.wanscan.org': 'WAN',
          'wavesexplorer.com': 'WAVES',
          'wax.eosx.io': 'WAXP',
          'waltonchain.pro': 'WTC',
          'chain.nem.ninja': 'XEM',
          'verge-blockchain.info': 'XVG',
          'explorer.yoyow.org': 'YOYOW',
          'explorer.zcha.in': 'ZEC',
          'explorer.zensystem.io': 'ZEN'
        },
        'networksById': {
          'tronscan.org': 'TRC20',
          'etherscan.io': 'ERC20',
          'bscscan.com': 'BSC',
          'explorer.binance.org': 'BEP2',
          'bithomp.com': 'XRP',
          'bloks.io': 'EOS',
          'stellar.expert': 'XLM',
          'blockchair.com/bitcoin': 'BTC',
          'blockchair.com/bitcoin-cash': 'BCH',
          'blockchair.com/ecash': 'XEC',
          'explorer.litecoin.net': 'LTC',
          'explorer.avax.network': 'AVAX',
          'solscan.io': 'SOL',
          'polkadot.subscan.io': 'DOT',
          'dashboard.internetcomputer.org': 'ICP',
          'explorer.chiliz.com': 'CHZ',
          'cardanoscan.io': 'ADA',
          'mainnet.theoan.com': 'AION',
          'algoexplorer.io': 'ALGO',
          'explorer.ambrosus.com': 'AMB',
          'viewblock.io/zilliqa': 'ZIL',
          'viewblock.io/arweave': 'AR',
          'explorer.ark.io': 'ARK',
          'atomscan.com': 'ATOM',
          'www.mintscan.io': 'CTK',
          'explorer.bitcoindiamond.org': 'BCD',
          'btgexplorer.com': 'BTG',
          'bts.ai': 'BTS',
          'explorer.celo.org': 'CELO',
          'explorer.nervos.org': 'CKB',
          'cerebro.cortexlabs.ai': 'CTXC',
          'chainz.cryptoid.info': 'VIA',
          'explorer.dcrdata.org': 'DCR',
          'digiexplorer.info': 'DGB',
          'dock.subscan.io': 'DOCK',
          'dogechain.info': 'DOGE',
          'explorer.elrond.com': 'EGLD',
          'blockscout.com': 'ETC',
          'explore-fetchhub.fetch.ai': 'FET',
          'filfox.info': 'FIL',
          'fio.bloks.io': 'FIO',
          'explorer.firo.org': 'FIRO',
          'neoscan.io': 'NEO',
          'ftmscan.com': 'FTM',
          'explorer.gochain.io': 'GO',
          'block.gxb.io': 'GXS',
          'hash-hash.info': 'HBAR',
          'www.hiveblockexplorer.com': 'HIVE',
          'explorer.helium.com': 'HNT',
          'tracker.icon.foundation': 'ICX',
          'www.iostabc.com': 'IOST',
          'explorer.iota.org': 'IOTA',
          'iotexscan.io': 'IOTX',
          'irishub.iobscan.io': 'IRIS',
          'kava.mintscan.io': 'KAVA',
          'scope.klaytn.com': 'KLAY',
          'kmdexplorer.io': 'KMD',
          'kusama.subscan.io': 'KSM',
          'explorer.lto.network': 'LTO',
          'polygonscan.com': 'POLYGON',
          'explorer.ont.io': 'ONT',
          'minaexplorer.com': 'MINA',
          'nanolooker.com': 'NANO',
          'explorer.nebulas.io': 'NAS',
          'explorer.nbs.plus': 'NBS',
          'explorer.nebl.io': 'NEBL',
          'nulscan.io': 'NULS',
          'nxscan.com': 'NXS',
          'explorer.harmony.one': 'ONE',
          'explorer.poa.network': 'POA',
          'qtum.info': 'QTUM',
          'explorer.rsk.co': 'RSK',
          'www.oasisscan.com': 'ROSE',
          'ravencoin.network': 'RVN',
          'sc.tokenview.com': 'SC',
          'secretnodes.com': 'SCRT',
          'explorer.skycoin.com': 'SKY',
          'steemscan.com': 'STEEM',
          'explorer.stacks.co': 'STX',
          'www.thetascan.io': 'THETA',
          'scan.tomochain.com': 'TOMO',
          'explore.vechain.org': 'VET',
          'explorer.vite.net': 'VITE',
          'www.wanscan.org': 'WAN',
          'wavesexplorer.com': 'WAVES',
          'wax.eosx.io': 'WAXP',
          'waltonchain.pro': 'WTC',
          'chain.nem.ninja': 'XEM',
          'verge-blockchain.info': 'XVG',
          'explorer.yoyow.org': 'YOYOW',
          'explorer.zcha.in': 'ZEC',
          'explorer.zensystem.io': 'ZEN'
        },
        'impliedNetworks': {
          'ETH': {
            'ERC20': 'ETH'
          },
          'TRX': {
            'TRC20': 'TRX'
          }
        },
        'legalMoney': {
          'MXN': true,
          'UGX': true,
          'SEK': true,
          'CHF': true,
          'VND': true,
          'AED': true,
          'DKK': true,
          'KZT': true,
          'HUF': true,
          'PEN': true,
          'PHP': true,
          'USD': true,
          'TRY': true,
          'EUR': true,
          'NGN': true,
          'PLN': true,
          'BRL': true,
          'ZAR': true,
          'KES': true,
          'ARS': true,
          'RUB': true,
          'AUD': true,
          'NOK': true,
          'CZK': true,
          'GBP': true,
          'UAH': true,
          'GHS': true,
          'HKD': true,
          'CAD': true,
          'INR': true,
          'JPY': true,
          'NZD': true
        },
        'legalMoneyCurrenciesById': {
          'BUSD': 'USD'
        }
      },
      // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2
      'exceptions': {
        'exact': {
          'System is under maintenance.': _errors.OnMaintenance,
          'System abnormality': _errors.ExchangeError,
          'You are not authorized to execute this request.': _errors.PermissionDenied,
          'API key does not exist': _errors.AuthenticationError,
          'Order would trigger immediately.': _errors.OrderImmediatelyFillable,
          'Stop price would trigger immediately.': _errors.OrderImmediatelyFillable,
          'Order would immediately match and take.': _errors.OrderImmediatelyFillable,
          'Account has insufficient balance for requested action.': _errors.InsufficientFunds,
          'Rest API trading is not enabled.': _errors.ExchangeNotAvailable,
          "You don't have permission.": _errors.PermissionDenied,
          'Market is closed.': _errors.ExchangeNotAvailable,
          'Too many requests. Please try again later.': _errors.DDoSProtection,
          'This action is disabled on this account.': _errors.AccountSuspended,
          'This type of sub-account exceeds the maximum number limit': _errors.BadRequest,
          'This symbol is not permitted for this account.': _errors.PermissionDenied,
          '-1000': _errors.ExchangeNotAvailable,
          '-1001': _errors.ExchangeNotAvailable,
          '-1002': _errors.AuthenticationError,
          '-1003': _errors.RateLimitExceeded,
          '-1004': _errors.DDoSProtection,
          '-1005': _errors.PermissionDenied,
          '-1006': _errors.BadResponse,
          '-1007': _errors.RequestTimeout,
          '-1010': _errors.BadResponse,
          '-1011': _errors.PermissionDenied,
          '-1013': _errors.InvalidOrder,
          '-1014': _errors.InvalidOrder,
          '-1015': _errors.RateLimitExceeded,
          '-1016': _errors.ExchangeNotAvailable,
          '-1020': _errors.BadRequest,
          '-1021': _errors.InvalidNonce,
          '-1022': _errors.AuthenticationError,
          '-1023': _errors.BadRequest,
          '-1099': _errors.AuthenticationError,
          '-1100': _errors.BadRequest,
          '-1101': _errors.BadRequest,
          '-1102': _errors.BadRequest,
          '-1103': _errors.BadRequest,
          '-1104': _errors.BadRequest,
          '-1105': _errors.BadRequest,
          '-1106': _errors.BadRequest,
          '-1108': _errors.BadRequest,
          '-1109': _errors.AuthenticationError,
          '-1110': _errors.BadRequest,
          '-1111': _errors.BadRequest,
          '-1112': _errors.InvalidOrder,
          '-1113': _errors.BadRequest,
          '-1114': _errors.BadRequest,
          '-1115': _errors.BadRequest,
          '-1116': _errors.BadRequest,
          '-1117': _errors.BadRequest,
          '-1118': _errors.BadRequest,
          '-1119': _errors.BadRequest,
          '-1120': _errors.BadRequest,
          '-1121': _errors.BadSymbol,
          '-1125': _errors.AuthenticationError,
          '-1127': _errors.BadRequest,
          '-1128': _errors.BadRequest,
          '-1130': _errors.BadRequest,
          '-1131': _errors.BadRequest,
          '-1135': _errors.BadRequest,
          '-1136': _errors.BadRequest,
          '-2008': _errors.AuthenticationError,
          '-2010': _errors.ExchangeError,
          '-2011': _errors.OrderNotFound,
          '-2013': _errors.OrderNotFound,
          '-2014': _errors.AuthenticationError,
          '-2015': _errors.AuthenticationError,
          '-2016': _errors.BadRequest,
          '-2018': _errors.InsufficientFunds,
          '-2019': _errors.InsufficientFunds,
          '-2020': _errors.OrderNotFillable,
          '-2021': _errors.OrderImmediatelyFillable,
          '-2022': _errors.InvalidOrder,
          '-2023': _errors.InsufficientFunds,
          '-2024': _errors.InsufficientFunds,
          '-2025': _errors.InvalidOrder,
          '-2026': _errors.InvalidOrder,
          '-2027': _errors.InvalidOrder,
          '-2028': _errors.InsufficientFunds,
          '-3000': _errors.ExchangeError,
          '-3001': _errors.AuthenticationError,
          '-3002': _errors.BadSymbol,
          '-3003': _errors.BadRequest,
          '-3004': _errors.ExchangeError,
          '-3005': _errors.InsufficientFunds,
          '-3006': _errors.InsufficientFunds,
          '-3007': _errors.ExchangeError,
          '-3008': _errors.InsufficientFunds,
          '-3009': _errors.BadRequest,
          '-3010': _errors.BadRequest,
          '-3011': _errors.BadRequest,
          '-3012': _errors.InsufficientFunds,
          '-3013': _errors.BadRequest,
          '-3014': _errors.AccountSuspended,
          '-3015': _errors.BadRequest,
          '-3016': _errors.BadRequest,
          '-3017': _errors.ExchangeError,
          '-3018': _errors.AccountSuspended,
          '-3019': _errors.AccountSuspended,
          '-3020': _errors.InsufficientFunds,
          '-3021': _errors.BadRequest,
          '-3022': _errors.AccountSuspended,
          '-3023': _errors.BadRequest,
          '-3024': _errors.ExchangeError,
          '-3025': _errors.BadRequest,
          '-3026': _errors.BadRequest,
          '-3027': _errors.BadSymbol,
          '-3028': _errors.BadSymbol,
          '-3029': _errors.ExchangeError,
          '-3036': _errors.AccountSuspended,
          '-3037': _errors.ExchangeError,
          '-3038': _errors.BadRequest,
          '-3041': _errors.InsufficientFunds,
          '-3042': _errors.BadRequest,
          '-3043': _errors.BadRequest,
          '-3044': _errors.DDoSProtection,
          '-3045': _errors.ExchangeError,
          '-3999': _errors.ExchangeError,
          '-4001': _errors.BadRequest,
          '-4002': _errors.BadRequest,
          '-4003': _errors.BadRequest,
          '-4004': _errors.AuthenticationError,
          '-4005': _errors.RateLimitExceeded,
          '-4006': _errors.BadRequest,
          '-4007': _errors.BadRequest,
          '-4008': _errors.BadRequest,
          '-4010': _errors.BadRequest,
          '-4011': _errors.BadRequest,
          '-4012': _errors.BadRequest,
          '-4013': _errors.AuthenticationError,
          '-4014': _errors.PermissionDenied,
          '-4015': _errors.ExchangeError,
          '-4016': _errors.PermissionDenied,
          '-4017': _errors.PermissionDenied,
          '-4018': _errors.BadSymbol,
          '-4019': _errors.BadSymbol,
          '-4021': _errors.BadRequest,
          '-4022': _errors.BadRequest,
          '-4023': _errors.ExchangeError,
          '-4024': _errors.InsufficientFunds,
          '-4025': _errors.InsufficientFunds,
          '-4026': _errors.InsufficientFunds,
          '-4027': _errors.ExchangeError,
          '-4028': _errors.BadRequest,
          '-4029': _errors.BadRequest,
          '-4030': _errors.ExchangeError,
          '-4031': _errors.ExchangeError,
          '-4032': _errors.ExchangeError,
          '-4033': _errors.BadRequest,
          '-4034': _errors.ExchangeError,
          '-4035': _errors.PermissionDenied,
          '-4036': _errors.BadRequest,
          '-4037': _errors.ExchangeError,
          '-4038': _errors.ExchangeError,
          '-4039': _errors.BadRequest,
          '-4040': _errors.BadRequest,
          '-4041': _errors.ExchangeError,
          '-4042': _errors.ExchangeError,
          '-4043': _errors.BadRequest,
          '-4044': _errors.BadRequest,
          '-4045': _errors.ExchangeError,
          '-4046': _errors.AuthenticationError,
          '-4047': _errors.BadRequest,
          '-5001': _errors.BadRequest,
          '-5002': _errors.InsufficientFunds,
          '-5003': _errors.InsufficientFunds,
          '-5004': _errors.BadRequest,
          '-5005': _errors.InsufficientFunds,
          '-5006': _errors.BadRequest,
          '-5007': _errors.BadRequest,
          '-5008': _errors.InsufficientFunds,
          '-5009': _errors.BadRequest,
          '-5010': _errors.ExchangeError,
          '-5011': _errors.BadRequest,
          '-5012': _errors.ExchangeError,
          '-5013': _errors.InsufficientFunds,
          '-5021': _errors.BadRequest,
          '-6001': _errors.BadRequest,
          '-6003': _errors.BadRequest,
          '-6004': _errors.ExchangeError,
          '-6005': _errors.InvalidOrder,
          '-6006': _errors.BadRequest,
          '-6007': _errors.BadRequest,
          '-6008': _errors.BadRequest,
          '-6009': _errors.RateLimitExceeded,
          '-6011': _errors.BadRequest,
          '-6012': _errors.InsufficientFunds,
          '-6013': _errors.ExchangeError,
          '-6014': _errors.BadRequest,
          '-6015': _errors.BadRequest,
          '-6016': _errors.BadRequest,
          '-6017': _errors.BadRequest,
          '-6018': _errors.BadRequest,
          '-6019': _errors.AuthenticationError,
          '-6020': _errors.BadRequest,
          '-7001': _errors.BadRequest,
          '-7002': _errors.BadRequest,
          '-9000': _errors.InsufficientFunds,
          '-10017': _errors.BadRequest,
          '-11008': _errors.InsufficientFunds,
          '-12014': _errors.RateLimitExceeded,
          '-13000': _errors.BadRequest,
          '-13001': _errors.BadRequest,
          '-13002': _errors.BadRequest,
          '-13003': _errors.BadRequest,
          '-13004': _errors.BadRequest,
          '-13005': _errors.BadRequest,
          '-13006': _errors.InvalidOrder,
          '-13007': _errors.AuthenticationError,
          '-21001': _errors.BadRequest,
          '-21002': _errors.BadRequest,
          '-21003': _errors.BadRequest,
          '100001003': _errors.AuthenticationError,
          '200003903': _errors.AuthenticationError // {"code":200003903,"msg":"Your identity verification has been rejected. Please complete identity verification again."}
        },

        'broad': {
          'has no operation privilege': _errors.PermissionDenied,
          'MAX_POSITION': _errors.InvalidOrder // {"code":-2010,"msg":"Filter failure: MAX_POSITION"}
        }
      }
    });
  }

  isInverse(type, subType = undefined) {
    if (subType === undefined) {
      return type === 'delivery';
    } else {
      return subType === 'inverse';
    }
  }
  isLinear(type, subType = undefined) {
    if (subType === undefined) {
      return type === 'future' || type === 'swap';
    } else {
      return subType === 'linear';
    }
  }
  setSandboxMode(enable) {
    super.setSandboxMode(enable);
    this.options['sandboxMode'] = enable;
  }
  convertExpireDate(date) {
    // parse YYMMDD to timestamp
    const year = date.slice(0, 2);
    const month = date.slice(2, 4);
    const day = date.slice(4, 6);
    const reconstructedDate = '20' + year + '-' + month + '-' + day + 'T00:00:00Z';
    return reconstructedDate;
  }
  createExpiredOptionMarket(symbol) {
    // support expired option contracts
    const settle = 'USDT';
    const optionParts = symbol.split('-');
    const symbolBase = symbol.split('/');
    let base = undefined;
    if (symbol.indexOf('/') > -1) {
      base = this.safeString(symbolBase, 0);
    } else {
      base = this.safeString(optionParts, 0);
    }
    const expiry = this.safeString(optionParts, 1);
    const strike = this.safeString(optionParts, 2);
    const optionType = this.safeString(optionParts, 3);
    const datetime = this.convertExpireDate(expiry);
    const timestamp = this.parse8601(datetime);
    return {
      'id': base + '-' + expiry + '-' + strike + '-' + optionType,
      'symbol': base + '/' + settle + ':' + settle + '-' + expiry + '-' + strike + '-' + optionType,
      'base': base,
      'quote': settle,
      'baseId': base,
      'quoteId': settle,
      'active': undefined,
      'type': 'option',
      'linear': undefined,
      'inverse': undefined,
      'spot': false,
      'swap': false,
      'future': false,
      'option': true,
      'margin': false,
      'contract': true,
      'contractSize': undefined,
      'expiry': timestamp,
      'expiryDatetime': datetime,
      'optionType': optionType === 'C' ? 'call' : 'put',
      'strike': strike,
      'settle': settle,
      'settleId': settle,
      'precision': {
        'amount': undefined,
        'price': undefined
      },
      'limits': {
        'amount': {
          'min': undefined,
          'max': undefined
        },
        'price': {
          'min': undefined,
          'max': undefined
        },
        'cost': {
          'min': undefined,
          'max': undefined
        }
      },
      'info': undefined
    };
  }
  market(symbol) {
    if (this.markets === undefined) {
      throw new _errors.ExchangeError(this.id + ' markets not loaded');
    }
    // defaultType has legacy support on binance
    let defaultType = this.safeString(this.options, 'defaultType');
    const defaultSubType = this.safeString(this.options, 'defaultSubType');
    const isLegacyLinear = defaultType === 'future';
    const isLegacyInverse = defaultType === 'delivery';
    const isLegacy = isLegacyLinear || isLegacyInverse;
    if (typeof symbol === 'string') {
      if (symbol in this.markets) {
        const market = this.markets[symbol];
        // begin diff
        if (isLegacy && market['spot']) {
          const settle = isLegacyLinear ? market['quote'] : market['base'];
          const futuresSymbol = symbol + ':' + settle;
          if (futuresSymbol in this.markets) {
            return this.markets[futuresSymbol];
          }
        } else {
          return market;
        }
        // end diff
      } else if (symbol in this.markets_by_id) {
        const markets = this.markets_by_id[symbol];
        // begin diff
        if (isLegacyLinear) {
          defaultType = 'linear';
        } else if (isLegacyInverse) {
          defaultType = 'inverse';
        } else if (defaultType === undefined) {
          defaultType = defaultSubType;
        }
        // end diff
        for (let i = 0; i < markets.length; i++) {
          const market = markets[i];
          if (market[defaultType]) {
            return market;
          }
        }
        return markets[0];
      } else if (symbol.indexOf('/') > -1 && symbol.indexOf(':') < 0) {
        // support legacy symbols
        const [base, quote] = symbol.split('/');
        const settle = quote === 'USD' ? base : quote;
        const futuresSymbol = symbol + ':' + settle;
        if (futuresSymbol in this.markets) {
          return this.markets[futuresSymbol];
        }
      } else if (symbol.indexOf('-C') > -1 || symbol.indexOf('-P') > -1) {
        // both exchange-id and unified symbols are supported this way regardless of the defaultType
        return this.createExpiredOptionMarket(symbol);
      }
    }
    throw new _errors.BadSymbol(this.id + ' does not have market symbol ' + symbol);
  }
  safeMarket(marketId = undefined, market = undefined, delimiter = undefined, marketType = undefined) {
    const isOption = marketId !== undefined && (marketId.indexOf('-C') > -1 || marketId.indexOf('-P') > -1);
    if (isOption && !(marketId in this.markets_by_id)) {
      // handle expired option contracts
      return this.createExpiredOptionMarket(marketId);
    }
    return super.safeMarket(marketId, market, delimiter, marketType);
  }
  costToPrecision(symbol, cost) {
    return this.decimalToPrecision(cost, _number.TRUNCATE, this.markets[symbol]['precision']['quote'], this.precisionMode, this.paddingMode);
  }
  currencyToPrecision(code, fee, networkCode = undefined) {
    // info is available in currencies only if the user has configured his api keys
    if (this.safeValue(this.currencies[code], 'precision') !== undefined) {
      return this.decimalToPrecision(fee, _number.TRUNCATE, this.currencies[code]['precision'], this.precisionMode, this.paddingMode);
    } else {
      return this.numberToString(fee);
    }
  }
  nonce() {
    return this.milliseconds() - this.options['timeDifference'];
  }
  async fetchTime(params = {}) {
    /**
     * @method
     * @name binance#fetchTime
     * @description fetches the current integer timestamp in milliseconds from the exchange server
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {int} the current integer timestamp in milliseconds from the exchange server
     */
    const defaultType = this.safeString2(this.options, 'fetchTime', 'defaultType', 'spot');
    const type = this.safeString(params, 'type', defaultType);
    const query = this.omit(params, 'type');
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchTime', undefined, params);
    let method = 'publicGetTime';
    if (this.isLinear(type, subType)) {
      method = 'fapiPublicGetTime';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPublicGetTime';
    }
    const response = await this[method](query);
    return this.safeInteger(response, 'serverTime');
  }
  async fetchCurrencies(params = {}) {
    /**
     * @method
     * @name binance#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} an associative dictionary of currencies
     */
    const fetchCurrenciesEnabled = this.safeValue(this.options, 'fetchCurrencies');
    if (!fetchCurrenciesEnabled) {
      return undefined;
    }
    // this endpoint requires authentication
    // while fetchCurrencies is a public API method by design
    // therefore we check the keys here
    // and fallback to generating the currencies from the markets
    if (!this.checkRequiredCredentials(false)) {
      return undefined;
    }
    // sandbox/testnet does not support sapi endpoints
    const apiBackup = this.safeString(this.urls, 'apiBackup');
    if (apiBackup !== undefined) {
      return undefined;
    }
    const response = await this.sapiGetCapitalConfigGetall(params);
    const result = {};
    for (let i = 0; i < response.length; i++) {
      //
      //    {
      //        "coin": "LINK",
      //        "depositAllEnable": true,
      //        "withdrawAllEnable": true,
      //        "name": "ChainLink",
      //        "free": "0",
      //        "locked": "0",
      //        "freeze": "0",
      //        "withdrawing": "0",
      //        "ipoing": "0",
      //        "ipoable": "0",
      //        "storage": "0",
      //        "isLegalMoney": false,
      //        "trading": true,
      //        "networkList": [
      //            {
      //                "network": "BSC",
      //                "coin": "LINK",
      //                "withdrawIntegerMultiple": "0.00000001",
      //                "isDefault": false,
      //                "depositEnable": true,
      //                "withdrawEnable": true,
      //                "depositDesc": "",
      //                "withdrawDesc": "",
      //                "specialTips": "",
      //                "specialWithdrawTips": "The network you have selected is BSC. Please ensure that the withdrawal address supports the Binance Smart Chain network. You will lose your assets if the chosen platform does not support retrievals.",
      //                "name": "BNB Smart Chain (BEP20)",
      //                "resetAddressStatus": false,
      //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
      //                "addressRule": "",
      //                "memoRegex": "",
      //                "withdrawFee": "0.012",
      //                "withdrawMin": "0.024",
      //                "withdrawMax": "9999999999.99999999",
      //                "minConfirm": "15",
      //                "unLockConfirm": "0",
      //                "sameAddress": false,
      //                "estimatedArrivalTime": "5",
      //                "busy": false,
      //                "country": "AE,BINANCE_BAHRAIN_BSC"
      //            },
      //            {
      //                "network": "BNB",
      //                "coin": "LINK",
      //                "withdrawIntegerMultiple": "0.00000001",
      //                "isDefault": false,
      //                "depositEnable": true,
      //                "withdrawEnable": true,
      //                "depositDesc": "",
      //                "withdrawDesc": "",
      //                "specialTips": "Both a MEMO and an Address are required to successfully deposit your LINK BEP2 tokens to Binance.",
      //                "specialWithdrawTips": "",
      //                "name": "BNB Beacon Chain (BEP2)",
      //                "resetAddressStatus": false,
      //                "addressRegex": "^(bnb1)[0-9a-z]{38}$",
      //                "addressRule": "",
      //                "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
      //                "withdrawFee": "0.002",
      //                "withdrawMin": "0.01",
      //                "withdrawMax": "10000000000",
      //                "minConfirm": "1",
      //                "unLockConfirm": "0",
      //                "sameAddress": true,
      //                "estimatedArrivalTime": "5",
      //                "busy": false,
      //                "country": "AE,BINANCE_BAHRAIN_BSC"
      //            },
      //            {
      //                "network": "ETH",
      //                "coin": "LINK",
      //                "withdrawIntegerMultiple": "0.00000001",
      //                "isDefault": true,
      //                "depositEnable": true,
      //                "withdrawEnable": true,
      //                "depositDesc": "",
      //                "withdrawDesc": "",
      //                "name": "Ethereum (ERC20)",
      //                "resetAddressStatus": false,
      //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
      //                "addressRule": "",
      //                "memoRegex": "",
      //                "withdrawFee": "0.55",
      //                "withdrawMin": "1.1",
      //                "withdrawMax": "10000000000",
      //                "minConfirm": "12",
      //                "unLockConfirm": "0",
      //                "sameAddress": false,
      //                "estimatedArrivalTime": "5",
      //                "busy": false,
      //                "country": "AE,BINANCE_BAHRAIN_BSC"
      //            }
      //        ]
      //    }
      //
      const entry = response[i];
      const id = this.safeString(entry, 'coin');
      const name = this.safeString(entry, 'name');
      const code = this.safeCurrencyCode(id);
      let minPrecision = undefined;
      let isWithdrawEnabled = true;
      let isDepositEnabled = true;
      const networkList = this.safeValue(entry, 'networkList', []);
      const fees = {};
      let fee = undefined;
      for (let j = 0; j < networkList.length; j++) {
        const networkItem = networkList[j];
        const network = this.safeString(networkItem, 'network');
        // const name = this.safeString (networkItem, 'name');
        const withdrawFee = this.safeNumber(networkItem, 'withdrawFee');
        const depositEnable = this.safeValue(networkItem, 'depositEnable');
        const withdrawEnable = this.safeValue(networkItem, 'withdrawEnable');
        isDepositEnabled = isDepositEnabled || depositEnable;
        isWithdrawEnabled = isWithdrawEnabled || withdrawEnable;
        fees[network] = withdrawFee;
        const isDefault = this.safeValue(networkItem, 'isDefault');
        if (isDefault || fee === undefined) {
          fee = withdrawFee;
        }
        const precisionTick = this.safeString(networkItem, 'withdrawIntegerMultiple');
        // avoid zero values, which are mostly from fiat or leveraged tokens : https://github.com/ccxt/ccxt/pull/14902#issuecomment-1271636731
        // so, when there is zero instead of i.e. 0.001, then we skip those cases, because we don't know the precision - it might be because of network is suspended or other reasons
        if (!_Precise.Precise.stringEq(precisionTick, '0')) {
          minPrecision = minPrecision === undefined ? precisionTick : _Precise.Precise.stringMin(minPrecision, precisionTick);
        }
      }
      const trading = this.safeValue(entry, 'trading');
      const active = isWithdrawEnabled && isDepositEnabled && trading;
      let maxDecimalPlaces = undefined;
      if (minPrecision !== undefined) {
        maxDecimalPlaces = parseInt(this.numberToString(this.precisionFromString(minPrecision)));
      }
      result[code] = {
        'id': id,
        'name': name,
        'code': code,
        'precision': maxDecimalPlaces,
        'info': entry,
        'active': active,
        'deposit': isDepositEnabled,
        'withdraw': isWithdrawEnabled,
        'networks': networkList,
        'fee': fee,
        'fees': fees,
        'limits': this.limits
      };
    }
    return result;
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name binance#fetchMarkets
     * @description retrieves data on all markets for binance
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    let promises = [];
    const rawFetchMarkets = this.safeValue(this.options, 'fetchMarkets', ['spot', 'linear', 'inverse']);
    const sandboxMode = this.safeValue(this.options, 'sandboxMode', false);
    const fetchMarkets = [];
    for (let i = 0; i < rawFetchMarkets.length; i++) {
      const type = rawFetchMarkets[i];
      if (type === 'option' && sandboxMode) {
        continue;
      }
      fetchMarkets.push(type);
    }
    for (let i = 0; i < fetchMarkets.length; i++) {
      const marketType = fetchMarkets[i];
      if (marketType === 'spot') {
        promises.push(this.publicGetExchangeInfo(params));
      } else if (marketType === 'linear') {
        promises.push(this.fapiPublicGetExchangeInfo(params));
      } else if (marketType === 'inverse') {
        promises.push(this.dapiPublicGetExchangeInfo(params));
      } else if (marketType === 'option') {
        promises.push(this.eapiPublicGetExchangeInfo(params));
      } else {
        throw new _errors.ExchangeError(this.id + ' fetchMarkets() this.options fetchMarkets "' + marketType + '" is not a supported market type');
      }
    }
    promises = await Promise.all(promises);
    const spotMarkets = this.safeValue(this.safeValue(promises, 0), 'symbols', []);
    const futureMarkets = this.safeValue(this.safeValue(promises, 1), 'symbols', []);
    const deliveryMarkets = this.safeValue(this.safeValue(promises, 2), 'symbols', []);
    const optionMarkets = this.safeValue(this.safeValue(promises, 3), 'optionSymbols', []);
    let markets = spotMarkets;
    markets = this.arrayConcat(markets, futureMarkets);
    markets = this.arrayConcat(markets, deliveryMarkets);
    markets = this.arrayConcat(markets, optionMarkets);
    //
    // spot / margin
    //
    //     {
    //         "timezone":"UTC",
    //         "serverTime":1575416692969,
    //         "rateLimits":[
    //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
    //             {"rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":100},
    //             {"rateLimitType":"ORDERS","interval":"DAY","intervalNum":1,"limit":200000}
    //         ],
    //         "exchangeFilters":[],
    //         "symbols":[
    //             {
    //                 "symbol":"ETHBTC",
    //                 "status":"TRADING",
    //                 "baseAsset":"ETH",
    //                 "baseAssetPrecision":8,
    //                 "quoteAsset":"BTC",
    //                 "quotePrecision":8,
    //                 "baseCommissionPrecision":8,
    //                 "quoteCommissionPrecision":8,
    //                 "orderTypes":["LIMIT","LIMIT_MAKER","MARKET","STOP_LOSS_LIMIT","TAKE_PROFIT_LIMIT"],
    //                 "icebergAllowed":true,
    //                 "ocoAllowed":true,
    //                 "quoteOrderQtyMarketAllowed":true,
    //                 "allowTrailingStop":false,
    //                 "isSpotTradingAllowed":true,
    //                 "isMarginTradingAllowed":true,
    //                 "filters":[
    //                     {"filterType":"PRICE_FILTER","minPrice":"0.00000100","maxPrice":"100000.00000000","tickSize":"0.00000100"},
    //                     {"filterType":"PERCENT_PRICE","multiplierUp":"5","multiplierDown":"0.2","avgPriceMins":5},
    //                     {"filterType":"LOT_SIZE","minQty":"0.00100000","maxQty":"100000.00000000","stepSize":"0.00100000"},
    //                     {"filterType":"MIN_NOTIONAL","minNotional":"0.00010000","applyToMarket":true,"avgPriceMins":5},
    //                     {"filterType":"ICEBERG_PARTS","limit":10},
    //                     {"filterType":"MARKET_LOT_SIZE","minQty":"0.00000000","maxQty":"63100.00000000","stepSize":"0.00000000"},
    //                     {"filterType":"MAX_NUM_ORDERS","maxNumOrders":200},
    //                     {"filterType":"MAX_NUM_ALGO_ORDERS","maxNumAlgoOrders":5}
    //                 ],
    //                 "permissions":["SPOT","MARGIN"]}
    //             },
    //         ],
    //     }
    //
    // futures/usdt-margined (fapi)
    //
    //     {
    //         "timezone":"UTC",
    //         "serverTime":1575417244353,
    //         "rateLimits":[
    //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
    //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":1200}
    //         ],
    //         "exchangeFilters":[],
    //         "symbols":[
    //             {
    //                 "symbol":"BTCUSDT",
    //                 "status":"TRADING",
    //                 "maintMarginPercent":"2.5000",
    //                 "requiredMarginPercent":"5.0000",
    //                 "baseAsset":"BTC",
    //                 "quoteAsset":"USDT",
    //                 "pricePrecision":2,
    //                 "quantityPrecision":3,
    //                 "baseAssetPrecision":8,
    //                 "quotePrecision":8,
    //                 "filters":[
    //                     {"minPrice":"0.01","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.01"},
    //                     {"stepSize":"0.001","filterType":"LOT_SIZE","maxQty":"1000","minQty":"0.001"},
    //                     {"stepSize":"0.001","filterType":"MARKET_LOT_SIZE","maxQty":"1000","minQty":"0.001"},
    //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
    //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
    //                 ],
    //                 "orderTypes":["LIMIT","MARKET","STOP"],
    //                 "timeInForce":["GTC","IOC","FOK","GTX"]
    //             }
    //         ]
    //     }
    //
    // delivery/coin-margined (dapi)
    //
    //     {
    //         "timezone": "UTC",
    //         "serverTime": 1597667052958,
    //         "rateLimits": [
    //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":6000},
    //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":6000}
    //         ],
    //         "exchangeFilters": [],
    //         "symbols": [
    //             {
    //                 "symbol": "BTCUSD_200925",
    //                 "pair": "BTCUSD",
    //                 "contractType": "CURRENT_QUARTER",
    //                 "deliveryDate": 1601020800000,
    //                 "onboardDate": 1590739200000,
    //                 "contractStatus": "TRADING",
    //                 "contractSize": 100,
    //                 "marginAsset": "BTC",
    //                 "maintMarginPercent": "2.5000",
    //                 "requiredMarginPercent": "5.0000",
    //                 "baseAsset": "BTC",
    //                 "quoteAsset": "USD",
    //                 "pricePrecision": 1,
    //                 "quantityPrecision": 0,
    //                 "baseAssetPrecision": 8,
    //                 "quotePrecision": 8,
    //                 "equalQtyPrecision": 4,
    //                 "filters": [
    //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
    //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
    //                     {"stepSize":"0","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
    //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
    //                     {"multiplierDown":"0.9500","multiplierUp":"1.0500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
    //                 ],
    //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
    //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
    //             },
    //             {
    //                 "symbol": "BTCUSD_PERP",
    //                 "pair": "BTCUSD",
    //                 "contractType": "PERPETUAL",
    //                 "deliveryDate": 4133404800000,
    //                 "onboardDate": 1596006000000,
    //                 "contractStatus": "TRADING",
    //                 "contractSize": 100,
    //                 "marginAsset": "BTC",
    //                 "maintMarginPercent": "2.5000",
    //                 "requiredMarginPercent": "5.0000",
    //                 "baseAsset": "BTC",
    //                 "quoteAsset": "USD",
    //                 "pricePrecision": 1,
    //                 "quantityPrecision": 0,
    //                 "baseAssetPrecision": 8,
    //                 "quotePrecision": 8,
    //                 "equalQtyPrecision": 4,
    //                 "filters": [
    //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
    //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
    //                     {"stepSize":"1","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
    //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
    //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
    //                 ],
    //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
    //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
    //             }
    //         ]
    //     }
    //
    // options (eapi)
    //
    //     {
    //         "timezone": "UTC",
    //         "serverTime": 1675912490405,
    //         "optionContracts": [
    //             {
    //                 "id": 1,
    //                 "baseAsset": "SOL",
    //                 "quoteAsset": "USDT",
    //                 "underlying": "SOLUSDT",
    //                 "settleAsset": "USDT"
    //             },
    //             ...
    //         ],
    //         "optionAssets": [
    //             {"id":1,"name":"USDT"}
    //         ],
    //         "optionSymbols": [
    //             {
    //                 "contractId": 3,
    //                 "expiryDate": 1677225600000,
    //                 "filters": [
    //                     {"filterType":"PRICE_FILTER","minPrice":"724.6","maxPrice":"919.2","tickSize":"0.1"},
    //                     {"filterType":"LOT_SIZE","minQty":"0.01","maxQty":"1000","stepSize":"0.01"}
    //                 ],
    //                 "id": 2474,
    //                 "symbol": "ETH-230224-800-C",
    //                 "side": "CALL",
    //                 "strikePrice": "800.00000000",
    //                 "underlying": "ETHUSDT",
    //                 "unit": 1,
    //                 "makerFeeRate": "0.00020000",
    //                 "takerFeeRate": "0.00020000",
    //                 "minQty": "0.01",
    //                 "maxQty": "1000",
    //                 "initialMargin": "0.15000000",
    //                 "maintenanceMargin": "0.07500000",
    //                 "minInitialMargin": "0.10000000",
    //                 "minMaintenanceMargin": "0.05000000",
    //                 "priceScale": 1,
    //                 "quantityScale": 2,
    //                 "quoteAsset": "USDT"
    //             },
    //             ...
    //         ],
    //         "rateLimits": [
    //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":400},
    //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":100},
    //             {"rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":30}
    //         ]
    //     }
    //
    if (this.options['adjustForTimeDifference']) {
      await this.loadTimeDifference();
    }
    const result = [];
    for (let i = 0; i < markets.length; i++) {
      result.push(this.parseMarket(markets[i]));
    }
    return result;
  }
  parseMarket(market) {
    let swap = false;
    let future = false;
    let option = false;
    const underlying = this.safeString(market, 'underlying');
    const id = this.safeString(market, 'symbol');
    const optionParts = id.split('-');
    const optionBase = this.safeString(optionParts, 0);
    const lowercaseId = this.safeStringLower(market, 'symbol');
    const baseId = this.safeString(market, 'baseAsset', optionBase);
    const quoteId = this.safeString(market, 'quoteAsset');
    const base = this.safeCurrencyCode(baseId);
    const quote = this.safeCurrencyCode(quoteId);
    const contractType = this.safeString(market, 'contractType');
    let contract = ('contractType' in market);
    let expiry = this.safeInteger2(market, 'deliveryDate', 'expiryDate');
    let settleId = this.safeString(market, 'marginAsset');
    if (contractType === 'PERPETUAL' || expiry === 4133404800000) {
      // some swap markets do not have contract type, eg: BTCST
      expiry = undefined;
      swap = true;
    } else if (underlying !== undefined) {
      contract = true;
      option = true;
      settleId = settleId === undefined ? 'USDT' : settleId;
    } else {
      future = true;
    }
    const settle = this.safeCurrencyCode(settleId);
    const spot = !contract;
    const filters = this.safeValue(market, 'filters', []);
    const filtersByType = this.indexBy(filters, 'filterType');
    const status = this.safeString2(market, 'status', 'contractStatus');
    let contractSize = undefined;
    let fees = this.fees;
    let linear = undefined;
    let inverse = undefined;
    const strike = this.safeInteger(market, 'strikePrice');
    let symbol = base + '/' + quote;
    if (contract) {
      if (swap) {
        symbol = symbol + ':' + settle;
      } else if (future) {
        symbol = symbol + ':' + settle + '-' + this.yymmdd(expiry);
      } else if (option) {
        symbol = symbol + ':' + settle + '-' + this.yymmdd(expiry) + '-' + this.numberToString(strike) + '-' + this.safeString(optionParts, 3);
      }
      contractSize = this.safeNumber2(market, 'contractSize', 'unit', this.parseNumber('1'));
      linear = settle === quote;
      inverse = settle === base;
      const feesType = linear ? 'linear' : 'inverse';
      fees = this.safeValue(this.fees, feesType, {});
    }
    let active = status === 'TRADING';
    if (spot) {
      const permissions = this.safeValue(market, 'permissions', []);
      for (let j = 0; j < permissions.length; j++) {
        if (permissions[j] === 'TRD_GRP_003') {
          active = false;
          break;
        }
      }
    }
    const isMarginTradingAllowed = this.safeValue(market, 'isMarginTradingAllowed', false);
    let unifiedType = undefined;
    if (spot) {
      unifiedType = 'spot';
    } else if (swap) {
      unifiedType = 'swap';
    } else if (future) {
      unifiedType = 'future';
    } else if (option) {
      unifiedType = 'option';
      active = undefined;
    }
    const entry = {
      'id': id,
      'lowercaseId': lowercaseId,
      'symbol': symbol,
      'base': base,
      'quote': quote,
      'settle': settle,
      'baseId': baseId,
      'quoteId': quoteId,
      'settleId': settleId,
      'type': unifiedType,
      'spot': spot,
      'margin': spot && isMarginTradingAllowed,
      'swap': swap,
      'future': future,
      'option': option,
      'active': active,
      'contract': contract,
      'linear': linear,
      'inverse': inverse,
      'taker': fees['trading']['taker'],
      'maker': fees['trading']['maker'],
      'contractSize': contractSize,
      'expiry': expiry,
      'expiryDatetime': this.iso8601(expiry),
      'strike': strike,
      'optionType': this.safeStringLower(market, 'side'),
      'precision': {
        'amount': this.safeInteger2(market, 'quantityPrecision', 'quantityScale'),
        'price': this.safeInteger2(market, 'pricePrecision', 'priceScale'),
        'base': this.safeInteger(market, 'baseAssetPrecision'),
        'quote': this.safeInteger(market, 'quotePrecision')
      },
      'limits': {
        'leverage': {
          'min': undefined,
          'max': undefined
        },
        'amount': {
          'min': this.safeNumber(market, 'minQty'),
          'max': this.safeNumber(market, 'maxQty')
        },
        'price': {
          'min': undefined,
          'max': undefined
        },
        'cost': {
          'min': undefined,
          'max': undefined
        }
      },
      'info': market
    };
    if ('PRICE_FILTER' in filtersByType) {
      const filter = this.safeValue(filtersByType, 'PRICE_FILTER', {});
      // PRICE_FILTER reports zero values for maxPrice
      // since they updated filter types in November 2018
      // https://github.com/ccxt/ccxt/issues/4286
      // therefore limits['price']['max'] doesn't have any meaningful value except undefined
      entry['limits']['price'] = {
        'min': this.safeNumber(filter, 'minPrice'),
        'max': this.safeNumber(filter, 'maxPrice')
      };
      entry['precision']['price'] = this.precisionFromString(filter['tickSize']);
    }
    if ('LOT_SIZE' in filtersByType) {
      const filter = this.safeValue(filtersByType, 'LOT_SIZE', {});
      const stepSize = this.safeString(filter, 'stepSize');
      entry['precision']['amount'] = this.precisionFromString(stepSize);
      entry['limits']['amount'] = {
        'min': this.safeNumber(filter, 'minQty'),
        'max': this.safeNumber(filter, 'maxQty')
      };
    }
    if ('MARKET_LOT_SIZE' in filtersByType) {
      const filter = this.safeValue(filtersByType, 'MARKET_LOT_SIZE', {});
      entry['limits']['market'] = {
        'min': this.safeNumber(filter, 'minQty'),
        'max': this.safeNumber(filter, 'maxQty')
      };
    }
    if ('MIN_NOTIONAL' in filtersByType) {
      const filter = this.safeValue(filtersByType, 'MIN_NOTIONAL', {});
      entry['limits']['cost']['min'] = this.safeNumber2(filter, 'minNotional', 'notional');
    }
    return entry;
  }
  parseBalanceHelper(entry) {
    const account = this.account();
    account['used'] = this.safeString(entry, 'locked');
    account['free'] = this.safeString(entry, 'free');
    const interest = this.safeString(entry, 'interest');
    const debt = this.safeString(entry, 'borrowed');
    account['debt'] = _Precise.Precise.stringAdd(debt, interest);
    return account;
  }
  parseBalance(response, type = undefined, marginMode = undefined) {
    const result = {
      'info': response
    };
    let timestamp = undefined;
    const isolated = marginMode === 'isolated';
    const cross = type === 'margin' || marginMode === 'cross';
    if (!isolated && (type === 'spot' || cross)) {
      timestamp = this.safeInteger(response, 'updateTime');
      const balances = this.safeValue2(response, 'balances', 'userAssets', []);
      for (let i = 0; i < balances.length; i++) {
        const balance = balances[i];
        const currencyId = this.safeString(balance, 'asset');
        const code = this.safeCurrencyCode(currencyId);
        const account = this.account();
        account['free'] = this.safeString(balance, 'free');
        account['used'] = this.safeString(balance, 'locked');
        if (cross) {
          const debt = this.safeString(balance, 'borrowed');
          const interest = this.safeString(balance, 'interest');
          account['debt'] = _Precise.Precise.stringAdd(debt, interest);
        }
        result[code] = account;
      }
    } else if (isolated) {
      const assets = this.safeValue(response, 'assets');
      for (let i = 0; i < assets.length; i++) {
        const asset = assets[i];
        const marketId = this.safeValue(asset, 'symbol');
        const symbol = this.safeSymbol(marketId, undefined, undefined, 'spot');
        const base = this.safeValue(asset, 'baseAsset', {});
        const quote = this.safeValue(asset, 'quoteAsset', {});
        const baseCode = this.safeCurrencyCode(this.safeString(base, 'asset'));
        const quoteCode = this.safeCurrencyCode(this.safeString(quote, 'asset'));
        const subResult = {};
        subResult[baseCode] = this.parseBalanceHelper(base);
        subResult[quoteCode] = this.parseBalanceHelper(quote);
        result[symbol] = this.safeBalance(subResult);
      }
    } else if (type === 'savings') {
      const positionAmountVos = this.safeValue(response, 'positionAmountVos', []);
      for (let i = 0; i < positionAmountVos.length; i++) {
        const entry = positionAmountVos[i];
        const currencyId = this.safeString(entry, 'asset');
        const code = this.safeCurrencyCode(currencyId);
        const account = this.account();
        const usedAndTotal = this.safeString(entry, 'amount');
        account['total'] = usedAndTotal;
        account['used'] = usedAndTotal;
        result[code] = account;
      }
    } else if (type === 'funding') {
      for (let i = 0; i < response.length; i++) {
        const entry = response[i];
        const account = this.account();
        const currencyId = this.safeString(entry, 'asset');
        const code = this.safeCurrencyCode(currencyId);
        account['free'] = this.safeString(entry, 'free');
        const frozen = this.safeString(entry, 'freeze');
        const withdrawing = this.safeString(entry, 'withdrawing');
        const locked = this.safeString(entry, 'locked');
        account['used'] = _Precise.Precise.stringAdd(frozen, _Precise.Precise.stringAdd(locked, withdrawing));
        result[code] = account;
      }
    } else {
      let balances = response;
      if (!Array.isArray(response)) {
        balances = this.safeValue(response, 'assets', []);
      }
      for (let i = 0; i < balances.length; i++) {
        const balance = balances[i];
        const currencyId = this.safeString(balance, 'asset');
        const code = this.safeCurrencyCode(currencyId);
        const account = this.account();
        account['free'] = this.safeString(balance, 'availableBalance');
        account['used'] = this.safeString(balance, 'initialMargin');
        account['total'] = this.safeString2(balance, 'marginBalance', 'balance');
        result[code] = account;
      }
    }
    result['timestamp'] = timestamp;
    result['datetime'] = this.iso8601(timestamp);
    return isolated ? result : this.safeBalance(result);
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name binance#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string|undefined} params.type 'future', 'delivery', 'savings', 'funding', or 'spot'
     * @param {string|undefined} params.marginMode 'cross' or 'isolated', for margin trading, uses this.options.defaultMarginMode if not passed, defaults to undefined/None/null
     * @param {[string]|undefined} params.symbols unified market symbols, only used in isolated margin mode
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const defaultType = this.safeString2(this.options, 'fetchBalance', 'defaultType', 'spot');
    let type = this.safeString(params, 'type', defaultType);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchBalance', undefined, params);
    const [marginMode, query] = this.handleMarginModeAndParams('fetchBalance', params);
    let method = 'privateGetAccount';
    const request = {};
    if (this.isLinear(type, subType)) {
      const options = this.safeValue(this.options, type, {});
      const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});
      method = this.safeString(fetchBalanceOptions, 'method', 'fapiPrivateV2GetAccount');
      type = 'linear';
    } else if (this.isInverse(type, subType)) {
      const options = this.safeValue(this.options, type, {});
      const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});
      method = this.safeString(fetchBalanceOptions, 'method', 'dapiPrivateGetAccount');
      type = 'inverse';
    } else if (marginMode === 'isolated') {
      method = 'sapiGetMarginIsolatedAccount';
      const paramSymbols = this.safeValue(params, 'symbols');
      if (paramSymbols !== undefined) {
        let symbols = '';
        if (Array.isArray(paramSymbols)) {
          symbols = this.marketId(paramSymbols[0]);
          for (let i = 1; i < paramSymbols.length; i++) {
            const symbol = paramSymbols[i];
            const id = this.marketId(symbol);
            symbols += ',' + id;
          }
        } else {
          symbols = paramSymbols;
        }
        request['symbols'] = symbols;
      }
    } else if (type === 'margin' || marginMode === 'cross') {
      method = 'sapiGetMarginAccount';
    } else if (type === 'savings') {
      method = 'sapiGetLendingUnionAccount';
    } else if (type === 'funding') {
      method = 'sapiPostAssetGetFundingAsset';
    }
    const requestParams = this.omit(query, ['type', 'symbols']);
    const response = await this[method](this.extend(request, requestParams));
    //
    // spot
    //
    //     {
    //         makerCommission: 10,
    //         takerCommission: 10,
    //         buyerCommission: 0,
    //         sellerCommission: 0,
    //         canTrade: true,
    //         canWithdraw: true,
    //         canDeposit: true,
    //         updateTime: 1575357359602,
    //         accountType: "MARGIN",
    //         balances: [
    //             { asset: "BTC", free: "0.00219821", locked: "0.00000000"  },
    //         ]
    //     }
    //
    // margin (cross)
    //
    //     {
    //         "borrowEnabled":true,
    //         "marginLevel":"999.00000000",
    //         "totalAssetOfBtc":"0.00000000",
    //         "totalLiabilityOfBtc":"0.00000000",
    //         "totalNetAssetOfBtc":"0.00000000",
    //         "tradeEnabled":true,
    //         "transferEnabled":true,
    //         "userAssets":[
    //             {"asset":"MATIC","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
    //             {"asset":"VET","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
    //             {"asset":"USDT","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"}
    //         ],
    //     }
    //
    // margin (isolated)
    //
    //    {
    //        info: {
    //            assets: [
    //                {
    //                    baseAsset: {
    //                        asset: '1INCH',
    //                        borrowEnabled: true,
    //                        borrowed: '0',
    //                        free: '0',
    //                        interest: '0',
    //                        locked: '0',
    //                        netAsset: '0',
    //                        netAssetOfBtc: '0',
    //                        repayEnabled: true,
    //                        totalAsset: '0'
    //                    },
    //                    quoteAsset: {
    //                        asset: 'USDT',
    //                        borrowEnabled: true,
    //                        borrowed: '0',
    //                        free: '11',
    //                        interest: '0',
    //                        locked: '0',
    //                        netAsset: '11',
    //                        netAssetOfBtc: '0.00054615',
    //                        repayEnabled: true,
    //                        totalAsset: '11'
    //                    },
    //                    symbol: '1INCHUSDT',
    //                    isolatedCreated: true,
    //                    marginLevel: '999',
    //                    marginLevelStatus: 'EXCESSIVE',
    //                    marginRatio: '5',
    //                    indexPrice: '0.59184331',
    //                    liquidatePrice: '0',
    //                    liquidateRate: '0',
    //                    tradeEnabled: true,
    //                    enabled: true
    //                },
    //            ]
    //        }
    //    }
    //
    // futures (fapi)
    //
    //     fapiPrivateGetAccount
    //
    //     {
    //         "feeTier":0,
    //         "canTrade":true,
    //         "canDeposit":true,
    //         "canWithdraw":true,
    //         "updateTime":0,
    //         "totalInitialMargin":"0.00000000",
    //         "totalMaintMargin":"0.00000000",
    //         "totalWalletBalance":"4.54000000",
    //         "totalUnrealizedProfit":"0.00000000",
    //         "totalMarginBalance":"4.54000000",
    //         "totalPositionInitialMargin":"0.00000000",
    //         "totalOpenOrderInitialMargin":"0.00000000",
    //         "maxWithdrawAmount":"4.54000000",
    //         "assets":[
    //             {
    //                 "asset":"USDT",
    //                 "walletBalance":"4.54000000",
    //                 "unrealizedProfit":"0.00000000",
    //                 "marginBalance":"4.54000000",
    //                 "maintMargin":"0.00000000",
    //                 "initialMargin":"0.00000000",
    //                 "positionInitialMargin":"0.00000000",
    //                 "openOrderInitialMargin":"0.00000000",
    //                 "maxWithdrawAmount":"4.54000000"
    //             }
    //         ],
    //         "positions":[
    //             {
    //                 "symbol":"BTCUSDT",
    //                 "initialMargin":"0.00000",
    //                 "maintMargin":"0.00000",
    //                 "unrealizedProfit":"0.00000000",
    //                 "positionInitialMargin":"0.00000",
    //                 "openOrderInitialMargin":"0.00000"
    //             }
    //         ]
    //     }
    //
    //     fapiPrivateV2GetAccount
    //
    //     {
    //         "feeTier":0,
    //         "canTrade":true,
    //         "canDeposit":true,
    //         "canWithdraw":true,
    //         "updateTime":0,
    //         "totalInitialMargin":"0.00000000",
    //         "totalMaintMargin":"0.00000000",
    //         "totalWalletBalance":"0.00000000",
    //         "totalUnrealizedProfit":"0.00000000",
    //         "totalMarginBalance":"0.00000000",
    //         "totalPositionInitialMargin":"0.00000000",
    //         "totalOpenOrderInitialMargin":"0.00000000",
    //         "totalCrossWalletBalance":"0.00000000",
    //         "totalCrossUnPnl":"0.00000000",
    //         "availableBalance":"0.00000000",
    //         "maxWithdrawAmount":"0.00000000",
    //         "assets":[
    //             {
    //                 "asset":"BNB",
    //                 "walletBalance":"0.01000000",
    //                 "unrealizedProfit":"0.00000000",
    //                 "marginBalance":"0.01000000",
    //                 "maintMargin":"0.00000000",
    //                 "initialMargin":"0.00000000",
    //                 "positionInitialMargin":"0.00000000",
    //                 "openOrderInitialMargin":"0.00000000",
    //                 "maxWithdrawAmount":"0.01000000",
    //                 "crossWalletBalance":"0.01000000",
    //                 "crossUnPnl":"0.00000000",
    //                 "availableBalance":"0.01000000"
    //             }
    //         ],
    //         "positions":[
    //             {
    //                 "symbol":"BTCUSDT",
    //                 "initialMargin":"0",
    //                 "maintMargin":"0",
    //                 "unrealizedProfit":"0.00000000",
    //                 "positionInitialMargin":"0",
    //                 "openOrderInitialMargin":"0",
    //                 "leverage":"20",
    //                 "isolated":false,
    //                 "entryPrice":"0.00000",
    //                 "maxNotional":"5000000",
    //                 "positionSide":"BOTH"
    //             },
    //         ]
    //     }
    //
    //     fapiPrivateV2GetBalance
    //
    //     [
    //         {
    //             "accountAlias":"FzFzXquXXqoC",
    //             "asset":"BNB",
    //             "balance":"0.01000000",
    //             "crossWalletBalance":"0.01000000",
    //             "crossUnPnl":"0.00000000",
    //             "availableBalance":"0.01000000",
    //             "maxWithdrawAmount":"0.01000000"
    //         }
    //     ]
    //
    // savings
    //
    //     {
    //       "totalAmountInBTC": "0.3172",
    //       "totalAmountInUSDT": "10000",
    //       "totalFixedAmountInBTC": "0.3172",
    //       "totalFixedAmountInUSDT": "10000",
    //       "totalFlexibleInBTC": "0",
    //       "totalFlexibleInUSDT": "0",
    //       "positionAmountVos": [
    //         {
    //           "asset": "USDT",
    //           "amount": "10000",
    //           "amountInBTC": "0.3172",
    //           "amountInUSDT": "10000"
    //         },
    //         {
    //           "asset": "BUSD",
    //           "amount": "0",
    //           "amountInBTC": "0",
    //           "amountInUSDT": "0"
    //         }
    //       ]
    //     }
    //
    // binance pay
    //
    //     [
    //       {
    //         "asset": "BUSD",
    //         "free": "1129.83",
    //         "locked": "0",
    //         "freeze": "0",
    //         "withdrawing": "0"
    //       }
    //     ]
    //
    return this.parseBalance(response, type, marginMode);
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 5000, see https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#order-book
    }

    let method = 'publicGetDepth';
    if (market['option']) {
      method = 'eapiPublicGetDepth';
    } else if (market['linear']) {
      method = 'fapiPublicGetDepth';
    } else if (market['inverse']) {
      method = 'dapiPublicGetDepth';
    }
    const response = await this[method](this.extend(request, params));
    //
    // future
    //
    //     {
    //         "lastUpdateId":333598053905,
    //         "E":1618631511986,
    //         "T":1618631511964,
    //         "bids":[
    //             ["2493.56","20.189"],
    //             ["2493.54","1.000"],
    //             ["2493.51","0.005"]
    //         ],
    //         "asks":[
    //             ["2493.57","0.877"],
    //             ["2493.62","0.063"],
    //             ["2493.71","12.054"],
    //         ]
    //     }
    //
    // options (eapi)
    //
    //     {
    //         "bids": [
    //             ["108.7","16.08"],
    //             ["106","21.29"],
    //             ["82.4","0.02"]
    //         ],
    //         "asks": [
    //             ["111.4","19.52"],
    //             ["119.9","17.6"],
    //             ["141.2","31"]
    //         ],
    //         "T": 1676771382078,
    //         "u": 1015939
    //     }
    //
    const timestamp = this.safeInteger(response, 'T');
    const orderbook = this.parseOrderBook(response, symbol, timestamp);
    orderbook['nonce'] = this.safeInteger2(response, 'lastUpdateId', 'u');
    return orderbook;
  }
  parseTicker(ticker, market = undefined) {
    //
    //     {
    //         symbol: 'ETHBTC',
    //         priceChange: '0.00068700',
    //         priceChangePercent: '2.075',
    //         weightedAvgPrice: '0.03342681',
    //         prevClosePrice: '0.03310300',
    //         lastPrice: '0.03378900',
    //         lastQty: '0.07700000',
    //         bidPrice: '0.03378900',
    //         bidQty: '7.16800000',
    //         askPrice: '0.03379000',
    //         askQty: '24.00000000',
    //         openPrice: '0.03310200',
    //         highPrice: '0.03388900',
    //         lowPrice: '0.03306900',
    //         volume: '205478.41000000',
    //         quoteVolume: '6868.48826294',
    //         openTime: 1601469986932,
    //         closeTime: 1601556386932,
    //         firstId: 196098772,
    //         lastId: 196186315,
    //         count: 87544
    //     }
    //
    // coinm
    //     {
    //         baseVolume: '214549.95171161',
    //         closeTime: '1621965286847',
    //         count: '1283779',
    //         firstId: '152560106',
    //         highPrice: '39938.3',
    //         lastId: '153843955',
    //         lastPrice: '37993.4',
    //         lastQty: '1',
    //         lowPrice: '36457.2',
    //         openPrice: '37783.4',
    //         openTime: '1621878840000',
    //         pair: 'BTCUSD',
    //         priceChange: '210.0',
    //         priceChangePercent: '0.556',
    //         symbol: 'BTCUSD_PERP',
    //         volume: '81990451',
    //         weightedAvgPrice: '38215.08713747'
    //     }
    // spot bidsAsks
    //     {
    //         "symbol":"ETHBTC",
    //         "bidPrice":"0.07466800",
    //         "bidQty":"5.31990000",
    //         "askPrice":"0.07466900",
    //         "askQty":"10.93540000"
    //     }
    // usdm bidsAsks
    //     {
    //         "symbol":"BTCUSDT",
    //         "bidPrice":"21321.90",
    //         "bidQty":"33.592",
    //         "askPrice":"21322.00",
    //         "askQty":"1.427",
    //         "time":"1673899207538"
    //     }
    // coinm bidsAsks
    //     {
    //         "symbol":"BTCUSD_PERP",
    //         "pair":"BTCUSD",
    //         "bidPrice":"21301.2",
    //         "bidQty":"188",
    //         "askPrice":"21301.3",
    //         "askQty":"10302",
    //         "time":"1673899278514"
    //     }
    //
    const timestamp = this.safeInteger(ticker, 'closeTime');
    let marketType = undefined;
    if ('time' in ticker) {
      marketType = 'contract';
    }
    if (marketType === undefined) {
      marketType = 'bidQty' in ticker ? 'spot' : 'contract';
    }
    const marketId = this.safeString(ticker, 'symbol');
    const symbol = this.safeSymbol(marketId, market, undefined, marketType);
    const last = this.safeString(ticker, 'lastPrice');
    const isCoinm = ('baseVolume' in ticker);
    let baseVolume = undefined;
    let quoteVolume = undefined;
    if (isCoinm) {
      baseVolume = this.safeString(ticker, 'baseVolume');
      quoteVolume = this.safeString(ticker, 'volume');
    } else {
      baseVolume = this.safeString(ticker, 'volume');
      quoteVolume = this.safeString(ticker, 'quoteVolume');
    }
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.safeString(ticker, 'highPrice'),
      'low': this.safeString(ticker, 'lowPrice'),
      'bid': this.safeString(ticker, 'bidPrice'),
      'bidVolume': this.safeString(ticker, 'bidQty'),
      'ask': this.safeString(ticker, 'askPrice'),
      'askVolume': this.safeString(ticker, 'askQty'),
      'vwap': this.safeString(ticker, 'weightedAvgPrice'),
      'open': this.safeString(ticker, 'openPrice'),
      'close': last,
      'last': last,
      'previousClose': this.safeString(ticker, 'prevClosePrice'),
      'change': this.safeString(ticker, 'priceChange'),
      'percentage': this.safeString(ticker, 'priceChangePercent'),
      'average': undefined,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    }, market);
  }
  async fetchStatus(params = {}) {
    /**
     * @method
     * @name binance#fetchStatus
     * @description the latest known information on the availability of the exchange API
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
     */
    const response = await this.sapiGetSystemStatus(params);
    //
    //     {
    //         "status": 0,              // 0: normal，1：system maintenance
    //         "msg": "normal"           // "normal", "system_maintenance"
    //     }
    //
    const statusRaw = this.safeString(response, 'status');
    return {
      'status': this.safeString({
        '0': 'ok',
        '1': 'maintenance'
      }, statusRaw, statusRaw),
      'updated': undefined,
      'eta': undefined,
      'url': undefined,
      'info': response
    };
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name binance#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    let method = 'publicGetTicker24hr';
    if (market['linear']) {
      method = 'fapiPublicGetTicker24hr';
    } else if (market['inverse']) {
      method = 'dapiPublicGetTicker24hr';
    }
    const response = await this[method](this.extend(request, params));
    if (Array.isArray(response)) {
      const firstTicker = this.safeValue(response, 0, {});
      return this.parseTicker(firstTicker, market);
    }
    return this.parseTicker(response, market);
  }
  async fetchBidsAsks(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchBidsAsks
     * @description fetches the bid and ask price and volume for multiple markets
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the bids and asks for, all markets are returned if not assigned
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    let market = undefined;
    if (symbols !== undefined) {
      const first = this.safeString(symbols, 0);
      market = this.market(first);
    }
    let type = undefined;
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchBidsAsks', market, params);
    [type, params] = this.handleMarketTypeAndParams('fetchBidsAsks', market, params);
    let method = undefined;
    if (this.isLinear(type, subType)) {
      method = 'fapiPublicGetTickerBookTicker';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPublicGetTickerBookTicker';
    } else {
      method = 'publicGetTickerBookTicker';
    }
    const response = await this[method](params);
    return this.parseTickers(response, symbols);
  }
  async fetchLastPrices(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchLastPrices
     * @description fetches the last price for multiple markets
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the last prices
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.getMarketFromSymbols(symbols);
    const [marketType, query] = this.handleMarketTypeAndParams('fetchLastPrices', market, params);
    let method = undefined;
    if (marketType === 'future') {
      method = 'fapiPublicGetTickerPrice';
      //
      //     [
      //         {
      //             "symbol": "LTCBTC",
      //             "price": "4.00000200"
      //             "time": 1589437530011
      //         },
      //         ...
      //     ]
      //
    } else if (marketType === 'delivery') {
      method = 'dapiPublicGetTickerPrice';
      //
      //     [
      //         {
      //             "symbol": "BTCUSD_200626",
      //             "ps": "9647.8",
      //             "price": "9647.8",
      //             "time": 1591257246176
      //         }
      //     ]
      //
    } else if (marketType === 'spot') {
      method = 'publicGetTickerPrice';
      //
      //     [
      //         {
      //             "symbol": "LTCBTC",
      //             "price": "4.00000200"
      //         },
      //         ...
      //     ]
      //
    } else {
      throw new _errors.NotSupported(this.id + ' fetchLastPrices() does not support ' + marketType + ' markets yet');
    }
    const response = await this[method](query);
    return this.parseLastPrices(response, symbols);
  }
  parseLastPrice(info, market = undefined) {
    //
    // spot
    //
    //     {
    //         "symbol": "LTCBTC",
    //         "price": "4.00000200"
    //     }
    //
    // usdm (swap/future)
    //
    //     {
    //         "symbol": "BTCUSDT",
    //         "price": "6000.01",
    //         "time": 1589437530011   // Transaction time
    //     }
    //
    //
    // coinm (swap/future)
    //
    //     {
    //         "symbol": "BTCUSD_200626", // symbol ("BTCUSD_200626", "BTCUSD_PERP", etc..)
    //         "ps": "BTCUSD", // pair
    //         "price": "9647.8",
    //         "time": 1591257246176
    //     }
    //
    const marketId = this.safeString(info, 'symbol');
    const defaultType = this.safeString(this.options, 'defaultType', 'spot');
    market = this.safeMarket(marketId, market, undefined, defaultType);
    const timestamp = this.safeInteger(info, 'time');
    const price = this.safeNumber(info, 'price');
    return {
      'symbol': market['symbol'],
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'price': price,
      'side': undefined,
      'baseVolume': undefined,
      'quoteVolume': undefined,
      'info': info
    };
  }
  async fetchTickers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchTickers
     * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const defaultType = this.safeString2(this.options, 'fetchTickers', 'defaultType', 'spot');
    const type = this.safeString(params, 'type', defaultType);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchTickers', undefined, params);
    const query = this.omit(params, 'type');
    let defaultMethod = undefined;
    if (this.isLinear(type, subType)) {
      defaultMethod = 'fapiPublicGetTicker24hr';
    } else if (this.isInverse(type, subType)) {
      defaultMethod = 'dapiPublicGetTicker24hr';
    } else {
      defaultMethod = 'publicGetTicker24hr';
    }
    const method = this.safeString(this.options, 'fetchTickersMethod', defaultMethod);
    const response = await this[method](query);
    return this.parseTickers(response, symbols);
  }
  parseOHLCV(ohlcv, market = undefined) {
    // when api method = publicGetKlines || fapiPublicGetKlines || dapiPublicGetKlines
    //     [
    //         1591478520000, // open time
    //         "0.02501300",  // open
    //         "0.02501800",  // high
    //         "0.02500000",  // low
    //         "0.02500000",  // close
    //         "22.19000000", // volume
    //         1591478579999, // close time
    //         "0.55490906",  // quote asset volume
    //         40,            // number of trades
    //         "10.92900000", // taker buy base asset volume
    //         "0.27336462",  // taker buy quote asset volume
    //         "0"            // ignore
    //     ]
    //
    //  when api method = fapiPublicGetMarkPriceKlines || fapiPublicGetIndexPriceKlines
    //     [
    //         [
    //         1591256460000,          // Open time
    //         "9653.29201333",        // Open
    //         "9654.56401333",        // High
    //         "9653.07367333",        // Low
    //         "9653.07367333",        // Close (or latest price)
    //         "0",                    // Ignore
    //         1591256519999,          // Close time
    //         "0",                    // Ignore
    //         60,                     // Number of bisic data
    //         "0",                    // Ignore
    //         "0",                    // Ignore
    //         "0"                     // Ignore
    //         ]
    //     ]
    //
    // options
    //
    //     {
    //         "open": "32.2",
    //         "high": "32.2",
    //         "low": "32.2",
    //         "close": "32.2",
    //         "volume": "0",
    //         "interval": "5m",
    //         "tradeCount": 0,
    //         "takerVolume": "0",
    //         "takerAmount": "0",
    //         "amount": "0",
    //         "openTime": 1677096900000,
    //         "closeTime": 1677097200000
    //     }
    //
    return [this.safeInteger2(ohlcv, 0, 'closeTime'), this.safeNumber2(ohlcv, 1, 'open'), this.safeNumber2(ohlcv, 2, 'high'), this.safeNumber2(ohlcv, 3, 'low'), this.safeNumber2(ohlcv, 4, 'close'), this.safeNumber2(ohlcv, 5, 'volume')];
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string|undefined} params.price "mark" or "index" for mark price and index price candles
     * @param {int|undefined} params.until timestamp in ms of the latest candle to fetch
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets
    // the reality is that the time range wider than 500 candles won't work right
    const defaultLimit = 500;
    const maxLimit = 1500;
    const price = this.safeString(params, 'price');
    const until = this.safeInteger(params, 'until');
    params = this.omit(params, ['price', 'until']);
    limit = limit === undefined ? defaultLimit : Math.min(limit, maxLimit);
    const request = {
      'interval': this.safeString(this.timeframes, timeframe, timeframe),
      'limit': limit
    };
    if (price === 'index') {
      request['pair'] = market['id']; // Index price takes this argument instead of symbol
    } else {
      request['symbol'] = market['id'];
    }
    // const duration = this.parseTimeframe (timeframe);
    if (since !== undefined) {
      request['startTime'] = since;
      //
      // It didn't work before without the endTime
      // https://github.com/ccxt/ccxt/issues/8454
      //
      if (market['inverse']) {
        if (since > 0) {
          const duration = this.parseTimeframe(timeframe);
          const endTime = this.sum(since, limit * duration * 1000 - 1);
          const now = this.milliseconds();
          request['endTime'] = Math.min(now, endTime);
        }
      }
    }
    if (until !== undefined) {
      request['endTime'] = until;
    }
    let method = 'publicGetKlines';
    if (market['option']) {
      method = 'eapiPublicGetKlines';
    } else if (price === 'mark') {
      if (market['inverse']) {
        method = 'dapiPublicGetMarkPriceKlines';
      } else {
        method = 'fapiPublicGetMarkPriceKlines';
      }
    } else if (price === 'index') {
      if (market['inverse']) {
        method = 'dapiPublicGetIndexPriceKlines';
      } else {
        method = 'fapiPublicGetIndexPriceKlines';
      }
    } else if (market['linear']) {
      method = 'fapiPublicGetKlines';
    } else if (market['inverse']) {
      method = 'dapiPublicGetKlines';
    }
    const response = await this[method](this.extend(request, params));
    //
    //     [
    //         [1591478520000,"0.02501300","0.02501800","0.02500000","0.02500000","22.19000000",1591478579999,"0.55490906",40,"10.92900000","0.27336462","0"],
    //         [1591478580000,"0.02499600","0.02500900","0.02499400","0.02500300","21.34700000",1591478639999,"0.53370468",24,"7.53800000","0.18850725","0"],
    //         [1591478640000,"0.02500800","0.02501100","0.02500300","0.02500800","154.14200000",1591478699999,"3.85405839",97,"5.32300000","0.13312641","0"],
    //     ]
    //
    // options (eapi)
    //
    //     [
    //         {
    //             "open": "32.2",
    //             "high": "32.2",
    //             "low": "32.2",
    //             "close": "32.2",
    //             "volume": "0",
    //             "interval": "5m",
    //             "tradeCount": 0,
    //             "takerVolume": "0",
    //             "takerAmount": "0",
    //             "amount": "0",
    //             "openTime": 1677096900000,
    //             "closeTime": 1677097200000
    //         }
    //     ]
    //
    return this.parseOHLCVs(response, market, timeframe, since, limit);
  }
  parseTrade(trade, market = undefined) {
    if ('isDustTrade' in trade) {
      return this.parseDustTrade(trade, market);
    }
    //
    // aggregate trades
    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
    //
    //     {
    //         "a": 26129,         // Aggregate tradeId
    //         "p": "0.01633102",  // Price
    //         "q": "4.70443515",  // Quantity
    //         "f": 27781,         // First tradeId
    //         "l": 27781,         // Last tradeId
    //         "T": 1498793709153, // Timestamp
    //         "m": true,          // Was the buyer the maker?
    //         "M": true           // Was the trade the best price match?
    //     }
    //
    // recent public trades and old public trades
    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list
    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data
    //
    //     {
    //         "id": 28457,
    //         "price": "4.00000100",
    //         "qty": "12.00000000",
    //         "time": 1499865549590,
    //         "isBuyerMaker": true,
    //         "isBestMatch": true
    //     }
    //
    // private trades
    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data
    //
    //     {
    //         "symbol": "BNBBTC",
    //         "id": 28457,
    //         "orderId": 100234,
    //         "price": "4.00000100",
    //         "qty": "12.00000000",
    //         "commission": "10.10000000",
    //         "commissionAsset": "BNB",
    //         "time": 1499865549590,
    //         "isBuyer": true,
    //         "isMaker": false,
    //         "isBestMatch": true
    //     }
    //
    // futures trades
    // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data
    //
    //     {
    //       "accountId": 20,
    //       "buyer": False,
    //       "commission": "-0.07819010",
    //       "commissionAsset": "USDT",
    //       "counterPartyId": 653,
    //       "id": 698759,
    //       "maker": False,
    //       "orderId": 25851813,
    //       "price": "7819.01",
    //       "qty": "0.002",
    //       "quoteQty": "0.01563",
    //       "realizedPnl": "-0.91539999",
    //       "side": "SELL",
    //       "symbol": "BTCUSDT",
    //       "time": 1569514978020
    //     }
    //     {
    //       "symbol": "BTCUSDT",
    //       "id": 477128891,
    //       "orderId": 13809777875,
    //       "side": "SELL",
    //       "price": "38479.55",
    //       "qty": "0.001",
    //       "realizedPnl": "-0.00009534",
    //       "marginAsset": "USDT",
    //       "quoteQty": "38.47955",
    //       "commission": "-0.00076959",
    //       "commissionAsset": "USDT",
    //       "time": 1612733566708,
    //       "positionSide": "BOTH",
    //       "maker": true,
    //       "buyer": false
    //     }
    //
    // { respType: FULL }
    //
    //     {
    //       "price": "4000.00000000",
    //       "qty": "1.00000000",
    //       "commission": "4.00000000",
    //       "commissionAsset": "USDT",
    //       "tradeId": "1234",
    //     }
    //
    // options: fetchMyTrades
    //
    //     {
    //         "id": 1125899906844226012,
    //         "tradeId": 73,
    //         "orderId": 4638761100843040768,
    //         "symbol": "ETH-230211-1500-C",
    //         "price": "18.70000000",
    //         "quantity": "-0.57000000",
    //         "fee": "0.17305890",
    //         "realizedProfit": "-3.53400000",
    //         "side": "SELL",
    //         "type": "LIMIT",
    //         "volatility": "0.30000000",
    //         "liquidity": "MAKER",
    //         "time": 1676085216845,
    //         "priceScale": 1,
    //         "quantityScale": 2,
    //         "optionSide": "CALL",
    //         "quoteAsset": "USDT"
    //     }
    //
    // options: fetchTrades
    //
    //     {
    //         "id": 1,
    //         "symbol": "ETH-230216-1500-C",
    //         "price": "35.5",
    //         "qty": "0.03",
    //         "quoteQty": "1.065",
    //         "side": 1,
    //         "time": 1676366446072
    //     }
    //
    const timestamp = this.safeInteger2(trade, 'T', 'time');
    const price = this.safeString2(trade, 'p', 'price');
    let amount = this.safeString2(trade, 'q', 'qty');
    amount = this.safeString(trade, 'quantity', amount);
    const cost = this.safeString2(trade, 'quoteQty', 'baseQty'); // inverse futures
    const marketId = this.safeString(trade, 'symbol');
    const isSpotTrade = 'isIsolated' in trade || 'M' in trade || 'orderListId' in trade;
    const marketType = isSpotTrade ? 'spot' : 'contract';
    market = this.safeMarket(marketId, market, undefined, marketType);
    const symbol = market['symbol'];
    let id = this.safeString2(trade, 't', 'a');
    id = this.safeString2(trade, 'tradeId', 'id', id);
    let side = undefined;
    const orderId = this.safeString(trade, 'orderId');
    const buyerMaker = this.safeValue2(trade, 'm', 'isBuyerMaker');
    let takerOrMaker = undefined;
    if (buyerMaker !== undefined) {
      side = buyerMaker ? 'sell' : 'buy'; // this is reversed intentionally
    } else if ('side' in trade) {
      side = this.safeStringLower(trade, 'side');
    } else {
      if ('isBuyer' in trade) {
        side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side
      }
    }

    let fee = undefined;
    if ('commission' in trade) {
      fee = {
        'cost': this.safeString(trade, 'commission'),
        'currency': this.safeCurrencyCode(this.safeString(trade, 'commissionAsset'))
      };
    }
    if ('isMaker' in trade) {
      takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';
    }
    if ('maker' in trade) {
      takerOrMaker = trade['maker'] ? 'maker' : 'taker';
    }
    if ('optionSide' in trade || market['option']) {
      const settle = this.safeCurrencyCode(this.safeString(trade, 'quoteAsset', 'USDT'));
      takerOrMaker = this.safeStringLower(trade, 'liquidity');
      if ('fee' in trade) {
        fee = {
          'cost': this.safeString(trade, 'fee'),
          'currency': settle
        };
      }
      if (side !== 'buy' && side !== 'sell') {
        side = side === '1' ? 'buy' : 'sell';
      }
      if ('optionSide' in trade) {
        if (side !== 'buy') {
          amount = _Precise.Precise.stringMul('-1', amount);
        }
      }
    }
    return this.safeTrade({
      'info': trade,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'id': id,
      'order': orderId,
      'type': this.safeStringLower(trade, 'type'),
      'side': side,
      'takerOrMaker': takerOrMaker,
      'price': price,
      'amount': amount,
      'cost': cost,
      'fee': fee
    }, market);
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.
      // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.
      // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.
      // 'limit': 500,     // default = 500, maximum = 1000
    };

    let method = this.safeString(this.options, 'fetchTradesMethod');
    if (method === undefined) {
      if (market['option']) {
        method = 'eapiPublicGetTrades';
      } else if (market['linear']) {
        method = 'fapiPublicGetAggTrades';
      } else if (market['inverse']) {
        method = 'dapiPublicGetAggTrades';
      } else {
        method = 'publicGetAggTrades';
      }
    }
    if (!market['option']) {
      if (since !== undefined) {
        request['startTime'] = since;
        // https://github.com/ccxt/ccxt/issues/6400
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
        request['endTime'] = this.sum(since, 3600000);
      }
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default = 500, maximum = 1000
    }
    //
    // Caveats:
    // - default limit (500) applies only if no other parameters set, trades up
    //   to the maximum limit may be returned to satisfy other parameters
    // - if both limit and time window is set and time window contains more
    //   trades than the limit then the last trades from the window are returned
    // - 'tradeId' accepted and returned by this method is "aggregate" trade id
    //   which is different from actual trade id
    // - setting both fromId and time window results in error
    const response = await this[method](this.extend(request, params));
    //
    // aggregate trades
    //
    //     [
    //         {
    //             "a": 26129,         // Aggregate tradeId
    //             "p": "0.01633102",  // Price
    //             "q": "4.70443515",  // Quantity
    //             "f": 27781,         // First tradeId
    //             "l": 27781,         // Last tradeId
    //             "T": 1498793709153, // Timestamp
    //             "m": true,          // Was the buyer the maker?
    //             "M": true           // Was the trade the best price match?
    //         }
    //     ]
    //
    // recent public trades and historical public trades
    //
    //     [
    //         {
    //             "id": 28457,
    //             "price": "4.00000100",
    //             "qty": "12.00000000",
    //             "time": 1499865549590,
    //             "isBuyerMaker": true,
    //             "isBestMatch": true
    //         }
    //     ]
    //
    // options (eapi)
    //
    //     [
    //         {
    //             "id": 1,
    //             "symbol": "ETH-230216-1500-C",
    //             "price": "35.5",
    //             "qty": "0.03",
    //             "quoteQty": "1.065",
    //             "side": 1,
    //             "time": 1676366446072
    //         },
    //     ]
    //
    return this.parseTrades(response, market, since, limit);
  }
  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name binance#editOrder
     * @description edit a trade order
     * @see https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade
     * @param {string} id cancel order id
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the base currency, ignored in market orders
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['spot']) {
      throw new _errors.NotSupported(this.id + ' editOrder() does not support ' + market['type'] + ' orders, only spot orders are accepted');
    }
    const request = {
      'symbol': market['id'],
      'side': side.toUpperCase(),
      'cancelReplaceMode': 'STOP_ON_FAILURE'
      // STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted.
      // ALLOW_FAILURE - new order placement will be attempted even if cancel request fails.
    };

    const cancelId = this.safeString2(params, 'cancelNewClientOrderId', 'cancelOrigClientOrderId');
    if (cancelId === undefined) {
      request['cancelOrderId'] = id; // user can provide either cancelOrderId, cancelOrigClientOrderId or cancelOrigClientOrderId
    }

    const clientOrderId = this.safeString2(params, 'newClientOrderId', 'clientOrderId');
    const initialUppercaseType = type.toUpperCase();
    let uppercaseType = initialUppercaseType;
    const postOnly = this.isPostOnly(initialUppercaseType === 'MARKET', initialUppercaseType === 'LIMIT_MAKER', params);
    if (postOnly) {
      uppercaseType = 'LIMIT_MAKER';
    }
    request['type'] = uppercaseType;
    const stopPrice = this.safeNumber(params, 'stopPrice');
    if (stopPrice !== undefined) {
      if (uppercaseType === 'MARKET') {
        uppercaseType = 'STOP_LOSS';
      } else if (uppercaseType === 'LIMIT') {
        uppercaseType = 'STOP_LOSS_LIMIT';
      }
    }
    const validOrderTypes = this.safeValue(market['info'], 'orderTypes');
    if (!this.inArray(uppercaseType, validOrderTypes)) {
      if (initialUppercaseType !== uppercaseType) {
        throw new _errors.InvalidOrder(this.id + ' stopPrice parameter is not allowed for ' + symbol + ' ' + type + ' orders');
      } else {
        throw new _errors.InvalidOrder(this.id + ' ' + type + ' is not a valid order type for the ' + symbol + ' market');
      }
    }
    if (clientOrderId === undefined) {
      const broker = this.safeValue(this.options, 'broker');
      if (broker !== undefined) {
        const brokerId = this.safeString(broker, 'spot');
        if (brokerId !== undefined) {
          request['newClientOrderId'] = brokerId + this.uuid22();
        }
      }
    } else {
      request['newClientOrderId'] = clientOrderId;
    }
    request['newOrderRespType'] = this.safeValue(this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
    let timeInForceIsRequired = false;
    let priceIsRequired = false;
    let stopPriceIsRequired = false;
    let quantityIsRequired = false;
    if (uppercaseType === 'MARKET') {
      const quoteOrderQty = this.safeValue(this.options, 'quoteOrderQty', true);
      if (quoteOrderQty) {
        const quoteOrderQty = this.safeValue2(params, 'quoteOrderQty', 'cost');
        const precision = market['precision']['price'];
        if (quoteOrderQty !== undefined) {
          request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQty, _number.TRUNCATE, precision, this.precisionMode);
        } else if (price !== undefined) {
          const amountString = this.numberToString(amount);
          const priceString = this.numberToString(price);
          const quoteOrderQuantity = _Precise.Precise.stringMul(amountString, priceString);
          request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQuantity, _number.TRUNCATE, precision, this.precisionMode);
        } else {
          quantityIsRequired = true;
        }
      } else {
        quantityIsRequired = true;
      }
    } else if (uppercaseType === 'LIMIT') {
      priceIsRequired = true;
      timeInForceIsRequired = true;
      quantityIsRequired = true;
    } else if (uppercaseType === 'STOP_LOSS' || uppercaseType === 'TAKE_PROFIT') {
      stopPriceIsRequired = true;
      quantityIsRequired = true;
    } else if (uppercaseType === 'STOP_LOSS_LIMIT' || uppercaseType === 'TAKE_PROFIT_LIMIT') {
      quantityIsRequired = true;
      stopPriceIsRequired = true;
      priceIsRequired = true;
      timeInForceIsRequired = true;
    } else if (uppercaseType === 'LIMIT_MAKER') {
      priceIsRequired = true;
      quantityIsRequired = true;
    }
    if (quantityIsRequired) {
      request['quantity'] = this.amountToPrecision(symbol, amount);
    }
    if (priceIsRequired) {
      if (price === undefined) {
        throw new _errors.InvalidOrder(this.id + ' editOrder() requires a price argument for a ' + type + ' order');
      }
      request['price'] = this.priceToPrecision(symbol, price);
    }
    if (timeInForceIsRequired) {
      request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
    }

    if (stopPriceIsRequired) {
      if (stopPrice === undefined) {
        throw new _errors.InvalidOrder(this.id + ' editOrder() requires a stopPrice extra param for a ' + type + ' order');
      } else {
        request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);
      }
    }
    const requestParams = this.omit(params, ['quoteOrderQty', 'cost', 'stopPrice', 'newClientOrderId', 'clientOrderId', 'postOnly']);
    const response = await this.privatePostOrderCancelReplace(this.extend(request, requestParams));
    //
    //     {
    //         "cancelResult": "SUCCESS",
    //         "newOrderResult": "SUCCESS",
    //         "cancelResponse": {
    //             "symbol": "BTCUSDT",
    //             "origClientOrderId": "web_3f6286480b194b079870ac75fb6978b7",
    //             "orderId": 16383156620,
    //             "orderListId": -1,
    //             "clientOrderId": "Azt6foVTTgHPNhqBf41TTt",
    //             "price": "14000.00000000",
    //             "origQty": "0.00110000",
    //             "executedQty": "0.00000000",
    //             "cummulativeQuoteQty": "0.00000000",
    //             "status": "CANCELED",
    //             "timeInForce": "GTC",
    //             "type": "LIMIT",
    //             "side": "BUY"
    //         },
    //         "newOrderResponse": {
    //             "symbol": "BTCUSDT",
    //             "orderId": 16383176297,
    //             "orderListId": -1,
    //             "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
    //             "transactTime": 1670891847932,
    //             "price": "13500.00000000",
    //             "origQty": "0.00085000",
    //             "executedQty": "0.00000000",
    //             "cummulativeQuoteQty": "0.00000000",
    //             "status": "NEW",
    //             "timeInForce": "GTC",
    //             "type": "LIMIT",
    //             "side": "BUY",
    //             "fills": []
    //         }
    //     }
    //
    const data = this.safeValue(response, 'newOrderResponse');
    return this.parseOrder(data, market);
  }
  parseOrderStatus(status) {
    const statuses = {
      'NEW': 'open',
      'PARTIALLY_FILLED': 'open',
      'ACCEPTED': 'open',
      'FILLED': 'closed',
      'CANCELED': 'canceled',
      'CANCELLED': 'canceled',
      'PENDING_CANCEL': 'canceling',
      'REJECTED': 'rejected',
      'EXPIRED': 'expired',
      'EXPIRED_IN_MATCH': 'expired'
    };
    return this.safeString(statuses, status, status);
  }
  parseOrder(order, market = undefined) {
    //
    // spot
    //
    //     {
    //         "symbol": "LTCBTC",
    //         "orderId": 1,
    //         "clientOrderId": "myOrder1",
    //         "price": "0.1",
    //         "origQty": "1.0",
    //         "executedQty": "0.0",
    //         "cummulativeQuoteQty": "0.0",
    //         "status": "NEW",
    //         "timeInForce": "GTC",
    //         "type": "LIMIT",
    //         "side": "BUY",
    //         "stopPrice": "0.0",
    //         "icebergQty": "0.0",
    //         "time": 1499827319559,
    //         "updateTime": 1499827319559,
    //         "isWorking": true
    //     }
    //
    // spot: editOrder
    //
    //     {
    //         "symbol": "BTCUSDT",
    //         "orderId": 16383176297,
    //         "orderListId": -1,
    //         "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
    //         "transactTime": 1670891847932,
    //         "price": "13500.00000000",
    //         "origQty": "0.00085000",
    //         "executedQty": "0.00000000",
    //         "cummulativeQuoteQty": "0.00000000",
    //         "status": "NEW",
    //         "timeInForce": "GTC",
    //         "type": "LIMIT",
    //         "side": "BUY",
    //         "fills": []
    //     }
    //
    // futures
    //
    //     {
    //         "symbol": "BTCUSDT",
    //         "orderId": 1,
    //         "clientOrderId": "myOrder1",
    //         "price": "0.1",
    //         "origQty": "1.0",
    //         "executedQty": "1.0",
    //         "cumQuote": "10.0",
    //         "status": "NEW",
    //         "timeInForce": "GTC",
    //         "type": "LIMIT",
    //         "side": "BUY",
    //         "stopPrice": "0.0",
    //         "updateTime": 1499827319559
    //     }
    //
    // createOrder with { "newOrderRespType": "FULL" }
    //
    //     {
    //       "symbol": "BTCUSDT",
    //       "orderId": 5403233939,
    //       "orderListId": -1,
    //       "clientOrderId": "x-R4BD3S825e669e75b6c14f69a2c43e",
    //       "transactTime": 1617151923742,
    //       "price": "0.00000000",
    //       "origQty": "0.00050000",
    //       "executedQty": "0.00050000",
    //       "cummulativeQuoteQty": "29.47081500",
    //       "status": "FILLED",
    //       "timeInForce": "GTC",
    //       "type": "MARKET",
    //       "side": "BUY",
    //       "fills": [
    //         {
    //           "price": "58941.63000000",
    //           "qty": "0.00050000",
    //           "commission": "0.00007050",
    //           "commissionAsset": "BNB",
    //           "tradeId": 737466631
    //         }
    //       ]
    //     }
    //
    // delivery
    //
    //     {
    //       "orderId": "18742727411",
    //       "symbol": "ETHUSD_PERP",
    //       "pair": "ETHUSD",
    //       "status": "FILLED",
    //       "clientOrderId": "x-xcKtGhcu3e2d1503fdd543b3b02419",
    //       "price": "0",
    //       "avgPrice": "4522.14",
    //       "origQty": "1",
    //       "executedQty": "1",
    //       "cumBase": "0.00221134",
    //       "timeInForce": "GTC",
    //       "type": "MARKET",
    //       "reduceOnly": false,
    //       "closePosition": false,
    //       "side": "SELL",
    //       "positionSide": "BOTH",
    //       "stopPrice": "0",
    //       "workingType": "CONTRACT_PRICE",
    //       "priceProtect": false,
    //       "origType": "MARKET",
    //       "time": "1636061952660",
    //       "updateTime": "1636061952660"
    //     }
    //
    // option: createOrder, fetchOrder, fetchOpenOrders, fetchOrders
    //
    //     {
    //         "orderId": 4728833085436977152,
    //         "symbol": "ETH-230211-1500-C",
    //         "price": "10.0",
    //         "quantity": "1.00",
    //         "executedQty": "0.00",
    //         "fee": "0",
    //         "side": "BUY",
    //         "type": "LIMIT",
    //         "timeInForce": "GTC",
    //         "reduceOnly": false,
    //         "postOnly": false,
    //         "createTime": 1676083034462,
    //         "updateTime": 1676083034462,
    //         "status": "ACCEPTED",
    //         "avgPrice": "0",
    //         "source": "API",
    //         "clientOrderId": "",
    //         "priceScale": 1,
    //         "quantityScale": 2,
    //         "optionSide": "CALL",
    //         "quoteAsset": "USDT",
    //         "lastTrade": {"id":"69","time":"1676084430567","price":"24.9","qty":"1.00"},
    //         "mmp": false
    //     }
    //
    const status = this.parseOrderStatus(this.safeString(order, 'status'));
    const marketId = this.safeString(order, 'symbol');
    const marketType = 'closePosition' in order ? 'contract' : 'spot';
    const symbol = this.safeSymbol(marketId, market, undefined, marketType);
    const filled = this.safeString(order, 'executedQty', '0');
    let timestamp = undefined;
    let lastTradeTimestamp = undefined;
    if ('time' in order) {
      timestamp = this.safeInteger(order, 'time');
    } else if ('workingTime' in order) {
      lastTradeTimestamp = this.safeInteger(order, 'transactTime');
      timestamp = this.safeInteger(order, 'workingTime');
    } else if ('transactTime' in order) {
      lastTradeTimestamp = this.safeInteger(order, 'transactTime');
      timestamp = this.safeInteger(order, 'transactTime');
    } else if ('createTime' in order) {
      lastTradeTimestamp = this.safeInteger(order, 'updateTime');
      timestamp = this.safeInteger(order, 'createTime');
    } else if ('updateTime' in order) {
      if (status === 'open') {
        if (_Precise.Precise.stringGt(filled, '0')) {
          lastTradeTimestamp = this.safeInteger(order, 'updateTime');
        } else {
          timestamp = this.safeInteger(order, 'updateTime');
        }
      }
    }
    const average = this.safeString(order, 'avgPrice');
    const price = this.safeString(order, 'price');
    const amount = this.safeString2(order, 'origQty', 'quantity');
    // - Spot/Margin market: cummulativeQuoteQty
    // - Futures market: cumQuote.
    //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.
    let cost = this.safeString2(order, 'cummulativeQuoteQty', 'cumQuote');
    cost = this.safeString(order, 'cumBase', cost);
    const id = this.safeString(order, 'orderId');
    let type = this.safeStringLower(order, 'type');
    const side = this.safeStringLower(order, 'side');
    const fills = this.safeValue(order, 'fills', []);
    const clientOrderId = this.safeString(order, 'clientOrderId');
    let timeInForce = this.safeString(order, 'timeInForce');
    if (timeInForce === 'GTX') {
      // GTX means "Good Till Crossing" and is an equivalent way of saying Post Only
      timeInForce = 'PO';
    }
    const postOnly = type === 'limit_maker' || timeInForce === 'PO';
    if (type === 'limit_maker') {
      type = 'limit';
    }
    const stopPriceString = this.safeString(order, 'stopPrice');
    const stopPrice = this.parseNumber(this.omitZero(stopPriceString));
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': postOnly,
      'reduceOnly': this.safeValue(order, 'reduceOnly'),
      'side': side,
      'price': price,
      'triggerPrice': stopPrice,
      'amount': amount,
      'cost': cost,
      'average': average,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': {
        'currency': this.safeString(order, 'quoteAsset'),
        'cost': this.safeNumber(order, 'fee'),
        'rate': undefined
      },
      'trades': fills
    }, market);
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name binance#createOrder
     * @description create a trade order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const marketType = this.safeString(params, 'type', market['type']);
    const clientOrderId = this.safeString2(params, 'newClientOrderId', 'clientOrderId');
    const initialUppercaseType = type.toUpperCase();
    const isMarketOrder = initialUppercaseType === 'MARKET';
    const isLimitOrder = initialUppercaseType === 'LIMIT';
    const postOnly = this.isPostOnly(isMarketOrder, initialUppercaseType === 'LIMIT_MAKER', params);
    const triggerPrice = this.safeValue2(params, 'triggerPrice', 'stopPrice');
    const stopLossPrice = this.safeValue(params, 'stopLossPrice', triggerPrice); // fallback to stopLoss
    const takeProfitPrice = this.safeValue(params, 'takeProfitPrice');
    const isStopLoss = stopLossPrice !== undefined;
    const isTakeProfit = takeProfitPrice !== undefined;
    params = this.omit(params, ['type', 'newClientOrderId', 'clientOrderId', 'postOnly', 'stopLossPrice', 'takeProfitPrice', 'stopPrice', 'triggerPrice']);
    const [marginMode, query] = this.handleMarginModeAndParams('createOrder', params);
    const request = {
      'symbol': market['id'],
      'side': side.toUpperCase()
    };
    let method = 'privatePostOrder';
    if (market['linear']) {
      method = 'fapiPrivatePostOrder';
    } else if (market['inverse']) {
      method = 'dapiPrivatePostOrder';
    } else if (marketType === 'margin' || marginMode !== undefined) {
      method = 'sapiPostMarginOrder';
      const reduceOnly = this.safeValue(params, 'reduceOnly');
      if (reduceOnly) {
        request['sideEffectType'] = 'AUTO_REPAY';
        params = this.omit(params, 'reduceOnly');
      }
    }
    if (market['spot'] || marketType === 'margin') {
      // support for testing orders
      const test = this.safeValue(query, 'test', false);
      if (test) {
        method += 'Test';
      }
      // only supported for spot/margin api (all margin markets are spot markets)
      if (postOnly) {
        type = 'LIMIT_MAKER';
      }
    }
    let uppercaseType = type.toUpperCase();
    let stopPrice = undefined;
    if (isStopLoss) {
      stopPrice = stopLossPrice;
      if (isMarketOrder) {
        // spot STOP_LOSS market orders are not a valid order type
        uppercaseType = market['contract'] ? 'STOP_MARKET' : 'STOP_LOSS';
      } else if (isLimitOrder) {
        uppercaseType = market['contract'] ? 'STOP' : 'STOP_LOSS_LIMIT';
      }
    } else if (isTakeProfit) {
      stopPrice = takeProfitPrice;
      if (isMarketOrder) {
        // spot TAKE_PROFIT market orders are not a valid order type
        uppercaseType = market['contract'] ? 'TAKE_PROFIT_MARKET' : 'TAKE_PROFIT';
      } else if (isLimitOrder) {
        uppercaseType = market['contract'] ? 'TAKE_PROFIT' : 'TAKE_PROFIT_LIMIT';
      }
    }
    if (marginMode === 'isolated') {
      request['isIsolated'] = true;
    }
    if (clientOrderId === undefined) {
      const broker = this.safeValue(this.options, 'broker');
      if (broker !== undefined) {
        const brokerId = this.safeString(broker, marketType);
        if (brokerId !== undefined) {
          request['newClientOrderId'] = brokerId + this.uuid22();
        }
      }
    } else {
      request['newClientOrderId'] = clientOrderId;
    }
    if (marketType === 'spot' || marketType === 'margin') {
      request['newOrderRespType'] = this.safeValue(this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
    } else {
      // swap, futures and options
      request['newOrderRespType'] = 'RESULT'; // "ACK", "RESULT", default "ACK"
    }

    if (market['option']) {
      if (type === 'market') {
        throw new _errors.InvalidOrder(this.id + ' ' + type + ' is not a valid order type for the ' + symbol + ' market');
      }
      method = 'eapiPrivatePostOrder';
    } else {
      const validOrderTypes = this.safeValue(market['info'], 'orderTypes');
      if (!this.inArray(uppercaseType, validOrderTypes)) {
        if (initialUppercaseType !== uppercaseType) {
          throw new _errors.InvalidOrder(this.id + ' stopPrice parameter is not allowed for ' + symbol + ' ' + type + ' orders');
        } else {
          throw new _errors.InvalidOrder(this.id + ' ' + type + ' is not a valid order type for the ' + symbol + ' market');
        }
      }
    }
    request['type'] = uppercaseType;
    // additional required fields depending on the order type
    let timeInForceIsRequired = false;
    let priceIsRequired = false;
    let stopPriceIsRequired = false;
    let quantityIsRequired = false;
    //
    // spot/margin
    //
    //     LIMIT                timeInForce, quantity, price
    //     MARKET               quantity or quoteOrderQty
    //     STOP_LOSS            quantity, stopPrice
    //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice
    //     TAKE_PROFIT          quantity, stopPrice
    //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice
    //     LIMIT_MAKER          quantity, price
    //
    // futures
    //
    //     LIMIT                timeInForce, quantity, price
    //     MARKET               quantity
    //     STOP/TAKE_PROFIT     quantity, price, stopPrice
    //     STOP_MARKET          stopPrice
    //     TAKE_PROFIT_MARKET   stopPrice
    //     TRAILING_STOP_MARKET callbackRate
    //
    if (uppercaseType === 'MARKET') {
      if (market['spot']) {
        const quoteOrderQty = this.safeValue(this.options, 'quoteOrderQty', true);
        if (quoteOrderQty) {
          const quoteOrderQty = this.safeValue2(query, 'quoteOrderQty', 'cost');
          const precision = market['precision']['price'];
          if (quoteOrderQty !== undefined) {
            request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQty, _number.TRUNCATE, precision, this.precisionMode);
          } else if (price !== undefined) {
            const amountString = this.numberToString(amount);
            const priceString = this.numberToString(price);
            const quoteOrderQuantity = _Precise.Precise.stringMul(amountString, priceString);
            request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQuantity, _number.TRUNCATE, precision, this.precisionMode);
          } else {
            quantityIsRequired = true;
          }
        } else {
          quantityIsRequired = true;
        }
      } else {
        quantityIsRequired = true;
      }
    } else if (uppercaseType === 'LIMIT') {
      priceIsRequired = true;
      timeInForceIsRequired = true;
      quantityIsRequired = true;
    } else if (uppercaseType === 'STOP_LOSS' || uppercaseType === 'TAKE_PROFIT') {
      stopPriceIsRequired = true;
      quantityIsRequired = true;
      if (market['linear'] || market['inverse']) {
        priceIsRequired = true;
      }
    } else if (uppercaseType === 'STOP_LOSS_LIMIT' || uppercaseType === 'TAKE_PROFIT_LIMIT') {
      quantityIsRequired = true;
      stopPriceIsRequired = true;
      priceIsRequired = true;
      timeInForceIsRequired = true;
    } else if (uppercaseType === 'LIMIT_MAKER') {
      priceIsRequired = true;
      quantityIsRequired = true;
    } else if (uppercaseType === 'STOP') {
      quantityIsRequired = true;
      stopPriceIsRequired = true;
      priceIsRequired = true;
    } else if (uppercaseType === 'STOP_MARKET' || uppercaseType === 'TAKE_PROFIT_MARKET') {
      const closePosition = this.safeValue(query, 'closePosition');
      if (closePosition === undefined) {
        quantityIsRequired = true;
      }
      stopPriceIsRequired = true;
    } else if (uppercaseType === 'TRAILING_STOP_MARKET') {
      quantityIsRequired = true;
      const callbackRate = this.safeNumber(query, 'callbackRate');
      if (callbackRate === undefined) {
        throw new _errors.InvalidOrder(this.id + ' createOrder() requires a callbackRate extra param for a ' + type + ' order');
      }
    }
    if (quantityIsRequired) {
      request['quantity'] = this.amountToPrecision(symbol, amount);
    }
    if (priceIsRequired) {
      if (price === undefined) {
        throw new _errors.InvalidOrder(this.id + ' createOrder() requires a price argument for a ' + type + ' order');
      }
      request['price'] = this.priceToPrecision(symbol, price);
    }
    if (timeInForceIsRequired) {
      request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
    }

    if (market['contract'] && postOnly) {
      request['timeInForce'] = 'GTX';
    }
    if (stopPriceIsRequired) {
      if (market['contract']) {
        if (stopPrice === undefined) {
          throw new _errors.InvalidOrder(this.id + ' createOrder() requires a stopPrice extra param for a ' + type + ' order');
        }
      } else {
        // check for delta price as well
        const trailingDelta = this.safeValue(params, 'trailingDelta');
        if (trailingDelta === undefined && stopPrice === undefined) {
          throw new _errors.InvalidOrder(this.id + ' createOrder() requires a stopPrice or trailingDelta param for a ' + type + ' order');
        }
      }
      if (stopPrice !== undefined) {
        request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);
      }
    }
    const requestParams = this.omit(params, ['quoteOrderQty', 'cost', 'stopPrice', 'test', 'type', 'newClientOrderId', 'clientOrderId', 'postOnly']);
    const response = await this[method](this.extend(request, requestParams));
    return this.parseOrder(response, market);
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    this.checkRequiredSymbol('fetchOrder', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const defaultType = this.safeString2(this.options, 'fetchOrder', 'defaultType', 'spot');
    const type = this.safeString(params, 'type', defaultType);
    const [marginMode, query] = this.handleMarginModeAndParams('fetchOrder', params);
    const request = {
      'symbol': market['id']
    };
    let method = 'privateGetOrder';
    if (market['option']) {
      method = 'eapiPrivateGetOrder';
    } else if (market['linear']) {
      method = 'fapiPrivateGetOrder';
    } else if (market['inverse']) {
      method = 'dapiPrivateGetOrder';
    } else if (type === 'margin' || marginMode !== undefined) {
      method = 'sapiGetMarginOrder';
      if (marginMode === 'isolated') {
        request['isIsolated'] = true;
      }
    }
    const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');
    if (clientOrderId !== undefined) {
      if (market['option']) {
        request['clientOrderId'] = clientOrderId;
      } else {
        request['origClientOrderId'] = clientOrderId;
      }
    } else {
      request['orderId'] = id;
    }
    const requestParams = this.omit(query, ['type', 'clientOrderId', 'origClientOrderId']);
    const response = await this[method](this.extend(request, requestParams));
    return this.parseOrder(response, market);
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    this.checkRequiredSymbol('fetchOrders', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const defaultType = this.safeString2(this.options, 'fetchOrders', 'defaultType', 'spot');
    const type = this.safeString(params, 'type', defaultType);
    const [marginMode, query] = this.handleMarginModeAndParams('fetchOrders', params);
    const request = {
      'symbol': market['id']
    };
    let method = 'privateGetAllOrders';
    if (market['option']) {
      method = 'eapiPrivateGetHistoryOrders';
    } else if (market['linear']) {
      method = 'fapiPrivateGetAllOrders';
    } else if (market['inverse']) {
      method = 'dapiPrivateGetAllOrders';
    } else if (type === 'margin' || marginMode !== undefined) {
      method = 'sapiGetMarginAllOrders';
      if (marginMode === 'isolated') {
        request['isIsolated'] = true;
      }
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, query));
    //
    //  spot
    //
    //     [
    //         {
    //             "symbol": "LTCBTC",
    //             "orderId": 1,
    //             "clientOrderId": "myOrder1",
    //             "price": "0.1",
    //             "origQty": "1.0",
    //             "executedQty": "0.0",
    //             "cummulativeQuoteQty": "0.0",
    //             "status": "NEW",
    //             "timeInForce": "GTC",
    //             "type": "LIMIT",
    //             "side": "BUY",
    //             "stopPrice": "0.0",
    //             "icebergQty": "0.0",
    //             "time": 1499827319559,
    //             "updateTime": 1499827319559,
    //             "isWorking": true
    //         }
    //     ]
    //
    //  futures
    //
    //     [
    //         {
    //             "symbol": "BTCUSDT",
    //             "orderId": 1,
    //             "clientOrderId": "myOrder1",
    //             "price": "0.1",
    //             "origQty": "1.0",
    //             "executedQty": "1.0",
    //             "cumQuote": "10.0",
    //             "status": "NEW",
    //             "timeInForce": "GTC",
    //             "type": "LIMIT",
    //             "side": "BUY",
    //             "stopPrice": "0.0",
    //             "updateTime": 1499827319559
    //         }
    //     ]
    //
    // options
    //
    //     [
    //         {
    //             "orderId": 4728833085436977152,
    //             "symbol": "ETH-230211-1500-C",
    //             "price": "10.0",
    //             "quantity": "1.00",
    //             "executedQty": "0.00",
    //             "fee": "0",
    //             "side": "BUY",
    //             "type": "LIMIT",
    //             "timeInForce": "GTC",
    //             "reduceOnly": false,
    //             "postOnly": false,
    //             "createTime": 1676083034462,
    //             "updateTime": 1676083034462,
    //             "status": "ACCEPTED",
    //             "avgPrice": "0",
    //             "source": "API",
    //             "clientOrderId": "",
    //             "priceScale": 1,
    //             "quantityScale": 2,
    //             "optionSide": "CALL",
    //             "quoteAsset": "USDT",
    //             "lastTrade": {"id":"69","time":"1676084430567","price":"24.9","qty":"1.00"},
    //             "mmp": false
    //         }
    //     ]
    //
    return this.parseOrders(response, market, since, limit);
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchOpenOrders
     * @description fetch all unfilled currently open orders
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch open orders for
     * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let type = undefined;
    const request = {};
    let marginMode = undefined;
    let query = undefined;
    [marginMode, query] = this.handleMarginModeAndParams('fetchOpenOrders', params);
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');
      const marketType = 'type' in market ? market['type'] : defaultType;
      type = this.safeString(query, 'type', marketType);
    } else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {
      const symbols = this.symbols;
      const numSymbols = symbols.length;
      const fetchOpenOrdersRateLimit = this.parseToInt(numSymbols / 2);
      throw new _errors.ExchangeError(this.id + ' fetchOpenOrders() WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString() + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options["warnOnFetchOpenOrdersWithoutSymbol"] = false to suppress this warning message.');
    } else {
      const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');
      type = this.safeString(query, 'type', defaultType);
    }
    let subType = undefined;
    [subType, query] = this.handleSubTypeAndParams('fetchOpenOrders', market, query);
    const requestParams = this.omit(query, 'type');
    let method = 'privateGetOpenOrders';
    if (type === 'option') {
      method = 'eapiPrivateGetOpenOrders';
      if (since !== undefined) {
        request['startTime'] = since;
      }
      if (limit !== undefined) {
        request['limit'] = limit;
      }
    } else if (this.isLinear(type, subType)) {
      method = 'fapiPrivateGetOpenOrders';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPrivateGetOpenOrders';
    } else if (type === 'margin' || marginMode !== undefined) {
      method = 'sapiGetMarginOpenOrders';
      if (marginMode === 'isolated') {
        request['isIsolated'] = true;
        if (symbol === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument for isolated markets');
        }
      }
    }
    const response = await this[method](this.extend(request, requestParams));
    return this.parseOrders(response, market, since, limit);
  }
  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchClosedOrders
     * @description fetches information on multiple closed orders made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    const orders = await this.fetchOrders(symbol, since, limit, params);
    return this.filterBy(orders, 'status', 'closed');
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    this.checkRequiredSymbol('cancelOrder', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const defaultType = this.safeString2(this.options, 'cancelOrder', 'defaultType', 'spot');
    const type = this.safeString(params, 'type', defaultType);
    const [marginMode, query] = this.handleMarginModeAndParams('cancelOrder', params);
    const request = {
      'symbol': market['id']
      // 'orderId': id,
      // 'origClientOrderId': id,
    };

    const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');
    if (clientOrderId !== undefined) {
      if (market['option']) {
        request['clientOrderId'] = clientOrderId;
      } else {
        request['origClientOrderId'] = clientOrderId;
      }
    } else {
      request['orderId'] = id;
    }
    let method = 'privateDeleteOrder';
    if (market['option']) {
      method = 'eapiPrivateDeleteOrder';
    } else if (market['linear']) {
      method = 'fapiPrivateDeleteOrder';
    } else if (market['inverse']) {
      method = 'dapiPrivateDeleteOrder';
    } else if (type === 'margin' || marginMode !== undefined) {
      method = 'sapiDeleteMarginOrder';
      if (marginMode === 'isolated') {
        request['isIsolated'] = true;
      }
    }
    const requestParams = this.omit(query, ['type', 'origClientOrderId', 'clientOrderId']);
    const response = await this[method](this.extend(request, requestParams));
    return this.parseOrder(response, market);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#cancelAllOrders
     * @description cancel all open orders in a market
     * @param {string} symbol unified market symbol of the market to cancel orders in
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    this.checkRequiredSymbol('cancelAllOrders', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const type = this.safeString(params, 'type', market['type']);
    params = this.omit(params, ['type']);
    const [marginMode, query] = this.handleMarginModeAndParams('cancelAllOrders', params);
    let method = 'privateDeleteOpenOrders';
    if (market['option']) {
      method = 'eapiPrivateDeleteAllOpenOrders';
    } else if (market['linear']) {
      method = 'fapiPrivateDeleteAllOpenOrders';
    } else if (market['inverse']) {
      method = 'dapiPrivateDeleteAllOpenOrders';
    } else if (type === 'margin' || marginMode !== undefined) {
      method = 'sapiDeleteMarginOpenOrders';
      if (marginMode === 'isolated') {
        request['isIsolated'] = true;
      }
    }
    const response = await this[method](this.extend(request, query));
    if (Array.isArray(response)) {
      return this.parseOrders(response, market);
    } else {
      return response;
    }
  }
  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @param {string} id order id
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOrderTrades() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const type = this.safeString(params, 'type', market['type']);
    params = this.omit(params, 'type');
    if (type !== 'spot') {
      throw new _errors.NotSupported(this.id + ' fetchOrderTrades() supports spot markets only');
    }
    const request = {
      'orderId': id
    };
    return await this.fetchMyTrades(symbol, since, limit, this.extend(request, params));
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    let type = undefined;
    let method = undefined;
    let marginMode = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    [type, params] = this.handleMarketTypeAndParams('fetchMyTrades', market, params);
    if (type === 'option') {
      method = 'eapiPrivateGetUserTrades';
    } else {
      this.checkRequiredSymbol('fetchMyTrades', symbol);
      [marginMode, params] = this.handleMarginModeAndParams('fetchMyTrades', params);
      if (type === 'spot' || type === 'margin') {
        method = 'privateGetMyTrades';
        if (type === 'margin' || marginMode !== undefined) {
          method = 'sapiGetMarginMyTrades';
          if (marginMode === 'isolated') {
            request['isIsolated'] = true;
          }
        }
      } else if (market['linear']) {
        method = 'fapiPrivateGetUserTrades';
      } else if (market['inverse']) {
        method = 'dapiPrivateGetUserTrades';
      }
    }
    let endTime = this.safeInteger2(params, 'until', 'endTime');
    if (since !== undefined) {
      const startTime = parseInt(since);
      request['startTime'] = startTime;
      // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data
      // If startTime and endTime are both not sent, then the last 7 days' data will be returned.
      // The time between startTime and endTime cannot be longer than 7 days.
      // The parameter fromId cannot be sent with startTime or endTime.
      const currentTimestamp = this.milliseconds();
      const oneWeek = 7 * 24 * 60 * 60 * 1000;
      if (currentTimestamp - startTime >= oneWeek) {
        if (endTime === undefined && market['linear']) {
          endTime = this.sum(startTime, oneWeek);
          endTime = Math.min(endTime, currentTimestamp);
        }
      }
    }
    if (endTime !== undefined) {
      request['endTime'] = endTime;
      params = this.omit(params, ['endTime', 'until']);
    }
    if (limit !== undefined) {
      if (type === 'option' || market['contract']) {
        limit = Math.min(limit, 1000); // above 1000, returns error
      }

      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, params));
    //
    // spot trade
    //
    //     [
    //         {
    //             "symbol": "BNBBTC",
    //             "id": 28457,
    //             "orderId": 100234,
    //             "price": "4.00000100",
    //             "qty": "12.00000000",
    //             "commission": "10.10000000",
    //             "commissionAsset": "BNB",
    //             "time": 1499865549590,
    //             "isBuyer": true,
    //             "isMaker": false,
    //             "isBestMatch": true,
    //         }
    //     ]
    //
    // futures trade
    //
    //     [
    //         {
    //             "accountId": 20,
    //             "buyer": False,
    //             "commission": "-0.07819010",
    //             "commissionAsset": "USDT",
    //             "counterPartyId": 653,
    //             "id": 698759,
    //             "maker": False,
    //             "orderId": 25851813,
    //             "price": "7819.01",
    //             "qty": "0.002",
    //             "quoteQty": "0.01563",
    //             "realizedPnl": "-0.91539999",
    //             "side": "SELL",
    //             "symbol": "BTCUSDT",
    //             "time": 1569514978020
    //         }
    //     ]
    //
    // options (eapi)
    //
    //     [
    //         {
    //             "id": 1125899906844226012,
    //             "tradeId": 73,
    //             "orderId": 4638761100843040768,
    //             "symbol": "ETH-230211-1500-C",
    //             "price": "18.70000000",
    //             "quantity": "-0.57000000",
    //             "fee": "0.17305890",
    //             "realizedProfit": "-3.53400000",
    //             "side": "SELL",
    //             "type": "LIMIT",
    //             "volatility": "0.30000000",
    //             "liquidity": "MAKER",
    //             "time": 1676085216845,
    //             "priceScale": 1,
    //             "quantityScale": 2,
    //             "optionSide": "CALL",
    //             "quoteAsset": "USDT"
    //         }
    //     ]
    //
    return this.parseTrades(response, market, since, limit);
  }
  async fetchMyDustTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchMyDustTrades
     * @description fetch all dust trades made by the user
     * @param {string|undefined} symbol not used by binance fetchMyDustTrades ()
     * @param {int|undefined} since the earliest time in ms to fetch my dust trades for
     * @param {int|undefined} limit the maximum number of dust trades to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    //
    // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)
    // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.
    // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:
    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data
    //
    await this.loadMarkets();
    const request = {};
    if (since !== undefined) {
      request['startTime'] = since;
      request['endTime'] = this.sum(since, 7776000000);
    }
    const response = await this.sapiGetAssetDribblet(this.extend(request, params));
    //     {
    //       "total": "4",
    //       "userAssetDribblets": [
    //         {
    //           "operateTime": "1627575731000",
    //           "totalServiceChargeAmount": "0.00001453",
    //           "totalTransferedAmount": "0.00072693",
    //           "transId": "70899815863",
    //           "userAssetDribbletDetails": [
    //             {
    //               "fromAsset": "LTC",
    //               "amount": "0.000006",
    //               "transferedAmount": "0.00000267",
    //               "serviceChargeAmount": "0.00000005",
    //               "operateTime": "1627575731000",
    //               "transId": "70899815863"
    //             },
    //             {
    //               "fromAsset": "GBP",
    //               "amount": "0.15949157",
    //               "transferedAmount": "0.00072426",
    //               "serviceChargeAmount": "0.00001448",
    //               "operateTime": "1627575731000",
    //               "transId": "70899815863"
    //             }
    //           ]
    //         },
    //       ]
    //     }
    const results = this.safeValue(response, 'userAssetDribblets', []);
    const rows = this.safeInteger(response, 'total', 0);
    const data = [];
    for (let i = 0; i < rows; i++) {
      const logs = this.safeValue(results[i], 'userAssetDribbletDetails', []);
      for (let j = 0; j < logs.length; j++) {
        logs[j]['isDustTrade'] = true;
        data.push(logs[j]);
      }
    }
    const trades = this.parseTrades(data, undefined, since, limit);
    return this.filterBySinceLimit(trades, since, limit);
  }
  parseDustTrade(trade, market = undefined) {
    //
    //     {
    //       "fromAsset": "USDT",
    //       "amount": "0.009669",
    //       "transferedAmount": "0.00002992",
    //       "serviceChargeAmount": "0.00000059",
    //       "operateTime": "1628076010000",
    //       "transId": "71416578712",
    //       "isDustTrade": true
    //     }
    //
    const orderId = this.safeString(trade, 'transId');
    const timestamp = this.safeInteger(trade, 'operateTime');
    const currencyId = this.safeString(trade, 'fromAsset');
    const tradedCurrency = this.safeCurrencyCode(currencyId);
    const bnb = this.currency('BNB');
    const earnedCurrency = bnb['code'];
    const applicantSymbol = earnedCurrency + '/' + tradedCurrency;
    let tradedCurrencyIsQuote = false;
    if (applicantSymbol in this.markets) {
      tradedCurrencyIsQuote = true;
    }
    const feeCostString = this.safeString(trade, 'serviceChargeAmount');
    const fee = {
      'currency': earnedCurrency,
      'cost': this.parseNumber(feeCostString)
    };
    let symbol = undefined;
    let amountString = undefined;
    let costString = undefined;
    let side = undefined;
    if (tradedCurrencyIsQuote) {
      symbol = applicantSymbol;
      amountString = this.safeString(trade, 'transferedAmount');
      costString = this.safeString(trade, 'amount');
      side = 'buy';
    } else {
      symbol = tradedCurrency + '/' + earnedCurrency;
      amountString = this.safeString(trade, 'amount');
      costString = this.safeString(trade, 'transferedAmount');
      side = 'sell';
    }
    let priceString = undefined;
    if (costString !== undefined) {
      if (amountString) {
        priceString = _Precise.Precise.stringDiv(costString, amountString);
      }
    }
    const id = undefined;
    const amount = this.parseNumber(amountString);
    const price = this.parseNumber(priceString);
    const cost = this.parseNumber(costString);
    const type = undefined;
    const takerOrMaker = undefined;
    return {
      'id': id,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'order': orderId,
      'type': type,
      'takerOrMaker': takerOrMaker,
      'side': side,
      'amount': amount,
      'price': price,
      'cost': cost,
      'fee': fee,
      'info': trade
    };
  }
  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchDeposits
     * @description fetch all deposits made to an account
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch deposits for
     * @param {int|undefined} limit the maximum number of deposits structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {bool} params.fiat if true, only fiat deposits will be returned
     * @param {int|undefined} params.until the latest time in ms to fetch deposits for
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    let currency = undefined;
    let response = undefined;
    const request = {};
    const legalMoney = this.safeValue(this.options, 'legalMoney', {});
    const fiatOnly = this.safeValue(params, 'fiat', false);
    params = this.omit(params, 'fiatOnly');
    const until = this.safeInteger(params, 'until');
    if (fiatOnly || code in legalMoney) {
      if (code !== undefined) {
        currency = this.currency(code);
      }
      request['transactionType'] = 0;
      if (since !== undefined) {
        request['beginTime'] = since;
      }
      if (until !== undefined) {
        request['endTime'] = until;
      }
      const raw = await this.sapiGetFiatOrders(this.extend(request, params));
      response = this.safeValue(raw, 'data');
      //     {
      //       "code": "000000",
      //       "message": "success",
      //       "data": [
      //         {
      //           "orderNo": "25ced37075c1470ba8939d0df2316e23",
      //           "fiatCurrency": "EUR",
      //           "indicatedAmount": "15.00",
      //           "amount": "15.00",
      //           "totalFee": "0.00",
      //           "method": "card",
      //           "status": "Failed",
      //           "createTime": 1627501026000,
      //           "updateTime": 1627501027000
      //         }
      //       ],
      //       "total": 1,
      //       "success": true
      //     }
    } else {
      if (code !== undefined) {
        currency = this.currency(code);
        request['coin'] = currency['id'];
      }
      if (since !== undefined) {
        request['startTime'] = since;
        // max 3 months range https://github.com/ccxt/ccxt/issues/6495
        let endTime = this.sum(since, 7776000000);
        if (until !== undefined) {
          endTime = Math.min(endTime, until);
        }
        request['endTime'] = endTime;
      }
      if (limit !== undefined) {
        request['limit'] = limit;
      }
      response = await this.sapiGetCapitalDepositHisrec(this.extend(request, params));
      //     [
      //       {
      //         "amount": "0.01844487",
      //         "coin": "BCH",
      //         "network": "BCH",
      //         "status": 1,
      //         "address": "1NYxAJhW2281HK1KtJeaENBqHeygA88FzR",
      //         "addressTag": "",
      //         "txId": "bafc5902504d6504a00b7d0306a41154cbf1d1b767ab70f3bc226327362588af",
      //         "insertTime": 1610784980000,
      //         "transferType": 0,
      //         "confirmTimes": "2/2"
      //       },
      //       {
      //         "amount": "4500",
      //         "coin": "USDT",
      //         "network": "BSC",
      //         "status": 1,
      //         "address": "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
      //         "addressTag": "",
      //         "txId": "Internal transfer 51376627901",
      //         "insertTime": 1618394381000,
      //         "transferType": 1,
      //         "confirmTimes": "1/15"
      //     }
      //   ]
    }

    return this.parseTransactions(response, currency, since, limit);
  }
  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchWithdrawals
     * @description fetch all withdrawals made from an account
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
     * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {bool} params.fiat if true, only fiat withdrawals will be returned
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    const legalMoney = this.safeValue(this.options, 'legalMoney', {});
    const fiatOnly = this.safeValue(params, 'fiat', false);
    params = this.omit(params, 'fiatOnly');
    const request = {};
    let response = undefined;
    let currency = undefined;
    if (fiatOnly || code in legalMoney) {
      if (code !== undefined) {
        currency = this.currency(code);
      }
      request['transactionType'] = 1;
      if (since !== undefined) {
        request['beginTime'] = since;
      }
      const raw = await this.sapiGetFiatOrders(this.extend(request, params));
      response = this.safeValue(raw, 'data');
      //     {
      //       "code": "000000",
      //       "message": "success",
      //       "data": [
      //         {
      //           "orderNo": "CJW706452266115170304",
      //           "fiatCurrency": "GBP",
      //           "indicatedAmount": "10001.50",
      //           "amount": "100.00",
      //           "totalFee": "1.50",
      //           "method": "bank transfer",
      //           "status": "Successful",
      //           "createTime": 1620037745000,
      //           "updateTime": 1620038480000
      //         },
      //         {
      //           "orderNo": "CJW706287492781891584",
      //           "fiatCurrency": "GBP",
      //           "indicatedAmount": "10001.50",
      //           "amount": "100.00",
      //           "totalFee": "1.50",
      //           "method": "bank transfer",
      //           "status": "Successful",
      //           "createTime": 1619998460000,
      //           "updateTime": 1619998823000
      //         }
      //       ],
      //       "total": 39,
      //       "success": true
      //     }
    } else {
      if (code !== undefined) {
        currency = this.currency(code);
        request['coin'] = currency['id'];
      }
      if (since !== undefined) {
        request['startTime'] = since;
        // max 3 months range https://github.com/ccxt/ccxt/issues/6495
        request['endTime'] = this.sum(since, 7776000000);
      }
      if (limit !== undefined) {
        request['limit'] = limit;
      }
      response = await this.sapiGetCapitalWithdrawHistory(this.extend(request, params));
      //     [
      //       {
      //         "id": "69e53ad305124b96b43668ceab158a18",
      //         "amount": "28.75",
      //         "transactionFee": "0.25",
      //         "coin": "XRP",
      //         "status": 6,
      //         "address": "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
      //         "addressTag": "101286922",
      //         "txId": "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
      //         "applyTime": "2021-04-15 12:09:16",
      //         "network": "XRP",
      //         "transferType": 0
      //       },
      //       {
      //         "id": "9a67628b16ba4988ae20d329333f16bc",
      //         "amount": "20",
      //         "transactionFee": "20",
      //         "coin": "USDT",
      //         "status": 6,
      //         "address": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
      //         "txId": "0x77fbf2cf2c85b552f0fd31fd2e56dc95c08adae031d96f3717d8b17e1aea3e46",
      //         "applyTime": "2021-04-15 12:06:53",
      //         "network": "ETH",
      //         "transferType": 0
      //       },
      //       {
      //         "id": "a7cdc0afbfa44a48bd225c9ece958fe2",
      //         "amount": "51",
      //         "transactionFee": "1",
      //         "coin": "USDT",
      //         "status": 6,
      //         "address": "TYDmtuWL8bsyjvcauUTerpfYyVhFtBjqyo",
      //         "txId": "168a75112bce6ceb4823c66726ad47620ad332e69fe92d9cb8ceb76023f9a028",
      //         "applyTime": "2021-04-13 12:46:59",
      //         "network": "TRX",
      //         "transferType": 0
      //       }
      //     ]
    }

    return this.parseTransactions(response, currency, since, limit);
  }
  parseTransactionStatusByType(status, type = undefined) {
    const statusesByType = {
      'deposit': {
        '0': 'pending',
        '1': 'ok',
        '6': 'ok',
        // Fiat
        // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
        'Processing': 'pending',
        'Failed': 'failed',
        'Successful': 'ok',
        'Refunding': 'canceled',
        'Refunded': 'canceled',
        'Refund Failed': 'failed'
      },
      'withdrawal': {
        '0': 'pending',
        '1': 'canceled',
        '2': 'pending',
        '3': 'failed',
        '4': 'pending',
        '5': 'failed',
        '6': 'ok',
        // Fiat
        // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
        'Processing': 'pending',
        'Failed': 'failed',
        'Successful': 'ok',
        'Refunding': 'canceled',
        'Refunded': 'canceled',
        'Refund Failed': 'failed'
      }
    };
    const statuses = this.safeValue(statusesByType, type, {});
    return this.safeString(statuses, status, status);
  }
  parseTransaction(transaction, currency = undefined) {
    //
    // fetchDeposits
    //
    //     {
    //       "amount": "4500",
    //       "coin": "USDT",
    //       "network": "BSC",
    //       "status": 1,
    //       "address": "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
    //       "addressTag": "",
    //       "txId": "Internal transfer 51376627901",
    //       "insertTime": 1618394381000,
    //       "transferType": 1,
    //       "confirmTimes": "1/15"
    //     }
    //
    // fetchWithdrawals
    //
    //     {
    //       "id": "69e53ad305124b96b43668ceab158a18",
    //       "amount": "28.75",
    //       "transactionFee": "0.25",
    //       "coin": "XRP",
    //       "status": 6,
    //       "address": "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
    //       "addressTag": "101286922",
    //       "txId": "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
    //       "applyTime": "2021-04-15 12:09:16",
    //       "network": "XRP",
    //       "transferType": 0
    //     }
    //
    // fiat transaction
    // withdraw
    //     {
    //       "orderNo": "CJW684897551397171200",
    //       "fiatCurrency": "GBP",
    //       "indicatedAmount": "29.99",
    //       "amount": "28.49",
    //       "totalFee": "1.50",
    //       "method": "bank transfer",
    //       "status": "Successful",
    //       "createTime": 1614898701000,
    //       "updateTime": 1614898820000
    //     }
    //
    // deposit
    //     {
    //       "orderNo": "25ced37075c1470ba8939d0df2316e23",
    //       "fiatCurrency": "EUR",
    //       "transactionType": 0,
    //       "indicatedAmount": "15.00",
    //       "amount": "15.00",
    //       "totalFee": "0.00",
    //       "method": "card",
    //       "status": "Failed",
    //       "createTime": "1627501026000",
    //       "updateTime": "1627501027000"
    //     }
    //
    // withdraw
    //
    //    { id: '9a67628b16ba4988ae20d329333f16bc' }
    //
    const id = this.safeString2(transaction, 'id', 'orderNo');
    const address = this.safeString(transaction, 'address');
    let tag = this.safeString(transaction, 'addressTag'); // set but unused
    if (tag !== undefined) {
      if (tag.length < 1) {
        tag = undefined;
      }
    }
    let txid = this.safeString(transaction, 'txId');
    if (txid !== undefined && txid.indexOf('Internal transfer ') >= 0) {
      txid = txid.slice(18);
    }
    const currencyId = this.safeString2(transaction, 'coin', 'fiatCurrency');
    let code = this.safeCurrencyCode(currencyId, currency);
    let timestamp = undefined;
    timestamp = this.safeInteger2(transaction, 'insertTime', 'createTime');
    if (timestamp === undefined) {
      timestamp = this.parse8601(this.safeString(transaction, 'applyTime'));
    }
    const updated = this.safeInteger2(transaction, 'successTime', 'updateTime');
    let type = this.safeString(transaction, 'type');
    if (type === undefined) {
      const txType = this.safeString(transaction, 'transactionType');
      if (txType !== undefined) {
        type = txType === '0' ? 'deposit' : 'withdrawal';
      }
      const legalMoneyCurrenciesById = this.safeValue(this.options, 'legalMoneyCurrenciesById');
      code = this.safeString(legalMoneyCurrenciesById, code, code);
    }
    const status = this.parseTransactionStatusByType(this.safeString(transaction, 'status'), type);
    const amount = this.safeNumber(transaction, 'amount');
    const feeCost = this.safeNumber2(transaction, 'transactionFee', 'totalFee');
    let fee = undefined;
    if (feeCost !== undefined) {
      fee = {
        'currency': code,
        'cost': feeCost
      };
    }
    let internal = this.safeInteger(transaction, 'transferType');
    if (internal !== undefined) {
      internal = internal ? true : false;
    }
    const network = this.safeString(transaction, 'network');
    return {
      'info': transaction,
      'id': id,
      'txid': txid,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'network': network,
      'address': address,
      'addressTo': address,
      'addressFrom': undefined,
      'tag': tag,
      'tagTo': tag,
      'tagFrom': undefined,
      'type': type,
      'amount': amount,
      'currency': code,
      'status': status,
      'updated': updated,
      'internal': internal,
      'fee': fee
    };
  }
  parseTransferStatus(status) {
    const statuses = {
      'CONFIRMED': 'ok'
    };
    return this.safeString(statuses, status, status);
  }
  parseTransfer(transfer, currency = undefined) {
    //
    // transfer
    //
    //     {
    //         "tranId":13526853623
    //     }
    //
    // fetchTransfers
    //
    //     {
    //         timestamp: 1614640878000,
    //         asset: 'USDT',
    //         amount: '25',
    //         type: 'MAIN_UMFUTURE',
    //         status: 'CONFIRMED',
    //         tranId: 43000126248
    //     }
    //
    const id = this.safeString(transfer, 'tranId');
    const currencyId = this.safeString(transfer, 'asset');
    const code = this.safeCurrencyCode(currencyId, currency);
    const amount = this.safeNumber(transfer, 'amount');
    const type = this.safeString(transfer, 'type');
    let fromAccount = undefined;
    let toAccount = undefined;
    const accountsById = this.safeValue(this.options, 'accountsById', {});
    if (type !== undefined) {
      const parts = type.split('_');
      fromAccount = this.safeValue(parts, 0);
      toAccount = this.safeValue(parts, 1);
      fromAccount = this.safeString(accountsById, fromAccount, fromAccount);
      toAccount = this.safeString(accountsById, toAccount, toAccount);
    }
    const timestamp = this.safeInteger(transfer, 'timestamp');
    const status = this.parseTransferStatus(this.safeString(transfer, 'status'));
    return {
      'info': transfer,
      'id': id,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'currency': code,
      'amount': amount,
      'fromAccount': fromAccount,
      'toAccount': toAccount,
      'status': status
    };
  }
  parseIncome(income, market = undefined) {
    //
    //     {
    //       "symbol": "ETHUSDT",
    //       "incomeType": "FUNDING_FEE",
    //       "income": "0.00134317",
    //       "asset": "USDT",
    //       "time": "1621584000000",
    //       "info": "FUNDING_FEE",
    //       "tranId": "4480321991774044580",
    //       "tradeId": ""
    //     }
    //
    const marketId = this.safeString(income, 'symbol');
    const symbol = this.safeSymbol(marketId, market, undefined, 'swap');
    const amount = this.safeNumber(income, 'income');
    const currencyId = this.safeString(income, 'asset');
    const code = this.safeCurrencyCode(currencyId);
    const id = this.safeString(income, 'tranId');
    const timestamp = this.safeInteger(income, 'time');
    return {
      'info': income,
      'symbol': symbol,
      'code': code,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'id': id,
      'amount': amount
    };
  }
  async transfer(code, amount, fromAccount, toAccount, params = {}) {
    /**
     * @method
     * @name binance#transfer
     * @description transfer currency internally between wallets on the same account
     * @see https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer-user_data
     * @see https://binance-docs.github.io/apidocs/spot/en/#isolated-margin-account-transfer-margin
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount account to transfer from
     * @param {string} toAccount account to transfer to
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'asset': currency['id'],
      'amount': this.currencyToPrecision(code, amount)
    };
    request['type'] = this.safeString(params, 'type');
    let method = 'sapiPostAssetTransfer';
    if (request['type'] === undefined) {
      const symbol = this.safeString(params, 'symbol');
      if (symbol !== undefined) {
        params = this.omit(params, 'symbol');
      }
      let fromId = this.convertTypeToAccount(fromAccount).toUpperCase();
      let toId = this.convertTypeToAccount(toAccount).toUpperCase();
      if (fromId === 'ISOLATED') {
        if (symbol === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' transfer () requires params["symbol"] when fromAccount is ' + fromAccount);
        } else {
          fromId = this.marketId(symbol);
        }
      }
      if (toId === 'ISOLATED') {
        if (symbol === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' transfer () requires params["symbol"] when toAccount is ' + toAccount);
        } else {
          toId = this.marketId(symbol);
        }
      }
      const accountsById = this.safeValue(this.options, 'accountsById', {});
      const fromIsolated = !(fromId in accountsById);
      const toIsolated = !(toId in accountsById);
      if (fromIsolated || toIsolated) {
        // Isolated margin transfer
        const fromFuture = fromId === 'UMFUTURE' || fromId === 'CMFUTURE';
        const toFuture = toId === 'UMFUTURE' || toId === 'CMFUTURE';
        const fromSpot = fromId === 'MAIN';
        const toSpot = toId === 'MAIN';
        const funding = fromId === 'FUNDING' || toId === 'FUNDING';
        const mining = fromId === 'MINING' || toId === 'MINING';
        const prohibitedWithIsolated = fromFuture || toFuture || mining || funding;
        if ((fromIsolated || toIsolated) && prohibitedWithIsolated) {
          throw new _errors.BadRequest(this.id + ' transfer () does not allow transfers between ' + fromAccount + ' and ' + toAccount);
        } else if (toSpot && fromIsolated) {
          method = 'sapiPostMarginIsolatedTransfer';
          request['transFrom'] = 'ISOLATED_MARGIN';
          request['transTo'] = 'SPOT';
          request['symbol'] = fromId;
        } else if (fromSpot && toIsolated) {
          method = 'sapiPostMarginIsolatedTransfer';
          request['transFrom'] = 'SPOT';
          request['transTo'] = 'ISOLATED_MARGIN';
          request['symbol'] = toId;
        } else {
          if (fromIsolated) {
            request['fromSymbol'] = fromId;
            fromId = 'ISOLATEDMARGIN';
          }
          if (toIsolated) {
            request['toSymbol'] = toId;
            toId = 'ISOLATEDMARGIN';
          }
          request['type'] = fromId + '_' + toId;
        }
      } else {
        request['type'] = fromId + '_' + toId;
      }
    }
    params = this.omit(params, 'type');
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "tranId":13526853623
    //     }
    //
    return this.parseTransfer(response, currency);
  }
  async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchTransfers
     * @description fetch a history of internal transfers made on an account
     * @param {string|undefined} code unified currency code of the currency transferred
     * @param {int|undefined} since the earliest time in ms to fetch transfers for
     * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
    }
    const defaultType = this.safeString2(this.options, 'fetchTransfers', 'defaultType', 'spot');
    const fromAccount = this.safeString(params, 'fromAccount', defaultType);
    const defaultTo = fromAccount === 'future' ? 'spot' : 'future';
    const toAccount = this.safeString(params, 'toAccount', defaultTo);
    let type = this.safeString(params, 'type');
    const accountsByType = this.safeValue(this.options, 'accountsByType', {});
    const fromId = this.safeString(accountsByType, fromAccount);
    const toId = this.safeString(accountsByType, toAccount);
    if (type === undefined) {
      if (fromId === undefined) {
        const keys = Object.keys(accountsByType);
        throw new _errors.ExchangeError(this.id + ' fromAccount parameter must be one of ' + keys.join(', '));
      }
      if (toId === undefined) {
        const keys = Object.keys(accountsByType);
        throw new _errors.ExchangeError(this.id + ' toAccount parameter must be one of ' + keys.join(', '));
      }
      type = fromId + '_' + toId;
    }
    const request = {
      'type': type
    };
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['size'] = limit;
    }
    const response = await this.sapiGetAssetTransfer(this.extend(request, params));
    //
    //     {
    //         total: 3,
    //         rows: [
    //             {
    //                 timestamp: 1614640878000,
    //                 asset: 'USDT',
    //                 amount: '25',
    //                 type: 'MAIN_UMFUTURE',
    //                 status: 'CONFIRMED',
    //                 tranId: 43000126248
    //             },
    //         ]
    //     }
    //
    const rows = this.safeValue(response, 'rows', []);
    return this.parseTransfers(rows, currency, since, limit);
  }
  async fetchDepositAddress(code, params = {}) {
    /**
     * @method
     * @name binance#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'coin': currency['id']
      // 'network': 'ETH', // 'BSC', 'XMR', you can get network and isDefault in networkList in the response of sapiGetCapitalConfigDetail
    };

    const networks = this.safeValue(this.options, 'networks', {});
    let network = this.safeStringUpper(params, 'network'); // this line allows the user to specify either ERC20 or ETH
    network = this.safeString(networks, network, network); // handle ERC20>ETH alias
    if (network !== undefined) {
      request['network'] = network;
      params = this.omit(params, 'network');
    }
    // has support for the 'network' parameter
    // https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data
    const response = await this.sapiGetCapitalDepositAddress(this.extend(request, params));
    //
    //     {
    //         currency: 'XRP',
    //         address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
    //         tag: '108618262',
    //         info: {
    //             coin: 'XRP',
    //             address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
    //             tag: '108618262',
    //             url: 'https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh'
    //         }
    //     }
    //
    const address = this.safeString(response, 'address');
    const url = this.safeString(response, 'url');
    let impliedNetwork = undefined;
    if (url !== undefined) {
      const reverseNetworks = this.safeValue(this.options, 'reverseNetworks', {});
      const parts = url.split('/');
      let topLevel = this.safeString(parts, 2);
      if (topLevel === 'blockchair.com' || topLevel === 'viewblock.io') {
        const subLevel = this.safeString(parts, 3);
        if (subLevel !== undefined) {
          topLevel = topLevel + '/' + subLevel;
        }
      }
      impliedNetwork = this.safeString(reverseNetworks, topLevel);
      const impliedNetworks = this.safeValue(this.options, 'impliedNetworks', {
        'ETH': {
          'ERC20': 'ETH'
        },
        'TRX': {
          'TRC20': 'TRX'
        }
      });
      if (code in impliedNetworks) {
        const conversion = this.safeValue(impliedNetworks, code, {});
        impliedNetwork = this.safeString(conversion, impliedNetwork, impliedNetwork);
      }
    }
    let tag = this.safeString(response, 'tag', '');
    if (tag.length === 0) {
      tag = undefined;
    }
    this.checkAddress(address);
    return {
      'currency': code,
      'address': address,
      'tag': tag,
      'network': impliedNetwork,
      'info': response
    };
  }
  async fetchTransactionFees(codes = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchTransactionFees
     * @description *DEPRECATED* please use fetchDepositWithdrawFees instead
     * @param {[string]|undefined} codes not used by binance fetchTransactionFees ()
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    await this.loadMarkets();
    const response = await this.sapiGetCapitalConfigGetall(params);
    //
    //  [
    //     {
    //       coin: 'BAT',
    //       depositAllEnable: true,
    //       withdrawAllEnable: true,
    //       name: 'Basic Attention Token',
    //       free: '0',
    //       locked: '0',
    //       freeze: '0',
    //       withdrawing: '0',
    //       ipoing: '0',
    //       ipoable: '0',
    //       storage: '0',
    //       isLegalMoney: false,
    //       trading: true,
    //       networkList: [
    //         {
    //           network: 'BNB',
    //           coin: 'BAT',
    //           withdrawIntegerMultiple: '0.00000001',
    //           isDefault: false,
    //           depositEnable: true,
    //           withdrawEnable: true,
    //           depositDesc: '',
    //           withdrawDesc: '',
    //           specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
    //           name: 'BEP2',
    //           resetAddressStatus: false,
    //           addressRegex: '^(bnb1)[0-9a-z]{38}$',
    //           memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
    //           withdrawFee: '0.27',
    //           withdrawMin: '0.54',
    //           withdrawMax: '10000000000',
    //           minConfirm: '1',
    //           unLockConfirm: '0'
    //         },
    //         {
    //           network: 'BSC',
    //           coin: 'BAT',
    //           withdrawIntegerMultiple: '0.00000001',
    //           isDefault: false,
    //           depositEnable: true,
    //           withdrawEnable: true,
    //           depositDesc: '',
    //           withdrawDesc: '',
    //           specialTips: 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 9766e.',
    //           name: 'BEP20 (BSC)',
    //           resetAddressStatus: false,
    //           addressRegex: '^(0x)[0-9A-Fa-f]{40}$',
    //           memoRegex: '',
    //           withdrawFee: '0.27',
    //           withdrawMin: '0.54',
    //           withdrawMax: '10000000000',
    //           minConfirm: '15',
    //           unLockConfirm: '0'
    //         },
    //         {
    //           network: 'ETH',
    //           coin: 'BAT',
    //           withdrawIntegerMultiple: '0.00000001',
    //           isDefault: true,
    //           depositEnable: true,
    //           withdrawEnable: true,
    //           depositDesc: '',
    //           withdrawDesc: '',
    //           specialTips: 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 887ef.',
    //           name: 'ERC20',
    //           resetAddressStatus: false,
    //           addressRegex: '^(0x)[0-9A-Fa-f]{40}$',
    //           memoRegex: '',
    //           withdrawFee: '27',
    //           withdrawMin: '54',
    //           withdrawMax: '10000000000',
    //           minConfirm: '12',
    //           unLockConfirm: '0'
    //         }
    //       ]
    //     }
    //  ]
    //
    const withdrawFees = {};
    for (let i = 0; i < response.length; i++) {
      const entry = response[i];
      const currencyId = this.safeString(entry, 'coin');
      const code = this.safeCurrencyCode(currencyId);
      const networkList = this.safeValue(entry, 'networkList', []);
      withdrawFees[code] = {};
      for (let j = 0; j < networkList.length; j++) {
        const networkEntry = networkList[j];
        const networkId = this.safeString(networkEntry, 'network');
        const networkCode = this.safeCurrencyCode(networkId);
        const fee = this.safeNumber(networkEntry, 'withdrawFee');
        withdrawFees[code][networkCode] = fee;
      }
    }
    return {
      'withdraw': withdrawFees,
      'deposit': {},
      'info': response
    };
  }
  async fetchDepositWithdrawFees(codes = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchDepositWithdrawFees
     * @description fetch deposit and withdraw fees
     * @param {[string]|undefined} codes not used by binance fetchDepositWithdrawFees ()
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    await this.loadMarkets();
    const response = await this.sapiGetCapitalConfigGetall(params);
    //
    //    [
    //        {
    //            coin: 'BAT',
    //            depositAllEnable: true,
    //            withdrawAllEnable: true,
    //            name: 'Basic Attention Token',
    //            free: '0',
    //            locked: '0',
    //            freeze: '0',
    //            withdrawing: '0',
    //            ipoing: '0',
    //            ipoable: '0',
    //            storage: '0',
    //            isLegalMoney: false,
    //            trading: true,
    //            networkList: [
    //                {
    //                    network: 'BNB',
    //                    coin: 'BAT',
    //                    withdrawIntegerMultiple: '0.00000001',
    //                    isDefault: false,
    //                    depositEnable: true,
    //                    withdrawEnable: true,
    //                    depositDesc: '',
    //                    withdrawDesc: '',
    //                    specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
    //                    name: 'BEP2',
    //                    resetAddressStatus: false,
    //                    addressRegex: '^(bnb1)[0-9a-z]{38}$',
    //                    memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
    //                    withdrawFee: '0.27',
    //                    withdrawMin: '0.54',
    //                    withdrawMax: '10000000000',
    //                    minConfirm: '1',
    //                    unLockConfirm: '0'
    //                },
    //                ...
    //            ]
    //        }
    //    ]
    //
    return this.parseDepositWithdrawFees(response, codes, 'coin');
  }
  parseDepositWithdrawFee(fee, currency = undefined) {
    //
    //    {
    //        coin: 'BAT',
    //        depositAllEnable: true,
    //        withdrawAllEnable: true,
    //        name: 'Basic Attention Token',
    //        free: '0',
    //        locked: '0',
    //        freeze: '0',
    //        withdrawing: '0',
    //        ipoing: '0',
    //        ipoable: '0',
    //        storage: '0',
    //        isLegalMoney: false,
    //        trading: true,
    //        networkList: [
    //            {
    //                network: 'BNB',
    //                coin: 'BAT',
    //                withdrawIntegerMultiple: '0.00000001',
    //                isDefault: false,
    //                depositEnable: true,
    //                withdrawEnable: true,
    //                depositDesc: '',
    //                withdrawDesc: '',
    //                specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
    //                name: 'BEP2',
    //                resetAddressStatus: false,
    //                addressRegex: '^(bnb1)[0-9a-z]{38}$',
    //                memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
    //                withdrawFee: '0.27',
    //                withdrawMin: '0.54',
    //                withdrawMax: '10000000000',
    //                minConfirm: '1',
    //                unLockConfirm: '0'
    //            },
    //            ...
    //        ]
    //    }
    //
    const networkList = this.safeValue(fee, 'networkList', []);
    const result = this.depositWithdrawFee(fee);
    for (let j = 0; j < networkList.length; j++) {
      const networkEntry = networkList[j];
      const networkId = this.safeString(networkEntry, 'network');
      const networkCode = this.networkIdToCode(networkId);
      const withdrawFee = this.safeNumber(networkEntry, 'withdrawFee');
      const isDefault = this.safeValue(networkEntry, 'isDefault');
      if (isDefault === true) {
        result['withdraw'] = {
          'fee': withdrawFee,
          'percentage': undefined
        };
      }
      result['networks'][networkCode] = {
        'withdraw': {
          'fee': withdrawFee,
          'percentage': undefined
        },
        'deposit': {
          'fee': undefined,
          'percentage': undefined
        }
      };
    }
    return result;
  }
  async withdraw(code, amount, address, tag = undefined, params = {}) {
    /**
     * @method
     * @name binance#withdraw
     * @description make a withdrawal
     * @param {string} code unified currency code
     * @param {float} amount the amount to withdraw
     * @param {string} address the address to withdraw to
     * @param {string|undefined} tag
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    [tag, params] = this.handleWithdrawTagAndParams(tag, params);
    this.checkAddress(address);
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'coin': currency['id'],
      'address': address,
      'amount': amount
      // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
      // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni
      // 'network': 'ETH', // 'BTC', 'TRX', etc, optional
    };

    if (tag !== undefined) {
      request['addressTag'] = tag;
    }
    const networks = this.safeValue(this.options, 'networks', {});
    let network = this.safeStringUpper(params, 'network'); // this line allows the user to specify either ERC20 or ETH
    network = this.safeString(networks, network, network); // handle ERC20>ETH alias
    if (network !== undefined) {
      request['network'] = network;
      params = this.omit(params, 'network');
    }
    const response = await this.sapiPostCapitalWithdrawApply(this.extend(request, params));
    //     { id: '9a67628b16ba4988ae20d329333f16bc' }
    return this.parseTransaction(response, currency);
  }
  parseTradingFee(fee, market = undefined) {
    //
    //     {
    //         "symbol": "ADABNB",
    //         "makerCommission": 0.001,
    //         "takerCommission": 0.001
    //     }
    //
    const marketId = this.safeString(fee, 'symbol');
    const symbol = this.safeSymbol(marketId, market, undefined, 'spot');
    return {
      'info': fee,
      'symbol': symbol,
      'maker': this.safeNumber(fee, 'makerCommission'),
      'taker': this.safeNumber(fee, 'takerCommission')
    };
  }
  async fetchTradingFee(symbol, params = {}) {
    /**
     * @method
     * @name binance#fetchTradingFee
     * @description fetch the trading fees for a market
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.sapiGetAssetTradeFee(this.extend(request, params));
    //
    //     [
    //       {
    //         "symbol": "BTCUSDT",
    //         "makerCommission": "0.001",
    //         "takerCommission": "0.001"
    //       }
    //     ]
    //
    const first = this.safeValue(response, 0, {});
    return this.parseTradingFee(first);
  }
  async fetchTradingFees(params = {}) {
    /**
     * @method
     * @name binance#fetchTradingFees
     * @description fetch the trading fees for multiple markets
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
     */
    await this.loadMarkets();
    let method = undefined;
    const defaultType = this.safeString2(this.options, 'fetchTradingFees', 'defaultType', 'linear');
    const type = this.safeString(params, 'type', defaultType);
    params = this.omit(params, 'type');
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchTradingFees', undefined, params);
    const isSpotOrMargin = type === 'spot' || type === 'margin';
    const isLinear = this.isLinear(type, subType);
    const isInverse = this.isInverse(type, subType);
    if (isSpotOrMargin) {
      method = 'sapiGetAssetTradeFee';
    } else if (isLinear) {
      method = 'fapiPrivateGetAccount';
    } else if (isInverse) {
      method = 'dapiPrivateGetAccount';
    }
    const response = await this[method](params);
    //
    // sapi / spot
    //
    //    [
    //       {
    //         "symbol": "ZRXBNB",
    //         "makerCommission": "0.001",
    //         "takerCommission": "0.001"
    //       },
    //       {
    //         "symbol": "ZRXBTC",
    //         "makerCommission": "0.001",
    //         "takerCommission": "0.001"
    //       },
    //    ]
    //
    // fapi / future / linear
    //
    //     {
    //         "feeTier": 0,       // account commisssion tier
    //         "canTrade": true,   // if can trade
    //         "canDeposit": true,     // if can transfer in asset
    //         "canWithdraw": true,    // if can transfer out asset
    //         "updateTime": 0,
    //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
    //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
    //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
    //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
    //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
    //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
    //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
    //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
    //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
    //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
    //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
    //         ...
    //     }
    //
    // dapi / delivery / inverse
    //
    //     {
    //         "canDeposit": true,
    //         "canTrade": true,
    //         "canWithdraw": true,
    //         "feeTier": 2,
    //         "updateTime": 0
    //     }
    //
    if (isSpotOrMargin) {
      //
      //    [
      //       {
      //         "symbol": "ZRXBNB",
      //         "makerCommission": "0.001",
      //         "takerCommission": "0.001"
      //       },
      //       {
      //         "symbol": "ZRXBTC",
      //         "makerCommission": "0.001",
      //         "takerCommission": "0.001"
      //       },
      //    ]
      //
      const result = {};
      for (let i = 0; i < response.length; i++) {
        const fee = this.parseTradingFee(response[i]);
        const symbol = fee['symbol'];
        result[symbol] = fee;
      }
      return result;
    } else if (isLinear) {
      //
      //     {
      //         "feeTier": 0,       // account commisssion tier
      //         "canTrade": true,   // if can trade
      //         "canDeposit": true,     // if can transfer in asset
      //         "canWithdraw": true,    // if can transfer out asset
      //         "updateTime": 0,
      //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
      //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
      //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
      //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
      //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
      //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
      //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
      //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
      //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
      //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
      //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
      //         ...
      //     }
      //
      const symbols = Object.keys(this.markets);
      const result = {};
      const feeTier = this.safeInteger(response, 'feeTier');
      const feeTiers = this.fees['linear']['trading']['tiers'];
      const maker = feeTiers['maker'][feeTier][1];
      const taker = feeTiers['taker'][feeTier][1];
      for (let i = 0; i < symbols.length; i++) {
        const symbol = symbols[i];
        const market = this.markets[symbol];
        if (market['linear']) {
          result[symbol] = {
            'info': {
              'feeTier': feeTier
            },
            'symbol': symbol,
            'maker': maker,
            'taker': taker
          };
        }
      }
      return result;
    } else if (isInverse) {
      //
      //     {
      //         "canDeposit": true,
      //         "canTrade": true,
      //         "canWithdraw": true,
      //         "feeTier": 2,
      //         "updateTime": 0
      //     }
      //
      const symbols = Object.keys(this.markets);
      const result = {};
      const feeTier = this.safeInteger(response, 'feeTier');
      const feeTiers = this.fees['inverse']['trading']['tiers'];
      const maker = feeTiers['maker'][feeTier][1];
      const taker = feeTiers['taker'][feeTier][1];
      for (let i = 0; i < symbols.length; i++) {
        const symbol = symbols[i];
        const market = this.markets[symbol];
        if (market['inverse']) {
          result[symbol] = {
            'info': {
              'feeTier': feeTier
            },
            'symbol': symbol,
            'maker': maker,
            'taker': taker
          };
        }
      }
      return result;
    }
  }
  async futuresTransfer(code, amount, type, params = {}) {
    /**
     * @method
     * @name binance#futuresTransfer
     * @description transfer between futures account
     * @param {string} code unified currency code
     * @param {float} amount the amount to transfer
     * @param {string} type 1 - transfer from spot account to USDT-Ⓜ futures account, 2 - transfer from USDT-Ⓜ futures account to spot account, 3 - transfer from spot account to COIN-Ⓜ futures account, 4 - transfer from COIN-Ⓜ futures account to spot account
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {float|undefined} params.recvWindow
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=futures-transfer-structure}
     */
    if (type < 1 || type > 4) {
      throw new _errors.ArgumentsRequired(this.id + ' type must be between 1 and 4');
    }
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'asset': currency['id'],
      'amount': amount,
      'type': type
    };
    const response = await this.sapiPostFuturesTransfer(this.extend(request, params));
    //
    //   {
    //       "tranId": 100000001
    //   }
    //
    return this.parseTransfer(response, currency);
  }
  async fetchFundingRate(symbol, params = {}) {
    /**
     * @method
     * @name binance#fetchFundingRate
     * @description fetch the current funding rate
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    let method = undefined;
    if (market['linear']) {
      method = 'fapiPublicGetPremiumIndex';
    } else if (market['inverse']) {
      method = 'dapiPublicGetPremiumIndex';
    } else {
      throw new _errors.NotSupported(this.id + ' fetchFundingRate() supports linear and inverse contracts only');
    }
    let response = await this[method](this.extend(request, params));
    if (market['inverse']) {
      response = response[0];
    }
    //
    //     {
    //         "symbol": "BTCUSDT",
    //         "markPrice": "45802.81129892",
    //         "indexPrice": "45745.47701915",
    //         "estimatedSettlePrice": "45133.91753671",
    //         "lastFundingRate": "0.00063521",
    //         "interestRate": "0.00010000",
    //         "nextFundingTime": "1621267200000",
    //         "time": "1621252344001"
    //     }
    //
    return this.parseFundingRate(response, market);
  }
  async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchFundingRateHistory
     * @description fetches historical funding rate prices
     * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
     * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
     * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {int|undefined} params.until timestamp in ms of the latest funding rate
     * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
     */
    await this.loadMarkets();
    const request = {};
    let method = undefined;
    const defaultType = this.safeString2(this.options, 'fetchFundingRateHistory', 'defaultType', 'future');
    const type = this.safeString(params, 'type', defaultType);
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      request['symbol'] = market['id'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchFundingRateHistory', market, params, 'linear');
    params = this.omit(params, 'type');
    if (this.isLinear(type, subType)) {
      method = 'fapiPublicGetFundingRate';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPublicGetFundingRate';
    }
    if (method === undefined) {
      throw new _errors.NotSupported(this.id + ' fetchFundingRateHistory() is not supported for ' + type + ' markets');
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    const until = this.safeInteger2(params, 'until', 'till'); // unified in milliseconds
    const endTime = this.safeInteger(params, 'endTime', until); // exchange-specific in milliseconds
    params = this.omit(params, ['endTime', 'till', 'until']);
    if (endTime !== undefined) {
      request['endTime'] = endTime;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "symbol": "BTCUSDT",
    //         "fundingRate": "0.00063521",
    //         "fundingTime": "1621267200000",
    //     }
    //
    const rates = [];
    for (let i = 0; i < response.length; i++) {
      const entry = response[i];
      const timestamp = this.safeInteger(entry, 'fundingTime');
      rates.push({
        'info': entry,
        'symbol': this.safeSymbol(this.safeString(entry, 'symbol'), undefined, undefined, 'swap'),
        'fundingRate': this.safeNumber(entry, 'fundingRate'),
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp)
      });
    }
    const sorted = this.sortBy(rates, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  async fetchFundingRates(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchFundingRates
     * @description fetch the funding rate for multiple markets
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a dictionary of [funding rates structures]{@link https://docs.ccxt.com/#/?id=funding-rates-structure}, indexe by market symbols
     */
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    let method = undefined;
    const defaultType = this.safeString2(this.options, 'fetchFundingRates', 'defaultType', 'future');
    const type = this.safeString(params, 'type', defaultType);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchFundingRates', undefined, params, 'linear');
    const query = this.omit(params, 'type');
    if (this.isLinear(type, subType)) {
      method = 'fapiPublicGetPremiumIndex';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPublicGetPremiumIndex';
    } else {
      throw new _errors.NotSupported(this.id + ' fetchFundingRates() supports linear and inverse contracts only');
    }
    const response = await this[method](query);
    const result = [];
    for (let i = 0; i < response.length; i++) {
      const entry = response[i];
      const parsed = this.parseFundingRate(entry);
      result.push(parsed);
    }
    return this.filterByArray(result, 'symbol', symbols);
  }
  parseFundingRate(contract, market = undefined) {
    // ensure it matches with https://www.binance.com/en/futures/funding-history/0
    //
    //   {
    //     "symbol": "BTCUSDT",
    //     "markPrice": "45802.81129892",
    //     "indexPrice": "45745.47701915",
    //     "estimatedSettlePrice": "45133.91753671",
    //     "lastFundingRate": "0.00063521",
    //     "interestRate": "0.00010000",
    //     "nextFundingTime": "1621267200000",
    //     "time": "1621252344001"
    //  }
    //
    const timestamp = this.safeInteger(contract, 'time');
    const marketId = this.safeString(contract, 'symbol');
    const symbol = this.safeSymbol(marketId, market, undefined, 'contract');
    const markPrice = this.safeNumber(contract, 'markPrice');
    const indexPrice = this.safeNumber(contract, 'indexPrice');
    const interestRate = this.safeNumber(contract, 'interestRate');
    const estimatedSettlePrice = this.safeNumber(contract, 'estimatedSettlePrice');
    const fundingRate = this.safeNumber(contract, 'lastFundingRate');
    const fundingTime = this.safeInteger(contract, 'nextFundingTime');
    return {
      'info': contract,
      'symbol': symbol,
      'markPrice': markPrice,
      'indexPrice': indexPrice,
      'interestRate': interestRate,
      'estimatedSettlePrice': estimatedSettlePrice,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'fundingRate': fundingRate,
      'fundingTimestamp': fundingTime,
      'fundingDatetime': this.iso8601(fundingTime),
      'nextFundingRate': undefined,
      'nextFundingTimestamp': undefined,
      'nextFundingDatetime': undefined,
      'previousFundingRate': undefined,
      'previousFundingTimestamp': undefined,
      'previousFundingDatetime': undefined
    };
  }
  parseAccountPositions(account) {
    const positions = this.safeValue(account, 'positions');
    const assets = this.safeValue(account, 'assets', []);
    const balances = {};
    for (let i = 0; i < assets.length; i++) {
      const entry = assets[i];
      const currencyId = this.safeString(entry, 'asset');
      const code = this.safeCurrencyCode(currencyId);
      const crossWalletBalance = this.safeString(entry, 'crossWalletBalance');
      const crossUnPnl = this.safeString(entry, 'crossUnPnl');
      balances[code] = {
        'crossMargin': _Precise.Precise.stringAdd(crossWalletBalance, crossUnPnl),
        'crossWalletBalance': crossWalletBalance
      };
    }
    const result = [];
    for (let i = 0; i < positions.length; i++) {
      const position = positions[i];
      const marketId = this.safeString(position, 'symbol');
      const market = this.safeMarket(marketId, undefined, undefined, 'contract');
      const code = market['linear'] ? market['quote'] : market['base'];
      // sometimes not all the codes are correctly returned...
      if (code in balances) {
        const parsed = this.parseAccountPosition(this.extend(position, {
          'crossMargin': balances[code]['crossMargin'],
          'crossWalletBalance': balances[code]['crossWalletBalance']
        }), market);
        result.push(parsed);
      }
    }
    return result;
  }
  parseAccountPosition(position, market = undefined) {
    //
    // usdm
    //    {
    //       "symbol": "BTCBUSD",
    //       "initialMargin": "0",
    //       "maintMargin": "0",
    //       "unrealizedProfit": "0.00000000",
    //       "positionInitialMargin": "0",
    //       "openOrderInitialMargin": "0",
    //       "leverage": "20",
    //       "isolated": false,
    //       "entryPrice": "0.0000",
    //       "maxNotional": "100000",
    //       "positionSide": "BOTH",
    //       "positionAmt": "0.000",
    //       "notional": "0",
    //       "isolatedWallet": "0",
    //       "updateTime": "0",
    //       "crossMargin": "100.93634809",
    //     }
    //
    // coinm
    //     {
    //       "symbol": "BTCUSD_210625",
    //       "initialMargin": "0.00024393",
    //       "maintMargin": "0.00002439",
    //       "unrealizedProfit": "-0.00000163",
    //       "positionInitialMargin": "0.00024393",
    //       "openOrderInitialMargin": "0",
    //       "leverage": "10",
    //       "isolated": false,
    //       "positionSide": "BOTH",
    //       "entryPrice": "41021.20000069",
    //       "maxQty": "100",
    //       "notionalValue": "0.00243939",
    //       "isolatedWallet": "0",
    //       "crossMargin": "0.314"
    //       "crossWalletBalance": "34",
    //     }
    //
    const marketId = this.safeString(position, 'symbol');
    market = this.safeMarket(marketId, market, undefined, 'contract');
    const symbol = this.safeString(market, 'symbol');
    const leverageString = this.safeString(position, 'leverage');
    const leverage = parseInt(leverageString);
    const initialMarginString = this.safeString(position, 'initialMargin');
    const initialMargin = this.parseNumber(initialMarginString);
    let initialMarginPercentageString = _Precise.Precise.stringDiv('1', leverageString, 8);
    const rational = 1000 % leverage === 0;
    if (!rational) {
      initialMarginPercentageString = _Precise.Precise.stringDiv(_Precise.Precise.stringAdd(initialMarginPercentageString, '1e-8'), '1', 8);
    }
    // as oppose to notionalValue
    const usdm = ('notional' in position);
    const maintenanceMarginString = this.safeString(position, 'maintMargin');
    const maintenanceMargin = this.parseNumber(maintenanceMarginString);
    const entryPriceString = this.safeString(position, 'entryPrice');
    let entryPrice = this.parseNumber(entryPriceString);
    const notionalString = this.safeString2(position, 'notional', 'notionalValue');
    const notionalStringAbs = _Precise.Precise.stringAbs(notionalString);
    const notional = this.parseNumber(notionalStringAbs);
    let contractsString = this.safeString(position, 'positionAmt');
    let contractsStringAbs = _Precise.Precise.stringAbs(contractsString);
    if (contractsString === undefined) {
      const entryNotional = _Precise.Precise.stringMul(_Precise.Precise.stringMul(leverageString, initialMarginString), entryPriceString);
      const contractSize = this.safeString(market, 'contractSize');
      contractsString = _Precise.Precise.stringDiv(entryNotional, contractSize);
      contractsStringAbs = _Precise.Precise.stringDiv(_Precise.Precise.stringAdd(contractsString, '0.5'), '1', 0);
    }
    const contracts = this.parseNumber(contractsStringAbs);
    const leverageBrackets = this.safeValue(this.options, 'leverageBrackets', {});
    const leverageBracket = this.safeValue(leverageBrackets, symbol, []);
    let maintenanceMarginPercentageString = undefined;
    for (let i = 0; i < leverageBracket.length; i++) {
      const bracket = leverageBracket[i];
      if (_Precise.Precise.stringLt(notionalStringAbs, bracket[0])) {
        break;
      }
      maintenanceMarginPercentageString = bracket[1];
    }
    const maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);
    const unrealizedPnlString = this.safeString(position, 'unrealizedProfit');
    const unrealizedPnl = this.parseNumber(unrealizedPnlString);
    let timestamp = this.safeInteger(position, 'updateTime');
    if (timestamp === 0) {
      timestamp = undefined;
    }
    const isolated = this.safeValue(position, 'isolated');
    let marginMode = undefined;
    let collateralString = undefined;
    let walletBalance = undefined;
    if (isolated) {
      marginMode = 'isolated';
      walletBalance = this.safeString(position, 'isolatedWallet');
      collateralString = _Precise.Precise.stringAdd(walletBalance, unrealizedPnlString);
    } else {
      marginMode = 'cross';
      walletBalance = this.safeString(position, 'crossWalletBalance');
      collateralString = this.safeString(position, 'crossMargin');
    }
    const collateral = this.parseNumber(collateralString);
    let marginRatio = undefined;
    let side = undefined;
    let percentage = undefined;
    let liquidationPriceStringRaw = undefined;
    let liquidationPrice = undefined;
    const contractSize = this.safeValue(market, 'contractSize');
    const contractSizeString = this.numberToString(contractSize);
    if (_Precise.Precise.stringEquals(notionalString, '0')) {
      entryPrice = undefined;
    } else {
      side = _Precise.Precise.stringLt(notionalString, '0') ? 'short' : 'long';
      marginRatio = this.parseNumber(_Precise.Precise.stringDiv(_Precise.Precise.stringAdd(_Precise.Precise.stringDiv(maintenanceMarginString, collateralString), '5e-5'), '1', 4));
      percentage = this.parseNumber(_Precise.Precise.stringMul(_Precise.Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), '100'));
      if (usdm) {
        // calculate liquidation price
        //
        // liquidationPrice = (walletBalance / (contracts * (±1 + mmp))) + (±entryPrice / (±1 + mmp))
        //
        // mmp = maintenanceMarginPercentage
        // where ± is negative for long and positive for short
        // TODO: calculate liquidation price for coinm contracts
        let onePlusMaintenanceMarginPercentageString = undefined;
        let entryPriceSignString = entryPriceString;
        if (side === 'short') {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringAdd('1', maintenanceMarginPercentageString);
        } else {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringAdd('-1', maintenanceMarginPercentageString);
          entryPriceSignString = _Precise.Precise.stringMul('-1', entryPriceSignString);
        }
        const leftSide = _Precise.Precise.stringDiv(walletBalance, _Precise.Precise.stringMul(contractsStringAbs, onePlusMaintenanceMarginPercentageString));
        const rightSide = _Precise.Precise.stringDiv(entryPriceSignString, onePlusMaintenanceMarginPercentageString);
        liquidationPriceStringRaw = _Precise.Precise.stringAdd(leftSide, rightSide);
      } else {
        // calculate liquidation price
        //
        // liquidationPrice = (contracts * contractSize(±1 - mmp)) / (±1/entryPrice * contracts * contractSize - walletBalance)
        //
        let onePlusMaintenanceMarginPercentageString = undefined;
        let entryPriceSignString = entryPriceString;
        if (side === 'short') {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringSub('1', maintenanceMarginPercentageString);
        } else {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringSub('-1', maintenanceMarginPercentageString);
          entryPriceSignString = _Precise.Precise.stringMul('-1', entryPriceSignString);
        }
        const size = _Precise.Precise.stringMul(contractsStringAbs, contractSizeString);
        const leftSide = _Precise.Precise.stringMul(size, onePlusMaintenanceMarginPercentageString);
        const rightSide = _Precise.Precise.stringSub(_Precise.Precise.stringMul(_Precise.Precise.stringDiv('1', entryPriceSignString), size), walletBalance);
        liquidationPriceStringRaw = _Precise.Precise.stringDiv(leftSide, rightSide);
      }
      const pricePrecision = market['precision']['price'];
      const pricePrecisionPlusOne = pricePrecision + 1;
      const pricePrecisionPlusOneString = pricePrecisionPlusOne.toString();
      // round half up
      const rounder = new _Precise.Precise('5e-' + pricePrecisionPlusOneString);
      const rounderString = rounder.toString();
      const liquidationPriceRoundedString = _Precise.Precise.stringAdd(rounderString, liquidationPriceStringRaw);
      let truncatedLiquidationPrice = _Precise.Precise.stringDiv(liquidationPriceRoundedString, '1', pricePrecision);
      if (truncatedLiquidationPrice[0] === '-') {
        // user cannot be liquidated
        // since he has more collateral than the size of the position
        truncatedLiquidationPrice = undefined;
      }
      liquidationPrice = this.parseNumber(truncatedLiquidationPrice);
    }
    const positionSide = this.safeString(position, 'positionSide');
    const hedged = positionSide !== 'BOTH';
    return {
      'info': position,
      'id': undefined,
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'initialMargin': initialMargin,
      'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),
      'maintenanceMargin': maintenanceMargin,
      'maintenanceMarginPercentage': maintenanceMarginPercentage,
      'entryPrice': entryPrice,
      'notional': notional,
      'leverage': this.parseNumber(leverageString),
      'unrealizedPnl': unrealizedPnl,
      'contracts': contracts,
      'contractSize': contractSize,
      'marginRatio': marginRatio,
      'liquidationPrice': liquidationPrice,
      'markPrice': undefined,
      'collateral': collateral,
      'marginMode': marginMode,
      'side': side,
      'hedged': hedged,
      'percentage': percentage
    };
  }
  parsePositionRisk(position, market = undefined) {
    //
    // usdm
    //     {
    //       "symbol": "BTCUSDT",
    //       "positionAmt": "0.001",
    //       "entryPrice": "43578.07000",
    //       "markPrice": "43532.30000000",
    //       "unRealizedProfit": "-0.04577000",
    //       "liquidationPrice": "21841.24993976",
    //       "leverage": "2",
    //       "maxNotionalValue": "300000000",
    //       "marginType": "isolated",
    //       "isolatedMargin": "21.77841506",
    //       "isAutoAddMargin": "false",
    //       "positionSide": "BOTH",
    //       "notional": "43.53230000",
    //       "isolatedWallet": "21.82418506",
    //       "updateTime": "1621358023886"
    //     }
    //
    // coinm
    //     {
    //       "symbol": "BTCUSD_PERP",
    //       "positionAmt": "2",
    //       "entryPrice": "37643.10000021",
    //       "markPrice": "38103.05510455",
    //       "unRealizedProfit": "0.00006413",
    //       "liquidationPrice": "25119.97445760",
    //       "leverage": "2",
    //       "maxQty": "1500",
    //       "marginType": "isolated",
    //       "isolatedMargin": "0.00274471",
    //       "isAutoAddMargin": "false",
    //       "positionSide": "BOTH",
    //       "notionalValue": "0.00524892",
    //       "isolatedWallet": "0.00268058"
    //     }
    //
    const marketId = this.safeString(position, 'symbol');
    market = this.safeMarket(marketId, market, undefined, 'contract');
    const symbol = this.safeString(market, 'symbol');
    const leverageBrackets = this.safeValue(this.options, 'leverageBrackets', {});
    const leverageBracket = this.safeValue(leverageBrackets, symbol, []);
    const notionalString = this.safeString2(position, 'notional', 'notionalValue');
    const notionalStringAbs = _Precise.Precise.stringAbs(notionalString);
    let maintenanceMarginPercentageString = undefined;
    for (let i = 0; i < leverageBracket.length; i++) {
      const bracket = leverageBracket[i];
      if (_Precise.Precise.stringLt(notionalStringAbs, bracket[0])) {
        break;
      }
      maintenanceMarginPercentageString = bracket[1];
    }
    const notional = this.parseNumber(notionalStringAbs);
    const contractsAbs = _Precise.Precise.stringAbs(this.safeString(position, 'positionAmt'));
    const contracts = this.parseNumber(contractsAbs);
    const unrealizedPnlString = this.safeString(position, 'unRealizedProfit');
    const unrealizedPnl = this.parseNumber(unrealizedPnlString);
    const leverageString = this.safeString(position, 'leverage');
    const leverage = parseInt(leverageString);
    const liquidationPriceString = this.omitZero(this.safeString(position, 'liquidationPrice'));
    const liquidationPrice = this.parseNumber(liquidationPriceString);
    let collateralString = undefined;
    const marginMode = this.safeString(position, 'marginType');
    let side = undefined;
    if (_Precise.Precise.stringGt(notionalString, '0')) {
      side = 'long';
    } else if (_Precise.Precise.stringLt(notionalString, '0')) {
      side = 'short';
    }
    const entryPriceString = this.safeString(position, 'entryPrice');
    const entryPrice = this.parseNumber(entryPriceString);
    const contractSize = this.safeValue(market, 'contractSize');
    const contractSizeString = this.numberToString(contractSize);
    // as oppose to notionalValue
    const linear = ('notional' in position);
    if (marginMode === 'cross') {
      // calculate collateral
      const precision = this.safeValue(market, 'precision', {});
      if (linear) {
        // walletBalance = (liquidationPrice * (±1 + mmp) ± entryPrice) * contracts
        let onePlusMaintenanceMarginPercentageString = undefined;
        let entryPriceSignString = entryPriceString;
        if (side === 'short') {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringAdd('1', maintenanceMarginPercentageString);
          entryPriceSignString = _Precise.Precise.stringMul('-1', entryPriceSignString);
        } else {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringAdd('-1', maintenanceMarginPercentageString);
        }
        const inner = _Precise.Precise.stringMul(liquidationPriceString, onePlusMaintenanceMarginPercentageString);
        const leftSide = _Precise.Precise.stringAdd(inner, entryPriceSignString);
        const pricePrecision = this.safeInteger(precision, 'price');
        const quotePrecision = this.safeInteger(precision, 'quote', pricePrecision);
        if (quotePrecision !== undefined) {
          collateralString = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(leftSide, contractsAbs), '1', quotePrecision);
        }
      } else {
        // walletBalance = (contracts * contractSize) * (±1/entryPrice - (±1 - mmp) / liquidationPrice)
        let onePlusMaintenanceMarginPercentageString = undefined;
        let entryPriceSignString = entryPriceString;
        if (side === 'short') {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringSub('1', maintenanceMarginPercentageString);
        } else {
          onePlusMaintenanceMarginPercentageString = _Precise.Precise.stringSub('-1', maintenanceMarginPercentageString);
          entryPriceSignString = _Precise.Precise.stringMul('-1', entryPriceSignString);
        }
        const leftSide = _Precise.Precise.stringMul(contractsAbs, contractSizeString);
        const rightSide = _Precise.Precise.stringSub(_Precise.Precise.stringDiv('1', entryPriceSignString), _Precise.Precise.stringDiv(onePlusMaintenanceMarginPercentageString, liquidationPriceString));
        const basePrecision = this.safeInteger(precision, 'base');
        if (basePrecision !== undefined) {
          collateralString = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(leftSide, rightSide), '1', basePrecision);
        }
      }
    } else {
      collateralString = this.safeString(position, 'isolatedMargin');
    }
    collateralString = collateralString === undefined ? '0' : collateralString;
    const collateral = this.parseNumber(collateralString);
    const markPrice = this.parseNumber(this.omitZero(this.safeString(position, 'markPrice')));
    let timestamp = this.safeInteger(position, 'updateTime');
    if (timestamp === 0) {
      timestamp = undefined;
    }
    const maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);
    const maintenanceMarginString = _Precise.Precise.stringMul(maintenanceMarginPercentageString, notionalStringAbs);
    const maintenanceMargin = this.parseNumber(maintenanceMarginString);
    let initialMarginPercentageString = _Precise.Precise.stringDiv('1', leverageString, 8);
    const rational = 1000 % leverage === 0;
    if (!rational) {
      initialMarginPercentageString = _Precise.Precise.stringAdd(initialMarginPercentageString, '1e-8');
    }
    const initialMarginString = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(notionalStringAbs, initialMarginPercentageString), '1', 8);
    const initialMargin = this.parseNumber(initialMarginString);
    let marginRatio = undefined;
    let percentage = undefined;
    if (!_Precise.Precise.stringEquals(collateralString, '0')) {
      marginRatio = this.parseNumber(_Precise.Precise.stringDiv(_Precise.Precise.stringAdd(_Precise.Precise.stringDiv(maintenanceMarginString, collateralString), '5e-5'), '1', 4));
      percentage = this.parseNumber(_Precise.Precise.stringMul(_Precise.Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), '100'));
    }
    const positionSide = this.safeString(position, 'positionSide');
    const hedged = positionSide !== 'BOTH';
    return {
      'info': position,
      'id': undefined,
      'symbol': symbol,
      'contracts': contracts,
      'contractSize': contractSize,
      'unrealizedPnl': unrealizedPnl,
      'leverage': this.parseNumber(leverageString),
      'liquidationPrice': liquidationPrice,
      'collateral': collateral,
      'notional': notional,
      'markPrice': markPrice,
      'entryPrice': entryPrice,
      'timestamp': timestamp,
      'initialMargin': initialMargin,
      'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),
      'maintenanceMargin': maintenanceMargin,
      'maintenanceMarginPercentage': maintenanceMarginPercentage,
      'marginRatio': marginRatio,
      'datetime': this.iso8601(timestamp),
      'marginMode': marginMode,
      'marginType': marginMode,
      'side': side,
      'hedged': hedged,
      'percentage': percentage
    };
  }
  async loadLeverageBrackets(reload = false, params = {}) {
    await this.loadMarkets();
    // by default cache the leverage bracket
    // it contains useful stuff like the maintenance margin and initial margin for positions
    const leverageBrackets = this.safeValue(this.options, 'leverageBrackets');
    if (leverageBrackets === undefined || reload) {
      let method = undefined;
      const defaultType = this.safeString(this.options, 'defaultType', 'future');
      const type = this.safeString(params, 'type', defaultType);
      const query = this.omit(params, 'type');
      let subType = undefined;
      [subType, params] = this.handleSubTypeAndParams('loadLeverageBrackets', undefined, params, 'linear');
      if (this.isLinear(type, subType)) {
        method = 'fapiPrivateGetLeverageBracket';
      } else if (this.isInverse(type, subType)) {
        method = 'dapiPrivateV2GetLeverageBracket';
      } else {
        throw new _errors.NotSupported(this.id + ' loadLeverageBrackets() supports linear and inverse contracts only');
      }
      const response = await this[method](query);
      this.options['leverageBrackets'] = {};
      for (let i = 0; i < response.length; i++) {
        const entry = response[i];
        const marketId = this.safeString(entry, 'symbol');
        const symbol = this.safeSymbol(marketId, undefined, undefined, 'contract');
        const brackets = this.safeValue(entry, 'brackets', []);
        const result = [];
        for (let j = 0; j < brackets.length; j++) {
          const bracket = brackets[j];
          const floorValue = this.safeString2(bracket, 'notionalFloor', 'qtyFloor');
          const maintenanceMarginPercentage = this.safeString(bracket, 'maintMarginRatio');
          result.push([floorValue, maintenanceMarginPercentage]);
        }
        this.options['leverageBrackets'][symbol] = result;
      }
    }
    return this.options['leverageBrackets'];
  }
  async fetchLeverageTiers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchLeverageTiers
     * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a dictionary of [leverage tiers structures]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}, indexed by market symbols
     */
    await this.loadMarkets();
    const [type, query] = this.handleMarketTypeAndParams('fetchLeverageTiers', undefined, params);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchLeverageTiers', undefined, query, 'linear');
    let method = undefined;
    if (this.isLinear(type, subType)) {
      method = 'fapiPrivateGetLeverageBracket';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPrivateV2GetLeverageBracket';
    } else {
      throw new _errors.NotSupported(this.id + ' fetchLeverageTiers() supports linear and inverse contracts only');
    }
    const response = await this[method](query);
    //
    // usdm
    //
    //    [
    //        {
    //            "symbol": "SUSHIUSDT",
    //            "brackets": [
    //                {
    //                    "bracket": 1,
    //                    "initialLeverage": 50,
    //                    "notionalCap": 50000,
    //                    "notionalFloor": 0,
    //                    "maintMarginRatio": 0.01,
    //                    "cum": 0.0
    //                },
    //                ...
    //            ]
    //        }
    //    ]
    //
    // coinm
    //
    //     [
    //         {
    //             "symbol":"XRPUSD_210326",
    //             "brackets":[
    //                 {
    //                     "bracket":1,
    //                     "initialLeverage":20,
    //                     "qtyCap":500000,
    //                     "qtyFloor":0,
    //                     "maintMarginRatio":0.0185,
    //                     "cum":0.0
    //                 }
    //             ]
    //         }
    //     ]
    //
    return this.parseLeverageTiers(response, symbols, 'symbol');
  }
  parseMarketLeverageTiers(info, market = undefined) {
    /**
     * @ignore
     * @method
     * @param {object} info Exchange response for 1 market
     * @param {object} market CCXT market
     */
    //
    //    {
    //        "symbol": "SUSHIUSDT",
    //        "brackets": [
    //            {
    //                "bracket": 1,
    //                "initialLeverage": 50,
    //                "notionalCap": 50000,
    //                "notionalFloor": 0,
    //                "maintMarginRatio": 0.01,
    //                "cum": 0.0
    //            },
    //            ...
    //        ]
    //    }
    //
    const marketId = this.safeString(info, 'symbol');
    market = this.safeMarket(marketId, market, undefined, 'contract');
    const brackets = this.safeValue(info, 'brackets', []);
    const tiers = [];
    for (let j = 0; j < brackets.length; j++) {
      const bracket = brackets[j];
      tiers.push({
        'tier': this.safeNumber(bracket, 'bracket'),
        'currency': market['quote'],
        'minNotional': this.safeNumber2(bracket, 'notionalFloor', 'qtyFloor'),
        'maxNotional': this.safeNumber2(bracket, 'notionalCap', 'qtyCap'),
        'maintenanceMarginRate': this.safeNumber(bracket, 'maintMarginRatio'),
        'maxLeverage': this.safeNumber(bracket, 'initialLeverage'),
        'info': bracket
      });
    }
    return tiers;
  }
  async fetchPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchPositions
     * @description fetch all open positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    const defaultMethod = this.safeString(this.options, 'fetchPositions', 'positionRisk');
    if (defaultMethod === 'positionRisk') {
      return await this.fetchPositionsRisk(symbols, params);
    } else if (defaultMethod === 'account') {
      return await this.fetchAccountPositions(symbols, params);
    } else {
      throw new _errors.NotSupported(this.id + '.options["fetchPositions"] = "' + defaultMethod + '" is invalid, please choose between "account" and "positionRisk"');
    }
  }
  async fetchAccountPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchAccountPositions
     * @description fetch account positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} data on account positions
     */
    if (symbols !== undefined) {
      if (!Array.isArray(symbols)) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchPositions() requires an array argument for symbols');
      }
    }
    await this.loadMarkets();
    await this.loadLeverageBrackets(false, params);
    let method = undefined;
    const defaultType = this.safeString(this.options, 'defaultType', 'future');
    const type = this.safeString(params, 'type', defaultType);
    let query = this.omit(params, 'type');
    let subType = undefined;
    [subType, query] = this.handleSubTypeAndParams('fetchAccountPositions', undefined, params, 'linear');
    if (this.isLinear(type, subType)) {
      method = 'fapiPrivateGetAccount';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPrivateGetAccount';
    } else {
      throw new _errors.NotSupported(this.id + ' fetchPositions() supports linear and inverse contracts only');
    }
    const account = await this[method](query);
    const result = this.parseAccountPositions(account);
    symbols = this.marketSymbols(symbols);
    return this.filterByArray(result, 'symbol', symbols, false);
  }
  async fetchPositionsRisk(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchPositionsRisk
     * @description fetch positions risk
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} data on the positions risk
     */
    if (symbols !== undefined) {
      if (!Array.isArray(symbols)) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchPositionsRisk() requires an array argument for symbols');
      }
    }
    await this.loadMarkets();
    await this.loadLeverageBrackets(false, params);
    const request = {};
    let method = undefined;
    let defaultType = 'future';
    defaultType = this.safeString(this.options, 'defaultType', defaultType);
    const type = this.safeString(params, 'type', defaultType);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchPositionsRisk', undefined, params, 'linear');
    params = this.omit(params, 'type');
    if (this.isLinear(type, subType)) {
      method = 'fapiPrivateGetPositionRisk';
      // ### Response examples ###
      //
      // For One-way position mode:
      //     [
      //         {
      //             "entryPrice": "0.00000",
      //             "marginType": "isolated",
      //             "isAutoAddMargin": "false",
      //             "isolatedMargin": "0.00000000",
      //             "leverage": "10",
      //             "liquidationPrice": "0",
      //             "markPrice": "6679.50671178",
      //             "maxNotionalValue": "20000000",
      //             "positionAmt": "0.000",
      //             "symbol": "BTCUSDT",
      //             "unRealizedProfit": "0.00000000",
      //             "positionSide": "BOTH",
      //             "updateTime": 0
      //        }
      //     ]
      //
      // For Hedge position mode:
      //     [
      //         {
      //             "entryPrice": "6563.66500",
      //             "marginType": "isolated",
      //             "isAutoAddMargin": "false",
      //             "isolatedMargin": "15517.54150468",
      //             "leverage": "10",
      //             "liquidationPrice": "5930.78",
      //             "markPrice": "6679.50671178",
      //             "maxNotionalValue": "20000000",
      //             "positionAmt": "20.000",
      //             "symbol": "BTCUSDT",
      //             "unRealizedProfit": "2316.83423560"
      //             "positionSide": "LONG",
      //             "updateTime": 1625474304765
      //         },
      //         {
      //             "entryPrice": "0.00000",
      //             "marginType": "isolated",
      //             "isAutoAddMargin": "false",
      //             "isolatedMargin": "5413.95799991",
      //             "leverage": "10",
      //             "liquidationPrice": "7189.95",
      //             "markPrice": "6679.50671178",
      //             "maxNotionalValue": "20000000",
      //             "positionAmt": "-10.000",
      //             "symbol": "BTCUSDT",
      //             "unRealizedProfit": "-1156.46711780",
      //             "positionSide": "SHORT",
      //             "updateTime": 0
      //         }
      //     ]
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPrivateGetPositionRisk';
    } else {
      throw new _errors.NotSupported(this.id + ' fetchPositionsRisk() supports linear and inverse contracts only');
    }
    const response = await this[method](this.extend(request, params));
    const result = [];
    for (let i = 0; i < response.length; i++) {
      const parsed = this.parsePositionRisk(response[i]);
      result.push(parsed);
    }
    symbols = this.marketSymbols(symbols);
    return this.filterByArray(result, 'symbol', symbols, false);
  }
  async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchFundingHistory
     * @description fetch the history of funding payments paid and received on this account
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch funding history for
     * @param {int|undefined} limit the maximum number of funding history structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let method = undefined;
    const request = {
      'incomeType': 'FUNDING_FEE' // "TRANSFER"，"WELCOME_BONUS", "REALIZED_PNL"，"FUNDING_FEE", "COMMISSION" and "INSURANCE_CLEAR"
    };

    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      if (!market['swap']) {
        throw new _errors.NotSupported(this.id + ' fetchFundingHistory() supports swap contracts only');
      }
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchFundingHistory', market, params, 'linear');
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const defaultType = this.safeString2(this.options, 'fetchFundingHistory', 'defaultType', 'future');
    const type = this.safeString(params, 'type', defaultType);
    params = this.omit(params, 'type');
    if (this.isLinear(type, subType)) {
      method = 'fapiPrivateGetIncome';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPrivateGetIncome';
    } else {
      throw new _errors.NotSupported(this.id + ' fetchFundingHistory() supports linear and inverse contracts only');
    }
    const response = await this[method](this.extend(request, params));
    return this.parseIncomes(response, market, since, limit);
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#setLeverage
     * @description set the level of leverage for a market
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
    }
    // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
    // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
    if (leverage < 1 || leverage > 125) {
      throw new _errors.BadRequest(this.id + ' leverage should be between 1 and 125');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    let method = undefined;
    if (market['linear']) {
      method = 'fapiPrivatePostLeverage';
    } else if (market['inverse']) {
      method = 'dapiPrivatePostLeverage';
    } else {
      throw new _errors.NotSupported(this.id + ' setLeverage() supports linear and inverse contracts only');
    }
    const request = {
      'symbol': market['id'],
      'leverage': leverage
    };
    return await this[method](this.extend(request, params));
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#setMarginMode
     * @description set margin mode to 'cross' or 'isolated'
     * @param {string} marginMode 'cross' or 'isolated'
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
    }
    //
    // { "code": -4048 , "msg": "Margin type cannot be changed if there exists position." }
    //
    // or
    //
    // { "code": 200, "msg": "success" }
    //
    marginMode = marginMode.toUpperCase();
    if (marginMode === 'CROSS') {
      marginMode = 'CROSSED';
    }
    if (marginMode !== 'ISOLATED' && marginMode !== 'CROSSED') {
      throw new _errors.BadRequest(this.id + ' marginMode must be either isolated or cross');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    let method = undefined;
    if (market['linear']) {
      method = 'fapiPrivatePostMarginType';
    } else if (market['inverse']) {
      method = 'dapiPrivatePostMarginType';
    } else {
      throw new _errors.NotSupported(this.id + ' setMarginMode() supports linear and inverse contracts only');
    }
    const request = {
      'symbol': market['id'],
      'marginType': marginMode
    };
    let response = undefined;
    try {
      response = await this[method](this.extend(request, params));
    } catch (e) {
      // not an error
      // https://github.com/ccxt/ccxt/issues/11268
      // https://github.com/ccxt/ccxt/pull/11624
      // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
      // binanceusdm
      if (e instanceof _errors.MarginModeAlreadySet) {
        const throwMarginModeAlreadySet = this.safeValue(this.options, 'throwMarginModeAlreadySet', false);
        if (throwMarginModeAlreadySet) {
          throw e;
        } else {
          response = {
            'code': -4046,
            'msg': 'No need to change margin type.'
          };
        }
      }
    }
    return response;
  }
  async setPositionMode(hedged, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#setPositionMode
     * @description set hedged to true or false for a market
     * @param {bool} hedged set to true to use dualSidePosition
     * @param {string|undefined} symbol not used by binance setPositionMode ()
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} response from the exchange
     */
    const defaultType = this.safeString(this.options, 'defaultType', 'future');
    const type = this.safeString(params, 'type', defaultType);
    params = this.omit(params, ['type']);
    let dualSidePosition = undefined;
    if (hedged) {
      dualSidePosition = 'true';
    } else {
      dualSidePosition = 'false';
    }
    const request = {
      'dualSidePosition': dualSidePosition
    };
    let method = undefined;
    if (this.isInverse(type)) {
      method = 'dapiPrivatePostPositionSideDual';
    } else {
      // default to future
      method = 'fapiPrivatePostPositionSideDual';
    }
    //
    //     {
    //       "code": 200,
    //       "msg": "success"
    //     }
    //
    return await this[method](this.extend(request, params));
  }
  async fetchSettlementHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchSettlementHistory
     * @description fetches historical settlement records
     * @see https://binance-docs.github.io/apidocs/voptions/en/#historical-exercise-records
     * @param {string} symbol unified market symbol of the settlement history
     * @param {int} since timestamp in ms
     * @param {int} limit number of records, default 100, max 100
     * @param {object} params exchange specific params
     * @returns {[object]} a list of [settlement history objects]
     */
    await this.loadMarkets();
    const market = symbol === undefined ? undefined : this.market(symbol);
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchSettlementHistory', market, params);
    if (type !== 'option') {
      throw new _errors.NotSupported(this.id + ' fetchSettlementHistory() supports option markets only');
    }
    const request = {};
    if (symbol !== undefined) {
      symbol = market['symbol'];
      request['underlying'] = market['baseId'] + market['quoteId'];
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.eapiPublicGetExerciseHistory(this.extend(request, params));
    //
    //     [
    //         {
    //             "symbol": "ETH-230223-1900-P",
    //             "strikePrice": "1900",
    //             "realStrikePrice": "1665.5897334",
    //             "expiryDate": 1677139200000,
    //             "strikeResult": "REALISTIC_VALUE_STRICKEN"
    //         }
    //     ]
    //
    const settlements = this.parseSettlements(response, market);
    const sorted = this.sortBy(settlements, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  parseSettlement(settlement, market) {
    //
    //     {
    //         "symbol": "ETH-230223-1900-P",
    //         "strikePrice": "1900",
    //         "realStrikePrice": "1665.5897334",
    //         "expiryDate": 1677139200000,
    //         "strikeResult": "REALISTIC_VALUE_STRICKEN"
    //     }
    //
    const timestamp = this.safeInteger(settlement, 'expiryDate');
    const marketId = this.safeString(settlement, 'symbol');
    return {
      'info': settlement,
      'symbol': this.safeSymbol(marketId, market),
      'price': this.safeNumber(settlement, 'realStrikePrice'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp)
    };
  }
  parseSettlements(settlements, market) {
    //
    //     [
    //         {
    //             "symbol": "ETH-230223-1900-P",
    //             "strikePrice": "1900",
    //             "realStrikePrice": "1665.5897334",
    //             "expiryDate": 1677139200000,
    //             "strikeResult": "EXTRINSIC_VALUE_EXPIRED"
    //         }
    //     ]
    //
    const result = [];
    for (let i = 0; i < settlements.length; i++) {
      result.push(this.parseSettlement(settlements[i], market));
    }
    return result;
  }
  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered the balance of the user
     * @see https://binance-docs.github.io/apidocs/voptions/en/#account-funding-flow-user_data
     * @see https://binance-docs.github.io/apidocs/futures/en/#get-income-history-user_data
     * @see https://binance-docs.github.io/apidocs/delivery/en/#get-income-history-user_data
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since timestamp in ms of the earliest ledger entry
     * @param {int|undefined} limit max number of ledger entrys to return
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    await this.loadMarkets();
    let type = undefined;
    let subType = undefined;
    let currency = undefined;
    let method = undefined;
    const request = {};
    [type, params] = this.handleMarketTypeAndParams('fetchLedger', undefined, params);
    [subType, params] = this.handleSubTypeAndParams('fetchLedger', undefined, params);
    if (type === 'option') {
      this.checkRequiredArgument('fetchLedger', code, 'code');
      currency = this.currency(code);
      request['currency'] = currency['id'];
      method = 'eapiPrivateGetBill';
    } else if (this.isLinear(type, subType)) {
      method = 'fapiPrivateGetIncome';
    } else if (this.isInverse(type, subType)) {
      method = 'dapiPrivateGetIncome';
    } else {
      throw new _errors.NotSupported(this.id + ' fetchLedger() supports contract wallets only');
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, params));
    //
    // options (eapi)
    //
    //     [
    //         {
    //             "id": "1125899906845701870",
    //             "asset": "USDT",
    //             "amount": "-0.16518203",
    //             "type": "FEE",
    //             "createDate": 1676621042489
    //         }
    //     ]
    //
    // futures (fapi, dapi)
    //
    //     [
    //         {
    //             "symbol": "",
    //             "incomeType": "TRANSFER",
    //             "income": "10.00000000",
    //             "asset": "USDT",
    //             "time": 1677645250000,
    //             "info": "TRANSFER",
    //             "tranId": 131001573082,
    //             "tradeId": ""
    //         }
    //     ]
    //
    return this.parseLedger(response, currency, since, limit);
  }
  parseLedgerEntry(item, currency = undefined) {
    //
    // options (eapi)
    //
    //     {
    //         "id": "1125899906845701870",
    //         "asset": "USDT",
    //         "amount": "-0.16518203",
    //         "type": "FEE",
    //         "createDate": 1676621042489
    //     }
    //
    // futures (fapi, dapi)
    //
    //     {
    //         "symbol": "",
    //         "incomeType": "TRANSFER",
    //         "income": "10.00000000",
    //         "asset": "USDT",
    //         "time": 1677645250000,
    //         "info": "TRANSFER",
    //         "tranId": 131001573082,
    //         "tradeId": ""
    //     }
    //
    let amount = this.safeString2(item, 'amount', 'income');
    let direction = undefined;
    if (_Precise.Precise.stringLe(amount, '0')) {
      direction = 'out';
      amount = _Precise.Precise.stringMul('-1', amount);
    } else {
      direction = 'in';
    }
    const currencyId = this.safeString(item, 'asset');
    const timestamp = this.safeInteger2(item, 'createDate', 'time');
    const type = this.safeString2(item, 'type', 'incomeType');
    return {
      'id': this.safeString2(item, 'id', 'tranId'),
      'direction': direction,
      'account': undefined,
      'referenceAccount': undefined,
      'referenceId': this.safeString(item, 'tradeId'),
      'type': this.parseLedgerEntryType(type),
      'currency': this.safeCurrencyCode(currencyId, currency),
      'amount': this.parseNumber(amount),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'before': undefined,
      'after': undefined,
      'status': undefined,
      'fee': undefined,
      'info': item
    };
  }
  parseLedgerEntryType(type) {
    const ledgerType = {
      'FEE': 'fee',
      'FUNDING_FEE': 'fee',
      'OPTIONS_PREMIUM_FEE': 'fee',
      'POSITION_LIMIT_INCREASE_FEE': 'fee',
      'CONTRACT': 'trade',
      'REALIZED_PNL': 'trade',
      'TRANSFER': 'transfer',
      'CROSS_COLLATERAL_TRANSFER': 'transfer',
      'INTERNAL_TRANSFER': 'transfer',
      'COIN_SWAP_DEPOSIT': 'deposit',
      'COIN_SWAP_WITHDRAW': 'withdrawal',
      'OPTIONS_SETTLE_PROFIT': 'settlement',
      'DELIVERED_SETTELMENT': 'settlement',
      'WELCOME_BONUS': 'cashback',
      'CONTEST_REWARD': 'cashback',
      'COMMISSION_REBATE': 'rebate',
      'API_REBATE': 'rebate',
      'REFERRAL_KICKBACK': 'referral',
      'COMMISSION': 'commission'
    };
    return this.safeString(ledgerType, type, type);
  }
  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    if (!(api in this.urls['api'])) {
      throw new _errors.NotSupported(this.id + ' does not have a testnet/sandbox URL for ' + api + ' endpoints');
    }
    let url = this.urls['api'][api];
    url += '/' + path;
    if (api === 'wapi') {
      url += '.html';
    }
    if (path === 'historicalTrades') {
      if (this.apiKey) {
        headers = {
          'X-MBX-APIKEY': this.apiKey
        };
      } else {
        throw new _errors.AuthenticationError(this.id + ' historicalTrades endpoint requires `apiKey` credential');
      }
    }
    const userDataStream = path === 'userDataStream' || path === 'listenKey';
    if (userDataStream) {
      if (this.apiKey) {
        // v1 special case for userDataStream
        headers = {
          'X-MBX-APIKEY': this.apiKey,
          'Content-Type': 'application/x-www-form-urlencoded'
        };
        if (method !== 'GET') {
          body = this.urlencode(params);
        }
      } else {
        throw new _errors.AuthenticationError(this.id + ' userDataStream endpoint requires `apiKey` credential');
      }
    } else if (api === 'private' || api === 'eapiPrivate' || api === 'sapi' && path !== 'system/status' || api === 'sapiV2' || api === 'sapiV3' || api === 'sapiV4' || api === 'wapi' && path !== 'systemStatus' || api === 'dapiPrivate' || api === 'dapiPrivateV2' || api === 'fapiPrivate' || api === 'fapiPrivateV2') {
      this.checkRequiredCredentials();
      let query = undefined;
      const defaultRecvWindow = this.safeInteger(this.options, 'recvWindow');
      const extendedParams = this.extend({
        'timestamp': this.nonce()
      }, params);
      if (defaultRecvWindow !== undefined) {
        extendedParams['recvWindow'] = defaultRecvWindow;
      }
      const recvWindow = this.safeInteger(params, 'recvWindow');
      if (recvWindow !== undefined) {
        extendedParams['recvWindow'] = recvWindow;
      }
      if (api === 'sapi' && path === 'asset/dust') {
        query = this.urlencodeWithArrayRepeat(extendedParams);
      } else if (path === 'batchOrders' || path.indexOf('sub-account') >= 0 || path === 'capital/withdraw/apply' || path.indexOf('staking') >= 0) {
        query = this.rawencode(extendedParams);
      } else {
        query = this.urlencode(extendedParams);
      }
      let signature = undefined;
      if (this.secret.indexOf('PRIVATE KEY') > -1) {
        signature = this.encodeURIComponent(this.rsa(query, this.secret));
      } else {
        signature = this.hmac(this.encode(query), this.encode(this.secret));
      }
      query += '&' + 'signature=' + signature;
      headers = {
        'X-MBX-APIKEY': this.apiKey
      };
      if (method === 'GET' || method === 'DELETE' || api === 'wapi') {
        url += '?' + query;
      } else {
        body = query;
        headers['Content-Type'] = 'application/x-www-form-urlencoded';
      }
    } else {
      if (Object.keys(params).length) {
        url += '?' + this.urlencode(params);
      }
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (code === 418 || code === 429) {
      throw new _errors.DDoSProtection(this.id + ' ' + code.toString() + ' ' + reason + ' ' + body);
    }
    // error response in a form: { "code": -1013, "msg": "Invalid quantity." }
    // following block cointains legacy checks against message patterns in "msg" property
    // will switch "code" checks eventually, when we know all of them
    if (code >= 400) {
      if (body.indexOf('Price * QTY is zero or less') >= 0) {
        throw new _errors.InvalidOrder(this.id + ' order cost = amount * price is zero or less ' + body);
      }
      if (body.indexOf('LOT_SIZE') >= 0) {
        throw new _errors.InvalidOrder(this.id + ' order amount should be evenly divisible by lot size ' + body);
      }
      if (body.indexOf('PRICE_FILTER') >= 0) {
        throw new _errors.InvalidOrder(this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid value in general, use this.priceToPrecision (symbol, amount) ' + body);
      }
    }
    if (response === undefined) {
      return; // fallback to default error handler
    }
    // check success value for wapi endpoints
    // response in format {'msg': 'The coin does not exist.', 'success': true/false}
    const success = this.safeValue(response, 'success', true);
    if (!success) {
      const message = this.safeString(response, 'msg');
      let parsedMessage = undefined;
      if (message !== undefined) {
        try {
          parsedMessage = JSON.parse(message);
        } catch (e) {
          // do nothing
          parsedMessage = undefined;
        }
        if (parsedMessage !== undefined) {
          response = parsedMessage;
        }
      }
    }
    const message = this.safeString(response, 'msg');
    if (message !== undefined) {
      this.throwExactlyMatchedException(this.exceptions['exact'], message, this.id + ' ' + message);
      this.throwBroadlyMatchedException(this.exceptions['broad'], message, this.id + ' ' + message);
    }
    // checks against error codes
    const error = this.safeString(response, 'code');
    if (error !== undefined) {
      // https://github.com/ccxt/ccxt/issues/6501
      // https://github.com/ccxt/ccxt/issues/7742
      if (error === '200' || _Precise.Precise.stringEquals(error, '0')) {
        return undefined;
      }
      // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
      // despite that their message is very confusing, it is raised by Binance
      // on a temporary ban, the API key is valid, but disabled for a while
      if (error === '-2015' && this.options['hasAlreadyAuthenticatedSuccessfully']) {
        throw new _errors.DDoSProtection(this.id + ' ' + body);
      }
      const feedback = this.id + ' ' + body;
      if (message === 'No need to change margin type.') {
        // not an error
        // https://github.com/ccxt/ccxt/issues/11268
        // https://github.com/ccxt/ccxt/pull/11624
        // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
        // binanceusdm {"code":-4046,"msg":"No need to change margin type."}
        throw new _errors.MarginModeAlreadySet(feedback);
      }
      this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);
      throw new _errors.ExchangeError(feedback);
    }
    if (!success) {
      throw new _errors.ExchangeError(this.id + ' ' + body);
    }
  }
  calculateRateLimiterCost(api, method, path, params, config = {}, context = {}) {
    if ('noCoin' in config && !('coin' in params)) {
      return config['noCoin'];
    } else if ('noSymbol' in config && !('symbol' in params)) {
      return config['noSymbol'];
    } else if ('noPoolId' in config && !('poolId' in params)) {
      return config['noPoolId'];
    } else if ('byLimit' in config && 'limit' in params) {
      const limit = params['limit'];
      const byLimit = config['byLimit'];
      for (let i = 0; i < byLimit.length; i++) {
        const entry = byLimit[i];
        if (limit <= entry[0]) {
          return entry[1];
        }
      }
    }
    return this.safeValue(config, 'cost', 1);
  }
  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined, config = {}, context = {}) {
    const response = await this.fetch2(path, api, method, params, headers, body, config, context);
    // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
    if (api === 'private' || api === 'wapi') {
      this.options['hasAlreadyAuthenticatedSuccessfully'] = true;
    }
    return response;
  }
  async modifyMarginHelper(symbol, amount, addOrReduce, params = {}) {
    // used to modify isolated positions
    let defaultType = this.safeString(this.options, 'defaultType', 'future');
    if (defaultType === 'spot') {
      defaultType = 'future';
    }
    const type = this.safeString(params, 'type', defaultType);
    if (type === 'margin' || type === 'spot') {
      throw new _errors.NotSupported(this.id + ' add / reduce margin only supported with type future or delivery');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    amount = this.amountToPrecision(symbol, amount);
    const request = {
      'type': addOrReduce,
      'symbol': market['id'],
      'amount': amount
    };
    let method = undefined;
    let code = undefined;
    if (market['linear']) {
      method = 'fapiPrivatePostPositionMargin';
      code = market['quote'];
    } else {
      method = 'dapiPrivatePostPositionMargin';
      code = market['base'];
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code": 200,
    //         "msg": "Successfully modify position margin.",
    //         "amount": 0.001,
    //         "type": 1
    //     }
    //
    return this.extend(this.parseMarginModification(response, market), {
      'code': code
    });
  }
  parseMarginModification(data, market = undefined) {
    const rawType = this.safeInteger(data, 'type');
    const resultType = rawType === 1 ? 'add' : 'reduce';
    const resultAmount = this.safeNumber(data, 'amount');
    const errorCode = this.safeString(data, 'code');
    const status = errorCode === '200' ? 'ok' : 'failed';
    return {
      'info': data,
      'type': resultType,
      'amount': resultAmount,
      'code': undefined,
      'symbol': market['symbol'],
      'status': status
    };
  }
  async reduceMargin(symbol, amount, params = {}) {
    /**
     * @method
     * @name binance#reduceMargin
     * @description remove margin from a position
     * @param {string} symbol unified market symbol
     * @param {float} amount the amount of margin to remove
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=reduce-margin-structure}
     */
    return await this.modifyMarginHelper(symbol, amount, 2, params);
  }
  async addMargin(symbol, amount, params = {}) {
    /**
     * @method
     * @name binance#addMargin
     * @description add margin
     * @param {string} symbol unified market symbol
     * @param {float} amount amount of margin to add
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=add-margin-structure}
     */
    return await this.modifyMarginHelper(symbol, amount, 1, params);
  }
  async fetchBorrowRate(code, params = {}) {
    /**
     * @method
     * @name binance#fetchBorrowRate
     * @description fetch the rate of interest to borrow a currency for margin trading
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'asset': currency['id']
      // 'vipLevel': this.safeInteger (params, 'vipLevel'),
    };

    const response = await this.sapiGetMarginInterestRateHistory(this.extend(request, params));
    //
    //     [
    //         {
    //             "asset": "USDT",
    //             "timestamp": 1638230400000,
    //             "dailyInterestRate": "0.0006",
    //             "vipLevel": 0
    //         },
    //     ]
    //
    const rate = this.safeValue(response, 0);
    return this.parseBorrowRate(rate);
  }
  async fetchBorrowRateHistory(code, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchBorrowRateHistory
     * @description retrieves a history of a currencies borrow interest rate at specific time slots
     * @param {string} code unified currency code
     * @param {int|undefined} since timestamp for the earliest borrow rate
     * @param {int|undefined} limit the maximum number of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure} to retrieve
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    await this.loadMarkets();
    if (limit === undefined) {
      limit = 93;
    } else if (limit > 93) {
      // Binance API says the limit is 100, but "Illegal characters found in a parameter." is returned when limit is > 93
      throw new _errors.BadRequest(this.id + ' fetchBorrowRateHistory() limit parameter cannot exceed 92');
    }
    const currency = this.currency(code);
    const request = {
      'asset': currency['id'],
      'limit': limit
    };
    if (since !== undefined) {
      request['startTime'] = since;
      const endTime = this.sum(since, limit * 86400000) - 1; // required when startTime is further than 93 days in the past
      const now = this.milliseconds();
      request['endTime'] = Math.min(endTime, now); // cannot have an endTime later than current time
    }

    const response = await this.sapiGetMarginInterestRateHistory(this.extend(request, params));
    //
    //     [
    //         {
    //             "asset": "USDT",
    //             "timestamp": 1638230400000,
    //             "dailyInterestRate": "0.0006",
    //             "vipLevel": 0
    //         },
    //     ]
    //
    return this.parseBorrowRateHistory(response, code, since, limit);
  }
  parseBorrowRateHistory(response, code, since, limit) {
    const result = [];
    for (let i = 0; i < response.length; i++) {
      const item = response[i];
      const borrowRate = this.parseBorrowRate(item);
      result.push(borrowRate);
    }
    const sorted = this.sortBy(result, 'timestamp');
    return this.filterByCurrencySinceLimit(sorted, code, since, limit);
  }
  parseBorrowRate(info, currency = undefined) {
    //
    //    {
    //        "asset": "USDT",
    //        "timestamp": 1638230400000,
    //        "dailyInterestRate": "0.0006",
    //        "vipLevel": 0
    //    }
    //
    const timestamp = this.safeNumber(info, 'timestamp');
    currency = this.safeString(info, 'asset');
    return {
      'currency': this.safeCurrencyCode(currency),
      'rate': this.safeNumber(info, 'dailyInterestRate'),
      'period': 86400000,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': info
    };
  }
  async createGiftCode(code, amount, params = {}) {
    /**
     * @method
     * @name binance#createGiftCode
     * @description create gift code
     * @param {string} code gift code
     * @param {float} amount amount of currency for the gift
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} The gift code id, code, currency and amount
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    // ensure you have enough token in your funding account before calling this code
    const request = {
      'token': currency['id'],
      'amount': amount
    };
    const response = await this.sapiPostGiftcardCreateCode(this.extend(request, params));
    //
    //     {
    //         code: '000000',
    //         message: 'success',
    //         data: { referenceNo: '0033002404219823', code: 'AP6EXTLKNHM6CEX7' },
    //         success: true
    //     }
    //
    const data = this.safeValue(response, 'data');
    const giftcardCode = this.safeString(data, 'code');
    const id = this.safeString(data, 'referenceNo');
    return {
      'info': response,
      'id': id,
      'code': giftcardCode,
      'currency': code,
      'amount': amount
    };
  }
  async redeemGiftCode(giftcardCode, params = {}) {
    /**
     * @method
     * @name binance#redeemGiftCode
     * @description redeem gift code
     * @param {string} giftcardCode
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} response from the exchange
     */
    const request = {
      'code': giftcardCode
    };
    const response = await this.sapiPostGiftcardRedeemCode(this.extend(request, params));
    //
    //     {
    //         code: '000000',
    //         message: 'success',
    //         data: {
    //             referenceNo: '0033002404219823',
    //             identityNo: '10316431732801474560'
    //         },
    //         success: true
    //     }
    //
    return response;
  }
  async verifyGiftCode(id, params = {}) {
    /**
     * @method
     * @name binance#verifyGiftCode
     * @description verify gift code
     * @param {string} id reference number id
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} response from the exchange
     */
    const request = {
      'referenceNo': id
    };
    const response = await this.sapiGetGiftcardVerify(this.extend(request, params));
    //
    //     {
    //         code: '000000',
    //         message: 'success',
    //         data: { valid: true },
    //         success: true
    //     }
    //
    return response;
  }
  async fetchBorrowInterest(code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchBorrowInterest
     * @description fetch the interest owed by the user for borrowing currency for margin trading
     * @param {string|undefined} code unified currency code
     * @param {string|undefined} symbol unified market symbol when fetch interest in isolated markets
     * @param {int|undefined} since the earliest time in ms to fetch borrrow interest for
     * @param {int|undefined} limit the maximum number of structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (code !== undefined) {
      const currency = this.currency(code);
      request['asset'] = currency['id'];
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['size'] = limit;
    }
    if (symbol !== undefined) {
      // Isolated
      market = this.market(symbol);
      request['isolatedSymbol'] = market['id'];
    }
    const response = await this.sapiGetMarginInterestHistory(this.extend(request, params));
    //
    //     {
    //         "rows":[
    //             {
    //                 "isolatedSymbol": "BNBUSDT", // isolated symbol, will not be returned for crossed margin
    //                 "asset": "BNB",
    //                 "interest": "0.02414667",
    //                 "interestAccuredTime": 1566813600000,
    //                 "interestRate": "0.01600000",
    //                 "principal": "36.22000000",
    //                 "type": "ON_BORROW"
    //             }
    //         ],
    //         "total": 1
    //     }
    //
    const rows = this.safeValue(response, 'rows');
    const interest = this.parseBorrowInterests(rows, market);
    return this.filterByCurrencySinceLimit(interest, code, since, limit);
  }
  parseBorrowInterest(info, market = undefined) {
    const symbol = this.safeString(info, 'isolatedSymbol');
    const timestamp = this.safeNumber(info, 'interestAccuredTime');
    const marginMode = symbol === undefined ? 'cross' : 'isolated';
    return {
      'account': symbol === undefined ? 'cross' : symbol,
      'symbol': symbol,
      'marginMode': marginMode,
      'currency': this.safeCurrencyCode(this.safeString(info, 'asset')),
      'interest': this.safeNumber(info, 'interest'),
      'interestRate': this.safeNumber(info, 'interestRate'),
      'amountBorrowed': this.safeNumber(info, 'principal'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': info
    };
  }
  async repayMargin(code, amount, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#repayMargin
     * @description repay borrowed margin and interest
     * @see https://binance-docs.github.io/apidocs/spot/en/#margin-account-repay-margin
     * @param {string} code unified currency code of the currency to repay
     * @param {float} amount the amount to repay
     * @param {string|undefined} symbol unified market symbol, required for isolated margin
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    const [marginMode, query] = this.handleMarginModeAndParams('repayMargin', params); // cross or isolated
    this.checkRequiredMarginArgument('repayMargin', symbol, marginMode);
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'asset': currency['id'],
      'amount': this.currencyToPrecision(code, amount)
    };
    if (symbol !== undefined) {
      const market = this.market(symbol);
      request['symbol'] = market['id'];
      request['isIsolated'] = 'TRUE';
    }
    const response = await this.sapiPostMarginRepay(this.extend(request, query));
    //
    //     {
    //         "tranId": 108988250265,
    //         "clientTag":""
    //     }
    //
    return this.parseMarginLoan(response, currency);
  }
  async borrowMargin(code, amount, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#borrowMargin
     * @description create a loan to borrow margin
     * @see https://binance-docs.github.io/apidocs/spot/en/#margin-account-borrow-margin
     * @param {string} code unified currency code of the currency to borrow
     * @param {float} amount the amount to borrow
     * @param {string|undefined} symbol unified market symbol, required for isolated margin
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    const [marginMode, query] = this.handleMarginModeAndParams('borrowMargin', params); // cross or isolated
    this.checkRequiredMarginArgument('borrowMargin', symbol, marginMode);
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'asset': currency['id'],
      'amount': this.currencyToPrecision(code, amount)
    };
    if (symbol !== undefined) {
      const market = this.market(symbol);
      request['symbol'] = market['id'];
      request['isIsolated'] = 'TRUE';
    }
    const response = await this.sapiPostMarginLoan(this.extend(request, query));
    //
    //     {
    //         "tranId": 108988250265,
    //         "clientTag":""
    //     }
    //
    return this.parseMarginLoan(response, currency);
  }
  parseMarginLoan(info, currency = undefined) {
    //
    //     {
    //         "tranId": 108988250265,
    //         "clientTag":""
    //     }
    //
    return {
      'id': this.safeInteger(info, 'tranId'),
      'currency': this.safeCurrencyCode(undefined, currency),
      'amount': undefined,
      'symbol': undefined,
      'timestamp': undefined,
      'datetime': undefined,
      'info': info
    };
  }
  async fetchOpenInterestHistory(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#fetchOpenInterestHistory
     * @description Retrieves the open interest history of a currency
     * @param {string} symbol Unified CCXT market symbol
     * @param {string} timeframe "5m","15m","30m","1h","2h","4h","6h","12h", or "1d"
     * @param {int|undefined} since the time(ms) of the earliest record to retrieve as a unix timestamp
     * @param {int|undefined} limit default 30, max 500
     * @param {object} params exchange specific parameters
     * @param {int|undefined} params.until the time(ms) of the latest record to retrieve as a unix timestamp
     * @returns {object} an array of [open interest history structure]{@link https://docs.ccxt.com/#/?id=interest-history-structure}
     */
    if (timeframe === '1m') {
      throw new _errors.BadRequest(this.id + 'fetchOpenInterestHistory cannot use the 1m timeframe');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'period': this.safeString(this.timeframes, timeframe, timeframe)
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const symbolKey = market['linear'] ? 'symbol' : 'pair';
    request[symbolKey] = market['id'];
    if (market['inverse']) {
      request['contractType'] = this.safeString(params, 'contractType', 'CURRENT_QUARTER');
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    const until = this.safeInteger2(params, 'until', 'till'); // unified in milliseconds
    const endTime = this.safeInteger(params, 'endTime', until); // exchange-specific in milliseconds
    params = this.omit(params, ['endTime', 'until', 'till']);
    if (endTime) {
      request['endTime'] = endTime;
    } else if (since) {
      if (limit === undefined) {
        limit = 30; // Exchange default
      }

      const duration = this.parseTimeframe(timeframe);
      request['endTime'] = this.sum(since, duration * limit * 1000);
    }
    let method = 'fapiDataGetOpenInterestHist';
    if (market['inverse']) {
      method = 'dapiDataGetOpenInterestHist';
    }
    const response = await this[method](this.extend(request, params));
    //
    //  [
    //      {
    //          "symbol":"BTCUSDT",
    //          "sumOpenInterest":"75375.61700000",
    //          "sumOpenInterestValue":"3248828883.71251440",
    //          "timestamp":1642179900000
    //      },
    //      ...
    //  ]
    //
    return this.parseOpenInterests(response, symbol, since, limit);
  }
  async fetchOpenInterest(symbol, params = {}) {
    /**
     * @method
     * @name binance#fetchOpenInterest
     * @description retrieves the open interest of a contract trading pair
     * @see https://binance-docs.github.io/apidocs/futures/en/#open-interest
     * @see https://binance-docs.github.io/apidocs/delivery/en/#open-interest
     * @see https://binance-docs.github.io/apidocs/voptions/en/#open-interest
     * @param {string} symbol unified CCXT market symbol
     * @param {object} params exchange specific parameters
     * @returns {object} an open interest structure{@link https://docs.ccxt.com/#/?id=interest-history-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {};
    if (market['option']) {
      request['underlyingAsset'] = market['baseId'];
      request['expiration'] = this.yymmdd(market['expiry']);
    } else {
      request['symbol'] = market['id'];
    }
    let method = 'fapiPublicGetOpenInterest';
    if (market['option']) {
      method = 'eapiPublicGetOpenInterest';
    } else if (market['inverse']) {
      method = 'dapiPublicGetOpenInterest';
    }
    const response = await this[method](this.extend(request, params));
    //
    // futures (fapi)
    //
    //     {
    //         "symbol": "ETHUSDT_230331",
    //         "openInterest": "23581.677",
    //         "time": 1677356872265
    //     }
    //
    // futures (dapi)
    //
    //     {
    //         "symbol": "ETHUSD_PERP",
    //         "pair": "ETHUSD",
    //         "openInterest": "26542436",
    //         "contractType": "PERPETUAL",
    //         "time": 1677360272224
    //     }
    //
    // options (eapi)
    //
    //     [
    //         {
    //             "symbol": "ETH-230225-1625-C",
    //             "sumOpenInterest": "460.50",
    //             "sumOpenInterestUsd": "734957.4358092150",
    //             "timestamp": "1677304860000"
    //         }
    //     ]
    //
    if (market['option']) {
      return this.parseOpenInterests(response, market);
    } else {
      return this.parseOpenInterest(response, market);
    }
  }
  parseOpenInterest(interest, market = undefined) {
    const timestamp = this.safeInteger(interest, 'timestamp');
    const id = this.safeString(interest, 'symbol');
    const amount = this.safeNumber2(interest, 'sumOpenInterest', 'openInterest');
    const value = this.safeNumber2(interest, 'sumOpenInterestValue', 'sumOpenInterestUsd');
    // Inverse returns the number of contracts different from the base or quote volume in this case
    // compared with https://www.binance.com/en/futures/funding-history/quarterly/4
    return {
      'symbol': this.safeSymbol(id, market, undefined, 'contract'),
      'baseVolume': market['inverse'] ? undefined : amount,
      'quoteVolume': value,
      'openInterestAmount': amount,
      'openInterestValue': value,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': interest
    };
  }
}
exports.default = binance;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _binance = _interopRequireDefault(require("./binance.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class binancecoinm extends _binance.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'binancecoinm',
      'name': 'Binance COIN-M',
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
        'doc': ['https://binance-docs.github.io/apidocs/delivery/en/', 'https://binance-docs.github.io/apidocs/spot/en']
      },
      'has': {
        'CORS': undefined,
        'spot': false,
        'margin': false,
        'swap': true,
        'future': true,
        'option': undefined,
        'createStopMarketOrder': true
      },
      'options': {
        'fetchMarkets': ['inverse'],
        'defaultSubType': 'inverse',
        'leverageBrackets': undefined
      }
    });
  }
  async transferIn(code, amount, params = {}) {
    // transfer from spot wallet to coinm futures wallet
    return await this.futuresTransfer(code, amount, 3, params);
  }
  async transferOut(code, amount, params = {}) {
    // transfer from coinm futures wallet to spot wallet
    return await this.futuresTransfer(code, amount, 4, params);
  }
}
exports.default = binancecoinm;

},{"./binance.js":24}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _binance = _interopRequireDefault(require("./binance.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class binanceusdm extends _binance.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'binanceusdm',
      'name': 'Binance USDⓈ-M',
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
        'doc': ['https://binance-docs.github.io/apidocs/futures/en/', 'https://binance-docs.github.io/apidocs/spot/en']
      },
      'has': {
        'CORS': undefined,
        'spot': false,
        'margin': false,
        'swap': true,
        'future': true,
        'option': undefined,
        'createStopMarketOrder': true
      },
      'options': {
        'fetchMarkets': ['linear'],
        'defaultSubType': 'linear',
        // https://www.binance.com/en/support/faq/360033162192
        // tier amount, maintenance margin, initial margin
        'leverageBrackets': undefined,
        'marginTypes': {},
        'marginModes': {}
      }
    });
  }
  async transferIn(code, amount, params = {}) {
    // transfer from spot wallet to usdm futures wallet
    return await this.futuresTransfer(code, amount, 1, params);
  }
  async transferOut(code, amount, params = {}) {
    // transfer from usdm futures wallet to spot wallet
    return await this.futuresTransfer(code, amount, 2, params);
  }
}
exports.default = binanceusdm;

},{"./binance.js":24}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _number = require("./base/functions/number.js");
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bingx extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'bingx',
      'name': 'BingX',
      'countries': ['EU'],
      'rateLimit': 100,
      'version': 'v1',
      'pro': true,
      'has': {
        'CORS': true,
        'spot': true,
        'margin': undefined,
        'swap': false,
        'future': false,
        'option': false,
        'cancelOrder': true,
        'createDepositAddress': false,
        'createOrder': true,
        'fetchBalance': true,
        'fetchDepositAddress': false,
        'fetchDepositAddresses': false,
        'fetchFundingHistory': false,
        'fetchFundingRate': false,
        'fetchFundingRateHistory': false,
        'fetchFundingRates': false,
        'fetchIndexOHLCV': false,
        'fetchMarkOHLCV': false,
        'fetchOHLCV': true,
        'fetchOpenInterestHistory': false,
        'fetchOpenOrders': true,
        'fetchOrderBook': true,
        'fetchPositionMode': true,
        'fetchPositions': true,
        'fetchPremiumIndexOHLCV': false,
        'fetchTicker': true,
        'fetchTrades': true,
        'fetchTradingFee': false,
        'fetchTradingFees': false,
        'setMarginMode': true,
        'setPositionMode': true,
        'transfer': false
      },
      'urls': {
        'logo': '',
        'api': {
          'swap': 'https://api-swap-rest.bingx.com/api',
          'swap2': 'https://open-api.bingx.com'
        },
        'test': {},
        'www': 'https://bingx.com/',
        'doc': ['https://bingx-api.github.io/docs'],
        'fees': ['https://support.bingx.com/hc/en-001/articles/360027240173'],
        'referral': ''
      },
      'api': {
        'swap': {
          'v1': {
            'public': {
              'get': {
                'market/getAllContracts': 1,
                'market/getLatestPrice': 1,
                'market/getMarketDepth': 1,
                'market/getMarketTrades': 1,
                'market/getLatestFunding': 1,
                'market/getHistoryFunding': 1,
                'market/getLatestKline': 1,
                'market/getHistoryKlines': 1,
                'market/getOpenPositions': 1,
                'market/getTicker': 1
              },
              'post': {
                'common/server/time': 1
              }
            },
            'private': {
              'post': {
                'user/getBalance': 1,
                'user/getPositions': 1,
                'user/trade': 1,
                'user/oneClickClosePosition': 1,
                'user/oneClickCloseAllPositions': 1,
                'user/cancelOrder': 1,
                'user/batchCancelOrders': 1,
                'user/cancelAll': 1,
                'user/pendingOrders': 1,
                'user/pendingStopOrders': 1,
                'user/queryOrderStatus': 1,
                'user/setMarginMode': 1,
                'user/setLeverage': 1,
                'user/forceOrders': 1,
                'user/historyOrders': 1,
                'user/auth/userDataStream': 1
              },
              'put': {
                'user/auth/userDataStream': 1
              }
            }
          }
        },
        'swap2': {
          'openApi': {
            'public': {
              'get': {
                'swap/v2/quote/klines': 1
              }
            },
            'private': {
              'get': {
                'swap/v2/trade/openOrders': 1,
                'swap/v2/trade/leverage': 1,
                'swap/v2/trade/marginType': 1,
                'swap/v1/positionSide/dual': 1
              },
              'put': {
                'user/auth/userDataStream': 1
              },
              'post': {
                'user/auth/userDataStream': 1,
                'swap/v2/trade/order': 1,
                'swap/v2/trade/leverage': 1,
                'swap/v2/trade/marginType': 1,
                'swap/v1/positionSide/dual': 1
              },
              'delete': {
                'swap/v2/trade/order': 1,
                'swap/v2/trade/allOpenOrders': 1
              }
            }
          }
        }
      },
      'markets': {
        'BTC/EUR': {
          'id': 'eur',
          'symbol': 'BTC/EUR',
          'base': 'BTC',
          'quote': 'EUR',
          'baseId': 'btc',
          'quoteId': 'eur',
          'type': 'spot',
          'spot': true
        }
      },
      'fees': {
        'trading': {
          'tierBased': true,
          'percentage': true,
          'maker': this.parseNumber('0.0002'),
          'taker': this.parseNumber('0.0004')
        }
      },
      'precisionMode': _number.TICK_SIZE,
      'requiredCredentials': {
        'apiKey': true,
        'secret': true
      },
      'timeframes': {
        '1m': '1',
        '3m': '3',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '4h': '240',
        '6h': '360',
        '12h': '720',
        '1d': '1D',
        '1w': '1W',
        '1M': '1M'
      },
      'options': {
        'listenKeyRefreshRate': 1200000,
        'defaultType': 'swap',
        'defaultSubType': 'linear'
      },
      'orderTypes': {
        'market': 'MARKET',
        'limit': 'LIMIT',
        'stop': 'STOP',
        'stoplimit': 'STOP',
        'marketiftouched': 'TAKE_PROFIT_MARKET',
        'limitiftouched': 'TAKE_PROFIT'
      },
      'reverseOrderTypes': {
        'market': 'Market',
        'limit': 'Limit',
        'stop_market': 'Stop',
        'stoplimit': 'StopLimit',
        'take_profit_market': 'Stop',
        'take_profit': 'StopLimit',
        'limit_maker': 'Limit'
      },
      'triggerTypes': {
        'Mark': 'MARK_PRICE',
        'Last': 'CONTRACT_PRICE'
      },
      'timeInForces': {
        'GTC': 'GTC',
        'PO': 'GTX',
        'IOC': 'IOC',
        'FOK': 'FOK'
      }
    });
  }
  async switchIsolated(symbol, isIsolated, buyLeverage, sellLeverage, params = {}) {
    if (isIsolated) {
      await this.setMarginMode('ISOLATED', symbol, params);
    } else {
      await this.setMarginMode('CROSSED', symbol, params);
    }
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bingx#setMarginMode
     * @description set margin mode to 'cross' or 'isolated'
     * @param {string} marginMode 'cross' or 'isolated'
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} response from the exchange
     */
    marginMode = marginMode.toLowerCase();
    if (marginMode === 'cross') {
      marginMode = 'CROSSED';
    }
    if (marginMode === 'isolated') {
      marginMode = 'ISOLATED';
    }
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
    }
    if (marginMode !== 'ISOLATED' && marginMode !== 'CROSSED') {
      throw new _errors.ArgumentsRequired(this.id + ' (' + marginMode + ') ' + ' setMarginMode() marginMode must be "isolated" or "crossed"');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'marginType': marginMode
    };
    params = this.omit(params, ['leverage', 'buyLeverage', 'sellLeverage']);
    try {
      return await this.swap2OpenApiPrivatePostSwapV2TradeMarginType(this.extend(request, params));
    } catch (e) {
      if (e instanceof _errors.ExchangeError) {
        if (e.toString().indexOf('80001') >= 0) {
          throw new _errors.ExchangeError(this.id + ' ' + this.json({
            'code': 80001,
            'msg': 'Cannot switch Margin Type for market with open positions or orders.'
          }));
        }
      }
      throw e;
    }
  }
  async setPositionMode(hedged, symbol = undefined, params = {}) {
    await this.loadMarkets();
    let mode = undefined;
    if (hedged) {
      mode = 'true';
    } else {
      mode = 'false';
    }
    const request = {
      'dualSidePosition': mode
    };
    // if (symbol === undefined) {
    //     request['coin'] = 'USDT';
    // } else {
    //     const market = this.market (symbol);
    //     // TEALSTREET
    //     request['category'] = market['linear'] ? 'linear' : 'inverse';
    //     // TEALSTREET
    //     request['symbol'] = market['id'];
    // }
    //
    //     {
    //         "ret_code": 0,
    //         "ret_msg": "ok",
    //         "ext_code": "",
    //         "result": null,
    //         "ext_info": null,
    //         "time_now": "1577477968.175013",
    //         "rate_limit_status": 74,
    //         "rate_limit_reset_ms": 1577477968183,
    //         "rate_limit": 75
    //     }
    //
    return await this.swap2OpenApiPrivatePostSwapV1PositionSideDual(this.extend(request, params));
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bingx#setLeverage
     * @description set the level of leverage for a market
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
    }
    const buyLeverage = this.safeNumber(params, 'buyLeverage', leverage);
    const sellLeverage = this.safeNumber(params, 'sellLeverage', leverage);
    await this.loadMarkets();
    const market = this.market(symbol);
    params = this.omit(params, ['marginMode', 'positionMode']);
    let promises = [];
    const request = {
      'symbol': market['id']
    };
    if (buyLeverage !== undefined) {
      request['leverage'] = this.parseToInt(buyLeverage);
      request['side'] = 'LONG';
      promises.push(this.swap2OpenApiPrivatePostSwapV2TradeLeverage(this.extend(request, params)));
    }
    if (sellLeverage !== undefined) {
      request['leverage'] = this.parseToInt(sellLeverage);
      request['side'] = 'SHORT';
      promises.push(this.swap2OpenApiPrivatePostSwapV2TradeLeverage(this.extend(request, params)));
    }
    promises = await Promise.all(promises);
    if (promises.length === 1) {
      return promises[0];
    } else {
      return promises;
    }
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const leverageResponse = await this.swap2OpenApiPrivateGetSwapV2TradeLeverage(this.extend(request, params));
    const leverageData = this.safeValue(leverageResponse, 'data');
    const marginTypeResponse = await this.swap2OpenApiPrivateGetSwapV2TradeMarginType(this.extend(request, params));
    const marginTypeData = this.safeValue(marginTypeResponse, 'data');
    const positionModeResponse = await this.swap2OpenApiPrivateGetSwapV1PositionSideDual(this.extend(request, params));
    const positionModeData = this.safeValue(positionModeResponse, 'data');
    return this.parseAccountConfiguration(leverageData, marginTypeData, positionModeData, market);
  }
  parseAccountConfiguration(leverageData, marginTypeData, positionModeData, market) {
    // {
    //     "marginCoin":"USDT",
    //   "locked":0,
    //   "available":13168.86110692,
    //   "crossMaxAvailable":13168.86110692,
    //   "fixedMaxAvailable":13168.86110692,
    //   "maxTransferOut":13168.86110692,
    //   "equity":13178.86110692,
    //   "usdtEquity":13178.861106922,
    //   "btcEquity":0.344746495477,
    //   "crossRiskRate":0,
    //   "crossMarginLeverage":20,
    //   "fixedLongLeverage":20,
    //   "fixedShortLeverage":20,
    //   "marginMode":"crossed",
    //   "holdMode":"double_hold"
    // }
    // const marginMode = this.safeString (data, 'marginMode');
    // const isIsolated = (marginMode === 'fixed');
    // let leverage = this.safeFloat (data, 'crossMarginLeverage');
    // const buyLeverage = this.safeFloat (data, 'fixedLongLeverage');
    // const sellLeverage = this.safeFloat (data, 'fixedShortLeverage');
    // const marginCoin = this.safeString (data, 'marginCoin');
    // const holdMode = this.safeString (data, 'holdMode');
    // let positionMode = 'hedged';
    // if (holdMode === 'single_hold') {
    //     positionMode = 'oneway';
    //     if (isIsolated) {
    //         leverage = buyLeverage;
    //     }
    // }
    // const accountConfig = {
    //     'info': data,
    //     'markets': {},
    //     'positionMode': positionMode,
    //     'marginMode': isIsolated ? 'isolated' : 'cross',
    // };
    // const leverageConfigs = accountConfig['markets'];
    // leverageConfigs[market['symbol']] = {
    //     'marginMode': isIsolated ? 'isolated' : 'cross',
    //     'isIsolated': isIsolated,
    //     'leverage': leverage,
    //     'buyLeverage': buyLeverage,
    //     'sellLeverage': sellLeverage,
    //     'marginCoin': marginCoin,
    //     'positionMode': positionMode,
    // };
    const buyLeverage = this.safeFloat(leverageData, 'longLeverage');
    const sellLeverage = this.safeFloat(leverageData, 'shortLeverage');
    const maxBuyLeverage = this.safeFloat(leverageData, 'maxLongLeverage');
    const maxSellLeverage = this.safeFloat(leverageData, 'maxShortLeverage');
    const marginType = this.safeString(marginTypeData, 'marginType');
    const isHedged = this.safeString(positionModeData, 'dualSidePosition');
    let positionMode = 'hedged';
    if (isHedged === 'false') {
      positionMode = 'oneway';
    }
    const isIsolated = marginType === 'ISOLATED';
    const accountConfig = {
      'marginMode': isIsolated ? 'isolated' : 'cross',
      'positionMode': positionMode,
      'markets': {}
    };
    const leverageConfigs = accountConfig['markets'];
    leverageConfigs[market['symbol']] = {
      'buyLeverage': buyLeverage,
      'sellLeverage': sellLeverage,
      'maxBuyLeverage': maxBuyLeverage,
      'maxSellLeverage': maxSellLeverage,
      'positionMode': positionMode
    };
    return accountConfig;
  }
  async fetchContractMarkets(params = {}) {
    const response = await this.swapV1PublicGetMarketGetAllContracts(params);
    //
    //     {
    //         "code":0,
    //         "msg":"Success",
    //         "data":{
    //             "contracts":[
    //                 {
    //                     "contractId":"100",
    //                     "symbol":"BTC-USDT",
    //                     "name":"BTC",
    //                     "size":"0.0001",
    //                     "currency":"USDT",
    //                     "asset":"BTC",
    //                     "pricePrecision":2,
    //                     "volumePrecision":4,
    //                     "feeRate":0.0005,
    //                     "tradeMinLimit":1,
    //                     "maxLongLeverage":100,
    //                     "maxShortLeverage":100,
    //                     "status":1
    //                 }
    //             ]
    //         }
    //     }
    //
    const result = [];
    const data = this.safeValue(response, 'data', {});
    const contracts = this.safeValue(data, 'contracts', []);
    for (let i = 0; i < contracts.length; i++) {
      const market = contracts[i];
      // should we use contract id as market id?
      // const contractId = this.safeString (market, 'contractId');
      const marketId = this.safeString(market, 'symbol');
      const parts = marketId.split('-');
      const baseId = this.safeString(parts, 0);
      const quoteId = this.safeString(parts, 1);
      const settleId = this.safeString(market, 'currency');
      const base = this.safeCurrencyCode(baseId);
      const quote = this.safeCurrencyCode(quoteId);
      const settle = this.safeCurrencyCode(settleId);
      const symbol = base + '/' + quote + ':' + settle;
      const status = this.safeNumber(market, 'status');
      // const contractSize = this.safeNumber (market, 'size', 1);
      const contractSize = 1;
      result.push({
        'id': marketId,
        'symbol': symbol,
        'base': base,
        'quote': quote,
        'settle': settle,
        'baseId': baseId,
        'quoteId': quoteId,
        'settleId': settleId,
        'type': 'swap',
        'spot': false,
        'margin': true,
        'swap': true,
        'future': false,
        'option': false,
        'active': status === 1,
        'contract': true,
        'linear': true,
        'inverse': undefined,
        'contractSize': contractSize,
        'expiry': undefined,
        'expiryDatetime': undefined,
        'strike': undefined,
        'optionType': undefined,
        'precision': {
          'amount': this.parseNumber(this.parsePrecision(this.safeString(market, 'volumePrecision'))),
          'price': this.parseNumber(this.parsePrecision(this.safeString(market, 'pricePrecision')))
        },
        'limits': {
          'leverage': {
            'min': undefined,
            'max': this.safeNumber(market, 'maxLongLeverage')
          },
          'amount': {
            'min': this.safeNumber(market, 'size'),
            'max': undefined
          },
          'price': {
            'min': undefined,
            'max': undefined
          },
          'cost': {
            'min': undefined,
            'max': undefined
          }
        },
        'info': market
      });
    }
    return result;
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name bingx#fetchMarkets
     * @description retrieves data on all markets for bingx
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    const contract = await this.fetchContractMarkets(params);
    return contract;
  }
  parseBalance(response) {
    const result = {
      'info': response
    };
    const data = this.safeValue(response, 'data', {});
    const dataAccount = this.safeValue(data, 'account', {});
    const currencies = Object.keys(this.currencies);
    for (let i = 0; i < currencies.length; i++) {
      const code = currencies[i];
      const account = this.account();
      if (this.safeString(dataAccount, 'currency', '') === code) {
        account['free'] = this.safeString(dataAccount, 'availableMargin');
        account['used'] = this.safeString(dataAccount, 'usedMargin');
        account['total'] = this.safeString(dataAccount, 'balance');
      }
      result[code] = account;
    }
    return this.safeBalance(result);
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name bingx#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the bingx api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    // await this.loadMarkets ();
    const response = await this.swapV1PrivatePostUserGetBalance(params);
    return this.parseBalance(response);
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name paymium#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the paymium api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'currency': market['id']
    };
    const response = await this.publicGetDataCurrencyDepth(this.extend(request, params));
    return this.parseOrderBook(response, market['symbol'], undefined, 'bids', 'asks', 'price', 'amount');
  }
  parseTicker(ticker, market = undefined) {
    //
    // {
    //   "symbol": "BTC-USDT",
    //   "priceChange": "10.00",
    //   "priceChangePercent": "10",
    //   "lastPrice": "5738.23",
    //   "lastVolume": "31.21",
    //   "highPrice": "5938.23",
    //   "lowPrice": "5238.23",
    //   "volume": "23211231.13",
    //   "dayVolume": "213124412412.47",
    //   "openPrice": "5828.32"
    // }
    //
    const symbol = this.safeSymbol(undefined, market);
    const timestamp = this.milliseconds();
    const baseVolume = this.safeString(ticker, 'volume');
    let last = this.safeString(ticker, 'lastPrice');
    if (last === '-') {
      last = undefined;
    }
    let high = this.safeString(ticker, 'highPrice');
    if (high === '-') {
      high = undefined;
    }
    let low = this.safeString(ticker, 'lowPrice');
    if (low === '-') {
      low = undefined;
    }
    let open = this.safeString(ticker, 'openPrice');
    if (open === '-') {
      open = undefined;
    }
    let percentage = this.safeString(ticker, 'priceChangePercent');
    if (percentage === '-') {
      percentage = undefined;
    }
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': high,
      'low': low,
      'bid': last,
      'bidVolume': undefined,
      'ask': last,
      'askVolume': undefined,
      'open': open,
      'close': last,
      'last': last,
      'mark': last,
      'previousClose': undefined,
      'change': undefined,
      'percentage': percentage,
      'average': undefined,
      'baseVolume': baseVolume,
      'info': ticker
    }, market);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name paymium#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the paymium api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.swapV1PublicGetMarketGetTicker(this.extend(request, params));
    //
    // {
    //   "symbol": "BTC-USDT",
    //   "priceChange": "10.00",
    //   "priceChangePercent": "10",
    //   "lastPrice": "5738.23",
    //   "lastVolume": "31.21",
    //   "highPrice": "5938.23",
    //   "lowPrice": "5238.23",
    //   "volume": "23211231.13",
    //   "dayVolume": "213124412412.47",
    //   "openPrice": "5828.32"
    // }
    //
    const data = this.safeValue(response, 'data');
    const tickers = this.safeValue(data, 'tickers');
    const ticker = this.safeValue(tickers, 0);
    return this.parseTicker(ticker, market);
  }
  parseTrade(trade, market = undefined) {
    const timestamp = this.safeTimestamp(trade, 'created_at_int');
    const id = this.safeString(trade, 'uuid');
    market = this.safeMarket(undefined, market);
    const side = this.safeString(trade, 'side');
    const price = this.safeString(trade, 'price');
    const amountField = 'traded_' + market['base'].toLowerCase();
    const amount = this.safeString(trade, amountField);
    return this.safeTrade({
      'info': trade,
      'id': id,
      'order': undefined,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': market['symbol'],
      'type': undefined,
      'side': side,
      'takerOrMaker': undefined,
      'price': price,
      'amount': amount,
      'cost': undefined,
      'fee': undefined
    }, market);
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    return [];
    // /**
    //  * @method
    //  * @name paymium#fetchTrades
    //  * @description get the list of most recent trades for a particular symbol
    //  * @param {string} symbol unified symbol of the market to fetch trades for
    //  * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
    //  * @param {int|undefined} limit the maximum amount of trades to fetch
    //  * @param {object} params extra parameters specific to the paymium api endpoint
    //  * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
    //  */
    // await this.loadMarkets ();
    // const market = this.market (symbol);
    // const request = {
    //     'currency': market['id'],
    // };
    // const response = await (this as any).publicGetDataCurrencyTrades (this.extend (request, params));
    // return this.parseTrades (response, market, since, limit);
  }

  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    // {
    //     "code": 0,
    //     "data": {
    //     "orders": [
    //         {
    //             "action": "Open",
    //             "avgFilledPrice": 31333.37,
    //             "commission": -0.0009,
    //             "entrustPrice": 31331.25,
    //             "entrustTm": "2021-01-05T09:15:02Z",
    //             "entrustVolume": 0.0001,
    //             "filledVolume": 0.0001,
    //             "orderId": "996273190",
    //             "orderStatus": "Filled",
    //             "profit": 0,
    //             "side": "Bid",
    //             "symbol": "BTC-USDT",
    //             "tradeType": "Market",
    //             "updateTm": "2021-01-05T09:15:15Z"
    //         }
    //     ]
    // },
    //     "message": ""
    // }
    await this.loadMarkets();
    let market = undefined;
    const request = {};
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    request['lastOrderId'] = 0;
    request['length'] = 100;
    request['timestamp'] = this.milliseconds() - 0;
    const response = await this.swapV1PrivatePostUserHistoryOrders(this.extend(request, params));
    const data = this.safeValue(response, 'data');
    const trades = this.safeValue(data, 'orders');
    return this.parseMyTrades(trades, market, since, limit);
  }
  parseMyTrades(trades, market = undefined, since = undefined, limit = undefined, params = {}) {
    let result = [];
    for (let i = 0; i < trades.length; i++) {
      const filled = this.safeNumber(trades[i], 'filledVolume', 0);
      if (filled <= 0) {
        continue;
      }
      const action = this.safeString(trades[i], 'action');
      if (action === 'Close') {
        continue;
      }
      const trade = this.extend(this.parseMyTrade(trades[i], market), params);
      result.push(trade);
    }
    result = this.sortBy(result, 'timestamp');
    const symbol = market !== undefined ? market['symbol'] : undefined;
    const tail = since === undefined;
    return this.filterBySymbolSinceLimit(result, symbol, since, limit, tail);
  }
  parseMyTrade(trade, market = undefined) {
    // {
    //     'orderId': '1657690927243935744',
    //     'side': 'Ask',
    //     'action': 'Close',
    //     'tradeType': 'Limit',
    //     'entrustVolume': '0.0003',
    //     'entrustPrice': '26337.6',
    //     'filledVolume': '0',
    //     'avgFilledPrice': '0',
    //     'entrustTm': '2023-05-14T10:14:50Z',
    //     'symbol': 'BTC-USDT',
    //     'profit': '0',
    //     'commission': '0',
    //     'updateTm': '2023-05-14T10:14:50Z',
    //     'orderStatus': 'Cancelled'
    // }
    const marketId = this.safeString(trade, 'symbol');
    market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const rawSide = this.safeString(trade, 'side');
    const id = this.safeString(trade, 'orderId');
    const action = this.safeString(trade, 'action');
    const type = this.safeString(trade, 'tradeType');
    const ePrice = this.safeString(trade, 'entrustPrice');
    const filled = this.safeString(trade, 'filledVolume');
    const avgFilledPrice = this.safeString(trade, 'avgFilledPrice');
    const entrustTm = this.safeString(trade, 'entrustTm');
    const timestamp = this.parseDate(entrustTm);
    const profit = this.safeString(trade, 'profit');
    const commission = this.safeString(trade, 'commission');
    const status = this.safeString(trade, 'orderStatus');
    let isClose = false;
    if (action === 'Close') {
      isClose = true;
    }
    let side = undefined;
    if (rawSide === 'Bid') {
      side = 'buy';
    } else {
      side = 'sell';
    }
    let takerOrMaker = undefined;
    const tradeType = this.safeString(trade, 'tradeType');
    if (tradeType === 'Market') {
      takerOrMaker = 'taker';
    } else {
      takerOrMaker = 'maker';
    }
    let cost = 0.00045;
    if (takerOrMaker === 'taker') {
      cost = 0.00075;
    }
    return this.safeOrder({
      'info': trade,
      'id': id,
      'symbol': symbol,
      'side': side,
      'type': type,
      'filled': filled,
      'amount': filled,
      'average': avgFilledPrice,
      'takerOrMaker': takerOrMaker,
      'price': ePrice,
      'profit': profit,
      'fees': commission,
      'status': status,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'isClose': isClose,
      'fee': {
        'currency': market['quote'],
        'cost': cost
      }
    });
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name bingx#createOrder
     * @description create a trade order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the paymium api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    // quick order:
    //
    // BTC/USDT:USDT
    // limit
    // buy
    // 4.0
    // 29116.0
    // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
    //
    // limit order:
    //
    // BTC/USDT:USDT
    // limit
    // buy
    // 4.0
    // 28520.0
    // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
    //
    // no post = 'timeInForce': 'GTC',
    //
    // SL
    //
    // BTC/USDT:USDT
    // stop
    // sell
    // 20.0
    // None
    // {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    //
    // TP
    //
    // BTC/USDT:USDT
    // stop
    // sell
    // 20.0
    // None
    // {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    //
    // LIMIT TP
    //
    // BTC/USDT:USDT
    // stopLimit
    // sell
    // 4.0
    // 33000.0
    // {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    await this.loadMarkets();
    const market = this.market(symbol);
    //
    const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
    const triggerType = this.safeStringLower2(params, 'trigger', 'workingType');
    // const isTriggerOrder = triggerPrice !== undefined;
    let isStopLossOrder = undefined;
    let isTakeProfitOrder = undefined;
    const reduceOnly = this.safeValue2(params, 'close', 'reduceOnly', false);
    const basePrice = this.safeValue(params, 'basePrice');
    let positionSide = undefined;
    const positionMode = this.safeValue(params, 'positionMode', 'oneway');
    if (!reduceOnly) {
      if (side === 'buy') {
        positionSide = 'LONG';
      } else {
        positionSide = 'SHORT';
      }
    } else {
      if (side === 'buy') {
        positionSide = 'SHORT';
      } else {
        positionSide = 'LONG';
      }
    }
    if (positionMode === 'oneway') {
      positionSide = 'BOTH';
    }
    if (triggerPrice !== undefined && basePrice !== undefined) {
      // triggerOrder is NOT stopOrder
      // type = 'market';
      if (reduceOnly) {
        if (side === 'buy') {
          if (triggerPrice > basePrice) {
            isStopLossOrder = true;
          } else {
            isTakeProfitOrder = true;
          }
        } else {
          if (triggerPrice < basePrice) {
            isStopLossOrder = true;
          } else {
            isTakeProfitOrder = true;
          }
        }
      } else {
        if (side === 'buy') {
          if (triggerPrice < basePrice) {
            isStopLossOrder = true;
          } else {
            isTakeProfitOrder = true;
          }
        } else {
          if (triggerPrice > basePrice) {
            isStopLossOrder = true;
          } else {
            isTakeProfitOrder = true;
          }
        }
      }
    }
    //
    let convertedType = type.toUpperCase();
    if (type === 'stop') {
      if (isTakeProfitOrder) {
        convertedType = 'TRIGGER_MARKET';
      } else if (isStopLossOrder) {
        convertedType = 'TRIGGER_MARKET';
      } else {
        throw new _errors.ArgumentsRequired('unknown order direction for TP/SL');
      }
    }
    if (type === 'stopLimit') {
      convertedType = 'TRIGGER_LIMIT';
    }
    const convertedSide = side.toUpperCase();
    const request = {
      'symbol': market['id'],
      'type': convertedType,
      'side': convertedSide,
      'quantity': amount,
      'positionSide': positionSide
    };
    if (type === 'stop' || type === 'stopLimit') {
      let triggerBy = 'MARK_PRICE';
      if (triggerType === 'index') {
        triggerBy = 'INDEX_PRICE';
      } else if (triggerType === 'last') {
        triggerBy = 'CONTRACT_PRICE';
      }
      request['workingType'] = triggerBy;
    }
    if (triggerPrice !== undefined) {
      request['stopPrice'] = this.priceToPrecision(symbol, triggerPrice);
      if (convertedType === 'TRIGGER_LIMIT') {
        request['price'] = this.priceToPrecision(symbol, price);
      }
    } else if (triggerPrice === undefined && convertedType === 'TRIGGER_LIMIT') {
      request['price'] = basePrice;
      request['stopPrice'] = basePrice;
    } else if ((type === 'limit' || type === 'stopLimit') && triggerPrice === undefined) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    const isMarketOrder = type === 'market';
    const exchangeSpecificParam = this.safeString2(params, 'force', 'timeInForce');
    const postOnly = this.isPostOnly(isMarketOrder, exchangeSpecificParam === 'PO', params);
    if (postOnly) {
      request['timeInForce'] = 'PostOnly';
    }
    // const response = await (this as any).swap2OpenApiPrivatePostSwapV2TradeOrder (this.extend (request, params));
    const response = await this.swap2OpenApiPrivatePostSwapV2TradeOrder(request);
    // console.log('response', response);
    const data = this.safeValue(response, 'data');
    const order = this.safeValue(data, 'order');
    // const parsedOrder = this.parseOrder (order, market);
    // let patchedOrder = this.extend (parsedOrder, params);
    // patchedOrder = this.extend (patchedOrder, {
    //     'price': price,
    //     'amount': amount,
    //     'side': side,
    //     'type': type,
    // });
    return this.parseOrder(order, market);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name phemex#cancelAllOrders
     * @description cancel all open orders in a market
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#cancelall
     * @param {string} symbol unified market symbol of the market to cancel orders in
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelAllOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.swap2OpenApiPrivateDeleteSwapV2TradeAllOpenOrders(request);
    return response;
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bingx#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'orderId': id
    };
    const response = await this.swap2OpenApiPrivateDeleteSwapV2TradeOrder(request);
    return this.parseOrder(response, market);
  }
  async fetchPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bingx#fetchPositions
     * @description fetch all open positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    const response = await this.swapV1PrivatePostUserGetPositions();
    const data = this.safeValue(response, 'data', {});
    const positions = this.safeValue(data, 'positions', []);
    const result = [];
    for (let i = 0; i < positions.length; i++) {
      result.push(this.parsePosition(positions[i]));
    }
    return result;
  }
  parsePosition(position, market = undefined) {
    //
    //
    // {
    //     "positionId": "1650546544279240704",
    //     "symbol": "BTC-USDT",
    //     "currency": "",
    //     "volume": 0.001,
    //     "availableVolume": 0.001,
    //     "positionSide": "short",
    //     "marginMode": "cross",
    //     "avgPrice": 27124.5,
    //     "liquidatedPrice": 0.0,
    //     "margin": 2.9386,
    //     "leverage": 5.0,
    //     "pnlRate": -45.83,
    //     "unrealisedPNL": -2.4863,
    //     "realisedPNL": 0.0126
    // }
    //
    const marketId = this.safeString(position, 'symbol');
    market = this.safeMarket(marketId, market);
    const timestamp = this.safeInteger(position, 'cTime');
    const marginMode = this.safeStringLower(position, 'marginMode');
    const hedged = true;
    const side = this.safeStringLower(position, 'positionSide');
    let contracts = this.safeFloat(position, 'volume');
    let liquidation = this.safeNumber(position, 'liquidatedPrice');
    if (side === 'short') {
      contracts = -1 * contracts;
    }
    if (liquidation === 0) {
      liquidation = undefined;
    }
    const initialMargin = this.safeNumber(position, 'margin');
    return {
      'info': position,
      'id': market['symbol'] + ':' + side,
      'symbol': market['symbol'],
      'notional': undefined,
      'marginMode': marginMode,
      'liquidationPrice': liquidation,
      'entryPrice': this.safeNumber(position, 'avgPrice'),
      'unrealizedPnl': this.safeNumber2(position, 'unrealisedPNL', 'unrealizedPL'),
      'realizedPnl': this.safeNumber2(position, 'realisedPNL', 'realizedPL'),
      'percentage': undefined,
      'contracts': contracts,
      'contractSize': this.safeNumber(market, 'contractSize'),
      'side': side,
      'hedged': hedged,
      'timestamp': timestamp,
      'markPrice': this.safeNumber(position, 'markPrice'),
      'datetime': this.iso8601(timestamp),
      'maintenanceMargin': undefined,
      'maintenanceMarginPercentage': undefined,
      'collateral': this.safeNumber(position, 'margin'),
      'initialMargin': initialMargin,
      'initialMarginPercentage': undefined,
      'leverage': this.safeNumber(position, 'leverage'),
      'marginRatio': undefined
    };
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://bybit-exchange.github.io/docs/v5/market/kline
     * @see https://bybit-exchange.github.io/docs/v5/market/mark-kline
     * @see https://bybit-exchange.github.io/docs/v5/market/index-kline
     * @see https://bybit-exchange.github.io/docs/v5/market/preimum-index-kline
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    this.checkRequiredSymbol('fetchOHLCV', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit === undefined) {
      limit = 200; // default is 340 when requested with `since`
    }

    if (since !== undefined) {
      request['startTime'] = since;
    }
    const klineType = this.safeString(this.timeframes, timeframe, timeframe);
    request['interval'] = timeframe;
    if (limit !== undefined) {
      // request['limit'] = limit; // max 1000, default 1000
      if (klineType === '1') {
        request['endTime'] = since + limit * 60 * 1000;
      } else if (klineType === '3') {
        request['endTime'] = since + limit * 3 * 60 * 1000;
      } else if (klineType === '5') {
        request['endTime'] = since + limit * 5 * 60 * 1000;
      } else if (klineType === '15') {
        request['endTime'] = since + limit * 15 * 60 * 1000;
      } else if (klineType === '30') {
        request['endTime'] = since + limit * 30 * 60 * 1000;
      } else if (klineType === '60') {
        request['endTime'] = since + limit * 60 * 60 * 1000;
      } else if (klineType === '120') {
        request['endTime'] = since + limit * 120 * 60 * 1000;
      } else if (klineType === '240') {
        request['endTime'] = since + limit * 240 * 60 * 1000;
      } else if (klineType === '360') {
        request['endTime'] = since + limit * 360 * 60 * 1000;
      } else if (klineType === '720') {
        request['endTime'] = since + limit * 720 * 60 * 1000;
      } else if (klineType === '1D') {
        request['endTime'] = since + limit * 24 * 60 * 60 * 1000;
      } else if (klineType === '1W') {
        request['endTime'] = since + limit * 7 * 24 * 60 * 60 * 1000;
      } else if (klineType === '1M') {
        request['endTime'] = since + limit * 30 * 24 * 60 * 60 * 1000;
      } else {
        request['endTime'] = since + limit * 60 * 1000;
      }
    }
    // console.log ('===============');
    // console.log ('fetchOHLCV', symbol, timeframe, since, limit, params, klineType);
    // console.log ('now', +new Date (), new Date ());
    // console.log ('startTs', +new Date (request['startTime']), new Date (request['startTime']));
    // console.log ('endTs', +new Date (request['endTime']), new Date (request['endTime']));
    const response = await this.swap2OpenApiPublicGetSwapV2QuoteKlines(this.extend(request, params));
    // console.log ('lastCandleTs', response.data[response.data.length - 1] ? +new Date (+response.data[response.data.length - 1].time) : 'none', response.data[response.data.length - 1] ? new Date (+response.data[response.data.length - 1].time) : 'none');
    // console.log ('response', response);
    const ohlcvs = this.safeValue(response, 'data', []);
    if (ohlcvs.length > 0) {
      // BEGIN Patching last candle
      const lastRequest = this.omit(request, ['startTime', 'endTime']);
      const lastCandleResponse = await this.swap2OpenApiPublicGetSwapV2QuoteKlines(this.extend(lastRequest, params));
      const lastOhlcv = this.safeValue(lastCandleResponse, 'data', {});
      const lastOhlcvTime = this.safeInteger(lastOhlcv, 'time');
      // console.log('loht', lastOhlcvTime, new Date (lastOhlcvTime));
      const lastOhlcvFromArrayTime = this.safeInteger(ohlcvs.slice(-1), 'time');
      if (lastOhlcvTime >= lastOhlcvFromArrayTime) {
        ohlcvs.push(lastOhlcv);
      }
      // END Patching last candle
    }

    return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
  }
  parseOHLCVs(ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
    const results = [];
    for (let i = 0; i < ohlcvs.length; i++) {
      results.push(this.parseOHLCV(ohlcvs[i], market));
    }
    const sorted = this.sortBy(results, 0);
    const tail = since === undefined;
    return this.filterBySinceLimit(sorted, since, limit, 0, tail);
  }
  parseOHLCV(ohlcv, market = undefined) {
    return [this.safeInteger(ohlcv, 'time'), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'volume') // volume
    ];
  }

  parseOrderStatus(status) {
    const statuses = {
      'pending': 'open',
      'new': 'open',
      'partially_filled': 'open',
      'filled': 'closed',
      'canceled': 'canceled',
      'pending_cancel': 'canceling',
      'rejected': 'rejected',
      'expired': 'expired'
    };
    return this.safeString(statuses, status, status);
  }
  parseStopTrigger(status) {
    const statuses = {
      'market_price': 'mark',
      'mark_price': 'mark',
      'fill_price': 'last',
      'contract_price': 'last',
      'index_price': 'index' // unused
    };

    return this.safeString(statuses, status, status);
  }
  parseOrderType(type) {
    const types = {
      'limit': 'limit',
      'market': 'market',
      'stop_market': 'stop',
      'take_profit_market': 'stop',
      'take_profit_limit': 'stopLimit',
      'trigger_limit': 'stopLimit',
      'trigger_market': 'stop'
    };
    return this.safeStringLower(types, type, type);
  }
  parseOrder(order, market = undefined) {
    // {
    //     "code": 0,
    //     "msg": "",
    //     "data": {
    //       "orders": [
    //         {
    //           "symbol": "BTC-USDT",
    //           "orderId": 1651880171474731000,
    //           "side": "SELL",
    //           "positionSide": "LONG",
    //           "type": "TAKE_PROFIT_MARKET",
    //           "origQty": "0.0020",
    //           "price": "0.0",
    //           "executedQty": "0.0000",
    //           "avgPrice": "0.0",
    //           "cumQuote": "0",
    //           "stopPrice": "35000.0",
    //           "profit": "0.0",
    //           "commission": "0.0",
    //           "status": "NEW",
    //           "time": 1682673897986,
    //           "updateTime": 1682673897986
    //         },
    //         {
    //           "symbol": "BTC-USDT",
    //           "orderId": 1651880171445371000,
    //           "side": "SELL",
    //           "positionSide": "LONG",
    //           "type": "STOP_MARKET",
    //           "origQty": "0.0020",
    //           "price": "0.0",
    //           "executedQty": "0.0000",
    //           "avgPrice": "28259.0",
    //           "cumQuote": "0",
    //           "stopPrice": "27000.0",
    //           "profit": "0.0",
    //           "commission": "0.0",
    //           "status": "NEW",
    //           "time": 1682673897979,
    //           "updateTime": 1682673897979
    //         },
    //         {
    //           "symbol": "BTC-USDT",
    //           "orderId": 1651287406772699100,
    //           "side": "BUY",
    //           "positionSide": "LONG",
    //           "type": "LIMIT",
    //           "origQty": "0.0001",
    //           "price": "25000.0",
    //           "executedQty": "0.0000",
    //           "avgPrice": "0.0",
    //           "cumQuote": "0",
    //           "stopPrice": "",
    //           "profit": "0.0",
    //           "commission": "0.0",
    //           "status": "PENDING",
    //           "time": 1682532572000,
    //           "updateTime": 1682532571000
    //         },
    //         {
    //           "symbol": "BTC-USDT",
    //           "orderId": 1651006482122227700,
    //           "side": "BUY",
    //           "positionSide": "LONG",
    //           "type": "LIMIT",
    //           "origQty": "0.0001",
    //           "price": "25000.0",
    //           "executedQty": "0.0000",
    //           "avgPrice": "0.0",
    //           "cumQuote": "0",
    //           "stopPrice": "",
    //           "profit": "0.0",
    //           "commission": "0.0",
    //           "status": "PENDING",
    //           "time": 1682465594000,
    //           "updateTime": 1682465594000
    //         }
    //       ]
    //     }
    //   }
    const marketId = this.safeString(order, 'symbol');
    market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const id = this.safeString(order, 'orderId');
    const price = this.safeString(order, 'price');
    const amount = this.safeFloat(order, 'origQty');
    const filled = this.safeFloat(order, 'executedQty');
    const cost = this.safeString(order, 'executedQty');
    const average = this.safeString(order, 'avgPrice');
    const type = this.parseOrderType(this.safeStringLower(order, 'type'));
    const timestamp = this.safeInteger(order, 'time');
    const rawStopTrigger = this.safeStringLower2(order, 'trigger', 'workingType');
    const trigger = this.parseStopTrigger(rawStopTrigger);
    const side = this.safeStringLower(order, 'side');
    const positionSide = this.safeStringLower(order, 'positionSide');
    let reduceOnly = false;
    if (side === 'buy') {
      if (positionSide === 'long') {
        reduceOnly = false;
      } else {
        reduceOnly = true;
      }
    } else {
      if (positionSide === 'long') {
        reduceOnly = true;
      } else {
        reduceOnly = false;
      }
    }
    const close = reduceOnly;
    // order type LIMIT, MARKET, STOP_MARKET, TAKE_PROFIT_MARKET, TRIGGER_LIMIT, TRIGGER_MARKET
    // if (rawStopTrigger) {
    //     if (type === 'market') {
    //         type = 'stop';
    //     } else {
    //         type = 'stopLimit';
    //     }
    // } else {
    //     if (type === 'market') {
    //         type = 'market';
    //     } else {
    //         type = 'limit';
    //     }
    // }
    const clientOrderId = this.safeString(order, 'orderId');
    const fee = this.safeString(order, 'comission');
    const rawStatus = this.safeStringLower(order, 'status');
    const status = this.parseOrderStatus(rawStatus);
    const lastTradeTimestamp = this.safeInteger(order, 'updateTime');
    const timeInForce = this.safeString(order, 'timeInForce');
    const postOnly = timeInForce === 'PostOnly';
    const stopPrice = this.safeNumber(order, 'stopPrice');
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': 'GTC',
      'postOnly': postOnly,
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'average': average,
      'cost': cost,
      'amount': amount,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': fee,
      'trades': undefined,
      'reduceOnly': reduceOnly,
      'close': close,
      'trigger': trigger // TEALSTREET
    }, market);
  }
  async fetchOpenOrdersV2(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bingx#fetchOpenOrders
     * @description fetch all unfilled currently open orders
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch open orders for
     * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const response = await this.swap2OpenApiPrivateGetSwapV2TradeOpenOrders();
    const data = this.safeValue(response, 'data', {});
    const orders = this.safeValue(data, 'orders', []);
    const result = [];
    for (let i = 0; i < orders.length; i++) {
      result.push(this.parseOrder(orders[i]));
    }
    return result;
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    return await this.fetchOpenOrdersV2(symbol, since, limit, params);
  }
  sign(path, section = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    const type = section[0];
    const version = section[1];
    const access = section[2];
    const rawPath = path;
    let url = this.implodeHostname(this.urls['api'][type]);
    url += '/' + version + '/' + path;
    path = this.implodeParams(path, params);
    params = this.omit(params, this.extractParams(path));
    params = this.keysort(params);
    if (access === 'private') {
      this.checkRequiredCredentials();
      // positionSide is marked v1 :/
      const isOpenApi = url.indexOf('/v2/') >= 0 || url.indexOf('positionSide/dual') >= 0;
      const isUserDataStreamEp = url.indexOf('userDataStream') >= 0;
      if (isOpenApi || isUserDataStreamEp) {
        params = this.extend(params, {
          'timestamp': this.milliseconds() - 0
        });
        params = this.keysort(params);
        const paramString = this.rawencode(params);
        const signature = this.hmac(this.encode(paramString), this.encode(this.secret), 'sha256');
        params = this.extend(params, {
          'signature': signature
        });
        headers = {
          'X-BX-APIKEY': this.apiKey
        };
      } else {
        params = this.extend(params, {
          'apiKey': this.apiKey,
          'timestamp': this.milliseconds() - 0
        });
        params = this.keysort(params);
        // ACTUAL SIGNATURE GENERATION
        const paramString = this.rawencode(params);
        const originString = method + '/api/' + version + '/' + rawPath + paramString;
        const signature = this.hmac(this.encode(originString), this.encode(this.secret), 'sha256', 'base64');
        // ACTUAL SIGNATURE GENERATION
        params = this.extend(params, {
          'sign': signature
        });
      }
    }
    if (Object.keys(params).length) {
      url += '?' + this.urlencode(params);
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (!response) {
      return; // fallback to default error handler
    }

    const errorCode = this.safeInteger(response, 'code');
    // in theory 80012 is Service Unavailable, but returned on lev charges :/
    if (errorCode !== undefined && errorCode > 0 && errorCode !== 80012) {
      throw new _errors.ExchangeError(this.id + ' ' + this.json(response));
    }
  }
}
exports.default = bingx;

},{"./base/Exchange.js":2,"./base/errors.js":5,"./base/functions/number.js":11}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
var _number = require("./base/functions/number.js");
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bitget extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'bitget',
      'name': 'Bitget',
      'countries': ['SG'],
      'version': 'v1',
      'rateLimit': 50,
      'certified': true,
      'pro': true,
      'userAgent': undefined,
      'origin': 'https://open-api.bingx.com',
      'has': {
        'CORS': undefined,
        'spot': true,
        'margin': false,
        'swap': true,
        'future': false,
        'option': false,
        'addMargin': true,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'cancelOrders': true,
        'createOrder': true,
        'createReduceOnlyOrder': false,
        'fetchAccounts': false,
        'fetchBalance': true,
        'fetchBorrowRate': false,
        'fetchBorrowRateHistories': false,
        'fetchBorrowRateHistory': false,
        'fetchBorrowRates': false,
        'fetchBorrowRatesPerSymbol': false,
        'fetchClosedOrders': true,
        'fetchCurrencies': true,
        'fetchDepositAddress': true,
        'fetchDepositAddresses': false,
        'fetchDeposits': true,
        'fetchFundingHistory': false,
        'fetchFundingRate': true,
        'fetchFundingRateHistory': true,
        'fetchFundingRates': false,
        'fetchIndexOHLCV': false,
        'fetchLedger': true,
        'fetchLeverage': true,
        'fetchLeverageTiers': false,
        'fetchMarginMode': undefined,
        'fetchMarketLeverageTiers': false,
        'fetchMarkets': true,
        'fetchMarkOHLCV': false,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenInterest': true,
        'fetchOpenInterestHistory': false,
        'fetchOpenOrders': true,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrderTrades': true,
        'fetchPosition': true,
        'fetchPositionMode': false,
        'fetchPositions': true,
        'fetchPositionsHistory': true,
        'fetchPositionsRisk': false,
        'fetchPremiumIndexOHLCV': false,
        'fetchTicker': true,
        'fetchTickers': true,
        'fetchTime': true,
        'fetchTrades': true,
        'fetchTradingFee': true,
        'fetchTradingFees': true,
        'fetchTransfer': false,
        'fetchTransfers': undefined,
        'fetchWithdrawal': false,
        'fetchWithdrawals': true,
        'reduceMargin': true,
        'setLeverage': true,
        'setMarginMode': true,
        'setPositionMode': false,
        'transfer': true,
        'withdraw': false
      },
      'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1d',
        '3d': '3d',
        '1w': '1w',
        '1M': '1M'
      },
      'hostname': 'bitget.com',
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/195989417-4253ddb0-afbe-4a1c-9dea-9dbcd121fa5d.jpg',
        'api': {
          'spot': 'https://api.{hostname}',
          'mix': 'https://api.{hostname}'
        },
        'www': 'https://www.bitget.com',
        'doc': ['https://bitgetlimited.github.io/apidoc/en/mix', 'https://bitgetlimited.github.io/apidoc/en/spot', 'https://bitgetlimited.github.io/apidoc/en/broker'],
        'fees': 'https://www.bitget.cc/zh-CN/rate?tab=1',
        'referral': 'https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j'
      },
      'api': {
        'public': {
          'spot': {
            'get': {
              'public/time': 1,
              'public/currencies': 1,
              'public/products': 1,
              'public/product': 1,
              'market/ticker': 1,
              'market/tickers': 1,
              'market/fills': 1,
              'market/candles': 1,
              'market/depth': 1
            }
          },
          'mix': {
            'get': {
              'market/contracts': 1,
              'market/depth': 1,
              'market/ticker': 1,
              'market/tickers': 1,
              'market/fills': 1,
              'market/candles': 1,
              'market/index': 1,
              'market/funding-time': 1,
              'market/history-fundRate': 1,
              'market/current-fundRate': 1,
              'market/open-interest': 1,
              'market/mark-price': 1,
              'market/symbol-leverage': 1
            }
          }
        },
        'private': {
          'spot': {
            'get': {
              'account/getInfo': 20,
              'account/assets': 2,
              'account/transferRecords': 4,
              'wallet/deposit-address': 4,
              'wallet/withdrawal-inner': 4,
              'wallet/withdrawal-list': 1,
              'wallet/deposit-list': 1
            },
            'post': {
              'account/bills': 2,
              'account/sub-account-spot-assets': 200,
              'trade/orders': 2,
              'trade/batch-orders': 4,
              'trade/cancel-order': 2,
              'trade/cancel-batch-orders': 4,
              'trade/orderInfo': 1,
              'trade/open-orders': 1,
              'trade/history': 1,
              'trade/fills': 1,
              'wallet/transfer': 4,
              'wallet/withdrawal': 4,
              'wallet/subTransfer': 10
            }
          },
          'mix': {
            'get': {
              'account/account': 2,
              'account/accounts': 2,
              'account/open-count': 1,
              'order/current': 2,
              'order/history': 2,
              'order/detail': 2,
              'order/fills': 2,
              'order/historyProductType': 8,
              'order/allFills': 2,
              'plan/currentPlan': 2,
              'plan/historyPlan': 2,
              'position/singlePosition': 2,
              'position/allPosition': 2,
              'position/history-position': 2,
              'trace/currentTrack': 2,
              'trace/followerOrder': 2,
              'trace/historyTrack': 2,
              'trace/summary': 2,
              'trace/profitSettleTokenIdGroup': 2,
              'trace/profitDateGroupList': 2,
              'trade/profitDateList': 2,
              'trace/waitProfitDateList': 2,
              'trace/traderSymbols': 2,
              'order/marginCoinCurrent': 2
            },
            'post': {
              'account/setLeverage': 8,
              'account/setPositionMode': 8,
              'account/setMargin': 8,
              'account/setMarginMode': 8,
              'order/placeOrder': 2,
              'order/place-tpsl-order': 2,
              'order/batch-orders': 2,
              'order/cancel-order': 2,
              'order/cancel-all-orders': 2,
              'order/cancel-batch-orders': 2,
              'plan/placePlan': 2,
              'plan/modifyPlan': 2,
              'plan/modifyPlanPreset': 2,
              'plan/placeTPSL': 2,
              'plan/placePositionsTPSL': 2,
              'plan/modifyTPSLPlan': 2,
              'plan/cancelPlan': 2,
              'plan/cancelAllPlan': 2,
              'trace/closeTrackOrder': 2,
              'trace/setUpCopySymbols': 2
            }
          }
        }
      },
      'fees': {
        'spot': {
          'taker': this.parseNumber('0.002'),
          'maker': this.parseNumber('0.002')
        },
        'swap': {
          'taker': this.parseNumber('0.0006'),
          'maker': this.parseNumber('0.0004')
        }
      },
      'requiredCredentials': {
        'apiKey': true,
        'secret': true,
        'password': true
      },
      'exceptions': {
        // http error codes
        // 400 Bad Request — Invalid request format
        // 401 Unauthorized — Invalid API Key
        // 403 Forbidden — You do not have access to the requested resource
        // 404 Not Found
        // 500 Internal Server Error — We had a problem with our server
        'exact': {
          '1': _errors.ExchangeError,
          // undocumented
          'failure to get a peer from the ring-balancer': _errors.ExchangeNotAvailable,
          '4010': _errors.PermissionDenied,
          // common
          // '0': ExchangeError, // 200 successful,when the order placement / cancellation / operation is successful
          '4001': _errors.ExchangeError,
          '4002': _errors.ExchangeError,
          // --------------------------------------------------------
          '30001': _errors.AuthenticationError,
          '30002': _errors.AuthenticationError,
          '30003': _errors.AuthenticationError,
          '30004': _errors.AuthenticationError,
          '30005': _errors.InvalidNonce,
          '30006': _errors.AuthenticationError,
          '30007': _errors.BadRequest,
          '30008': _errors.RequestTimeout,
          '30009': _errors.ExchangeError,
          '30010': _errors.AuthenticationError,
          '30011': _errors.PermissionDenied,
          '30012': _errors.AuthenticationError,
          '30013': _errors.AuthenticationError,
          '30014': _errors.DDoSProtection,
          '30015': _errors.AuthenticationError,
          '30016': _errors.ExchangeError,
          '30017': _errors.ExchangeError,
          '30018': _errors.ExchangeError,
          '30019': _errors.ExchangeNotAvailable,
          '30020': _errors.BadRequest,
          '30021': _errors.BadRequest,
          '30022': _errors.PermissionDenied,
          '30023': _errors.BadRequest,
          '30024': _errors.BadSymbol,
          '30025': _errors.BadRequest,
          '30026': _errors.DDoSProtection,
          '30027': _errors.AuthenticationError,
          '30028': _errors.PermissionDenied,
          '30029': _errors.AccountSuspended,
          '30030': _errors.ExchangeError,
          '30031': _errors.BadRequest,
          '30032': _errors.BadSymbol,
          '30033': _errors.BadRequest,
          '30034': _errors.ExchangeError,
          '30035': _errors.ExchangeError,
          '30036': _errors.ExchangeError,
          '30037': _errors.ExchangeNotAvailable,
          // '30038': AuthenticationError, // { "code": 30038, "message": "user does not exist" }
          '30038': _errors.OnMaintenance,
          // futures
          '32001': _errors.AccountSuspended,
          '32002': _errors.PermissionDenied,
          '32003': _errors.CancelPending,
          '32004': _errors.ExchangeError,
          '32005': _errors.InvalidOrder,
          '32006': _errors.InvalidOrder,
          '32007': _errors.InvalidOrder,
          '32008': _errors.InvalidOrder,
          '32009': _errors.InvalidOrder,
          '32010': _errors.ExchangeError,
          '32011': _errors.ExchangeError,
          '32012': _errors.ExchangeError,
          '32013': _errors.ExchangeError,
          '32014': _errors.ExchangeError,
          '32015': _errors.ExchangeError,
          '32016': _errors.ExchangeError,
          '32017': _errors.ExchangeError,
          '32018': _errors.ExchangeError,
          '32019': _errors.ExchangeError,
          '32020': _errors.ExchangeError,
          '32021': _errors.ExchangeError,
          '32022': _errors.ExchangeError,
          '32023': _errors.ExchangeError,
          '32024': _errors.ExchangeError,
          '32025': _errors.ExchangeError,
          '32026': _errors.ExchangeError,
          '32027': _errors.ExchangeError,
          '32028': _errors.AccountSuspended,
          '32029': _errors.ExchangeError,
          '32030': _errors.InvalidOrder,
          '32031': _errors.ArgumentsRequired,
          '32038': _errors.AuthenticationError,
          '32040': _errors.ExchangeError,
          '32044': _errors.ExchangeError,
          '32045': _errors.ExchangeError,
          '32046': _errors.ExchangeError,
          '32047': _errors.ExchangeError,
          '32048': _errors.InvalidOrder,
          '32049': _errors.ExchangeError,
          '32050': _errors.InvalidOrder,
          '32051': _errors.InvalidOrder,
          '32052': _errors.ExchangeError,
          '32053': _errors.ExchangeError,
          '32057': _errors.ExchangeError,
          '32054': _errors.ExchangeError,
          '32055': _errors.InvalidOrder,
          '32056': _errors.ExchangeError,
          '32058': _errors.ExchangeError,
          '32059': _errors.InvalidOrder,
          '32060': _errors.InvalidOrder,
          '32061': _errors.InvalidOrder,
          '32062': _errors.InvalidOrder,
          '32063': _errors.InvalidOrder,
          '32064': _errors.ExchangeError,
          '32065': _errors.ExchangeError,
          '32066': _errors.ExchangeError,
          '32067': _errors.ExchangeError,
          '32068': _errors.ExchangeError,
          '32069': _errors.ExchangeError,
          '32070': _errors.ExchangeError,
          '32071': _errors.ExchangeError,
          '32072': _errors.ExchangeError,
          '32073': _errors.ExchangeError,
          '32074': _errors.ExchangeError,
          '32075': _errors.ExchangeError,
          '32076': _errors.ExchangeError,
          '32077': _errors.ExchangeError,
          '32078': _errors.ExchangeError,
          '32079': _errors.ExchangeError,
          '32080': _errors.ExchangeError,
          '32083': _errors.ExchangeError,
          // token and margin trading
          '33001': _errors.PermissionDenied,
          '33002': _errors.AccountSuspended,
          '33003': _errors.InsufficientFunds,
          '33004': _errors.ExchangeError,
          '33005': _errors.ExchangeError,
          '33006': _errors.ExchangeError,
          '33007': _errors.ExchangeError,
          '33008': _errors.InsufficientFunds,
          '33009': _errors.ExchangeError,
          '33010': _errors.ExchangeError,
          '33011': _errors.ExchangeError,
          '33012': _errors.ExchangeError,
          '33013': _errors.InvalidOrder,
          '33014': _errors.OrderNotFound,
          '33015': _errors.InvalidOrder,
          '33016': _errors.ExchangeError,
          '33017': _errors.InsufficientFunds,
          '33018': _errors.ExchangeError,
          '33020': _errors.ExchangeError,
          '33021': _errors.BadRequest,
          '33022': _errors.InvalidOrder,
          '33023': _errors.ExchangeError,
          '33024': _errors.InvalidOrder,
          '33025': _errors.InvalidOrder,
          '33026': _errors.ExchangeError,
          '33027': _errors.InvalidOrder,
          '33028': _errors.InvalidOrder,
          '33029': _errors.InvalidOrder,
          '33034': _errors.ExchangeError,
          '33035': _errors.ExchangeError,
          '33036': _errors.ExchangeError,
          '33037': _errors.ExchangeError,
          '33038': _errors.ExchangeError,
          '33039': _errors.ExchangeError,
          '33040': _errors.ExchangeError,
          '33041': _errors.ExchangeError,
          '33042': _errors.ExchangeError,
          '33043': _errors.ExchangeError,
          '33044': _errors.ExchangeError,
          '33045': _errors.ExchangeError,
          '33046': _errors.ExchangeError,
          '33047': _errors.ExchangeError,
          '33048': _errors.ExchangeError,
          '33049': _errors.ExchangeError,
          '33050': _errors.ExchangeError,
          '33051': _errors.ExchangeError,
          '33059': _errors.BadRequest,
          '33060': _errors.BadRequest,
          '33061': _errors.ExchangeError,
          '33062': _errors.ExchangeError,
          '33063': _errors.ExchangeError,
          '33064': _errors.ExchangeError,
          '33065': _errors.ExchangeError,
          // account
          '21009': _errors.ExchangeError,
          '34001': _errors.PermissionDenied,
          '34002': _errors.InvalidAddress,
          '34003': _errors.ExchangeError,
          '34004': _errors.ExchangeError,
          '34005': _errors.ExchangeError,
          '34006': _errors.ExchangeError,
          '34007': _errors.ExchangeError,
          '34008': _errors.InsufficientFunds,
          '34009': _errors.ExchangeError,
          '34010': _errors.ExchangeError,
          '34011': _errors.ExchangeError,
          '34012': _errors.ExchangeError,
          '34013': _errors.ExchangeError,
          '34014': _errors.ExchangeError,
          '34015': _errors.ExchangeError,
          '34016': _errors.PermissionDenied,
          '34017': _errors.AccountSuspended,
          '34018': _errors.AuthenticationError,
          '34019': _errors.PermissionDenied,
          '34020': _errors.PermissionDenied,
          '34021': _errors.InvalidAddress,
          '34022': _errors.ExchangeError,
          '34023': _errors.PermissionDenied,
          '34026': _errors.ExchangeError,
          '34036': _errors.ExchangeError,
          '34037': _errors.ExchangeError,
          '34038': _errors.ExchangeError,
          '34039': _errors.ExchangeError,
          // swap
          '35001': _errors.ExchangeError,
          '35002': _errors.ExchangeError,
          '35003': _errors.ExchangeError,
          '35004': _errors.ExchangeError,
          '35005': _errors.AuthenticationError,
          '35008': _errors.InvalidOrder,
          '35010': _errors.InvalidOrder,
          '35012': _errors.InvalidOrder,
          '35014': _errors.InvalidOrder,
          '35015': _errors.InvalidOrder,
          '35017': _errors.ExchangeError,
          '35019': _errors.InvalidOrder,
          '35020': _errors.InvalidOrder,
          '35021': _errors.InvalidOrder,
          '35022': _errors.ExchangeError,
          '35024': _errors.ExchangeError,
          '35025': _errors.InsufficientFunds,
          '35026': _errors.ExchangeError,
          '35029': _errors.OrderNotFound,
          '35030': _errors.InvalidOrder,
          '35031': _errors.InvalidOrder,
          '35032': _errors.ExchangeError,
          '35037': _errors.ExchangeError,
          '35039': _errors.ExchangeError,
          '35040': _errors.InvalidOrder,
          '35044': _errors.ExchangeError,
          '35046': _errors.InsufficientFunds,
          '35047': _errors.InsufficientFunds,
          '35048': _errors.ExchangeError,
          '35049': _errors.InvalidOrder,
          '35050': _errors.InvalidOrder,
          '35052': _errors.InsufficientFunds,
          '35053': _errors.ExchangeError,
          '35055': _errors.InsufficientFunds,
          '35057': _errors.ExchangeError,
          '35058': _errors.ExchangeError,
          '35059': _errors.BadRequest,
          '35060': _errors.BadRequest,
          '35061': _errors.BadRequest,
          '35062': _errors.InvalidOrder,
          '35063': _errors.InvalidOrder,
          '35064': _errors.InvalidOrder,
          '35066': _errors.InvalidOrder,
          '35067': _errors.InvalidOrder,
          '35068': _errors.InvalidOrder,
          '35069': _errors.InvalidOrder,
          '35070': _errors.InvalidOrder,
          '35071': _errors.InvalidOrder,
          '35072': _errors.InvalidOrder,
          '35073': _errors.InvalidOrder,
          '35074': _errors.InvalidOrder,
          '35075': _errors.InvalidOrder,
          '35076': _errors.InvalidOrder,
          '35077': _errors.InvalidOrder,
          '35078': _errors.InvalidOrder,
          '35079': _errors.InvalidOrder,
          '35080': _errors.InvalidOrder,
          '35081': _errors.InvalidOrder,
          '35082': _errors.InvalidOrder,
          '35083': _errors.InvalidOrder,
          '35084': _errors.InvalidOrder,
          '35085': _errors.InvalidOrder,
          '35086': _errors.InvalidOrder,
          '35087': _errors.InvalidOrder,
          '35088': _errors.InvalidOrder,
          '35089': _errors.InvalidOrder,
          '35090': _errors.ExchangeError,
          '35091': _errors.ExchangeError,
          '35092': _errors.ExchangeError,
          '35093': _errors.ExchangeError,
          '35094': _errors.ExchangeError,
          '35095': _errors.BadRequest,
          '35096': _errors.ExchangeError,
          '35097': _errors.ExchangeError,
          '35098': _errors.ExchangeError,
          '35099': _errors.ExchangeError,
          // option
          '36001': _errors.BadRequest,
          '36002': _errors.BadRequest,
          '36005': _errors.ExchangeError,
          '36101': _errors.AuthenticationError,
          '36102': _errors.PermissionDenied,
          '36103': _errors.AccountSuspended,
          '36104': _errors.PermissionDenied,
          '36105': _errors.PermissionDenied,
          '36106': _errors.AccountSuspended,
          '36107': _errors.PermissionDenied,
          '36108': _errors.InsufficientFunds,
          '36109': _errors.PermissionDenied,
          '36201': _errors.PermissionDenied,
          '36202': _errors.PermissionDenied,
          '36203': _errors.InvalidOrder,
          '36204': _errors.ExchangeError,
          '36205': _errors.BadRequest,
          '36206': _errors.BadRequest,
          '36207': _errors.InvalidOrder,
          '36208': _errors.InvalidOrder,
          '36209': _errors.InvalidOrder,
          '36210': _errors.InvalidOrder,
          '36211': _errors.InvalidOrder,
          '36212': _errors.InvalidOrder,
          '36213': _errors.InvalidOrder,
          '36214': _errors.ExchangeError,
          '36216': _errors.OrderNotFound,
          '36217': _errors.InvalidOrder,
          '36218': _errors.InvalidOrder,
          '36219': _errors.InvalidOrder,
          '36220': _errors.InvalidOrder,
          '36221': _errors.InvalidOrder,
          '36222': _errors.InvalidOrder,
          '36223': _errors.InvalidOrder,
          '36224': _errors.InvalidOrder,
          '36225': _errors.InvalidOrder,
          '36226': _errors.InvalidOrder,
          '36227': _errors.InvalidOrder,
          '36228': _errors.InvalidOrder,
          '36229': _errors.InvalidOrder,
          '36230': _errors.InvalidOrder,
          // --------------------------------------------------------
          // swap
          '400': _errors.BadRequest,
          '401': _errors.AuthenticationError,
          '403': _errors.PermissionDenied,
          '404': _errors.BadRequest,
          '405': _errors.BadRequest,
          '415': _errors.BadRequest,
          '429': _errors.DDoSProtection,
          '500': _errors.ExchangeNotAvailable,
          '1001': _errors.RateLimitExceeded,
          '1002': _errors.ExchangeError,
          '1003': _errors.ExchangeError,
          // '00000': ExchangeError, // success
          '40001': _errors.AuthenticationError,
          '40002': _errors.AuthenticationError,
          '40003': _errors.AuthenticationError,
          '40004': _errors.InvalidNonce,
          '40005': _errors.InvalidNonce,
          '40006': _errors.AuthenticationError,
          '40007': _errors.BadRequest,
          '40008': _errors.InvalidNonce,
          '40009': _errors.AuthenticationError,
          '40010': _errors.AuthenticationError,
          '40011': _errors.AuthenticationError,
          '40012': _errors.AuthenticationError,
          '40013': _errors.ExchangeError,
          '40014': _errors.PermissionDenied,
          '40015': _errors.ExchangeError,
          '40016': _errors.PermissionDenied,
          '40017': _errors.ExchangeError,
          '40018': _errors.PermissionDenied,
          '40102': _errors.BadRequest,
          '40103': _errors.BadRequest,
          '40104': _errors.ExchangeError,
          '40105': _errors.ExchangeError,
          '40106': _errors.ExchangeError,
          '40107': _errors.ExchangeError,
          '40108': _errors.InvalidOrder,
          '40109': _errors.OrderNotFound,
          '40200': _errors.OnMaintenance,
          '40201': _errors.InvalidOrder,
          '40202': _errors.ExchangeError,
          '40203': _errors.BadRequest,
          '40204': _errors.BadRequest,
          '40205': _errors.BadRequest,
          '40206': _errors.BadRequest,
          '40207': _errors.BadRequest,
          '40208': _errors.BadRequest,
          '40209': _errors.BadRequest,
          '40300': _errors.ExchangeError,
          '40301': _errors.PermissionDenied,
          '40302': _errors.BadRequest,
          '40303': _errors.BadRequest,
          '40304': _errors.BadRequest,
          '40305': _errors.BadRequest,
          '40306': _errors.ExchangeError,
          '40308': _errors.OnMaintenance,
          '40309': _errors.BadSymbol,
          '40400': _errors.ExchangeError,
          '40401': _errors.ExchangeError,
          '40402': _errors.BadRequest,
          '40403': _errors.BadRequest,
          '40404': _errors.BadRequest,
          '40405': _errors.BadRequest,
          '40406': _errors.BadRequest,
          '40407': _errors.ExchangeError,
          '40408': _errors.ExchangeError,
          '40409': _errors.ExchangeError,
          '40500': _errors.InvalidOrder,
          '40501': _errors.ExchangeError,
          '40502': _errors.ExchangeError,
          '40503': _errors.ExchangeError,
          '40504': _errors.ExchangeError,
          '40505': _errors.ExchangeError,
          '40506': _errors.AuthenticationError,
          '40507': _errors.AuthenticationError,
          '40508': _errors.ExchangeError,
          '40509': _errors.ExchangeError,
          '40600': _errors.ExchangeError,
          '40601': _errors.ExchangeError,
          '40602': _errors.ExchangeError,
          '40603': _errors.ExchangeError,
          '40604': _errors.ExchangeNotAvailable,
          '40605': _errors.ExchangeError,
          '40606': _errors.ExchangeError,
          '40607': _errors.ExchangeError,
          '40608': _errors.ExchangeError,
          '40609': _errors.ExchangeError,
          '40700': _errors.BadRequest,
          '40701': _errors.ExchangeError,
          '40702': _errors.ExchangeError,
          '40703': _errors.ExchangeError,
          '40704': _errors.ExchangeError,
          '40705': _errors.BadRequest,
          '40706': _errors.InvalidOrder,
          '40707': _errors.BadRequest,
          '40708': _errors.BadRequest,
          '40709': _errors.ExchangeError,
          '40710': _errors.ExchangeError,
          '40711': _errors.InsufficientFunds,
          '40712': _errors.InsufficientFunds,
          '40713': _errors.ExchangeError,
          '40714': _errors.ExchangeError,
          '45110': _errors.InvalidOrder,
          // spot
          'invalid sign': _errors.AuthenticationError,
          'invalid currency': _errors.BadSymbol,
          'invalid symbol': _errors.BadSymbol,
          'invalid period': _errors.BadRequest,
          'invalid user': _errors.ExchangeError,
          'invalid amount': _errors.InvalidOrder,
          'invalid type': _errors.InvalidOrder,
          'invalid orderId': _errors.InvalidOrder,
          'invalid record': _errors.ExchangeError,
          'invalid accountId': _errors.BadRequest,
          'invalid address': _errors.BadRequest,
          'accesskey not null': _errors.AuthenticationError,
          'illegal accesskey': _errors.AuthenticationError,
          'sign not null': _errors.AuthenticationError,
          'req_time is too much difference from server time': _errors.InvalidNonce,
          'permissions not right': _errors.PermissionDenied,
          'illegal sign invalid': _errors.AuthenticationError,
          'user locked': _errors.AccountSuspended,
          'Request Frequency Is Too High': _errors.RateLimitExceeded,
          'more than a daily rate of cash': _errors.BadRequest,
          'more than the maximum daily withdrawal amount': _errors.BadRequest,
          'need to bind email or mobile': _errors.ExchangeError,
          'user forbid': _errors.PermissionDenied,
          'User Prohibited Cash Withdrawal': _errors.PermissionDenied,
          'Cash Withdrawal Is Less Than The Minimum Value': _errors.BadRequest,
          'Cash Withdrawal Is More Than The Maximum Value': _errors.BadRequest,
          'the account with in 24 hours ban coin': _errors.PermissionDenied,
          'order cancel fail': _errors.BadRequest,
          'base symbol error': _errors.BadSymbol,
          'base date error': _errors.ExchangeError,
          'api signature not valid': _errors.AuthenticationError,
          'gateway internal error': _errors.ExchangeError,
          'audit failed': _errors.ExchangeError,
          'order queryorder invalid': _errors.BadRequest,
          'market no need price': _errors.InvalidOrder,
          'limit need price': _errors.InvalidOrder,
          'userid not equal to account_id': _errors.ExchangeError,
          'your balance is low': _errors.InsufficientFunds,
          'address invalid cointype': _errors.ExchangeError,
          'system exception': _errors.ExchangeError,
          '50003': _errors.ExchangeError,
          '50004': _errors.BadSymbol,
          '50006': _errors.PermissionDenied,
          '50007': _errors.PermissionDenied,
          '50008': _errors.RequestTimeout,
          '50009': _errors.RateLimitExceeded,
          '50010': _errors.ExchangeError,
          '50014': _errors.InvalidOrder,
          '50015': _errors.InvalidOrder,
          '50016': _errors.InvalidOrder,
          '50017': _errors.InvalidOrder,
          '50018': _errors.InvalidOrder,
          '50019': _errors.InvalidOrder,
          '50020': _errors.InsufficientFunds,
          '50021': _errors.InvalidOrder,
          '50026': _errors.InvalidOrder,
          'invalid order query time': _errors.ExchangeError,
          'invalid start time': _errors.BadRequest,
          'invalid end time': _errors.BadRequest,
          '20003': _errors.ExchangeError,
          '01001': _errors.ExchangeError,
          '43111': _errors.PermissionDenied // {"code":"43111","msg":"参数错误 address not in address book","requestTime":1665394201164,"data":null}
        },

        'broad': {
          'invalid size, valid range': _errors.ExchangeError
        }
      },
      'precisionMode': _number.TICK_SIZE,
      'commonCurrencies': {
        'JADE': 'Jade Protocol'
      },
      'options': {
        'timeframes': {
          'spot': {
            '1m': '1min',
            '5m': '5min',
            '15m': '15min',
            '30m': '30min',
            '1h': '1h',
            '4h': '4h',
            '6h': '6h',
            '12h': '12h',
            '1d': '1day',
            '3d': '3day',
            '1w': '1week',
            '1M': '1M'
          },
          'swap': {
            '1m': '1m',
            '3m': '3m',
            '5m': '5m',
            '15m': '15m',
            '30m': '15m',
            '1h': '1H',
            '4h': '4H',
            '6h': '6H',
            '12h': '12H',
            '1d': '1Dutc',
            '3d': '3Dutc',
            '1w': '1Wutc',
            '1M': '1Mutc'
          }
        },
        'fetchMarkets': ['spot', 'swap'],
        'defaultType': 'swap',
        'defaultSubType': 'linear',
        'subTypes': ['umcbl', 'dmcbl', 'cmcbl'],
        'createMarketBuyOrderRequiresPrice': true,
        'brokerId': {
          // 'spot': 'CCXT#',
          // 'swap': 'CCXT#',
        },
        'withdraw': {
          'fillResponseFromRequest': true
        }
      }
    });
  }
  setSandboxMode(enabled) {
    const currSubTypes = this.getSubTypes();
    if (enabled) {
      this.options['subTypesBackup'] = currSubTypes;
      const newSubTypes = [];
      for (let i = 0; i < currSubTypes.length; i++) {
        newSubTypes.push('s' + currSubTypes[i]);
      }
      this.options['subTypes'] = newSubTypes;
    } else if ('subTypesBackup' in this.options) {
      this.options['subTypes'] = this.options['subTypesBackup'];
      delete this.options['subTypesBackup'];
    }
  }
  getSubTypes() {
    return this.safeValue(this.options, 'subTypes', ['umcbl', 'dmcbl', 'cmcbl']);
  }
  getSupportedMapping(key, mapping = {}) {
    // swap and future use same api for bitget
    if (key === 'future') {
      key = 'swap';
    }
    if (key in mapping) {
      return mapping[key];
    } else {
      throw new _errors.NotSupported(this.id + ' ' + key + ' does not have a value in mapping');
    }
  }
  getSubTypeFromMarketId(marketId) {
    if (!marketId) {
      return undefined;
    }
    const subTypeParts = marketId.split('_');
    if (subTypeParts.length > 1) {
      return subTypeParts[1].toLowerCase();
    } else {
      return '';
    }
  }
  async setPositionMode(hedged, symbol = undefined, params = {}) {
    /**
     * @method
     * @name binance#setPositionMode
     * @description set hedged to true or false for a market
     * @param {bool} hedged set to true to use dualSidePosition
     * @param {string|undefined} symbol not used by binance setPositionMode ()
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} response from the exchange
     */
    if (!symbol) {
      throw new _errors.ArgumentsRequired(this.id + ' setPositionMode requires a symbol argument');
    }
    const market = this.market(symbol);
    const subType = this.getSubTypeFromMarketId(market['id']);
    const request = {
      'productType': subType,
      'holdMode': hedged ? 'double_hold' : 'single_hold'
    };
    const response = await this.privateMixPostAccountSetPositionMode(this.extend(request, params));
    return response;
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    let subTypes = [];
    const request = {};
    let market = undefined;
    if (symbol) {
      market = this.market(symbol);
      subTypes = [this.getSubTypeFromMarketId(market['id'])];
      request['symbol'] = market['id'];
    } else {
      subTypes = this.getSubTypes();
    }
    const stop = this.safeValue(params, 'stop');
    if (stop) {
      params = this.omit(params, 'stop');
      let promises = [];
      for (let i = 0; i < subTypes.length; i++) {
        const subType = subTypes[i];
        request['productType'] = subType;
        request['isPlan'] = 'plan';
        promises.push(this.privateMixGetPlanCurrentPlan(this.extend(request, params)));
        request['isPlan'] = 'profit_loss';
        promises.push(this.privateMixGetPlanCurrentPlan(this.extend(request, params)));
      }
      promises = await Promise.all(promises);
      let orders = [];
      for (let i = 0; i < promises.length; i++) {
        const response = promises[i];
        const data = this.safeValue(response, 'data');
        orders = this.arrayConcat(orders, data);
      }
      return this.parseOrders(orders, undefined, since, limit);
    } else {
      let promises = [];
      for (let i = 0; i < subTypes.length; i++) {
        const subType = subTypes[i];
        request['productType'] = subType;
        promises.push(this.privateMixGetOrderMarginCoinCurrent(this.extend(request, params)));
      }
      promises = await Promise.all(promises);
      let orders = [];
      for (let i = 0; i < promises.length; i++) {
        const response = promises[i];
        const data = this.safeValue(response, 'data');
        orders = this.arrayConcat(orders, data);
      }
      return this.parseOrders(orders, undefined, since, limit);
    }
  }
  async fetchTime(params = {}) {
    /**
     * @method
     * @name bitget#fetchTime
     * @description fetches the current integer timestamp in milliseconds from the exchange server
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {int} the current integer timestamp in milliseconds from the exchange server
     */
    const response = await this.publicSpotGetPublicTime(params);
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645837773501,
    //       data: '1645837773501'
    //     }
    //
    return this.safeInteger(response, 'data');
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name bitget#fetchMarkets
     * @description retrieves data on all markets for bitget
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    const types = this.safeValue(this.options, 'fetchMarkets', ['spot', 'swap']);
    let result = [];
    for (let i = 0; i < types.length; i++) {
      const type = types[i];
      if (type === 'swap') {
        const subTypes = this.getSubTypes();
        let promises = [];
        for (let j = 0; j < subTypes.length; j++) {
          promises.push(this.fetchMarketsByType(type, this.extend(params, {
            'productType': subTypes[j]
          })));
        }
        promises = await Promise.all(promises);
        let result = [];
        for (let j = 0; j < promises.length; j++) {
          result = this.arrayConcat(result, promises[j]);
        }
        return result;
      } else {
        const markets = await this.fetchMarketsByType(types[i], params);
        result = this.arrayConcat(result, markets);
      }
    }
    return result;
  }
  parseMarkets(markets) {
    const result = [];
    for (let i = 0; i < markets.length; i++) {
      result.push(this.parseMarket(markets[i]));
    }
    return result;
  }
  parseMarket(market) {
    //
    // spot
    //
    //    {
    //        symbol: 'ALPHAUSDT_SPBL',
    //        symbolName: 'ALPHAUSDT',
    //        baseCoin: 'ALPHA',
    //        quoteCoin: 'USDT',
    //        minTradeAmount: '2',
    //        maxTradeAmount: '0',
    //        takerFeeRate: '0.001',
    //        makerFeeRate: '0.001',
    //        priceScale: '4',
    //        quantityScale: '4',
    //        status: 'online'
    //    }
    //
    // swap
    //
    //    {
    //        symbol: 'BTCUSDT_UMCBL',
    //        makerFeeRate: '0.0002',
    //        takerFeeRate: '0.0006',
    //        feeRateUpRatio: '0.005',
    //        openCostUpRatio: '0.01',
    //        quoteCoin: 'USDT',
    //        baseCoin: 'BTC',
    //        buyLimitPriceRatio: '0.01',
    //        sellLimitPriceRatio: '0.01',
    //        supportMarginCoins: [ 'USDT' ],
    //        minTradeNum: '0.001',
    //        priceEndStep: '5',
    //        volumePlace: '3',
    //        pricePlace: '1'
    //    }
    //
    const marketId = this.safeString(market, 'symbol');
    let quoteId = this.safeString(market, 'quoteCoin');
    if (marketId.slice(-6) === 'SCMCBL') {
      quoteId = 'SUSDC';
    } else if (marketId.slice(-5) === 'CMCBL') {
      quoteId = 'USDC';
    }
    const baseId = this.safeString(market, 'baseCoin');
    const quote = this.safeCurrencyCode(quoteId);
    const base = this.safeCurrencyCode(baseId);
    const supportMarginCoins = this.safeValue(market, 'supportMarginCoins', []);
    const settleId = this.safeString(supportMarginCoins, 0);
    const settle = this.safeCurrencyCode(settleId);
    let symbol = base + '/' + quote;
    const parts = marketId.split('_');
    const typeId = this.safeString(parts, 1);
    let type = undefined;
    let swap = false;
    let spot = false;
    let future = false;
    let contract = false;
    let pricePrecision = undefined;
    let amountPrecision = undefined;
    let linear = undefined;
    let inverse = undefined;
    let expiry = undefined;
    let expiryDatetime = undefined;
    if (typeId === 'SPBL') {
      type = 'spot';
      spot = true;
      pricePrecision = this.parseNumber(this.parsePrecision(this.safeString(market, 'priceScale')));
      amountPrecision = this.parseNumber(this.parsePrecision(this.safeString(market, 'quantityScale')));
    } else {
      const expiryString = this.safeString(parts, 2);
      if (expiryString !== undefined) {
        const year = '20' + expiryString.slice(0, 2);
        const month = expiryString.slice(2, 4);
        const day = expiryString.slice(4, 6);
        expiryDatetime = year + '-' + month + '-' + day + 'T00:00:00Z';
        expiry = this.parse8601(expiryDatetime);
        type = 'future';
        future = true;
        symbol = symbol + ':' + settle + '-' + expiryString;
      } else {
        type = 'swap';
        swap = true;
        symbol = symbol + ':' + settle;
      }
      contract = true;
      const sumcbl = typeId === 'SUMCBL';
      const sdmcbl = typeId === 'SDMCBL';
      const scmcbl = typeId === 'SCMCBL';
      linear = typeId === 'UMCBL' || typeId === 'CMCBL' || sumcbl || scmcbl;
      inverse = !linear;
      if (sumcbl || sdmcbl || scmcbl) {
        symbol = marketId;
      }
      const priceDecimals = this.safeInteger(market, 'pricePlace');
      const amountDecimals = this.safeInteger(market, 'volumePlace');
      const priceStep = this.safeString(market, 'priceEndStep');
      const amountStep = this.safeString(market, 'minTradeNum');
      const precisePrice = new _Precise.Precise(priceStep);
      precisePrice.decimals = Math.max(precisePrice.decimals, priceDecimals);
      precisePrice.reduce();
      const priceString = precisePrice.toString();
      pricePrecision = this.parseNumber(priceString);
      const preciseAmount = new _Precise.Precise(amountStep);
      preciseAmount.decimals = Math.max(preciseAmount.decimals, amountDecimals);
      preciseAmount.reduce();
      const amountString = preciseAmount.toString();
      amountPrecision = this.parseNumber(amountString);
    }
    const status = this.safeString(market, 'status');
    let active = undefined;
    if (status !== undefined) {
      active = status === 'online';
    }
    return {
      'id': marketId,
      'symbol': symbol,
      'base': base,
      'quote': quote,
      'settle': settle,
      'baseId': baseId,
      'quoteId': quoteId,
      'settleId': settleId,
      'type': type,
      'spot': spot,
      'margin': false,
      'swap': swap,
      'future': future,
      'option': false,
      'active': active,
      'contract': contract,
      'linear': linear,
      'inverse': inverse,
      'taker': this.safeNumber(market, 'takerFeeRate'),
      'maker': this.safeNumber(market, 'makerFeeRate'),
      'contractSize': 1,
      'expiry': expiry,
      'expiryDatetime': expiryDatetime,
      'strike': undefined,
      'optionType': undefined,
      'precision': {
        'amount': amountPrecision,
        'price': pricePrecision
      },
      'limits': {
        'leverage': {
          'min': undefined,
          'max': undefined
        },
        'amount': {
          'min': this.safeNumber(market, 'minTradeNum'),
          'max': undefined
        },
        'price': {
          'min': undefined,
          'max': undefined
        },
        'cost': {
          'min': undefined,
          'max': undefined
        }
      },
      'info': market
    };
  }
  async fetchMarketsByType(type, params = {}) {
    const method = this.getSupportedMapping(type, {
      'spot': 'publicSpotGetPublicProducts',
      'swap': 'publicMixGetMarketContracts'
    });
    const response = await this[method](params);
    //
    // spot
    //
    //    {
    //        code: '00000',
    //        msg: 'success',
    //        requestTime: 1645840064031,
    //        data: [
    //            {
    //                symbol: 'ALPHAUSDT_SPBL',
    //                symbolName: 'ALPHAUSDT',
    //                baseCoin: 'ALPHA',
    //                quoteCoin: 'USDT',
    //                minTradeAmount: '2',
    //                maxTradeAmount: '0',
    //                takerFeeRate: '0.001',
    //                makerFeeRate: '0.001',
    //                priceScale: '4',
    //                quantityScale: '4',
    //                status: 'online'
    //            }
    //        ]
    //    }
    //
    // swap
    //
    //    {
    //        code: '00000',
    //        msg: 'success',
    //        requestTime: 1645840821493,
    //        data: [
    //            {
    //                symbol: 'BTCUSDT_UMCBL',
    //                makerFeeRate: '0.0002',
    //                takerFeeRate: '0.0006',
    //                feeRateUpRatio: '0.005',
    //                openCostUpRatio: '0.01',
    //                quoteCoin: 'USDT',
    //                baseCoin: 'BTC',
    //                buyLimitPriceRatio: '0.01',
    //                sellLimitPriceRatio: '0.01',
    //                supportMarginCoins: [Array],
    //                minTradeNum: '0.001',
    //                priceEndStep: '5',
    //                volumePlace: '3',
    //                pricePlace: '1'
    //            }
    //        ]
    //    }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseMarkets(data);
  }
  async fetchCurrencies(params = {}) {
    /**
     * @method
     * @name bitget#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} an associative dictionary of currencies
     */
    const response = await this.publicSpotGetPublicCurrencies(params);
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645935668288,
    //       data: [
    //         {
    //           coinId: '230',
    //           coinName: 'KIN',
    //           transfer: 'false',
    //           chains: [
    //             {
    //               chain: 'SOL',
    //               needTag: 'false',
    //               withdrawable: 'true',
    //               rechargeable: 'true',
    //               withdrawFee: '187500',
    //               depositConfirm: '100',
    //               withdrawConfirm: '100',
    //               minDepositAmount: '12500',
    //               minWithdrawAmount: '250000',
    //               browserUrl: 'https://explorer.solana.com/tx/'
    //             }
    //           ]
    //         }
    //       ]
    //     }
    //
    const result = {};
    const data = this.safeValue(response, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const entry = data[i];
      const id = this.safeString(entry, 'coinId');
      const code = this.safeCurrencyCode(this.safeString(entry, 'coinName'));
      const chains = this.safeValue(entry, 'chains', []);
      const networks = {};
      for (let j = 0; j < chains.length; j++) {
        const chain = chains[j];
        const networkId = this.safeString(chain, 'chain');
        const network = this.safeCurrencyCode(networkId);
        const withdrawEnabled = this.safeString(chain, 'withdrawable');
        const depositEnabled = this.safeString(chain, 'rechargeable');
        networks[network] = {
          'info': chain,
          'id': networkId,
          'network': network,
          'limits': {
            'withdraw': {
              'min': this.safeNumber(chain, 'minWithdrawAmount'),
              'max': undefined
            },
            'deposit': {
              'min': this.safeNumber(chain, 'minDepositAmount'),
              'max': undefined
            }
          },
          'active': undefined,
          'withdraw': withdrawEnabled === 'true',
          'deposit': depositEnabled === 'true',
          'fee': this.safeNumber(chain, 'withdrawFee'),
          'precision': undefined
        };
      }
      result[code] = {
        'info': entry,
        'id': id,
        'code': code,
        'networks': networks,
        'type': undefined,
        'name': undefined,
        'active': undefined,
        'deposit': undefined,
        'withdraw': undefined,
        'fee': undefined,
        'precision': undefined,
        'limits': {
          'amount': {
            'min': undefined,
            'max': undefined
          },
          'withdraw': {
            'min': undefined,
            'max': undefined
          }
        }
      };
    }
    return result;
  }
  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchDeposits
     * @description fetch all deposits made to an account
     * @url https://bitgetlimited.github.io/apidoc/en/spot/#get-deposit-list
     * @param {string|undefined} code unified currency code
     * @param {int} since the earliest time in ms to fetch deposits for
     * @param {int|undefined} limit the maximum number of deposits structures to retrieve
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @param {string|undefined} params.pageNo pageNo default 1
     * @param {string|undefined} params.pageSize pageSize default 20. Max 100
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
     */
    await this.loadMarkets();
    if (code === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchDeposits() requires a `code` argument');
    }
    const currency = this.currency(code);
    if (since === undefined) {
      since = this.milliseconds() - 31556952000; // 1yr
    }

    const request = {
      'coin': currency['code'],
      'startTime': since,
      'endTime': this.milliseconds()
    };
    if (limit !== undefined) {
      request['pageSize'] = limit;
    }
    const response = await this.privateSpotGetWalletDepositList(this.extend(request, params));
    //
    //      {
    //          "code": "00000",
    //          "msg": "success",
    //          "requestTime": 0,
    //          "data": [{
    //              "id": "925607360021839872",
    //              "txId": "f73a4ac034da06b729f49676ca8801f406a093cf90c69b16e5a1cc9080df4ccb",
    //              "coin": "USDT",
    //              "type": "deposit",
    //              "amount": "19.44800000",
    //              "status": "success",
    //              "toAddress": "TRo4JMfZ1XYHUgnLsUMfDEf8MWzcWaf8uh",
    //              "fee": null,
    //              "chain": "TRC20",
    //              "confirm": null,
    //              "cTime": "1656407912259",
    //              "uTime": "1656407940148"
    //          }]
    //      }
    //
    const rawTransactions = this.safeValue(response, 'data', []);
    return this.parseTransactions(rawTransactions, currency, since, limit);
  }
  async withdraw(code, amount, address, tag = undefined, params = {}) {
    /**
     * @method
     * @name bitget#withdraw
     * @description make a withdrawal
     * @param {string} code unified currency code
     * @param {float} amount the amount to withdraw
     * @param {string} address the address to withdraw to
     * @param {string|undefined} tag
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @param {string} params.chain the chain to withdraw to
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
     */
    this.checkAddress(address);
    const chain = this.safeString(params, 'chain');
    if (chain === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' withdraw() requires a chain parameter');
    }
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'coin': currency['code'],
      'address': address,
      'chain': chain,
      'amount': amount
    };
    if (tag !== undefined) {
      request['tag'] = tag;
    }
    const response = await this.privateSpotPostWalletWithdrawal(this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "data": "888291686266343424"
    //     }
    //
    const result = {
      'id': this.safeString(response, 'data'),
      'info': response,
      'txid': undefined,
      'timestamp': undefined,
      'datetime': undefined,
      'network': undefined,
      'addressFrom': undefined,
      'address': undefined,
      'addressTo': undefined,
      'amount': undefined,
      'type': 'withdrawal',
      'currency': undefined,
      'status': undefined,
      'updated': undefined,
      'tagFrom': undefined,
      'tag': undefined,
      'tagTo': undefined,
      'comment': undefined,
      'fee': undefined
    };
    const withdrawOptions = this.safeValue(this.options, 'withdraw', {});
    const fillResponseFromRequest = this.safeValue(withdrawOptions, 'fillResponseFromRequest', true);
    if (fillResponseFromRequest) {
      result['currency'] = code;
      result['timestamp'] = this.milliseconds();
      result['datetime'] = this.iso8601(this.milliseconds());
      result['amount'] = amount;
      result['tag'] = tag;
      result['address'] = address;
      result['addressTo'] = address;
      result['network'] = chain;
    }
    return result;
  }
  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchWithdrawals
     * @description fetch all withdrawals made from an account
     * @url https://bitgetlimited.github.io/apidoc/en/spot/#get-withdraw-list
     * @param {string|undefined} code unified currency code
     * @param {int} since the earliest time in ms to fetch withdrawals for
     * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @param {string|undefined} params.pageNo pageNo default 1
     * @param {string|undefined} params.pageSize pageSize default 20. Max 100
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
     */
    await this.loadMarkets();
    if (code === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchWithdrawals() requires a `code` argument');
    }
    const currency = this.currency(code);
    if (since === undefined) {
      since = this.milliseconds() - 31556952000; // 1yr
    }

    const request = {
      'coin': currency['code'],
      'startTime': since,
      'endTime': this.milliseconds()
    };
    if (limit !== undefined) {
      request['pageSize'] = limit;
    }
    const response = await this.privateSpotGetWalletWithdrawalList(this.extend(request, params));
    //
    //      {
    //          "code": "00000",
    //          "msg": "success",
    //          "requestTime": 0,
    //          "data": [{
    //              "id": "925607360021839872",
    //              "txId": "f73a4ac034da06b729f49676ca8801f406a093cf90c69b16e5a1cc9080df4ccb",
    //              "coin": "USDT",
    //              "type": "deposit",
    //              "amount": "19.44800000",
    //              "status": "success",
    //              "toAddress": "TRo4JMfZ1XYHUgnLsUMfDEf8MWzcWaf8uh",
    //              "fee": null,
    //              "chain": "TRC20",
    //              "confirm": null,
    //              "cTime": "1656407912259",
    //              "uTime": "1656407940148"
    //          }]
    //      }
    //
    const rawTransactions = this.safeValue(response, 'data', []);
    return this.parseTransactions(rawTransactions, currency, since, limit);
  }
  parseTransaction(transaction, currency = undefined) {
    //
    //     {
    //         "id": "925607360021839872",
    //         "txId": "f73a4ac034da06b729f49676ca8801f406a093cf90c69b16e5a1cc9080df4ccb",
    //         "coin": "USDT",
    //         "type": "deposit",
    //         "amount": "19.44800000",
    //         "status": "success",
    //         "toAddress": "TRo4JMfZ1XYHUgnLsUMfDEf8MWzcWaf8uh",
    //         "fee": null,
    //         "chain": "TRC20",
    //         "confirm": null,
    //         "cTime": "1656407912259",
    //         "uTime": "1656407940148"
    //     }
    //
    const timestamp = this.safeInteger(transaction, 'cTime');
    const networkId = this.safeString(transaction, 'chain');
    const currencyId = this.safeString(transaction, 'coin');
    const status = this.safeString(transaction, 'status');
    return {
      'id': this.safeString(transaction, 'id'),
      'info': transaction,
      'txid': this.safeString(transaction, 'txId'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'network': networkId,
      'addressFrom': undefined,
      'address': this.safeString(transaction, 'toAddress'),
      'addressTo': this.safeString(transaction, 'toAddress'),
      'amount': this.safeNumber(transaction, 'amount'),
      'type': this.safeString(transaction, 'type'),
      'currency': this.safeCurrencyCode(currencyId),
      'status': this.parseTransactionStatus(status),
      'updated': this.safeNumber(transaction, 'uTime'),
      'tagFrom': undefined,
      'tag': undefined,
      'tagTo': undefined,
      'comment': undefined,
      'fee': undefined
    };
  }
  parseTransactionStatus(status) {
    const statuses = {
      'success': 'ok',
      'Pending': 'pending',
      'pending_review': 'pending',
      'pending_review_fail': 'failed',
      'reject': 'failed'
    };
    return this.safeString(statuses, status, status);
  }
  async fetchDepositAddress(code, params = {}) {
    /**
     * @method
     * @name bitget#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/en/latest/manual.html#address-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'coin': currency['code']
    };
    const response = await this.privateSpotGetWalletDepositAddress(this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "data": {
    //             "address": "1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv",
    //             "chain": "BTC-Bitcoin",
    //             "coin": "BTC",
    //             "tag": "",
    //             "url": "https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv"
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseDepositAddress(data, currency);
  }
  parseDepositAddress(depositAddress, currency = undefined) {
    //
    //    {
    //        "address": "1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv",
    //        "chain": "BTC-Bitcoin",
    //        "coin": "BTC",
    //        "tag": "",
    //        "url": "https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv"
    //    }
    //
    const currencyId = this.safeString(depositAddress, 'coin');
    const networkId = this.safeString(depositAddress, 'chain');
    return {
      'currency': this.safeCurrencyCode(currencyId, currency),
      'address': this.safeString(depositAddress, 'address'),
      'tag': this.safeString(depositAddress, 'tag'),
      'network': networkId,
      'info': depositAddress
    };
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const [marketType, query] = this.handleMarketTypeAndParams('fetchOrderBook', market, params);
    const method = this.getSupportedMapping(marketType, {
      'spot': 'publicSpotGetMarketDepth',
      'swap': 'publicMixGetMarketDepth'
    });
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, query));
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645854610294,
    //       data: {
    //         asks: [ [ '39102', '11.026' ] ],
    //         bids: [ [ '39100.5', '1.773' ] ],
    //         timestamp: '1645854610294'
    //       }
    //     }
    //
    const data = this.safeValue(response, 'data');
    const timestamp = this.safeInteger(data, 'timestamp');
    return this.parseOrderBook(data, symbol, timestamp);
  }
  parseTicker(ticker, market = undefined) {
    //
    // spot
    //
    //     {
    //         symbol: 'BTCUSDT',
    //         high24h: '40252.43',
    //         low24h: '38548.54',
    //         close: '39102.16',
    //         quoteVol: '67295596.1458',
    //         baseVol: '1723.4152',
    //         usdtVol: '67295596.14578',
    //         ts: '1645856170030',
    //         buyOne: '39096.16',
    //         sellOne: '39103.99'
    //     }
    //
    // swap
    //
    //     {
    //         symbol: 'BTCUSDT_UMCBL',
    //         last: '39086',
    //         bestAsk: '39087',
    //         bestBid: '39086',
    //         high24h: '40312',
    //         low24h: '38524.5',
    //         timestamp: '1645856591864',
    //         priceChangePercent: '-0.00861',
    //         baseVolume: '142251.757',
    //         quoteVolume: '5552388715.9215',
    //         usdtVolume: '5552388715.9215'
    //     }
    //
    let marketId = this.safeString(ticker, 'symbol');
    if (!(marketId in this.markets_by_id)) {
      marketId += '_SPBL';
    }
    const symbol = this.safeSymbol(marketId, market);
    const high = this.safeString(ticker, 'high24h');
    const low = this.safeString(ticker, 'low24h');
    const last = this.safeString(ticker, 'last');
    const mark = this.safeString(ticker, 'markPrice');
    const close = this.safeString2(ticker, 'close', 'last');
    const quoteVolume = this.safeString2(ticker, 'quoteVol', 'quoteVolume');
    const baseVolume = this.safeString2(ticker, 'baseVol', 'baseVolume');
    const timestamp = this.safeInteger2(ticker, 'ts', 'timestamp');
    const datetime = this.iso8601(timestamp);
    const bid = this.safeString2(ticker, 'buyOne', 'bestBid');
    const ask = this.safeString2(ticker, 'sellOne', 'bestAsk');
    const percentage = _Precise.Precise.stringMul(this.safeString(ticker, 'priceChangePercent'), '100');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': datetime,
      'high': high,
      'low': low,
      'bid': bid,
      'bidVolume': undefined,
      'ask': ask,
      'askVolume': undefined,
      'vwap': undefined,
      'open': undefined,
      'close': close,
      'last': last,
      'mark': mark,
      'previousClose': undefined,
      'change': undefined,
      'percentage': percentage,
      'average': undefined,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    }, market);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name bitget#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const [marketType, query] = this.handleMarketTypeAndParams('fetchTicker', market, params);
    const method = this.getSupportedMapping(marketType, {
      'spot': 'publicSpotGetMarketTicker',
      'swap': 'publicMixGetMarketTicker'
    });
    const response = await this[method](this.extend(request, query));
    //
    //     {
    //         code: '00000',
    //         msg: 'success',
    //         requestTime: '1645856138576',
    //         data: {
    //             symbol: 'BTCUSDT',
    //             high24h: '40252.43',
    //             low24h: '38548.54',
    //             close: '39104.65',
    //             quoteVol: '67221762.2184',
    //             baseVol: '1721.527',
    //             usdtVol: '67221762.218361',
    //             ts: '1645856138031',
    //             buyOne: '39102.55',
    //             sellOne: '39110.56'
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseTicker(data, market);
  }
  async fetchTickers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchTickers
     * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
     * @see https://bitgetlimited.github.io/apidoc/en/spot/#get-all-tickers
     * @see https://bitgetlimited.github.io/apidoc/en/mix/#get-all-symbol-ticker
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
     */
    await this.loadMarkets();
    let type = undefined;
    let market = undefined;
    if (symbols !== undefined) {
      const symbol = this.safeValue(symbols, 0);
      market = this.market(symbol);
    }
    [type, params] = this.handleMarketTypeAndParams('fetchTickers', market, params);
    const method = this.getSupportedMapping(type, {
      'spot': 'publicSpotGetMarketTickers',
      'swap': 'publicMixGetMarketTickers'
    });
    const request = {};
    if (method === 'publicMixGetMarketTickers') {
      const defaultSubType = this.safeString(this.options, 'defaultSubType');
      request['productType'] = defaultSubType === 'linear' ? 'UMCBL' : 'DMCBL';
    }
    const response = await this[method](this.extend(request, params));
    //
    // spot
    //
    //     {
    //         "code":"00000",
    //         "msg":"success",
    //         "requestTime":1653237548496,
    //         "data":[
    //             {
    //                 "symbol":"LINKUSDT",
    //                 "high24h":"7.2634",
    //                 "low24h":"7.1697",
    //                 "close":"7.2444",
    //                 "quoteVol":"330424.2366",
    //                 "baseVol":"46401.3116",
    //                 "usdtVol":"330424.2365573",
    //                 "ts":"1653237548026",
    //                 "buyOne":"7.2382",
    //                 "sellOne":"7.2513"
    //             },
    //         ]
    //     }
    //
    // swap
    //
    //     {
    //         "code":"00000",
    //         "msg":"success",
    //         "requestTime":1653237819762,
    //         "data":[
    //             {
    //                 "symbol":"BTCUSDT_UMCBL",
    //                 "last":"29891.5",
    //                 "bestAsk":"29891.5",
    //                 "bestBid":"29889.5",
    //                 "high24h":"29941.5",
    //                 "low24h":"29737.5",
    //                 "timestamp":"1653237819761",
    //                 "priceChangePercent":"0.00163",
    //                 "baseVolume":"127937.56",
    //                 "quoteVolume":"3806276573.6285",
    //                 "usdtVolume":"3806276573.6285"
    //             },
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseTickers(data, symbols);
  }
  parseTrade(trade, market = undefined) {
    //
    // spot
    //
    //     {
    //         symbol: 'BTCUSDT_SPBL',
    //         tradeId: '881371996363608065',
    //         side: 'sell',
    //         fillPrice: '39123.05',
    //         fillQuantity: '0.0363',
    //         fillTime: '1645861379709'
    //     }
    //
    // swap
    //
    //     {
    //         tradeId: '881373204067311617',
    //         price: '39119.0',
    //         size: '0.001',
    //         side: 'buy',
    //         timestamp: '1645861667648',
    //         symbol: 'BTCUSDT_UMCBL'
    //     }
    //
    // private
    //
    //     {
    //         accountId: '6394957606',
    //         symbol: 'LTCUSDT_SPBL',
    //         orderId: '864752115272552448',
    //         fillId: '864752115685969921',
    //         orderType: 'limit',
    //         side: 'buy',
    //         fillPrice: '127.92000000',
    //         fillQuantity: '0.10000000',
    //         fillTotalAmount: '12.79200000',
    //         feeCcy: 'LTC',
    //         fees: '0.00000000',
    //         cTime: '1641898891373'
    //     }
    //
    //     {
    //         tradeId: '881640729552281602',
    //         symbol: 'BTCUSDT_UMCBL',
    //         orderId: '881640729145409536',
    //         price: '38429.50',
    //         sizeQty: '0.001',
    //         fee: '0',
    //         side: 'open_long',
    //         fillAmount: '38.4295',
    //         profit: '0',
    //         cTime: '1645925450694'
    //     }
    //
    const marketId = this.safeString(trade, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const id = this.safeStringN(trade, ['tradeId', 'fillId', 'orderId'], '');
    const order = this.safeString(trade, 'orderId');
    const rawSide = this.safeString(trade, 'side', '');
    let side = undefined;
    if (rawSide.indexOf('open_long') !== -1 || rawSide.indexOf('close_short') !== -1 || rawSide.indexOf('buy_single') !== -1 || rawSide.indexOf('buy') !== -1) {
      side = 'buy';
    } else if (rawSide.indexOf('open_short') !== -1 || rawSide.indexOf('close_long') !== -1 || rawSide.indexOf('sell') !== -1) {
      side = 'sell';
    }
    let isClose = undefined;
    if (rawSide.indexOf('close_long') !== -1 || rawSide.indexOf('close_short') !== -1) {
      isClose = true;
    }
    const price = this.safeString2(trade, 'priceAvg', 'price');
    let amount = this.safeString2(trade, 'fillQuantity', 'size');
    amount = this.safeString(trade, 'sizeQty', amount);
    let timestamp = this.safeInteger2(trade, 'fillTime', 'timestamp');
    timestamp = this.safeInteger(trade, 'cTime', timestamp);
    let fee = undefined;
    let feeAmount = this.safeString2(trade, 'fees', 'fee');
    const type = this.safeString(trade, 'orderType');
    if (feeAmount !== undefined) {
      feeAmount = _Precise.Precise.stringNeg(feeAmount);
      const currencyCode = this.safeCurrencyCode(this.safeString(trade, 'feeCcy'));
      fee = {
        'code': currencyCode,
        'currency': currencyCode,
        'cost': feeAmount
      };
    }
    const datetime = this.iso8601(timestamp);
    return this.safeTrade({
      'info': trade,
      'id': id,
      'order': order,
      'symbol': symbol,
      'side': side,
      'type': type,
      'takerOrMaker': undefined,
      'price': price,
      'amount': amount,
      'cost': this.safeString(fee, 'cost'),
      'fee': fee,
      'timestamp': timestamp,
      'datetime': datetime,
      'isClose': isClose
    }, market);
  }
  async fetchTrades(symbol, limit = undefined, since = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const [marketType, query] = this.handleMarketTypeAndParams('fetchTrades', market, params);
    const method = this.getSupportedMapping(marketType, {
      'spot': 'publicSpotGetMarketFills',
      'swap': 'publicMixGetMarketFills'
    });
    const response = await this[method](this.extend(request, query));
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: '1645861382032',
    //       data: [
    //         {
    //           symbol: 'BTCUSDT_SPBL',
    //           tradeId: '881371996363608065',
    //           side: 'sell',
    //           fillPrice: '39123.05',
    //           fillQuantity: '0.0363',
    //           fillTime: '1645861379709'
    //         }
    //       ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseTrades(data, market, since, limit);
  }
  async fetchTradingFee(symbol, params = {}) {
    /**
     * @method
     * @name bitget#fetchTradingFee
     * @description fetch the trading fees for a market
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [fee structure]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.publicSpotGetPublicProduct(this.extend(request, params));
    //
    //     {
    //         code: '00000',
    //         msg: 'success',
    //         requestTime: '1646255374000',
    //         data: {
    //           symbol: 'ethusdt_SPBL',
    //           symbolName: null,
    //           baseCoin: 'ETH',
    //           quoteCoin: 'USDT',
    //           minTradeAmount: '0',
    //           maxTradeAmount: '0',
    //           takerFeeRate: '0.002',
    //           makerFeeRate: '0.002',
    //           priceScale: '2',
    //           quantityScale: '4',
    //           status: 'online'
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseTradingFee(data, market);
  }
  async fetchTradingFees(params = {}) {
    /**
     * @method
     * @name bitget#fetchTradingFees
     * @description fetch the trading fees for multiple markets
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const response = await this.publicSpotGetPublicProducts(params);
    //
    //     {
    //         code: '00000',
    //         msg: 'success',
    //         requestTime: '1646255662391',
    //         data: [
    //           {
    //             symbol: 'ALPHAUSDT_SPBL',
    //             symbolName: 'ALPHAUSDT',
    //             baseCoin: 'ALPHA',
    //             quoteCoin: 'USDT',
    //             minTradeAmount: '2',
    //             maxTradeAmount: '0',
    //             takerFeeRate: '0.001',
    //             makerFeeRate: '0.001',
    //             priceScale: '4',
    //             quantityScale: '4',
    //             status: 'online'
    //           },
    //           ...
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const result = {};
    for (let i = 0; i < data.length; i++) {
      const feeInfo = data[i];
      const fee = this.parseTradingFee(feeInfo);
      const symbol = fee['symbol'];
      result[symbol] = fee;
    }
    return result;
  }
  parseTradingFee(data, market = undefined) {
    const marketId = this.safeString(data, 'symbol');
    return {
      'info': data,
      'symbol': this.safeSymbol(marketId, market),
      'maker': this.safeNumber(data, 'makerFeeRate'),
      'taker': this.safeNumber(data, 'takerFeeRate')
    };
  }
  parseOHLCV(ohlcv, market = undefined, timeframe = '1m') {
    //
    // spot
    //
    //     {
    //         open: '57882.31',
    //         high: '58967.24',
    //         low: '57509.56',
    //         close: '57598.96',
    //         quoteVol: '439160536.605821',
    //         baseVol: '7531.2927',
    //         usdtVol: '439160536.605821',
    //         ts: '1637337600000'
    //     }
    //
    // swap
    //
    //     [
    //         "1645911960000",
    //         "39406",
    //         "39407",
    //         "39374.5",
    //         "39379",
    //         "35.526",
    //         "1399132.341"
    //     ]
    //
    return [this.safeInteger2(ohlcv, 0, 'ts'), this.safeNumber2(ohlcv, 1, 'open'), this.safeNumber2(ohlcv, 2, 'high'), this.safeNumber2(ohlcv, 3, 'low'), this.safeNumber2(ohlcv, 4, 'close'), this.safeNumber2(ohlcv, 5, 'baseVol')];
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @param {int|undefined} params.until timestamp in ms of the latest candle to fetch
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const [marketType, query] = this.handleMarketTypeAndParams('fetchOHLCV', market, params);
    const method = this.getSupportedMapping(marketType, {
      'spot': 'publicSpotGetMarketCandles',
      'swap': 'publicMixGetMarketCandles'
    });
    const until = this.safeInteger2(params, 'until', 'till');
    params = this.omit(params, ['until', 'till']);
    if (limit === undefined) {
      limit = 1000;
    }
    if (market['type'] === 'spot') {
      request['period'] = this.options['timeframes']['spot'][timeframe];
      request['limit'] = limit;
      if (since !== undefined) {
        request['after'] = since;
        if (until === undefined) {
          const millisecondsPerTimeframe = this.options['timeframes']['swap'][timeframe] * 1000;
          request['before'] = this.sum(since, millisecondsPerTimeframe * limit);
        }
      }
      if (until !== undefined) {
        request['before'] = until;
      }
    } else if (market['type'] === 'swap') {
      request['granularity'] = this.options['timeframes']['swap'][timeframe];
      request['limit'] = limit + 1;
      const duration = this.parseTimeframe(timeframe);
      const now = this.milliseconds();
      if (since === undefined) {
        request['startTime'] = now - (limit - 1) * (duration * 1000);
        request['endTime'] = now;
      } else {
        request['startTime'] = this.sum(since, -1 * duration * 1000);
        if (until !== undefined) {
          request['endTime'] = until;
        } else {
          request['endTime'] = this.sum(since, limit * duration * 1000);
        }
      }
    }
    const response = await this[method](this.extend(request, query));
    //  [ ["1645911960000","39406","39407","39374.5","39379","35.526","1399132.341"] ]
    const data = this.safeValue(response, 'data', response);
    return this.parseOHLCVs(data, market, timeframe, since, limit);
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name bitget#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const [marketType, query] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
    const method = this.getSupportedMapping(marketType, {
      'spot': 'privateSpotGetAccountAssets',
      'swap': 'privateMixGetAccountAccounts'
    });
    if (marketType === 'swap') {
      const subTypes = this.getSubTypes();
      let promises = [];
      for (let i = 0; i < subTypes.length; i++) {
        const subType = subTypes[i];
        const request = {
          'productType': subType
        };
        promises.push(this[method](this.extend(request, query)));
      }
      promises = await Promise.all(promises);
      let result = {};
      for (let i = 0; i < promises.length; i++) {
        const response = promises[i];
        const data = this.safeValue(response, 'data');
        const parsedBalance = this.parseBalance(data);
        result = this.deepExtend(result, parsedBalance);
      }
      return result;
    } else {
      const request = {};
      const response = await this[method](this.extend(request, query));
      // spot
      //     {
      //       code: '00000',
      //       msg: 'success',
      //       requestTime: 1645928868827,
      //       data: [
      //         {
      //           coinId: 1,
      //           coinName: 'BTC',
      //           available: '0.00070000',
      //           frozen: '0.00000000',
      //           lock: '0.00000000',
      //           uTime: '1645921706000'
      //         }
      //       ]
      //     }
      //
      // swap
      //     {
      //       code: '00000',
      //       msg: 'success',
      //       requestTime: 1645928929251,
      //       data: [
      //         {
      //           marginCoin: 'USDT',
      //           locked: '0',
      //           available: '8.078525',
      //           crossMaxAvailable: '8.078525',
      //           fixedMaxAvailable: '8.078525',
      //           maxTransferOut: '8.078525',
      //           equity: '10.02508',
      //           usdtEquity: '10.02508',
      //           btcEquity: '0.00026057027'
      //         }
      //       ]
      //     }
      const data = this.safeValue(response, 'data');
      return this.parseBalance(data);
    }
  }
  parseBalance(balance) {
    const result = {
      'info': {}
    };
    //
    //     {
    //       coinId: '1',
    //       coinName: 'BTC',
    //       available: '0.00099900',
    //       frozen: '0.00000000',
    //       lock: '0.00000000',
    //       uTime: '1661595535000'
    //     }
    //
    // {
    //   'marginCoin': 'USDT',
    //   'locked': '0',
    //   'available': '25',
    //   'crossMaxAvailable': '25',
    //   'fixedMaxAvailable': '25',
    //   'maxTransferOut': '25',
    //   'equity': '25',
    //   'usdtEquity': '25',
    //   'btcEquity': '0.00152089221',
    //   'unrealizedPL': None
    // }
    for (let i = 0; i < balance.length; i++) {
      const entry = balance[i];
      const currencyId = this.safeString2(entry, 'coinId', 'marginCoin');
      const code = this.safeCurrencyCode(currencyId);
      const info = this.safeValue(entry, 'info', {});
      const infoForCode = this.safeValue(info, code, {});
      result['info'][code] = this.deepExtend(infoForCode, entry);
      const account = this.account();
      const free = this.safeString2(entry, 'crossMaxAvailable', 'available', '0');
      const total = this.safeString2(entry, 'equity', 'available', '0');
      const used = _Precise.Precise.stringSub(total, free);
      account['used'] = used;
      account['free'] = free;
      account['total'] = total;
      result[code] = account;
    }
    return this.safeBalance(result);
  }
  parseOrderStatus(status) {
    const statuses = {
      'new': 'open',
      'init': 'open',
      'partially_filled': 'open',
      'full_fill': 'closed',
      'filled': 'closed',
      'not_trigger': 'untriggered'
    };
    return this.safeString(statuses, status, status);
  }
  parseStopTrigger(trigger) {
    const triggers = {
      'market_price': 'mark',
      'fill_price': 'last',
      'index_price': 'index'
    };
    return this.safeString(triggers, trigger, trigger);
  }
  parseOrder(order, market = undefined) {
    //
    // spot
    //     {
    //       accountId: '6394957606',
    //       symbol: 'BTCUSDT_SPBL',
    //       orderId: '881623995442958336',
    //       clientOrderId: '135335e9-b054-4e43-b00a-499f11d3a5cc',
    //       price: '39000.000000000000',
    //       quantity: '0.000700000000',
    //       orderType: 'limit',
    //       side: 'buy',
    //       status: 'new',
    //       fillPrice: '0.000000000000',
    //       fillQuantity: '0.000000000000',
    //       fillTotalAmount: '0.000000000000',
    //       cTime: '1645921460972'
    //     }
    //
    // swap
    //     {
    //       symbol: 'BTCUSDT_UMCBL',
    //       size: 0.001,
    //       orderId: '881640729145409536',
    //       clientOid: '881640729204129792',
    //       filledQty: 0.001,
    //       fee: 0,
    //       price: null,
    //       priceAvg: 38429.5,
    //       state: 'filled',
    //       side: 'open_long',
    //       timeInForce: 'normal',
    //       totalProfits: 0,
    //       posSide: 'long',
    //       marginCoin: 'USDT',
    //       filledAmount: 38.4295,
    //       orderType: 'market',
    //       cTime: '1645925450611',
    //       uTime: '1645925450746'
    //     }
    //
    // stop
    //
    //     {
    //         'orderId': '989690453925896192',
    //       'symbol': 'AAVEUSDT_UMCBL',
    //       'marginCoin': 'USDT',
    //       'size': '0.6',
    //       'executePrice': '0',
    //       'triggerPrice': '54.781',
    //       'status': 'not_trigger',
    //       'orderType': 'market',
    //       'planType': 'normal_plan',
    //       'side': 'open_short',
    //       'triggerType': 'market_price',
    //       'presetTakeProfitPrice': '0',
    //       'presetTakeLossPrice': '0',
    //       'rangeRate': '',
    //       'cTime': '1671686512452'
    //     }
    //
    const marketId = this.safeString(order, 'symbol');
    const instType = this.getSubTypeFromMarketId(marketId);
    market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const id = this.safeString(order, 'orderId');
    const price = this.safeString2(order, 'price', 'executePrice');
    const amount = this.safeString2(order, 'quantity', 'size');
    const filled = this.safeString2(order, 'fillQuantity', 'filledQty');
    const cost = this.safeString2(order, 'fillTotalAmount', 'filledAmount');
    const average = this.safeString(order, 'fillPrice');
    let type = this.safeString(order, 'orderType');
    const timestamp = this.safeInteger(order, 'cTime');
    const rawStopTrigger = this.safeString(order, 'triggerType');
    const trigger = this.parseStopTrigger(rawStopTrigger);
    let side = this.safeString2(order, 'side', 'posSide');
    let reduce = this.safeValue(order, 'reduceOnly', false);
    let close = reduce;
    const planType = this.safeString(order, 'planType');
    if (planType === 'sl' || planType === 'pos_loss' || planType === 'loss_plan' || planType === 'psl') {
      reduce = true;
      close = true;
    }
    if (side && side.split('_')[0] === 'close') {
      reduce = true;
      close = true;
    }
    if (side === 'open_long' || side === 'close_short' || side === 'buy_single') {
      side = 'buy';
    } else if (side === 'close_long' || side === 'open_short' || side === 'sell_single') {
      side = 'sell';
    }
    if (rawStopTrigger) {
      if (type === 'market') {
        type = 'stop';
      } else {
        type = 'stopLimit';
      }
    } else {
      if (type === 'market') {
        type = 'market';
      } else {
        type = 'limit';
      }
    }
    const clientOrderId = this.safeString2(order, 'clientOrderId', 'clientOid');
    const fee = undefined;
    const rawStatus = this.safeString2(order, 'status', 'state');
    const status = this.parseOrderStatus(rawStatus);
    const lastTradeTimestamp = this.safeInteger(order, 'uTime');
    const timeInForce = this.safeString(order, 'timeInForce');
    const postOnly = timeInForce === 'postOnly';
    const stopPrice = this.safeNumber(order, 'triggerPrice');
    return this.safeOrder({
      'info': order,
      'id': id,
      'instType': instType,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': 'GTC',
      'postOnly': postOnly,
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'average': average,
      'cost': cost,
      'amount': amount,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': fee,
      'trades': undefined,
      'reduce': reduce,
      'close': close,
      'trigger': trigger // TEALSTREET
    }, market);
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name bitget#createOrder
     * @description create a trade order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    // {
    //     'stopPrice': 0.3866,
    //   'timeInForce': 'GTC',
    //   'reduceOnly': None,
    //   'trigger': 'Last',
    //   'closeOnTrigger': True,
    //   'basePrice': 0.3894
    // }
    await this.loadMarkets();
    const market = this.market(symbol);
    const [marketType, query] = this.handleMarketTypeAndParams('createOrder', market, params);
    const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
    const positionMode = this.safeValue(params, 'positionMode', 'hedged');
    let isTriggerOrder = triggerPrice !== undefined;
    let stopLossPrice = undefined;
    let isStopLossOrder = undefined;
    let takeProfitPrice = undefined;
    let isTakeProfitOrder = undefined;
    const reduceOnly = this.safeValue2(params, 'close', 'reduceOnly', false);
    const basePrice = this.safeValue(params, 'basePrice');
    if (triggerPrice !== undefined && basePrice !== undefined) {
      // triggerOrder is NOT stopOrder
      isTriggerOrder = !reduceOnly;
      type = 'market';
      if (!isTriggerOrder) {
        if (side === 'buy') {
          if (triggerPrice > basePrice) {
            isStopLossOrder = true;
            stopLossPrice = triggerPrice;
          } else {
            isTakeProfitOrder = true;
            takeProfitPrice = triggerPrice;
          }
        } else {
          if (triggerPrice < basePrice) {
            isStopLossOrder = true;
            stopLossPrice = triggerPrice;
          } else {
            isTakeProfitOrder = true;
            takeProfitPrice = triggerPrice;
          }
        }
      }
    } else {
      stopLossPrice = this.safeValue(params, 'stopLossPrice');
      isStopLossOrder = stopLossPrice !== undefined;
      takeProfitPrice = this.safeValue(params, 'takeProfitPrice');
      isTakeProfitOrder = takeProfitPrice !== undefined;
    }
    const request = {
      'symbol': market['id'],
      'orderType': type
    };
    const isMarketOrder = type === 'market';
    const isStopOrder = isStopLossOrder || isTakeProfitOrder;
    if (this.sum(isTriggerOrder, isStopLossOrder, isTakeProfitOrder) > 1) {
      throw new _errors.ExchangeError(this.id + ' createOrder() params can only contain one of triggerPrice, stopLossPrice, takeProfitPrice');
    }
    if (type === 'limit' && triggerPrice === undefined) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    let clientOrderId = this.safeString2(params, 'client_oid', 'clientOrderId');
    if (clientOrderId === undefined) {
      const broker = this.safeValue(this.options, 'brokerId');
      if (broker !== undefined) {
        const brokerId = this.safeString(broker, market['type']);
        if (brokerId !== undefined) {
          clientOrderId = brokerId + this.uuid22();
        }
      }
    }
    let method = this.getSupportedMapping(marketType, {
      'spot': 'privateSpotPostTradeOrders',
      'swap': 'privateMixPostOrderPlaceOrder'
    });
    const exchangeSpecificParam = this.safeString2(params, 'force', 'timeInForceValue');
    const postOnly = this.isPostOnly(isMarketOrder, exchangeSpecificParam === 'post_only', params);
    if (marketType === 'spot') {
      if (isStopOrder) {
        throw new _errors.InvalidOrder(this.id + ' createOrder() does not support stop orders on spot markets, only swap markets');
      }
      const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);
      if (createMarketBuyOrderRequiresPrice && isMarketOrder && side === 'buy') {
        if (price === undefined) {
          throw new _errors.InvalidOrder(this.id + ' createOrder() requires price argument for market buy orders on spot markets to calculate the total amount to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option to false and pass in the cost to spend into the amount parameter');
        } else {
          const amountString = this.numberToString(amount);
          const priceString = this.numberToString(price);
          const cost = this.parseNumber(_Precise.Precise.stringMul(amountString, priceString));
          request['quantity'] = this.priceToPrecision(symbol, cost);
        }
      } else {
        request['quantity'] = this.amountToPrecision(symbol, amount);
      }
      request['clientOrderId'] = clientOrderId;
      request['side'] = side;
      if (postOnly) {
        request['force'] = 'post_only';
      } else {
        request['force'] = 'gtc';
      }
    } else {
      request['clientOid'] = clientOrderId;
      let isCloseOrder = true;
      if (amount && amount > 0) {
        request['size'] = this.amountToPrecision(symbol, amount);
        isCloseOrder = false;
      }
      if (postOnly) {
        request['timeInForceValue'] = 'post_only';
      }
      if (isTriggerOrder || isStopOrder) {
        let triggerType = this.safeString2(params, 'triggerType', 'trigger', 'fill_price');
        if (triggerType === 'Mark' || triggerType === 'market_price') {
          triggerType = 'market_price';
        } else {
          triggerType = 'fill_price';
        }
        request['triggerType'] = triggerType;
      }
      if (isTriggerOrder) {
        request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
        if (price) {
          request['executePrice'] = this.priceToPrecision(symbol, price);
        }
        method = 'privateMixPostPlanPlacePlan';
      }
      if (isStopOrder) {
        if (!isMarketOrder) {
          throw new _errors.ExchangeError(this.id + ' createOrder() bitget stopLoss or takeProfit orders must be market orders');
        }
        if (isStopLossOrder) {
          request['triggerPrice'] = this.priceToPrecision(symbol, stopLossPrice);
          request['planType'] = 'loss_plan';
        } else if (isTakeProfitOrder) {
          request['triggerPrice'] = this.priceToPrecision(symbol, takeProfitPrice);
          request['planType'] = 'profit_plan';
        }
        request['holdSide'] = side === 'buy' ? 'short' : 'long';
        if (isCloseOrder) {
          // if position is in hedged mode this is correct
          request['holdSide'] = side === 'buy' ? 'short' : 'long';
          // otherwise, this is correct
          if (positionMode === 'oneway') {
            request['holdSide'] = side === 'buy' ? 'sell' : 'buy';
          }
          method = 'privateMixPostOrderPlaceTpslOrder';
          request['symbol'] = market['info']['symbolName'].toLowerCase();
          request['size'] = '';
          request['productType'] = market['info']['quoteCoin'].toLowerCase() + '-futures';
          if (isStopLossOrder) {
            request['planType'] = 'pos_loss';
          } else if (isTakeProfitOrder) {
            request['planType'] = 'pos_profit';
          }
        } else {
          method = 'privateMixPostPlanPlaceTPSL';
        }
      } else {
        if (positionMode === 'oneway') {
          request['side'] = side === 'buy' ? 'buy_single' : 'sell_single';
          if (reduceOnly) {
            request['reduceOnly'] = true;
          }
        } else {
          if (reduceOnly) {
            request['side'] = side === 'buy' ? 'close_short' : 'close_long';
          } else {
            request['side'] = side === 'buy' ? 'open_long' : 'open_short';
          }
        }
        if (reduceOnly) {
          request['cancelOrder'] = true;
        }
      }
      request['marginCoin'] = market['settleId'];
    }
    const omitted = this.omit(query, ['stopPrice', 'triggerType', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'positionMode', 'marginMode', 'reduceOnly', 'close']);
    const response = await this[method](this.extend(request, omitted));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 1645932209602,
    //         "data": {
    //             "orderId": "881669078313766912",
    //             "clientOrderId": "iauIBf#a45b595f96474d888d0ada"
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseOrder(data, market);
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitget#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument for spot orders');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    // const orderType = this.safeString (params, 'type');
    params = this.omit(params, ['type']);
    const [marketType, query] = this.handleMarketTypeAndParams('cancelOrder', market, params);
    let method = this.getSupportedMapping(marketType, {
      'spot': 'privateSpotPostTradeCancelOrder',
      'swap': 'privateMixPostOrderCancelOrder'
    });
    const stop = this.safeValue(params, 'stop');
    let planType = this.safeString(params, 'planType');
    const idComponents = id.split(':');
    const formattedId = idComponents[0];
    if (!planType && idComponents.length > 1) {
      planType = idComponents[1];
    }
    const request = {
      'symbol': market['id'],
      'orderId': formattedId
    };
    if (stop || planType) {
      if (planType === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a planType parameter for stop orders, either normal_plan, profit_plan or loss_plan');
      }
      request['planType'] = planType;
      method = 'privateMixPostPlanCancelPlan';
      params = this.omit(params, ['stop', 'planType']);
    }
    if (marketType === 'swap') {
      request['marginCoin'] = market['settleId'];
    }
    const response = await this[method](this.extend(request, query));
    return this.parseOrder(response, market);
  }
  async cancelOrders(ids, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitget#cancelOrders
     * @description cancel multiple orders
     * @param {[string]} ids order ids
     * @param {string} symbol unified market symbol, default is undefined
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const type = this.safeString(params, 'type', market['type']);
    if (type === undefined) {
      throw new _errors.ArgumentsRequired(this.id + " cancelOrders() requires a type parameter (one of 'spot', 'swap').");
    }
    params = this.omit(params, 'type');
    const request = {};
    let method = undefined;
    if (type === 'spot') {
      method = 'apiPostOrderOrdersBatchcancel';
      request['method'] = 'batchcancel';
      const jsonIds = this.json(ids);
      const parts = jsonIds.split('"');
      request['order_ids'] = parts.join('');
    } else if (type === 'swap') {
      method = 'privateMixPostOrderCancelBatchOrders';
      request['symbol'] = market['id'];
      request['marginCoin'] = market['quote'];
      request['orderIds'] = ids;
    }
    const response = await this[method](this.extend(request, params));
    //
    //     spot
    //
    //     {
    //         "status": "ok",
    //         "data": {
    //             "success": [
    //                 "673451224205135872",
    //             ],
    //             "failed": [
    //                 {
    //                 "err-msg": "invalid record",
    //                 "order-id": "673451224205135873",
    //                 "err-code": "base record invalid"
    //                 }
    //             ]
    //         }
    //     }
    //
    //     swap
    //
    //     {
    //         "result":true,
    //         "symbol":"cmt_btcusdt",
    //         "order_ids":[
    //             "258414711",
    //             "478585558"
    //         ],
    //         "fail_infos":[
    //             {
    //                 "order_id":"258414711",
    //                 "err_code":"401",
    //                 "err_msg":""
    //             }
    //         ]
    //     }
    //
    return response;
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitget#cancelAllOrders
     * @description cancel all open orders
     * @see https://bitgetlimited.github.io/apidoc/en/mix/#cancel-all-order
     * @see https://bitgetlimited.github.io/apidoc/en/mix/#cancel-all-trigger-order-tpsl
     * @param {string|undefined} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @param {string} params.code marginCoin unified currency code
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    await this.loadMarkets();
    const market = undefined;
    const defaultSubType = this.safeString(this.options, 'defaultSubType');
    if (symbol !== undefined) {
      return await this.cancelAllOrdersForSymbol(symbol, params);
    }
    const productType = defaultSubType === 'linear' ? 'UMCBL' : 'DMCBL';
    const [marketType, query] = this.handleMarketTypeAndParams('cancelAllOrders', market, params);
    if (marketType === 'spot') {
      throw new _errors.NotSupported(this.id + ' cancelAllOrders () does not support spot markets');
    }
    const request = {
      'productType': productType
    };
    let method = undefined;
    const stop = this.safeValue(params, 'stop');
    const planType = this.safeString(params, 'planType');
    if (stop !== undefined || planType !== undefined) {
      if (planType === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a planType parameter for stop orders, either normal_plan, profit_plan, loss_plan, pos_profit, pos_loss, moving_plan or track_plan');
      }
      method = 'privateMixPostPlanCancelAllPlan';
      params = this.omit(params, ['stop']);
    } else {
      const code = this.safeString2(params, 'code', 'marginCoin');
      if (code === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' cancelAllOrders () requires a code argument [marginCoin] in the params');
      }
      const currency = this.currency(code);
      request['marginCoin'] = this.safeCurrencyCode(code, currency);
      method = 'privateMixPostOrderCancelAllOrders';
    }
    params = this.omit(query, ['code', 'marginCoin']);
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 1663312535998,
    //         "data": {
    //             "result": true,
    //             "order_ids": ["954564352813969409"],
    //             "fail_infos": [
    //                 {
    //                     "order_id": "",
    //                     "err_code": "",
    //                     "err_msg": ""
    //                 }
    //             ]
    //         }
    //     }
    //
    return response;
  }
  async cancelAllOrdersForSymbol(symbol, params = {}) {
    const market = this.market(symbol);
    const ordersForSymbol = await this.fetchOpenOrders(symbol);
    const orderIds = this.pluck(ordersForSymbol, 'id');
    const request = {
      'symbol': market['id'],
      'orderIds': orderIds,
      'marginCoin': market['settleId']
    };
    return await this.privateMixPostOrderCancelBatchOrders(this.extend(request, params));
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const [marketType, query] = this.handleMarketTypeAndParams('fetchOrder', market, params);
    const method = this.getSupportedMapping(marketType, {
      'spot': 'privateSpotPostTradeOrderInfo',
      'swap': 'privateMixGetOrderDetail'
    });
    const request = {
      'symbol': market['id'],
      'orderId': id
    };
    const response = await this[method](this.extend(request, query));
    // spot
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: '1645926849436',
    //       data: [
    //         {
    //           accountId: '6394957606',
    //           symbol: 'BTCUSDT_SPBL',
    //           orderId: '881626139738935296',
    //           clientOrderId: '525890c8-767e-4cd6-8585-38160ed7bb5e',
    //           price: '38000.000000000000',
    //           quantity: '0.000700000000',
    //           orderType: 'limit',
    //           side: 'buy',
    //           status: 'new',
    //           fillPrice: '0.000000000000',
    //           fillQuantity: '0.000000000000',
    //           fillTotalAmount: '0.000000000000',
    //           cTime: '1645921972212'
    //         }
    //       ]
    //     }
    //
    // swap
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: '1645926587877',
    //       data: {
    //         symbol: 'BTCUSDT_UMCBL',
    //         size: '0.001',
    //         orderId: '881640729145409536',
    //         clientOid: '881640729204129792',
    //         filledQty: '0.001',
    //         fee: '0E-8',
    //         price: null,
    //         priceAvg: '38429.50',
    //         state: 'filled',
    //         side: 'open_long',
    //         timeInForce: 'normal',
    //         totalProfits: '0E-8',
    //         posSide: 'long',
    //         marginCoin: 'USDT',
    //         filledAmount: '38.4295',
    //         orderType: 'market',
    //         cTime: '1645925450611',
    //         uTime: '1645925450746'
    //       }
    //     }
    //
    const data = this.safeValue(response, 'data');
    const first = this.safeValue(data, 0, data);
    return this.parseOrder(first, market);
  }
  async fetchOpenOrders2(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchOpenOrders
     * @description fetch all unfilled currently open orders
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch open orders for
     * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const [marketType, query] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
    const request = {
      'symbol': market['id']
    };
    let method = this.getSupportedMapping(marketType, {
      'spot': 'privateSpotPostTradeOpenOrders',
      'swap': 'privateMixGetOrderCurrent'
    });
    const stop = this.safeValue(params, 'stop');
    if (stop) {
      method = 'privateMixGetPlanCurrentPlan';
      params = this.omit(params, 'stop');
    }
    const response = await this[method](this.extend(request, query));
    //
    //  spot
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645921640193,
    //       data: [
    //         {
    //           accountId: '6394957606',
    //           symbol: 'BTCUSDT_SPBL',
    //           orderId: '881623995442958336',
    //           clientOrderId: '135335e9-b054-4e43-b00a-499f11d3a5cc',
    //           price: '39000.000000000000',
    //           quantity: '0.000700000000',
    //           orderType: 'limit',
    //           side: 'buy',
    //           status: 'new',
    //           fillPrice: '0.000000000000',
    //           fillQuantity: '0.000000000000',
    //           fillTotalAmount: '0.000000000000',
    //           cTime: '1645921460972'
    //         }
    //       ]
    //     }
    //
    // swap
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645922324630,
    //       data: [
    //         {
    //           symbol: 'BTCUSDT_UMCBL',
    //           size: 0.001,
    //           orderId: '881627074081226752',
    //           clientOid: '881627074160918528',
    //           filledQty: 0,
    //           fee: 0,
    //           price: 38000,
    //           state: 'new',
    //           side: 'open_long',
    //           timeInForce: 'normal',
    //           totalProfits: 0,
    //           posSide: 'long',
    //           marginCoin: 'USDT',
    //           filledAmount: 0,
    //           orderType: 'limit',
    //           cTime: '1645922194995',
    //           uTime: '1645922194995'
    //         }
    //       ]
    //     }
    //
    // stop
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 1652745815697,
    //         "data": [
    //             {
    //                 "orderId": "910246821491617792",
    //                 "symbol": "BTCUSDT_UMCBL",
    //                 "marginCoin": "USDT",
    //                 "size": "16",
    //                 "executePrice": "20000",
    //                 "triggerPrice": "24000",
    //                 "status": "not_trigger",
    //                 "orderType": "limit",
    //                 "planType": "normal_plan",
    //                 "side": "open_long",
    //                 "triggerType": "market_price",
    //                 "presetTakeProfitPrice": "0",
    //                 "presetTakeLossPrice": "0",
    //                 "cTime": "1652745674488"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchClosedOrders
     * @description fetches information on multiple closed orders made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const [marketType, query] = this.handleMarketTypeAndParams('fetchClosedOrders', market, params);
    const request = {
      'symbol': market['id']
    };
    const method = this.getSupportedMapping(marketType, {
      'spot': 'privateSpotPostTradeHistory',
      'swap': 'privateMixGetOrderHistory'
    });
    if (marketType === 'swap') {
      if (limit === undefined) {
        limit = 100;
      }
      request['pageSize'] = limit;
      if (since === undefined) {
        since = 0;
      }
      request['startTime'] = since;
      request['endTime'] = this.milliseconds();
    }
    const response = await this[method](this.extend(request, query));
    //
    //  spot
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645925335553,
    //       data: [
    //         {
    //           accountId: '6394957606',
    //           symbol: 'BTCUSDT_SPBL',
    //           orderId: '881623995442958336',
    //           clientOrderId: '135335e9-b054-4e43-b00a-499f11d3a5cc',
    //           price: '39000.000000000000',
    //           quantity: '0.000700000000',
    //           orderType: 'limit',
    //           side: 'buy',
    //           status: 'full_fill',
    //           fillPrice: '39000.000000000000',
    //           fillQuantity: '0.000700000000',
    //           fillTotalAmount: '27.300000000000',
    //           cTime: '1645921460972'
    //         }
    //       ]
    //     }
    //
    // swap
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645925688701,
    //       data: {
    //         nextFlag: false,
    //         endId: '881640729145409536',
    //         orderList: [
    //           {
    //             symbol: 'BTCUSDT_UMCBL',
    //             size: 0.001,
    //             orderId: '881640729145409536',
    //             clientOid: '881640729204129792',
    //             filledQty: 0.001,
    //             fee: 0,
    //             price: null,
    //             priceAvg: 38429.5,
    //             state: 'filled',
    //             side: 'open_long',
    //             timeInForce: 'normal',
    //             totalProfits: 0,
    //             posSide: 'long',
    //             marginCoin: 'USDT',
    //             filledAmount: 38.4295,
    //             orderType: 'market',
    //             cTime: '1645925450611',
    //             uTime: '1645925450746'
    //           }
    //         ]
    //       }
    //     }
    //
    const data = this.safeValue(response, 'data');
    const orderList = this.safeValue(data, 'orderList', data);
    return this.parseOrders(orderList, market, since, limit);
  }
  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
     * @param {string|undefined} code unified currency code, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
     * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/en/latest/manual.html#ledger-structure}
     */
    await this.loadMarkets();
    let currency = undefined;
    const request = {};
    if (code !== undefined) {
      currency = this.currency(code);
      request['coinId'] = currency['id'];
    }
    const response = await this.privateSpotPostAccountBills(this.extend(request, params));
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: '1645929886887',
    //       data: [
    //         {
    //           billId: '881626974170554368',
    //           coinId: '2',
    //           coinName: 'USDT',
    //           groupType: 'transfer',
    //           bizType: 'transfer-out',
    //           quantity: '-10.00000000',
    //           balance: '73.36005300',
    //           fees: '0.00000000',
    //           cTime: '1645922171146'
    //         }
    //       ]
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseLedger(data, currency, since, limit);
  }
  parseLedgerEntry(item, currency = undefined) {
    //
    //     {
    //       billId: '881626974170554368',
    //       coinId: '2',
    //       coinName: 'USDT',
    //       groupType: 'transfer',
    //       bizType: 'transfer-out',
    //       quantity: '-10.00000000',
    //       balance: '73.36005300',
    //       fees: '0.00000000',
    //       cTime: '1645922171146'
    //     }
    //
    const id = this.safeString(item, 'billId');
    const currencyId = this.safeString(item, 'coinId');
    const code = this.safeCurrencyCode(currencyId);
    const amount = this.parseNumber(_Precise.Precise.stringAbs(this.safeString(item, 'quantity')));
    const timestamp = this.safeInteger(item, 'cTime');
    const bizType = this.safeString(item, 'bizType');
    let direction = undefined;
    if (bizType !== undefined && bizType.indexOf('-') >= 0) {
      const parts = bizType.split('-');
      direction = parts[1];
    }
    const type = this.safeString(item, 'groupType');
    const fee = this.safeNumber(item, 'fees');
    const after = this.safeNumber(item, 'balance');
    return {
      'info': item,
      'id': id,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'direction': direction,
      'account': undefined,
      'referenceId': undefined,
      'referenceAccount': undefined,
      'type': type,
      'currency': code,
      'amount': amount,
      'before': undefined,
      'after': after,
      'status': undefined,
      'fee': fee
    };
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');
    }
    this.checkRequiredSymbol('fetchMyTrades', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'pageSize': 100
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    request['endTime'] = this.milliseconds().toString();
    const response = await this.privateMixGetOrderHistory(this.extend(request, params));
    // {
    //     "symbol": "SOLUSDT_UMCBL",
    //     "size": 1,
    //     "orderId": "963544804144852112",
    //     "clientOid": "963544804144852113",
    //     "filledQty": 1,
    //     "fee": -0.00629204,
    //     "price": 31.4602,
    //     "priceAvg": 31.4602,
    //     "state": "filled",
    //     "side": "close_short",
    //     "timeInForce": "normal",
    //     "totalProfits": 0.00760000,
    //     "posSide": "short",
    //     "marginCoin": "USDT",
    //     "filledAmount": 31.4602,
    //     "orderType": "limit",
    //     "leverage": "5",
    //     "marginMode": "crossed",
    //     "reduceOnly": false,
    //     "enterPointSource": "WEB",
    //     "tradeSide": "open_long",
    //     "holdMode": "double_hold",
    //     "cTime": "1665452903781",
    //     "uTime": "1665452917467"
    // }
    const data = this.safeValue(response, 'data');
    const orderList = this.safeValue(data, 'orderList', []);
    return this.parseTrades(orderList, market, since, limit);
  }
  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @param {string} id order id
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades to retrieve
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOrderTrades() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const [marketType, query] = this.handleMarketTypeAndParams('fetchOrderTrades', market, params);
    const method = this.getSupportedMapping(marketType, {
      'spot': 'privateSpotPostTradeFills',
      'swap': 'privateMixGetOrderFills'
    });
    const request = {
      'symbol': market['id'],
      'orderId': id
    };
    const response = await this[method](this.extend(request, query));
    // spot
    //
    // swap
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: 1645927862710,
    //       data: [
    //         {
    //           tradeId: '881640729552281602',
    //           symbol: 'BTCUSDT_UMCBL',
    //           orderId: '881640729145409536',
    //           price: '38429.50',
    //           sizeQty: '0.001',
    //           fee: '0',
    //           side: 'open_long',
    //           fillAmount: '38.4295',
    //           profit: '0',
    //           cTime: '1645925450694'
    //         }
    //       ]
    //     }
    //
    const data = this.safeValue(response, 'data');
    return await this.parseTrades(data, market, since, limit);
  }
  async fetchPosition(symbol, params = {}) {
    /**
     * @method
     * @name bitget#fetchPosition
     * @description fetch data on a single open contract trade position
     * @param {string} symbol unified market symbol of the market the position is held in, default is undefined
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'marginCoin': market['settleId']
    };
    const response = await this.privateMixGetPositionSinglePosition(this.extend(request, params));
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: '1645933957584',
    //       data: [
    //         {
    //           marginCoin: 'USDT',
    //           symbol: 'BTCUSDT_UMCBL',
    //           holdSide: 'long',
    //           openDelegateCount: '0',
    //           margin: '1.921475',
    //           available: '0.001',
    //           locked: '0',
    //           total: '0.001',
    //           leverage: '20',
    //           achievedProfits: '0',
    //           averageOpenPrice: '38429.5',
    //           marginMode: 'fixed',
    //           holdMode: 'double_hold',
    //           unrealizedPL: '0.1634',
    //           liquidationPrice: '0',
    //           keepMarginRate: '0.004',
    //           cTime: '1645922194988'
    //         }
    //       ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parsePosition(data[0], market);
  }
  async fetchPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchPositions
     * @description fetch all open positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
     */
    await this.loadMarkets();
    const defaultSubType = this.safeString(this.options, 'defaultSubType');
    const request = {
      'productType': defaultSubType === 'linear' ? 'UMCBL' : 'DMCBL'
    };
    const response = await this.privateMixGetPositionAllPosition(this.extend(request, params));
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: '1645933905060',
    //       data: [
    //         {
    //           marginCoin: 'USDT',
    //           symbol: 'BTCUSDT_UMCBL',
    //           holdSide: 'long',
    //           openDelegateCount: '0',
    //           margin: '1.921475',
    //           available: '0.001',
    //           locked: '0',
    //           total: '0.001',
    //           leverage: '20',
    //           achievedProfits: '0',
    //           averageOpenPrice: '38429.5',
    //           marginMode: 'fixed',
    //           holdMode: 'double_hold',
    //           unrealizedPL: '0.14869',
    //           liquidationPrice: '0',
    //           keepMarginRate: '0.004',
    //           cTime: '1645922194988'
    //         }
    //       ]
    //     }
    //
    const position = this.safeValue(response, 'data', []);
    const result = [];
    for (let i = 0; i < position.length; i++) {
      result.push(this.parsePosition(position[i]));
    }
    symbols = this.marketSymbols(symbols);
    return this.filterByArray(result, 'symbol', symbols, false);
  }
  parsePosition(position, market = undefined) {
    //
    //     {
    //         marginCoin: 'USDT',
    //         symbol: 'BTCUSDT_UMCBL',
    //         holdSide: 'long',
    //         openDelegateCount: '0',
    //         margin: '1.921475',
    //         available: '0.001',
    //         locked: '0',
    //         total: '0.001',
    //         leverage: '20',
    //         achievedProfits: '0',
    //         averageOpenPrice: '38429.5',
    //         marginMode: 'fixed',
    //         holdMode: 'double_hold',
    //         unrealizedPL: '0.14869',
    //         liquidationPrice: '0',
    //         keepMarginRate: '0.004',
    //         cTime: '1645922194988'
    //     }
    //
    const marketId = this.safeString(position, 'symbol');
    const instType = this.getSubTypeFromMarketId(marketId);
    market = this.safeMarket(marketId, market);
    const timestamp = this.safeInteger(position, 'cTime');
    let marginMode = this.safeString(position, 'marginMode');
    if (marginMode === 'fixed') {
      marginMode = 'isolated';
    } else if (marginMode === 'crossed') {
      marginMode = 'cross';
    }
    const hedged = this.safeString(position, 'holdMode');
    let isHedged = false;
    if (hedged === 'double_hold') {
      isHedged = true;
    } else if (hedged === 'single_hold') {
      isHedged = false;
    }
    const side = this.safeString(position, 'holdSide');
    let contracts = this.safeFloat2(position, 'total', 'openDelegateCount');
    let liquidation = this.safeNumber2(position, 'liquidationPrice', 'liqPx');
    if (contracts === 0) {
      contracts = undefined;
    } else if (side === 'short' && contracts > 0) {
      contracts = -1 * contracts;
    }
    if (liquidation === 0) {
      liquidation = undefined;
    }
    const initialMargin = this.safeNumber(position, 'margin');
    const markPrice = this.safeNumber(position, 'markPrice');
    return {
      'info': position,
      'id': market['symbol'] + ':' + side,
      'instType': instType,
      'symbol': market['symbol'],
      'notional': undefined,
      'marginMode': marginMode,
      'liquidationPrice': liquidation,
      'entryPrice': this.safeNumber(position, 'averageOpenPrice'),
      'unrealizedPnl': this.safeNumber(position, 'upl'),
      'realizedPnl': this.safeNumber(position, 'achievedProfits'),
      'percentage': undefined,
      'contracts': contracts,
      'contractSize': this.safeNumber(position, 'total'),
      'markPrice': markPrice,
      'side': side,
      'hedged': isHedged,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'maintenanceMargin': undefined,
      'maintenanceMarginPercentage': this.safeNumber(position, 'keepMarginRate'),
      'collateral': this.safeNumber(position, 'margin'),
      'initialMargin': initialMargin,
      'initialMarginPercentage': undefined,
      'leverage': this.safeNumber(position, 'leverage'),
      'marginRatio': undefined
    };
  }
  async fetchPositionsHistory(symbol = undefined, since = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchPositions
     * @description fetch all open positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
     */
    await this.loadMarkets();
    const defaultSubType = this.safeString(this.options, 'defaultSubType');
    const request = {
      'productType': defaultSubType === 'linear' ? 'UMCBL' : 'DMCBL',
      'startTime': since,
      'endTime': this.milliseconds(),
      'pageSize': 99
    };
    if (symbol !== undefined) {
      request['symbol'] = symbol;
    }
    const response = await this.privateMixGetPositionHistoryPosition(this.extend(request, params));
    //
    //     {
    //       code: '00000',
    //       msg: 'success',
    //       requestTime: '1645933905060',
    //       data: [
    //         {
    //           marginCoin: 'USDT',
    //           symbol: 'BTCUSDT_UMCBL',
    //           holdSide: 'long',
    //           openDelegateCount: '0',
    //           margin: '1.921475',
    //           available: '0.001',
    //           locked: '0',
    //           total: '0.001',
    //           leverage: '20',
    //           achievedProfits: '0',
    //           averageOpenPrice: '38429.5',
    //           marginMode: 'fixed',
    //           holdMode: 'double_hold',
    //           unrealizedPL: '0.14869',
    //           liquidationPrice: '0',
    //           keepMarginRate: '0.004',
    //           cTime: '1645922194988'
    //         }
    //       ]
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    const position = this.safeValue(data, 'list', []);
    const result = [];
    for (let i = 0; i < position.length; i++) {
      result.push(this.parseHistoryPosition(position[i]));
    }
    return result;
  }
  parseHistoryPosition(position, market = undefined) {
    // {
    //   "code": "00000",
    //   "msg": "success",
    //   "requestTime": 0,
    //   "data": {
    //     "list": [
    //       {
    //         "symbol": "ETHUSDT_UMCBL",
    //         "marginCoin": "USDT",
    //         "holdSide": "short",
    //         "openAvgPrice": "1206.7",
    //         "closeAvgPrice": "1206.8",
    //         "marginMode": "fixed",
    //         "openTotalPos": "1.15",
    //         "closeTotalPos": "1.15",
    //         "pnl": "-0.11",
    //         "netProfit": "-1.780315",
    //         "totalFunding": "0",
    //         "openFee": "-0.83",
    //         "closeFee": "-0.83",
    //         "ctime": "1689300233897",
    //         "utime": "1689300238205"
    //       }
    //     ],
    //     "endId": "1062308959580516352"
    //   }
    // }
    const marketId = this.safeString(position, 'symbol');
    const id = this.safeString(position, 'ctime');
    const side = this.safeString(position, 'holdSide');
    const entryPrice = this.safeString(position, 'openAvgPrice');
    const exitPrice = this.safeString(position, 'closeAvgPrice');
    const closeFee = this.safeString(position, 'closeFee');
    const closeTotalPos = this.safeString(position, 'closeTotalPos');
    const convertedRealizedPnl = this.safeString(position, 'pnl');
    const openTimestamp = this.safeInteger(position, 'ctime');
    const closeTimestamp = this.safeInteger(position, 'utime');
    const duration = closeTimestamp - openTimestamp;
    const marginCoin = this.safeString(position, 'marginCoin');
    return {
      'id': id,
      'duration': duration,
      'info': position,
      'side': side,
      'convertedMaxSize': closeTotalPos,
      'convertedMarginCurrency': marginCoin,
      'symbol': marketId,
      'entryPrice': entryPrice,
      'exitPrice': exitPrice,
      'convertedRealizedPnl': convertedRealizedPnl,
      'convertedFees': closeFee,
      'openTimestamp': openTimestamp,
      'closeTimestamp': closeTimestamp
    };
  }
  async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#fetchFundingRateHistory
     * @description fetches historical funding rate prices
     * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
     * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
     * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchFundingRateHistory() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'pageSize': limit, // default 20
      // 'pageNo': 1,
      // 'nextPage': false,
    };

    if (limit !== undefined) {
      request['pageSize'] = limit;
    }
    const response = await this.publicMixGetMarketHistoryFundRate(this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 1652406728393,
    //         "data": [
    //             {
    //                 "symbol": "BTCUSDT",
    //                 "fundingRate": "-0.0003",
    //                 "settleTime": "1652396400000"
    //             },
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const rates = [];
    for (let i = 0; i < data.length; i++) {
      const entry = data[i];
      const marketId = this.safeString(entry, 'symbol');
      const symbol = this.safeSymbol(marketId, market);
      const timestamp = this.safeInteger(entry, 'settleTime');
      rates.push({
        'info': entry,
        'symbol': symbol,
        'fundingRate': this.safeString(entry, 'fundingRate'),
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp)
      });
    }
    const sorted = this.sortBy(rates, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, market['symbol'], since, limit);
  }
  async fetchFundingRate(symbol, params = {}) {
    /**
     * @method
     * @name bitget#fetchFundingRate
     * @description fetch the current funding rate
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/en/latest/manual.html#funding-rate-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['swap']) {
      throw new _errors.BadSymbol(this.id + ' fetchFundingRate() supports swap contracts only');
    }
    const request = {
      'symbol': market['id']
    };
    const response = await this.publicMixGetMarketCurrentFundRate(this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 1652401684275,
    //         "data": {
    //             "symbol": "BTCUSDT_UMCBL",
    //             "fundingRate": "-0.000182"
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseFundingRate(data, market);
  }
  parseFundingRate(contract, market = undefined) {
    //
    //     {
    //         "symbol": "BTCUSDT_UMCBL",
    //         "fundingRate": "-0.000182"
    //     }
    //
    const marketId = this.safeString(contract, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    return {
      'info': contract,
      'symbol': symbol,
      'markPrice': undefined,
      'indexPrice': undefined,
      'interestRate': undefined,
      'estimatedSettlePrice': undefined,
      'timestamp': undefined,
      'datetime': undefined,
      'fundingRate': this.safeNumber(contract, 'fundingRate'),
      'fundingTimestamp': undefined,
      'fundingDatetime': undefined,
      'nextFundingRate': undefined,
      'nextFundingTimestamp': undefined,
      'nextFundingDatetime': undefined,
      'previousFundingRate': undefined,
      'previousFundingTimestamp': undefined,
      'previousFundingDatetime': undefined
    };
  }
  async modifyMarginHelper(symbol, amount, type, params = {}) {
    await this.loadMarkets();
    const holdSide = this.safeString(params, 'holdSide');
    const market = this.market(symbol);
    const marginCoin = market['linear'] ? market['quote'] : market['base'];
    const request = {
      'symbol': market['id'],
      'marginCoin': marginCoin,
      'amount': this.amountToPrecision(symbol, amount),
      'holdSide': holdSide // long or short
    };

    params = this.omit(params, 'holdSide');
    const response = await this.privateMixPostAccountSetMargin(this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 1652483636792,
    //         "data": {
    //             "result": true
    //         }
    //     }
    //
    return this.extend(this.parseMarginModification(response, market), {
      'amount': this.parseNumber(amount),
      'type': type
    });
  }
  parseMarginModification(data, market = undefined) {
    const errorCode = this.safeString(data, 'code');
    const status = errorCode === '00000' ? 'ok' : 'failed';
    const code = market['linear'] ? market['quote'] : market['base'];
    return {
      'info': data,
      'type': undefined,
      'amount': undefined,
      'code': code,
      'symbol': market['symbol'],
      'status': status
    };
  }
  async reduceMargin(symbol, amount, params = {}) {
    /**
     * @method
     * @name bitget#reduceMargin
     * @description remove margin from a position
     * @param {string} symbol unified market symbol
     * @param {float} amount the amount of margin to remove
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/en/latest/manual.html#reduce-margin-structure}
     */
    if (amount > 0) {
      throw new _errors.BadRequest(this.id + ' reduceMargin() amount parameter must be a negative value');
    }
    const holdSide = this.safeString(params, 'holdSide');
    if (holdSide === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' reduceMargin() requires a holdSide parameter, either long or short');
    }
    return await this.modifyMarginHelper(symbol, amount, 'reduce', params);
  }
  async addMargin(symbol, amount, params = {}) {
    /**
     * @method
     * @name bitget#addMargin
     * @description add margin
     * @param {string} symbol unified market symbol
     * @param {float} amount amount of margin to add
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/en/latest/manual.html#add-margin-structure}
     */
    const holdSide = this.safeString(params, 'holdSide');
    if (holdSide === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' addMargin() requires a holdSide parameter, either long or short');
    }
    return await this.modifyMarginHelper(symbol, amount, 'add', params);
  }
  async fetchLeverage(symbol, params = {}) {
    /**
     * @method
     * @name bitget#fetchLeverage
     * @description fetch the set leverage for a market
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} a [leverage structure]{@link https://docs.ccxt.com/en/latest/manual.html#leverage-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.publicMixGetMarketSymbolLeverage(this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 1652347673483,
    //         "data": {
    //             "symbol": "BTCUSDT_UMCBL",
    //             "minLeverage": "1",
    //             "maxLeverage": "125"
    //         }
    //     }
    //
    return response;
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitget#setLeverage
     * @description set the level of leverage for a market
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
    }
    const buyLeverage = this.safeNumber(params, 'buyLeverage', leverage);
    const sellLeverage = this.safeNumber(params, 'sellLeverage', leverage);
    await this.loadMarkets();
    const market = this.market(symbol);
    const marginMode = this.safeString(params, 'marginMode');
    params = this.omit(params, ['marginMode', 'positionMode']);
    if (marginMode === 'isolated') {
      let promises = [];
      const request = {
        'symbol': market['id'],
        'marginCoin': market['settleId']
      };
      if (buyLeverage !== undefined) {
        request['leverage'] = buyLeverage;
        request['holdSide'] = 'long';
        promises.push(this.privateMixPostAccountSetLeverage(this.extend(request, params)));
      }
      if (sellLeverage !== undefined) {
        request['leverage'] = sellLeverage;
        request['holdSide'] = 'short';
        promises.push(this.privateMixPostAccountSetLeverage(this.extend(request, params)));
      }
      promises = await Promise.all(promises);
      if (promises.length === 1) {
        return promises[0];
      } else {
        return promises;
      }
    } else {
      const request = {
        'symbol': market['id'],
        'marginCoin': market['settleId'],
        'leverage': buyLeverage
        // 'holdSide': 'long',
      };

      return await this.privateMixPostAccountSetLeverage(this.extend(request, params));
    }
  }
  async switchIsolated(symbol, isIsolated, buyLeverage, sellLeverage, params = {}) {
    if (isIsolated) {
      await this.setMarginMode('fixed', symbol, params);
    } else {
      await this.setMarginMode('crossed', symbol, params);
    }
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitget#setMarginMode
     * @description set margin mode to 'cross' or 'isolated'
     * @param {string} marginMode 'cross' or 'isolated'
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitget api endpoint
     * @returns {object} response from the exchange
     */
    marginMode = marginMode.toLowerCase();
    if (marginMode === 'isolated') {
      marginMode = 'fixed';
    } else if (marginMode === 'cross') {
      marginMode = 'crossed';
    }
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
    }
    if (marginMode !== 'fixed' && marginMode !== 'crossed') {
      throw new _errors.ArgumentsRequired(this.id + ' setMarginMode() marginMode must be "fixed" or "crossed" (or "isolated" or "cross")');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'marginCoin': market['settleId'],
      'marginMode': marginMode
    };
    params = this.omit(params, ['leverage', 'buyLeverage', 'sellLeverage']);
    try {
      return await this.privateMixPostAccountSetMarginMode(this.extend(request, params));
    } catch (e) {
      // bitget {"code":"45117","msg":"当前持有仓位或委托，无法调整保证金模式","requestTime":1671924219093,"data":null}
      if (e instanceof _errors.ExchangeError) {
        if (e.toString().indexOf('45117') >= 0) {
          throw new _errors.ExchangeError(this.id + ' ' + this.json({
            'code': 45117,
            'msg': 'Cannot switch Margin Type for market with open positions or orders.'
          }));
        }
      }
      throw e;
    }
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'marginCoin': market['settleId']
    };
    const response = await this.privateMixGetAccountAccount(this.extend(request, params));
    const data = this.safeValue(response, 'data');
    return this.parseAccountConfiguration(data, market);
  }
  parseAccountConfiguration(data, market) {
    // {
    //     "marginCoin":"USDT",
    //   "locked":0,
    //   "available":13168.86110692,
    //   "crossMaxAvailable":13168.86110692,
    //   "fixedMaxAvailable":13168.86110692,
    //   "maxTransferOut":13168.86110692,
    //   "equity":13178.86110692,
    //   "usdtEquity":13178.861106922,
    //   "btcEquity":0.344746495477,
    //   "crossRiskRate":0,
    //   "crossMarginLeverage":20,
    //   "fixedLongLeverage":20,
    //   "fixedShortLeverage":20,
    //   "marginMode":"crossed",
    //   "holdMode":"double_hold"
    // }
    const marginMode = this.safeString(data, 'marginMode');
    const isIsolated = marginMode === 'fixed';
    let leverage = this.safeFloat(data, 'crossMarginLeverage');
    const buyLeverage = this.safeFloat(data, 'fixedLongLeverage');
    const sellLeverage = this.safeFloat(data, 'fixedShortLeverage');
    const marginCoin = this.safeString(data, 'marginCoin');
    const holdMode = this.safeString(data, 'holdMode');
    let positionMode = 'hedged';
    if (holdMode === 'single_hold') {
      positionMode = 'oneway';
      if (isIsolated) {
        leverage = buyLeverage;
      }
    }
    const accountConfig = {
      'info': data,
      'markets': {},
      'positionMode': positionMode,
      'marginMode': isIsolated ? 'isolated' : 'cross'
    };
    const leverageConfigs = accountConfig['markets'];
    leverageConfigs[market['symbol']] = {
      'marginMode': isIsolated ? 'isolated' : 'cross',
      'isIsolated': isIsolated,
      'leverage': leverage,
      'buyLeverage': isIsolated ? buyLeverage : leverage,
      'sellLeverage': isIsolated ? sellLeverage : leverage,
      'marginCoin': marginCoin,
      'positionMode': positionMode
    };
    return accountConfig;
  }
  async fetchOpenInterest(symbol, params = {}) {
    /**
     * @method
     * @name bitget#fetchOpenInterest
     * @description Retrieves the open interest of a currency
     * @see https://bitgetlimited.github.io/apidoc/en/mix/#get-open-interest
     * @param {string} symbol Unified CCXT market symbol
     * @param {object} params exchange specific parameters
     * @returns {object} an open interest structure{@link https://docs.ccxt.com/en/latest/manual.html#interest-history-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['contract']) {
      throw new _errors.BadRequest(this.id + ' fetchOpenInterest() supports contract markets only');
    }
    const request = {
      'symbol': market['id']
    };
    const response = await this.publicMixGetMarketOpenInterest(this.extend(request, params));
    //
    //     {
    //         "code": "00000",
    //         "msg": "success",
    //         "requestTime": 0,
    //         "data": {
    //             "symbol": "BTCUSDT_UMCBL",
    //             "amount": "130818.967",
    //             "timestamp": "1663399151127"
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseOpenInterest(data, market);
  }
  async transfer(code, amount, fromAccount, toAccount, params = {}) {
    /**
     * @method
     * @name bitget#transfer
     * @see https://bitgetlimited.github.io/apidoc/en/spot/#transfer
     * @description transfer currency internally between wallets on the same account
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount account to transfer from
     * @param {string} toAccount account to transfer to
     * @param {object} params extra parameters specific to the bitget api endpoint
     *
     * EXCHANGE SPECIFIC PARAMS
     * @param {string} params.clientOid custom id
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/en/latest/manual.html#transfer-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const fromSwap = fromAccount === 'swap';
    const toSwap = toAccount === 'swap';
    const usdt = currency['code'] === 'USDT';
    if (fromSwap) {
      fromAccount = usdt ? 'mix_usdt' : 'mix_usd';
    } else if (toSwap) {
      toAccount = usdt ? 'mix_usdt' : 'mix_usd';
    }
    const request = {
      'fromType': fromAccount,
      'toType': toAccount,
      'amount': amount,
      'coin': currency['info']['coinName']
    };
    const response = await this.privateSpotPostWalletTransfer(this.extend(request, params));
    //
    //    {
    //        "code": "00000",
    //        "msg": "success",
    //        "requestTime": 1668119107154,
    //        "data": "SUCCESS"
    //    }
    //
    return this.parseTransfer(response, currency);
  }
  parseTransfer(transfer, currency = undefined) {
    //
    //    {
    //        "code": "00000",
    //        "msg": "success",
    //        "requestTime": 1668119107154,
    //        "data": "SUCCESS"
    //    }
    //
    const timestamp = this.safeInteger(transfer, 'requestTime');
    const msg = this.safeString(transfer, 'msg');
    return {
      'info': transfer,
      'id': this.safeString(transfer, 'id'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'currency': this.safeString(currency, 'code'),
      'amount': this.safeNumber(transfer, 'size'),
      'fromAccount': undefined,
      'toAccount': undefined,
      'status': msg === 'success' ? 'ok' : msg
    };
  }
  parseTransferStatus(status) {
    const statuses = {
      'success': 'ok'
    };
    return this.safeString(statuses, status, status);
  }
  parseOpenInterest(interest, market = undefined) {
    //
    //     {
    //         "symbol": "BTCUSDT_UMCBL",
    //         "amount": "130818.967",
    //         "timestamp": "1663399151127"
    //     }
    //
    const timestamp = this.safeInteger(interest, 'timestamp');
    const id = this.safeString(interest, 'symbol');
    market = this.safeMarket(id, market);
    const amount = this.safeNumber(interest, 'amount');
    return {
      'symbol': this.safeSymbol(id),
      'baseVolume': amount,
      'quoteVolume': undefined,
      'openInterestAmount': amount,
      'openInterestValue': undefined,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': interest
    };
  }
  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (!response) {
      return; // fallback to default error handler
    }
    //
    // spot
    //
    //     {"status":"fail","err_code":"01001","err_msg":"系统异常，请稍后重试"}
    //     {"status":"error","ts":1595594160149,"err_code":"invalid-parameter","err_msg":"invalid size, valid range: [1,2000]"}
    //     {"status":"error","ts":1595684716042,"err_code":"invalid-parameter","err_msg":"illegal sign invalid"}
    //     {"status":"error","ts":1595700216275,"err_code":"bad-request","err_msg":"your balance is low!"}
    //     {"status":"error","ts":1595700344504,"err_code":"invalid-parameter","err_msg":"invalid type"}
    //     {"status":"error","ts":1595703343035,"err_code":"bad-request","err_msg":"order cancel fail"}
    //     {"status":"error","ts":1595704360508,"err_code":"invalid-parameter","err_msg":"accesskey not null"}
    //     {"status":"error","ts":1595704490084,"err_code":"invalid-parameter","err_msg":"permissions not right"}
    //     {"status":"error","ts":1595711862763,"err_code":"system exception","err_msg":"system exception"}
    //     {"status":"error","ts":1595730308979,"err_code":"bad-request","err_msg":"20003"}
    //
    // swap
    //
    //     {"code":"40015","msg":"","requestTime":1595698564931,"data":null}
    //     {"code":"40017","msg":"Order id must not be blank","requestTime":1595702477835,"data":null}
    //     {"code":"40017","msg":"Order Type must not be blank","requestTime":1595698516162,"data":null}
    //     {"code":"40301","msg":"","requestTime":1595667662503,"data":null}
    //     {"code":"40017","msg":"Contract code must not be blank","requestTime":1595703151651,"data":null}
    //     {"code":"40108","msg":"","requestTime":1595885064600,"data":null}
    //     {"order_id":"513468410013679613","client_oid":null,"symbol":"ethusd","result":false,"err_code":"order_no_exist_error","err_msg":"订单不存在！"}
    //
    const message = this.safeString(response, 'err_msg');
    const errorCode = this.safeString2(response, 'code', 'err_code');
    const feedback = this.id + ' ' + body;
    const nonEmptyMessage = message !== undefined && message !== '';
    if (nonEmptyMessage) {
      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);
      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
    }
    const nonZeroErrorCode = errorCode !== undefined && errorCode !== '00000';
    if (nonZeroErrorCode) {
      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
    }
    if (nonZeroErrorCode || nonEmptyMessage) {
      throw new _errors.ExchangeError(feedback); // unknown message
    }
  }

  sign(path, api = [], method = 'GET', params = {}, headers = undefined, body = undefined) {
    const signed = api[0] === 'private';
    const endpoint = api[1];
    let pathPart = '/api/mix/v1';
    if (path === 'order/place-tpsl-order') {
      pathPart = '/api/v2/mix';
    }
    if (endpoint === 'spot') {
      pathPart = '/api/spot/v1';
    }
    const request = '/' + this.implodeParams(path, params);
    const payload = pathPart + request;
    let url = this.implodeHostname(this.urls['api'][endpoint]) + payload;
    const query = this.omit(params, this.extractParams(path));
    if (!signed && method === 'GET') {
      const keys = Object.keys(query);
      const keysLength = keys.length;
      if (keysLength > 0) {
        url = url + '?' + this.urlencode(query);
      }
    }
    if (signed) {
      this.checkRequiredCredentials();
      const timestamp = this.milliseconds().toString();
      let auth = timestamp + method + payload;
      if (method === 'POST') {
        body = this.json(params);
        auth += body;
      } else {
        if (Object.keys(params).length) {
          const query = '?' + this.urlencode(this.keysort(params));
          url += query;
          auth += query;
        }
      }
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
      headers = {
        'ACCESS-KEY': this.apiKey,
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': this.password
      };
      if (method === 'POST') {
        headers['Content-Type'] = 'application/json';
      }
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
}
exports.default = bitget;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _number = require("./base/functions/number.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bitmex extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'bitmex',
      'name': 'BitMEX',
      'countries': ['SC'],
      'version': 'v1',
      'userAgent': undefined,
      'origin': 'https://www.bitmex.com',
      // cheapest endpoints are 10 requests per second (trading)
      // 10 per second => rateLimit = 1000ms / 10 = 100ms
      // 120 per minute => 2 per second => weight = 5 (authenticated)
      // 30 per minute => 0.5 per second => weight = 20 (unauthenticated)
      'rateLimit': 100,
      'pro': true,
      'has': {
        'CORS': undefined,
        'spot': true,
        'margin': false,
        'swap': true,
        'future': true,
        'option': false,
        'addMargin': undefined,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'cancelOrders': true,
        'createOrder': true,
        'createReduceOnlyOrder': true,
        'editOrder': true,
        'fetchBalance': true,
        'fetchClosedOrders': true,
        'fetchDepositAddress': true,
        'fetchDepositAddresses': false,
        'fetchDepositAddressesByNetwork': false,
        'fetchFundingHistory': false,
        'fetchFundingRate': false,
        'fetchFundingRateHistory': true,
        'fetchFundingRates': true,
        'fetchIndexOHLCV': false,
        'fetchLedger': true,
        'fetchLeverage': false,
        'fetchLeverageTiers': false,
        'fetchMarketLeverageTiers': false,
        'fetchMarkets': true,
        'fetchMarkOHLCV': false,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenOrders': true,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrders': true,
        'fetchPosition': false,
        'fetchPositions': true,
        'fetchPositionsRisk': false,
        'fetchPremiumIndexOHLCV': false,
        'fetchTicker': true,
        'fetchTickers': true,
        'fetchTrades': true,
        'fetchTransactions': 'emulated',
        'fetchTransfer': false,
        'fetchTransfers': false,
        'reduceMargin': undefined,
        'setLeverage': true,
        'setMargin': undefined,
        'setMarginMode': true,
        'setPositionMode': false,
        'transfer': false,
        'withdraw': true
      },
      // 'timeframes': {
      //     '1m': '1m',
      //     '5m': '5m',
      //     '1h': '1h',
      //     '1d': '1d',
      // },
      'timeframes': {
        '1m': '1',
        '5m': '5',
        '1h': '60',
        '1d': '1440'
      },
      'urls': {
        'test': {
          'public': 'https://testnet.bitmex.com',
          'private': 'https://testnet.bitmex.com'
        },
        'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
        'api': {
          'public': 'https://www.bitmex.com',
          'private': 'https://www.bitmex.com'
        },
        'www': 'https://www.bitmex.com',
        'doc': ['https://www.bitmex.com/app/apiOverview', 'https://github.com/BitMEX/api-connectors/tree/master/official-http'],
        'fees': 'https://www.bitmex.com/app/fees',
        'referral': 'https://www.bitmex.com/register/upZpOX'
      },
      'api': {
        'public': {
          'get': {
            'announcement': 5,
            'announcement/urgent': 5,
            'funding': 5,
            'instrument': 5,
            'instrument/active': 5,
            'instrument/activeAndIndices': 5,
            'instrument/activeIntervals': 5,
            'instrument/compositeIndex': 5,
            'instrument/indices': 5,
            'insurance': 5,
            'leaderboard': 5,
            'liquidation': 5,
            'orderBook': 5,
            'orderBook/L2': 5,
            'quote': 5,
            'quote/bucketed': 5,
            'schema': 5,
            'schema/websocketHelp': 5,
            'settlement': 5,
            'stats': 5,
            'stats/history': 5,
            'trade': 5,
            'trade/bucketed': 5,
            'wallet/assets': 5,
            'wallet/networks': 5,
            'udf/history': 5
          }
        },
        'private': {
          'get': {
            'apiKey': 5,
            'chat': 5,
            'chat/channels': 5,
            'chat/connected': 5,
            'execution': 5,
            'execution/tradeHistory': 5,
            'notification': 5,
            'order': 5,
            'position': 5,
            'user': 5,
            'user/affiliateStatus': 5,
            'user/checkReferralCode': 5,
            'user/commission': 5,
            'user/depositAddress': 5,
            'user/executionHistory': 5,
            'user/margin': 5,
            'user/minWithdrawalFee': 5,
            'user/wallet': 5,
            'user/walletHistory': 5,
            'user/walletSummary': 5,
            'wallet/assets': 5,
            'wallet/networks': 5,
            'userEvent': 5
          },
          'post': {
            'apiKey': 5,
            'apiKey/disable': 5,
            'apiKey/enable': 5,
            'chat': 5,
            'order': 1,
            'order/bulk': 5,
            'order/cancelAllAfter': 5,
            'order/closePosition': 5,
            'position/isolate': 1,
            'position/leverage': 1,
            'position/riskLimit': 5,
            'position/transferMargin': 1,
            'user/cancelWithdrawal': 5,
            'user/confirmEmail': 5,
            'user/confirmEnableTFA': 5,
            'user/confirmWithdrawal': 5,
            'user/disableTFA': 5,
            'user/logout': 5,
            'user/logoutAll': 5,
            'user/preferences': 5,
            'user/requestEnableTFA': 5,
            'user/requestWithdrawal': 5
          },
          'put': {
            'order': 1,
            'order/bulk': 5,
            'user': 5
          },
          'delete': {
            'apiKey': 5,
            'order': 1,
            'order/all': 1
          }
        }
      },
      'exceptions': {
        'exact': {
          'Invalid API Key.': _errors.AuthenticationError,
          'This key is disabled.': _errors.PermissionDenied,
          'Access Denied': _errors.PermissionDenied,
          'Duplicate clOrdID': _errors.InvalidOrder,
          'orderQty is invalid': _errors.InvalidOrder,
          'Invalid price': _errors.InvalidOrder,
          'Invalid stopPx for ordType': _errors.InvalidOrder
        },
        'broad': {
          'Signature not valid': _errors.AuthenticationError,
          'overloaded': _errors.ExchangeNotAvailable,
          'Account has insufficient Available Balance': _errors.InsufficientFunds,
          'Service unavailable': _errors.ExchangeNotAvailable,
          'Server Error': _errors.ExchangeError,
          'Unable to cancel order due to existing state': _errors.InvalidOrder,
          'We require all new traders to verify': _errors.PermissionDenied // {"message":"We require all new traders to verify their identity before their first deposit. Please visit bitmex.com/verify to complete the process.","name":"HTTPError"}
        }
      },

      'precisionMode': _number.TICK_SIZE,
      'options': {
        // https://blog.bitmex.com/api_announcement/deprecation-of-api-nonce-header/
        // https://github.com/ccxt/ccxt/issues/4789
        'api-expires': 5,
        'fetchOHLCVOpenTimestamp': true,
        'networks': {
          'BTC': 'btc',
          'ETH': 'eth',
          'BSC': 'bsc',
          'BNB': 'bsc',
          'TRON': 'tron',
          'ERC20': 'eth',
          'BEP20': 'bsc',
          'TRC20': 'tron',
          'TRX': 'tron',
          'AVAX': 'avax',
          'NEAR': 'near',
          'XTZ': 'xtz',
          'DOT': 'dot',
          'SOL': 'sol'
        },
        'networksById': {
          'btc': 'BTC',
          'eth': 'ERC20',
          'bsc': 'BSC',
          'tron': 'TRX',
          'avax': 'AVAX',
          'near': 'NEAR',
          'xtz': 'XTZ',
          'dot': 'DOT',
          'sol': 'SOL'
        }
      },
      'commonCurrencies': {
        'USDt': 'USDT',
        'XBt': 'BTC',
        'XBT': 'BTC',
        'Gwei': 'ETH',
        'GWEI': 'ETH',
        'LAMP': 'SOL',
        'LAMp': 'SOL'
      }
    });
  }
  safeSymbol(marketId, market = undefined, delimiter = undefined, marketType = undefined) {
    if (marketId.indexOf('/') < 0) {
      marketId = marketId.replace('BTC', 'XBT');
    }
    market = this.safeMarket(marketId, market, delimiter, marketType);
    return market['symbol'];
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name bitmex#fetchMarkets
     * @description retrieves data on all markets for bitmex
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    const response = await this.publicGetInstrumentActiveAndIndices(params);
    //
    //    {
    //        "symbol": "LTCUSDT",
    //        "rootSymbol": "LTC",
    //        "state": "Open",
    //        "typ": "FFWCSX",
    //        "listing": "2021-11-10T04:00:00.000Z",
    //        "front": "2021-11-10T04:00:00.000Z",
    //        "expiry": null,
    //        "settle": null,
    //        "listedSettle": null,
    //        "relistInterval": null,
    //        "inverseLeg": "",
    //        "sellLeg": "",
    //        "buyLeg": "",
    //        "optionStrikePcnt": null,
    //        "optionStrikeRound": null,
    //        "optionStrikePrice": null,
    //        "optionMultiplier": null,
    //        "positionCurrency": "LTC",
    //        "underlying": "LTC",
    //        "quoteCurrency": "USDT",
    //        "underlyingSymbol": "LTCT=",
    //        "reference": "BMEX",
    //        "referenceSymbol": ".BLTCT",
    //        "calcInterval": null,
    //        "publishInterval": null,
    //        "publishTime": null,
    //        "maxOrderQty": 1000000000,
    //        "maxPrice": 1000000,
    //        "lotSize": 1000,
    //        "tickSize": 0.01,
    //        "multiplier": 100,
    //        "settlCurrency": "USDt",
    //        "underlyingToPositionMultiplier": 10000,
    //        "underlyingToSettleMultiplier": null,
    //        "quoteToSettleMultiplier": 1000000,
    //        "isQuanto": false,
    //        "isInverse": false,
    //        "initMargin": 0.03,
    //        "maintMargin": 0.015,
    //        "riskLimit": 1000000000000,
    //        "riskStep": 1000000000000,
    //        "limit": null,
    //        "capped": false,
    //        "taxed": true,
    //        "deleverage": true,
    //        "makerFee": -0.0001,
    //        "takerFee": 0.0005,
    //        "settlementFee": 0,
    //        "insuranceFee": 0,
    //        "fundingBaseSymbol": ".LTCBON8H",
    //        "fundingQuoteSymbol": ".USDTBON8H",
    //        "fundingPremiumSymbol": ".LTCUSDTPI8H",
    //        "fundingTimestamp": "2022-01-14T20:00:00.000Z",
    //        "fundingInterval": "2000-01-01T08:00:00.000Z",
    //        "fundingRate": 0.0001,
    //        "indicativeFundingRate": 0.0001,
    //        "rebalanceTimestamp": null,
    //        "rebalanceInterval": null,
    //        "openingTimestamp": "2022-01-14T17:00:00.000Z",
    //        "closingTimestamp": "2022-01-14T18:00:00.000Z",
    //        "sessionInterval": "2000-01-01T01:00:00.000Z",
    //        "prevClosePrice": 138.511,
    //        "limitDownPrice": null,
    //        "limitUpPrice": null,
    //        "bankruptLimitDownPrice": null,
    //        "bankruptLimitUpPrice": null,
    //        "prevTotalVolume": 12699024000,
    //        "totalVolume": 12702160000,
    //        "volume": 3136000,
    //        "volume24h": 114251000,
    //        "prevTotalTurnover": 232418052349000,
    //        "totalTurnover": 232463353260000,
    //        "turnover": 45300911000,
    //        "turnover24h": 1604331340000,
    //        "homeNotional24h": 11425.1,
    //        "foreignNotional24h": 1604331.3400000003,
    //        "prevPrice24h": 135.48,
    //        "vwap": 140.42165,
    //        "highPrice": 146.42,
    //        "lowPrice": 135.08,
    //        "lastPrice": 144.36,
    //        "lastPriceProtected": 144.36,
    //        "lastTickDirection": "MinusTick",
    //        "lastChangePcnt": 0.0655,
    //        "bidPrice": 143.75,
    //        "midPrice": 143.855,
    //        "askPrice": 143.96,
    //        "impactBidPrice": 143.75,
    //        "impactMidPrice": 143.855,
    //        "impactAskPrice": 143.96,
    //        "hasLiquidity": true,
    //        "openInterest": 38103000,
    //        "openValue": 547963053300,
    //        "fairMethod": "FundingRate",
    //        "fairBasisRate": 0.1095,
    //        "fairBasis": 0.004,
    //        "fairPrice": 143.811,
    //        "markMethod": "FairPrice",
    //        "markPrice": 143.811,
    //        "indicativeTaxRate": null,
    //        "indicativeSettlePrice": 143.807,
    //        "optionUnderlyingPrice": null,
    //        "settledPriceAdjustmentRate": null,
    //        "settledPrice": null,
    //        "timestamp": "2022-01-14T17:49:55.000Z"
    //    }
    //
    const result = [];
    for (let i = 0; i < response.length; i++) {
      const market = response[i];
      const id = this.safeString(market, 'symbol');
      const baseId = this.safeString(market, 'underlying');
      const quoteId = this.safeString(market, 'quoteCurrency');
      const settleId = this.safeString(market, 'settlCurrency', '');
      const base = this.safeCurrencyCode(baseId);
      const quote = this.safeCurrencyCode(quoteId);
      const settle = this.safeCurrencyCode(settleId);
      const basequote = baseId + quoteId;
      const swap = id === basequote;
      // 'positionCurrency' may be empty ("", as Bitmex currently returns for ETHUSD)
      // so let's take the settlCurrency first and then adjust if needed
      let type = undefined;
      let future = false;
      let prediction = false;
      let index = false;
      let symbol = base + '/' + quote + ':' + settle;
      const expiryDatetime = this.safeString(market, 'expiry');
      const expiry = this.parse8601(expiryDatetime);
      const inverse = this.safeValue(market, 'isInverse');
      const status = this.safeString(market, 'state');
      let active = status !== 'Unlisted';
      if (swap) {
        type = 'swap';
      } else if (id.indexOf('B_') >= 0) {
        prediction = true;
        type = 'prediction';
        symbol = id;
      } else if (expiry !== undefined) {
        future = true;
        type = 'future';
        symbol = symbol + '-' + this.yymmdd(expiry);
      } else {
        index = true;
        type = 'index';
        symbol = id;
        active = false;
      }
      const positionId = this.safeString2(market, 'positionCurrency', 'underlying');
      const position = this.safeCurrencyCode(positionId);
      const positionIsQuote = position === quote;
      const maxOrderQty = this.safeNumber(market, 'maxOrderQty');
      const contract = !index;
      const initMargin = this.safeString(market, 'initMargin', '1');
      const maxLeverage = this.parseNumber(_Precise.Precise.stringDiv('1', initMargin));
      // const multiplierString = Precise.stringAbs (this.safeString (market, 'multiplier'));
      const rawUnderlyingToPositionMultiplier = this.safeNumber(market, 'underlyingToPositionMultiplier');
      let contractSize = 1;
      if (rawUnderlyingToPositionMultiplier !== undefined) {
        contractSize = 1 / rawUnderlyingToPositionMultiplier;
      }
      result.push({
        'id': id,
        'symbol': symbol,
        'base': base,
        'quote': quote,
        'settle': settle,
        'baseId': baseId,
        'quoteId': quoteId,
        'settleId': settleId,
        'type': type,
        'spot': false,
        'margin': false,
        'swap': swap,
        'future': future,
        'option': false,
        'prediction': prediction,
        'index': index,
        'active': active,
        'contract': contract,
        'linear': contract ? !inverse : undefined,
        'inverse': contract ? inverse : undefined,
        'taker': this.safeNumber(market, 'takerFee'),
        'maker': this.safeNumber(market, 'makerFee'),
        // 'contractSize': this.parseNumber (multiplierString),
        'contractSize': contractSize,
        'expiry': expiry,
        'expiryDatetime': expiryDatetime,
        'strike': this.safeNumber(market, 'optionStrikePrice'),
        'optionType': undefined,
        'precision': {
          'amount': this.safeNumber(market, 'lotSize'),
          'price': this.safeNumber(market, 'tickSize'),
          'quote': this.safeNumber(market, 'tickSize'),
          'base': this.safeNumber(market, 'tickSize')
        },
        'limits': {
          'leverage': {
            'min': contract ? this.parseNumber('1') : undefined,
            'max': contract ? maxLeverage : undefined
          },
          'amount': {
            'min': undefined,
            'max': positionIsQuote ? undefined : maxOrderQty
          },
          'price': {
            'min': undefined,
            'max': this.safeNumber(market, 'maxPrice')
          },
          'cost': {
            'min': undefined,
            'max': positionIsQuote ? maxOrderQty : undefined
          }
        },
        'info': market
      });
    }
    return result;
  }
  parseBalance(response) {
    //
    //     [
    //         {
    //             "account":1455728,
    //             "currency":"XBt",
    //             "riskLimit":1000000000000,
    //             "prevState":"",
    //             "state":"",
    //             "action":"",
    //             "amount":263542,
    //             "pendingCredit":0,
    //             "pendingDebit":0,
    //             "confirmedDebit":0,
    //             "prevRealisedPnl":0,
    //             "prevUnrealisedPnl":0,
    //             "grossComm":0,
    //             "grossOpenCost":0,
    //             "grossOpenPremium":0,
    //             "grossExecCost":0,
    //             "grossMarkValue":0,
    //             "riskValue":0,
    //             "taxableMargin":0,
    //             "initMargin":0,
    //             "maintMargin":0,
    //             "sessionMargin":0,
    //             "targetExcessMargin":0,
    //             "varMargin":0,
    //             "realisedPnl":0,
    //             "unrealisedPnl":0,
    //             "indicativeTax":0,
    //             "unrealisedProfit":0,
    //             "syntheticMargin":null,
    //             "walletBalance":263542,
    //             "marginBalance":263542,
    //             "marginBalancePcnt":1,
    //             "marginLeverage":0,
    //             "marginUsedPcnt":0,
    //             "excessMargin":263542,
    //             "excessMarginPcnt":1,
    //             "availableMargin":263542,
    //             "withdrawableMargin":263542,
    //             "timestamp":"2020-08-03T12:01:01.246Z",
    //             "grossLastValue":0,
    //             "commission":null
    //         }
    //     ]
    //
    const result = {
      'info': response
    };
    for (let i = 0; i < response.length; i++) {
      const balance = response[i];
      const currencyId = this.safeString(balance, 'currency');
      const code = this.safeCurrencyCode(currencyId);
      const account = {};
      const marginBalance = this.safeInteger(balance, 'marginBalance', 0);
      const maintMargin = this.safeInteger(balance, 'maintMargin', 0);
      const availableMargin = this.safeInteger(balance, 'availableMargin', 0);
      let free = marginBalance - maintMargin;
      if (free === 0 && availableMargin !== 0) {
        free = availableMargin;
      }
      const total = this.safeInteger(balance, 'walletBalance');
      let freeStr = free.toString();
      let totalStr = undefined;
      if (total !== undefined) {
        totalStr = total.toString();
      }
      if (code !== 'USDT') {
        // tmp fix until this PR gets merged
        // https://github.com/ccxt/ccxt/pull/15311
        const symbol = code + '_USDT';
        const market = this.safeMarket(symbol);
        const info = this.safeValue(market, 'info', {});
        const multiplier = this.safeString(info, 'underlyingToPositionMultiplier');
        if (multiplier !== undefined) {
          freeStr = _Precise.Precise.stringDiv(freeStr, multiplier);
          totalStr = _Precise.Precise.stringDiv(totalStr, multiplier);
        } else {
          totalStr = _Precise.Precise.stringDiv(totalStr, '1e8');
          freeStr = _Precise.Precise.stringDiv(freeStr, '1e8');
        }
      } else {
        freeStr = _Precise.Precise.stringDiv(freeStr, '1e6');
        totalStr = _Precise.Precise.stringDiv(totalStr, '1e6');
      }
      if (totalStr !== undefined) {
        account['total'] = totalStr;
      }
      if (freeStr !== undefined) {
        account['free'] = freeStr;
      }
      result[code] = account;
    }
    return this.safeBalance(result);
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name bitmex#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const request = {
      'currency': 'all'
    };
    const response = await this.privateGetUserMargin(this.extend(request, params));
    //
    //     [
    //         {
    //             "account":1455728,
    //             "currency":"XBt",
    //             "riskLimit":1000000000000,
    //             "prevState":"",
    //             "state":"",
    //             "action":"",
    //             "amount":263542,
    //             "pendingCredit":0,
    //             "pendingDebit":0,
    //             "confirmedDebit":0,
    //             "prevRealisedPnl":0,
    //             "prevUnrealisedPnl":0,
    //             "grossComm":0,
    //             "grossOpenCost":0,
    //             "grossOpenPremium":0,
    //             "grossExecCost":0,
    //             "grossMarkValue":0,
    //             "riskValue":0,
    //             "taxableMargin":0,
    //             "initMargin":0,
    //             "maintMargin":0,
    //             "sessionMargin":0,
    //             "targetExcessMargin":0,
    //             "varMargin":0,
    //             "realisedPnl":0,
    //             "unrealisedPnl":0,
    //             "indicativeTax":0,
    //             "unrealisedProfit":0,
    //             "syntheticMargin":null,
    //             "walletBalance":263542,
    //             "marginBalance":263542,
    //             "marginBalancePcnt":1,
    //             "marginLeverage":0,
    //             "marginUsedPcnt":0,
    //             "excessMargin":263542,
    //             "excessMarginPcnt":1,
    //             "availableMargin":263542,
    //             "withdrawableMargin":263542,
    //             "timestamp":"2020-08-03T12:01:01.246Z",
    //             "grossLastValue":0,
    //             "commission":null
    //         }
    //     ]
    //
    return this.parseBalance(response);
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['depth'] = limit;
    }
    const response = await this.publicGetOrderBookL2(this.extend(request, params));
    const result = {
      'symbol': symbol,
      'bids': [],
      'asks': [],
      'timestamp': undefined,
      'datetime': undefined,
      'nonce': undefined
    };
    for (let i = 0; i < response.length; i++) {
      const order = response[i];
      const side = order['side'] === 'Sell' ? 'asks' : 'bids';
      const amount = this.safeNumber(order, 'size');
      const price = this.safeNumber(order, 'price');
      // https://github.com/ccxt/ccxt/issues/4926
      // https://github.com/ccxt/ccxt/issues/4927
      // the exchange sometimes returns null price in the orderbook
      if (price !== undefined) {
        result[side].push([price, amount]);
      }
    }
    result['bids'] = this.sortBy(result['bids'], 0, true);
    result['asks'] = this.sortBy(result['asks'], 0);
    return result;
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string|undefined} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    const filter = {
      'filter': {
        'orderID': id
      }
    };
    const response = await this.fetchOrders(symbol, undefined, undefined, this.deepExtend(filter, params));
    const numResults = response.length;
    if (numResults === 1) {
      return response[0];
    }
    throw new _errors.OrderNotFound(this.id + ': The order ' + id + ' not found.');
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let request = {};
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['startTime'] = this.iso8601(since);
    }
    if (limit !== undefined) {
      request['count'] = limit;
    }
    request = this.deepExtend(request, params);
    // why the hassle? urlencode in python is kinda broken for nested dicts.
    // E.g. self.urlencode({"filter": {"open": True}}) will return "filter={'open':+True}"
    // Bitmex doesn't like that. Hence resorting to this hack.
    if ('filter' in request) {
      request['filter'] = this.json(request['filter']);
    }
    const response = await this.privateGetOrder(request);
    return this.parseOrders(response, market, since, limit);
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchOpenOrders
     * @description fetch all unfilled currently open orders
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch open orders for
     * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    const request = {
      'filter': {
        'open': true
      }
    };
    return await this.fetchOrders(symbol, since, limit, this.deepExtend(request, params));
  }
  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchClosedOrders
     * @description fetches information on multiple closed orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    // Bitmex barfs if you set 'open': false in the filter...
    const orders = await this.fetchOrders(symbol, since, limit, params);
    return this.filterBy(orders, 'status', 'closed');
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let request = {};
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['startTime'] = this.iso8601(since);
    }
    if (limit !== undefined) {
      request['count'] = limit;
    }
    request = this.deepExtend(request, params);
    // why the hassle? urlencode in python is kinda broken for nested dicts.
    // E.g. self.urlencode({"filter": {"open": True}}) will return "filter={'open':+True}"
    // Bitmex doesn't like that. Hence resorting to this hack.
    if ('filter' in request) {
      request['filter'] = this.json(request['filter']);
    }
    const response = await this.privateGetExecutionTradeHistory(request);
    //
    //     [
    //         {
    //             "execID": "string",
    //             "orderID": "string",
    //             "clOrdID": "string",
    //             "clOrdLinkID": "string",
    //             "account": 0,
    //             "symbol": "string",
    //             "side": "string",
    //             "lastQty": 0,
    //             "lastPx": 0,
    //             "underlyingLastPx": 0,
    //             "lastMkt": "string",
    //             "lastLiquidityInd": "string",
    //             "simpleOrderQty": 0,
    //             "orderQty": 0,
    //             "price": 0,
    //             "displayQty": 0,
    //             "stopPx": 0,
    //             "pegOffsetValue": 0,
    //             "pegPriceType": "string",
    //             "currency": "string",
    //             "settlCurrency": "string",
    //             "execType": "string",
    //             "ordType": "string",
    //             "timeInForce": "string",
    //             "execInst": "string",
    //             "contingencyType": "string",
    //             "exDestination": "string",
    //             "ordStatus": "string",
    //             "triggered": "string",
    //             "workingIndicator": true,
    //             "ordRejReason": "string",
    //             "simpleLeavesQty": 0,
    //             "leavesQty": 0,
    //             "simpleCumQty": 0,
    //             "cumQty": 0,
    //             "avgPx": 0,
    //             "commission": 0,
    //             "tradePublishIndicator": "string",
    //             "multiLegReportingType": "string",
    //             "text": "string",
    //             "trdMatchID": "string",
    //             "execCost": 0,
    //             "execComm": 0,
    //             "homeNotional": 0,
    //             "foreignNotional": 0,
    //             "transactTime": "2019-03-05T12:47:02.762Z",
    //             "timestamp": "2019-03-05T12:47:02.762Z"
    //         }
    //     ]
    //
    return this.parseTrades(response, market, since, limit);
  }
  parseLedgerEntryType(type) {
    const types = {
      'Withdrawal': 'transaction',
      'RealisedPNL': 'margin',
      'UnrealisedPNL': 'margin',
      'Deposit': 'transaction',
      'Transfer': 'transfer',
      'AffiliatePayout': 'referral'
    };
    return this.safeString(types, type, type);
  }
  parseLedgerEntry(item, currency = undefined) {
    //
    //     {
    //         transactID: "69573da3-7744-5467-3207-89fd6efe7a47",
    //         account:  24321,
    //         currency: "XBt",
    //         transactType: "Withdrawal", // "AffiliatePayout", "Transfer", "Deposit", "RealisedPNL", ...
    //         amount:  -1000000,
    //         fee:  300000,
    //         transactStatus: "Completed", // "Canceled", ...
    //         address: "1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9",
    //         tx: "3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA",
    //         text: "",
    //         transactTime: "2017-03-21T20:05:14.388Z",
    //         walletBalance:  0, // balance after
    //         marginBalance:  null,
    //         timestamp: "2017-03-22T13:09:23.514Z"
    //     }
    //
    // ButMEX returns the unrealized pnl from the wallet history endpoint.
    // The unrealized pnl transaction has an empty timestamp.
    // It is not related to historical pnl it has status set to "Pending".
    // Therefore it's not a part of the history at all.
    // https://github.com/ccxt/ccxt/issues/6047
    //
    //     {
    //         "transactID":"00000000-0000-0000-0000-000000000000",
    //         "account":121210,
    //         "currency":"XBt",
    //         "transactType":"UnrealisedPNL",
    //         "amount":-5508,
    //         "fee":0,
    //         "transactStatus":"Pending",
    //         "address":"XBTUSD",
    //         "tx":"",
    //         "text":"",
    //         "transactTime":null,  # ←---------------------------- null
    //         "walletBalance":139198767,
    //         "marginBalance":139193259,
    //         "timestamp":null  # ←---------------------------- null
    //     }
    //
    const id = this.safeString(item, 'transactID');
    const account = this.safeString(item, 'account');
    const referenceId = this.safeString(item, 'tx');
    const referenceAccount = undefined;
    const type = this.parseLedgerEntryType(this.safeString(item, 'transactType'));
    const currencyId = this.safeString(item, 'currency');
    const code = this.safeCurrencyCode(currencyId, currency);
    let amount = this.safeNumber(item, 'amount');
    if (amount !== undefined) {
      amount = amount / 100000000;
    }
    let timestamp = this.parse8601(this.safeString(item, 'transactTime'));
    if (timestamp === undefined) {
      // https://github.com/ccxt/ccxt/issues/6047
      // set the timestamp to zero, 1970 Jan 1 00:00:00
      // for unrealized pnl and other transactions without a timestamp
      timestamp = 0; // see comments above
    }

    let feeCost = this.safeNumber(item, 'fee', 0);
    if (feeCost !== undefined) {
      feeCost = feeCost / 100000000;
    }
    const fee = {
      'cost': feeCost,
      'currency': code
    };
    let after = this.safeNumber(item, 'walletBalance');
    if (after !== undefined) {
      after = after / 100000000;
    }
    const before = this.sum(after, -amount);
    let direction = undefined;
    if (amount < 0) {
      direction = 'out';
      amount = Math.abs(amount);
    } else {
      direction = 'in';
    }
    const status = this.parseTransactionStatus(this.safeString(item, 'transactStatus'));
    return {
      'id': id,
      'info': item,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'direction': direction,
      'account': account,
      'referenceId': referenceId,
      'referenceAccount': referenceAccount,
      'type': type,
      'currency': code,
      'amount': amount,
      'before': before,
      'after': after,
      'status': status,
      'fee': fee
    };
  }
  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
     * @param {string|undefined} code unified currency code, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
     * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    await this.loadMarkets();
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
    }
    const request = {
      // 'start': 123,
    };
    //
    //     if (since !== undefined) {
    //         // date-based pagination not supported
    //     }
    //
    if (limit !== undefined) {
      request['count'] = limit;
    }
    const response = await this.privateGetUserWalletHistory(this.extend(request, params));
    //
    //     [
    //         {
    //             transactID: "69573da3-7744-5467-3207-89fd6efe7a47",
    //             account:  24321,
    //             currency: "XBt",
    //             transactType: "Withdrawal", // "AffiliatePayout", "Transfer", "Deposit", "RealisedPNL", ...
    //             amount:  -1000000,
    //             fee:  300000,
    //             transactStatus: "Completed", // "Canceled", ...
    //             address: "1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9",
    //             tx: "3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA",
    //             text: "",
    //             transactTime: "2017-03-21T20:05:14.388Z",
    //             walletBalance:  0, // balance after
    //             marginBalance:  null,
    //             timestamp: "2017-03-22T13:09:23.514Z"
    //         }
    //     ]
    //
    return this.parseLedger(response, currency, since, limit);
  }
  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchTransactions
     * @description fetch history of deposits and withdrawals
     * @param {string|undefined} code unified currency code for the currency of the transactions, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest transaction, default is undefined
     * @param {int|undefined} limit max number of transactions to return, default is undefined
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    const request = {
      'currency': 'all'
      // 'start': 123,
    };
    //
    //     if (since !== undefined) {
    //         // date-based pagination not supported
    //     }
    //
    if (limit !== undefined) {
      request['count'] = limit;
    }
    const response = await this.privateGetUserWalletHistory(this.extend(request, params));
    const transactions = this.filterByArray(response, 'transactType', ['Withdrawal', 'Deposit'], false);
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
    }
    return this.parseTransactions(transactions, currency, since, limit);
  }
  parseTransactionStatus(status) {
    const statuses = {
      'Canceled': 'canceled',
      'Completed': 'ok',
      'Pending': 'pending'
    };
    return this.safeString(statuses, status, status);
  }
  parseTransaction(transaction, currency = undefined) {
    //
    //    {
    //        'transactID': 'ffe699c2-95ee-4c13-91f9-0faf41daec25',
    //        'account': 123456,
    //        'currency': 'XBt',
    //        'network':'',
    //        'transactType': 'Withdrawal',
    //        'amount': -100100000,
    //        'fee': 100000,
    //        'transactStatus': 'Completed',
    //        'address': '385cR5DM96n1HvBDMzLHPYcw89fZAXULJP',
    //        'tx': '3BMEXabcdefghijklmnopqrstuvwxyz123',
    //        'text': '',
    //        'transactTime': '2019-01-02T01:00:00.000Z',
    //        'walletBalance': 99900000,
    //        'marginBalance': None,
    //        'timestamp': '2019-01-02T13:00:00.000Z'
    //    }
    //
    const currencyId = this.safeString(transaction, 'currency');
    currency = this.safeCurrency(currencyId, currency);
    // For deposits, transactTime == timestamp
    // For withdrawals, transactTime is submission, timestamp is processed
    const transactTime = this.parse8601(this.safeString(transaction, 'transactTime'));
    const timestamp = this.parse8601(this.safeString(transaction, 'timestamp'));
    const type = this.safeStringLower(transaction, 'transactType');
    // Deposits have no from address or to address, withdrawals have both
    let address = undefined;
    let addressFrom = undefined;
    let addressTo = undefined;
    if (type === 'withdrawal') {
      address = this.safeString(transaction, 'address');
      addressFrom = this.safeString(transaction, 'tx');
      addressTo = address;
    }
    let amountString = this.safeString(transaction, 'amount');
    const scale = currency['code'] === 'BTC' ? '1e8' : '1e6';
    amountString = _Precise.Precise.stringDiv(_Precise.Precise.stringAbs(amountString), scale);
    let feeCostString = this.safeString(transaction, 'fee');
    feeCostString = _Precise.Precise.stringDiv(feeCostString, scale);
    let status = this.safeString(transaction, 'transactStatus');
    if (status !== undefined) {
      status = this.parseTransactionStatus(status);
    }
    return {
      'info': transaction,
      'id': this.safeString(transaction, 'transactID'),
      'txid': this.safeString(transaction, 'tx'),
      'type': type,
      'currency': currency['code'],
      'network': this.safeString(transaction, 'status'),
      'amount': this.parseNumber(amountString),
      'status': status,
      'timestamp': transactTime,
      'datetime': this.iso8601(transactTime),
      'address': address,
      'addressFrom': addressFrom,
      'addressTo': addressTo,
      'tag': undefined,
      'tagFrom': undefined,
      'tagTo': undefined,
      'updated': timestamp,
      'comment': undefined,
      'fee': {
        'currency': currency['code'],
        'cost': this.parseNumber(feeCostString),
        'rate': undefined
      }
    };
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name bitmex#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const tickers = await this.fetchTickers([market['symbol']], params);
    const ticker = this.safeValue(tickers, market['symbol']);
    if (ticker === undefined) {
      throw new _errors.BadSymbol(this.id + ' fetchTicker() symbol ' + symbol + ' not found');
    }
    return ticker;
  }
  async fetchTickers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchTickers
     * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const response = await this.publicGetInstrumentActiveAndIndices(params);
    //
    //     [
    //         {
    //             "symbol":".EVOL7D",
    //             "rootSymbol":"EVOL",
    //             "state":"Unlisted",
    //             "typ":"MRIXXX",
    //             "listing":null,
    //             "front":null,
    //             "expiry":null,
    //             "settle":null,
    //             "listedSettle":null,
    //             "relistInterval":null,
    //             "inverseLeg":"",
    //             "sellLeg":"",
    //             "buyLeg":"",
    //             "optionStrikePcnt":null,
    //             "optionStrikeRound":null,
    //             "optionStrikePrice":null,
    //             "optionMultiplier":null,
    //             "positionCurrency":"",
    //             "underlying":"ETH",
    //             "quoteCurrency":"XXX",
    //             "underlyingSymbol":".EVOL7D",
    //             "reference":"BMI",
    //             "referenceSymbol":".BETHXBT",
    //             "calcInterval":"2000-01-08T00:00:00.000Z",
    //             "publishInterval":"2000-01-01T00:05:00.000Z",
    //             "publishTime":null,
    //             "maxOrderQty":null,
    //             "maxPrice":null,
    //             "lotSize":null,
    //             "tickSize":0.01,
    //             "multiplier":null,
    //             "settlCurrency":"",
    //             "underlyingToPositionMultiplier":null,
    //             "underlyingToSettleMultiplier":null,
    //             "quoteToSettleMultiplier":null,
    //             "isQuanto":false,
    //             "isInverse":false,
    //             "initMargin":null,
    //             "maintMargin":null,
    //             "riskLimit":null,
    //             "riskStep":null,
    //             "limit":null,
    //             "capped":false,
    //             "taxed":false,
    //             "deleverage":false,
    //             "makerFee":null,
    //             "takerFee":null,
    //             "settlementFee":null,
    //             "insuranceFee":null,
    //             "fundingBaseSymbol":"",
    //             "fundingQuoteSymbol":"",
    //             "fundingPremiumSymbol":"",
    //             "fundingTimestamp":null,
    //             "fundingInterval":null,
    //             "fundingRate":null,
    //             "indicativeFundingRate":null,
    //             "rebalanceTimestamp":null,
    //             "rebalanceInterval":null,
    //             "openingTimestamp":null,
    //             "closingTimestamp":null,
    //             "sessionInterval":null,
    //             "prevClosePrice":null,
    //             "limitDownPrice":null,
    //             "limitUpPrice":null,
    //             "bankruptLimitDownPrice":null,
    //             "bankruptLimitUpPrice":null,
    //             "prevTotalVolume":null,
    //             "totalVolume":null,
    //             "volume":null,
    //             "volume24h":null,
    //             "prevTotalTurnover":null,
    //             "totalTurnover":null,
    //             "turnover":null,
    //             "turnover24h":null,
    //             "homeNotional24h":null,
    //             "foreignNotional24h":null,
    //             "prevPrice24h":5.27,
    //             "vwap":null,
    //             "highPrice":null,
    //             "lowPrice":null,
    //             "lastPrice":4.72,
    //             "lastPriceProtected":null,
    //             "lastTickDirection":"ZeroMinusTick",
    //             "lastChangePcnt":-0.1044,
    //             "bidPrice":null,
    //             "midPrice":null,
    //             "askPrice":null,
    //             "impactBidPrice":null,
    //             "impactMidPrice":null,
    //             "impactAskPrice":null,
    //             "hasLiquidity":false,
    //             "openInterest":null,
    //             "openValue":0,
    //             "fairMethod":"",
    //             "fairBasisRate":null,
    //             "fairBasis":null,
    //             "fairPrice":null,
    //             "markMethod":"LastPrice",
    //             "markPrice":4.72,
    //             "indicativeTaxRate":null,
    //             "indicativeSettlePrice":null,
    //             "optionUnderlyingPrice":null,
    //             "settledPriceAdjustmentRate":null,
    //             "settledPrice":null,
    //             "timestamp":"2022-05-21T04:30:00.000Z"
    //         }
    //     ]
    //
    const result = {};
    for (let i = 0; i < response.length; i++) {
      const ticker = this.parseTicker(response[i]);
      const symbol = this.safeString(ticker, 'symbol');
      if (symbol !== undefined) {
        result[symbol] = ticker;
      }
    }
    return this.filterByArray(result, 'symbol', symbols);
  }
  parseTicker(ticker, market = undefined) {
    //
    //     {                         symbol: "ETHH19",
    //                           rootSymbol: "ETH",
    //                                state: "Open",
    //                                  typ: "FFCCSX",
    //                              listing: "2018-12-17T04:00:00.000Z",
    //                                front: "2019-02-22T12:00:00.000Z",
    //                               expiry: "2019-03-29T12:00:00.000Z",
    //                               settle: "2019-03-29T12:00:00.000Z",
    //                       relistInterval:  null,
    //                           inverseLeg: "",
    //                              sellLeg: "",
    //                               buyLeg: "",
    //                     optionStrikePcnt:  null,
    //                    optionStrikeRound:  null,
    //                    optionStrikePrice:  null,
    //                     optionMultiplier:  null,
    //                     positionCurrency: "ETH",
    //                           underlying: "ETH",
    //                        quoteCurrency: "XBT",
    //                     underlyingSymbol: "ETHXBT=",
    //                            reference: "BMEX",
    //                      referenceSymbol: ".BETHXBT30M",
    //                         calcInterval:  null,
    //                      publishInterval:  null,
    //                          publishTime:  null,
    //                          maxOrderQty:  100000000,
    //                             maxPrice:  10,
    //                              lotSize:  1,
    //                             tickSize:  0.00001,
    //                           multiplier:  100000000,
    //                        settlCurrency: "XBt",
    //       underlyingToPositionMultiplier:  1,
    //         underlyingToSettleMultiplier:  null,
    //              quoteToSettleMultiplier:  100000000,
    //                             isQuanto:  false,
    //                            isInverse:  false,
    //                           initMargin:  0.02,
    //                          maintMargin:  0.01,
    //                            riskLimit:  5000000000,
    //                             riskStep:  5000000000,
    //                                limit:  null,
    //                               capped:  false,
    //                                taxed:  true,
    //                           deleverage:  true,
    //                             makerFee:  -0.0005,
    //                             takerFee:  0.0025,
    //                        settlementFee:  0,
    //                         insuranceFee:  0,
    //                    fundingBaseSymbol: "",
    //                   fundingQuoteSymbol: "",
    //                 fundingPremiumSymbol: "",
    //                     fundingTimestamp:  null,
    //                      fundingInterval:  null,
    //                          fundingRate:  null,
    //                indicativeFundingRate:  null,
    //                   rebalanceTimestamp:  null,
    //                    rebalanceInterval:  null,
    //                     openingTimestamp: "2019-02-13T08:00:00.000Z",
    //                     closingTimestamp: "2019-02-13T09:00:00.000Z",
    //                      sessionInterval: "2000-01-01T01:00:00.000Z",
    //                       prevClosePrice:  0.03347,
    //                       limitDownPrice:  null,
    //                         limitUpPrice:  null,
    //               bankruptLimitDownPrice:  null,
    //                 bankruptLimitUpPrice:  null,
    //                      prevTotalVolume:  1386531,
    //                          totalVolume:  1387062,
    //                               volume:  531,
    //                            volume24h:  17118,
    //                    prevTotalTurnover:  4741294246000,
    //                        totalTurnover:  4743103466000,
    //                             turnover:  1809220000,
    //                          turnover24h:  57919845000,
    //                      homeNotional24h:  17118,
    //                   foreignNotional24h:  579.19845,
    //                         prevPrice24h:  0.03349,
    //                                 vwap:  0.03383564,
    //                            highPrice:  0.03458,
    //                             lowPrice:  0.03329,
    //                            lastPrice:  0.03406,
    //                   lastPriceProtected:  0.03406,
    //                    lastTickDirection: "ZeroMinusTick",
    //                       lastChangePcnt:  0.017,
    //                             bidPrice:  0.03406,
    //                             midPrice:  0.034065,
    //                             askPrice:  0.03407,
    //                       impactBidPrice:  0.03406,
    //                       impactMidPrice:  0.034065,
    //                       impactAskPrice:  0.03407,
    //                         hasLiquidity:  true,
    //                         openInterest:  83679,
    //                            openValue:  285010674000,
    //                           fairMethod: "ImpactMidPrice",
    //                        fairBasisRate:  0,
    //                            fairBasis:  0,
    //                            fairPrice:  0.03406,
    //                           markMethod: "FairPrice",
    //                            markPrice:  0.03406,
    //                    indicativeTaxRate:  0,
    //                indicativeSettlePrice:  0.03406,
    //                optionUnderlyingPrice:  null,
    //                         settledPrice:  null,
    //                            timestamp: "2019-02-13T08:40:30.000Z",
    //     }
    //
    const marketId = this.safeString(ticker, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const timestamp = this.parse8601(this.safeString(ticker, 'timestamp'));
    const open = this.safeString(ticker, 'prevPrice24h');
    const last = this.safeString(ticker, 'lastPrice');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.safeString(ticker, 'highPrice'),
      'low': this.safeString(ticker, 'lowPrice'),
      'bid': this.safeString(ticker, 'bidPrice'),
      'bidVolume': undefined,
      'ask': this.safeString(ticker, 'askPrice'),
      'askVolume': undefined,
      'vwap': this.safeString(ticker, 'vwap'),
      'mark': this.safeString(ticker, 'markPrice'),
      'open': open,
      'close': last,
      'last': last,
      'previousClose': undefined,
      'change': undefined,
      'percentage': undefined,
      'average': undefined,
      'baseVolume': this.safeString(ticker, 'homeNotional24h'),
      'quoteVolume': this.safeString(ticker, 'foreignNotional24h'),
      'info': ticker
    }, market);
  }
  parseOHLCV(ohlcv, market = undefined) {
    //
    //     {
    //         "timestamp":"2015-09-25T13:38:00.000Z",
    //         "symbol":"XBTUSD",
    //         "open":237.45,
    //         "high":237.45,
    //         "low":237.45,
    //         "close":237.45,
    //         "trades":0,
    //         "volume":0,
    //         "vwap":null,
    //         "lastSize":null,
    //         "turnover":0,
    //         "homeNotional":0,
    //         "foreignNotional":0
    //     }
    //
    return [this.parse8601(this.safeString(ohlcv, 'timestamp')), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'volume')];
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'resolution': this.timeframes[timeframe],
      'from': since / 1000
    };
    const parsedTimeFrame = this.parseTimeframe(timeframe);
    const duration = parsedTimeFrame * 1000 * limit;
    const to = this.sum(since, duration);
    request['to'] = to / 1000;
    const response = await this.publicGetUdfHistory(this.extend(request, params));
    const res = [];
    if (response.s === 'ok') {
      const length = response.t.length;
      for (let i = 0; i < length; i++) {
        res.push([response.t[i] * 1000, response.o[i], response.h[i], response.l[i], response.c[i], response.v[i]]);
      }
    } else {
      throw response.s;
    }
    return res;
  }
  parseTrade(trade, market = undefined) {
    //
    // fetchTrades (public)
    //
    //     {
    //         timestamp: '2018-08-28T00:00:02.735Z',
    //         symbol: 'XBTUSD',
    //         side: 'Buy',
    //         size: 2000,
    //         price: 6906.5,
    //         tickDirection: 'PlusTick',
    //         trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',
    //         grossValue: 28958000,
    //         homeNotional: 0.28958,
    //         foreignNotional: 2000
    //     }
    //
    // fetchMyTrades (private)
    //
    //     {
    //         "execID": "string",
    //         "orderID": "string",
    //         "clOrdID": "string",
    //         "clOrdLinkID": "string",
    //         "account": 0,
    //         "symbol": "string",
    //         "side": "string",
    //         "lastQty": 0,
    //         "lastPx": 0,
    //         "underlyingLastPx": 0,
    //         "lastMkt": "string",
    //         "lastLiquidityInd": "string",
    //         "simpleOrderQty": 0,
    //         "orderQty": 0,
    //         "price": 0,
    //         "displayQty": 0,
    //         "stopPx": 0,
    //         "pegOffsetValue": 0,
    //         "pegPriceType": "string",
    //         "currency": "string",
    //         "settlCurrency": "string",
    //         "execType": "string",
    //         "ordType": "string",
    //         "timeInForce": "string",
    //         "execInst": "string",
    //         "contingencyType": "string",
    //         "exDestination": "string",
    //         "ordStatus": "string",
    //         "triggered": "string",
    //         "workingIndicator": true,
    //         "ordRejReason": "string",
    //         "simpleLeavesQty": 0,
    //         "leavesQty": 0,
    //         "simpleCumQty": 0,
    //         "cumQty": 0,
    //         "avgPx": 0,
    //         "commission": 0,
    //         "tradePublishIndicator": "string",
    //         "multiLegReportingType": "string",
    //         "text": "string",
    //         "trdMatchID": "string",
    //         "execCost": 0,
    //         "execComm": 0,
    //         "homeNotional": 0,
    //         "foreignNotional": 0,
    //         "transactTime": "2019-03-05T12:47:02.762Z",
    //         "timestamp": "2019-03-05T12:47:02.762Z"
    //     }
    //
    const timestamp = this.parse8601(this.safeString(trade, 'timestamp'));
    const priceString = this.safeString2(trade, 'avgPx', 'price');
    const amountString = this.safeString2(trade, 'size', 'lastQty');
    const execCost = this.safeString(trade, 'execCost');
    const costString = _Precise.Precise.stringDiv(_Precise.Precise.stringAbs(execCost), '1e8');
    const id = this.safeString(trade, 'trdMatchID');
    const order = this.safeString(trade, 'orderID');
    const side = this.safeStringLower(trade, 'side');
    // price * amount doesn't work for all symbols (e.g. XBT, ETH)
    let fee = undefined;
    const feeCostString = _Precise.Precise.stringDiv(this.safeString(trade, 'execComm'), '1e8');
    if (feeCostString !== undefined) {
      const currencyId = this.safeString(trade, 'settlCurrency');
      const feeCurrencyCode = this.safeCurrencyCode(currencyId);
      const feeRateString = this.safeString(trade, 'commission');
      fee = {
        'cost': feeCostString,
        'currency': feeCurrencyCode,
        'rate': feeRateString
      };
    }
    // Trade or Funding
    const execType = this.safeString(trade, 'execType');
    let takerOrMaker = undefined;
    if (feeCostString !== undefined && execType === 'Trade') {
      takerOrMaker = _Precise.Precise.stringLt(feeCostString, '0') ? 'maker' : 'taker';
    }
    const marketId = this.safeString(trade, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const type = this.safeStringLower(trade, 'ordType');
    return this.safeTrade({
      'info': trade,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'id': id,
      'order': order,
      'type': type,
      'takerOrMaker': takerOrMaker,
      'side': side,
      'price': priceString,
      'cost': costString,
      'amount': amountString,
      'fee': fee
    }, market);
  }
  parseOrderStatus(status) {
    const statuses = {
      'New': 'open',
      'PartiallyFilled': 'open',
      'Filled': 'closed',
      'DoneForDay': 'open',
      'Canceled': 'canceled',
      'PendingCancel': 'open',
      'PendingNew': 'open',
      'Rejected': 'rejected',
      'Expired': 'expired',
      'Stopped': 'open',
      'Untriggered': 'open',
      'Triggered': 'open'
    };
    return this.safeString(statuses, status, status);
  }
  parseTimeInForce(timeInForce) {
    const timeInForces = {
      'Day': 'Day',
      'GoodTillCancel': 'GTC',
      'ImmediateOrCancel': 'IOC',
      'FillOrKill': 'FOK'
    };
    return this.safeString(timeInForces, timeInForce, timeInForce);
  }
  parseOrder(order, market = undefined) {
    //
    //     {
    //         "orderID":"56222c7a-9956-413a-82cf-99f4812c214b",
    //         "clOrdID":"",
    //         "clOrdLinkID":"",
    //         "account":1455728,
    //         "symbol":"XBTUSD",
    //         "side":"Sell",
    //         "simpleOrderQty":null,
    //         "orderQty":1,
    //         "price":40000,
    //         "displayQty":null,
    //         "stopPx":null,
    //         "pegOffsetValue":null,
    //         "pegPriceType":"",
    //         "currency":"USD",
    //         "settlCurrency":"XBt",
    //         "ordType":"Limit",
    //         "timeInForce":"GoodTillCancel",
    //         "execInst":"",
    //         "contingencyType":"",
    //         "exDestination":"XBME",
    //         "ordStatus":"New",
    //         "triggered":"",
    //         "workingIndicator":true,
    //         "ordRejReason":"",
    //         "simpleLeavesQty":null,
    //         "leavesQty":1,
    //         "simpleCumQty":null,
    //         "cumQty":0,
    //         "avgPx":null,
    //         "multiLegReportingType":"SingleSecurity",
    //         "text":"Submitted via API.",
    //         "transactTime":"2021-01-02T21:38:49.246Z",
    //         "timestamp":"2021-01-02T21:38:49.246Z"
    //     }
    //
    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
    const marketId = this.safeString(order, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const timestamp = this.parse8601(this.safeString(order, 'timestamp'));
    const lastTradeTimestamp = this.parse8601(this.safeString(order, 'transactTime'));
    const price = this.safeString(order, 'price');
    const amount = this.safeString(order, 'orderQty');
    const filled = this.safeString(order, 'cumQty');
    const average = this.safeString(order, 'avgPx');
    const id = this.safeString(order, 'orderID');
    const type = this.safeStringLower(order, 'ordType');
    const side = this.safeStringLower(order, 'side');
    const clientOrderId = this.safeString(order, 'clOrdID');
    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
    const stopPrice = this.safeNumber(order, 'stopPx');
    const execInst = this.safeString(order, 'execInst', '');
    let reduceOnly = false;
    let close = false;
    let postOnly = false;
    if (execInst.indexOf('ReduceOnly') >= 0 || execInst.indexOf('Close') >= 0) {
      reduceOnly = true;
      close = true;
    }
    if (execInst.indexOf('ParticipateDoNotInitiate') >= 0) {
      postOnly = true;
    }
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': postOnly,
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': stopPrice,
      'amount': amount,
      'cost': undefined,
      'average': average,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': undefined,
      'close': close,
      'reduceOnly': reduceOnly,
      'trades': undefined
    }, market);
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (since !== undefined) {
      request['startTime'] = this.iso8601(since);
    } else {
      // by default reverse=false, i.e. trades are fetched since the time of market inception (year 2015 for XBTUSD)
      request['reverse'] = true;
    }
    if (limit !== undefined) {
      request['count'] = limit;
    }
    const response = await this.publicGetTrade(this.extend(request, params));
    //
    //     [
    //         {
    //             timestamp: '2018-08-28T00:00:02.735Z',
    //             symbol: 'XBTUSD',
    //             side: 'Buy',
    //             size: 2000,
    //             price: 6906.5,
    //             tickDirection: 'PlusTick',
    //             trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',
    //             grossValue: 28958000,
    //             homeNotional: 0.28958,
    //             foreignNotional: 2000
    //         },
    //         {
    //             timestamp: '2018-08-28T00:00:03.778Z',
    //             symbol: 'XBTUSD',
    //             side: 'Sell',
    //             size: 1000,
    //             price: 6906,
    //             tickDirection: 'MinusTick',
    //             trdMatchID: '0d4f1682-5270-a800-569b-4a0eb92db97c',
    //             grossValue: 14480000,
    //             homeNotional: 0.1448,
    //             foreignNotional: 1000
    //         },
    //     ]
    //
    return this.parseTrades(response, market, since, limit);
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#createOrder
     * @description create a trade order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    let orderType = this.capitalize(type);
    const reduceOnly = this.safeValue(params, 'reduceOnly');
    if (reduceOnly !== undefined) {
      if (market['type'] !== 'swap' && market['type'] !== 'future') {
        throw new _errors.InvalidOrder(this.id + ' createOrder() does not support reduceOnly for ' + market['type'] + ' orders, reduceOnly orders are supported for swap and future markets only');
      }
    }
    const brokerId = this.safeString(this.options, 'brokerId', 'CCXT');
    // TEALSTREET
    let timeInForce = this.safeValue(params, 'timeInForce', 'GTC');
    const trigger = this.safeValue(params, 'trigger', undefined);
    const closeOnTrigger = this.safeValue2(params, 'closeOnTrigger', 'close', false);
    const execInstValues = [];
    if (timeInForce === 'ParticipateDoNotInitiate') {
      execInstValues.push('ParticipateDoNotInitiate');
      timeInForce = undefined;
    }
    if (trigger !== undefined) {
      execInstValues.push(this.capitalize(trigger) + 'Price');
    }
    if (closeOnTrigger) {
      execInstValues.push('Close');
    }
    if (reduceOnly) {
      execInstValues.push('ReduceOnly');
    }
    params = this.omit(params, ['reduceOnly', 'timeInForce', 'trigger', 'closeOnTrigger']);
    const request = {
      'symbol': market['id'],
      'side': this.capitalize(side),
      'orderQty': parseFloat(this.amountToPrecision(symbol, amount)),
      'timeInForce': timeInForce,
      'text': brokerId,
      'clOrdID': brokerId + this.uuid22(22),
      'execInst': execInstValues.join(',')
    };
    if (orderType === 'Stop' || orderType === 'StopLimit' || orderType === 'MarketIfTouched' || orderType === 'LimitIfTouched') {
      const stopPrice = this.safeNumber2(params, 'stopPx', 'stopPrice');
      if (stopPrice === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' createOrder() requires a stopPx or stopPrice parameter for the ' + orderType + ' order type');
      } else {
        request['stopPx'] = parseFloat(this.priceToPrecision(symbol, stopPrice));
        params = this.omit(params, ['stopPx', 'stopPrice']);
      }
      let basePrice = this.safeValue(params, 'basePrice');
      if (basePrice === undefined || basePrice === 0.0) {
        const ticker = this.fetchTicker(symbol);
        basePrice = ticker['last'];
      }
      if (side === 'buy' && stopPrice < basePrice || side === 'sell' && stopPrice > basePrice) {
        if (orderType === 'Stop') {
          orderType = 'MarketIfTouched';
        } else if (orderType === 'StopLimit') {
          orderType = 'LimitIfTouched';
        }
      }
    }
    if (price !== undefined && orderType === 'Stop') {
      orderType = 'StopLimit';
    }
    if (orderType === 'Limit' || orderType === 'StopLimit' || orderType === 'LimitIfTouched') {
      request['price'] = parseFloat(this.priceToPrecision(symbol, price));
    }
    const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
    if (clientOrderId !== undefined) {
      request['clOrdID'] = clientOrderId;
      params = this.omit(params, ['clOrdID', 'clientOrderId']);
    }
    request['ordType'] = orderType;
    if (request['ordType'] === 'Market' && request['execInst'] === 'Close,ReduceOnly') {
      request['execInst'] = 'ReduceOnly';
    }
    const response = await this.privatePostOrder(this.extend(request, params));
    return this.parseOrder(response, market);
  }
  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    const origClOrdID = this.safeString2(params, 'origClOrdID', 'clientOrderId');
    if (origClOrdID !== undefined) {
      request['origClOrdID'] = origClOrdID;
      const clientOrderId = this.safeString(params, 'clOrdID', 'clientOrderId');
      if (clientOrderId !== undefined) {
        request['clOrdID'] = clientOrderId;
      }
      params = this.omit(params, ['origClOrdID', 'clOrdID', 'clientOrderId']);
    } else {
      request['orderID'] = id;
    }
    if (amount !== undefined) {
      request['orderQty'] = amount;
    }
    if (price !== undefined) {
      request['price'] = price;
    }
    const brokerId = this.safeString(this.options, 'brokerId', 'CCXT');
    request['text'] = brokerId;
    const stopPrice = this.safeNumber2(params, 'stopPx', 'stopPrice');
    if (stopPrice !== undefined) {
      request['stopPx'] = parseFloat(this.priceToPrecision(symbol, stopPrice));
    }
    const response = await this.privatePutOrder(this.extend(request, params));
    return this.parseOrder(response);
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string|undefined} symbol not used by bitmex cancelOrder ()
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    // https://github.com/ccxt/ccxt/issues/6507
    const clientOrderId = this.safeValue2(params, 'clOrdID', 'clientOrderId');
    const request = {};
    if (clientOrderId === undefined) {
      request['orderID'] = id;
    } else {
      request['clOrdID'] = clientOrderId;
      params = this.omit(params, ['clOrdID', 'clientOrderId']);
    }
    const response = await this.privateDeleteOrder(this.extend(request, params));
    const order = this.safeValue(response, 0, {});
    const error = this.safeString(order, 'error');
    if (error !== undefined) {
      if (error.indexOf('Unable to cancel order due to existing state') >= 0) {
        throw new _errors.OrderNotFound(this.id + ' cancelOrder() failed: ' + error);
      }
    }
    return this.parseOrder(order);
  }
  async cancelOrders(ids, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#cancelOrders
     * @description cancel multiple orders
     * @param {[string]} ids order ids
     * @param {string|undefined} symbol not used by bitmex cancelOrders ()
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    // return await this.cancelOrder (ids, symbol, params);
    await this.loadMarkets();
    // https://github.com/ccxt/ccxt/issues/6507
    const clientOrderId = this.safeValue2(params, 'clOrdID', 'clientOrderId');
    const request = {};
    if (clientOrderId === undefined) {
      request['orderID'] = ids;
    } else {
      request['clOrdID'] = clientOrderId;
      params = this.omit(params, ['clOrdID', 'clientOrderId']);
    }
    const response = await this.privateDeleteOrder(this.extend(request, params));
    return this.parseOrders(response);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#cancelAllOrders
     * @description cancel all open orders
     * @param {string|undefined} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    const response = await this.privateDeleteOrderAll(this.extend(request, params));
    //
    //     [
    //         {
    //             "orderID": "string",
    //             "clOrdID": "string",
    //             "clOrdLinkID": "string",
    //             "account": 0,
    //             "symbol": "string",
    //             "side": "string",
    //             "simpleOrderQty": 0,
    //             "orderQty": 0,
    //             "price": 0,
    //             "displayQty": 0,
    //             "stopPx": 0,
    //             "pegOffsetValue": 0,
    //             "pegPriceType": "string",
    //             "currency": "string",
    //             "settlCurrency": "string",
    //             "ordType": "string",
    //             "timeInForce": "string",
    //             "execInst": "string",
    //             "contingencyType": "string",
    //             "exDestination": "string",
    //             "ordStatus": "string",
    //             "triggered": "string",
    //             "workingIndicator": true,
    //             "ordRejReason": "string",
    //             "simpleLeavesQty": 0,
    //             "leavesQty": 0,
    //             "simpleCumQty": 0,
    //             "cumQty": 0,
    //             "avgPx": 0,
    //             "multiLegReportingType": "string",
    //             "text": "string",
    //             "transactTime": "2020-06-01T09:36:35.290Z",
    //             "timestamp": "2020-06-01T09:36:35.290Z"
    //         }
    //     ]
    //
    return this.parseOrders(response, market);
  }
  async fetchPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchPositions
     * @description fetch all open positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    await this.loadMarkets();
    const response = await this.privateGetPosition(params);
    //
    //     [
    //         {
    //             "account": 0,
    //             "symbol": "string",
    //             "currency": "string",
    //             "underlying": "string",
    //             "quoteCurrency": "string",
    //             "commission": 0,
    //             "initMarginReq": 0,
    //             "maintMarginReq": 0,
    //             "riskLimit": 0,
    //             "leverage": 0,
    //             "crossMargin": true,
    //             "deleveragePercentile": 0,
    //             "rebalancedPnl": 0,
    //             "prevRealisedPnl": 0,
    //             "prevUnrealisedPnl": 0,
    //             "prevClosePrice": 0,
    //             "openingTimestamp": "2020-11-09T06:53:59.892Z",
    //             "openingQty": 0,
    //             "openingCost": 0,
    //             "openingComm": 0,
    //             "openOrderBuyQty": 0,
    //             "openOrderBuyCost": 0,
    //             "openOrderBuyPremium": 0,
    //             "openOrderSellQty": 0,
    //             "openOrderSellCost": 0,
    //             "openOrderSellPremium": 0,
    //             "execBuyQty": 0,
    //             "execBuyCost": 0,
    //             "execSellQty": 0,
    //             "execSellCost": 0,
    //             "execQty": 0,
    //             "execCost": 0,
    //             "execComm": 0,
    //             "currentTimestamp": "2020-11-09T06:53:59.893Z",
    //             "currentQty": 0,
    //             "currentCost": 0,
    //             "currentComm": 0,
    //             "realisedCost": 0,
    //             "unrealisedCost": 0,
    //             "grossOpenCost": 0,
    //             "grossOpenPremium": 0,
    //             "grossExecCost": 0,
    //             "isOpen": true,
    //             "markPrice": 0,
    //             "markValue": 0,
    //             "riskValue": 0,
    //             "homeNotional": 0,
    //             "foreignNotional": 0,
    //             "posState": "string",
    //             "posCost": 0,
    //             "posCost2": 0,
    //             "posCross": 0,
    //             "posInit": 0,
    //             "posComm": 0,
    //             "posLoss": 0,
    //             "posMargin": 0,
    //             "posMaint": 0,
    //             "posAllowance": 0,
    //             "taxableMargin": 0,
    //             "initMargin": 0,
    //             "maintMargin": 0,
    //             "sessionMargin": 0,
    //             "targetExcessMargin": 0,
    //             "varMargin": 0,
    //             "realisedGrossPnl": 0,
    //             "realisedTax": 0,
    //             "realisedPnl": 0,
    //             "unrealisedGrossPnl": 0,
    //             "longBankrupt": 0,
    //             "shortBankrupt": 0,
    //             "taxBase": 0,
    //             "indicativeTaxRate": 0,
    //             "indicativeTax": 0,
    //             "unrealisedTax": 0,
    //             "unrealisedPnl": 0,
    //             "unrealisedPnlPcnt": 0,
    //             "unrealisedRoePcnt": 0,
    //             "simpleQty": 0,
    //             "simpleCost": 0,
    //             "simpleValue": 0,
    //             "simplePnl": 0,
    //             "simplePnlPcnt": 0,
    //             "avgCostPrice": 0,
    //             "avgEntryPrice": 0,
    //             "breakEvenPrice": 0,
    //             "marginCallPrice": 0,
    //             "liquidationPrice": 0,
    //             "bankruptPrice": 0,
    //             "timestamp": "2020-11-09T06:53:59.894Z",
    //             "lastPrice": 0,
    //             "lastValue": 0
    //         }
    //     ]
    //
    return this.parsePositions(response, symbols);
  }
  parsePosition(position, market = undefined) {
    //
    //     {
    //         "account": 9371654,
    //         "symbol": "ETHUSDT",
    //         "currency": "USDt",
    //         "underlying": "ETH",
    //         "quoteCurrency": "USDT",
    //         "commission": 0.00075,
    //         "initMarginReq": 0.3333333333333333,
    //         "maintMarginReq": 0.01,
    //         "riskLimit": 1000000000000,
    //         "leverage": 3,
    //         "crossMargin": false,
    //         "deleveragePercentile": 1,
    //         "rebalancedPnl": 0,
    //         "prevRealisedPnl": 0,
    //         "prevUnrealisedPnl": 0,
    //         "prevClosePrice": 2053.738,
    //         "openingTimestamp": "2022-05-21T04:00:00.000Z",
    //         "openingQty": 0,
    //         "openingCost": 0,
    //         "openingComm": 0,
    //         "openOrderBuyQty": 0,
    //         "openOrderBuyCost": 0,
    //         "openOrderBuyPremium": 0,
    //         "openOrderSellQty": 0,
    //         "openOrderSellCost": 0,
    //         "openOrderSellPremium": 0,
    //         "execBuyQty": 2000,
    //         "execBuyCost": 39260000,
    //         "execSellQty": 0,
    //         "execSellCost": 0,
    //         "execQty": 2000,
    //         "execCost": 39260000,
    //         "execComm": 26500,
    //         "currentTimestamp": "2022-05-21T04:35:16.397Z",
    //         "currentQty": 2000,
    //         "currentCost": 39260000,
    //         "currentComm": 26500,
    //         "realisedCost": 0,
    //         "unrealisedCost": 39260000,
    //         "grossOpenCost": 0,
    //         "grossOpenPremium": 0,
    //         "grossExecCost": 39260000,
    //         "isOpen": true,
    //         "markPrice": 1964.195,
    //         "markValue": 39283900,
    //         "riskValue": 39283900,
    //         "homeNotional": 0.02,
    //         "foreignNotional": -39.2839,
    //         "posState": "",
    //         "posCost": 39260000,
    //         "posCost2": 39260000,
    //         "posCross": 0,
    //         "posInit": 13086667,
    //         "posComm": 39261,
    //         "posLoss": 0,
    //         "posMargin": 13125928,
    //         "posMaint": 435787,
    //         "posAllowance": 0,
    //         "taxableMargin": 0,
    //         "initMargin": 0,
    //         "maintMargin": 13149828,
    //         "sessionMargin": 0,
    //         "targetExcessMargin": 0,
    //         "varMargin": 0,
    //         "realisedGrossPnl": 0,
    //         "realisedTax": 0,
    //         "realisedPnl": -26500,
    //         "unrealisedGrossPnl": 23900,
    //         "longBankrupt": 0,
    //         "shortBankrupt": 0,
    //         "taxBase": 0,
    //         "indicativeTaxRate": null,
    //         "indicativeTax": 0,
    //         "unrealisedTax": 0,
    //         "unrealisedPnl": 23900,
    //         "unrealisedPnlPcnt": 0.0006,
    //         "unrealisedRoePcnt": 0.0018,
    //         "simpleQty": null,
    //         "simpleCost": null,
    //         "simpleValue": null,
    //         "simplePnl": null,
    //         "simplePnlPcnt": null,
    //         "avgCostPrice": 1963,
    //         "avgEntryPrice": 1963,
    //         "breakEvenPrice": 1964.35,
    //         "marginCallPrice": 1328.5,
    //         "liquidationPrice": 1328.5,
    //         "bankruptPrice": 1308.7,
    //         "timestamp": "2022-05-21T04:35:16.397Z",
    //         "lastPrice": 1964.195,
    //         "lastValue": 39283900
    //     }
    //
    market = this.safeMarket(this.safeString(position, 'symbol'), market);
    const symbol = market['symbol'];
    const datetime = this.safeString(position, 'timestamp');
    const crossMargin = this.safeValue(position, 'crossMargin');
    const marginMode = crossMargin === true ? 'cross' : 'isolated';
    let notional = undefined;
    if (market['quote'] === 'USDT' || market['quote'] === 'USD' || market['quote'] === 'EUR') {
      notional = _Precise.Precise.stringMul(this.safeString(position, 'foreignNotional'), '-1');
    } else {
      notional = this.safeString(position, 'homeNotional');
    }
    const maintenanceMargin = this.safeNumber(position, 'maintMargin');
    const unrealisedPnl = this.safeNumber(position, 'unrealisedPnl');
    const rebalancedPnl = this.safeNumber(position, 'rebalancedPnl');
    const contracts = this.omitZero(this.safeNumber(position, 'currentQty'));
    const side = contracts === undefined || contracts > 0 ? 'long' : 'short';
    return {
      'info': position,
      'id': symbol,
      'symbol': symbol,
      'timestamp': this.parse8601(datetime),
      'datetime': datetime,
      'hedged': undefined,
      'side': side,
      'contracts': this.parseNumber(contracts),
      'entryPrice': this.safeNumber(position, 'avgCostPrice'),
      'markPrice': this.safeNumber(position, 'markPrice'),
      'notional': notional,
      'leverage': this.safeNumber(position, 'leverage'),
      'collateral': undefined,
      'initialMargin': this.safeNumber(position, 'initMargin'),
      'initialMarginPercentage': this.safeNumber(position, 'initMarginReq'),
      'maintenanceMargin': this.convertValue(maintenanceMargin, market),
      'maintenanceMarginPercentage': this.safeNumber(position, 'maintMarginReq'),
      'unrealizedPnl': this.convertValue(unrealisedPnl, market),
      'rebalancedPnl': this.convertValue(rebalancedPnl, market),
      'liquidationPrice': this.safeNumber(position, 'liquidationPrice'),
      'marginMode': marginMode,
      'marginRatio': undefined,
      'percentage': this.safeNumber(position, 'unrealisedPnlPcnt')
    };
  }
  convertValue(value, market = undefined) {
    if (value === undefined || market === undefined) {
      return value;
    }
    let resultValue = undefined;
    value = this.numberToString(value);
    if (market['quote'] === 'USD' || market['quote'] === 'EUR') {
      resultValue = _Precise.Precise.stringMul(value, '0.00000001');
    } else if (market['quote'] === 'USDT') {
      resultValue = _Precise.Precise.stringMul(value, '0.000001');
    } else {
      let currency = undefined;
      const quote = market['quote'];
      if (quote !== undefined) {
        currency = this.currency(market['quote']);
      }
      if (currency !== undefined) {
        resultValue = _Precise.Precise.stringMul(value, this.numberToString(currency['precision']));
      }
    }
    resultValue = resultValue !== undefined ? parseFloat(resultValue) : undefined;
    return resultValue;
  }
  isFiat(currency) {
    if (currency === 'EUR') {
      return true;
    }
    if (currency === 'PLN') {
      return true;
    }
    return false;
  }
  async withdraw(code, amount, address, tag = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#withdraw
     * @description make a withdrawal
     * @param {string} code unified currency code
     * @param {float} amount the amount to withdraw
     * @param {string} address the address to withdraw to
     * @param {string|undefined} tag
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    [tag, params] = this.handleWithdrawTagAndParams(tag, params);
    this.checkAddress(address);
    await this.loadMarkets();
    // let currency = this.currency (code);
    if (code !== 'BTC') {
      throw new _errors.ExchangeError(this.id + ' supoprts BTC withdrawals only, other currencies coming soon...');
    }
    const currency = this.currency(code);
    const request = {
      'currency': 'XBt',
      'amount': amount,
      'address': address
      // 'otpToken': '123456', // requires if two-factor auth (OTP) is enabled
      // 'fee': 0.001, // bitcoin network fee
    };

    const response = await this.privatePostUserRequestWithdrawal(this.extend(request, params));
    return this.parseTransaction(response, currency);
  }
  async fetchFundingRates(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchFundingRates
     * @description fetch the funding rate for multiple markets
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a dictionary of [funding rates structures]{@link https://docs.ccxt.com/#/?id=funding-rates-structure}, indexe by market symbols
     */
    await this.loadMarkets();
    const response = await this.publicGetInstrumentActiveAndIndices(params);
    //
    //    [
    //        {
    //            "symbol": "LTCUSDT",
    //            "rootSymbol": "LTC",
    //            "state": "Open",
    //            "typ": "FFWCSX",
    //            "listing": "2021-11-10T04:00:00.000Z",
    //            "front": "2021-11-10T04:00:00.000Z",
    //            "expiry": null,
    //            "settle": null,
    //            "listedSettle": null,
    //            "relistInterval": null,
    //            "inverseLeg": "",
    //            "sellLeg": "",
    //            "buyLeg": "",
    //            "optionStrikePcnt": null,
    //            "optionStrikeRound": null,
    //            "optionStrikePrice": null,
    //            "optionMultiplier": null,
    //            "positionCurrency": "LTC",
    //            "underlying": "LTC",
    //            "quoteCurrency": "USDT",
    //            "underlyingSymbol": "LTCT=",
    //            "reference": "BMEX",
    //            "referenceSymbol": ".BLTCT",
    //            "calcInterval": null,
    //            "publishInterval": null,
    //            "publishTime": null,
    //            "maxOrderQty": 1000000000,
    //            "maxPrice": 1000000,
    //            "lotSize": 1000,
    //            "tickSize": 0.01,
    //            "multiplier": 100,
    //            "settlCurrency": "USDt",
    //            "underlyingToPositionMultiplier": 10000,
    //            "underlyingToSettleMultiplier": null,
    //            "quoteToSettleMultiplier": 1000000,
    //            "isQuanto": false,
    //            "isInverse": false,
    //            "initMargin": 0.03,
    //            "maintMargin": 0.015,
    //            "riskLimit": 1000000000000,
    //            "riskStep": 1000000000000,
    //            "limit": null,
    //            "capped": false,
    //            "taxed": true,
    //            "deleverage": true,
    //            "makerFee": -0.0001,
    //            "takerFee": 0.0005,
    //            "settlementFee": 0,
    //            "insuranceFee": 0,
    //            "fundingBaseSymbol": ".LTCBON8H",
    //            "fundingQuoteSymbol": ".USDTBON8H",
    //            "fundingPremiumSymbol": ".LTCUSDTPI8H",
    //            "fundingTimestamp": "2022-01-14T20:00:00.000Z",
    //            "fundingInterval": "2000-01-01T08:00:00.000Z",
    //            "fundingRate": 0.0001,
    //            "indicativeFundingRate": 0.0001,
    //            "rebalanceTimestamp": null,
    //            "rebalanceInterval": null,
    //            "openingTimestamp": "2022-01-14T17:00:00.000Z",
    //            "closingTimestamp": "2022-01-14T18:00:00.000Z",
    //            "sessionInterval": "2000-01-01T01:00:00.000Z",
    //            "prevClosePrice": 138.511,
    //            "limitDownPrice": null,
    //            "limitUpPrice": null,
    //            "bankruptLimitDownPrice": null,
    //            "bankruptLimitUpPrice": null,
    //            "prevTotalVolume": 12699024000,
    //            "totalVolume": 12702160000,
    //            "volume": 3136000,
    //            "volume24h": 114251000,
    //            "prevTotalTurnover": 232418052349000,
    //            "totalTurnover": 232463353260000,
    //            "turnover": 45300911000,
    //            "turnover24h": 1604331340000,
    //            "homeNotional24h": 11425.1,
    //            "foreignNotional24h": 1604331.3400000003,
    //            "prevPrice24h": 135.48,
    //            "vwap": 140.42165,
    //            "highPrice": 146.42,
    //            "lowPrice": 135.08,
    //            "lastPrice": 144.36,
    //            "lastPriceProtected": 144.36,
    //            "lastTickDirection": "MinusTick",
    //            "lastChangePcnt": 0.0655,
    //            "bidPrice": 143.75,
    //            "midPrice": 143.855,
    //            "askPrice": 143.96,
    //            "impactBidPrice": 143.75,
    //            "impactMidPrice": 143.855,
    //            "impactAskPrice": 143.96,
    //            "hasLiquidity": true,
    //            "openInterest": 38103000,
    //            "openValue": 547963053300,
    //            "fairMethod": "FundingRate",
    //            "fairBasisRate": 0.1095,
    //            "fairBasis": 0.004,
    //            "fairPrice": 143.811,
    //            "markMethod": "FairPrice",
    //            "markPrice": 143.811,
    //            "indicativeTaxRate": null,
    //            "indicativeSettlePrice": 143.807,
    //            "optionUnderlyingPrice": null,
    //            "settledPriceAdjustmentRate": null,
    //            "settledPrice": null,
    //            "timestamp": "2022-01-14T17:49:55.000Z"
    //        }
    //    ]
    //
    const filteredResponse = [];
    for (let i = 0; i < response.length; i++) {
      const item = response[i];
      const marketId = this.safeString(item, 'symbol');
      const market = this.safeMarket(marketId);
      const swap = this.safeValue(market, 'swap', false);
      if (swap) {
        filteredResponse.push(item);
      }
    }
    return this.parseFundingRates(filteredResponse, symbols);
  }
  parseFundingRate(contract, market = undefined) {
    //
    //    {
    //        "symbol": "LTCUSDT",
    //        "rootSymbol": "LTC",
    //        "state": "Open",
    //        "typ": "FFWCSX",
    //        "listing": "2021-11-10T04:00:00.000Z",
    //        "front": "2021-11-10T04:00:00.000Z",
    //        "expiry": null,
    //        "settle": null,
    //        "listedSettle": null,
    //        "relistInterval": null,
    //        "inverseLeg": "",
    //        "sellLeg": "",
    //        "buyLeg": "",
    //        "optionStrikePcnt": null,
    //        "optionStrikeRound": null,
    //        "optionStrikePrice": null,
    //        "optionMultiplier": null,
    //        "positionCurrency": "LTC",
    //        "underlying": "LTC",
    //        "quoteCurrency": "USDT",
    //        "underlyingSymbol": "LTCT=",
    //        "reference": "BMEX",
    //        "referenceSymbol": ".BLTCT",
    //        "calcInterval": null,
    //        "publishInterval": null,
    //        "publishTime": null,
    //        "maxOrderQty": 1000000000,
    //        "maxPrice": 1000000,
    //        "lotSize": 1000,
    //        "tickSize": 0.01,
    //        "multiplier": 100,
    //        "settlCurrency": "USDt",
    //        "underlyingToPositionMultiplier": 10000,
    //        "underlyingToSettleMultiplier": null,
    //        "quoteToSettleMultiplier": 1000000,
    //        "isQuanto": false,
    //        "isInverse": false,
    //        "initMargin": 0.03,
    //        "maintMargin": 0.015,
    //        "riskLimit": 1000000000000,
    //        "riskStep": 1000000000000,
    //        "limit": null,
    //        "capped": false,
    //        "taxed": true,
    //        "deleverage": true,
    //        "makerFee": -0.0001,
    //        "takerFee": 0.0005,
    //        "settlementFee": 0,
    //        "insuranceFee": 0,
    //        "fundingBaseSymbol": ".LTCBON8H",
    //        "fundingQuoteSymbol": ".USDTBON8H",
    //        "fundingPremiumSymbol": ".LTCUSDTPI8H",
    //        "fundingTimestamp": "2022-01-14T20:00:00.000Z",
    //        "fundingInterval": "2000-01-01T08:00:00.000Z",
    //        "fundingRate": 0.0001,
    //        "indicativeFundingRate": 0.0001,
    //        "rebalanceTimestamp": null,
    //        "rebalanceInterval": null,
    //        "openingTimestamp": "2022-01-14T17:00:00.000Z",
    //        "closingTimestamp": "2022-01-14T18:00:00.000Z",
    //        "sessionInterval": "2000-01-01T01:00:00.000Z",
    //        "prevClosePrice": 138.511,
    //        "limitDownPrice": null,
    //        "limitUpPrice": null,
    //        "bankruptLimitDownPrice": null,
    //        "bankruptLimitUpPrice": null,
    //        "prevTotalVolume": 12699024000,
    //        "totalVolume": 12702160000,
    //        "volume": 3136000,
    //        "volume24h": 114251000,
    //        "prevTotalTurnover": 232418052349000,
    //        "totalTurnover": 232463353260000,
    //        "turnover": 45300911000,
    //        "turnover24h": 1604331340000,
    //        "homeNotional24h": 11425.1,
    //        "foreignNotional24h": 1604331.3400000003,
    //        "prevPrice24h": 135.48,
    //        "vwap": 140.42165,
    //        "highPrice": 146.42,
    //        "lowPrice": 135.08,
    //        "lastPrice": 144.36,
    //        "lastPriceProtected": 144.36,
    //        "lastTickDirection": "MinusTick",
    //        "lastChangePcnt": 0.0655,
    //        "bidPrice": 143.75,
    //        "midPrice": 143.855,
    //        "askPrice": 143.96,
    //        "impactBidPrice": 143.75,
    //        "impactMidPrice": 143.855,
    //        "impactAskPrice": 143.96,
    //        "hasLiquidity": true,
    //        "openInterest": 38103000,
    //        "openValue": 547963053300,
    //        "fairMethod": "FundingRate",
    //        "fairBasisRate": 0.1095,
    //        "fairBasis": 0.004,
    //        "fairPrice": 143.811,
    //        "markMethod": "FairPrice",
    //        "markPrice": 143.811,
    //        "indicativeTaxRate": null,
    //        "indicativeSettlePrice": 143.807,
    //        "optionUnderlyingPrice": null,
    //        "settledPriceAdjustmentRate": null,
    //        "settledPrice": null,
    //        "timestamp": "2022-01-14T17:49:55.000Z"
    //    }
    //
    const datetime = this.safeString(contract, 'timestamp');
    const marketId = this.safeString(contract, 'symbol');
    const fundingDatetime = this.safeString(contract, 'fundingTimestamp');
    return {
      'info': contract,
      'symbol': this.safeSymbol(marketId, market),
      'markPrice': this.safeNumber(contract, 'markPrice'),
      'indexPrice': undefined,
      'interestRate': undefined,
      'estimatedSettlePrice': this.safeNumber(contract, 'indicativeSettlePrice'),
      'timestamp': this.parse8601(datetime),
      'datetime': datetime,
      'fundingRate': this.safeNumber(contract, 'fundingRate'),
      'fundingTimestamp': this.iso8601(fundingDatetime),
      'fundingDatetime': fundingDatetime,
      'nextFundingRate': this.safeNumber(contract, 'indicativeFundingRate'),
      'nextFundingTimestamp': undefined,
      'nextFundingDatetime': undefined,
      'previousFundingRate': undefined,
      'previousFundingTimestamp': undefined,
      'previousFundingDatetime': undefined
    };
  }
  async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#fetchFundingRateHistory
     * @description Fetches the history of funding rates
     * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
     * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
     * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @param {int|undefined} params.until timestamp in ms for ending date filter
     * @param {bool|undefined} params.reverse if true, will sort results newest first
     * @param {int|undefined} params.start starting point for results
     * @param {string|undefined} params.columns array of column names to fetch in info, if omitted, will return all columns
     * @param {string|undefined} params.filter generic table filter, send json key/value pairs, such as {"key": "value"}, you can key on individual fields, and do more advanced querying on timestamps, see the [timestamp docs]{@link https://www.bitmex.com/app/restAPI#Timestamp-Filters} for more details
     * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol in this.currencies) {
      const code = this.currency(symbol);
      request['symbol'] = code['id'];
    } else if (symbol !== undefined) {
      const splitSymbol = symbol.split(':');
      const splitSymbolLength = splitSymbol.length;
      const timeframes = ['nearest', 'daily', 'weekly', 'monthly', 'quarterly', 'biquarterly', 'perpetual'];
      if (splitSymbolLength > 1 && this.inArray(splitSymbol[1], timeframes)) {
        const code = this.currency(splitSymbol[0]);
        symbol = code['id'] + ':' + splitSymbol[1];
        request['symbol'] = symbol;
      } else {
        market = this.market(symbol);
        request['symbol'] = market['id'];
      }
    }
    if (since !== undefined) {
      request['startTime'] = this.iso8601(since);
    }
    if (limit !== undefined) {
      request['count'] = limit;
    }
    const until = this.safeInteger2(params, 'until', 'till');
    params = this.omit(params, ['until', 'till']);
    if (until !== undefined) {
      request['endTime'] = this.iso8601(until);
    }
    const response = await this.publicGetFunding(this.extend(request, params));
    //
    //    [
    //        {
    //            "timestamp": "2016-05-07T12:00:00.000Z",
    //            "symbol": "ETHXBT",
    //            "fundingInterval": "2000-01-02T00:00:00.000Z",
    //            "fundingRate": 0.0010890000000000001,
    //            "fundingRateDaily": 0.0010890000000000001
    //        }
    //    ]
    //
    return this.parseFundingRateHistories(response, market, since, limit);
  }
  parseFundingRateHistory(info, market = undefined) {
    //
    //    {
    //        "timestamp": "2016-05-07T12:00:00.000Z",
    //        "symbol": "ETHXBT",
    //        "fundingInterval": "2000-01-02T00:00:00.000Z",
    //        "fundingRate": 0.0010890000000000001,
    //        "fundingRateDaily": 0.0010890000000000001
    //    }
    //
    const marketId = this.safeString(info, 'symbol');
    const datetime = this.safeString(info, 'timestamp');
    return {
      'info': info,
      'symbol': this.safeSymbol(marketId, market),
      'fundingRate': this.safeNumber(info, 'fundingRate'),
      'timestamp': this.parse8601(datetime),
      'datetime': datetime
    };
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#setLeverage
     * @description set the level of leverage for a market
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
    }
    const buyLeverage = this.safeNumber(params, 'buyLeverage', leverage);
    const sellLeverage = this.safeNumber(params, 'sellLeverage', leverage);
    if (buyLeverage !== sellLeverage) {
      throw new _errors.BadRequest(this.id + ' setLeverage() requires buyLeverage and sellLeverage to match');
    }
    leverage = buyLeverage || sellLeverage;
    if (buyLeverage !== undefined && sellLeverage !== undefined) {
      if (leverage < 0 || leverage > 100) {
        throw new _errors.BadRequest(this.id + ' leverage should be between 0 (cross-margin) and 100');
      }
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    if (market['type'] !== 'swap' && market['type'] !== 'future') {
      throw new _errors.BadSymbol(this.id + ' setLeverage() supports future and swap contracts only');
    }
    const marginMode = this.safeString(params, 'marginMode');
    params = this.omit(params, ['marginMode', 'positionMode']);
    if (marginMode === 'isolated') {
      let promises = [];
      const request = {
        'symbol': market['id']
      };
      if (buyLeverage !== undefined) {
        request['leverage'] = buyLeverage;
        promises.push(this.privatePostPositionLeverage(this.extend(request, params)));
      }
      if (sellLeverage !== undefined) {
        request['leverage'] = sellLeverage;
        promises.push(this.privatePostPositionLeverage(this.extend(request, params)));
      }
      promises = await Promise.all(promises);
      if (promises.length === 1) {
        return promises[0];
      } else {
        return promises;
      }
    }
    const request = {
      'symbol': market['id'],
      'leverage': leverage
    };
    return await this.privatePostPositionLeverage(this.extend(request, params));
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#setMarginMode
     * @description set margin mode to 'cross' or 'isolated'
     * @param {string} marginMode 'cross' or 'isolated'
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
    }
    marginMode = marginMode.toLowerCase();
    if (marginMode !== 'isolated' && marginMode !== 'cross') {
      throw new _errors.BadRequest(this.id + ' setMarginMode() marginMode argument should be isolated or cross');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    if (market['type'] !== 'swap' && market['type'] !== 'future') {
      throw new _errors.BadSymbol(this.id + ' setMarginMode() supports swap and future contracts only');
    }
    const enabled = marginMode === 'cross' ? 'false' : 'true';
    const request = {
      'symbol': market['id'],
      'enabled': enabled
    };
    return await this.privatePostPositionIsolate(this.extend(request, params));
  }
  async fetchDepositAddress(code, params = {}) {
    /**
     * @method
     * @name bitmex#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @see https://www.bitmex.com/api/explorer/#!/User/User_getDepositAddress
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @param {string} params.network deposit chain, can view all chains via this.publicGetWalletAssets, default is eth, unless the currency has a default chain within this.options['networks']
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    await this.loadMarkets();
    const networkCode = this.safeStringUpper(params, 'network');
    if (networkCode === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchDepositAddress requires params["network"]');
    }
    const currency = this.currency(code);
    let currencyId = currency['id'];
    const networkId = this.networkCodeToId(networkCode, currency['code']);
    const idLength = currencyId.length;
    currencyId = currencyId.slice(0, idLength - 1) + currencyId.slice(idLength - 1, idLength).toLowerCase(); // make the last letter lowercase
    params = this.omit(params, 'network');
    const request = {
      'currency': currencyId,
      'network': networkId
    };
    const response = await this.privateGetUserDepositAddress(this.extend(request, params));
    //
    //    '"bc1qmex3puyrzn2gduqcnlu70c2uscpyaa9nm2l2j9le2lt2wkgmw33sy7ndjg"'
    //
    return {
      'currency': code,
      'address': response.replace('"', '').replace('"', ''),
      'tag': undefined,
      'network': this.networkIdToCode(networkId).toUpperCase(),
      'info': response
    };
  }
  calculateRateLimiterCost(api, method, path, params, config = {}, context = {}) {
    const isAuthenticated = this.checkRequiredCredentials(false);
    const cost = this.safeValue(config, 'cost', 1);
    if (cost !== 1) {
      // trading endpoints
      if (isAuthenticated) {
        return cost;
      } else {
        return 20;
      }
    }
    return cost;
  }
  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (response === undefined) {
      return;
    }
    if (code === 429) {
      throw new _errors.DDoSProtection(this.id + ' ' + body);
    }
    if (code >= 400) {
      const error = this.safeValue(response, 'error', {});
      const message = this.safeString(error, 'message');
      const feedback = this.id + ' ' + body;
      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);
      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
      if (code === 400) {
        throw new _errors.BadRequest(feedback);
      }
      throw new _errors.ExchangeError(feedback); // unknown message
    }
  }

  nonce() {
    return this.milliseconds();
  }
  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    let query = '/api/' + this.version + '/' + path;
    if (path.indexOf('udf') === 0) {
      query = '/api/' + path;
    }
    if (method === 'GET') {
      if (Object.keys(params).length) {
        query += '?' + this.urlencode(params);
      }
    } else {
      const format = this.safeString(params, '_format');
      if (format !== undefined) {
        query += '?' + this.urlencode({
          '_format': format
        });
        params = this.omit(params, '_format');
      }
    }
    const url = this.urls['api'][api] + query;
    const isAuthenticated = this.checkRequiredCredentials(false);
    if (api === 'private' || api === 'public' && isAuthenticated) {
      this.checkRequiredCredentials();
      let auth = method + query;
      let expires = this.safeInteger(this.options, 'api-expires');
      headers = {
        'Content-Type': 'application/json',
        'api-key': this.apiKey
      };
      expires = this.sum(this.seconds(), expires);
      const expiresStr = expires.toString();
      auth += expiresStr;
      headers['api-expires'] = expiresStr;
      if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
        if (Object.keys(params).length) {
          body = this.json(params);
          auth += body;
        }
      }
      headers['api-signature'] = this.hmac(this.encode(auth), this.encode(this.secret));
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
}
exports.default = bitmex;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
var _number = require("./base/functions/number.js");
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class blofin extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'blofin',
      'name': 'Blofin',
      'countries': ['KY'],
      'rateLimit': 100,
      'version': 'v1',
      'certified': false,
      'pro': true,
      'hostname': 'blofin.com',
      'has': {
        'CORS': undefined,
        'spot': false,
        'margin': false,
        'swap': true,
        'future': false,
        'option': false,
        'addMargin': false,
        'borrowMargin': false,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'cancelWithdraw': false,
        'createDepositAddress': false,
        'createMarketOrder': false,
        'createOrder': true,
        'createReduceOnlyOrder': true,
        'createStopLimitOrder': false,
        'createStopMarketOrder': false,
        'createStopOrder': false,
        'fetchAccounts': true,
        'fetchBalance': true,
        'fetchCanceledOrders': false,
        'fetchClosedOrder': false,
        'fetchClosedOrders': false,
        'fetchCurrencies': true,
        'fetchDepositAddress': false,
        'fetchDeposits': false,
        'fetchFundingHistory': false,
        'fetchFundingRate': false,
        'fetchFundingRateHistory': false,
        'fetchFundingRates': false,
        'fetchIndexOHLCV': false,
        'fetchLedger': true,
        'fetchLeverage': true,
        'fetchMarginMode': false,
        'fetchMarkets': true,
        'fetchMarkOHLCV': false,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenInterestHistory': false,
        'fetchOpenOrder': false,
        'fetchOpenOrders': true,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrders': true,
        'fetchOrderTrades': true,
        'fetchPosition': false,
        'fetchPositionMode': false,
        'fetchPositions': true,
        'fetchPremiumIndexOHLCV': false,
        'fetchStatus': false,
        'fetchTicker': true,
        'fetchTickers': true,
        'fetchTime': false,
        'fetchTrades': true,
        'fetchTradingFee': false,
        'fetchTradingFees': false,
        'fetchTransactions': false,
        'fetchTransfers': false,
        'fetchWithdrawals': false,
        'reduceMargin': false,
        'repayMargin': false,
        'setLeverage': true,
        'setMargin': false,
        'setMarginMode': true,
        'setPositionMode': true,
        'transfer': false,
        'withdraw': false
      },
      'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1H',
        '2h': '2H',
        '4h': '4H',
        '6h': '6H',
        '12h': '12H',
        '1d': '1D',
        '1w': '1W',
        '1M': '1M',
        '3M': '3M',
        '6M': '6M',
        '1y': '1Y'
      },
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
        'api': {
          'rest': 'https://openapi.blofin.com'
        },
        'www': 'https://blofin.com/',
        'doc': ['https://docs.blofin.com/']
      },
      'api': {
        'v1': {
          'public': {
            'get': {
              'market/instruments': 1,
              'market/tickers': 1,
              'market/candles': 1
            }
          },
          'private': {
            'get': {
              'account/leverage-info': 1,
              'account/batch-leverage-info': 1,
              'account/margin-mode': 1,
              // 'account/position-mode': 1,
              'asset/balances': 1,
              'account/positions': 1,
              'trade/orders-pending': 1,
              'trade/orders-tpsl-pending': 1
            },
            'post': {
              'trade/cancel-order': 5,
              'trade/cancel-tpsl': 5,
              'trade/cancel-batch-orders': 5,
              'trade/close-positions': 5,
              'trade/order': 5,
              'trade/order-tpsl': 5,
              'trade/batch-orders': 5,
              'client/account_mode': 120,
              'account/set-leverage': 120,
              'account/set-position-mode': 120
            }
          }
        }
      },
      'fees': {
        'trading': {
          'tierBased': true,
          'percentage': true,
          'maker': this.parseNumber('0.0002'),
          'taker': this.parseNumber('0.0005')
        }
      },
      'options': {
        'createMarketBuyOrderRequiresPrice': true,
        // these network aliases require manual mapping here
        'network-aliases-for-tokens': {
          'HT': 'ERC20',
          'OMG': 'ERC20',
          'UATOM': 'ATOM',
          'ZRX': 'ZRX'
        },
        'networks': {
          'TRX': 'TRON',
          'TRC20': 'TRON',
          'ERC20': 'ETH',
          'BEP20': 'BSC'
        },
        // override defaultNetworkCodePriorities for a specific currency
        'defaultNetworkCodeForCurrencies': {
          // 'USDT': 'TRC20',
          // 'BTC': 'BTC',
        },
        'transfer': {
          'fillResponseFromRequest': true
        }
        // 'brokerId': 'ab82cb09-cfec-4473-80a3-b740779d0644',
      },

      'commonCurrencies': {},
      'exceptions': {
        'exact': {
          '-1000': _errors.ExchangeError,
          '-1001': _errors.AuthenticationError,
          '-1002': _errors.AuthenticationError,
          '-1003': _errors.RateLimitExceeded,
          '-1004': _errors.BadRequest,
          '-1005': _errors.BadRequest,
          '-1006': _errors.BadRequest,
          '-1007': _errors.BadRequest,
          '-1008': _errors.InvalidOrder,
          '-1009': _errors.BadRequest,
          '-1011': _errors.ExchangeError,
          '-1012': _errors.BadRequest,
          '-1101': _errors.InvalidOrder,
          '-1102': _errors.InvalidOrder,
          '-1103': _errors.InvalidOrder,
          '-1104': _errors.InvalidOrder,
          '-1105': _errors.InvalidOrder,
          '103003': _errors.InvalidOrder // {'orderId': None, 'clientOrderId': '', 'msg': 'Order failed. Insufficient USDT margin in account', 'code': '103003'}
        },

        'broad': {
          'symbol must not be blank': _errors.BadRequest,
          'The token is not supported': _errors.BadRequest,
          'Your order and symbol are not valid or already canceled': _errors.BadRequest,
          'Insufficient WOO. Please enable margin trading for leverage trading': _errors.BadRequest // when selling insufficent token [-1012]
        }
      },

      'precisionMode': _number.TICK_SIZE
    });
  }
  async fetchMarkets(params = {}) {
    const response = await this.v1PublicGetMarketInstruments(params);
    const data = this.safeValue(response, 'data', []);
    return this.parseMarkets(data);
  }
  parseMarkets(markets) {
    const result = [];
    for (let i = 0; i < markets.length; i++) {
      result.push(this.parseMarket(markets[i]));
    }
    return result;
  }
  parseMarket(market) {
    const marketId = this.safeString(market, 'instId');
    const parts = marketId.split('-');
    const baseId = this.safeString(parts, 0);
    const quoteId = this.safeString(parts, 1);
    const settleId = 'USDT';
    const base = this.safeCurrencyCode(baseId);
    const quote = this.safeCurrencyCode(quoteId);
    const settle = this.safeCurrencyCode(settleId);
    // const symbol = base + '/' + quote + ':' + settle;
    const symbol = marketId;
    // const status = this.safeNumber (market, 'status');
    // const contractSize = this.safeNumber (market, 'size', 1);
    // const contractSize = 1;
    const tickSize = this.safeString(market, 'tickSize');
    const minAmountString = this.safeString(market, 'minSize');
    const minAmount = this.parseNumber(minAmountString);
    const precisionPrice = this.parseNumber(tickSize);
    let maxLeverage = this.safeString(market, 'maxLeverage', '1');
    maxLeverage = _Precise.Precise.stringMax(maxLeverage, '1');
    return {
      'id': marketId,
      'symbol': symbol,
      'base': base,
      'quote': quote,
      'settle': settle,
      'baseId': baseId,
      'quoteId': quoteId,
      'settleId': settleId,
      'type': 'swap',
      'spot': false,
      'margin': true,
      'swap': true,
      'future': false,
      'option': false,
      'active': true,
      'contract': true,
      'linear': true,
      'inverse': undefined,
      'contractSize': this.safeNumber(market, 'contractValue'),
      'expiry': undefined,
      'expiryDatetime': undefined,
      'strike': undefined,
      'optionType': undefined,
      'precision': {
        'amount': this.safeNumber(market, 'lotSize'),
        'price': this.parseNumber(this.safeString(market, 'tickSize'))
      },
      'limits': {
        'leverage': {
          'min': undefined,
          'max': this.parseNumber(maxLeverage)
        },
        'amount': {
          'min': minAmount,
          'max': undefined
        },
        'price': {
          'min': precisionPrice,
          'max': undefined
        },
        'cost': {
          'min': undefined,
          'max': undefined
        }
      },
      'info': this.deepExtend(market, {
        'symbol': symbol
      })
    };
    // const id = this.safeString (market, 'instId');
    // const type = 'future';
    // const contract = true;
    // const baseId = this.safeString (market, 'baseCurrency');
    // const quoteId = this.safeString (market, 'quoteCurrency');
    // const contactType = this.safeString (market, 'contractType');
    // const settleId = this.safeString2 (market, 'settleCcy', 'quoteCurrency'); // safe to assume that on blofin quote == settle for linear markets -- rayana
    // const settle = this.safeCurrencyCode (settleId);
    // const base = this.safeCurrencyCode (baseId);
    // const quote = this.safeCurrencyCode (quoteId);
    // let symbol = base + '/' + quote;
    // let expiry = undefined;
    // if (contract) {
    //     symbol = symbol + ':' + settle;
    //     expiry = this.safeInteger (market, 'expireTime');
    // }
    // const tickSize = this.safeString (market, 'tickSize');
    // const minAmountString = this.safeString (market, 'minSize');
    // const minAmount = this.parseNumber (minAmountString);
    // const fees = this.safeValue2 (this.fees, type, 'trading', {});
    // const precisionPrice = this.parseNumber (tickSize);
    // let maxLeverage = this.safeString (market, 'maxLeverage', '1');
    // maxLeverage = Precise.stringMax (maxLeverage, '1');
    // return this.extend (fees, {
    //     'id': id,
    //     'symbol': symbol,
    //     'base': base,
    //     'quote': quote,
    //     'settle': settle,
    //     'baseId': baseId,
    //     'quoteId': quoteId,
    //     'settleId': settleId,
    //     'type': type,
    //     'spot': false,
    //     'margin': false,
    //     'swap': false,
    //     'future': true,
    //     'option': false,
    //     'active': true,
    //     'contract': contract,
    //     'linear': contactType === 'linear',
    //     'inverse': contactType === 'inverse',
    //     'contractSize': contract ? this.safeNumber (market, 'contractValue') : undefined,
    //     'expiry': expiry,
    //     'expiryDatetime': this.iso8601 (expiry),
    //     'strike': undefined,
    //     'optionType': undefined,
    //     'precision': {
    //         'amount': this.safeNumber (market, 'lotSize'),
    //         'price': precisionPrice,
    //     },
    //     'limits': {
    //         'leverage': {
    //             'min': this.parseNumber ('1'),
    //             'max': this.parseNumber (maxLeverage),
    //         },
    //         'amount': {
    //             'min': minAmount,
    //             'max': undefined,
    //         },
    //         'price': {
    //             'min': precisionPrice,
    //             'max': undefined,
    //         },
    //         'cost': {
    //             'min': undefined,
    //             'max': undefined,
    //         },
    //     },
    //     'info': market,
    // });
  }

  parseTicker(ticker, market = undefined) {
    //
    //     {
    //         "instType": "SPOT",
    //         "instId": "ETH-BTC",
    //         "last": "0.07319",
    //         "lastSz": "0.044378",
    //         "askPx": "0.07322",
    //         "askSz": "4.2",
    //         "bidPx": "0.0732",
    //         "bidSz": "6.050058",
    //         "open24h": "0.07801",
    //         "high24h": "0.07975",
    //         "low24h": "0.06019",
    //         "volCcy24h": "11788.887619",
    //         "vol24h": "167493.829229",
    //         "ts": "1621440583784",
    //         "sodUtc0": "0.07872",
    //         "sodUtc8": "0.07345"
    //     }
    //
    const timestamp = this.safeInteger(ticker, 'ts');
    const marketId = this.safeString(ticker, 'instId');
    market = this.safeMarket(marketId, market, '-');
    const symbol = market['symbol'];
    const last = this.safeString(ticker, 'last');
    const open = this.safeString(ticker, 'open24h');
    const spot = this.safeValue(market, 'spot', false);
    const quoteVolume = spot ? this.safeString(ticker, 'volCurrency24h') : undefined;
    const baseVolume = this.safeString(ticker, 'vol24h');
    const high = this.safeString(ticker, 'high24h');
    const low = this.safeString(ticker, 'low24h');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': high,
      'low': low,
      'bid': this.safeString(ticker, 'bidPrice'),
      'bidVolume': this.safeString(ticker, 'bidSize'),
      'ask': this.safeString(ticker, 'askPrice'),
      'askVolume': this.safeString(ticker, 'askSize'),
      'vwap': undefined,
      'open': open,
      'close': last,
      'last': last,
      'previousClose': undefined,
      'change': undefined,
      'percentage': undefined,
      'average': undefined,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    }, market);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const response = await this.v1PublicGetMarketTickers();
    const data = this.safeValue(response, 'data', []);
    for (let i = 0; i < data.length; i++) {
      if (data[i]['instId'] === market['id']) {
        return this.parseTicker(data[i], market);
      }
    }
  }
  async fetchTickersByType(type, symbols = undefined, params = {}) {
    await this.loadMarkets();
    const response = await this.v1PublicGetMarketTickers();
    const tickers = this.safeValue(response, 'data', []);
    return this.parseTickers(tickers, symbols);
  }
  async fetchTickers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchTickers
     * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const first = this.safeString(symbols, 0);
    let market = undefined;
    if (first !== undefined) {
      market = this.market(first);
    }
    const [type, query] = this.handleMarketTypeAndParams('fetchTickers', market, params);
    return await this.fetchTickersByType(type, symbols, query);
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchTrades() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.v1PublicGetMarketTrades(this.extend(request, params));
    //
    // {
    //     success: true,
    //     rows: [
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "SELL",
    //             executed_price: 46222.35,
    //             executed_quantity: 0.0012,
    //             executed_timestamp: "1641241162.329"
    //         },
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "SELL",
    //             executed_price: 46222.35,
    //             executed_quantity: 0.0012,
    //             executed_timestamp: "1641241162.329"
    //         },
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "BUY",
    //             executed_price: 46224.32,
    //             executed_quantity: 0.00039,
    //             executed_timestamp: "1641241162.287"
    //         },
    //         ...
    //      ]
    // }
    //
    const resultResponse = this.safeValue(response, 'rows', {});
    return this.parseTrades(resultResponse, market, since, limit);
  }
  parseTrade(trade, market = undefined) {
    //
    // public fetchTrades
    //
    //     {
    //         "instId": "ETH-BTC",
    //         "side": "sell",
    //         "sz": "0.119501",
    //         "px": "0.07065",
    //         "tradeId": "15826757",
    //         "ts": "1621446178316"
    //     }
    //
    // private fetchMyTrades
    //
    //     {
    //         "side": "buy",
    //         "fillSz": "0.007533",
    //         "fillPx": "2654.98",
    //         "fee": "-0.000007533",
    //         "ordId": "317321390244397056",
    //         "instType": "SPOT",
    //         "instId": "ETH-USDT",
    //         "clOrdId": "",
    //         "posSide": "net",
    //         "billId": "317321390265368576",
    //         "tag": "0",
    //         "execType": "T",
    //         "tradeId": "107601752",
    //         "feeCcy": "ETH",
    //         "ts": "1621927314985"
    //     }
    //
    const id = this.safeString(trade, 'tradeId');
    const marketId = this.safeString(trade, 'instId');
    market = this.safeMarket(marketId, market, '-');
    const symbol = market['symbol'];
    const timestamp = this.safeInteger(trade, 'ts');
    const price = this.safeString2(trade, 'fillPx', 'price');
    const amount = this.safeString2(trade, 'fillSz', 'size');
    const side = this.safeString(trade, 'side');
    const orderId = this.safeString(trade, 'ordId');
    const feeCostString = this.safeString(trade, 'fee');
    let fee = undefined;
    if (feeCostString !== undefined) {
      const feeCostSigned = _Precise.Precise.stringNeg(feeCostString);
      const feeCurrencyId = this.safeString(trade, 'feeCurrency');
      let feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      if (feeCurrencyCode === undefined) {
        feeCurrencyCode = 'USDT';
      }
      fee = {
        'cost': feeCostSigned,
        'currency': feeCurrencyCode
      };
    }
    let takerOrMaker = this.safeString(trade, 'execType');
    if (takerOrMaker === 'T') {
      takerOrMaker = 'taker';
    } else if (takerOrMaker === 'M') {
      takerOrMaker = 'maker';
    }
    return this.safeTrade({
      'info': this.deepExtend(trade, {
        'symbol': marketId
      }),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'id': id,
      'order': orderId,
      'type': undefined,
      'takerOrMaker': takerOrMaker,
      'side': side,
      'price': price,
      'amount': amount,
      'cost': undefined,
      'fee': fee
    }, market);
  }
  parseTokenAndFeeTemp(item, feeTokenKey, feeAmountKey) {
    const feeCost = this.safeString(item, feeAmountKey);
    let fee = undefined;
    if (feeCost !== undefined) {
      const feeCurrencyId = this.safeString(item, feeTokenKey);
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': feeCost,
        'currency': feeCurrencyCode
      };
    }
    return fee;
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    // TEALSTREET
    let reduceOnly = this.safeValue2(params, 'reduceOnly', 'close');
    const timeInForces = {
      'GTC': 'GTC',
      'PO': 'post_only',
      'IOC': 'ioc',
      'FOK': 'fok'
    };
    const orderTypes = {
      'market': 'market',
      'limit': 'limit',
      'stop': 'conditional',
      'stoplimit': 'trigger',
      'stopLimit': 'trigger',
      'PO': 'post_only',
      'FOK': 'fok',
      'IOC': 'ioc',
      'optimal_limit_ioc': 'optimal_limit_ioc'
    };
    const timeInForce = this.safeString(timeInForces, params['timeInForce'], this.capitalize(params['timeInForce']));
    let orderType = this.safeString(orderTypes, type, this.capitalize(type));
    if (timeInForce && orderType !== 'conditional' && orderType !== 'trigger') {
      if (timeInForce === 'post_only' || timeInForce === 'fok' || timeInForce === 'ioc') {
        orderType = timeInForce;
      }
    }
    const closeOnTrigger = this.safeValue(params, 'closeOnTrigger', false);
    let stopPrice = undefined;
    if (orderType === 'conditional' || orderType === 'trigger') {
      stopPrice = this.safeNumber(params, 'stopPrice');
      if (closeOnTrigger) {
        reduceOnly = true;
      }
      params = this.omit(params, ['reduceOnly']);
    }
    side = side.toLowerCase();
    const marginType = this.safeString(params, 'marginMode', 'cross');
    let method = 'v1PrivatePostTradeOrder';
    if (type === 'stop' || type === 'stopLimit') {
      method = 'v1PrivatePostTradeOrderTpsl';
    }
    let posSide = undefined;
    if (side === 'buy' && reduceOnly || side === 'sell' && !reduceOnly) {
      posSide = 'short';
    } else {
      posSide = 'long';
    }
    let request = {
      'instId': market['id'],
      'marginMode': marginType,
      'side': side,
      'orderType': orderType,
      'reduceOnly': reduceOnly
    };
    const positionMode = this.safeString(params, 'positionMode', 'oneway');
    params = this.omit(params, ['positionMode']);
    if (positionMode === 'hedged') {
      request['positionSide'] = posSide;
    }
    const brokerId = this.safeString(this.options, 'brokerId');
    if (brokerId) {
      request['brokerId'] = brokerId;
    }
    params = this.omit(params, ['clientOrderId']);
    if (price !== undefined) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    request['size'] = this.amountToPrecision(symbol, amount);
    if (!reduceOnly) {
      request = this.omit(request, ['reduceOnly']);
    }
    if (orderType === 'conditional' || orderType === 'trigger') {
      // unused by blofin right now
      // const triggerType = this.safeStringLower (params, 'trigger', 'mark');
      params = this.omit(params, ['trigger']);
      // if (price !== undefined) {
      //     price = -1;
      // } else {
      //     orderType = 'conditional';
      //     request['orderType'] = orderType;
      // }
      let basePrice = this.safeValue(params, 'basePrice');
      if (!basePrice) {
        const ticker = this.fetchTicker(symbol);
        basePrice = ticker['last'];
      }
      // const tpPrice = this.safeNumber (params, 'tpPrice');
      let tpPrice = undefined;
      if (side === 'sell' && stopPrice >= basePrice) {
        tpPrice = stopPrice;
      } else if (side === 'buy' && stopPrice < basePrice) {
        tpPrice = stopPrice;
      }
      if (tpPrice || stopPrice) {
        if (price === undefined) {
          request['orderType'] = 'oco';
          if (tpPrice) {
            request['tpTriggerPrice'] = this.priceToPrecision(symbol, tpPrice);
            request['tpOrderPrice'] = this.priceToPrecision(symbol, -1);
          } else if (stopPrice) {
            request['slTriggerPrice'] = this.priceToPrecision(symbol, stopPrice);
            request['slOrderPrice'] = this.priceToPrecision(symbol, -1);
          }
          // request['price'] = this.priceToPrecision (symbol, price);
          request['reduceOnly'] = 'true';
        } else {
          // this is from our okx code, but I think second case should be swapped
          if (side === 'sell') {
            if (stopPrice > basePrice) {
              request['tpTriggerPrice'] = this.priceToPrecision(symbol, tpPrice);
              request['tpOrderPrice'] = this.priceToPrecision(symbol, price);
            } else {
              request['slTriggerPrice'] = this.priceToPrecision(symbol, stopPrice);
              request['slOrderPrice'] = this.priceToPrecision(symbol, price);
            }
          } else {
            if (stopPrice < basePrice) {
              request['tpTriggerPrice'] = this.priceToPrecision(symbol, tpPrice);
              request['tpOrderPrice'] = this.priceToPrecision(symbol, price);
            } else {
              request['slTriggerPrice'] = this.priceToPrecision(symbol, stopPrice);
              request['slOrderPrice'] = this.priceToPrecision(symbol, price);
            }
          }
          request['orderType'] = 'conditional';
          // request['price'] = this.priceToPrecision (symbol, -1);
          // unsupported?
          // request['triggerPrice'];
          request['reduceOnly'] = 'true';
        }
        request['price'] = -1;
      }
      request['positionSide'] = posSide;
    }
    // const tradeMode = this.safeString (params, 'tradeMode', 'hedged');
    // params = [];
    // if (tradeMode) {
    //     params = this.omit (params, [ 'tradeMode' ]);
    //     if (tradeMode === 'oneway') {
    //         request = this.omit (request, [ 'positionSide' ]);
    //     }
    //     // not implement for blofin yet
    //     // if (tradeMode === 'oneway') {
    //     //     request['positionSide'] = 'oneway';
    //     // } else {
    //     // request = this.omit (request, ['positionSide'])
    //     // }
    // }
    if (marginType) {
      params = this.omit(params, ['marginType']);
      request['marginMode'] = marginType;
    }
    let cloid_suffix = 'r0';
    if (reduceOnly) {
      cloid_suffix = 'r1';
    }
    request['clientOrderId'] = 'tealstreet' + this.uuid16() + cloid_suffix;
    const response = await this[method](this.extend(request, params));
    const data = this.safeValue(response, 'data', []);
    const first = this.safeValue(data, 0);
    const order = this.parseOrder(first, market);
    if (!order['status']) {
      const code = this.safeString(first, 'code');
      if (code === '0') {
        order['status'] = 'open';
      }
    }
    return this.extend(this.extend(request, params), this.extend(order, {
      'type': type,
      'side': side
    }));
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const type = this.safeStringLower(params, 'type');
    const isStop = type === 'stop' || type === 'stoplimit';
    if (isStop) {
      return this.cancelAlgoOrder(id, symbol, params);
    } else {
      return this.cancelRegularOrder(id, symbol, params);
    }
  }
  async cancelAlgoOrder(id, symbol = undefined, params = {}) {
    const request = {};
    request['tpslId'] = id;
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    request['instId'] = market['id'];
    params = this.omit(params, ['type']);
    request['clientOrderId'] = '';
    const response = await this.v1PrivatePostTradeCancelTpsl([this.extend(request, params)]);
    //
    // { success: true, status: 'CANCEL_SENT' }
    //
    const extendParams = {
      'symbol': symbol
    };
    extendParams['id'] = id;
    return this.extend(this.parseOrder(response), extendParams);
  }
  async cancelRegularOrder(id, symbol = undefined, params = {}) {
    const request = {};
    const clientOrderIdUnified = this.safeString2(params, 'clOrdID', 'clientOrderId');
    const clientOrderIdExchangeSpecific = this.safeString2(params, 'clientOrderId', clientOrderIdUnified);
    const isByClientOrder = clientOrderIdExchangeSpecific !== undefined;
    if (isByClientOrder) {
      request['clientOrderId'] = clientOrderIdExchangeSpecific;
      params = this.omit(params, ['clOrdID', 'clientOrderId', 'client_order_id']);
    } else {
      request['orderId'] = id;
    }
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    request['instId'] = market['id'];
    const response = await this.v1PrivatePostTradeCancelOrder(this.extend(request, params));
    //
    // { success: true, status: 'CANCEL_SENT' }
    //
    const extendParams = {
      'symbol': symbol
    };
    if (isByClientOrder) {
      extendParams['clientOrderId'] = clientOrderIdExchangeSpecific;
    } else {
      extendParams['instId'] = id;
    }
    return this.extend(this.parseOrder(response), extendParams);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const instId = market['id'];
    // const request = {
    //     'instId': instId,
    // };
    const orders = await this.fetchOpenOrders(instId);
    const stopOrders = await this.fetchOpenStopOrders(instId);
    const ordersToCancel = [];
    for (let i = 0; i < orders.length; i++) {
      ordersToCancel.push({
        'instId': instId,
        'orderId': orders[i]['id']
      });
    }
    for (let i = 0; i < stopOrders.length; i++) {
      ordersToCancel.push({
        'instId': instId,
        'orderId': stopOrders[i]['id']
      });
    }
    // const response = await (this as any).v1PrivatePostTradeCancelOrder (this.extend (request, params));
    // await (this as any).v1PrivatePostTradeCancelTpsl (this.extend (request, params));
    //
    //     {
    //         "success":true,
    //         "status":"CANCEL_ALL_SENT"
    //     }
    //
    return await this.v1PrivatePostTradeCancelBatchOrders(ordersToCancel);
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string|undefined} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = symbol !== undefined ? this.market(symbol) : undefined;
    const request = {};
    const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
    let chosenSpotMethod = undefined;
    const type = this.safeString(params, 'type');
    const isStop = type === 'stop' || type === 'stoplimit';
    if (isStop) {
      chosenSpotMethod = 'v3PrivateDeleteAlgoOrderOid';
    } else if (clientOrderId) {
      chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
      request['client_order_id'] = clientOrderId;
    } else {
      chosenSpotMethod = 'v1PrivateGetOrderOid';
      request['oid'] = id;
    }
    const response = await this[chosenSpotMethod](this.extend(request, params));
    //
    // {
    //     success: true,
    //     symbol: 'SPOT_WOO_USDT',
    //     status: 'FILLED', // FILLED, NEW
    //     side: 'BUY',
    //     created_time: '1641480933.000',
    //     order_id: '87541111',
    //     order_tag: 'default',
    //     price: '1',
    //     type: 'LIMIT',
    //     quantity: '12',
    //     amount: null,
    //     visible: '12',
    //     executed: '12', // or any partial amount
    //     total_fee: '0.0024',
    //     fee_asset: 'WOO',
    //     client_order_id: null,
    //     average_executed_price: '1',
    //     Transactions: [
    //       {
    //         id: '99111647',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641482113.084',
    //         order_id: '87541111',
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //       }
    //     ]
    // }
    //
    return this.parseOrder(response, market);
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    throw new _errors.NotSupported(this.id + ' fetchOrders() is not supported yet');
  }
  parseOrder(order, market = undefined) {
    //
    // createOrder
    //
    //     {
    //         "clOrdId": "oktswap6",
    //         "ordId": "312269865356374016",
    //         "tag": "",
    //         "sCode": "0",
    //         "sMsg": ""
    //     }
    //
    // Spot and Swap fetchOrder, fetchOpenOrders
    //
    //     {
    //         "accFillSz": "0",
    //         "avgPx": "",
    //         "cTime": "1621910749815",
    //         "category": "normal",
    //         "ccy": "",
    //         "clOrdId": "",
    //         "fee": "0",
    //         "feeCcy": "ETH",
    //         "fillPx": "",
    //         "fillSz": "0",
    //         "fillTime": "",
    //         "instId": "ETH-USDT",
    //         "instType": "SPOT",
    //         "lever": "",
    //         "ordId": "317251910906576896",
    //         "ordType": "limit",
    //         "pnl": "0",
    //         "posSide": "net",
    //         "px": "2000",
    //         "rebate": "0",
    //         "rebateCcy": "USDT",
    //         "side": "buy",
    //         "slOrdPx": "",
    //         "slTriggerPx": "",
    //         "state": "live",
    //         "sz": "0.001",
    //         "tag": "",
    //         "tdMode": "cash",
    //         "tpOrdPx": "",
    //         "tpTriggerPx": "",
    //         "tradeId": "",
    //         "uTime": "1621910749815"
    //     }
    //
    // Algo Order fetchOpenOrders, fetchCanceledOrders, fetchClosedOrders
    //
    //     {
    //         "activePx": "",
    //         "activePxType": "",
    //         "actualPx": "",
    //         "actualSide": "buy",
    //         "actualSz": "0",
    //         "algoId": "431375349042380800",
    //         "cTime": "1649119897778",
    //         "callbackRatio": "",
    //         "callbackSpread": "",
    //         "ccy": "",
    //         "ctVal": "0.01",
    //         "instId": "BTC-USDT-SWAP",
    //         "instType": "SWAP",
    //         "last": "46538.9",
    //         "lever": "125",
    //         "moveTriggerPx": "",
    //         "notionalUsd": "467.059",
    //         "ordId": "",
    //         "ordPx": "50000",
    //         "ordType": "trigger",
    //         "posSide": "long",
    //         "pxLimit": "",
    //         "pxSpread": "",
    //         "pxVar": "",
    //         "side": "buy",
    //         "slOrdPx": "",
    //         "slTriggerPx": "",
    //         "slTriggerPxType": "",
    //         "state": "live",
    //         "sz": "1",
    //         "szLimit": "",
    //         "tag": "",
    //         "tdMode": "isolated",
    //         "tgtCcy": "",
    //         "timeInterval": "",
    //         "tpOrdPx": "",
    //         "tpTriggerPx": "",
    //         "tpTriggerPxType": "",
    //         "triggerPx": "50000",
    //         "triggerPxType": "last",
    //         "triggerTime": "",
    //         "uly": "BTC-USDT"
    //     }
    //
    const id = this.safeString2(order, 'tpslId', 'orderId');
    const timestamp = this.safeInteger(order, 'createTime');
    const lastTradeTimestamp = this.safeInteger(order, 'updateTime');
    const side = this.safeString(order, 'side');
    let type = this.safeString(order, 'orderType');
    let postOnly = undefined;
    let timeInForce = undefined;
    if (type === 'post_only') {
      postOnly = true;
      type = 'limit';
    } else if (type === 'fok') {
      timeInForce = 'FOK';
      type = 'limit';
    } else if (type === 'ioc') {
      timeInForce = 'IOC';
      type = 'limit';
    } else if (type === 'conditional') {
      type = 'stop';
    } else if (type === 'trigger') {
      type = 'stoplimit';
    }
    const marketId = this.safeString(order, 'instId');
    market = this.safeMarket(marketId, market);
    const symbol = marketId;
    const filled = this.safeString(order, 'filledSize');
    let price = this.safeNumber2(order, 'px', 'price');
    const average = this.safeString(order, 'averagePrice');
    const status = this.parseOrderStatus(this.safeString(order, 'state'));
    const feeCostString = this.safeString(order, 'fee');
    let amount = undefined;
    // let cost = undefined;
    // spot market buy: "sz" can refer either to base currency units or to quote currency units
    // see documentation: https://www.okx.com/docs-v5/en/#rest-api-trade-place-order
    // const defaultTgtCcy = this.safeString (this.options, 'tgtCcy', 'base_ccy');
    // const tgtCcy = this.safeString (order, 'tgtCcy', defaultTgtCcy);
    // const instType = this.safeString (order, 'instType');
    // "sz" refers to the trade currency amount
    amount = this.safeString(order, 'size');
    let fee = undefined;
    if (feeCostString !== undefined) {
      const feeCostSigned = _Precise.Precise.stringNeg(feeCostString);
      const feeCurrencyId = 'USDT';
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': this.parseNumber(feeCostSigned),
        'currency': feeCurrencyCode
      };
    }
    let clientOrderId = this.safeString(order, 'clientOrderId');
    if (clientOrderId !== undefined && clientOrderId.length < 1) {
      clientOrderId = undefined; // fix empty clientOrderId string
    }

    const stopLossPrice = this.safeNumber2(order, 'slTriggerPrice', 'slOrderPrice');
    const takeProfitPrice = this.safeNumber2(order, 'tpTriggerPrice', 'tpOrderPrice');
    const stopLossOrderPrice = this.safeNumber(order, 'slOrderPrice');
    const takeProfitOrderPrice = this.safeNumber(order, 'tpOrderPrice');
    let triggerPrice = undefined;
    let stopPrice = undefined;
    if (stopLossPrice) {
      if (stopLossOrderPrice === -1) {
        type = 'stop';
        stopPrice = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
        triggerPrice = stopPrice;
      } else {
        type = 'stoplimit';
        stopPrice = this.safeNumber2(order, 'tpOrderPrice', 'slOrderPrice');
        price = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
      }
    } else if (takeProfitPrice) {
      if (takeProfitOrderPrice === -1) {
        type = 'stop';
        stopPrice = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
        triggerPrice = stopPrice;
      } else {
        type = 'stoplimit';
        stopPrice = this.safeNumber2(order, 'tpOrderPrice', 'slOrderPrice');
        price = this.safeNumber2(order, 'tpTriggerPrice', 'slTriggerPrice');
      }
    }
    // const stopPrice = this.safeNumberN (order, [ 'price', 'stopPrice', 'slTriggerPrice, tpTriggerPrice' ]);
    const reduceOnlyRaw = this.safeString(order, 'reduceOnly');
    let reduceOnly = false;
    if (reduceOnlyRaw) {
      reduceOnly = reduceOnlyRaw === 'true';
    }
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': postOnly,
      'side': side,
      'price': price,
      'stopLossPrice': stopLossPrice,
      'takeProfitPrice': takeProfitPrice,
      'stopPrice': stopPrice,
      'triggerPrice': triggerPrice,
      'average': average,
      'cost': undefined,
      'amount': amount,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': fee,
      'trades': undefined,
      'reduceOnly': reduceOnly,
      'close': reduceOnly,
      'reduce': reduceOnly,
      'trigger': 'last'
    }, market);
  }
  parseOrderStatus(status) {
    const statuses = {
      'canceled': 'canceled',
      'order_failed': 'canceled',
      'live': 'open',
      'partially_filled': 'open',
      'filled': 'closed',
      'effective': 'closed'
    };
    return this.safeString(statuses, status, status);
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {
      // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'uly': currency['id'],
      // 'instId': market['id'],
      // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated, stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
      // 'state': 'live', // live, partially_filled
      // 'after': orderId,
      // 'before': orderId,
      // 'limit': limit, // default 100, max 100
      'limit': 100
    };
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['instId'] = market['id'];
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    const query = this.omit(params, ['method', 'stop']);
    const response = await this.v1PrivateGetTradeOrdersPending(this.extend(request, query));
    const data = this.safeValue(response, 'data', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchOpenStopOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {
      // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'uly': currency['id'],
      // 'instId': market['id'],
      // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated, stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
      // 'state': 'live', // live, partially_filled
      // 'after': orderId,
      // 'before': orderId,
      // 'limit': limit, // default 100, max 100
      'limit': 100
    };
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['instId'] = market['id'];
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    const query = this.omit(params, ['method', 'stop']);
    const response = await this.v1PrivateGetTradeOrdersTpslPending(this.extend(request, query));
    const data = this.safeValue(response, 'data', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      limit = Math.min(limit, 1000);
      request['max_level'] = limit;
    }
    const response = await this.v1PrivateGetOrderbookSymbol(this.extend(request, params));
    //
    // {
    //   success: true,
    //   timestamp: '1641562961192',
    //   asks: [
    //     { price: '0.921', quantity: '76.01' },
    //     { price: '0.933', quantity: '477.10' },
    //     ...
    //   ],
    //   bids: [
    //     { price: '0.940', quantity: '13502.47' },
    //     { price: '0.932', quantity: '43.91' },
    //     ...
    //   ]
    // }
    //
    const timestamp = this.safeInteger(response, 'timestamp');
    return this.parseOrderBook(response, symbol, timestamp, 'bids', 'asks', 'price', 'quantity');
  }
  parseOHLCV(ohlcv, market = undefined) {
    //
    //     [
    //         "1678928760000", // timestamp
    //         "24341.4", // open
    //         "24344", // high
    //         "24313.2", // low
    //         "24323", // close
    //         "628", // contract volume
    //         "2.5819", // base volume
    //         "62800", // quote volume
    //         "0" // candlestick state
    //     ]
    //
    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 7)];
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    params = this.omit(params, 'price');
    const options = this.safeValue(this.options, 'fetchOHLCV', {});
    const timezone = this.safeString(options, 'timezone', 'UTC');
    if (limit === undefined) {
      limit = 100;
    }
    const duration = this.parseTimeframe(timeframe);
    let bar = this.safeString(this.timeframes, timeframe, timeframe);
    if (timezone === 'UTC' && duration >= 21600) {
      // if utc and timeframe >= 6h
      bar += timezone.toLowerCase();
    }
    const request = {
      'instId': market['id'],
      'bar': bar,
      'limit': limit
    };
    if (since !== undefined) {
      const durationInMilliseconds = duration * 1000;
      const startTime = Math.max(since - 1, 0);
      request['before'] = startTime;
      request['after'] = this.sum(startTime, durationInMilliseconds * limit);
    }
    const until = this.safeInteger(params, 'until');
    if (until !== undefined) {
      request['after'] = until;
      params = this.omit(params, 'until');
    }
    params = this.omit(params, 'type');
    const response = await this.v1PublicGetMarketCandles(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             ["1678928760000","24341.4","24344","24313.2","24323","628","2.5819","62800","0"],
    //             ["1678928700000","24324.1","24347.6","24321.7","24341.4","2565","10.5401","256500","1"],
    //             ["1678928640000","24300.2","24324.1","24288","24324.1","3304","13.5937","330400","1"],
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseOHLCVs(data, market, timeframe, since, limit);
  }
  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @param {string} id order id
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    const request = {
      'oid': id
    };
    const response = await this.v1PrivateGetOrderOidTrades(this.extend(request, params));
    // {
    //     success: true,
    //     rows: [
    //       {
    //         id: '99111647',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641482113.084',
    //         order_id: '87541111',
    //         order_tag: 'default',
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //       }
    //     ]
    // }
    const trades = this.safeValue(response, 'rows', []);
    return this.parseTrades(trades, market, since, limit, params);
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    const response = await this.v1PrivateGetClientTrades(this.extend(request, params));
    // {
    //     "success": true,
    //     "meta": {
    //         "records_per_page": 25,
    //         "current_page": 1
    //     },
    //     "rows": [
    //         {
    //             "id": 5,
    //             "symbol": "SPOT_BTC_USDT",
    //             "order_id": 211,
    //             "order_tag": "default",
    //             "executed_price": 10892.84,
    //             "executed_quantity": 0.002,
    //             "is_maker": 0,
    //             "side": "SELL",
    //             "fee": 0,
    //             "fee_asset": "USDT",
    //             "executed_timestamp": "1566264290.250"
    //         },
    //         ...
    //     ]
    // }
    const trades = this.safeValue(response, 'rows', []);
    return this.parseTrades(trades, market, since, limit, params);
  }
  async fetchAccounts(params = {}) {
    /**
     * @method
     * @name woo#fetchAccounts
     * @description fetch all the accounts associated with a profile
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
     */
    const response = await this.v1PrivateGetSubAccountAssets(params);
    //
    //     {
    //         rows: [{
    //                 application_id: '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
    //                 account: 'Main',
    //                 usdt_balance: '4.0'
    //             },
    //             {
    //                 application_id: '432952aa-a401-4e26-aff6-972920aebba3',
    //                 account: 'subaccount',
    //                 usdt_balance: '1.0'
    //             }
    //         ],
    //         success: true
    //     }
    //
    const rows = this.safeValue(response, 'rows', []);
    return this.parseAccounts(rows, params);
  }
  parseAccount(account) {
    //
    //     {
    //         application_id: '336952aa-a401-4e26-aff6-972920aebba3',
    //         account: 'subaccount',
    //         usdt_balance: '1.0',
    //     }
    //
    const accountId = this.safeString(account, 'account');
    return {
      'info': account,
      'id': this.safeString(account, 'application_id'),
      'name': accountId,
      'code': undefined,
      'type': accountId === 'Main' ? 'main' : 'subaccount'
    };
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name woo#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://docs.woo.org/#get-current-holding-get-balance-new
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const response = await this.v1PrivateGetAssetBalances({
      'accountType': 'futures'
    });
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "holding": [
    //                 {
    //                     "token": "0_token",
    //                     "holding": 1,
    //                     "frozen": 0,
    //                     "staked": 0,
    //                     "unbonding": 0,
    //                     "vault": 0,
    //                     "interest": 0,
    //                     "pendingShortQty": 0,
    //                     "pendingLongQty": 0,
    //                     "availableBalance": 0,
    //                     "updatedTime": 312321.121
    //                 }
    //             ]
    //         },
    //         "timestamp": 1673323746259
    //     }
    //
    return this.parseBalance(response);
  }
  parseBalance(response) {
    // {
    //     "arg":{
    //        "channel":"account"
    //     },
    //     "data":{
    //        "ts":"1704393619013",
    //        "totalEquity":"256.178577844908301002183444330",
    //        "isolatedEquity":"0.000000",
    //        "details":[
    //           {
    //              "currency":"USDT",
    //              "equity":"255.921376861162832355666",
    //              "available":"201.107018742055904790666",
    //              "balance":"198.028033493752832355",
    //              "ts":"1704393619013",
    //              "isolatedEquity":"0",
    //              "equityUsd":"256.178577844908301002183444330",
    //              "availableEquity":"201.107018742055904790666",
    //              "frozen":"0.26160000000000003",
    //              "orderFrozen":"0.26160000000000003",
    //              "unrealizedPnl":"57.893343367410000000666",
    //              "isolatedUnrealizedPnl":"0"
    //           }
    //        ]
    //     }
    //  }
    const result = {
      'info': response
    };
    const balances = this.safeValue(response, 'data', []);
    for (let i = 0; i < balances.length; i++) {
      const balance = balances[i];
      const code = this.safeCurrencyCode(this.safeString(balance, 'currency'));
      const account = this.account();
      account['total'] = this.safeString(balance, 'balance');
      account['free'] = _Precise.Precise.stringAdd(this.safeString(balance, 'available'), this.safeString(balance, 'bonus'));
      result[code] = account;
    }
    return this.safeBalance(result);
  }
  getCurrencyFromChaincode(networkizedCode, currency) {
    if (currency !== undefined) {
      return currency;
    } else {
      const parts = networkizedCode.split('_');
      const partsLength = parts.length;
      const firstPart = this.safeString(parts, 0);
      let currencyId = this.safeString(parts, 1, firstPart);
      if (partsLength > 2) {
        currencyId += '_' + this.safeString(parts, 2);
      }
      currency = this.safeCurrency(currencyId);
    }
    return currency;
  }
  nonce() {
    return this.milliseconds();
  }
  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    const isArray = Array.isArray(params);
    const request = '/api/' + this.version + '/' + this.implodeParams(path, params);
    const query = this.omit(params, this.extractParams(path));
    let url = this.implodeHostname(this.urls['api']['rest']) + request;
    // const type = this.getPathAuthenticationType (path);
    if (api[1] === 'public') {
      if (Object.keys(query).length) {
        url += '?' + this.urlencode(query);
      }
    } else if (api[1] === 'private') {
      this.checkRequiredCredentials();
      const timestamp = this.numberToString(this.milliseconds());
      const nonce = this.uuid();
      headers = {
        'ACCESS-KEY': this.apiKey,
        'ACCESS-PASSPHRASE': this.password,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-NONCE': nonce
        // 'OK-FROM': '',
        // 'OK-TO': '',
        // 'OK-LIMIT': '',
      };

      let auth = request + method + timestamp + nonce;
      if (method === 'GET') {
        if (Object.keys(query).length) {
          const urlencodedQuery = '?' + this.urlencode(query);
          url += urlencodedQuery;
          auth = request + urlencodedQuery + method + timestamp + nonce;
        }
      } else {
        if (isArray || Object.keys(query).length) {
          body = this.json(query);
          auth += body;
        }
        headers['Content-Type'] = 'application/json';
      }
      const signature = this.binaryToBase64(this.encode(this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'hex')));
      headers['ACCESS-SIGN'] = signature;
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  parseIncome(income, market = undefined) {
    //
    //     {
    //         "id":666666,
    //         "symbol":"PERP_BTC_USDT",
    //         "funding_rate":0.00001198,
    //         "mark_price":28941.04000000,
    //         "funding_fee":0.00069343,
    //         "payment_type":"Pay",
    //         "status":"COMPLETED",
    //         "created_time":"1653616000.666",
    //         "updated_time":"1653616000.605"
    //     }
    //
    const marketId = this.safeString(income, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const amount = this.safeNumber(income, 'funding_fee');
    const code = this.safeCurrencyCode('USD');
    const id = this.safeString(income, 'id');
    const timestamp = this.safeTimestamp(income, 'updated_time');
    const rate = this.safeNumber(income, 'funding_rate');
    return {
      'info': income,
      'symbol': symbol,
      'code': code,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'id': id,
      'amount': amount,
      'rate': rate
    };
  }
  async fetchLeverage(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchLeverage
     * @description fetch the set leverage for a market
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string} params.marginMode 'cross' or 'isolated'
     * @returns {object} a [leverage structure]{@link https://docs.ccxt.com/#/?id=leverage-structure}
     */
    await this.loadMarkets();
    let marginMode = undefined;
    [marginMode, params] = this.handleMarginModeAndParams('fetchLeverage', params);
    if (marginMode === undefined) {
      marginMode = this.safeString(params, 'marginMode', 'cross'); // cross as default marginMode
    }

    if (marginMode !== 'cross' && marginMode !== 'isolated') {
      throw new _errors.BadRequest(this.id + ' fetchLeverage() requires a marginMode parameter that must be either cross or isolated');
    }
    const market = this.market(symbol);
    const request = {
      'instId': market['id'],
      'marginMode': marginMode
    };
    const response = await this.v1PrivateGetAccountLeverageInfo(this.extend(request, params));
    //
    //     {
    //        "code": "0",
    //        "data": [
    //            {
    //                "instId": "BTC-USDT-SWAP",
    //                "lever": "5.00000000",
    //                "mgnMode": "isolated",
    //                "posSide": "net"
    //            }
    //        ],
    //        "msg": ""
    //     }
    //
    return response;
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    await this.loadMarkets();
    // if ((leverage !== 1) && (leverage !== 2) && (leverage !== 3) && (leverage !== 4) && (leverage !== 5) && (leverage !== 10) && (leverage !== 15) && (leverage !== 20) && (leverage !== 50)) {
    //     throw new BadRequest (this.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
    // }
    // x
    const request = {
      'instId': symbol,
      'leverage': leverage,
      'marginMode': params['marginMode']
    };
    return await this.v1PrivatePostAccountSetLeverage(this.extend(request, params));
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    await this.loadMarkets();
    // if ((leverage !== 1) && (leverage !== 2) && (leverage !== 3) && (leverage !== 4) && (leverage !== 5) && (leverage !== 10) && (leverage !== 15) && (leverage !== 20) && (leverage !== 50)) {
    //     throw new BadRequest (this.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
    // }
    const request = {
      'instId': symbol,
      'leverage': params['leverage'],
      'marginMode': marginMode
    };
    return await this.v1PrivatePostAccountSetLeverage(this.extend(request, params));
  }
  async fetchPositions(symbols = undefined, params = {}) {
    await this.loadMarkets();
    const request = {
      // 'instType': 'MARGIN', // optional string, MARGIN, SWAP, FUTURES, OPTION
      // 'instId': market['id'], // optional string, e.g. 'BTC-USD-190927-5000-C'
      // 'posId': '307173036051017730', // optional string, Single or multiple position IDs (no more than 20) separated with commas
    };
    if (symbols !== undefined) {
      const marketIds = [];
      for (let i = 0; i < symbols.length; i++) {
        const entry = symbols[i];
        const market = this.market(entry);
        marketIds.push(market['id']);
      }
      const marketIdsLength = marketIds.length;
      if (marketIdsLength > 0) {
        request['instId'] = marketIds.join(',');
      }
    }
    const response = await this.v1PrivateGetAccountPositions(this.extend(request, params));
    const positions = this.safeValue(response, 'data', []);
    const result = [];
    for (let i = 0; i < positions.length; i++) {
      result.push(this.parsePosition(positions[i]));
    }
    return this.filterByArray(result, 'symbol', symbols, false);
  }
  parsePosition(position, market = undefined) {
    //
    //     {
    //       "adl": "3",
    //       "availPos": "1",
    //       "avgPx": "34131.1",
    //       "cTime": "1627227626502",
    //       "ccy": "USDT",
    //       "deltaBS": "",
    //       "deltaPA": "",
    //       "gammaBS": "",
    //       "gammaPA": "",
    //       "imr": "170.66093041794787",
    //       "instId": "BTC-USDT-SWAP",
    //       "instType": "SWAP",
    //       "interest": "0",
    //       "last": "34134.4",
    //       "lever": "2",
    //       "liab": "",
    //       "liabCcy": "",
    //       "liqPx": "12608.959083877446",
    //       "margin": "",
    //       "mgnMode": "cross",
    //       "mgnRatio": "140.49930117599155",
    //       "mmr": "1.3652874433435829",
    //       "notionalUsd": "341.5130010779638",
    //       "optVal": "",
    //       "pos": "1",
    //       "posCcy": "",
    //       "posId": "339552508062380036",
    //       "posSide": "long",
    //       "thetaBS": "",
    //       "thetaPA": "",
    //       "tradeId": "98617799",
    //       "uTime": "1627227626502",
    //       "upl": "0.0108608358957281",
    //       "uplRatio": "0.0000636418743944",
    //       "vegaBS": "",
    //       "vegaPA": ""
    //     }
    //
    const marketId = this.safeString(position, 'instId');
    market = this.safeMarket(marketId, market);
    // const symbol = market['symbol'];
    const symbol = marketId;
    const contractsString = this.safeString(position, 'positions');
    let contracts = undefined;
    if (contractsString !== undefined) {
      contracts = this.parseNumber(contractsString);
    }
    const notionalString = this.safeString(position, 'notionalUsd');
    const notional = this.parseNumber(notionalString);
    const marginType = this.safeString(position, 'marginMode');
    const entryPriceString = this.safeString(position, 'averagePrice');
    const unrealizedPnlString = this.safeString(position, 'unrealizedPnl');
    const initialMarginString = this.safeString2(position, 'initialMargin', 'margin');
    const maintenanceMarginString = this.safeString(position, 'maintenanceMargin');
    const maintenanceMargin = this.parseNumber(maintenanceMarginString);
    let initialMarginPercentage = undefined;
    let maintenanceMarginPercentage = undefined;
    if (market['inverse']) {
      const notionalValue = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(contractsString, market['contractSize']), entryPriceString);
      maintenanceMarginPercentage = _Precise.Precise.stringDiv(maintenanceMarginString, notionalValue);
      initialMarginPercentage = this.parseNumber(_Precise.Precise.stringDiv(initialMarginString, notionalValue, 4));
    } else {
      maintenanceMarginPercentage = _Precise.Precise.stringDiv(maintenanceMarginString, notionalString);
      initialMarginPercentage = this.parseNumber(_Precise.Precise.stringDiv(initialMarginString, notionalString, 4));
    }
    const rounder = '0.00005'; // round to closest 0.01%
    maintenanceMarginPercentage = this.parseNumber(_Precise.Precise.stringDiv(_Precise.Precise.stringAdd(maintenanceMarginPercentage, rounder), '1', 4));
    const collateralString = _Precise.Precise.stringAdd(initialMarginString, unrealizedPnlString);
    const liquidationPrice = this.safeNumber(position, 'liquidationPrice');
    const percentageString = this.safeString(position, 'unrealizedPnlRatio');
    const percentage = this.parseNumber(_Precise.Precise.stringMul(percentageString, '100'));
    let side = this.safeString(position, 'positionSide');
    if (side === 'net') {
      side = _Precise.Precise.stringGt(contractsString, '0') ? 'long' : 'short';
    }
    if (side === 'short' && _Precise.Precise.stringGt(contractsString, '0')) {
      contracts = contracts * -1;
    }
    const timestamp = this.safeInteger(position, 'updateTime');
    const leverage = this.safeInteger(position, 'leverage');
    const marginRatio = this.parseNumber(_Precise.Precise.stringDiv(maintenanceMarginString, collateralString, 4));
    const id = symbol + ':' + side + ':' + marginType;
    let status = 'closed';
    if (contractsString !== '0') {
      status = 'open';
    }
    return {
      'id': id,
      'info': this.deepExtend(position, {
        'symbol': symbol
      }),
      'symbol': symbol,
      'notional': notional,
      'marginType': marginType,
      'liquidationPrice': liquidationPrice,
      'entryPrice': this.parseNumber(entryPriceString),
      'unrealizedPnl': this.parseNumber(unrealizedPnlString),
      'percentage': percentage,
      'contracts': contracts,
      'contractSize': this.parseNumber(market['contractSize']),
      'side': side,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'maintenanceMargin': maintenanceMargin,
      'maintenanceMarginPercentage': maintenanceMarginPercentage,
      'collateral': this.parseNumber(collateralString),
      'initialMargin': this.parseNumber(initialMarginString),
      'initialMarginPercentage': this.parseNumber(initialMarginPercentage),
      'leverage': leverage,
      'marginRatio': marginRatio,
      'isolated': marginType !== 'cross',
      'status': status,
      'tradeMode': 'oneway'
      // 'info': info,
      // 'id': id,
      // 'symbol': symbol,
      // 'timestamp': timestamp,
      // 'datetime': datetime,
      // 'isolated': isolated,
      // 'hedged': hedged,
      // 'side': side,
      // 'contracts': contracts,
      // 'price': price,
      // 'markPrice': markPrice,
      // 'notional': notional,
      // 'leverage': leverage,
      // 'initialMargin': initialMargin,
      // 'maintenanceMargin': maintenanceMargin,
      // 'initialMarginPercentage': initialMarginPercentage,
      // 'maintenanceMarginPercentage': maintenanceMarginPercentage,
      // 'unrealizedPnl': unrealizedPnl,
      // 'pnl': pnl,
      // 'liquidationPrice': liquidationPrice,
      // 'status': status,
      // 'entryPrice': entryPrice,
      // 'marginRatio': marginRatio,
      // 'collateral': collateral,
      // 'marginType': marginType,
      // 'percentage': percentage,
      // 'maxLeverage': maxLeverage,
      // 'tradeMode': tradeMode,
    };
  }

  async setPositionMode(hedged, symbol = undefined, params = {}) {
    let positionMode = 'net_mode';
    if (hedged) {
      positionMode = 'long_short_mode';
    }
    const request = {
      'positionMode': positionMode
    };
    return await this.v1PrivatePostAccountSetPositionMode(this.extend(request, params));
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    await this.loadMarkets();
    if (symbol === 'BTC/USDT:USDT') {
      symbol = 'BTC-USDT';
    }
    const market = this.market(symbol);
    const marginModeRequest = {
      'instId': market['id']
    };
    const marginModeResponse = await this.v1PrivateGetAccountMarginMode(marginModeRequest);
    const marginModeData = this.safeValue(marginModeResponse, 'data');
    const marginMode = this.safeString(marginModeData, 'marginMode');
    const posModeRequest = {
      'instId': market['id'],
      'marginMode': marginMode
    };
    const posModeRes = await this.v1PrivateGetAccountBatchLeverageInfo(posModeRequest);
    const posModeData = this.safeValue(posModeRes, 'data');
    let accountConfig = {};
    if (posModeData.length === 1) {
      const posInfo = this.safeValue(posModeData, 0);
      const leverage = this.safeString(posInfo, 'leverage');
      accountConfig = {
        'marginMode': marginMode,
        'positionMode': 'oneway',
        'leverage': leverage,
        'markets': {}
      };
      accountConfig['markets'][symbol] = {
        'leverage': leverage
      };
    } else {
      const buyPosInfo = this.safeValue(posModeData, 0);
      const sellPosInfo = this.safeValue(posModeData, 1);
      const buyLeverage = this.safeString(buyPosInfo, 'leverage');
      const sellLeverage = this.safeString(sellPosInfo, 'leverage');
      accountConfig = {
        'marginMode': marginMode,
        'positionMode': 'hedged',
        'buyLeverage': buyLeverage,
        'sellLeverage': sellLeverage,
        'markets': {}
      };
      accountConfig['markets'][symbol] = {
        'buyLeverage': buyLeverage,
        'sellLeverage': sellLeverage
      };
    }
    return accountConfig;
  }
  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (!response) {
      return; // fallback to default error handler
    }
    //
    //    {
    //        "code": "1",
    //        "data": [
    //            {
    //                "clOrdId": "",
    //                "ordId": "",
    //                "sCode": "51119",
    //                "sMsg": "Order placement failed due to insufficient balance. ",
    //                "tag": ""
    //            }
    //        ],
    //        "msg": ""
    //    },
    //    {
    //        "code": "58001",
    //        "data": [],
    //        "msg": "Incorrect trade password"
    //    }
    //
    const code = this.safeString(response, 'code');
    const data = this.safeValue(response, 'data', []);
    if (code !== '0' && code !== '1') {
      const feedback = this.id + ' ' + body;
      for (let i = 0; i < data.length; i++) {
        const error = data[i];
        const errorCode = this.safeString(error, 'sCode');
        const message = this.safeString(error, 'sMsg');
        this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
      }
      this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);
      throw new _errors.ExchangeError(feedback); // unknown message
    }

    for (let i = 0; i < data.length; i++) {
      // hack bc not always array and this.isArray not working
      let error = null;
      try {
        error = data[i];
      } catch (e) {
        continue;
      }
      const errorCode = this.safeString2(error, 'sCode', 'code', '0');
      if (errorCode !== '0') {
        const message = this.safeString2(error, 'sMsg', 'msg');
        const feedback = this.id + ' ' + message;
        this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
        // fuck it cant keep up with all the blofin errors
        throw new _errors.InvalidOrder(feedback);
      }
    }
  }
  market(symbol) {
    symbol = symbol.replace('/', '-');
    // symbol = symbol + ':USDT';
    if (this.markets === undefined) {
      throw new _errors.ExchangeError(this.id + ' markets not loaded');
    }
    if (this.markets_by_id === undefined) {
      throw new _errors.ExchangeError(this.id + ' markets not loaded');
    }
    // TEALSTREET patch for backwards compatability
    // this.marketHelper (symbol.split (':')[0]);
    let foundMarket = this.marketHelper(symbol);
    if (foundMarket) {
      return foundMarket;
    }
    const marketStem = symbol.split(':')[0];
    const marketParts = marketStem.split('/');
    if (marketParts.length === 2) {
      foundMarket = this.marketHelper(marketParts[0] + '/' + marketParts[1] + ':' + marketParts[1]);
    }
    if (foundMarket) {
      return foundMarket;
    }
    foundMarket = this.marketHelper(marketStem + ':USDT') || this.marketHelper(marketStem + ':BTC') || this.marketHelper(marketStem);
    if (foundMarket) {
      return foundMarket;
    }
    // eslint-disable-next-line no-console
    // console.log (symbol);
    // eslint-disable-next-line no-console
    // console.log (this.markets);
    throw new _errors.BadSymbol(this.id + ' does not have market symbol ' + symbol);
  }
}
exports.default = blofin;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _number = require("./base/functions/number.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bybit extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'bybit',
      'name': 'Bybit',
      'countries': ['VG'],
      'version': 'v5',
      'userAgent': undefined,
      'rateLimit': 20,
      'hostname': 'bybit.com',
      'refCode': 'Tealstreet',
      'pro': true,
      'certified': true,
      'has': {
        'CORS': true,
        'spot': true,
        'margin': true,
        'swap': true,
        'future': true,
        'option': undefined,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'createOrder': true,
        'createPostOnlyOrder': true,
        'createReduceOnlyOrder': true,
        'createStopLimitOrder': true,
        'createStopMarketOrder': true,
        'createStopOrder': true,
        'editOrder': true,
        'fetchBalance': true,
        'fetchBorrowInterest': false,
        'fetchBorrowRate': true,
        'fetchBorrowRateHistories': false,
        'fetchBorrowRateHistory': false,
        'fetchBorrowRates': false,
        'fetchCanceledOrders': true,
        'fetchClosedOrders': true,
        'fetchCurrencies': true,
        'fetchDeposit': false,
        'fetchDepositAddress': true,
        'fetchDepositAddresses': false,
        'fetchDepositAddressesByNetwork': true,
        'fetchDeposits': true,
        'fetchFundingRate': true,
        'fetchFundingRateHistory': true,
        'fetchFundingRates': true,
        'fetchIndexOHLCV': true,
        'fetchLedger': true,
        'fetchMarketLeverageTiers': true,
        'fetchMarkets': true,
        'fetchMarkOHLCV': true,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenInterest': true,
        'fetchOpenInterestHistory': true,
        'fetchOpenOrders': true,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrders': true,
        'fetchOrderTrades': true,
        'fetchPosition': true,
        'fetchPositions': true,
        'fetchPremiumIndexOHLCV': true,
        'fetchTicker': true,
        'fetchTickers': true,
        'fetchTime': true,
        'fetchTrades': true,
        'fetchTradingFee': true,
        'fetchTradingFees': true,
        'fetchTransactions': false,
        'fetchTransfers': true,
        'fetchWithdrawals': true,
        'setLeverage': true,
        'setMarginMode': true,
        'setPositionMode': true,
        'transfer': true,
        'withdraw': true
      },
      'timeframes': {
        '1m': '1',
        '3m': '3',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '4h': '240',
        '6h': '360',
        '12h': '720',
        '1d': 'D',
        '1w': 'W',
        '1M': 'M'
      },
      'urls': {
        'test': {
          'spot': 'https://api-testnet.{hostname}',
          'futures': 'https://api-testnet.{hostname}',
          'v2': 'https://api-testnet.{hostname}',
          'public': 'https://api-testnet.{hostname}',
          'private': 'https://api-testnet.{hostname}'
        },
        'logo': 'https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg',
        'api': {
          'spot': 'https://api.{hostname}',
          'futures': 'https://api.{hostname}',
          'v2': 'https://api.{hostname}',
          'public': 'https://api.{hostname}',
          'private': 'https://api.{hostname}'
        },
        'www': 'https://www.bybit.com',
        'doc': ['https://bybit-exchange.github.io/docs/inverse/', 'https://bybit-exchange.github.io/docs/linear/', 'https://github.com/bybit-exchange'],
        'fees': 'https://help.bybit.com/hc/en-us/articles/360039261154',
        'referral': 'https://www.bybit.com/register?affiliate_id=35953'
      },
      'api': {
        'public': {
          'get': {
            // inverse swap
            'v2/public/orderBook/L2': 1,
            'v2/public/kline/list': 3,
            'v2/public/tickers': 1,
            'v2/public/trading-records': 1,
            'v2/public/symbols': 1,
            'v2/public/mark-price-kline': 3,
            'v2/public/index-price-kline': 3,
            'v2/public/premium-index-kline': 2,
            'v2/public/open-interest': 1,
            'v2/public/big-deal': 1,
            'v2/public/account-ratio': 1,
            'v2/public/funding-rate': 1,
            'v2/public/elite-ratio': 1,
            'v2/public/funding/prev-funding-rate': 1,
            'v2/public/risk-limit/list': 1,
            // linear swap USDT
            'public/linear/kline': 3,
            'public/linear/recent-trading-records': 1,
            'public/linear/risk-limit': 1,
            'public/linear/funding/prev-funding-rate': 1,
            'public/linear/mark-price-kline': 1,
            'public/linear/index-price-kline': 1,
            'public/linear/premium-index-kline': 1,
            // spot
            'spot/v1/time': 1,
            'spot/v1/symbols': 1,
            'spot/quote/v1/depth': 1,
            'spot/quote/v1/depth/merged': 1,
            'spot/quote/v1/trades': 1,
            'spot/quote/v1/kline': 1,
            'spot/quote/v1/ticker/24hr': 1,
            'spot/quote/v1/ticker/price': 1,
            'spot/quote/v1/ticker/book_ticker': 1,
            'spot/v3/public/symbols': 1,
            'spot/v3/public/quote/depth': 1,
            'spot/v3/public/quote/depth/merged': 1,
            'spot/v3/public/quote/trades': 1,
            'spot/v3/public/quote/kline': 1,
            'spot/v3/public/quote/ticker/24hr': 1,
            'spot/v3/public/quote/ticker/price': 1,
            'spot/v3/public/quote/ticker/bookTicker': 1,
            'spot/v3/public/server-time': 1,
            'spot/v3/public/infos': 1,
            // data
            'v2/public/time': 1,
            'v3/public/time': 1,
            'v2/public/announcement': 1,
            // USDC endpoints
            // option USDC
            'option/usdc/openapi/public/v1/order-book': 1,
            'option/usdc/openapi/public/v1/symbols': 1,
            'option/usdc/openapi/public/v1/tick': 1,
            'option/usdc/openapi/public/v1/delivery-price': 1,
            'option/usdc/openapi/public/v1/query-trade-latest': 1,
            'option/usdc/openapi/public/v1/query-historical-volatility': 1,
            'option/usdc/openapi/public/v1/all-tickers': 1,
            // perpetual swap USDC
            'perpetual/usdc/openapi/public/v1/order-book': 1,
            'perpetual/usdc/openapi/public/v1/symbols': 1,
            'perpetual/usdc/openapi/public/v1/tick': 1,
            'perpetual/usdc/openapi/public/v1/kline/list': 1,
            'perpetual/usdc/openapi/public/v1/mark-price-kline': 1,
            'perpetual/usdc/openapi/public/v1/index-price-kline': 1,
            'perpetual/usdc/openapi/public/v1/premium-index-kline': 1,
            'perpetual/usdc/openapi/public/v1/open-interest': 1,
            'perpetual/usdc/openapi/public/v1/big-deal': 1,
            'perpetual/usdc/openapi/public/v1/account-ratio': 1,
            'perpetual/usdc/openapi/public/v1/prev-funding-rate': 1,
            'perpetual/usdc/openapi/public/v1/risk-limit/list': 1,
            // account
            'asset/v1/public/deposit/allowed-deposit-list': 1,
            'contract/v3/public/copytrading/symbol/list': 1,
            // derivative
            'derivatives/v3/public/order-book/L2': 1,
            'derivatives/v3/public/kline': 1,
            'derivatives/v3/public/tickers': 1,
            'derivatives/v3/public/instruments-info': 1,
            'derivatives/v3/public/mark-price-kline': 1,
            'derivatives/v3/public/index-price-kline': 1,
            'derivatives/v3/public/funding/history-funding-rate': 1,
            'derivatives/v3/public/risk-limit/list': 1,
            'derivatives/v3/public/delivery-price': 1,
            'derivatives/v3/public/recent-trade': 1,
            'derivatives/v3/public/open-interest': 1,
            'derivatives/v3/public/insurance': 1,
            // v5
            'v5/market/kline': 1,
            'v5/market/mark-price-kline': 1,
            'v5/market/index-price-kline': 1,
            'v5/market/premium-index-price-kline': 1,
            'v5/market/instruments-info': 1,
            'v5/market/orderbook': 1,
            'v5/market/tickers': 1,
            'v5/market/funding/history': 1,
            'v5/market/recent-trade': 1,
            'v5/market/open-interest': 1,
            'v5/market/historical-volatility': 1,
            'v5/market/insurance': 1,
            'v5/market/risk-limit': 1,
            'v5/market/delivery-price': 1,
            'v5/spot-lever-token/info': 1,
            'v5/spot-lever-token/reference': 1
          }
        },
        'private': {
          'get': {
            // inverse swap
            'v2/private/order/list': 5,
            'v2/private/order': 5,
            'v2/private/stop-order/list': 5,
            'v2/private/stop-order': 1,
            'v2/private/position/list': 25,
            'v2/private/position/fee-rate': 40,
            'v2/private/execution/list': 25,
            'v2/private/trade/closed-pnl/list': 1,
            'v2/public/risk-limit/list': 1,
            'v2/public/funding/prev-funding-rate': 25,
            'v2/private/funding/prev-funding': 25,
            'v2/private/funding/predicted-funding': 25,
            'v2/private/account/api-key': 5,
            'v2/private/account/lcp': 1,
            'v2/private/wallet/balance': 25,
            'v2/private/wallet/fund/records': 25,
            'v2/private/wallet/withdraw/list': 25,
            'v2/private/exchange-order/list': 1,
            // linear swap USDT
            'private/linear/order/list': 5,
            'private/linear/order/search': 5,
            'private/linear/stop-order/list': 5,
            'private/linear/stop-order/search': 5,
            'private/linear/position/list': 25,
            'private/linear/trade/execution/list': 25,
            'private/linear/trade/closed-pnl/list': 25,
            'public/linear/risk-limit': 1,
            'private/linear/funding/predicted-funding': 25,
            'private/linear/funding/prev-funding': 25,
            // inverse futures
            'futures/private/order/list': 5,
            'futures/private/order': 5,
            'futures/private/stop-order/list': 5,
            'futures/private/stop-order': 5,
            'futures/private/position/list': 25,
            'futures/private/execution/list': 25,
            'futures/private/trade/closed-pnl/list': 1,
            // spot
            'spot/v1/account': 2.5,
            'spot/v1/order': 2.5,
            'spot/v1/open-orders': 2.5,
            'spot/v1/history-orders': 2.5,
            'spot/v1/myTrades': 2.5,
            'spot/v1/cross-margin/order': 10,
            'spot/v1/cross-margin/accounts/balance': 10,
            'spot/v1/cross-margin/loan-info': 10,
            'spot/v1/cross-margin/repay/history': 10,
            'spot/v3/private/order': 2.5,
            'spot/v3/private/open-orders': 2.5,
            'spot/v3/private/history-orders': 2.5,
            'spot/v3/private/my-trades': 2.5,
            'spot/v3/private/account': 2.5,
            'spot/v3/private/reference': 2.5,
            'spot/v3/private/record': 2.5,
            'spot/v3/private/cross-margin-orders': 10,
            'spot/v3/private/cross-margin-account': 10,
            'spot/v3/private/cross-margin-loan-info': 10,
            'spot/v3/private/cross-margin-repay-history': 10,
            // account
            'asset/v1/private/transfer/list': 50,
            'asset/v3/private/transfer/inter-transfer/list/query': 0.84,
            'asset/v1/private/sub-member/transfer/list': 50,
            'asset/v3/private/transfer/sub-member/list/query': 0.84,
            'asset/v3/private/transfer/sub-member-transfer/list/query': 0.84,
            'asset/v3/private/transfer/universal-transfer/list/query': 0.84,
            'asset/v1/private/sub-member/member-ids': 50,
            'asset/v1/private/deposit/record/query': 50,
            'asset/v1/private/withdraw/record/query': 25,
            'asset/v1/private/coin-info/query': 25,
            'asset/v3/private/coin-info/query': 25,
            'asset/v1/private/asset-info/query': 50,
            'asset/v1/private/deposit/address': 100,
            'asset/v3/private/deposit/address/query': 0.17,
            'asset/v1/private/universal/transfer/list': 50,
            'contract/v3/private/copytrading/order/list': 1,
            'contract/v3/private/copytrading/position/list': 1,
            'contract/v3/private/copytrading/wallet/balance': 1,
            'contract/v3/private/position/limit-info': 25,
            'contract/v3/private/order/unfilled-orders': 1,
            'contract/v3/private/order/list': 1,
            'contract/v3/private/position/list': 1,
            'contract/v3/private/execution/list': 1,
            'contract/v3/private/position/closed-pnl': 1,
            'contract/v3/private/account/wallet/balance': 1,
            'contract/v3/private/account/fee-rate': 1,
            'contract/v3/private/account/wallet/fund-records': 1,
            // derivative
            'unified/v3/private/order/unfilled-orders': 1,
            'unified/v3/private/order/list': 1,
            'unified/v3/private/position/list': 1,
            'unified/v3/private/execution/list': 1,
            'unified/v3/private/delivery-record': 1,
            'unified/v3/private/settlement-record': 1,
            'unified/v3/private/account/wallet/balance': 1,
            'unified/v3/private/account/transaction-log': 1,
            'asset/v2/private/exchange/exchange-order-all': 1,
            'unified/v3/private/account/borrow-history': 1,
            'unified/v3/private/account/borrow-rate': 1,
            'unified/v3/private/account/info': 1,
            'user/v3/private/frozen-sub-member': 10,
            'user/v3/private/query-sub-members': 5,
            'user/v3/private/query-api': 5,
            'asset/v3/private/transfer/transfer-coin/list/query': 0.84,
            'asset/v3/private/transfer/account-coin/balance/query': 0.84,
            'asset/v3/private/transfer/account-coins/balance/query': 50,
            'asset/v3/private/transfer/asset-info/query': 0.84,
            'asset/v3/public/deposit/allowed-deposit-list/query': 0.17,
            'asset/v3/private/deposit/record/query': 0.17,
            'asset/v3/private/withdraw/record/query': 0.17,
            // v5
            'v5/order/history': 2.5,
            'v5/order/spot-borrow-check': 2.5,
            'v5/order/realtime': 2.5,
            'v5/position/list': 2.5,
            'v5/execution/list': 2.5,
            'v5/position/closed-pnl': 2.5,
            'v5/account/wallet-balance': 2.5,
            'v5/account/borrow-history': 2.5,
            'v5/account/collateral-info': 2.5,
            'v5/account/mmp-state': 2.5,
            'v5/asset/coin-greeks': 2.5,
            'v5/account/info': 2.5,
            'v5/account/transaction-log': 2.5,
            'v5/account/fee-rate': 1,
            'v5/asset/exchange/order-record': 2.5,
            'v5/asset/delivery-record': 2.5,
            'v5/asset/settlement-record': 2.5,
            'v5/asset/transfer/query-asset-info': 2.5,
            'v5/asset/transfer/query-account-coin-balance': 2.5,
            'v5/asset/transfer/query-transfer-coin-list': 2.5,
            'v5/asset/transfer/query-inter-transfer-list': 2.5,
            'v5/asset/transfer/query-sub-member-list': 2.5,
            'v5/asset/transfer/query-universal-transfer-list': 1,
            'v5/asset/deposit/query-allowed-list': 2.5,
            'v5/asset/deposit/query-record': 2.5,
            'v5/asset/deposit/query-sub-member-record': 2.5,
            'v5/asset/deposit/query-address': 2.5,
            'v5/asset/deposit/query-sub-member-address': 2.5,
            'v5/asset/deposit/query-internal-record': 2.5,
            'v5/asset/coin/query-info': 2.5,
            'v5/asset/withdraw/query-record': 2.5,
            'v5/asset/withdraw/withdrawable-amount': 2.5,
            'v5/asset/transfer/query-account-coins-balance': 2.5,
            // user
            'v5/user/query-sub-members': 10,
            'v5/user/query-api': 10,
            'v5/user/get-member-type': 10
          },
          'post': {
            // inverse swap
            'v2/private/order/create': 30,
            'v2/private/order/cancel': 30,
            'v2/private/order/cancelAll': 300,
            'v2/private/order/replace': 30,
            'v2/private/stop-order/create': 30,
            'v2/private/stop-order/cancel': 30,
            'v2/private/stop-order/cancelAll': 300,
            'v2/private/stop-order/replace': 30,
            'v2/private/position/change-position-margin': 40,
            'v2/private/position/trading-stop': 40,
            'v2/private/position/leverage/save': 40,
            'v2/private/tpsl/switch-mode': 40,
            'v2/private/position/switch-isolated': 2.5,
            'v2/private/position/risk-limit': 2.5,
            'v2/private/position/switch-mode': 2.5,
            // linear swap USDT
            'private/linear/order/create': 30,
            'private/linear/order/cancel': 30,
            'private/linear/order/cancel-all': 300,
            'private/linear/order/replace': 30,
            'private/linear/stop-order/create': 30,
            'private/linear/stop-order/cancel': 30,
            'private/linear/stop-order/cancel-all': 300,
            'private/linear/stop-order/replace': 30,
            'private/linear/position/set-auto-add-margin': 40,
            'private/linear/position/switch-isolated': 40,
            'private/linear/position/switch-mode': 40,
            'private/linear/tpsl/switch-mode': 2.5,
            'private/linear/position/add-margin': 40,
            'private/linear/position/set-leverage': 40,
            'private/linear/position/trading-stop': 40,
            'private/linear/position/set-risk': 2.5,
            // inverse futures
            'futures/private/order/create': 30,
            'futures/private/order/cancel': 30,
            'futures/private/order/cancelAll': 30,
            'futures/private/order/replace': 30,
            'futures/private/stop-order/create': 30,
            'futures/private/stop-order/cancel': 30,
            'futures/private/stop-order/cancelAll': 30,
            'futures/private/stop-order/replace': 30,
            'futures/private/position/change-position-margin': 40,
            'futures/private/position/trading-stop': 40,
            'futures/private/position/leverage/save': 40,
            'futures/private/position/switch-mode': 40,
            'futures/private/tpsl/switch-mode': 40,
            'futures/private/position/switch-isolated': 40,
            'futures/private/position/risk-limit': 2.5,
            // spot
            'spot/v1/order': 2.5,
            'spot/v1/cross-margin/loan': 10,
            'spot/v1/cross-margin/repay': 10,
            'spot/v3/private/order': 2.5,
            'spot/v3/private/cancel-order': 2.5,
            'spot/v3/private/cancel-orders': 2.5,
            'spot/v3/private/cancel-orders-by-ids': 2.5,
            'spot/v3/private/purchase': 2.5,
            'spot/v3/private/redeem': 2.5,
            'spot/v3/private/cross-margin-loan': 10,
            'spot/v3/private/cross-margin-repay': 10,
            // account
            'asset/v1/private/transfer': 150,
            'asset/v3/private/transfer/inter-transfer': 2.5,
            'asset/v1/private/sub-member/transfer': 150,
            'asset/v1/private/withdraw': 50,
            'asset/v3/private/withdraw/create': 1,
            'asset/v1/private/withdraw/cancel': 50,
            'asset/v3/private/withdraw/cancel': 0.84,
            'asset/v1/private/transferable-subs/save': 3000,
            'asset/v1/private/universal/transfer': 1500,
            'asset/v3/private/transfer/sub-member-transfer': 2.5,
            'asset/v3/private/transfer/transfer-sub-member-save': 2.5,
            'asset/v3/private/transfer/universal-transfer': 2.5,
            'user/v3/private/create-sub-member': 10,
            'user/v3/private/create-sub-api': 10,
            'user/v3/private/update-api': 10,
            'user/v3/private/delete-api': 10,
            'user/v3/private/update-sub-api': 10,
            'user/v3/private/delete-sub-api': 10,
            // USDC endpoints
            // option USDC
            'option/usdc/openapi/private/v1/place-order': 2.5,
            'option/usdc/openapi/private/v1/batch-place-order': 2.5,
            'option/usdc/openapi/private/v1/replace-order': 2.5,
            'option/usdc/openapi/private/v1/batch-replace-orders': 2.5,
            'option/usdc/openapi/private/v1/cancel-order': 2.5,
            'option/usdc/openapi/private/v1/batch-cancel-orders': 2.5,
            'option/usdc/openapi/private/v1/cancel-all': 2.5,
            'option/usdc/openapi/private/v1/query-active-orders': 2.5,
            'option/usdc/openapi/private/v1/query-order-history': 2.5,
            'option/usdc/openapi/private/v1/execution-list': 2.5,
            'option/usdc/openapi/private/v1/query-transaction-log': 2.5,
            'option/usdc/openapi/private/v1/query-wallet-balance': 2.5,
            'option/usdc/openapi/private/v1/query-asset-info': 2.5,
            'option/usdc/openapi/private/v1/query-margin-info': 2.5,
            'option/usdc/openapi/private/v1/query-position': 2.5,
            'option/usdc/openapi/private/v1/query-delivery-list': 2.5,
            'option/usdc/openapi/private/v1/query-position-exp-date': 2.5,
            'option/usdc/openapi/private/v1/mmp-modify': 2.5,
            'option/usdc/openapi/private/v1/mmp-reset': 2.5,
            // perpetual swap USDC
            'perpetual/usdc/openapi/private/v1/place-order': 2.5,
            'perpetual/usdc/openapi/private/v1/replace-order': 2.5,
            'perpetual/usdc/openapi/private/v1/cancel-order': 2.5,
            'perpetual/usdc/openapi/private/v1/cancel-all': 2.5,
            'perpetual/usdc/openapi/private/v1/position/leverage/save': 2.5,
            'option/usdc/openapi/private/v1/session-settlement': 2.5,
            'option/usdc/private/asset/account/setMarginMode': 2.5,
            'perpetual/usdc/openapi/public/v1/risk-limit/list': 2.5,
            'perpetual/usdc/openapi/private/v1/position/set-risk-limit': 2.5,
            'perpetual/usdc/openapi/private/v1/predicted-funding': 2.5,
            'contract/v3/private/copytrading/order/create': 2.5,
            'contract/v3/private/copytrading/order/cancel': 2.5,
            'contract/v3/private/copytrading/order/close': 2.5,
            'contract/v3/private/copytrading/position/close': 2.5,
            'contract/v3/private/copytrading/position/set-leverage': 2.5,
            'contract/v3/private/copytrading/wallet/transfer': 2.5,
            'contract/v3/private/copytrading/order/trading-stop': 2.5,
            'contract/v3/private/order/create': 1,
            'contract/v3/private/order/cancel': 1,
            'contract/v3/private/order/cancel-all': 1,
            'contract/v3/private/order/replace': 1,
            'contract/v3/private/position/set-auto-add-margin': 1,
            'contract/v3/private/position/switch-isolated': 1,
            'contract/v3/private/position/switch-mode': 1,
            'contract/v3/private/position/switch-tpsl-mode': 1,
            'contract/v3/private/position/set-leverage': 1,
            'contract/v3/private/position/trading-stop': 1,
            'contract/v3/private/position/set-risk-limit': 1,
            'contract/v3/private/account/setMarginMode': 1,
            // derivative
            'unified/v3/private/order/create': 2.5,
            'unified/v3/private/order/replace': 2.5,
            'unified/v3/private/order/cancel': 2.5,
            'unified/v3/private/order/create-batch': 2.5,
            'unified/v3/private/order/replace-batch': 2.5,
            'unified/v3/private/order/cancel-batch': 2.5,
            'unified/v3/private/order/cancel-all': 2.5,
            'unified/v3/private/position/set-leverage': 2.5,
            'unified/v3/private/position/tpsl/switch-mode': 2.5,
            'unified/v3/private/position/set-risk-limit': 2.5,
            'unified/v3/private/position/trading-stop': 2.5,
            'unified/v3/private/account/upgrade-unified-account': 2.5,
            'unified/v3/private/account/setMarginMode': 2.5,
            // tax
            'fht/compliance/tax/v3/private/registertime': 50,
            'fht/compliance/tax/v3/private/create': 50,
            'fht/compliance/tax/v3/private/status': 50,
            'fht/compliance/tax/v3/private/url': 50,
            // v5
            'v5/order/create': 2.5,
            'v5/order/amend': 2.5,
            'v5/order/cancel': 2.5,
            'v5/order/cancel-all': 2.5,
            'v5/order/create-batch': 2.5,
            'v5/order/amend-batch': 2.5,
            'v5/order/cancel-batch': 2.5,
            'v5/order/disconnected-cancel-all': 2.5,
            'v5/position/set-leverage': 2.5,
            'v5/position/set-tpsl-mode': 2.5,
            'v5/position/set-risk-limit': 2.5,
            'v5/position/switch-mode': 2.5,
            'v5/position/switch-isolated': 2.5,
            'v5/position/trading-stop': 2.5,
            'v5/account/upgrade-to-uta': 2.5,
            'v5/account/set-margin-mode': 2.5,
            'v5/asset/transfer/inter-transfer': 2.5,
            'v5/asset/transfer/save-transfer-sub-member': 2.5,
            'v5/asset/transfer/universal-transfer': 2.5,
            'v5/asset/deposit/deposit-to-account': 2.5,
            'v5/asset/withdraw/create': 2.5,
            'v5/asset/withdraw/cancel': 2.5,
            'v5/spot-lever-token/purchase': 2.5,
            'v5/spot-lever-token/redeem': 2.5,
            'v5/spot-lever-token/order-record': 2.5,
            'v5/spot-margin-trade/switch-mode': 2.5,
            'v5/spot-margin-trade/set-leverage': 2.5,
            // user
            'v5/user/create-sub-member': 10,
            'v5/user/create-sub-api': 10,
            'v5/user/frozen-sub-member': 10,
            'v5/user/update-api': 10,
            'v5/user/update-sub-api': 10,
            'v5/user/delete-api': 10,
            'v5/user/delete-sub-api': 10
          },
          'delete': {
            // spot
            'spot/v1/order': 2.5,
            'spot/v1/order/fast': 2.5,
            'spot/order/batch-cancel': 2.5,
            'spot/order/batch-fast-cancel': 2.5,
            'spot/order/batch-cancel-by-ids': 2.5
          }
        }
      },
      'httpExceptions': {
        '403': _errors.RateLimitExceeded // Forbidden -- You request too many times
      },

      'exceptions': {
        // Uncodumented explanation of error strings:
        // - oc_diff: order cost needed to place this order
        // - new_oc: total order cost of open orders including the order you are trying to open
        // - ob: order balance - the total cost of current open orders
        // - ab: available balance
        'exact': {
          '-10009': _errors.BadRequest,
          '-1004': _errors.BadRequest,
          '-1021': _errors.BadRequest,
          '-1103': _errors.BadRequest,
          '-1140': _errors.InvalidOrder,
          '-1197': _errors.InvalidOrder,
          '-2013': _errors.InvalidOrder,
          '-2015': _errors.AuthenticationError,
          '-6017': _errors.BadRequest,
          '-6025': _errors.BadRequest,
          '-6029': _errors.BadRequest,
          '5004': _errors.ExchangeError,
          '7001': _errors.BadRequest,
          '10001': _errors.BadRequest,
          '10002': _errors.InvalidNonce,
          '10003': _errors.AuthenticationError,
          '10004': _errors.AuthenticationError,
          '10005': _errors.PermissionDenied,
          '10006': _errors.RateLimitExceeded,
          '10007': _errors.AuthenticationError,
          '10008': _errors.AuthenticationError,
          '10009': _errors.AuthenticationError,
          '10010': _errors.PermissionDenied,
          '10014': _errors.BadRequest,
          '10016': _errors.ExchangeError,
          '10017': _errors.BadRequest,
          '10018': _errors.RateLimitExceeded,
          '10020': _errors.PermissionDenied,
          '10024': _errors.PermissionDenied,
          '10027': _errors.PermissionDenied,
          '10028': _errors.PermissionDenied,
          '10029': _errors.PermissionDenied,
          '12201': _errors.BadRequest,
          '100028': _errors.PermissionDenied,
          '110001': _errors.InvalidOrder,
          '110003': _errors.InvalidOrder,
          '110004': _errors.InsufficientFunds,
          '110005': _errors.InvalidOrder,
          '110006': _errors.InsufficientFunds,
          '110007': _errors.InsufficientFunds,
          '110008': _errors.InvalidOrder,
          '110009': _errors.InvalidOrder,
          '110010': _errors.InvalidOrder,
          '110011': _errors.InvalidOrder,
          '110012': _errors.InsufficientFunds,
          '110013': _errors.BadRequest,
          '110014': _errors.InsufficientFunds,
          '110015': _errors.BadRequest,
          '110016': _errors.InvalidOrder,
          '110017': _errors.InvalidOrder,
          '110018': _errors.BadRequest,
          '110019': _errors.InvalidOrder,
          '110020': _errors.InvalidOrder,
          '110021': _errors.InvalidOrder,
          '110022': _errors.InvalidOrder,
          '110023': _errors.InvalidOrder,
          '110024': _errors.InvalidOrder,
          '110025': _errors.InvalidOrder,
          '110026': _errors.InvalidOrder,
          '110027': _errors.InvalidOrder,
          '110028': _errors.InvalidOrder,
          '110029': _errors.InvalidOrder,
          '110030': _errors.InvalidOrder,
          '110031': _errors.InvalidOrder,
          '110032': _errors.InvalidOrder,
          '110033': _errors.InvalidOrder,
          '110034': _errors.InvalidOrder,
          '110035': _errors.InvalidOrder,
          '110036': _errors.InvalidOrder,
          '110037': _errors.InvalidOrder,
          '110038': _errors.InvalidOrder,
          '110039': _errors.InvalidOrder,
          '110040': _errors.InvalidOrder,
          '110041': _errors.InvalidOrder,
          '110042': _errors.InvalidOrder,
          '110043': _errors.BadRequest,
          '110044': _errors.InsufficientFunds,
          '110045': _errors.InsufficientFunds,
          '110046': _errors.BadRequest,
          '110047': _errors.BadRequest,
          '110048': _errors.BadRequest,
          '110049': _errors.BadRequest,
          '110050': _errors.BadRequest,
          '110051': _errors.InsufficientFunds,
          '110052': _errors.InsufficientFunds,
          '110053': _errors.InsufficientFunds,
          '110054': _errors.InvalidOrder,
          '110055': _errors.InvalidOrder,
          '110056': _errors.InvalidOrder,
          '110057': _errors.InvalidOrder,
          '110058': _errors.InvalidOrder,
          '110059': _errors.InvalidOrder,
          '110060': _errors.BadRequest,
          '110061': _errors.BadRequest,
          '110062': _errors.BadRequest,
          '110063': _errors.ExchangeError,
          '110064': _errors.InvalidOrder,
          '110065': _errors.PermissionDenied,
          '110066': _errors.ExchangeError,
          '110067': _errors.PermissionDenied,
          '110068': _errors.PermissionDenied,
          '110069': _errors.PermissionDenied,
          '110070': _errors.InvalidOrder,
          '110071': _errors.ExchangeError,
          '110072': _errors.InvalidOrder,
          '110073': _errors.ExchangeError,
          '130006': _errors.InvalidOrder,
          '130021': _errors.InsufficientFunds,
          '130074': _errors.InvalidOrder,
          '131001': _errors.InsufficientFunds,
          '131084': _errors.ExchangeError,
          '131200': _errors.ExchangeError,
          '131201': _errors.ExchangeError,
          '131202': _errors.BadRequest,
          '131203': _errors.BadRequest,
          '131204': _errors.BadRequest,
          '131205': _errors.BadRequest,
          '131206': _errors.ExchangeError,
          '131207': _errors.BadRequest,
          '131208': _errors.ExchangeError,
          '131209': _errors.BadRequest,
          '131210': _errors.BadRequest,
          '131211': _errors.BadRequest,
          '131212': _errors.InsufficientFunds,
          '131213': _errors.BadRequest,
          '131214': _errors.BadRequest,
          '131215': _errors.BadRequest,
          '131216': _errors.ExchangeError,
          '131217': _errors.ExchangeError,
          '131002': _errors.BadRequest,
          '131003': _errors.ExchangeError,
          '131004': _errors.AuthenticationError,
          '131085': _errors.InsufficientFunds,
          '131086': _errors.BadRequest,
          '131088': _errors.BadRequest,
          '131089': _errors.BadRequest,
          '131090': _errors.ExchangeError,
          '131091': _errors.ExchangeError,
          '131092': _errors.ExchangeError,
          '131093': _errors.ExchangeError,
          '131094': _errors.BadRequest,
          '131095': _errors.BadRequest,
          '131096': _errors.BadRequest,
          '131097': _errors.ExchangeError,
          '131098': _errors.ExchangeError,
          '131099': _errors.ExchangeError,
          '140003': _errors.InvalidOrder,
          '140004': _errors.InsufficientFunds,
          '140005': _errors.InvalidOrder,
          '140006': _errors.InsufficientFunds,
          '140007': _errors.InsufficientFunds,
          '140008': _errors.InvalidOrder,
          '140009': _errors.InvalidOrder,
          '140010': _errors.InvalidOrder,
          '140011': _errors.InvalidOrder,
          '140012': _errors.InsufficientFunds,
          '140013': _errors.BadRequest,
          '140014': _errors.InsufficientFunds,
          '140015': _errors.InvalidOrder,
          '140016': _errors.InvalidOrder,
          '140017': _errors.InvalidOrder,
          '140018': _errors.BadRequest,
          '140019': _errors.InvalidOrder,
          '140020': _errors.InvalidOrder,
          '140021': _errors.InvalidOrder,
          '140022': _errors.InvalidOrder,
          '140023': _errors.InvalidOrder,
          '140024': _errors.BadRequest,
          '140025': _errors.BadRequest,
          '140026': _errors.BadRequest,
          '140027': _errors.BadRequest,
          '140028': _errors.InvalidOrder,
          '140029': _errors.BadRequest,
          '140030': _errors.InvalidOrder,
          '140031': _errors.BadRequest,
          '140032': _errors.InvalidOrder,
          '140033': _errors.InvalidOrder,
          '140034': _errors.InvalidOrder,
          '140035': _errors.InvalidOrder,
          '140036': _errors.BadRequest,
          '140037': _errors.InvalidOrder,
          '140038': _errors.BadRequest,
          '140039': _errors.BadRequest,
          '140040': _errors.InvalidOrder,
          '140041': _errors.InvalidOrder,
          '140042': _errors.InvalidOrder,
          '140043': _errors.BadRequest,
          '140044': _errors.InsufficientFunds,
          '140045': _errors.InsufficientFunds,
          '140046': _errors.BadRequest,
          '140047': _errors.BadRequest,
          '140048': _errors.BadRequest,
          '140049': _errors.BadRequest,
          '140050': _errors.InvalidOrder,
          '140051': _errors.InsufficientFunds,
          '140052': _errors.InsufficientFunds,
          '140053': _errors.InsufficientFunds,
          '140054': _errors.InvalidOrder,
          '140055': _errors.InvalidOrder,
          '140056': _errors.InvalidOrder,
          '140057': _errors.InvalidOrder,
          '140058': _errors.InvalidOrder,
          '140059': _errors.InvalidOrder,
          '140060': _errors.BadRequest,
          '140061': _errors.BadRequest,
          '140062': _errors.BadRequest,
          '140063': _errors.ExchangeError,
          '140064': _errors.InvalidOrder,
          '140065': _errors.PermissionDenied,
          '140066': _errors.ExchangeError,
          '140067': _errors.PermissionDenied,
          '140068': _errors.PermissionDenied,
          '140069': _errors.PermissionDenied,
          '140070': _errors.InvalidOrder,
          '170001': _errors.ExchangeError,
          '170007': _errors.RequestTimeout,
          '170005': _errors.InvalidOrder,
          '170031': _errors.ExchangeError,
          '170032': _errors.ExchangeError,
          '170033': _errors.InsufficientFunds,
          '170034': _errors.InsufficientFunds,
          '170035': _errors.BadRequest,
          '170036': _errors.BadRequest,
          '170037': _errors.BadRequest,
          '170105': _errors.BadRequest,
          '170115': _errors.InvalidOrder,
          '170116': _errors.InvalidOrder,
          '170117': _errors.InvalidOrder,
          '170121': _errors.InvalidOrder,
          '170130': _errors.BadRequest,
          '170131': _errors.InsufficientFunds,
          '170132': _errors.InvalidOrder,
          '170133': _errors.InvalidOrder,
          '170134': _errors.InvalidOrder,
          '170135': _errors.InvalidOrder,
          '170136': _errors.InvalidOrder,
          '170137': _errors.InvalidOrder,
          '170139': _errors.InvalidOrder,
          '170140': _errors.InvalidOrder,
          '170124': _errors.InvalidOrder,
          '170141': _errors.InvalidOrder,
          '170142': _errors.InvalidOrder,
          '170143': _errors.InvalidOrder,
          '170144': _errors.InvalidOrder,
          '170145': _errors.InvalidOrder,
          '170146': _errors.InvalidOrder,
          '170147': _errors.InvalidOrder,
          '170148': _errors.InvalidOrder,
          '170149': _errors.ExchangeError,
          '170150': _errors.ExchangeError,
          '170151': _errors.InvalidOrder,
          '170157': _errors.InvalidOrder,
          '170159': _errors.InvalidOrder,
          '170190': _errors.InvalidOrder,
          '170191': _errors.InvalidOrder,
          '170192': _errors.InvalidOrder,
          '170193': _errors.InvalidOrder,
          '170194': _errors.InvalidOrder,
          '170195': _errors.InvalidOrder,
          '170196': _errors.InvalidOrder,
          '170197': _errors.InvalidOrder,
          '170198': _errors.InvalidOrder,
          '170199': _errors.InvalidOrder,
          '170200': _errors.InvalidOrder,
          '170221': _errors.BadRequest,
          '170222': _errors.RateLimitExceeded,
          '170223': _errors.InsufficientFunds,
          '170224': _errors.PermissionDenied,
          '170226': _errors.InsufficientFunds,
          '170227': _errors.ExchangeError,
          '170228': _errors.InvalidOrder,
          '170229': _errors.InvalidOrder,
          '170234': _errors.ExchangeError,
          '170210': _errors.InvalidOrder,
          '170213': _errors.OrderNotFound,
          '170217': _errors.InvalidOrder,
          '170218': _errors.InvalidOrder,
          '170010': _errors.InvalidOrder,
          '170011': _errors.InvalidOrder,
          '170019': _errors.InvalidOrder,
          '170201': _errors.PermissionDenied,
          '170202': _errors.InvalidOrder,
          '170203': _errors.InvalidOrder,
          '170204': _errors.InvalidOrder,
          '170206': _errors.InvalidOrder,
          '175000': _errors.InvalidOrder,
          '175001': _errors.InvalidOrder,
          '175002': _errors.InvalidOrder,
          '175003': _errors.InsufficientFunds,
          '175004': _errors.InvalidOrder,
          '175005': _errors.InvalidOrder,
          '175006': _errors.InsufficientFunds,
          '175007': _errors.InvalidOrder,
          '175008': _errors.InvalidOrder,
          '175009': _errors.InvalidOrder,
          '175010': _errors.PermissionDenied,
          '175012': _errors.InvalidOrder,
          '175013': _errors.InvalidOrder,
          '175014': _errors.InvalidOrder,
          '175015': _errors.InvalidOrder,
          '175016': _errors.InvalidOrder,
          '175017': _errors.InvalidOrder,
          '175027': _errors.ExchangeError,
          '176002': _errors.BadRequest,
          '176004': _errors.BadRequest,
          '176003': _errors.BadRequest,
          '176006': _errors.BadRequest,
          '176005': _errors.BadRequest,
          '176008': _errors.BadRequest,
          '176007': _errors.BadRequest,
          '176010': _errors.BadRequest,
          '176009': _errors.BadRequest,
          '176012': _errors.BadRequest,
          '176011': _errors.BadRequest,
          '176014': _errors.BadRequest,
          '176013': _errors.BadRequest,
          '176015': _errors.InsufficientFunds,
          '176016': _errors.BadRequest,
          '176017': _errors.BadRequest,
          '176018': _errors.BadRequest,
          '176019': _errors.BadRequest,
          '176020': _errors.BadRequest,
          '176021': _errors.BadRequest,
          '176022': _errors.BadRequest,
          '176023': _errors.BadRequest,
          '176024': _errors.BadRequest,
          '176025': _errors.BadRequest,
          '176026': _errors.BadRequest,
          '176027': _errors.BadRequest,
          '176028': _errors.BadRequest,
          '176029': _errors.BadRequest,
          '176030': _errors.BadRequest,
          '176031': _errors.BadRequest,
          '176034': _errors.BadRequest,
          '176035': _errors.PermissionDenied,
          '176036': _errors.PermissionDenied,
          '176037': _errors.PermissionDenied,
          '176038': _errors.BadRequest,
          '176039': _errors.BadRequest,
          '176040': _errors.BadRequest,
          '181000': _errors.BadRequest,
          '181001': _errors.BadRequest,
          '181002': _errors.InvalidOrder,
          '181003': _errors.InvalidOrder,
          '181004': _errors.InvalidOrder,
          '182000': _errors.InvalidOrder,
          '20001': _errors.OrderNotFound,
          '20003': _errors.InvalidOrder,
          '20004': _errors.InvalidOrder,
          '20005': _errors.InvalidOrder,
          '20006': _errors.InvalidOrder,
          '20007': _errors.InvalidOrder,
          '20008': _errors.InvalidOrder,
          '20009': _errors.InvalidOrder,
          '20010': _errors.InvalidOrder,
          '20011': _errors.InvalidOrder,
          '20012': _errors.InvalidOrder,
          '20013': _errors.InvalidOrder,
          '20014': _errors.InvalidOrder,
          '20015': _errors.InvalidOrder,
          '20016': _errors.InvalidOrder,
          '20017': _errors.InvalidOrder,
          '20018': _errors.InvalidOrder,
          '20019': _errors.InvalidOrder,
          '20020': _errors.InvalidOrder,
          '20021': _errors.InvalidOrder,
          '20022': _errors.BadRequest,
          '20023': _errors.BadRequest,
          '20031': _errors.BadRequest,
          '20070': _errors.BadRequest,
          '20071': _errors.BadRequest,
          '20084': _errors.BadRequest,
          '30001': _errors.BadRequest,
          '30003': _errors.InvalidOrder,
          '30004': _errors.InvalidOrder,
          '30005': _errors.InvalidOrder,
          '30007': _errors.InvalidOrder,
          '30008': _errors.InvalidOrder,
          '30009': _errors.ExchangeError,
          '30010': _errors.InsufficientFunds,
          '30011': _errors.PermissionDenied,
          '30012': _errors.PermissionDenied,
          '30013': _errors.PermissionDenied,
          '30014': _errors.InvalidOrder,
          '30015': _errors.InvalidOrder,
          '30016': _errors.ExchangeError,
          '30017': _errors.InvalidOrder,
          '30018': _errors.InvalidOrder,
          '30019': _errors.InvalidOrder,
          '30020': _errors.InvalidOrder,
          '30021': _errors.InvalidOrder,
          '30022': _errors.InvalidOrder,
          '30023': _errors.InvalidOrder,
          '30024': _errors.InvalidOrder,
          '30025': _errors.InvalidOrder,
          '30026': _errors.InvalidOrder,
          '30027': _errors.InvalidOrder,
          '30028': _errors.InvalidOrder,
          '30029': _errors.InvalidOrder,
          '30030': _errors.InvalidOrder,
          '30031': _errors.InsufficientFunds,
          '30032': _errors.InvalidOrder,
          '30033': _errors.RateLimitExceeded,
          '30034': _errors.OrderNotFound,
          '30035': _errors.RateLimitExceeded,
          '30036': _errors.ExchangeError,
          '30037': _errors.InvalidOrder,
          '30041': _errors.ExchangeError,
          '30042': _errors.InsufficientFunds,
          '30043': _errors.InvalidOrder,
          '30044': _errors.InvalidOrder,
          '30045': _errors.InvalidOrder,
          '30049': _errors.InsufficientFunds,
          '30050': _errors.ExchangeError,
          '30051': _errors.ExchangeError,
          '30052': _errors.ExchangeError,
          '30054': _errors.ExchangeError,
          '30057': _errors.ExchangeError,
          '30063': _errors.ExchangeError,
          '30067': _errors.InsufficientFunds,
          '30068': _errors.ExchangeError,
          '30074': _errors.InvalidOrder,
          '30075': _errors.InvalidOrder,
          '30078': _errors.ExchangeError,
          // '30084': BadRequest, // Isolated not modified, see handleErrors below
          '33004': _errors.AuthenticationError,
          '34026': _errors.ExchangeError,
          '34036': _errors.BadRequest,
          '35015': _errors.BadRequest,
          '340099': _errors.ExchangeError,
          '3400045': _errors.ExchangeError,
          '3100116': _errors.BadRequest,
          '3100198': _errors.BadRequest,
          '3200300': _errors.InsufficientFunds // {"retCode":3200300,"retMsg":"Insufficient margin balance.","result":null,"retExtMap":{}}
        },

        'broad': {
          'Request timeout': _errors.RequestTimeout,
          'unknown orderInfo': _errors.OrderNotFound,
          'invalid api_key': _errors.AuthenticationError,
          // the below two issues are caused as described: issues/9149#issuecomment-1146559498, when response is such:  {"ret_code":130021,"ret_msg":"oc_diff[1707966351], new_oc[1707966351] with ob[....]+AB[....]","ext_code":"","ext_info":"","result":null,"time_now":"1658395300.872766","rate_limit_status":99,"rate_limit_reset_ms":1658395300855,"rate_limit":100}
          'oc_diff': _errors.InsufficientFunds,
          'new_oc': _errors.InsufficientFunds,
          'openapi sign params error!': _errors.AuthenticationError // {"retCode":10001,"retMsg":"empty value: apiTimestamp[] apiKey[] apiSignature[xxxxxxxxxxxxxxxxxxxxxxx]: openapi sign params error!","result":null,"retExtInfo":null,"time":1664789597123}
        }
      },

      'precisionMode': _number.TICK_SIZE,
      'options': {
        'enableUnifiedMargin': undefined,
        'enableUnifiedAccount': undefined,
        'createMarketBuyOrderRequiresPrice': true,
        'createUnifiedMarginAccount': false,
        'defaultType': 'swap',
        'defaultSubType': 'linear',
        'defaultSettle': 'USDT',
        'code': 'BTC',
        'recvWindow': 5 * 1000,
        'timeDifference': 0,
        'adjustForTimeDifference': false,
        'brokerId': 'CCXT',
        'accountsByType': {
          'spot': 'SPOT',
          'margin': 'SPOT',
          'future': 'CONTRACT',
          'swap': 'CONTRACT',
          'option': 'OPTION',
          'investment': 'INVESTMENT',
          'unified': 'UNIFIED',
          'funding': 'FUND',
          'fund': 'FUND',
          'contract': 'CONTRACT'
        },
        'accountsById': {
          'SPOT': 'spot',
          'MARGIN': 'spot',
          'CONTRACT': 'contract',
          'OPTION': 'option',
          'INVESTMENT': 'investment',
          'UNIFIED': 'unified'
        },
        'networks': {
          'ERC20': 'ETH',
          'TRC20': 'TRX',
          'BEP20': 'BSC',
          'OMNI': 'OMNI',
          'SPL': 'SOL'
        },
        'networksById': {
          'ETH': 'ERC20',
          'TRX': 'TRC20',
          'BSC': 'BEP20',
          'OMNI': 'OMNI',
          'SPL': 'SOL'
        },
        'defaultNetwork': 'ERC20',
        'defaultNetworks': {
          'USDT': 'TRC20'
        },
        'intervals': {
          '5m': '5min',
          '15m': '15min',
          '30m': '30min',
          '1h': '1h',
          '4h': '4h',
          '1d': '1d'
        }
      },
      'fees': {
        'trading': {
          'feeSide': 'get',
          'tierBased': true,
          'percentage': true,
          'taker': 0.00075,
          'maker': 0.0001
        },
        'funding': {
          'tierBased': false,
          'percentage': false,
          'withdraw': {},
          'deposit': {}
        }
      },
      'commonCurrencies': {
        'GAS': 'GASDAO'
      }
    });
  }
  nonce() {
    return this.milliseconds() - this.options['timeDifference'];
  }
  async isUnifiedEnabled(params = {}) {
    // The API key of user id must own one of permissions will be allowed to call following API endpoints.
    // SUB UID: "Account Transfer"
    // MASTER UID: "Account Transfer", "Subaccount Transfer", "Withdrawal"
    const enableUnifiedMargin = this.safeValue(this.options, 'enableUnifiedMargin');
    const enableUnifiedAccount = this.safeValue(this.options, 'enableUnifiedAccount');
    if (enableUnifiedMargin === undefined || enableUnifiedAccount === undefined) {
      const response = await this.privateGetUserV3PrivateQueryApi(params);
      //
      //     {
      //         "retCode":0,
      //         "retMsg":"OK",
      //         "result":{
      //             "id":"88888888",
      //             "note":"ccxt-moon",
      //             "apiKey":"8s8c808v8u8",
      //             "readOnly":0,
      //             "secret":"",
      //             "permissions":{
      //                 "ContractTrade":[""],
      //                 "Spot":[""],
      //                 "Wallet":[""],
      //                 "Options":[""],
      //                 "Derivatives":[""],
      //                 "CopyTrading":[""],
      //                 "BlockTrade":[],
      //                 "Exchange":[""],
      //                 "NFT":[""]
      //             },
      //             "ips":[""],
      //             "type":1,
      //             "deadlineDay":27,
      //             "expiredAt":"",
      //             "createdAt":"",
      //             "unified":1,
      //             "uta": 1
      //         },
      //         "retExtInfo":null,
      //         "time":1669735171649
      //     }
      //
      const result = this.safeValue(response, 'result', {});
      this.options['enableUnifiedMargin'] = this.safeInteger(result, 'unified') === 1;
      this.options['enableUnifiedAccount'] = this.safeInteger(result, 'uta') === 1;
      // this.options['enableUnifiedMargin'] = 1;
      // this.options['enableUnifiedAccount'] = 1;
    }

    return [this.options['enableUnifiedMargin'], this.options['enableUnifiedAccount']];
  }
  async queryUid(params = {}) {
    let response = {};
    try {
      response = await this.privateGetV5UserGetMemberType(params);
    } catch (e) {
      response = {};
    }
    const result = this.safeValue(response, 'result', {});
    return result;
  }
  async upgradeUnifiedAccount(params = {}) {
    const createUnifiedMarginAccount = this.safeValue(this.options, 'createUnifiedMarginAccount');
    if (!createUnifiedMarginAccount) {
      throw new _errors.NotSupported(this.id + ' upgradeUnifiedAccount() warning this method can only be called once, it is not reverseable and you will be stuck with a unified margin account, you also need at least 5000 USDT in your bybit account to do this. If you want to disable this warning set exchange.options["createUnifiedMarginAccount"]=true.');
    }
    return await this.privatePostUnifiedV3PrivateAccountUpgradeUnifiedAccount(params);
  }
  async upgradeUnifiedTradeAccount(params = {}) {
    return await this.privatePostV5AccountUpgradeToUta(params);
  }
  async fetchTime(params = {}) {
    /**
     * @method
     * @name bybit#fetchTime
     * @description fetches the current integer timestamp in milliseconds from the exchange server
     * @see https://bybit-exchange.github.io/docs/v3/server-time
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {int} the current integer timestamp in milliseconds from the exchange server
     */
    const response = await this.publicGetV3PublicTime(params);
    //
    //    {
    //         "retCode": "0",
    //         "retMsg": "OK",
    //         "result": {
    //             "timeSecond": "1666879482",
    //             "timeNano": "1666879482792685914"
    //         },
    //         "retExtInfo": {},
    //         "time": "1666879482792"
    //     }
    //
    return this.safeInteger(response, 'time');
  }
  async fetchCurrencies(params = {}) {
    /**
     * @method
     * @name bybit#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @see https://bybit-exchange.github.io/docs/v5/asset/coin-info
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} an associative dictionary of currencies
     */
    if (!this.checkRequiredCredentials(false)) {
      return undefined;
    }
    const response = await this.privateGetV5AssetCoinQueryInfo(params);
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "",
    //         "result": {
    //             "rows": [
    //                 {
    //                     "name": "BTC",
    //                     "coin": "BTC",
    //                     "remainAmount": "150",
    //                     "chains": [
    //                         {
    //                             "chainType": "BTC",
    //                             "confirmation": "10000",
    //                             "withdrawFee": "0.0005",
    //                             "depositMin": "0.0005",
    //                             "withdrawMin": "0.001",
    //                             "chain": "BTC",
    //                             "chainDeposit": "1",
    //                             "chainWithdraw": "1",
    //                             "minAccuracy": "8"
    //                         }
    //                     ]
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672194582264
    //     }
    //
    const data = this.safeValue(response, 'result', []);
    const rows = this.safeValue(data, 'rows', []);
    const result = {};
    for (let i = 0; i < rows.length; i++) {
      const currency = rows[i];
      const currencyId = this.safeString(currency, 'coin');
      const code = this.safeCurrencyCode(currencyId);
      const name = this.safeString(currency, 'name');
      const chains = this.safeValue(currency, 'chains', []);
      const networks = {};
      let minPrecision = undefined;
      for (let j = 0; j < chains.length; j++) {
        const chain = chains[j];
        const networkId = this.safeString(chain, 'chain');
        const networkCode = this.networkIdToCode(networkId);
        const precision = this.parseNumber(this.parsePrecision(this.safeString(chain, 'minAccuracy')));
        minPrecision = minPrecision === undefined ? precision : Math.min(minPrecision, precision);
        const depositAllowed = this.safeInteger(chain, 'chainDeposit') === 1;
        const withdrawAllowed = this.safeInteger(chain, 'chainWithdraw') === 1;
        networks[networkCode] = {
          'info': chain,
          'id': networkId,
          'network': networkCode,
          'active': undefined,
          'deposit': depositAllowed,
          'withdraw': withdrawAllowed,
          'fee': this.safeNumber(chain, 'withdrawFee'),
          'precision': precision,
          'limits': {
            'withdraw': {
              'min': this.safeNumber(chain, 'withdrawMin'),
              'max': undefined
            },
            'deposit': {
              'min': this.safeNumber(chain, 'depositMin'),
              'max': undefined
            }
          }
        };
      }
      result[code] = {
        'info': currency,
        'code': code,
        'id': currencyId,
        'name': name,
        'active': undefined,
        'deposit': undefined,
        'withdraw': undefined,
        'fee': undefined,
        'precision': minPrecision,
        'limits': {
          'amount': {
            'min': undefined,
            'max': undefined
          }
        },
        'networks': networks
      };
    }
    return result;
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name bybit#fetchMarkets
     * @description retrieves data on all markets for bybit
     * @see https://bybit-exchange.github.io/docs/v5/market/instrument
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    if (this.options['adjustForTimeDifference']) {
      await this.loadTimeDifference();
    }
    const unresolvedPromises = [this.fetchDerivativesMarkets({
      'category': 'linear'
    }), this.fetchDerivativesMarkets({
      'category': 'inverse'
    })];
    const promises = await Promise.all(unresolvedPromises);
    const linearMarkets = promises[0];
    const inverseMarkets = promises[1];
    const markets = linearMarkets;
    return this.arrayConcat(markets, inverseMarkets);
  }
  async fetchDerivativesMarkets(params) {
    params['limit'] = 1000; // minimize number of requests
    const response = await this.publicGetV5MarketInstrumentsInfo(params);
    const data = this.safeValue(response, 'result', {});
    let markets = this.safeValue(data, 'list', []);
    let paginationCursor = this.safeString(data, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.publicGetDerivativesV3PublicInstrumentsInfo(params);
        const data = this.safeValue(response, 'result', {});
        const rawMarkets = this.safeValue(data, 'list', []);
        const rawMarketsLength = rawMarkets.length;
        if (rawMarketsLength === 0) {
          break;
        }
        markets = this.arrayConcat(rawMarkets, markets);
        paginationCursor = this.safeString(data, 'nextPageCursor');
      }
    }
    //
    // linear response
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "BTCUSDT",
    //                     "contractType": "LinearPerpetual",
    //                     "status": "Trading",
    //                     "baseCoin": "BTC",
    //                     "quoteCoin": "USDT",
    //                     "launchTime": "1585526400000",
    //                     "deliveryTime": "0",
    //                     "deliveryFeeRate": "",
    //                     "priceScale": "2",
    //                     "leverageFilter": {
    //                         "minLeverage": "1",
    //                         "maxLeverage": "100.00",
    //                         "leverageStep": "0.01"
    //                     },
    //                     "priceFilter": {
    //                         "minPrice": "0.50",
    //                         "maxPrice": "999999.00",
    //                         "tickSize": "0.50"
    //                     },
    //                     "lotSizeFilter": {
    //                         "maxOrderQty": "100.000",
    //                         "minOrderQty": "0.001",
    //                         "qtyStep": "0.001",
    //                         "postOnlyMaxOrderQty": "1000.000"
    //                     },
    //                     "unifiedMarginTrade": true,
    //                     "fundingInterval": 480,
    //                     "settleCoin": "USDT"
    //                 }
    //             ],
    //             "nextPageCursor": ""
    //         },
    //         "retExtInfo": {},
    //         "time": 1672712495660
    //     }
    //
    // option response
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "option",
    //             "nextPageCursor": "",
    //             "list": [
    //                 {
    //                     "category": "option",
    //                     "symbol": "ETH-3JAN23-1250-P",
    //                     "status": "ONLINE",
    //                     "baseCoin": "ETH",
    //                     "quoteCoin": "USD",
    //                     "settleCoin": "USDC",
    //                     "optionsType": "Put",
    //                     "launchTime": "1672560000000",
    //                     "deliveryTime": "1672732800000",
    //                     "deliveryFeeRate": "0.00015",
    //                     "priceFilter": {
    //                         "minPrice": "0.1",
    //                         "maxPrice": "10000000",
    //                         "tickSize": "0.1"
    //                     },
    //                     "lotSizeFilter": {
    //                         "maxOrderQty": "1500",
    //                         "minOrderQty": "0.1",
    //                         "qtyStep": "0.1"
    //                     }
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672712537130
    //     }
    //
    const result = [];
    let category = this.safeString(data, 'category');
    for (let i = 0; i < markets.length; i++) {
      const market = markets[i];
      if (category === undefined) {
        category = this.safeString(market, 'category');
      }
      const linear = category === 'linear';
      const inverse = category === 'inverse';
      const contractType = this.safeString(market, 'contractType');
      const inverseFutures = contractType === 'InverseFutures';
      const linearPerpetual = contractType === 'LinearPerpetual';
      const inversePerpetual = contractType === 'InversePerpetual';
      const id = this.safeString(market, 'symbol');
      const baseId = this.safeString(market, 'baseCoin');
      const quoteId = this.safeString(market, 'quoteCoin');
      const defaultSettledId = linear ? quoteId : baseId;
      const settleId = this.safeString(market, 'settleCoin', defaultSettledId);
      const base = this.safeCurrencyCode(baseId);
      const quote = this.safeCurrencyCode(quoteId);
      let settle = undefined;
      if (linearPerpetual && settleId === 'USD') {
        settle = 'USDC';
      } else {
        settle = this.safeCurrencyCode(settleId);
      }
      let symbol = base + '/' + quote;
      const lotSizeFilter = this.safeValue(market, 'lotSizeFilter', {});
      const priceFilter = this.safeValue(market, 'priceFilter', {});
      const leverage = this.safeValue(market, 'leverageFilter', {});
      const status = this.safeString(market, 'status');
      const active = status === 'Trading';
      const swap = linearPerpetual || inversePerpetual;
      const future = inverseFutures;
      const option = category === 'option';
      let type = undefined;
      if (swap) {
        type = 'swap';
      } else if (future) {
        type = 'future';
      } else if (option) {
        type = 'option';
      }
      let expiry = this.omitZero(this.safeString(market, 'deliveryTime'));
      if (expiry !== undefined) {
        expiry = parseInt(expiry);
      }
      const expiryDatetime = this.iso8601(expiry);
      let strike = undefined;
      let optionType = undefined;
      symbol = symbol + ':' + settle;
      if (expiry !== undefined) {
        symbol = symbol + '-' + this.yymmdd(expiry);
        if (option) {
          const splitId = id.split('-');
          strike = this.safeString(splitId, 2);
          const optionLetter = this.safeString(splitId, 3);
          symbol = symbol + '-' + strike + '-' + optionLetter;
          if (optionLetter === 'P') {
            optionType = 'put';
          } else if (optionLetter === 'C') {
            optionType = 'call';
          }
        }
      }
      const contractSize = inverse ? this.safeNumber2(lotSizeFilter, 'minTradingQty', 'minOrderQty') : this.parseNumber('1');
      result.push({
        'id': id,
        'symbol': symbol,
        'base': base,
        'quote': quote,
        'settle': settle,
        'baseId': baseId,
        'quoteId': quoteId,
        'settleId': settleId,
        'type': type,
        'spot': false,
        'margin': undefined,
        'swap': swap,
        'future': future,
        'option': option,
        'active': active,
        'contract': true,
        'linear': linear,
        'inverse': inverse,
        'taker': this.safeNumber(market, 'takerFee', this.parseNumber('0.0006')),
        'maker': this.safeNumber(market, 'makerFee', this.parseNumber('0.0001')),
        'contractSize': contractSize,
        'expiry': expiry,
        'expiryDatetime': expiryDatetime,
        'strike': strike,
        'optionType': optionType,
        'precision': {
          'amount': this.safeNumber(lotSizeFilter, 'qtyStep'),
          'price': this.safeNumber(priceFilter, 'tickSize')
        },
        'limits': {
          'leverage': {
            'min': this.safeNumber(leverage, 'minLeverage'),
            'max': this.safeNumber(leverage, 'maxLeverage')
          },
          'amount': {
            'min': this.safeNumber2(lotSizeFilter, 'minTradingQty', 'minOrderQty'),
            'max': this.safeNumber2(lotSizeFilter, 'maxTradingQty', 'maxOrderQty')
          },
          'price': {
            'min': this.safeNumber(priceFilter, 'minPrice'),
            'max': this.safeNumber(priceFilter, 'maxPrice')
          },
          'cost': {
            'min': undefined,
            'max': undefined
          }
        },
        'info': market
      });
    }
    return result;
  }
  parseTicker(ticker, market = undefined) {
    //
    // spot
    //
    //     {
    //         "symbol": "BTCUSDT",
    //         "bid1Price": "20517.96",
    //         "bid1Size": "2",
    //         "ask1Price": "20527.77",
    //         "ask1Size": "1.862172",
    //         "lastPrice": "20533.13",
    //         "prevPrice24h": "20393.48",
    //         "price24hPcnt": "0.0068",
    //         "highPrice24h": "21128.12",
    //         "lowPrice24h": "20318.89",
    //         "turnover24h": "243765620.65899866",
    //         "volume24h": "11801.27771",
    //         "usdIndexPrice": "20784.12009279"
    //     }
    //
    // linear/inverse
    //
    //     {
    //         "symbol": "BTCUSD",
    //         "lastPrice": "16597.00",
    //         "indexPrice": "16598.54",
    //         "markPrice": "16596.00",
    //         "prevPrice24h": "16464.50",
    //         "price24hPcnt": "0.008047",
    //         "highPrice24h": "30912.50",
    //         "lowPrice24h": "15700.00",
    //         "prevPrice1h": "16595.50",
    //         "openInterest": "373504107",
    //         "openInterestValue": "22505.67",
    //         "turnover24h": "2352.94950046",
    //         "volume24h": "49337318",
    //         "fundingRate": "-0.001034",
    //         "nextFundingTime": "1672387200000",
    //         "predictedDeliveryPrice": "",
    //         "basisRate": "",
    //         "deliveryFeeRate": "",
    //         "deliveryTime": "0",
    //         "ask1Size": "1",
    //         "bid1Price": "16596.00",
    //         "ask1Price": "16597.50",
    //         "bid1Size": "1"
    //     }
    //
    // option
    //
    //     {
    //         "symbol": "BTC-30DEC22-18000-C",
    //         "bid1Price": "0",
    //         "bid1Size": "0",
    //         "bid1Iv": "0",
    //         "ask1Price": "435",
    //         "ask1Size": "0.66",
    //         "ask1Iv": "5",
    //         "lastPrice": "435",
    //         "highPrice24h": "435",
    //         "lowPrice24h": "165",
    //         "markPrice": "0.00000009",
    //         "indexPrice": "16600.55",
    //         "markIv": "0.7567",
    //         "underlyingPrice": "16590.42",
    //         "openInterest": "6.3",
    //         "turnover24h": "2482.73",
    //         "volume24h": "0.15",
    //         "totalVolume": "99",
    //         "totalTurnover": "1967653",
    //         "delta": "0.00000001",
    //         "gamma": "0.00000001",
    //         "vega": "0.00000004",
    //         "theta": "-0.00000152",
    //         "predictedDeliveryPrice": "0",
    //         "change24h": "86"
    //     }
    //
    const timestamp = this.safeInteger(ticker, 'time');
    const marketId = this.safeString(ticker, 'symbol');
    const defaultType = this.safeString(this.options, 'defaultType', 'spot');
    market = this.safeMarket(marketId, market, undefined, defaultType);
    const symbol = this.safeSymbol(marketId, market, undefined, defaultType);
    const last = this.safeString(ticker, 'lastPrice');
    const mark = this.safeString(ticker, 'markPrice');
    const open = this.safeString(ticker, 'prevPrice24h');
    let percentage = this.safeString(ticker, 'price24hPcnt');
    percentage = _Precise.Precise.stringMul(percentage, '100');
    const quoteVolume = this.safeString(ticker, 'turnover24h');
    const baseVolume = this.safeString(ticker, 'volume24h');
    const bid = this.safeString(ticker, 'bid1Price');
    const ask = this.safeString(ticker, 'ask1Price');
    const high = this.safeString(ticker, 'highPrice24h');
    const low = this.safeString(ticker, 'lowPrice24h');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': high,
      'low': low,
      'bid': bid,
      'bidVolume': this.safeString2(ticker, 'bidSize', 'bid1Size'),
      'ask': ask,
      'askVolume': this.safeString2(ticker, 'askSize', 'ask1Size'),
      'vwap': undefined,
      'open': open,
      'close': last,
      'last': last,
      'mark': mark,
      'previousClose': undefined,
      'change': undefined,
      'percentage': percentage,
      'average': undefined,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    }, market);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name bybit#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://bybit-exchange.github.io/docs/v5/market/tickers
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    this.checkRequiredSymbol('fetchTicker', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'baseCoin': '', Base coin. For option only
      // 'expDate': '', Expiry date. e.g., 25DEC22. For option only
    };

    if (market['spot']) {
      request['category'] = 'spot';
    } else {
      if (market['option']) {
        request['category'] = 'option';
      } else if (market['linear']) {
        request['category'] = 'linear';
      } else if (market['inverse']) {
        request['category'] = 'inverse';
      }
    }
    const response = await this.publicGetV5MarketTickers(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "inverse",
    //             "list": [
    //                 {
    //                     "symbol": "BTCUSD",
    //                     "lastPrice": "16597.00",
    //                     "indexPrice": "16598.54",
    //                     "markPrice": "16596.00",
    //                     "prevPrice24h": "16464.50",
    //                     "price24hPcnt": "0.008047",
    //                     "highPrice24h": "30912.50",
    //                     "lowPrice24h": "15700.00",
    //                     "prevPrice1h": "16595.50",
    //                     "openInterest": "373504107",
    //                     "openInterestValue": "22505.67",
    //                     "turnover24h": "2352.94950046",
    //                     "volume24h": "49337318",
    //                     "fundingRate": "-0.001034",
    //                     "nextFundingTime": "1672387200000",
    //                     "predictedDeliveryPrice": "",
    //                     "basisRate": "",
    //                     "deliveryFeeRate": "",
    //                     "deliveryTime": "0",
    //                     "ask1Size": "1",
    //                     "bid1Price": "16596.00",
    //                     "ask1Price": "16597.50",
    //                     "bid1Size": "1"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672376496682
    //     }
    //
    const result = this.safeValue(response, 'result', []);
    const tickers = this.safeValue(result, 'list', []);
    const rawTicker = this.safeValue(tickers, 0);
    return this.parseTicker(rawTicker, market);
  }
  async fetchTickers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchTickers
     * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
     * @see https://bybit-exchange.github.io/docs/v5/market/tickers
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbols !== undefined) {
      symbols = this.marketSymbols(symbols);
      market = this.market(symbols[0]);
    }
    const request = {
      // 'symbol': market['id'],
      // 'baseCoin': '', Base coin. For option only
      // 'expDate': '', Expiry date. e.g., 25DEC22. For option only
    };
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchTickers', market, params);
    if (type === 'spot') {
      request['category'] = 'spot';
    } else if (type === 'swap') {
      let subType = undefined;
      [subType, params] = this.handleSubTypeAndParams('fetchTickers', market, params, 'linear');
      request['category'] = subType;
    } else if (type === 'option') {
      request['category'] = 'option';
    }
    const response = await this.publicGetV5MarketTickers(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "inverse",
    //             "list": [
    //                 {
    //                     "symbol": "BTCUSD",
    //                     "lastPrice": "16597.00",
    //                     "indexPrice": "16598.54",
    //                     "markPrice": "16596.00",
    //                     "prevPrice24h": "16464.50",
    //                     "price24hPcnt": "0.008047",
    //                     "highPrice24h": "30912.50",
    //                     "lowPrice24h": "15700.00",
    //                     "prevPrice1h": "16595.50",
    //                     "openInterest": "373504107",
    //                     "openInterestValue": "22505.67",
    //                     "turnover24h": "2352.94950046",
    //                     "volume24h": "49337318",
    //                     "fundingRate": "-0.001034",
    //                     "nextFundingTime": "1672387200000",
    //                     "predictedDeliveryPrice": "",
    //                     "basisRate": "",
    //                     "deliveryFeeRate": "",
    //                     "deliveryTime": "0",
    //                     "ask1Size": "1",
    //                     "bid1Price": "16596.00",
    //                     "ask1Price": "16597.50",
    //                     "bid1Size": "1"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672376496682
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const tickerList = this.safeValue(result, 'list', []);
    const tickers = {};
    for (let i = 0; i < tickerList.length; i++) {
      const ticker = this.parseTicker(tickerList[i], market);
      const symbol = ticker['symbol'];
      tickers[symbol] = ticker;
    }
    return this.filterByArray(tickers, 'symbol', symbols);
  }
  parseOHLCV(ohlcv, market = undefined) {
    //
    //     [
    //         "1621162800",
    //         "49592.43",
    //         "49644.91",
    //         "49342.37",
    //         "49349.42",
    //         "1451.59",
    //         "2.4343353100000003"
    //     ]
    //
    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)];
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://bybit-exchange.github.io/docs/v5/market/kline
     * @see https://bybit-exchange.github.io/docs/v5/market/mark-kline
     * @see https://bybit-exchange.github.io/docs/v5/market/index-kline
     * @see https://bybit-exchange.github.io/docs/v5/market/preimum-index-kline
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    this.checkRequiredSymbol('fetchOHLCV', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit === undefined) {
      limit = 200; // default is 200 when requested with `since`
    }

    if (since !== undefined) {
      request['start'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit; // max 1000, default 1000
    }

    request['interval'] = this.safeString(this.timeframes, timeframe, timeframe);
    let method = undefined;
    if (market['spot']) {
      request['category'] = 'spot';
      method = 'publicGetV5MarketKline';
    } else {
      const price = this.safeString(params, 'price');
      params = this.omit(params, 'price');
      const methods = {
        'mark': 'publicGetV5MarketMarkPriceKline',
        'index': 'publicGetV5MarketIndexPriceKline',
        'premiumIndex': 'publicGetV5MarketPremiumIndexPriceKline'
      };
      method = this.safeValue(methods, price, 'publicGetV5MarketKline');
      if (market['linear']) {
        request['category'] = 'linear';
      } else if (market['inverse']) {
        request['category'] = 'inverse';
      } else {
        throw new _errors.NotSupported(this.id + ' fetchOHLCV() is not supported for option markets');
      }
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "symbol": "BTCUSD",
    //             "category": "inverse",
    //             "list": [
    //                 [
    //                     "1670608800000",
    //                     "17071",
    //                     "17073",
    //                     "17027",
    //                     "17055.5",
    //                     "268611",
    //                     "15.74462667"
    //                 ],
    //                 [
    //                     "1670605200000",
    //                     "17071.5",
    //                     "17071.5",
    //                     "17061",
    //                     "17071",
    //                     "4177",
    //                     "0.24469757"
    //                 ],
    //                 [
    //                     "1670601600000",
    //                     "17086.5",
    //                     "17088",
    //                     "16978",
    //                     "17071.5",
    //                     "6356",
    //                     "0.37288112"
    //                 ]
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672025956592
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const ohlcvs = this.safeValue(result, 'list', []);
    return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
  }
  parseFundingRate(ticker, market = undefined) {
    //     {
    //         "symbol": "BTCUSDT",
    //         "bidPrice": "19255",
    //         "askPrice": "19255.5",
    //         "lastPrice": "19255.50",
    //         "lastTickDirection": "ZeroPlusTick",
    //         "prevPrice24h": "18634.50",
    //         "price24hPcnt": "0.033325",
    //         "highPrice24h": "19675.00",
    //         "lowPrice24h": "18610.00",
    //         "prevPrice1h": "19278.00",
    //         "markPrice": "19255.00",
    //         "indexPrice": "19260.68",
    //         "openInterest": "48069.549",
    //         "turnover24h": "4686694853.047006",
    //         "volume24h": "243730.252",
    //         "fundingRate": "0.0001",
    //         "nextFundingTime": "1663689600000",
    //         "predictedDeliveryPrice": "",
    //         "basisRate": "",
    //         "deliveryFeeRate": "",
    //         "deliveryTime": "0"
    //     }
    //
    const timestamp = this.safeInteger(ticker, 'timestamp'); // added artificially to avoid changing the signature
    ticker = this.omit(ticker, 'timestamp');
    const marketId = this.safeString(ticker, 'symbol');
    const symbol = this.safeSymbol(marketId, market, undefined, 'swap');
    const fundingRate = this.safeNumber(ticker, 'fundingRate');
    const fundingTimestamp = this.safeInteger(ticker, 'nextFundingTime');
    const markPrice = this.safeNumber(ticker, 'markPrice');
    const indexPrice = this.safeNumber(ticker, 'indexPrice');
    return {
      'info': ticker,
      'symbol': symbol,
      'markPrice': markPrice,
      'indexPrice': indexPrice,
      'interestRate': undefined,
      'estimatedSettlePrice': undefined,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'fundingRate': fundingRate,
      'fundingTimestamp': fundingTimestamp,
      'fundingDatetime': this.iso8601(fundingTimestamp),
      'nextFundingRate': undefined,
      'nextFundingTimestamp': undefined,
      'nextFundingDatetime': undefined,
      'previousFundingRate': undefined,
      'previousFundingTimestamp': undefined,
      'previousFundingDatetime': undefined
    };
  }
  async fetchFundingRates(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchFundingRates
     * @description fetches funding rates for multiple markets
     * @see https://bybit-exchange.github.io/docs/v5/market/tickers
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the funding rates for, all market funding rates are returned if not assigned
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} an array of [funding rate structures]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    const request = {};
    if (symbols !== undefined) {
      symbols = this.marketSymbols(symbols);
      market = this.market(symbols[0]);
      if (symbols.length === 1) {
        request['symbol'] = market['id'];
      }
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchFundingRates', market, params);
    if (type !== 'swap') {
      throw new _errors.NotSupported(this.id + ' fetchFundingRates() does not support ' + type + ' markets');
    } else {
      let subType = undefined;
      [subType, params] = this.handleSubTypeAndParams('fetchFundingRates', market, params, 'linear');
      request['category'] = subType;
    }
    const response = await this.publicGetV5MarketTickers(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "BTCUSDT",
    //                     "bidPrice": "19255",
    //                     "askPrice": "19255.5",
    //                     "lastPrice": "19255.50",
    //                     "lastTickDirection": "ZeroPlusTick",
    //                     "prevPrice24h": "18634.50",
    //                     "price24hPcnt": "0.033325",
    //                     "highPrice24h": "19675.00",
    //                     "lowPrice24h": "18610.00",
    //                     "prevPrice1h": "19278.00",
    //                     "markPrice": "19255.00",
    //                     "indexPrice": "19260.68",
    //                     "openInterest": "48069.549",
    //                     "turnover24h": "4686694853.047006",
    //                     "volume24h": "243730.252",
    //                     "fundingRate": "0.0001",
    //                     "nextFundingTime": "1663689600000",
    //                     "predictedDeliveryPrice": "",
    //                     "basisRate": "",
    //                     "deliveryFeeRate": "",
    //                     "deliveryTime": "0"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": null,
    //         "time": 1663670053454
    //     }
    //
    let tickerList = this.safeValue(response, 'result', []);
    const timestamp = this.safeInteger(response, 'time');
    tickerList = this.safeValue(tickerList, 'list');
    const fundingRates = {};
    for (let i = 0; i < tickerList.length; i++) {
      const rawTicker = tickerList[i];
      rawTicker['timestamp'] = timestamp; // will be removed inside the parser
      const ticker = this.parseFundingRate(tickerList[i], undefined);
      const symbol = ticker['symbol'];
      fundingRates[symbol] = ticker;
    }
    return this.filterByArray(fundingRates, 'symbol', symbols);
  }
  async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchFundingRateHistory
     * @description fetches historical funding rate prices
     * @see https://bybit-exchange.github.io/docs/v5/market/history-fund-rate
     * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
     * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
     * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @param {int|undefined} params.until timestamp in ms of the latest funding rate
     * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
     */
    this.checkRequiredSymbol('fetchFundingRateHistory', symbol);
    await this.loadMarkets();
    const request = {
      // 'category': '', // Product type. linear,inverse
      // 'symbol': '', // Symbol name
      // 'startTime': 0, // The start timestamp (ms)
      // 'endTime': 0, // The end timestamp (ms)
      // 'limit': 0, // Limit for data size per page. [1, 200]. Default: 200
    };
    const market = this.market(symbol);
    symbol = market['symbol'];
    request['symbol'] = market['id'];
    if (market['option']) {
      throw new _errors.NotSupported(this.id + ' fetchFundingRateHistory() is not supported for option markets');
    } else if (market['linear']) {
      request['category'] = 'linear';
    } else if (market['inverse']) {
      request['category'] = 'inverse';
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    const until = this.safeInteger2(params, 'until', 'till'); // unified in milliseconds
    const endTime = this.safeInteger(params, 'endTime', until); // exchange-specific in milliseconds
    params = this.omit(params, ['endTime', 'till', 'until']);
    if (endTime !== undefined) {
      request['endTime'] = endTime;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.publicGetV5MarketFundingHistory(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "ETHPERP",
    //                     "fundingRate": "0.0001",
    //                     "fundingRateTimestamp": "1672041600000"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672051897447
    //     }
    //
    const rates = [];
    const result = this.safeValue(response, 'result');
    const resultList = this.safeValue(result, 'list');
    for (let i = 0; i < resultList.length; i++) {
      const entry = resultList[i];
      const timestamp = this.safeInteger(entry, 'fundingRateTimestamp');
      rates.push({
        'info': entry,
        'symbol': this.safeSymbol(this.safeString(entry, 'symbol'), undefined, undefined, 'swap'),
        'fundingRate': this.safeNumber(entry, 'fundingRate'),
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp)
      });
    }
    const sorted = this.sortBy(rates, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  parseTrade(trade, market = undefined) {
    return this.parseContractTrade(trade, market);
  }
  parseContractTrade(trade, market = undefined) {
    //
    // public contract
    //
    //     {
    //         "execId": "666042b4-50c6-58f3-bd9c-89b2088663ff",
    //         "symbol": "ETHUSD",
    //         "price": "1162.95",
    //         "size": "1",
    //         "side": "Sell",
    //         "time": "1669191277315",
    //         "isBlockTrade": false
    //     }
    //
    // public unified margin
    //
    //     {
    //         "execId": "da66abbc-f358-5864-8d34-84ef7274d853",
    //         "symbol": "BTCUSDT",
    //         "price": "20802.50",
    //         "size": "0.200",
    //         "side": "Sell",
    //         "time": "1657870316630"
    //     }
    //
    // private contract trades
    //
    //     {
    //         "symbol": "ETHUSD",
    //         "execFee": "0.00005484",
    //         "execId": "acf78206-d464-589b-b888-51bd130821c1",
    //         "execPrice": "1367.80",
    //         "execQty": "100",
    //         "execType": "Trade",
    //         "execValue": "0.0731101",
    //         "feeRate": "0.00075",
    //         "lastLiquidityInd": "RemovedLiquidity",
    //         "leavesQty": "0",
    //         "orderId": "fdc584c3-be5d-41ff-8f54-5be7649b1d1c",
    //         "orderLinkId": "",
    //         "orderPrice": "1299.50",
    //         "orderQty": "100",
    //         "orderType": "Market",
    //         "stopOrderType": "UNKNOWN",
    //         "side": "Sell",
    //         "execTime": "1611528105547",
    //         "closedSize": "100"
    //     }
    //
    // private unified margin
    //
    //     {
    //         "symbol": "AAVEUSDT",
    //         "id": "1274785101965716992",
    //         "orderId": "1274784252359089664",
    //         "tradeId": "2270000000031365639",
    //         "orderPrice": "82.5",
    //         "orderQty": "0.016",
    //         "execFee": "0",
    //         "feeTokenId": "AAVE",
    //         "creatTime": "1666702226326",
    //         "isBuyer": "0",
    //         "isMaker": "0",
    //         "matchOrderId": "1274785101865076224",
    //         "makerRebate": "0",
    //         "executionTime": "1666702226335"
    //     }
    //
    // private USDC settled trades
    //
    //     {
    //         "symbol": "ETHPERP",
    //         "orderLinkId": "",
    //         "side": "Buy",
    //         "orderId": "aad0ee44-ce12-4112-aeee-b7829f6c3a26",
    //         "execFee": "0.0210",
    //         "feeRate": "0.000600",
    //         "blockTradeId": "",
    //         "tradeTime": "1669196417930",
    //         "execPrice": "1162.15",
    //         "lastLiquidityInd": "TAKER",
    //         "execValue": "34.8645",
    //         "execType": "Trade",
    //         "execQty": "0.030",
    //         "tradeId": "0e94eaf5-b08e-5505-b43f-7f1f30b1ca80"
    //     }
    //
    const id = this.safeStringN(trade, ['execId', 'id', 'tradeId']);
    const marketId = this.safeString(trade, 'symbol');
    let marketType = 'contract';
    if (market !== undefined) {
      marketType = market['type'];
    }
    market = this.safeMarket(marketId, market, undefined, marketType);
    const symbol = market['symbol'];
    const amountString = this.safeStringN(trade, ['execQty', 'orderQty', 'size']);
    const priceString = this.safeStringN(trade, ['execPrice', 'orderPrice', 'price']);
    const costString = this.safeString(trade, 'execValue');
    const timestamp = this.safeIntegerN(trade, ['time', 'execTime', 'tradeTime']);
    let side = this.safeStringLower(trade, 'side');
    if (side === undefined) {
      const isBuyer = this.safeInteger(trade, 'isBuyer');
      if (isBuyer !== undefined) {
        side = isBuyer ? 'buy' : 'sell';
      }
    }
    const isMaker = this.safeValue(trade, 'isMaker');
    let takerOrMaker = undefined;
    if (isMaker !== undefined) {
      takerOrMaker = isMaker ? 'maker' : 'taker';
    } else {
      let lastLiquidityInd = this.safeString(trade, 'lastLiquidityInd');
      if (lastLiquidityInd === 'UNKNOWN') {
        lastLiquidityInd = undefined;
      }
      if (lastLiquidityInd !== undefined) {
        if (lastLiquidityInd === 'TAKER' || lastLiquidityInd === 'MAKER') {
          takerOrMaker = lastLiquidityInd.toLowerCase();
        } else {
          takerOrMaker = lastLiquidityInd === 'AddedLiquidity' ? 'maker' : 'taker';
        }
      }
    }
    let orderType = this.safeStringLower(trade, 'orderType');
    if (orderType === 'unknown') {
      orderType = undefined;
    }
    const feeCostString = this.safeString(trade, 'execFee');
    let fee = undefined;
    if (feeCostString !== undefined) {
      const feeCurrencyCode = market['inverse'] ? market['base'] : market['settle'];
      fee = {
        'cost': feeCostString,
        'currency': feeCurrencyCode
      };
    }
    return this.safeTrade({
      'id': id,
      'info': trade,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'order': this.safeString(trade, 'orderId'),
      'type': orderType,
      'side': side,
      'takerOrMaker': takerOrMaker,
      'price': priceString,
      'amount': amountString,
      'cost': costString,
      'fee': fee
    }, market);
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @see https://bybit-exchange.github.io/docs/v5/market/recent-trade
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    this.checkRequiredSymbol('fetchTrades', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'baseCoin': '', // Base coin. For option only. If not passed, return BTC data by default
      // 'optionType': 'Call', // Option type. Call or Put. For option only
    };

    if (limit !== undefined) {
      // spot: [1,60], default: 60.
      // others: [1,1000], default: 500
      request['limit'] = limit;
    }
    if (market['type'] === 'spot') {
      request['category'] = 'spot';
    } else {
      if (market['option']) {
        request['category'] = 'option';
      } else if (market['linear']) {
        request['category'] = 'linear';
      } else if (market['inverse']) {
        request['category'] = 'inverse';
      }
    }
    const response = await this.publicGetV5MarketRecentTrade(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "spot",
    //             "list": [
    //                 {
    //                     "execId": "2100000000007764263",
    //                     "symbol": "BTCUSDT",
    //                     "price": "16618.49",
    //                     "size": "0.00012",
    //                     "side": "Buy",
    //                     "time": "1672052955758",
    //                     "isBlockTrade": false
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672053054358
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const trades = this.safeValue(result, 'list', []);
    return this.parseTrades(trades, market, since, limit);
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://bybit-exchange.github.io/docs/v5/market/orderbook
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    this.checkRequiredSymbol('fetchOrderBook', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    let defaultLimit = 25;
    if (market['spot']) {
      // limit: [1, 50]. Default: 1
      defaultLimit = 50;
      request['category'] = 'spot';
    } else {
      if (market['option']) {
        // limit: [1, 25]. Default: 1
        request['category'] = 'option';
      } else if (market['linear']) {
        // limit: [1, 200]. Default: 25
        request['category'] = 'linear';
      } else if (market['inverse']) {
        // limit: [1, 200]. Default: 25
        request['category'] = 'inverse';
      }
    }
    request['limit'] = limit !== undefined ? limit : defaultLimit;
    const response = await this.publicGetV5MarketOrderbook(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "s": "BTCUSDT",
    //             "a": [
    //                 [
    //                     "16638.64",
    //                     "0.008479"
    //                 ]
    //             ],
    //             "b": [
    //                 [
    //                     "16638.27",
    //                     "0.305749"
    //                 ]
    //             ],
    //             "ts": 1672765737733,
    //             "u": 5277055
    //         },
    //         "retExtInfo": {},
    //         "time": 1672765737734
    //     }
    //
    const result = this.safeValue(response, 'result', []);
    const timestamp = this.safeInteger(result, 'ts');
    return this.parseOrderBook(result, symbol, timestamp, 'b', 'a');
  }
  parseBalance(response) {
    //
    // margin wallet
    //     [
    //         {
    //             "free": "0.001143855",
    //             "interest": "0",
    //             "loan": "0",
    //             "locked": "0",
    //             "tokenId": "BTC",
    //             "total": "0.001143855"
    //         },
    //         {
    //             "free": "200.00005568",
    //             "interest": "0.0008391",
    //             "loan": "200",
    //             "locked": "0",
    //             "tokenId": "USDT",
    //             "total": "200.00005568"
    //         },
    //     ]
    //
    // usdc wallet
    //    {
    //      "result": {
    //           "walletBalance": "10.0000",
    //           "accountMM": "0.0000",
    //           "bonus": "0.0000",
    //           "accountIM": "0.0000",
    //           "totalSessionRPL": "0.0000",
    //           "equity": "10.0000",
    //           "totalRPL": "0.0000",
    //           "marginBalance": "10.0000",
    //           "availableBalance": "10.0000",
    //           "totalSessionUPL": "0.0000"
    //       },
    //       "retCode": "0",
    //       "retMsg": "Success."
    //    }
    //
    // Unified Margin
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "Success",
    //         "result": {
    //             "totalEquity": "112.21267421",
    //             "accountIMRate": "0.6895",
    //             "totalMarginBalance": "80.37711012",
    //             "totalInitialMargin": "55.42180254",
    //             "totalAvailableBalance": "24.95530758",
    //             "accountMMRate": "0.0459",
    //             "totalPerpUPL": "-16.69586570",
    //             "totalWalletBalance": "97.07311619",
    //             "totalMaintenanceMargin": "3.68580537",
    //             "coin": [
    //                 {
    //                     "currencyCoin": "ETH",
    //                     "availableToBorrow": "0.00000000",
    //                     "borrowSize": "0.00000000",
    //                     "bonus": "0.00000000",
    //                     "accruedInterest": "0.00000000",
    //                     "availableBalanceWithoutConvert": "0.00000000",
    //                     "totalOrderIM": "",
    //                     "equity": "0.00000000",
    //                     "totalPositionMM": "",
    //                     "usdValue": "0.00000000",
    //                     "availableBalance": "0.02441165",
    //                     "unrealisedPnl": "",
    //                     "totalPositionIM": "",
    //                     "marginBalanceWithoutConvert": "0.00000000",
    //                     "walletBalance": "0.00000000",
    //                     "cumRealisedPnl": "",
    //                     "marginBalance": "0.07862610"
    //                 }
    //             ]
    //         },
    //         "time": 1657716037033
    //     }
    //
    // contract v3
    //
    //     [
    //         {
    //             "coin": "BTC",
    //             "equity": "0.00000002",
    //             "walletBalance": "0.00000002",
    //             "positionMargin": "0",
    //             "availableBalance": "0.00000002",
    //             "orderMargin": "0",
    //             "occClosingFee": "0",
    //             "occFundingFee": "0",
    //             "unrealisedPnl": "0",
    //             "cumRealisedPnl": "-0.00010941",
    //             "givenCash": "0",
    //             "serviceCash": "0"
    //         },
    //         {
    //             "coin": "USDT",
    //             "equity": "3662.81038535",
    //             "walletBalance": "3662.81038535",
    //             "positionMargin": "0",
    //             "availableBalance": "3662.81038535",
    //             "orderMargin": "0",
    //             "occClosingFee": "0",
    //             "occFundingFee": "0",
    //             "unrealisedPnl": "0",
    //             "cumRealisedPnl": "-36.01761465",
    //             "givenCash": "0",
    //             "serviceCash": "0"
    //         }
    //     ]
    // spot
    //     {
    //       retCode: '0',
    //       retMsg: 'OK',
    //       result: {
    //         balances: [
    //           {
    //             coin: 'BTC',
    //             coinId: 'BTC',
    //             total: '0.00977041118',
    //             free: '0.00877041118',
    //             locked: '0.001'
    //           },
    //           {
    //             coin: 'EOS',
    //             coinId: 'EOS',
    //             total: '2000',
    //             free: '2000',
    //             locked: '0'
    //           }
    //         ]
    //       },
    //       retExtInfo: {},
    //       time: '1670002625754'
    //  }
    //
    // Unified trade account
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [
    //                 {
    //                     "totalEquity": "18070.32797922",
    //                     "accountIMRate": "0.0101",
    //                     "totalMarginBalance": "18070.32797922",
    //                     "totalInitialMargin": "182.60183684",
    //                     "accountType": "UNIFIED",
    //                     "totalAvailableBalance": "17887.72614237",
    //                     "accountMMRate": "0",
    //                     "totalPerpUPL": "-0.11001349",
    //                     "totalWalletBalance": "18070.43799271",
    //                     "totalMaintenanceMargin": "0.38106773",
    //                     "coin": [
    //                         {
    //                             "availableToBorrow": "2.5",
    //                             "accruedInterest": "0",
    //                             "availableToWithdraw": "0.805994",
    //                             "totalOrderIM": "0",
    //                             "equity": "0.805994",
    //                             "totalPositionMM": "0",
    //                             "usdValue": "12920.95352538",
    //                             "unrealisedPnl": "0",
    //                             "borrowAmount": "0",
    //                             "totalPositionIM": "0",
    //                             "walletBalance": "0.805994",
    //                             "cumRealisedPnl": "0",
    //                             "coin": "BTC"
    //                         }
    //                     ]
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672125441042
    //     }
    //
    // funding v5
    //    {
    //        retCode: '0',
    //        retMsg: 'success',
    //        result: {
    //          memberId: '452265',
    //          accountType: 'FUND',
    //          balance: [
    //            {
    //              coin: 'BTC',
    //              transferBalance: '0.2',
    //              walletBalance: '0.2',
    //              bonus: ''
    //            }
    //          ]
    //        },
    //        retExtInfo: {},
    //        time: '1677781902858'
    //    }
    //
    // all coins balance
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "memberId": "533285",
    //             "accountType": "FUND",
    //             "balance": [
    //                 {
    //                     "coin": "USDT",
    //                     "transferBalance": "1010",
    //                     "walletBalance": "1010",
    //                     "bonus": ""
    //                 },
    //                 {
    //                     "coin": "USDC",
    //                     "transferBalance": "0",
    //                     "walletBalance": "0",
    //                     "bonus": ""
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1675865290069
    //     }
    //
    const responseResult = this.safeValue(response, 'result', response);
    const result = {
      'info': responseResult
    };
    const currencyList = this.safeValueN(responseResult, ['loanAccountList', 'list', 'coin', 'balances', 'balance']);
    if (currencyList === undefined) {
      // usdc wallet
      const code = 'USDC';
      const account = this.account();
      account['free'] = this.safeString(responseResult, 'availableBalance');
      account['total'] = this.safeString(responseResult, 'walletBalance');
      result[code] = account;
    } else {
      result['info'] = currencyList;
      for (let i = 0; i < currencyList.length; i++) {
        const entry = currencyList[i];
        const accountType = this.safeString(entry, 'accountType');
        if (accountType === 'UNIFIED' || accountType === 'CONTRACT') {
          const coins = this.safeValue(entry, 'coin');
          for (let j = 0; j < coins.length; j++) {
            const account = this.account();
            const coinEntry = coins[j];
            const loan = this.safeString(coinEntry, 'borrowAmount');
            const interest = this.safeString(coinEntry, 'accruedInterest');
            if (loan !== undefined && interest !== undefined) {
              account['debt'] = _Precise.Precise.stringAdd(loan, interest);
            }
            account['total'] = this.safeString(coinEntry, 'walletBalance');
            account['free'] = this.safeString(coinEntry, 'availableToWithdraw');
            // account['used'] = this.safeString (coinEntry, 'locked');
            const currencyId = this.safeString(coinEntry, 'coin');
            const code = this.safeCurrencyCode(currencyId);
            result[code] = account;
          }
        } else {
          const account = this.account();
          const loan = this.safeString(entry, 'loan');
          const interest = this.safeString(entry, 'interest');
          if (loan !== undefined && interest !== undefined) {
            account['debt'] = _Precise.Precise.stringAdd(loan, interest);
          }
          account['total'] = this.safeString2(entry, 'total', 'walletBalance');
          account['free'] = this.safeStringN(entry, ['free', 'availableBalanceWithoutConvert', 'availableBalance', 'transferBalance']);
          account['used'] = this.safeString(entry, 'locked');
          const currencyId = this.safeStringN(entry, ['tokenId', 'coin', 'currencyCoin']);
          const code = this.safeCurrencyCode(currencyId);
          result[code] = account;
        }
      }
    }
    return this.safeBalance(result);
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name bybit#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const request = {};
    let method = undefined;
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
    const category = this.safeString(this.options, 'defaultSubType', 'spot');
    if (enableUnifiedAccount || enableUnifiedMargin) {
      if (type === 'swap') {
        type = 'unified';
      }
    } else {
      if (type === 'swap') {
        type = 'contract';
      }
    }
    const accountTypes = this.safeValue(this.options, 'accountsByType', {});
    const unifiedType = this.safeStringUpper(accountTypes, type, type);
    if (unifiedType === 'FUND') {
      // use this endpoint only we have no other choice
      // because it requires transfer permission
      method = 'privateGetAssetV3PrivateTransferAccountCoinsBalanceQuery';
    } else {
      if (enableUnifiedAccount && category !== 'inverse') {
        method = 'privateGetV5AccountWalletBalance';
      } else {
        method = 'privateGetContractV3PrivateAccountWalletBalance';
      }
    }
    request['accountType'] = unifiedType;
    const response = await this[method](this.extend(request, params));
    //
    // spot wallet
    //     {
    //       retCode: '0',
    //       retMsg: 'OK',
    //       result: {
    //         balances: [
    //           {
    //             coin: 'BTC',
    //             coinId: 'BTC',
    //             total: '0.00977041118',
    //             free: '0.00877041118',
    //             locked: '0.001'
    //           },
    //           {
    //             coin: 'EOS',
    //             coinId: 'EOS',
    //             total: '2000',
    //             free: '2000',
    //             locked: '0'
    //           }
    //         ]
    //       },
    //       retExtInfo: {},
    //       time: '1670002625754'
    //     }
    // cross
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "acctBalanceSum": "0.122995614474732872",
    //             "debtBalanceSum": "0.011734191124529754",
    //             "loanAccountList": [
    //                 {
    //                     "free": "0.001143855",
    //                     "interest": "0",
    //                     "loan": "0",
    //                     "locked": "0",
    //                     "tokenId": "BTC",
    //                     "total": "0.001143855"
    //                 },
    //                 {
    //                     "free": "200.00005568",
    //                     "interest": "0.0008391",
    //                     "loan": "200",
    //                     "locked": "0",
    //                     "tokenId": "USDT",
    //                     "total": "200.00005568"
    //                 },
    //             ],
    //             "riskRate": "0.0954",
    //             "status": 1
    //         },
    //         "retExtInfo": {},
    //         "time": 1669843584123
    //     }
    //
    // all coins balance
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "memberId": "533285",
    //             "accountType": "FUND",
    //             "balance": [
    //                 {
    //                     "coin": "USDT",
    //                     "transferBalance": "1010",
    //                     "walletBalance": "1010",
    //                     "bonus": ""
    //                 },
    //                 {
    //                     "coin": "USDC",
    //                     "transferBalance": "0",
    //                     "walletBalance": "0",
    //                     "bonus": ""
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1675865290069
    //     }
    //
    return this.parseBalance(response);
  }
  parseOrderStatus(status) {
    const statuses = {
      // v3 spot
      'NEW': 'open',
      'PARTIALLY_FILLED': 'open',
      'FILLED': 'closed',
      'CANCELED': 'canceled',
      'PENDING_CANCEL': 'open',
      'PENDING_NEW': 'open',
      'REJECTED': 'rejected',
      'PARTIALLY_FILLED_CANCELLED': 'canceled',
      // v3 contract / unified margin / unified account
      'Created': 'open',
      'New': 'open',
      'Rejected': 'rejected',
      'PartiallyFilled': 'open',
      'PartiallyFilledCancelled': 'canceled',
      'Filled': 'closed',
      'PendingCancel': 'open',
      'Cancelled': 'canceled',
      // below this line the status only pertains to conditional orders
      'Untriggered': 'open',
      'Deactivated': 'canceled',
      'Triggered': 'open',
      'Active': 'open'
    };
    return this.safeString(statuses, status, status);
  }
  parseTimeInForce(timeInForce) {
    const timeInForces = {
      'GoodTillCancel': 'GTC',
      'ImmediateOrCancel': 'IOC',
      'FillOrKill': 'FOK',
      'PostOnly': 'PO'
    };
    return this.safeString(timeInForces, timeInForce, timeInForce);
  }
  parseOrder(order, market = undefined) {
    return this.parseContractOrder(order, market);
  }
  parseContractOrder(order, market = undefined) {
    //
    // contract v3
    //
    //     {
    //         "symbol": "XRPUSDT",
    //         "side": "Buy",
    //         "orderType": "Market",
    //         "price": "0.3431",
    //         "qty": "65",
    //         "reduceOnly": true,
    //         "timeInForce": "ImmediateOrCancel",
    //         "orderStatus": "Filled",
    //         "leavesQty": "0",
    //         "leavesValue": "0",
    //         "cumExecQty": "65",
    //         "cumExecValue": "21.3265",
    //         "cumExecFee": "0.0127959",
    //         "lastPriceOnCreated": "0.0000",
    //         "rejectReason": "EC_NoError",
    //         "orderLinkId": "",
    //         "createdTime": "1657526321499",
    //         "updatedTime": "1657526321504",
    //         "orderId": "ac0a8134-acb3-4ee1-a2d4-41891c9c46d7",
    //         "stopOrderType": "UNKNOWN",
    //         "takeProfit": "0.0000",
    //         "stopLoss": "0.0000",
    //         "tpTriggerBy": "UNKNOWN",
    //         "slTriggerBy": "UNKNOWN",
    //         "triggerPrice": "0.0000",
    //         "closeOnTrigger": true,
    //         "triggerDirection": 0,
    //         "positionIdx": 2
    //     }
    //
    const marketId = this.safeString(order, 'symbol');
    let marketType = 'contract';
    if (market !== undefined) {
      marketType = market['type'];
    }
    market = this.safeMarket(marketId, market, undefined, marketType);
    const symbol = market['symbol'];
    const timestamp = this.safeInteger(order, 'createdTime');
    const id = this.safeString(order, 'orderId');
    let type = this.safeStringLower(order, 'orderType');
    const stopOrderType = this.safeStringLower(order, 'stopOrderType');
    const price = this.safeString(order, 'price');
    let amount = this.safeString(order, 'qty');
    const tpslMode = this.safeString(order, 'tpslMode');
    if (tpslMode === 'Full') {
      amount = '0';
    }
    const cost = this.safeString(order, 'cumExecValue');
    const filled = this.safeString(order, 'cumExecQty');
    const remaining = this.safeString(order, 'leavesQty');
    const lastTradeTimestamp = this.safeInteger(order, 'updateTime');
    const rawStatus = this.safeString(order, 'orderStatus');
    const status = this.parseOrderStatus(rawStatus);
    const side = this.safeStringLower(order, 'side');
    let fee = undefined;
    const isContract = this.safeValue(market, 'contract');
    if (isContract) {
      const feeCostString = this.safeString(order, 'cumExecFee');
      if (feeCostString !== undefined) {
        fee = {
          'cost': feeCostString,
          'currency': market['settle']
        };
      }
    }
    let clientOrderId = this.safeString(order, 'orderLinkId');
    if (clientOrderId !== undefined && clientOrderId.length < 1) {
      clientOrderId = undefined;
    }
    const rawTimeInForce = this.safeString(order, 'timeInForce');
    const timeInForce = this.parseTimeInForce(rawTimeInForce);
    const stopPrice = this.omitZero(this.safeString(order, 'triggerPrice'));
    if (stopOrderType !== undefined && stopOrderType !== 'unknown') {
      if (type === 'market') {
        type = 'stop';
      } else {
        type = 'stopLimit';
      }
    }
    let trigger = this.safeString(order, 'triggerBy');
    const slTriggerBy = this.safeString(order, 'slTriggerBy');
    if (trigger === undefined && slTriggerBy !== '') {
      trigger = slTriggerBy;
    }
    const tpTriggerBy = this.safeString(order, 'tpTriggerBy');
    if (trigger === undefined && tpTriggerBy !== '') {
      trigger = slTriggerBy;
    }
    if (trigger === 'LastPrice') {
      trigger = 'Last';
    } else if (trigger === 'IndexPrice') {
      trigger = 'Index';
    } else if (trigger === 'MarkPrice') {
      trigger = 'Mark';
    }
    let takeProfit = undefined;
    if (this.safeFloat(order, 'takeProfit', 0) !== 0) {
      takeProfit = this.safeString(order, 'takeProfit');
    }
    let stopLoss = undefined;
    if (this.safeFloat(order, 'stopLoss', 0) !== 0) {
      stopLoss = this.safeString(order, 'stopLoss');
    }
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': undefined,
      'reduceOnly': this.safeValue(order, 'reduceOnly'),
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': stopPrice,
      'amount': amount,
      'cost': cost,
      'average': undefined,
      'filled': filled,
      'remaining': remaining,
      'status': status,
      'fee': fee,
      'trades': undefined,
      'takeProfit': takeProfit,
      'stopLoss': stopLoss,
      // TEALSTREET
      'reduce': this.safeValue(order, 'reduceOnly'),
      'trigger': trigger,
      'close': this.safeValue(order, 'closeOnTrigger')
      // TEALSTREET
    }, market);
  }
  parseStopTrigger(trigger) {
    trigger = trigger && trigger.toLowerCase();
    const triggers = {
      'MarkPrice': 'mark',
      'LastPrice': 'last',
      'IndexPrice': 'index'
    };
    return this.safeString(triggers, trigger, trigger);
  }
  formatStopTrigger(trigger) {
    trigger = trigger && trigger.toLowerCase();
    const triggers = {
      'mark': 'MarkPrice',
      'last': 'LastPrice',
      'index': 'IndexPrice'
    };
    return this.safeString(triggers, trigger, trigger);
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string|undefined} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchOrder', market, params);
    const accounts = await this.isUnifiedEnabled();
    const isUnifiedAccount = this.safeValue(accounts, 1, false);
    if (isUnifiedAccount) {
      throw new _errors.NotSupported(this.id + ' fetchOrder() does not support unified account. Please consider using fetchOpenOrders() or fetchClosedOrders()');
    }
    if (type === 'spot') {
      // only spot markets have a dedicated endpoint for fetching a order
      const request = {
        'orderId': id
      };
      const response = await this.privateGetSpotV3PrivateOrder(this.extend(params, request));
      //
      //    {
      //        "retCode": "0",
      //        "retMsg": "OK",
      //        "result": {
      //            "accountId": "13380434",
      //            "symbol": "AAVEUSDT",
      //            "orderLinkId": "1666733357434617",
      //            "orderId": "1275046248585414144",
      //            "orderPrice": "80",
      //            "orderQty": "0.11",
      //            "execQty": "0",
      //            "cummulativeQuoteQty": "0",
      //            "avgPrice": "0",
      //            "status": "NEW",
      //            "timeInForce": "GTC",
      //            "orderType": "LIMIT",
      //            "side": "BUY",
      //            "stopPrice": "0.0",
      //            "icebergQty": "0.0",
      //            "createTime": "1666733357438",
      //            "updateTime": "1666733357444",
      //            "isWorking": "1",
      //            "locked": "8.8",
      //            "orderCategory": "0"
      //        },
      //        "retExtMap": {},
      //        "retExtInfo": null,
      //        "time": "1666733357744"
      //    }
      //
      const result = this.safeValue(response, 'result', {});
      return this.parseOrder(result, market);
    } else {
      this.checkRequiredSymbol('fetchOrder', symbol);
      const request = {
        'orderId': id
      };
      const result = await this.fetchOrders(symbol, undefined, undefined, this.extend(request, params));
      const length = result.length;
      if (length === 0) {
        throw new _errors.OrderNotFound('Order ' + id + ' does not exist.');
      }
      if (length > 1) {
        throw new _errors.InvalidOrder(this.id + ' returned more than one order');
      }
      return this.safeValue(result, 0);
    }
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name bybit#createOrder
     * @description create a trade order
     * @see https://bybit-exchange.github.io/docs/v5/order/create-order
     * @see https://bybit-exchange.github.io/docs/spot/trade/place-order
     * @see https://bybit-exchange.github.io/docs/derivatives/unified/place-order
     * @see https://bybit-exchange.github.io/docs/derivatives/contract/place-order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    this.checkRequiredSymbol('createOrder', symbol);
    const market = this.market(symbol);
    symbol = market['symbol'];
    // eslint-disable-next-line no-unused-vars
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    const isUSDCSettled = market['settle'] === 'USDC';
    if (enableUnifiedAccount && !market['inverse']) {
      return await this.createUnifiedAccountOrder(symbol, type, side, amount, price, params);
    } else if (isUSDCSettled) {
      return await this.createUsdcOrder(symbol, type, side, amount, price, params);
    } else {
      return await this.createContractV3Order(symbol, type, side, amount, price, params);
    }
  }
  async createPositionTradeStop(symbol, type, side, amount, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const reduceOnly = this.safeValue(params, 'reduceOnly', false);
    const request = {
      'symbol': market['id']
    };
    if (market['linear'] || market['spot']) {
      request['category'] = 'linear';
    } else if (market['option']) {
      request['category'] = 'option';
    } else if (market['inverse']) {
      request['category'] = 'inverse';
    }
    // TEALSTREET  //
    const positionMode = this.safeValue(params, 'positionMode', 'oneway');
    request['positionIdx'] = 0;
    if (positionMode !== 'oneway') {
      if (reduceOnly) {
        request['positionIdx'] = side === 'sell' ? 2 : 1;
      } else {
        request['positionIdx'] = side === 'sell' ? 1 : 2;
      }
    }
    const trailingStop = this.safeString(params, 'trailingStop');
    if (trailingStop === undefined) {
      request['tpslMode'] = 'Partial';
      if (amount === 0) {
        request['tpslMode'] = 'Full';
        request['tpOrderType'] = 'Market';
        request['slOrderType'] = 'Market';
      }
    }
    const stopPrice = this.safeString(params, 'stopPrice');
    const basePrice = this.safeString(params, 'basePrice');
    if (!basePrice) {
      throw new _errors.InvalidOrder(this.id + ' createOrder() requires both the triggerPrice and basePrice params for ' + type + ' orders');
    }
    let triggerBy = 'LastPrice';
    if (params['trigger'] === 'Index') {
      triggerBy = 'IndexPrice';
    } else if (params['trigger'] === 'Mark') {
      triggerBy = 'MarkPrice';
    }
    if (_Precise.Precise.stringGt(stopPrice, basePrice)) {
      if (side === 'buy') {
        if (trailingStop !== undefined) {
          // request['tpslMode'] = 'Full';
          request['trailingStop'] = this.priceToPrecision(symbol, trailingStop);
        } else {
          request['stopLoss'] = this.priceToPrecision(symbol, stopPrice);
          if (amount !== 0) {
            request['slSize'] = this.amountToPrecision(symbol, amount);
          }
          // request['slTriggerBy'] = 'MarkPrice';
          request['slTriggerBy'] = triggerBy;
        }
      } else {
        request['takeProfit'] = this.priceToPrecision(symbol, stopPrice);
        if (amount !== 0) {
          request['tpSize'] = this.amountToPrecision(symbol, amount);
        }
        // request['tpTriggerBy'] = 'LastPrice';
        request['tpTriggerBy'] = triggerBy;
      }
    } else {
      if (side === 'buy') {
        request['takeProfit'] = this.priceToPrecision(symbol, stopPrice);
        if (amount !== 0) {
          request['tpSize'] = this.amountToPrecision(symbol, amount);
        }
        // request['tpTriggerBy'] = 'LastPrice';
        request['tpTriggerBy'] = triggerBy;
      } else {
        if (trailingStop !== undefined) {
          // request['tpslMode'] = 'Full';
          request['trailingStop'] = this.priceToPrecision(symbol, trailingStop);
        } else {
          request['stopLoss'] = this.priceToPrecision(symbol, stopPrice);
          if (amount !== 0) {
            request['slSize'] = this.amountToPrecision(symbol, amount);
          }
          // request['slTriggerBy'] = 'MarkPrice';
          request['slTriggerBy'] = triggerBy;
        }
      }
    }
    params = this.omit(params, ['stopPrice', 'timeInForce', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId', 'positionMode', 'close', 'trigger', 'basePrice', 'trailingStop']);
    // eslint-disable-next-line no-unused-vars
    const response = await this.privatePostV5PositionTradingStop(this.extend(request, params));
    const stopOrders = await this.fetchOpenOrders(symbol, undefined, undefined, {
      'stop': true
    });
    const filteredStopOrders = this.filterBySinceLimit(stopOrders, this.seconds() - 10);
    return this.safeValue(filteredStopOrders, 0);
  }
  async createUnifiedAccountOrder(symbol, type, side, amount, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    let lowerCaseType = type.toLowerCase();
    let isStop = false;
    const bindStops = this.safeValue(params, 'bindStops', true);
    if (lowerCaseType === 'stop') {
      isStop = true;
      lowerCaseType = 'market';
      if (bindStops) {
        return this.createPositionTradeStop(symbol, type, side, amount, price, params);
      }
    } else if (lowerCaseType === 'stopLimit') {
      isStop = true;
      lowerCaseType = 'limit';
    }
    if (price === undefined && lowerCaseType === 'limit') {
      throw new _errors.ArgumentsRequired(this.id + ' createOrder requires a price argument for limit orders');
    }
    const closeOnTrigger = this.safeValue(params, 'close', false);
    const reduceOnly = this.safeValue(params, 'reduceOnly', false);
    const request = {
      'symbol': market['id'],
      'side': this.capitalize(side),
      'orderType': this.capitalize(lowerCaseType),
      'reduceOnly': reduceOnly,
      'closeOnTrigger': closeOnTrigger,
      'orderLinkId': this['refCode'] + this.uuid22()
    };
    if (amount) {
      request['qty'] = this.amountToPrecision(symbol, amount);
    } else {
      request['qty'] = '0';
    }
    if (isStop) {
      const close = this.safeValue(params, 'close', false);
      if (close) {
        request['closeOnTrigger'] = true;
      }
      const triggerType = this.safeString2(params, 'trigger', 'triggerType', 'Last');
      request['triggerBy'] = this.formatStopTrigger(triggerType);
    }
    if (market['linear']) {
      request['category'] = 'linear';
    } else if (market['option']) {
      request['category'] = 'option';
    } else {
      throw new _errors.NotSupported(this.id + ' createOrder does not allow inverse market orders for ' + symbol + ' markets');
    }
    const isMarket = lowerCaseType === 'market';
    const isLimit = lowerCaseType === 'limit';
    if (isLimit) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    const exchangeSpecificParam = this.safeString(params, 'time_in_force');
    const timeInForce = this.safeStringLower(params, 'timeInForce');
    const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
    if (postOnly) {
      request['timeInForce'] = 'PostOnly';
    } else if (timeInForce === 'gtc') {
      request['timeInForce'] = 'GTC';
    } else if (timeInForce === 'fok') {
      request['timeInForce'] = 'FOK';
    } else if (timeInForce === 'ioc') {
      request['timeInForce'] = 'IOC';
    }
    // TEALSTREET  //
    const positionMode = this.safeValue(params, 'positionMode', 'oneway');
    request['positionIdx'] = 0;
    if (positionMode !== 'oneway') {
      if (isStop) {
        if (side === 'buy' && !closeOnTrigger || side === 'sell' && closeOnTrigger) {
          request['positionIdx'] = 1;
        } else if (side === 'sell' && !closeOnTrigger || side === 'buy' && closeOnTrigger) {
          request['positionIdx'] = 2;
        }
      } else {
        if (side === 'buy' && !reduceOnly || side === 'sell' && reduceOnly) {
          request['positionIdx'] = 1;
        } else if (side === 'sell' && !reduceOnly || side === 'buy' && reduceOnly) {
          request['positionIdx'] = 2;
        }
      }
    }
    request['tpslMode'] = 'Partial';
    if (amount === 0) {
      request['tpslMode'] = 'Full';
      request['tpOrderType'] = 'Market';
      request['slOrderType'] = 'Market';
    }
    const triggerPrice = this.safeNumber2(params, 'stopPrice', 'triggerPrice');
    const basePrice = this.safeNumber(params, 'basePrice');
    if (isStop) {
      if (!basePrice) {
        throw new _errors.InvalidOrder(this.id + ' createOrder() requires both the triggerPrice and basePrice params for ' + type + ' orders');
      }
      if (triggerPrice === undefined) {
        throw new _errors.InvalidOrder(this.id + ' createOrder() requires a triggerPrice param for ' + type + ' orders');
      }
      let triggerBy = 'LastPrice';
      if (params['trigger'] === 'Index') {
        triggerBy = 'IndexPrice';
      } else if (params['trigger'] === 'Mark') {
        triggerBy = 'MarkPrice';
      }
      request['triggerBy'] = triggerBy;
      request['slTriggerBy'] = triggerBy;
      request['tpTriggerBy'] = triggerBy;
      // request['triggerBy'] = 'MarkPrice';
      // request['slTriggerBy'] = 'MarkPrice';
      // request['tpTriggerBy'] = 'LastPrice';
      request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
      if (triggerPrice > basePrice) {
        request['triggerDirection'] = 1;
      } else {
        request['triggerDirection'] = 2;
      }
    }
    const takeProfit = this.safeString(params, 'takeProfit');
    if (takeProfit !== undefined) {
      request['takeProfit'] = this.priceToPrecision(symbol, takeProfit);
    }
    const stopLoss = this.safeString(params, 'stopLoss');
    if (stopLoss !== undefined) {
      request['stopLoss'] = this.priceToPrecision(symbol, stopLoss);
    }
    params = this.omit(params, ['stopPrice', 'timeInForce', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId', 'positionMode', 'close']);
    const response = await this.privatePostV5OrderCreate(this.extend(request, params));
    const order = this.safeValue(response, 'result', {});
    return this.parseOrder(order);
  }
  async createContractV3Order(symbol, type, side, amount, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    let lowerCaseType = type.toLowerCase();
    let isStop = false;
    const bindStops = this.safeValue(params, 'bindStops', true);
    if (lowerCaseType === 'stop') {
      isStop = true;
      lowerCaseType = 'market';
      if (bindStops) {
        return this.createPositionTradeStop(symbol, type, side, amount, price, params);
      }
    } else if (lowerCaseType === 'stopLimit') {
      isStop = true;
      lowerCaseType = 'limit';
    }
    if (price === undefined && lowerCaseType === 'limit') {
      throw new _errors.ArgumentsRequired(this.id + ' createContractV3Order requires a price argument for limit orders');
    }
    const closeOnTrigger = this.safeValue(params, 'close', false);
    const reduceOnly = this.safeValue(params, 'reduceOnly', false);
    const request = {
      'symbol': market['id'],
      'side': this.capitalize(side),
      'orderType': this.capitalize(lowerCaseType),
      'timeInForce': 'GoodTillCancel',
      'qty': this.amountToPrecision(symbol, amount),
      // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
      // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
      'reduceOnly': reduceOnly,
      // when creating a closing order, bybit recommends a True value for
      //  closeOnTrigger to avoid failing due to insufficient available margin
      'closeOnTrigger': closeOnTrigger,
      // 'orderLinkId': 'string', // unique client order id, max 36 characters
      // 'triggerPrice': 123.45, // trigger price, required for conditional orders
      // 'triggerBy': 'MarkPrice', // IndexPrice, MarkPrice
      // 'tptriggerby': 'MarkPrice', // IndexPrice, MarkPrice
      // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice
      // 'positionIdx': 0, // Position mode. unified margin account is only available in One-Way mode, which is 0
      // 'triggerDirection': 1, // Trigger direction. Mainly used in conditional order. Trigger the order when market price rises to triggerPrice or falls to triggerPrice. 1: rise; 2: fall
      'orderLinkId': this['refCode'] + this.uuid22()
    };
    if (market['future']) {
      const positionIdx = this.safeInteger(params, 'position_idx', 0); // 0 One-Way Mode, 1 Buy-side, 2 Sell-side
      request['position_idx'] = positionIdx;
      params = this.omit(params, 'position_idx');
    }
    const isMarket = lowerCaseType === 'market';
    const isLimit = lowerCaseType === 'limit';
    if (isLimit) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    const exchangeSpecificParam = this.safeString(params, 'time_in_force');
    const timeInForce = this.safeStringLower(params, 'timeInForce');
    const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
    if (postOnly) {
      request['timeInForce'] = 'PostOnly';
    } else if (timeInForce === 'gtc') {
      request['timeInForce'] = 'GoodTillCancel';
    } else if (timeInForce === 'fok') {
      request['timeInForce'] = 'FillOrKill';
    } else if (timeInForce === 'ioc') {
      request['timeInForce'] = 'ImmediateOrCancel';
    }
    const positionMode = this.safeValue(params, 'positionMode', 'oneway');
    request['positionIdx'] = 0;
    if (positionMode !== 'oneway') {
      if (isStop) {
        if (side === 'buy' && !closeOnTrigger || side === 'sell' && closeOnTrigger) {
          request['positionIdx'] = 1;
        } else if (side === 'sell' && !closeOnTrigger || side === 'buy' && closeOnTrigger) {
          request['positionIdx'] = 2;
        }
      } else {
        if (side === 'buy' && !reduceOnly || side === 'sell' && reduceOnly) {
          request['positionIdx'] = 1;
        } else if (side === 'sell' && !reduceOnly || side === 'buy' && reduceOnly) {
          request['positionIdx'] = 2;
        }
      }
    }
    request['tpslMode'] = 'Partial';
    if (amount === 0) {
      request['tpslMode'] = 'Full';
      request['tpOrderType'] = 'Market';
      request['slOrderType'] = 'Market';
    }
    const triggerPrice = this.safeNumber2(params, 'stopPrice', 'triggerPrice');
    const basePrice = this.safeNumber(params, 'basePrice');
    if (isStop) {
      if (!basePrice) {
        throw new _errors.InvalidOrder(this.id + ' createOrder() requires both the triggerPrice and basePrice params for ' + type + ' orders');
      }
      if (triggerPrice === undefined) {
        throw new _errors.InvalidOrder(this.id + ' createOrder() requires a triggerPrice param for ' + type + ' orders');
      }
      let triggerBy = 'LastPrice';
      if (params['trigger'] === 'Index') {
        triggerBy = 'IndexPrice';
      } else if (params['trigger'] === 'Mark') {
        triggerBy = 'MarkPrice';
      }
      request['triggerBy'] = triggerBy;
      request['slTriggerBy'] = triggerBy;
      request['tpTriggerBy'] = triggerBy;
      request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
      if (triggerPrice > basePrice) {
        request['triggerDirection'] = 1;
      } else {
        request['triggerDirection'] = 2;
      }
    }
    const takeProfit = this.safeString(params, 'takeProfit');
    if (takeProfit !== undefined) {
      request['takeProfit'] = this.priceToPrecision(symbol, takeProfit);
    }
    const stopLoss = this.safeString(params, 'stopLoss');
    if (stopLoss !== undefined) {
      request['stopLoss'] = this.priceToPrecision(symbol, stopLoss);
    }
    params = this.omit(params, ['stopPrice', 'timeInForce', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId']);
    const response = await this.privatePostContractV3PrivateOrderCreate(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "orderId": "e10b0716-7c91-4091-b98a-1fa0f401c7d5",
    //             "orderLinkId": "test0000003"
    //         },
    //         "retExtInfo": null,
    //         "time": 1664441344238
    //     }
    //
    const order = this.safeValue(response, 'result', {});
    return this.parseOrder(order);
  }
  async createUsdcOrder(symbol, type, side, amount, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    if (type === 'market') {
      throw new _errors.NotSupported(this.id + 'createOrder does not allow market orders for ' + symbol + ' markets');
    }
    const lowerCaseType = type.toLowerCase();
    if (price === undefined && lowerCaseType === 'limit') {
      throw new _errors.ArgumentsRequired(this.id + ' createOrder requires a price argument for limit orders');
    }
    const request = {
      'symbol': market['id'],
      'side': this.capitalize(side),
      'orderType': this.capitalize(lowerCaseType),
      'timeInForce': 'GoodTillCancel',
      'orderQty': this.amountToPrecision(symbol, amount)
      // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
      // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
      // 'reduceOnly': false, // reduce only, required for linear orders
      // when creating a closing order, bybit recommends a True value for
      //  closeOnTrigger to avoid failing due to insufficient available margin
      // 'closeOnTrigger': false, required for linear orders
      // 'orderLinkId': 'string', // unique client order id, max 36 characters
      // 'triggerPrice': 123.45, // trigger price, required for conditional orders
      // 'trigger_by': 'MarkPrice', // IndexPrice, MarkPrice
      // 'tptriggerby': 'MarkPrice', // IndexPrice, MarkPrice
      // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice
      // 'orderFilter': 'Order' or 'StopOrder'
      // 'mmp': false // market maker protection
    };

    const isMarket = lowerCaseType === 'market';
    const isLimit = lowerCaseType === 'limit';
    if (isLimit !== undefined) {
      request['orderPrice'] = this.priceToPrecision(symbol, price);
    }
    const exchangeSpecificParam = this.safeString(params, 'time_in_force');
    const timeInForce = this.safeStringLower(params, 'timeInForce');
    const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
    if (postOnly) {
      request['time_in_force'] = 'PostOnly';
    } else if (timeInForce === 'gtc') {
      request['time_in_force'] = 'GoodTillCancel';
    } else if (timeInForce === 'fok') {
      request['time_in_force'] = 'FillOrKill';
    } else if (timeInForce === 'ioc') {
      request['time_in_force'] = 'ImmediateOrCancel';
    }
    if (market['swap']) {
      const triggerPrice = this.safeNumber2(params, 'stopPrice', 'triggerPrice');
      const stopLossTriggerPrice = this.safeNumber(params, 'stopLossPrice', triggerPrice);
      const takeProfitTriggerPrice = this.safeNumber(params, 'takeProfitPrice');
      const stopLoss = this.safeNumber(params, 'stopLoss');
      const takeProfit = this.safeNumber(params, 'takeProfit');
      const isStopLossTriggerOrder = stopLossTriggerPrice !== undefined;
      const isTakeProfitTriggerOrder = takeProfitTriggerPrice !== undefined;
      const isStopLoss = stopLoss !== undefined;
      const isTakeProfit = takeProfit !== undefined;
      const isStopOrder = isStopLossTriggerOrder || isTakeProfitTriggerOrder;
      if (isStopOrder) {
        request['orderFilter'] = 'StopOrder';
        let triggerBy = 'LastPrice';
        if (params['trigger'] === 'Index') {
          triggerBy = 'IndexPrice';
        } else if (params['trigger'] === 'Mark') {
          triggerBy = 'MarkPrice';
        }
        request['trigger_by'] = triggerBy;
        const stopPx = isStopLossTriggerOrder ? stopLossTriggerPrice : takeProfitTriggerPrice;
        const preciseStopPrice = this.priceToPrecision(symbol, stopPx);
        request['triggerPrice'] = preciseStopPrice;
        const delta = this.numberToString(market['precision']['price']);
        request['basePrice'] = isStopLossTriggerOrder ? _Precise.Precise.stringSub(preciseStopPrice, delta) : _Precise.Precise.stringAdd(preciseStopPrice, delta);
      } else if (isStopLoss || isTakeProfit) {
        if (isStopLoss) {
          request['stopLoss'] = this.priceToPrecision(symbol, stopLoss);
        }
        if (isTakeProfit) {
          request['takeProfit'] = this.priceToPrecision(symbol, takeProfit);
        }
      } else {
        request['orderFilter'] = 'Order';
      }
    }
    const clientOrderId = this.safeString(params, 'clientOrderId');
    if (clientOrderId !== undefined) {
      request['orderLinkId'] = clientOrderId;
    } else if (market['option']) {
      // mandatory field for options
      request['orderLinkId'] = this.uuid16();
    }
    params = this.omit(params, ['stopPrice', 'timeInForce', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId']);
    const method = market['option'] ? 'privatePostOptionUsdcOpenapiPrivateV1PlaceOrder' : 'privatePostPerpetualUsdcOpenapiPrivateV1PlaceOrder';
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "retCode":0,
    //         "retMsg":"",
    //         "result":{
    //            "orderId":"34450a59-325e-4296-8af0-63c7c524ae33",
    //            "orderLinkId":"",
    //            "mmp":false,
    //            "symbol":"BTCPERP",
    //            "orderType":"Limit",
    //            "side":"Buy",
    //            "orderQty":"0.00100000",
    //            "orderPrice":"20000.00",
    //            "iv":"0",
    //            "timeInForce":"GoodTillCancel",
    //            "orderStatus":"Created",
    //            "createdAt":"1652261746007873",
    //            "basePrice":"0.00",
    //            "triggerPrice":"0.00",
    //            "takeProfit":"0.00",
    //            "stopLoss":"0.00",
    //            "slTriggerBy":"UNKNOWN",
    //            "tpTriggerBy":"UNKNOWN"
    //     }
    //
    const order = this.safeValue(response, 'result', {});
    return this.parseOrder(order);
  }
  async editUnifiedAccountOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['linear'] && !market['option']) {
      throw new _errors.NotSupported(this.id + ' editOrder does not allow inverse market orders for ' + symbol + ' markets');
    }
    const request = {
      'symbol': market['id'],
      'orderId': id
      // 'orderLinkId': 'string', // unique client order id, max 36 characters
      // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
      // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
      // 'triggerPrice': 123.45, // trigger price, required for conditional orders
      // 'triggerBy': 'MarkPrice', // IndexPrice, MarkPrice, LastPrice
      // 'tpTriggerby': 'MarkPrice', // IndexPrice, MarkPrice, LastPrice
      // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice, LastPrice
      // Valid for option only.
      // 'orderIv': '0', // Implied volatility; parameters are passed according to the real value; for example, for 10%, 0.1 is passed
    };

    if (amount) {
      request['qty'] = this.amountToPrecision(symbol, amount);
    } else {
      request['qty'] = '0';
    }
    if (market['linear']) {
      request['category'] = 'linear';
    } else {
      request['category'] = 'option';
    }
    if (price !== undefined) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
    const stopLossPrice = this.safeValue2(params, 'stopLossPrice', 'stopLoss');
    const isStopLossOrder = stopLossPrice !== undefined;
    const takeProfitPrice = this.safeValue2(params, 'takeProfitPrice', 'takeProfit');
    const isTakeProfitOrder = takeProfitPrice !== undefined;
    if (isStopLossOrder) {
      request['stopLoss'] = this.priceToPrecision(symbol, stopLossPrice);
    }
    if (isTakeProfitOrder) {
      request['takeProfit'] = this.priceToPrecision(symbol, takeProfitPrice);
    }
    if (triggerPrice !== undefined) {
      request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
    }
    params = this.omit(params, ['stopPrice', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'stopLoss', 'takeProfit']);
    const response = await this.privatePostV5OrderAmend(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "orderId": "c6f055d9-7f21-4079-913d-e6523a9cfffa",
    //             "orderLinkId": "linear-004"
    //         },
    //         "retExtInfo": {},
    //         "time": 1672217093461
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return {
      'info': response,
      'id': this.safeString(result, 'orderId')
    };
  }
  async editUnifiedMarginOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['linear'] && !market['option']) {
      throw new _errors.NotSupported(this.id + ' editOrder does not allow inverse market orders for ' + symbol + ' markets');
    }
    const lowerCaseType = type.toLowerCase();
    if (price === undefined && lowerCaseType === 'limit') {
      throw new _errors.ArgumentsRequired(this.id + ' editOrder requires a price argument for limit orders');
    }
    const request = {
      'orderId': id,
      'symbol': market['id'],
      'side': this.capitalize(side),
      'orderType': this.capitalize(lowerCaseType),
      'timeInForce': 'GoodTillCancel',
      'qty': this.amountToPrecision(symbol, amount)
      // 'takeProfit': 123.45, // take profit price, only take effect upon opening the position
      // 'stopLoss': 123.45, // stop loss price, only take effect upon opening the position
      // 'orderLinkId': 'string', // unique client order id, max 36 characters
      // 'triggerPrice': 123.45, // trigger price, required for conditional orders
      // 'triggerBy': 'MarkPrice', // IndexPrice, MarkPrice
      // 'tptriggerby': 'MarkPrice', // IndexPrice, MarkPrice
      // 'slTriggerBy': 'MarkPrice', // IndexPrice, MarkPrice
      // 'iv': '0', // Implied volatility, for options only; parameters are passed according to the real value; for example, for 10%, 0.1 is passed
    };

    if (market['linear']) {
      request['category'] = 'linear';
    } else {
      request['category'] = 'option';
    }
    const isMarket = lowerCaseType === 'market';
    const isLimit = lowerCaseType === 'limit';
    if (isLimit) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    const exchangeSpecificParam = this.safeString(params, 'time_in_force');
    const timeInForce = this.safeStringLower(params, 'timeInForce');
    const postOnly = this.isPostOnly(isMarket, exchangeSpecificParam === 'PostOnly', params);
    if (postOnly) {
      request['timeInForce'] = 'PostOnly';
    } else if (timeInForce === 'gtc') {
      request['timeInForce'] = 'GoodTillCancel';
    } else if (timeInForce === 'fok') {
      request['timeInForce'] = 'FillOrKill';
    } else if (timeInForce === 'ioc') {
      request['timeInForce'] = 'ImmediateOrCancel';
    }
    const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
    const stopLossPrice = this.safeValue(params, 'stopLossPrice');
    const isStopLossOrder = stopLossPrice !== undefined;
    const takeProfitPrice = this.safeValue(params, 'takeProfitPrice');
    const isTakeProfitOrder = takeProfitPrice !== undefined;
    if (isStopLossOrder) {
      request['stopLoss'] = this.priceToPrecision(symbol, stopLossPrice);
    }
    if (isTakeProfitOrder) {
      request['takeProfit'] = this.priceToPrecision(symbol, takeProfitPrice);
    }
    if (triggerPrice !== undefined) {
      let triggerBy = 'LastPrice';
      if (params['trigger'] === 'Index') {
        triggerBy = 'IndexPrice';
      } else if (params['trigger'] === 'Mark') {
        triggerBy = 'MarkPrice';
      }
      request['triggerBy'] = triggerBy;
      request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
    }
    const clientOrderId = this.safeString(params, 'clientOrderId');
    if (clientOrderId !== undefined) {
      request['orderLinkId'] = clientOrderId;
    }
    params = this.omit(params, ['stopPrice', 'timeInForce', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'postOnly', 'clientOrderId']);
    const response = await this.privatePostUnifiedV3PrivateOrderReplace(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "orderId": "42c86d66331e41998d12c2440ce90c1a",
    //             "orderLinkId": "e80d558e-ed"
    //         }
    //     }
    //
    const order = this.safeValue(response, 'result', {});
    return this.parseOrder(order);
  }
  async editContractV3Order(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'orderId': id,
      'qty': this.amountToPrecision(symbol, amount)
    };
    if (price !== undefined) {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
    const stopLossPrice = this.safeValue2(params, 'stopLossPrice', 'stopLoss');
    const isStopLossOrder = stopLossPrice !== undefined && stopLossPrice > 0;
    const takeProfitPrice = this.safeValue2(params, 'takeProfitPrice', 'takeProfit');
    const isTakeProfitOrder = takeProfitPrice !== undefined && takeProfitPrice > 0;
    if (isStopLossOrder) {
      request['stopLoss'] = this.priceToPrecision(symbol, stopLossPrice);
    }
    if (isTakeProfitOrder) {
      request['takeProfit'] = this.priceToPrecision(symbol, takeProfitPrice);
    }
    if (triggerPrice !== undefined) {
      request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);
    }
    params = this.omit(params, ['stopPrice', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'stopLoss', 'takeProfit']);
    const response = await this.privatePostContractV3PrivateOrderReplace(this.extend(request, params));
    //
    // contract v3
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "orderId": "db8b74b3-72d3-4264-bf3f-52d39b41956e",
    //             "orderLinkId": "x002"
    //         },
    //         "retExtInfo": {},
    //         "time": 1658902610749
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return {
      'info': response,
      'id': this.safeString(result, 'orderId')
    };
  }
  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' editOrder() requires an symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    if (enableUnifiedAccount && !market['inverse']) {
      return await this.editUnifiedAccountOrder(id, symbol, type, side, amount, price, params);
    } else if (market['spot']) {
      throw new _errors.NotSupported(this.id + ' editOrder() does not support spot markets');
    } else if (enableUnifiedMargin && !market['inverse']) {
      return await this.editUnifiedMarginOrder(id, symbol, type, side, amount, price, params);
    }
    return await this.editContractV3Order(id, symbol, type, side, amount, price, params);
  }
  async cancelUnifiedAccountOrder(id, symbol = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'orderLinkId': 'string',
      // 'orderId': id,
      // conditional orders
      // 'orderFilter': '', // Valid for spot only. Order,tpslOrder. If not passed, Order by default
    };

    if (market['spot']) {
      // only works for spot market
      const isStop = this.safeValue(params, 'stop', false);
      params = this.omit(params, ['stop']);
      request['orderFilter'] = isStop ? 'tpslOrder' : 'Order';
    }
    if (id !== undefined) {
      // The user can also use argument params["orderLinkId"]
      request['orderId'] = id;
    }
    if (market['spot']) {
      request['category'] = 'spot';
    } else if (market['option']) {
      request['category'] = 'option';
    } else if (market['linear']) {
      request['category'] = 'linear';
    } else {
      throw new _errors.NotSupported(this.id + ' cancelOrder() does not allow inverse market orders for ' + symbol + ' markets');
    }
    const response = await this.privatePostV5OrderCancel(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "orderId": "c6f055d9-7f21-4079-913d-e6523a9cfffa",
    //             "orderLinkId": "linear-004"
    //         },
    //         "retExtInfo": {},
    //         "time": 1672217377164
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return this.parseOrder(result, market);
  }
  async cancelUnifiedMarginOrder(id, symbol = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelUnifiedMarginOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'orderLinkId': 'string',
      // 'orderId': id,
      // conditional orders
      // 'orderFilter': '',
      // 'category': '',
    };

    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    request['orderFilter'] = isStop ? 'StopOrder' : 'Order';
    if (id !== undefined) {
      // The user can also use argument params["orderLinkId"]
      request['orderId'] = id;
    }
    if (market['option']) {
      request['category'] = 'option';
    } else if (market['linear']) {
      request['category'] = 'linear';
    } else {
      throw new _errors.NotSupported(this.id + ' cancelUnifiedMarginOrder() does not allow inverse market orders for ' + symbol + ' markets');
    }
    const response = await this.privatePostUnifiedV3PrivateOrderCancel(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "orderId": "42c86d66331e41998d12c2440ce90c1a",
    //             "orderLinkId": "e80d558e-ed"
    //         }
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return this.parseOrder(result, market);
  }
  async cancelUSDCOrder(id, symbol = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelUSDCOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'orderLinkId': 'string', // one of order_id, stop_order_id or order_link_id is required
      // 'orderId': id,
    };

    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    let method = undefined;
    if (id !== undefined) {
      // The user can also use argument params["order_link_id"]
      request['orderId'] = id;
    }
    if (market['option']) {
      method = 'privatePostOptionUsdcOpenapiPrivateV1CancelOrder';
    } else {
      method = 'privatePostPerpetualUsdcOpenapiPrivateV1CancelOrder';
      request['orderFilter'] = isStop ? 'StopOrder' : 'Order';
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "outRequestId": "",
    //             "symbol": "BTC-13MAY22-40000-C",
    //             "orderId": "8c65df91-91fc-461d-9b14-786379ef138c",
    //             "orderLinkId": ""
    //         },
    //         "retExtMap": {}
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return this.parseOrder(result, market);
  }
  async cancelDerivativesOrder(id, symbol = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelDerivativesOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'orderId': id
    };
    const response = await this.privatePostContractV3PrivateOrderCancel(this.extend(request, params));
    //
    // contract v3
    //
    //     {
    //         "retCode":0,
    //         "retMsg":"OK",
    //         "result":{
    //             "orderId": "4030430d-1dba-4134-ac77-3d81c14aaa00",
    //             "orderLinkId": ""
    //         },
    //         "retExtInfo":null,
    //         "time":1658850321861
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return this.parseOrder(result, market);
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bybit#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    const isUsdcSettled = market['settle'] === 'USDC';
    if (enableUnifiedAccount && !market['inverse']) {
      return await this.cancelUnifiedAccountOrder(id, symbol, params);
    } else if (enableUnifiedMargin && !market['inverse']) {
      return await this.cancelUnifiedMarginOrder(id, symbol, params);
    } else if (isUsdcSettled) {
      return await this.cancelUSDCOrder(id, symbol, params);
    }
    return await this.cancelDerivativesOrder(id, symbol, params);
  }
  async cancelAllUnifiedAccountOrders(symbol = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    let settle = undefined;
    let type = undefined;
    let subType = undefined;
    const request = {};
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
      request['symbol'] = market['id'];
    } else {
      [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', 'USDT');
    }
    [type, params] = this.handleMarketTypeAndParams('cancelAllOrders', market, params);
    [subType, params] = this.handleSubTypeAndParams('cancelAllOrders', market, params, 'linear');
    if (type === 'spot') {
      request['category'] = 'spot';
    } else if (type === 'option') {
      request['category'] = 'option';
    } else if (subType === 'linear') {
      request['category'] = 'linear';
    } else {
      throw new _errors.NotSupported(this.id + ' cancelAllOrders() does not allow inverse market orders for ' + type + ' markets');
    }
    request['settleCoin'] = settle;
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    if (isStop) {
      request['orderFilter'] = 'tpslOrder';
    }
    // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
    let finalParams = this.extend(request, params);
    if (subType === 'inverse') {
      finalParams = this.omit(finalParams, ['settleCoin']);
    }
    const response = await this.privatePostV5OrderCancelAll(finalParams);
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [
    //                 {
    //                     "orderId": "f6a73e1f-39b5-4dee-af21-1460b2e3b27c",
    //                     "orderLinkId": "a001"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672219780463
    //     }
    //
    const result = this.safeValue(response, 'result', []);
    const orders = this.safeValue(result, 'list');
    if (!Array.isArray(orders)) {
      return response;
    }
    return this.parseOrders(orders, market);
  }
  async cancelAllSpotOrders(symbol = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelAllSpotOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.privateDeleteSpotOrderBatchCancel(this.extend(request, params));
    //
    //    {
    //        "ret_code": 0,
    //        "ret_msg": "",
    //        "ext_code": null,
    //        "ext_info": null,
    //        "result": {
    //            "success": true
    //        }
    //    }
    //
    const result = this.safeValue(response, 'result', []);
    if (!Array.isArray(result)) {
      return response;
    }
    return this.parseOrders(result, market);
  }
  async cancelAllUnifiedMarginOrders(symbol = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    let settle = undefined;
    const request = {};
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
      request['symbol'] = market['id'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('cancelAllOrders', market, params, 'linear');
    request['category'] = subType;
    [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
    if (settle !== undefined) {
      request['settleCoin'] = settle;
    }
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    if (isStop) {
      request['orderFilter'] = 'StopOrder';
    }
    // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
    let finalParams = this.extend(request, params);
    if (subType === 'inverse') {
      finalParams = this.omit(finalParams, ['settleCoin']);
    }
    const response = await this.privatePostUnifiedV3PrivateOrderCancelAll(finalParams);
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [{
    //                     "category": "option",
    //                     "symbol": "BTC-24JUN22-45000-P",
    //                     "orderId": "bd5f3b34-d64d-4b60-8188-438fbea4c552",
    //                     "orderLinkId": "ac4e3b34-d64d-4b60-8188-438fbea4c552",
    //                 }, {
    //                     "category": "option",
    //                     "symbol": "BTC-24JUN22-45000-P",
    //                     "orderId": "4ddd727a-2af8-430e-a293-42895e594d18",
    //                     "orderLinkId": "5cee727a-2af8-430e-a293-42895e594d18",
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {
    //             "list": [{
    //                 "code": 0,
    //                 "msg": "OK"
    //             }, {
    //                 "code": 0,
    //                 "msg": "OK"
    //             }]
    //         },
    //         "time": 1657200736570
    //     }
    //
    const result = this.safeValue(response, 'result', []);
    const orders = this.safeValue(result, 'list');
    if (!Array.isArray(orders)) {
      return response;
    }
    return this.parseOrders(orders, market);
  }
  async cancelAllUSDCOrders(symbol = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelAllUSDCOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    let method = undefined;
    const request = {
      'symbol': market['id']
    };
    if (market['option']) {
      method = 'privatePostOptionUsdcOpenapiPrivateV1CancelAll';
    } else {
      method = 'privatePostPerpetualUsdcOpenapiPrivateV1CancelAll';
      const isStop = this.safeValue(params, 'stop', false);
      if (isStop) {
        request['orderFilter'] = 'StopOrder';
      } else {
        request['orderFilter'] = 'Order';
      }
      params = this.omit(params, ['stop']);
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "retExtMap": {},
    //         "result": [
    //             {
    //                 "outRequestId": "cancelAll-290119-1652176443114-0",
    //                 "symbol": "BTC-13MAY22-40000-C",
    //                 "orderId": "fa6cd740-56ed-477d-9385-90ccbfee49ca",
    //                 "orderLinkId": "",
    //                 "errorCode": 0,
    //                 "errorDesc": ""
    //             }
    //         ]
    //     }
    //
    const result = this.safeValue(response, 'result', []);
    if (!Array.isArray(result)) {
      return response;
    }
    return this.parseOrders(result, market);
  }
  async cancelAllDerivativesOrders(symbol = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    let settle = undefined;
    const request = {};
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
      request['symbol'] = market['id'];
    }
    [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
    if (settle !== undefined) {
      request['settleCoin'] = settle;
    }
    // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
    let finalParams = this.extend(request, params);
    if (request['settleCoin'] !== 'USDT' && request['settleCoin'] !== 'USDC') {
      finalParams = this.omit(finalParams, ['settleCoin']);
    }
    const response = await this.privatePostContractV3PrivateOrderCancelAll(finalParams);
    //
    // contract v3
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [
    //                 {
    //                     "orderId": "4030430d-1dba-4134-ac77-3d81c14aaa00",
    //                     "orderLinkId": "x001"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1658901359225
    //     }
    //
    const result = this.safeValue(response, 'result', []);
    const orders = this.safeValue(result, 'list', []);
    return this.parseOrders(orders, market);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name bybit#cancelAllOrders
     * @description cancel all open orders
     * @param {string|undefined} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let settle = this.safeString(params, 'settleCoin');
    if (settle === undefined) {
      [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
    }
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('cancelAllOrders', market, params);
    const isUsdcSettled = settle === 'USDC';
    const isInverse = subType === 'inverse';
    const isLinearSettle = isUsdcSettled || settle === 'USDT';
    if (isInverse && isLinearSettle) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelAllOrders with inverse subType requires settle to not be USDT or USDC');
    }
    const [type, query] = this.handleMarketTypeAndParams('cancelAllOrders', market, params);
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    if (enableUnifiedAccount) {
      return await this.cancelAllUnifiedAccountOrders(symbol, query);
    } else if (type === 'spot') {
      return await this.cancelAllSpotOrders(symbol, query);
    } else if (enableUnifiedMargin && !isInverse) {
      return await this.cancelAllUnifiedMarginOrders(symbol, query);
    } else if (isUsdcSettled) {
      return await this.cancelAllUSDCOrders(symbol, query);
    } else {
      return await this.cancelAllDerivativesOrders(symbol, query);
    }
  }
  async fetchUnifiedAccountOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {
      // 'symbol': market['id'],
      // 'category': string, Type of derivatives product: spot, linear or option.
      // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
      // 'orderId': string, Order ID
      // 'orderLinkId': string, Unique user-set order ID
      // 'orderStatus': string, // Return all status orders if not passed
      // 'orderFilter': string, Conditional order or active order
      // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
      // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
    };
    let market = undefined;
    if (symbol === undefined) {
      let type = undefined;
      [type, params] = this.handleMarketTypeAndParams('fetchOrders', market, params);
      // option, spot
      request['category'] = type;
      if (type === 'swap') {
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchOrders', market, params, 'linear');
        request['category'] = subType;
      }
    } else {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      if (market['spot']) {
        request['category'] = 'spot';
      } else if (market['option']) {
        request['category'] = 'option';
      } else if (market['linear']) {
        request['category'] = 'linear';
      } else {
        throw new _errors.NotSupported(this.id + ' fetchOrders() does not allow inverse market orders for ' + symbol + ' markets');
      }
    }
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    if (isStop) {
      if (market['spot']) {
        request['orderFilter'] = 'tpslOrder';
      } else {
        request['orderFilter'] = 'StopOrder';
      }
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetV5OrderHistory(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387%2C03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "BTCUSDT",
    //                     "orderType": "Limit",
    //                     "orderLinkId": "test-001",
    //                     "orderId": "03234de9-1332-41eb-b805-4a9f42c136a3",
    //                     "cancelType": "CancelByUser",
    //                     "avgPrice": "0",
    //                     "stopOrderType": "UNKNOWN",
    //                     "lastPriceOnCreated": "16656.5",
    //                     "orderStatus": "Cancelled",
    //                     "takeProfit": "",
    //                     "cumExecValue": "0",
    //                     "triggerDirection": 0,
    //                     "blockTradeId": "",
    //                     "rejectReason": "EC_PerCancelRequest",
    //                     "isLeverage": "",
    //                     "price": "18000",
    //                     "orderIv": "",
    //                     "createdTime": "1672220109387",
    //                     "tpTriggerBy": "UNKNOWN",
    //                     "positionIdx": 0,
    //                     "timeInForce": "GoodTillCancel",
    //                     "leavesValue": "0",
    //                     "updatedTime": "1672220114123",
    //                     "side": "Sell",
    //                     "triggerPrice": "",
    //                     "cumExecFee": "0",
    //                     "slTriggerBy": "UNKNOWN",
    //                     "leavesQty": "0",
    //                     "closeOnTrigger": false,
    //                     "cumExecQty": "0",
    //                     "reduceOnly": false,
    //                     "qty": "0.1",
    //                     "stopLoss": "",
    //                     "triggerBy": "UNKNOWN"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672221263862
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'list', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchUnifiedMarginOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {
      // 'symbol': market['id'],
      // 'category': string, Type of derivatives product: linear or option.
      // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
      // 'orderId': string, Order ID
      // 'orderLinkId': string, Unique user-set order ID
      // 'orderStatus': string, Query list of orders in designated states. If this parameter is not passed, the orders in all states shall be enquired by default. This parameter supports multi-state inquiry. States should be separated with English commas.
      // 'orderFilter': string, Conditional order or active order
      // 'direction': string, prev: prev, next: next.
      // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
      // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
    };
    let market = undefined;
    if (symbol === undefined) {
      let subType = undefined;
      [subType, params] = this.handleSubTypeAndParams('fetchUnifiedMarginOrders', market, params, 'linear');
      request['category'] = subType;
    } else {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      if (market['option']) {
        request['category'] = 'option';
      } else if (market['linear']) {
        request['category'] = 'linear';
      } else {
        throw new _errors.NotSupported(this.id + ' fetchUnifiedMarginOrders() does not allow inverse market orders for ' + symbol + ' markets');
      }
    }
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    if (isStop) {
      request['orderFilter'] = 'StopOrder';
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetUnifiedV3PrivateOrderList(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "Success",
    //         "result": {
    //         "nextPageCursor": "7d17d359-4e38-4d3a-9a31-29791ef2dfd7%3A1657711949928%2C7d17d359-4e38-4d3a-9a31-29791ef2dfd7%3A1657711949928",
    //         "category": "linear",
    //         "list": [
    //             {
    //                 "symbol": "ETHUSDT",
    //                 "orderType": "Market",
    //                 "orderLinkId": "",
    //                 "orderId": "7d17d359-4e38-4d3a-9a31-29791ef2dfd7",
    //                 "stopOrderType": "UNKNOWN",
    //                 "orderStatus": "Filled",
    //                 "takeProfit": "",
    //                 "cumExecValue": "536.92500000",
    //                 "blockTradeId": "",
    //                 "rejectReason": "EC_NoError",
    //                 "price": "1127.10000000",
    //                 "createdTime": 1657711949928,
    //                 "tpTriggerBy": "UNKNOWN",
    //                 "timeInForce": "ImmediateOrCancel",
    //                 "basePrice": "",
    //                 "leavesValue": "0.00000000",
    //                 "updatedTime": 1657711949945,
    //                 "side": "Buy",
    //                 "triggerPrice": "",
    //                 "cumExecFee": "0.32215500",
    //                 "slTriggerBy": "UNKNOWN",
    //                 "leavesQty": "0.0000",
    //                 "closeOnTrigger": false,
    //                 "cumExecQty": "0.5000",
    //                 "reduceOnly": false,
    //                 "qty": "0.5000",
    //                 "stopLoss": "",
    //                 "triggerBy": "UNKNOWN",
    //                 "orderIM": ""
    //             }]
    //         },
    //         "time": 1657713451741
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'list', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchDerivativesOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    const request = {
      // 'symbol': market['id'],
      // 'category': string, Type of derivatives product: spot, linear or option.
      // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
      // 'orderId': string, Order ID
      // 'orderLinkId': string, Unique user-set order ID
      // 'orderStatus': string, // Return all status orders if not passed
      // 'orderFilter': string, Conditional order or active order
      // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
      // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
    };
    if (symbol === undefined) {
      let type = undefined;
      [type, params] = this.handleMarketTypeAndParams('fetchOrders', market, params);
      request['category'] = type;
      if (type === 'swap') {
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams('fetchOrders', market, params, 'linear');
        request['category'] = subType;
      }
    } else {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      if (market['linear']) {
        request['category'] = 'linear';
      } else {
        request['category'] = 'inverse';
      }
    }
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    if (isStop) {
      request['orderFilter'] = 'StopOrder';
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetV5OrderHistory(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387%2C03234de9-1332-41eb-b805-4a9f42c136a3%3A1672220109387",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "BTCUSDT",
    //                     "orderType": "Limit",
    //                     "orderLinkId": "test-001",
    //                     "orderId": "03234de9-1332-41eb-b805-4a9f42c136a3",
    //                     "cancelType": "CancelByUser",
    //                     "avgPrice": "0",
    //                     "stopOrderType": "UNKNOWN",
    //                     "lastPriceOnCreated": "16656.5",
    //                     "orderStatus": "Cancelled",
    //                     "takeProfit": "",
    //                     "cumExecValue": "0",
    //                     "triggerDirection": 0,
    //                     "blockTradeId": "",
    //                     "rejectReason": "EC_PerCancelRequest",
    //                     "isLeverage": "",
    //                     "price": "18000",
    //                     "orderIv": "",
    //                     "createdTime": "1672220109387",
    //                     "tpTriggerBy": "UNKNOWN",
    //                     "positionIdx": 0,
    //                     "timeInForce": "GoodTillCancel",
    //                     "leavesValue": "0",
    //                     "updatedTime": "1672220114123",
    //                     "side": "Sell",
    //                     "triggerPrice": "",
    //                     "cumExecFee": "0",
    //                     "slTriggerBy": "UNKNOWN",
    //                     "leavesQty": "0",
    //                     "closeOnTrigger": false,
    //                     "cumExecQty": "0",
    //                     "reduceOnly": false,
    //                     "qty": "0.1",
    //                     "stopLoss": "",
    //                     "triggerBy": "UNKNOWN"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672221263862
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'list', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let settle = this.safeString(params, 'settleCoin');
    if (settle === undefined) {
      [settle, params] = this.handleOptionAndParams(params, 'fetchOrders', 'settle', settle);
    }
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchOrders', market, params);
    const isInverse = subType === 'inverse';
    const isUsdcSettled = settle === 'USDC';
    const isLinearSettle = isUsdcSettled || settle === 'USDT';
    if (isInverse && isLinearSettle) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOrders with inverse subType requires settle to not be USDT or USDC');
    }
    const [type, query] = this.handleMarketTypeAndParams('fetchOrders', market, params);
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    if (enableUnifiedAccount && !isInverse) {
      return await this.fetchUnifiedAccountOrders(symbol, since, limit, query);
    } else if (type === 'spot') {
      throw new _errors.NotSupported(this.id + ' fetchOrders() only support ' + type + ' markets for unified trade account, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead');
    } else if (enableUnifiedMargin && !isInverse) {
      return await this.fetchUnifiedMarginOrders(symbol, since, limit, query);
    } else {
      return await this.fetchDerivativesOrders(symbol, since, limit, query);
    }
  }
  async fetchSpotClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    const request = {};
    if (symbol !== undefined) {
      request['symbol'] = market['id'];
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    const response = await this.privateGetSpotV3PrivateHistoryOrders(this.extend(request, params));
    const result = this.safeValue(response, 'result', {});
    //
    //    {
    //        "retCode": "0",
    //        "retMsg": "OK",
    //        "result": {
    //            "list": [
    //                {
    //                    "accountId": "13380434",
    //                    "symbol": "AAVEUSDT",
    //                    "orderLinkId": "1666697847966604",
    //                    "orderId": "1274748373594828288",
    //                    "orderPrice": "80",
    //                    "orderQty": "0.11",
    //                    "execQty": "0",
    //                    "cummulativeQuoteQty": "0",
    //                    "avgPrice": "0",
    //                    "status": "CANCELED",
    //                    "timeInForce": "GTC",
    //                    "orderType": "LIMIT",
    //                    "side": "BUY",
    //                    "stopPrice": "0.0",
    //                    "icebergQty": "0.0",
    //                    "createTime": "1666697847972",
    //                    "updateTime": "1666697865809",
    //                    "isWorking": "1",
    //                    "orderCategory": "0"
    //                },
    //            ]
    //        },
    //        "retExtInfo": null,
    //        "time": "1666732287588"
    //    }
    //
    const orders = this.safeValue(result, 'list', []);
    return this.parseOrders(orders, market, since, limit);
  }
  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchClosedOrders
     * @description fetches information on multiple closed orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchClosedOrders', market, params);
    const enableUnified = await this.isUnifiedEnabled();
    const request = {};
    if (type === 'spot' && !enableUnified[1]) {
      return await this.fetchSpotClosedOrders(symbol, since, limit, params);
    } else {
      request['orderStatus'] = 'Filled';
    }
    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));
  }
  async fetchCanceledOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchCanceledOrders
     * @description fetches information on multiple canceled orders made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
     * @param {int|undefined} limit max number of orders to return, default is undefined
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchCanceledOrders', market, params);
    const enableUnified = await this.isUnifiedEnabled();
    const request = {};
    if (type === 'spot' && !enableUnified[1]) {
      throw new _errors.NotSupported(this.id + ' fetchCanceledOrders() only allow spot market orders for unified trade account, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead');
    } else {
      request['orderStatus'] = 'Cancelled';
    }
    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));
  }
  async fetchUnifiedAccountOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    limit = limit || 50;
    const request = {
      // 'symbol': market['id'],
      // 'category': string, Type of derivatives product: linear or option.
      // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
      // 'settleCoin': string, Settle coin. For linear, either symbol or settleCoin is required
      // 'orderId': string, Order ID
      // 'orderLinkId': string, Unique user-set order ID
      // 'orderFilter': string, Conditional order or active order
      // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
      // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
      // 'openOnly': 0,
    };
    let market = undefined;
    if (symbol === undefined) {
      let type = undefined;
      [type, params] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
      let subType = undefined;
      [subType, params] = this.handleSubTypeAndParams('fetchOpenOrders', market, params, 'linear');
      request['category'] = type;
      if (type === 'swap') {
        if (subType === 'linear') {
          // TEALSTREET BEGIN
          // this.checkRequiredSymbol ('fetchOpenOrders', symbol);
          request['settleCoin'] = 'USDT';
          // TEALSTREET END
        } else if (subType === 'inverse') {
          // TEALSTREET BEGIN
          // throw new NotSupported (this.id + ' fetchOpenOrders() does not allow inverse market orders for ' + symbol + ' markets');
          request['settleCoin'] = 'BTC';
          // TEALSTREET END
        }

        request['category'] = subType;
      }
    } else {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      if (market['spot']) {
        request['category'] = 'spot';
      } else if (market['option']) {
        request['category'] = 'option';
      } else if (market['linear']) {
        request['category'] = 'linear';
      } else {
        throw new _errors.NotSupported(this.id + ' fetchOpenOrders() does not allow inverse market orders for ' + symbol + ' markets');
      }
    }
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    // TEALSTREET BEGIN
    if (isStop) {
      // if (market['spot']) {
      //     request['orderFilter'] = 'tpslOrder';
      // } else {
      request['orderFilter'] = 'StopOrder';
      // }
    }
    // TEALSTREET END
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "1321052653536515584%3A1672217748287%2C1321052653536515584%3A1672217748287",
    //             "category": "spot",
    //             "list": [
    //                 {
    //                     "symbol": "ETHUSDT",
    //                     "orderType": "Limit",
    //                     "orderLinkId": "1672217748277652",
    //                     "orderId": "1321052653536515584",
    //                     "cancelType": "UNKNOWN",
    //                     "avgPrice": "",
    //                     "stopOrderType": "tpslOrder",
    //                     "lastPriceOnCreated": "",
    //                     "orderStatus": "Cancelled",
    //                     "takeProfit": "",
    //                     "cumExecValue": "0",
    //                     "triggerDirection": 0,
    //                     "isLeverage": "0",
    //                     "rejectReason": "",
    //                     "price": "1000",
    //                     "orderIv": "",
    //                     "createdTime": "1672217748287",
    //                     "tpTriggerBy": "",
    //                     "positionIdx": 0,
    //                     "timeInForce": "GTC",
    //                     "leavesValue": "500",
    //                     "updatedTime": "1672217748287",
    //                     "side": "Buy",
    //                     "triggerPrice": "1500",
    //                     "cumExecFee": "0",
    //                     "leavesQty": "0",
    //                     "slTriggerBy": "",
    //                     "closeOnTrigger": false,
    //                     "cumExecQty": "0",
    //                     "reduceOnly": false,
    //                     "qty": "0.5",
    //                     "stopLoss": "",
    //                     "triggerBy": "1192.5"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672219526294
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'list', []);
    let parsedOrders = this.parseOrders(data, market, since, limit);
    let paginationCursor = this.safeString(result, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
        paginationCursor = this.safeString(result, 'nextPageCursor');
      }
    }
    return parsedOrders;
  }
  async fetchSpotOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetSpotV3PrivateOpenOrders(this.extend(request, params));
    //
    //    {
    //         "retCode": "0",
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [
    //                 {
    //                     "accountId": "13380434",
    //                     "symbol": "AAVEUSDT",
    //                     "orderLinkId": "1666734005300717",
    //                     "orderId": "1275051683279281664",
    //                     "orderPrice": "80",
    //                     "orderQty": "0.11",
    //                     "execQty": "0",
    //                     "cummulativeQuoteQty": "0",
    //                     "avgPrice": "0",
    //                     "status": "NEW",
    //                     "timeInForce": "GTC",
    //                     "orderType": "LIMIT",
    //                     "side": "BUY",
    //                     "stopPrice": "0.0",
    //                     "icebergQty": "0.0",
    //                     "createTime": "1666734005304",
    //                     "updateTime": "1666734005309",
    //                     "isWorking": "1",
    //                     "orderCategory": "0"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": null,
    //         "time": "1666734031592"
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'list', []);
    let parsedOrders = this.parseOrders(data, market, since, limit);
    let paginationCursor = this.safeString(result, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privateGetSpotV3PrivateOpenOrders(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
        paginationCursor = this.safeString(result, 'nextPageCursor');
      }
    }
    return parsedOrders;
  }
  async fetchUnifiedMarginOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    limit = limit || 50;
    const request = {};
    let market = undefined;
    if (symbol === undefined) {
      let subType = undefined;
      [subType, params] = this.handleSubTypeAndParams('fetchUnifiedMarginOrders', market, params, 'linear');
      request['category'] = subType;
    } else {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      if (market['option']) {
        request['category'] = 'option';
      } else if (market['linear']) {
        request['category'] = 'linear';
      } else {
        throw new _errors.NotSupported(this.id + ' fetchUnifiedMarginOpenOrders() does not allow inverse market orders for ' + symbol + ' markets');
      }
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchUnifiedMarginOpenOrders', market, params);
    const isStop = this.safeValue(params, 'stop', false);
    const isConditional = isStop || type === 'stop' || type === 'conditional';
    params = this.omit(params, ['stop']);
    if (isConditional) {
      request['orderFilter'] = 'StopOrder';
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetUnifiedV3PrivateOrderUnfilledOrders(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "Success",
    //         "result": {
    //             "nextPageCursor": "135ccc0d-8136-4e1b-8af3-07b11ee158d1%3A1665565610526%2C135ccc0d-8136-4e1b-8af3-07b11ee158d1%3A1665565610526",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "ETHUSDT",
    //                     "orderType": "Limit",
    //                     "orderLinkId": "test0000005",
    //                     "orderId": "135ccc0d-8136-4e1b-8af3-07b11ee158d1",
    //                     "stopOrderType": "UNKNOWN",
    //                     "orderStatus": "New",
    //                     "takeProfit": "",
    //                     "cumExecValue": "0.00000000",
    //                     "blockTradeId": "",
    //                     "price": "700.00000000",
    //                     "createdTime": 1665565610526,
    //                     "tpTriggerBy": "UNKNOWN",
    //                     "timeInForce": "GoodTillCancel",
    //                     "basePrice": "",
    //                     "updatedTime": 1665565610533,
    //                     "side": "Buy",
    //                     "triggerPrice": "",
    //                     "cumExecFee": "0.00000000",
    //                     "slTriggerBy": "UNKNOWN",
    //                     "leavesQty": "0.1000",
    //                     "closeOnTrigger": false,
    //                     "cumExecQty": "0.00000000",
    //                     "reduceOnly": false,
    //                     "qty": "0.1000",
    //                     "stopLoss": "",
    //                     "triggerBy": "UNKNOWN",
    //                     "orderIM": "0.00000000"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": null,
    //         "time": 1665565614320
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'list', []);
    let parsedOrders = this.parseOrders(data, market, since, limit);
    let paginationCursor = this.safeString(result, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privateGetUnifiedV3PrivateOrderUnfilledOrders(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
        paginationCursor = this.safeString(result, 'nextPageCursor');
      }
    }
    return parsedOrders;
  }
  async fetchDerivativesOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    limit = limit || 50;
    let market = undefined;
    let settle = undefined;
    const request = {
      // 'symbol': market['id'],
      // 'category': string, Type of derivatives product: linear or option.
      // 'baseCoin': string, Base coin. When category=option. If not passed, BTC by default; when category=linear, if BTC passed, BTCPERP & BTCUSDT returned.
      // 'settleCoin': string, Settle coin. For linear, either symbol or settleCoin is required
      // 'orderId': string, Order ID
      // 'orderLinkId': string, Unique user-set order ID
      // 'orderFilter': string, Conditional order or active order
      // 'limit': number, Data quantity per page: Max data value per page is 50, and default value at 20.
      // 'cursor': string, API pass-through. accountType + category + cursor +. If inconsistent, the following should be returned: The account type does not match the service inquiry.
      // 'openOnly': 0,
    };
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      if (market['linear']) {
        request['category'] = 'linear';
      } else {
        request['category'] = 'inverse';
      }
    } else {
      let type = undefined;
      [type, params] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
      let subType = undefined;
      [subType, params] = this.handleSubTypeAndParams('fetchOpenOrders', market, params, 'linear');
      request['category'] = type;
      if (type === 'swap') {
        request['category'] = subType;
      }
    }
    [settle, params] = this.handleOptionAndParams(params, 'fetchOpenOrders', 'settle', settle);
    if (settle !== undefined) {
      request['settleCoin'] = settle;
    }
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['stop']);
    if (isStop) {
      request['orderFilter'] = 'StopOrder';
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "1321052653536515584%3A1672217748287%2C1321052653536515584%3A1672217748287",
    //             "category": "spot",
    //             "list": [
    //                 {
    //                     "symbol": "ETHUSDT",
    //                     "orderType": "Limit",
    //                     "orderLinkId": "1672217748277652",
    //                     "orderId": "1321052653536515584",
    //                     "cancelType": "UNKNOWN",
    //                     "avgPrice": "",
    //                     "stopOrderType": "tpslOrder",
    //                     "lastPriceOnCreated": "",
    //                     "orderStatus": "Cancelled",
    //                     "takeProfit": "",
    //                     "cumExecValue": "0",
    //                     "triggerDirection": 0,
    //                     "isLeverage": "0",
    //                     "rejectReason": "",
    //                     "price": "1000",
    //                     "orderIv": "",
    //                     "createdTime": "1672217748287",
    //                     "tpTriggerBy": "",
    //                     "positionIdx": 0,
    //                     "timeInForce": "GTC",
    //                     "leavesValue": "500",
    //                     "updatedTime": "1672217748287",
    //                     "side": "Buy",
    //                     "triggerPrice": "1500",
    //                     "cumExecFee": "0",
    //                     "leavesQty": "0",
    //                     "slTriggerBy": "",
    //                     "closeOnTrigger": false,
    //                     "cumExecQty": "0",
    //                     "reduceOnly": false,
    //                     "qty": "0.5",
    //                     "stopLoss": "",
    //                     "triggerBy": "1192.5"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672219526294
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'list', []);
    let parsedOrders = this.parseOrders(data, market, since, limit);
    let paginationCursor = this.safeString(result, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privateGetV5OrderRealtime(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'list', []);
        parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
        paginationCursor = this.safeString(result, 'nextPageCursor');
      }
    }
    return parsedOrders;
  }
  async fetchUSDCOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    limit = limit || 50;
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchUSDCOpenOrders', market, params);
    request['category'] = type === 'swap' ? 'perpetual' : 'option';
    const response = await this.privatePostOptionUsdcOpenapiPrivateV1QueryActiveOrders(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "resultTotalSize": 1,
    //             "cursor": "id%3D1662019818569%23df31e03b-fc00-4b4c-bd1c-b97fd72b5c5c",
    //             "dataList": [
    //                 {
    //                     "orderId": "df31e03b-fc00-4b4c-bd1c-b97fd72b5c5c",
    //                     "orderLinkId": "",
    //                     "symbol": "BTC-2SEP22-18000-C",
    //                     "orderStatus": "New",
    //                     "orderPrice": "500",
    //                     "side": "Buy",
    //                     "remainingQty": "0.1",
    //                     "orderType": "Limit",
    //                     "qty": "0.1",
    //                     "iv": "0.0000",
    //                     "cancelType": "",
    //                     "updateTimestamp": "1662019818579"
    //                 }
    //             ]
    //         }
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'dataList', []);
    let parsedOrders = this.parseOrders(data, market, since, limit);
    let paginationCursor = this.safeString(result, 'cursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privatePostOptionUsdcOpenapiPrivateV1QueryActiveOrders(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const data = this.safeValue(result, 'dataList', []);
        parsedOrders = this.arrayConcat(parsedOrders, this.parseOrders(data, market, since, limit));
        paginationCursor = this.safeString(result, 'cursor');
      }
    }
    return parsedOrders;
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOpenOrders
     * @description fetch all unfilled currently open orders
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch open orders for
     * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let settle = this.safeString(params, 'settleCoin');
    if (settle === undefined) {
      [settle, params] = this.handleOptionAndParams(params, 'fetchOpenOrders', 'settle', settle);
    }
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchOpenOrders', market, params);
    const isInverse = subType === 'inverse';
    const isUsdcSettled = settle === 'USDC';
    const isLinearSettle = isUsdcSettled || settle === 'USDT';
    if (isInverse && isLinearSettle) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOpenOrders with inverse subType requires settle to not be USDT or USDC');
    }
    const [type, query] = this.handleMarketTypeAndParams('fetchOpenOrders', market, params);
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    if (enableUnifiedAccount && !isInverse) {
      return await this.fetchUnifiedAccountOpenOrders(symbol, since, limit, query);
    } else if (type === 'spot') {
      return await this.fetchSpotOpenOrders(symbol, since, limit, query);
    } else if (enableUnifiedMargin && !isInverse) {
      return await this.fetchUnifiedMarginOpenOrders(symbol, since, limit, query);
    } else if (isUsdcSettled) {
      return await this.fetchUSDCOpenOrders(symbol, since, limit, query);
    } else {
      return await this.fetchDerivativesOpenOrders(symbol, since, limit, query);
    }
  }
  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @param {string} id order id
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    const request = {
      'orderId': id
    };
    return await this.fetchMyTrades(symbol, since, limit, this.extend(request, params));
  }
  async fetchMyUnifiedTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    const request = {
      // 'symbol': market['id'],
      // 'category': '', // Product type. spot,linear,option
      // 'orderId': '', // Order ID
      // 'orderLinkId': '', // User customised order ID
      // 'baseCoin': '', // Base coin
      // 'startTime': 0, // The start timestamp (ms)
      // 'endTime': 0, // The end timestamp (ms)
      // 'execType': '', // Execution type
      // 'limit': 0, // Limit for data size per page. [1, 100]. Default: 50
      // 'cursor': '', // Cursor. Used for pagination
    };
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params);
    if (subType === 'inverse') {
      throw new _errors.NotSupported(this.id + ' fetchMyTrades() does not support ' + subType + ' markets.');
    }
    request['category'] = subType;
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 20, max 50
    }

    const response = await this.privateGetV5ExecutionList(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "132766%3A2%2C132766%3A2",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "ETHPERP",
    //                     "orderType": "Market",
    //                     "underlyingPrice": "",
    //                     "orderLinkId": "",
    //                     "side": "Buy",
    //                     "indexPrice": "",
    //                     "orderId": "8c065341-7b52-4ca9-ac2c-37e31ac55c94",
    //                     "stopOrderType": "UNKNOWN",
    //                     "leavesQty": "0",
    //                     "execTime": "1672282722429",
    //                     "isMaker": false,
    //                     "execFee": "0.071409",
    //                     "feeRate": "0.0006",
    //                     "execId": "e0cbe81d-0f18-5866-9415-cf319b5dab3b",
    //                     "tradeIv": "",
    //                     "blockTradeId": "",
    //                     "markPrice": "1183.54",
    //                     "execPrice": "1190.15",
    //                     "markIv": "",
    //                     "orderQty": "0.1",
    //                     "orderPrice": "1236.9",
    //                     "execValue": "119.015",
    //                     "execType": "Trade",
    //                     "execQty": "0.1"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672283754510
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const trades = this.safeValue(result, 'list', []);
    let parsedTrades = this.parseTrades(trades, market, since, limit);
    let paginationCursor = this.safeString(result, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privateGetV5ExecutionList(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'list', []);
        parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
        paginationCursor = this.safeString(result, 'nextPageCursor');
      }
    }
    return parsedTrades;
  }
  async fetchMyUnifiedMarginTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    let settle = undefined;
    const request = {
      // 'symbol': market['id'],
      // 'orderId': 'f185806b-b801-40ff-adec-52289370ed62', // if not provided will return user's trading records
      // 'startTime': parseInt (since / 1000),
      // 'endTime': 0,
      // 'category': ''
      // 'limit' 20, // max 50
    };
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
      request['symbol'] = market['id'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params, 'linear');
    request['category'] = subType;
    [settle, params] = this.handleOptionAndParams(params, 'cancelAllOrders', 'settle', settle);
    if (settle !== undefined) {
      request['settleCoin'] = settle;
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 20, max 50
    }

    const response = await this.privateGetUnifiedV3PrivateExecutionList(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "Success",
    //         "result": {
    //             "nextPageCursor": "1565%3A0%2C1565%3A0",
    //             "category": "option",
    //             "list": [
    //                 {
    //                     "orderType": "Limit",
    //                     "symbol": "BTC-14JUL22-17500-C",
    //                     "orderLinkId": "188889689-yuanzhen-558998998899",
    //                     "side": "Buy",
    //                     "orderId": "09c5836f-81ef-4208-a5b4-43135d3e02a2",
    //                     "leavesQty": "0.0000",
    //                     "execTime": 1657714122417,
    //                     "execFee": "0.11897082",
    //                     "feeRate": "0.000300",
    //                     "execId": "6e492560-78b4-5d2b-b331-22921d3173c9",
    //                     "blockTradeId": "",
    //                     "execPrice": "2360.00000000",
    //                     "lastLiquidityInd": "TAKER",
    //                     "orderQty": "0.0200",
    //                     "orderPrice": "2360.00000000",
    //                     "execValue": "47.20000000",
    //                     "execType": "Trade",
    //                     "execQty": "0.0200"
    //                 }
    //             ]
    //         },
    //         "time": 1657714292783
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const trades = this.safeValue(result, 'list', []);
    let parsedTrades = this.parseTrades(trades, market, since, limit);
    let paginationCursor = this.safeString(result, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privateGetUnifiedV3PrivateExecutionList(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'list', []);
        parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
        paginationCursor = this.safeString(result, 'nextPageCursor');
      }
    }
    return parsedTrades;
  }
  async fetchMyContractTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchMyContractTrades() requires a symbol argument');
    }
    await this.loadMarkets();
    let market = undefined;
    const request = {
      // 'symbol': market['id'],
      // 'category': '', // Product type. spot,linear,option
      // 'orderId': '', // Order ID
      // 'orderLinkId': '', // User customised order ID
      // 'baseCoin': '', // Base coin
      // 'startTime': 0, // The start timestamp (ms)
      // 'endTime': 0, // The end timestamp (ms)
      // 'execType': '', // Execution type
      // 'limit': 0, // Limit for data size per page. [1, 100]. Default: 50
      // 'cursor': '', // Cursor. Used for pagination
    };
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params);
    request['category'] = subType;
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 50, max 100
    }

    const response = await this.privateGetV5ExecutionList(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "132766%3A2%2C132766%3A2",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "ETHPERP",
    //                     "orderType": "Market",
    //                     "underlyingPrice": "",
    //                     "orderLinkId": "",
    //                     "side": "Buy",
    //                     "indexPrice": "",
    //                     "orderId": "8c065341-7b52-4ca9-ac2c-37e31ac55c94",
    //                     "stopOrderType": "UNKNOWN",
    //                     "leavesQty": "0",
    //                     "execTime": "1672282722429",
    //                     "isMaker": false,
    //                     "execFee": "0.071409",
    //                     "feeRate": "0.0006",
    //                     "execId": "e0cbe81d-0f18-5866-9415-cf319b5dab3b",
    //                     "tradeIv": "",
    //                     "blockTradeId": "",
    //                     "markPrice": "1183.54",
    //                     "execPrice": "1190.15",
    //                     "markIv": "",
    //                     "orderQty": "0.1",
    //                     "orderPrice": "1236.9",
    //                     "execValue": "119.015",
    //                     "execType": "Trade",
    //                     "execQty": "0.1"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672283754510
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const trades = this.safeValue(result, 'list', []);
    let parsedTrades = this.parseTrades(trades, market, since, limit);
    let paginationCursor = this.safeString(result, 'nextPageCursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privateGetV5ExecutionList(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'list', []);
        parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
        paginationCursor = this.safeString(result, 'nextPageCursor');
      }
    }
    return parsedTrades;
  }
  async fetchMyUsdcTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    let market = undefined;
    const request = {};
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
      request['category'] = market['option'] ? 'OPTION' : 'PERPETUAL';
    } else {
      request['category'] = 'PERPETUAL';
    }
    const response = await this.privatePostOptionUsdcOpenapiPrivateV1ExecutionList(this.extend(request, params));
    //
    //     {
    //       "result": {
    //         "cursor": "29%3A1%2C28%3A1",
    //         "resultTotalSize": 2,
    //         "dataList": [
    //           {
    //             "symbol": "ETHPERP",
    //             "orderLinkId": "",
    //             "side": "Sell",
    //             "orderId": "d83f8b4d-2f60-4e04-a64a-a3f207989dc6",
    //             "execFee": "0.0210",
    //             "feeRate": "0.000600",
    //             "blockTradeId": "",
    //             "tradeTime": "1669196423581",
    //             "execPrice": "1161.45",
    //             "lastLiquidityInd": "TAKER",
    //             "execValue": "34.8435",
    //             "execType": "Trade",
    //             "execQty": "0.030",
    //             "tradeId": "d9aa8590-9e6a-575e-a1be-d6261e6ed2e5"
    //           }, ...
    //         ]
    //       },
    //       "retCode": 0,
    //       "retMsg": "Success."
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const trades = this.safeValue(result, 'dataList', []);
    let parsedTrades = this.parseTrades(trades, market, since, limit);
    let paginationCursor = this.safeString(result, 'cursor');
    if (paginationCursor !== undefined) {
      while (paginationCursor !== undefined) {
        params['cursor'] = paginationCursor;
        const response = await this.privatePostOptionUsdcOpenapiPrivateV1ExecutionList(this.extend(request, params));
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'dataList', []);
        parsedTrades = this.arrayConcat(parsedTrades, this.parseTrades(trades, market, since, limit));
        paginationCursor = this.safeString(result, 'cursor');
      }
    }
    return parsedTrades;
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    let settle = this.safeString(params, 'settleCoin');
    if (settle === undefined) {
      [settle, params] = this.handleOptionAndParams(params, 'fetchMyTrades', 'settle', settle);
    }
    if (symbol !== undefined) {
      market = this.market(symbol);
      settle = market['settle'];
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchMyTrades', market, params);
    const splitId = symbol.split(':');
    const settleSuffix = this.safeString(splitId, 2);
    if (settleSuffix === 'USDC') {
      settle = 'USDC';
    }
    const isInverse = subType === 'inverse';
    const isUsdcSettled = settle === 'USDC';
    const isLinearSettle = isUsdcSettled || settle === 'USDT';
    if (isInverse && isLinearSettle) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchMyTrades with inverse subType requires settle to not be USDT or USDC');
    }
    // eslint-disable-next-line no-unused-vars
    const [type, query] = this.handleMarketTypeAndParams('fetchMyTrades', market, params);
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    if (enableUnifiedAccount && !isInverse) {
      const orderId = this.safeString(params, 'orderId');
      if (orderId === undefined) {
        this.checkRequiredSymbol('fetchMyTrades', symbol);
      }
      return await this.fetchMyUnifiedTrades(symbol, since, limit, query);
    } else if (enableUnifiedMargin && !isInverse) {
      return await this.fetchMyUnifiedMarginTrades(symbol, since, limit, query);
    } else if (isUsdcSettled) {
      // return await this.fetchMyUsdcTrades (symbol, since, limit, query);
      return [];
    } else {
      return await this.fetchMyContractTrades(symbol, since, limit, query);
    }
  }
  parseDepositAddress(depositAddress, currency = undefined) {
    //
    //     {
    //         chainType: 'ERC20',
    //         addressDeposit: '0xf56297c6717c1d1c42c30324468ed50a9b7402ee',
    //         tagDeposit: '',
    //         chain: 'ETH'
    //     }
    //
    const address = this.safeString(depositAddress, 'addressDeposit');
    const tag = this.safeString(depositAddress, 'tagDeposit');
    const code = this.safeString(currency, 'code');
    const chain = this.safeString(depositAddress, 'chain');
    this.checkAddress(address);
    return {
      'currency': code,
      'address': address,
      'tag': tag,
      'network': chain,
      'info': depositAddress
    };
  }
  async fetchDepositAddressesByNetwork(code, params = {}) {
    /**
     * @method
     * @name bybit#fetchDepositAddressesByNetwork
     * @description fetch a dictionary of addresses for a currency, indexed by network
     * @see https://bybit-exchange.github.io/docs/v5/asset/master-deposit-addr
     * @param {string} code unified currency code of the currency for the deposit address
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a dictionary of [address structures]{@link https://docs.ccxt.com/#/?id=address-structure} indexed by the network
     */
    await this.loadMarkets();
    let currency = this.currency(code);
    const request = {
      'coin': currency['id']
    };
    const response = await this.privateGetV5AssetDepositQueryAddress(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "coin": "USDT",
    //             "chains": [
    //                 {
    //                     "chainType": "ERC20",
    //                     "addressDeposit": "0xd9e1cd77afa0e50b452a62fbb68a3340602286c3",
    //                     "tagDeposit": "",
    //                     "chain": "ETH"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672192792860
    //     }
    //
    const result = this.safeValue(response, 'result', []);
    const chains = this.safeValue(result, 'chains', []);
    const coin = this.safeString(result, 'coin');
    currency = this.currency(coin);
    const parsed = this.parseDepositAddresses(chains, [currency['code']], false, {
      'currency': currency['id']
    });
    return this.indexBy(parsed, 'network');
  }
  async fetchDepositAddress(code, params = {}) {
    /**
     * @method
     * @name bybit#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @see https://bybit-exchange.github.io/docs/v5/asset/master-deposit-addr
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    await this.loadMarkets();
    const [networkCode, query] = this.handleNetworkCodeAndParams(params);
    const networkId = this.networkCodeToId(networkCode);
    const currency = this.currency(code);
    const request = {
      'coin': currency['id']
    };
    if (networkId !== undefined) {
      request['chainType'] = networkId;
    }
    const response = await this.privateGetV5AssetDepositQueryAddress(this.extend(request, query));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "coin": "USDT",
    //             "chains": [
    //                 {
    //                     "chainType": "ERC20",
    //                     "addressDeposit": "0xd9e1cd77afa0e50b452a62fbb68a3340602286c3",
    //                     "tagDeposit": "",
    //                     "chain": "ETH"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672192792860
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const chains = this.safeValue(result, 'chains', []);
    const chainsIndexedById = this.indexBy(chains, 'chain');
    const selectedNetworkId = this.selectNetworkIdFromRawNetworks(code, networkCode, chainsIndexedById);
    const addressObject = this.safeValue(chainsIndexedById, selectedNetworkId, {});
    return this.parseDepositAddress(addressObject, currency);
  }
  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchDeposits
     * @description fetch all deposits made to an account
     * @see https://bybit-exchange.github.io/docs/v5/asset/deposit-record
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch deposits for, default = 30 days before the current time
     * @param {int|undefined} limit the maximum number of deposits structures to retrieve, default = 50, max = 50
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @param {int|undefined} params.until the latest time in ms to fetch deposits for, default = 30 days after since
     *
     * EXCHANGE SPECIFIC PARAMETERS
     * @param {string|undefined} params.cursor used for pagination
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
    */
    await this.loadMarkets();
    const request = {
      // 'coin': currency['id'],
      // 'limit': 20, // max 50
      // 'cursor': '',
    };
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['coin'] = currency['id'];
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetV5AssetDepositQueryRecord(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "rows": [
    //                 {
    //                     "coin": "USDT",
    //                     "chain": "ETH",
    //                     "amount": "10000",
    //                     "txID": "skip-notification-scene-test-amount-202212270944-533285-USDT",
    //                     "status": 3,
    //                     "toAddress": "test-amount-address",
    //                     "tag": "",
    //                     "depositFee": "",
    //                     "successAt": "1672134274000",
    //                     "confirmations": "10000",
    //                     "txIndex": "",
    //                     "blockHash": ""
    //                 }
    //             ],
    //             "nextPageCursor": "eyJtaW5JRCI6MTA0NjA0MywibWF4SUQiOjEwNDYwNDN9"
    //         },
    //         "retExtInfo": {},
    //         "time": 1672191992512
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'rows', []);
    return this.parseTransactions(data, currency, since, limit);
  }
  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchWithdrawals
     * @description fetch all withdrawals made from an account
     * @see https://bybit-exchange.github.io/docs/v5/asset/withdraw-record
     * @param {string} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
     * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'coin': currency['id'],
      // 'limit': 20, // max 50
      // 'cusor': '',
    };
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['coin'] = currency['id'];
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetV5AssetWithdrawQueryRecord(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "rows": [
    //                 {
    //                     "coin": "USDT",
    //                     "chain": "ETH",
    //                     "amount": "77",
    //                     "txID": "",
    //                     "status": "SecurityCheck",
    //                     "toAddress": "0x99ced129603abc771c0dabe935c326ff6c86645d",
    //                     "tag": "",
    //                     "withdrawFee": "10",
    //                     "createTime": "1670922217000",
    //                     "updateTime": "1670922217000",
    //                     "withdrawId": "9976",
    //                     "withdrawType": 0
    //                 },
    //                 {
    //                     "coin": "USDT",
    //                     "chain": "ETH",
    //                     "amount": "26",
    //                     "txID": "",
    //                     "status": "success",
    //                     "toAddress": "15638072681@163.com",
    //                     "tag": "",
    //                     "withdrawFee": "0",
    //                     "createTime": "1669711121000",
    //                     "updateTime": "1669711380000",
    //                     "withdrawId": "9801",
    //                     "withdrawType": 1
    //                 }
    //             ],
    //             "nextPageCursor": "eyJtaW5JRCI6OTgwMSwibWF4SUQiOjk5NzZ9"
    //         },
    //         "retExtInfo": {},
    //         "time": 1672194949928
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue(result, 'rows', []);
    return this.parseTransactions(data, currency, since, limit);
  }
  parseTransactionStatus(status) {
    const statuses = {
      // v1/v2
      'ToBeConfirmed': 'pending',
      'UnderReview': 'pending',
      'Success': 'ok',
      'Expire': 'expired',
      // v3 deposit status
      '0': 'unknown',
      '1': 'pending',
      '2': 'processing',
      '3': 'ok',
      '4': 'fail',
      // v3 withdrawal status
      'SecurityCheck': 'pending',
      'Pending': 'pending',
      'success': 'ok',
      'CancelByUser': 'canceled',
      'Reject': 'rejected',
      'Fail': 'failed',
      'BlockchainConfirmed': 'ok'
    };
    return this.safeString(statuses, status, status);
  }
  parseTransaction(transaction, currency = undefined) {
    //
    // fetchWithdrawals
    //
    //     {
    //         "coin": "USDT",
    //         "chain": "TRX",
    //         "amount": "12.34",
    //         "txID": "de5ea0a2f2e59dc9a714837dd3ddc6d5e151b56ec5d786d351c4f52336f80d3c",
    //         "status": "success",
    //         "toAddress": "TQdmFKUoe1Lk2iwZuwRJEHJreTUBoN3BAw",
    //         "tag": "",
    //         "withdrawFee": "0.5",
    //         "createTime": "1665144183000",
    //         "updateTime": "1665144256000",
    //         "withdrawId": "8839035"
    //     }
    //
    // fetchDeposits
    //
    //     {
    //         "coin": "USDT",
    //         "chain": "TRX",
    //         "amount": "44",
    //         "txID": "0b038ea12fa1575e2d66693db3c346b700d4b28347afc39f80321cf089acc960",
    //         "status": "3",
    //         "toAddress": "TC6NCAC5WSVCCiaD3kWZXyW91ZKKhLm53b",
    //         "tag": "",
    //         "depositFee": "",
    //         "successAt": "1665142507000",
    //         "confirmations": "100",
    //         "txIndex": "0",
    //         "blockHash": "0000000002ac3b1064aee94bca1bd0b58c4c09c65813b084b87a2063d961129e"
    //     }
    //
    // withdraw
    //
    //     {
    //         "id": "9377266"
    //     }
    //
    const currencyId = this.safeString(transaction, 'coin');
    const code = this.safeCurrencyCode(currencyId, currency);
    const timestamp = this.safeInteger2(transaction, 'createTime', 'successAt');
    const updated = this.safeInteger(transaction, 'updateTime');
    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));
    const feeCost = this.safeNumber2(transaction, 'depositFee', 'withdrawFee', 0);
    const type = 'depositFee' in transaction ? 'deposit' : 'withdrawal';
    let fee = undefined;
    if (feeCost !== undefined) {
      fee = {
        'cost': feeCost,
        'currency': code
      };
    }
    const toAddress = this.safeString(transaction, 'toAddress');
    return {
      'info': transaction,
      'id': this.safeString2(transaction, 'id', 'withdrawId'),
      'txid': this.safeString(transaction, 'txID'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'network': this.networkIdToCode(this.safeString(transaction, 'chain')),
      'address': undefined,
      'addressTo': toAddress,
      'addressFrom': undefined,
      'tag': this.safeString(transaction, 'tag'),
      'tagTo': undefined,
      'tagFrom': undefined,
      'type': type,
      'amount': this.safeNumber(transaction, 'amount'),
      'currency': code,
      'status': status,
      'updated': updated,
      'fee': fee
    };
  }
  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
     * @see https://bybit-exchange.github.io/docs/v5/account/transaction-log
     * @param {string|undefined} code unified currency code, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
     * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'coin': currency['id'],
      // 'currency': currency['id'], // alias
      // 'start_date': this.iso8601 (since),
      // 'end_date': this.iso8601 (till),
      // 'wallet_fund_type': 'Deposit', // Withdraw, RealisedPNL, Commission, Refund, Prize, ExchangeOrderWithdraw, ExchangeOrderDeposit
      // 'page': 1,
      // 'limit': 20, // max 50
      // v5 transaction log
      // 'accountType': '', Account Type. UNIFIED
      // 'category': '', Product type. spot,linear,option
      // 'currency': '', Currency
      // 'baseCoin': '', BaseCoin. e.g., BTC of BTCPERP
      // 'type': '', Types of transaction logs
      // 'startTime': 0, The start timestamp (ms)
      // 'endTime': 0, The end timestamp (ms)
      // 'limit': 0, Limit for data size per page. [1, 50]. Default: 20
      // 'cursor': '', Cursor. Used for pagination
    };
    const enableUnified = await this.isUnifiedEnabled();
    let currency = undefined;
    let currencyKey = 'coin';
    if (enableUnified[1]) {
      currencyKey = 'currency';
      if (since !== undefined) {
        request['startTime'] = since;
      }
    } else {
      if (since !== undefined) {
        request['start_date'] = this.yyyymmdd(since);
      }
    }
    const method = enableUnified[1] ? 'privateGetV5AccountTransactionLog' : 'privateGetV2PrivateWalletFundRecords';
    if (code !== undefined) {
      currency = this.currency(code);
      request[currencyKey] = currency['id'];
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "ret_code": 0,
    //         "ret_msg": "ok",
    //         "ext_code": "",
    //         "result": {
    //             "data": [
    //                 {
    //                     "id": 234467,
    //                     "user_id": 1,
    //                     "coin": "BTC",
    //                     "wallet_id": 27913,
    //                     "type": "Realized P&L",
    //                     "amount": "-0.00000006",
    //                     "tx_id": "",
    //                     "address": "BTCUSD",
    //                     "wallet_balance": "0.03000330",
    //                     "exec_time": "2019-12-09T00:00:25.000Z",
    //                     "cross_seq": 0
    //                 }
    //             ]
    //         },
    //         "ext_info": null,
    //         "time_now": "1577481867.115552",
    //         "rate_limit_status": 119,
    //         "rate_limit_reset_ms": 1577481867122,
    //         "rate_limit": 120
    //     }
    //
    // v5 transaction log
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "21963%3A1%2C14954%3A1",
    //             "list": [
    //                 {
    //                     "symbol": "XRPUSDT",
    //                     "side": "Buy",
    //                     "funding": "-0.003676",
    //                     "orderLinkId": "",
    //                     "orderId": "1672128000-8-592324-1-2",
    //                     "fee": "0.00000000",
    //                     "change": "-0.003676",
    //                     "cashFlow": "0",
    //                     "transactionTime": "1672128000000",
    //                     "type": "SETTLEMENT",
    //                     "feeRate": "0.0001",
    //                     "size": "100",
    //                     "qty": "100",
    //                     "cashBalance": "5086.55825002",
    //                     "currency": "USDT",
    //                     "category": "linear",
    //                     "tradePrice": "0.3676",
    //                     "tradeId": "534c0003-4bf7-486f-aa02-78cee36825e4"
    //                 },
    //                 {
    //                     "symbol": "XRPUSDT",
    //                     "side": "Buy",
    //                     "funding": "",
    //                     "orderLinkId": "linear-order",
    //                     "orderId": "592b7e41-78fd-42e2-9aa3-91e1835ef3e1",
    //                     "fee": "0.01908720",
    //                     "change": "-0.0190872",
    //                     "cashFlow": "0",
    //                     "transactionTime": "1672121182224",
    //                     "type": "TRADE",
    //                     "feeRate": "0.0006",
    //                     "size": "100",
    //                     "qty": "88",
    //                     "cashBalance": "5086.56192602",
    //                     "currency": "USDT",
    //                     "category": "linear",
    //                     "tradePrice": "0.3615",
    //                     "tradeId": "5184f079-88ec-54c7-8774-5173cafd2b4e"
    //                 },
    //                 {
    //                     "symbol": "XRPUSDT",
    //                     "side": "Buy",
    //                     "funding": "",
    //                     "orderLinkId": "linear-order",
    //                     "orderId": "592b7e41-78fd-42e2-9aa3-91e1835ef3e1",
    //                     "fee": "0.00260280",
    //                     "change": "-0.0026028",
    //                     "cashFlow": "0",
    //                     "transactionTime": "1672121182224",
    //                     "type": "TRADE",
    //                     "feeRate": "0.0006",
    //                     "size": "12",
    //                     "qty": "12",
    //                     "cashBalance": "5086.58101322",
    //                     "currency": "USDT",
    //                     "category": "linear",
    //                     "tradePrice": "0.3615",
    //                     "tradeId": "8569c10f-5061-5891-81c4-a54929847eb3"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672132481405
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const data = this.safeValue2(result, 'data', 'list', []);
    return this.parseLedger(data, currency, since, limit);
  }
  parseLedgerEntry(item, currency = undefined) {
    //
    //     {
    //         "id": 234467,
    //         "user_id": 1,
    //         "coin": "BTC",
    //         "wallet_id": 27913,
    //         "type": "Realized P&L",
    //         "amount": "-0.00000006",
    //         "tx_id": "",
    //         "address": "BTCUSD",
    //         "wallet_balance": "0.03000330",
    //         "exec_time": "2019-12-09T00:00:25.000Z",
    //         "cross_seq": 0
    //     }
    //
    //     {
    //         "symbol": "XRPUSDT",
    //         "side": "Buy",
    //         "funding": "",
    //         "orderLinkId": "linear-order",
    //         "orderId": "592b7e41-78fd-42e2-9aa3-91e1835ef3e1",
    //         "fee": "0.00260280",
    //         "change": "-0.0026028",
    //         "cashFlow": "0",
    //         "transactionTime": "1672121182224",
    //         "type": "TRADE",
    //         "feeRate": "0.0006",
    //         "size": "12",
    //         "qty": "12",
    //         "cashBalance": "5086.58101322",
    //         "currency": "USDT",
    //         "category": "linear",
    //         "tradePrice": "0.3615",
    //         "tradeId": "8569c10f-5061-5891-81c4-a54929847eb3"
    //     }
    //
    const currencyId = this.safeString2(item, 'coin', 'currency');
    const code = this.safeCurrencyCode(currencyId, currency);
    const amount = this.safeString2(item, 'amount', 'change');
    const after = this.safeString2(item, 'wallet_balance', 'cashBalance');
    const direction = _Precise.Precise.stringLt(amount, '0') ? 'out' : 'in';
    let before = undefined;
    if (after !== undefined && amount !== undefined) {
      const difference = direction === 'out' ? amount : _Precise.Precise.stringNeg(amount);
      before = _Precise.Precise.stringAdd(after, difference);
    }
    let timestamp = this.parse8601(this.safeString(item, 'exec_time'));
    if (timestamp === undefined) {
      timestamp = this.safeInteger(item, 'transactionTime');
    }
    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));
    const id = this.safeString(item, 'id');
    const referenceId = this.safeString(item, 'tx_id');
    return {
      'id': id,
      'currency': code,
      'account': this.safeString(item, 'wallet_id'),
      'referenceAccount': undefined,
      'referenceId': referenceId,
      'status': undefined,
      'amount': this.parseNumber(amount),
      'before': this.parseNumber(before),
      'after': this.parseNumber(after),
      'fee': this.parseNumber(this.safeString(item, 'fee')),
      'direction': direction,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'type': type,
      'info': item
    };
  }
  parseLedgerEntryType(type) {
    const types = {
      'Deposit': 'transaction',
      'Withdraw': 'transaction',
      'RealisedPNL': 'trade',
      'Commission': 'fee',
      'Refund': 'cashback',
      'Prize': 'prize',
      'ExchangeOrderWithdraw': 'transaction',
      'ExchangeOrderDeposit': 'transaction',
      // v5
      'TRANSFER_IN': 'transaction',
      'TRANSFER_OUT': 'transaction',
      'TRADE': 'trade',
      'SETTLEMENT': 'trade',
      'DELIVERY': 'trade',
      'LIQUIDATION': 'trade',
      'BONUS': 'Prize',
      'FEE_REFUND': 'cashback',
      'INTEREST': 'transaction',
      'CURRENCY_BUY': 'trade',
      'CURRENCY_SELL': 'trade'
    };
    return this.safeString(types, type, type);
  }
  async withdraw(code, amount, address, tag = undefined, params = {}) {
    /**
     * @method
     * @name bybit#withdraw
     * @description make a withdrawal
     * @see https://bybit-exchange.github.io/docs/v5/asset/withdraw
     * @param {string} code unified currency code
     * @param {float} amount the amount to withdraw
     * @param {string} address the address to withdraw to
     * @param {string|undefined} tag
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    [tag, params] = this.handleWithdrawTagAndParams(tag, params);
    await this.loadMarkets();
    this.checkAddress(address);
    const currency = this.currency(code);
    const request = {
      'coin': currency['id'],
      'amount': this.numberToString(amount),
      'address': address
    };
    if (tag !== undefined) {
      request['tag'] = tag;
    }
    const [networkCode, query] = this.handleNetworkCodeAndParams(params);
    const networkId = this.networkCodeToId(networkCode);
    if (networkId !== undefined) {
      request['chain'] = networkId.toUpperCase();
    }
    const enableUnified = await this.isUnifiedEnabled();
    const method = enableUnified[1] ? 'privatePostV5AssetWithdrawCreate' : 'privatePostAssetV3PrivateWithdrawCreate';
    const response = await this[method](this.extend(request, query));
    //
    //    {
    //         "retCode": "0",
    //         "retMsg": "success",
    //         "result": {
    //             "id": "9377266"
    //         },
    //         "retExtInfo": {},
    //         "time": "1666892894902"
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return this.parseTransaction(result, currency);
  }
  async fetchPosition(symbol, params = {}, first = true) {
    /**
     * @method
     * @name bybit#fetchPosition
     * @description fetch data on a single open contract trade position
     * @param {string} symbol unified market symbol of the market the position is held in, default is undefined
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    this.checkRequiredSymbol('fetchPosition', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    let method = undefined;
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    const isUsdcSettled = market['settle'] === 'USDC';
    request['category'] = this.safeString(this.options, 'defaultSubType', 'spot');
    if (enableUnifiedMargin || enableUnifiedAccount) {
      method = enableUnifiedAccount ? 'privateGetV5PositionList' : 'privateGetUnifiedV3PrivatePositionList';
    } else if (isUsdcSettled) {
      method = 'privatePostOptionUsdcOpenapiPrivateV1QueryPosition';
      if (market['option']) {
        request['category'] = 'OPTION';
      } else if (market['linear']) {
        request['category'] = 'PERPETUAL';
      }
    } else {
      method = 'privateGetV5PositionList';
    }
    const response = await this[method](this.extend(request, params));
    //
    // unified account
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "updateAt%3D1672279322668",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "XRPUSDT",
    //                     "leverage": "10",
    //                     "avgPrice": "0.3615",
    //                     "liqPrice": "0.0001",
    //                     "riskLimitValue": "200000",
    //                     "takeProfit": "",
    //                     "positionValue": "36.15",
    //                     "tpslMode": "Full",
    //                     "riskId": 41,
    //                     "trailingStop": "0",
    //                     "unrealisedPnl": "-1.83",
    //                     "markPrice": "0.3432",
    //                     "cumRealisedPnl": "0.48805876",
    //                     "positionMM": "0.381021",
    //                     "createdTime": "1672121182216",
    //                     "positionIdx": 0,
    //                     "positionIM": "3.634521",
    //                     "updatedTime": "1672279322668",
    //                     "side": "Buy",
    //                     "bustPrice": "",
    //                     "size": "100",
    //                     "positionStatus": "Normal",
    //                     "stopLoss": "",
    //                     "tradeMode": 0
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672280219169
    //     }
    //
    // unified margin
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "Success",
    //         "result": {
    //             "nextPageCursor": "0%3A1657711949945%2C0%3A1657711949945",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "ETHUSDT",
    //                     "leverage": "10",
    //                     "updatedTime": 1657711949945,
    //                     "side": "Buy",
    //                     "positionValue": "536.92500000",
    //                     "takeProfit": "",
    //                     "tpslMode": "Full",
    //                     "riskId": 11,
    //                     "trailingStop": "",
    //                     "entryPrice": "1073.85000000",
    //                     "unrealisedPnl": "",
    //                     "markPrice": "1080.65000000",
    //                     "size": "0.5000",
    //                     "positionStatus": "normal",
    //                     "stopLoss": "",
    //                     "cumRealisedPnl": "-0.32215500",
    //                     "positionMM": "2.97456450",
    //                     "createdTime": 1657711949928,
    //                     "positionIdx": 0,
    //                     "positionIM": "53.98243950"
    //                 }
    //             ]
    //         },
    //         "time": 1657713693182
    //     }
    //
    // contract v3
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [
    //                 {
    //                     "positionIdx": 1,
    //                     "riskId": "41",
    //                     "symbol": "XRPUSDT",
    //                     "side": "Buy",
    //                     "size": "0",
    //                     "positionValue": "0",
    //                     "entryPrice": "0",
    //                     "tradeMode": 0,
    //                     "autoAddMargin": 0,
    //                     "leverage": "10",
    //                     "positionBalance": "0",
    //                     "liqPrice": "0.0000",
    //                     "bustPrice": "0.0000",
    //                     "takeProfit": "0.0000",
    //                     "stopLoss": "0.0000",
    //                     "trailingStop": "0.0000",
    //                     "unrealisedPnl": "0",
    //                     "createdTime": "1658827444328",
    //                     "updatedTime": "1658904863412",
    //                     "tpSlMode": "Full",
    //                     "riskLimitValue": "200000",
    //                     "activePrice": "0.0000"
    //                 },
    //                 {
    //                     "positionIdx": 2,
    //                     "riskId": "41",
    //                     "symbol": "XRPUSDT",
    //                     "side": "Sell",
    //                     "size": "50",
    //                     "positionValue": "16.68",
    //                     "entryPrice": "0.3336",
    //                     "tradeMode": 0,
    //                     "autoAddMargin": 0,
    //                     "leverage": "10",
    //                     "positionBalance": "1.6790088",
    //                     "liqPrice": "12.4835",
    //                     "bustPrice": "12.4869",
    //                     "takeProfit": "0.0000",
    //                     "stopLoss": "0.0000",
    //                     "trailingStop": "0.0000",
    //                     "unrealisedPnl": "0",
    //                     "createdTime": "1658827444328",
    //                     "updatedTime": "1658904863412",
    //                     "tpSlMode": "Full",
    //                     "riskLimitValue": "200000",
    //                     "activePrice": "0.0000"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": null,
    //         "time": 1658904877942
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const positions = this.safeValue2(result, 'list', 'dataList', []);
    const timestamp = this.safeInteger(response, 'time');
    if (first) {
      this.safeValue(positions, 0);
      const position = this.parsePosition(first, market);
      return this.extend(position, {
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp)
      });
    } else {
      const parsedPositions = [];
      for (let i = 0; i < positions.length; i++) {
        const parsedPosition = this.parsePosition(positions[i], market);
        parsedPositions.push(this.extend(parsedPosition, {
          'timestamp': timestamp,
          'datetime': this.iso8601(timestamp)
        }));
      }
      return parsedPositions;
    }
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    let promises = [this.fetchPosition(symbol, {}, false)];
    const isUnified = market['linear'] && (await this.isUnifiedEnabled());
    if (isUnified) {
      promises.push(this.privateGetV5AccountInfo());
    }
    promises = await Promise.all(promises);
    const positions = promises[0];
    let accountInfo = undefined;
    if (isUnified) {
      const accountInfoResponse = promises[1];
      accountInfo = this.safeValue(accountInfoResponse, 'result');
    }
    return this.parseAccountConfiguration(positions, accountInfo);
  }
  parseAccountConfiguration(positions, accountInfo) {
    let marginMode = undefined;
    if (accountInfo !== undefined) {
      marginMode = this.safeString(accountInfo, 'marginMode');
      if (marginMode === 'ISOLATED_MARGIN') {
        marginMode = 'isolated';
      } else {
        marginMode = 'cross';
      }
    } else {
      marginMode = this.safeString(positions[0], 'marginMode');
    }
    let leverage = undefined;
    let buyLeverage = undefined;
    let sellLeverage = undefined;
    for (let i = 0; i < positions.length; i++) {
      const position = positions[i];
      const side = this.safeString(position, 'side');
      if (side === 'long') {
        buyLeverage = this.safeNumber(position, 'leverage');
      } else if (side === 'short') {
        sellLeverage = this.safeNumber(position, 'leverage');
      } else {
        const foundLeverage = this.safeNumber(position, 'leverage');
        buyLeverage = foundLeverage;
        sellLeverage = foundLeverage;
      }
    }
    leverage = buyLeverage || sellLeverage;
    const accountConfig = {
      'leverage': leverage,
      'buyLeverage': buyLeverage,
      'sellLeverage': sellLeverage,
      'positionMode': this.safeString(positions[0], 'positionMode'),
      'marginMode': marginMode,
      'markets': {}
    };
    const symbol = this.safeString(positions[0], 'symbol');
    accountConfig['markets'][symbol] = {
      'leverage': leverage,
      'buyLeverage': buyLeverage,
      'sellLeverage': sellLeverage,
      'positionMode': this.safeString(positions[0], 'positionMode'),
      'marginMode': marginMode
    };
    return accountConfig;
  }
  async fetchUnifiedPositions(symbols = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    let type = undefined;
    let settle = undefined;
    const enableUnified = await this.isUnifiedEnabled();
    if (Array.isArray(symbols)) {
      const symbolsLength = symbols.length;
      if (symbolsLength > 1) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchPositions() does not accept an array with more than one symbol');
      }
      const market = this.market(symbols[0]);
      settle = market['settle'];
    } else if (symbols !== undefined) {
      symbols = [symbols];
    }
    symbols = this.marketSymbols(symbols);
    if (symbols === undefined) {
      [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', 'USDT');
    } else {
      const first = this.safeValue(symbols, 0);
      const market = this.market(first);
      settle = market['settle'];
    }
    // market undefined
    [type, params] = this.handleMarketTypeAndParams('fetchPositions', undefined, params);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchPositions', undefined, params, 'linear');
    request['category'] = subType;
    if (type === 'option') {
      request['category'] = 'option';
    }
    if (enableUnified[1] && subType !== 'inverse') {
      request['settleCoin'] = settle;
    }
    const method = enableUnified[1] ? 'privateGetV5PositionList' : 'privateGetUnifiedV3PrivatePositionList';
    let finalParams = this.extend(request, params);
    // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
    if (subType === 'inverse') {
      finalParams = this.omit(finalParams, ['settleCoin']);
    }
    finalParams['limit'] = 200;
    const response = await this[method](finalParams);
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "Success",
    //         "result": {
    //             "nextPageCursor": "0%3A1657711949945%2C0%3A1657711949945",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "ETHUSDT",
    //                     "leverage": "10",
    //                     "updatedTime": 1657711949945,
    //                     "side": "Buy",
    //                     "positionValue": "536.92500000",
    //                     "takeProfit": "",
    //                     "tpslMode": "Full",
    //                     "riskId": 11,
    //                     "trailingStop": "",
    //                     "entryPrice": "1073.85000000",
    //                     "unrealisedPnl": "",
    //                     "markPrice": "1080.65000000",
    //                     "size": "0.5000",
    //                     "positionStatus": "normal",
    //                     "stopLoss": "",
    //                     "cumRealisedPnl": "-0.32215500",
    //                     "positionMM": "2.97456450",
    //                     "createdTime": 1657711949928,
    //                     "positionIdx": 0,
    //                     "positionIM": "53.98243950"
    //                 }
    //             ]
    //         },
    //         "time": 1657713693182
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const positions = this.safeValue(result, 'list', []);
    const results = [];
    for (let i = 0; i < positions.length; i++) {
      let rawPosition = positions[i];
      if ('data' in rawPosition && 'is_valid' in rawPosition) {
        // futures only
        rawPosition = this.safeValue(rawPosition, 'data');
      }
      results.push(this.parsePosition(rawPosition));
    }
    return this.filterByArray(results, 'symbol', symbols, false);
  }
  async fetchUSDCPositions(symbols = undefined, params = {}) {
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const request = {};
    let market = undefined;
    let type = undefined;
    if (Array.isArray(symbols)) {
      const length = symbols.length;
      if (length !== 1) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchUSDCPositions() takes an array with exactly one symbol');
      }
      const symbol = this.safeString(symbols, 0);
      market = this.market(symbol);
      request['symbol'] = market['id'];
    } else if (symbols !== undefined) {
      market = this.market(symbols);
      request['symbol'] = market['id'];
    }
    [type, params] = this.handleMarketTypeAndParams('fetchUSDCPositions', market, params);
    request['category'] = type === 'option' ? 'OPTION' : 'PERPETUAL';
    const response = await this.privatePostOptionUsdcOpenapiPrivateV1QueryPosition(this.extend(request, params));
    //
    //     {
    //         "result": {
    //             "cursor": "BTC-31DEC21-24000-P%3A1640834421431%2CBTC-31DEC21-24000-P%3A1640834421431",
    //             "resultTotalSize": 1,
    //             "dataList": [
    //                 {
    //                 "symbol": "BTC-31DEC21-24000-P",
    //                 "leverage": "",
    //                 "occClosingFee": "",
    //                 "liqPrice": "",
    //                 "positionValue": "",
    //                 "takeProfit": "",
    //                 "riskId": "",
    //                 "trailingStop": "",
    //                 "unrealisedPnl": "",
    //                 "createdAt": "1640834421431",
    //                 "markPrice": "0.00",
    //                 "cumRealisedPnl": "",
    //                 "positionMM": "359.5271",
    //                 "positionIM": "467.0633",
    //                 "updatedAt": "1640834421431",
    //                 "tpSLMode": "",
    //                 "side": "Sell",
    //                 "bustPrice": "",
    //                 "deleverageIndicator": 0,
    //                 "entryPrice": "1.4",
    //                 "size": "-0.100",
    //                 "sessionRPL": "",
    //                 "positionStatus": "",
    //                 "sessionUPL": "",
    //                 "stopLoss": "",
    //                 "orderMargin": "",
    //                 "sessionAvgPrice": "1.5"
    //                 }
    //             ]
    //         },
    //         "retCode": 0,
    //         "retMsg": "Success."
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const positions = this.safeValue(result, 'dataList', []);
    const results = [];
    for (let i = 0; i < positions.length; i++) {
      let rawPosition = positions[i];
      if ('data' in rawPosition && 'is_valid' in rawPosition) {
        // futures only
        rawPosition = this.safeValue(rawPosition, 'data');
      }
      results.push(this.parsePosition(rawPosition, market));
    }
    return this.filterByArray(results, 'symbol', symbols, false);
  }
  async fetchDerivativesPositions(symbols = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    let settle = undefined;
    if (Array.isArray(symbols)) {
      const symbolsLength = symbols.length;
      if (symbolsLength > 1) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchPositions() does not accept an array with more than one symbol');
      }
      if (symbolsLength === 1) {
        market = this.market(symbols[0]);
        settle = market['settle'];
        request['symbol'] = market['id'];
      }
    }
    [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', settle);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('fetchPositions', market, params, 'linear');
    request['category'] = subType;
    if (settle !== undefined && subType !== 'inverse') {
      request['settleCoin'] = settle;
    }
    // forcefully exclude settleCoin for inverse since it can come from ccxt.pro
    let finalParams = this.extend(request, params);
    if (subType === 'inverse') {
      finalParams = this.omit(finalParams, ['settleCoin']);
    }
    finalParams['limit'] = 200;
    const response = await this.privateGetV5PositionList(finalParams);
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "nextPageCursor": "updateAt%3D1672279322668",
    //             "category": "linear",
    //             "list": [
    //                 {
    //                     "symbol": "XRPUSDT",
    //                     "leverage": "10",
    //                     "avgPrice": "0.3615",
    //                     "liqPrice": "0.0001",
    //                     "riskLimitValue": "200000",
    //                     "takeProfit": "",
    //                     "positionValue": "36.15",
    //                     "tpslMode": "Full",
    //                     "riskId": 41,
    //                     "trailingStop": "0",
    //                     "unrealisedPnl": "-1.83",
    //                     "markPrice": "0.3432",
    //                     "cumRealisedPnl": "0.48805876",
    //                     "positionMM": "0.381021",
    //                     "createdTime": "1672121182216",
    //                     "positionIdx": 0,
    //                     "positionIM": "3.634521",
    //                     "updatedTime": "1672279322668",
    //                     "side": "Buy",
    //                     "bustPrice": "",
    //                     "size": "100",
    //                     "positionStatus": "Normal",
    //                     "stopLoss": "",
    //                     "tradeMode": 0
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672280219169
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const positions = this.safeValue(result, 'list', []);
    return this.parsePositions(positions, symbols, params);
  }
  async fetchAllPositions(params = {}) {
    /**
     * @method
     * @name bybit#fetchAllPositions
     * @description fetch all open positions for all currencies
     */
    const [subType] = this.handleSubTypeAndParams('fetchAllPositions', undefined, params);
    const linearSettleCoins = ['USDT'];
    let promises = [];
    if (subType !== 'inverse') {
      for (let i = 0; i < linearSettleCoins.length; i++) {
        promises.push(this.fetchPositions(undefined, {
          'subType': 'linear',
          'settleCoin': linearSettleCoins[i]
        }));
      }
    } else {
      promises.push(this.fetchPositions(undefined, {
        'subType': 'inverse',
        'settleCoin': 'BTC'
      }));
    }
    promises = await Promise.all(promises);
    let result = [];
    for (let i = 0; i < promises.length; i++) {
      result = this.arrayConcat(result, promises[i]);
    }
    return result;
  }
  async fetchPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchPositions
     * @description fetch all open positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    if (Array.isArray(symbols)) {
      const symbolsLength = symbols.length;
      if (symbolsLength > 1) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchPositions() does not accept an array with more than one symbol');
      }
    } else if (symbols !== undefined) {
      symbols = [symbols];
    }
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    let settle = this.safeString(params, 'settleCoin');
    if (settle === undefined) {
      [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', settle);
    }
    const isUsdcSettled = settle === 'USDC';
    const [subType, query] = this.handleSubTypeAndParams('fetchPositions', undefined, params);
    const isInverse = subType === 'inverse';
    const isLinearSettle = isUsdcSettled || settle === 'USDT';
    if (isInverse && isLinearSettle) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchPositions with inverse subType requires settle to not be USDT or USDC');
    }
    if ((enableUnifiedMargin || enableUnifiedAccount) && !isInverse) {
      return await this.fetchUnifiedPositions(symbols, query);
    } else if (isUsdcSettled) {
      return await this.fetchUSDCPositions(symbols, query);
    } else {
      return await this.fetchDerivativesPositions(symbols, query);
    }
  }
  parsePosition(position, market = undefined) {
    //
    // linear swap
    //
    //     {
    //         "positionIdx": 0,
    //         "riskId": "11",
    //         "symbol": "ETHUSDT",
    //         "side": "Buy",
    //         "size": "0.10",
    //         "positionValue": "119.845",
    //         "entryPrice": "1198.45",
    //         "tradeMode": 1,
    //         "autoAddMargin": 0,
    //         "leverage": "4.2",
    //         "positionBalance": "28.58931118",
    //         "liqPrice": "919.10",
    //         "bustPrice": "913.15",
    //         "takeProfit": "0.00",
    //         "stopLoss": "0.00",
    //         "trailingStop": "0.00",
    //         "unrealisedPnl": "0.083",
    //         "createdTime": "1669097244192",
    //         "updatedTime": "1669413126190",
    //         "tpSlMode": "Full",
    //         "riskLimitValue": "900000",
    //         "activePrice": "0.00"
    //     }
    //
    // usdc
    //    {
    //       "symbol":"BTCPERP",
    //       "leverage":"1.00",
    //       "occClosingFee":"0.0000",
    //       "liqPrice":"",
    //       "positionValue":"30.8100",
    //       "takeProfit":"0.0",
    //       "riskId":"10001",
    //       "trailingStop":"0.0000",
    //       "unrealisedPnl":"0.0000",
    //       "createdAt":"1652451795305",
    //       "markPrice":"30809.41",
    //       "cumRealisedPnl":"0.0000",
    //       "positionMM":"0.1541",
    //       "positionIM":"30.8100",
    //       "updatedAt":"1652451795305",
    //       "tpSLMode":"UNKNOWN",
    //       "side":"Buy",
    //       "bustPrice":"",
    //       "deleverageIndicator":"0",
    //       "entryPrice":"30810.0",
    //       "size":"0.001",
    //       "sessionRPL":"0.0000",
    //       "positionStatus":"NORMAL",
    //       "sessionUPL":"-0.0006",
    //       "stopLoss":"0.0",
    //       "orderMargin":"0.0000",
    //       "sessionAvgPrice":"30810.0"
    //    }
    //
    // unified margin
    //
    //     {
    //         "symbol": "ETHUSDT",
    //         "leverage": "10",
    //         "updatedTime": 1657711949945,
    //         "side": "Buy",
    //         "positionValue": "536.92500000",
    //         "takeProfit": "",
    //         "tpslMode": "Full",
    //         "riskId": 11,
    //         "trailingStop": "",
    //         "entryPrice": "1073.85000000",
    //         "unrealisedPnl": "",
    //         "markPrice": "1080.65000000",
    //         "size": "0.5000",
    //         "positionStatus": "normal",
    //         "stopLoss": "",
    //         "cumRealisedPnl": "-0.32215500",
    //         "positionMM": "2.97456450",
    //         "createdTime": 1657711949928,
    //         "positionIdx": 0,
    //         "positionIM": "53.98243950"
    //     }
    //
    // unified account
    //
    //     {
    //         "symbol": "XRPUSDT",
    //         "leverage": "10",
    //         "avgPrice": "0.3615",
    //         "liqPrice": "0.0001",
    //         "riskLimitValue": "200000",
    //         "takeProfit": "",
    //         "positionValue": "36.15",
    //         "tpslMode": "Full",
    //         "riskId": 41,
    //         "trailingStop": "0",
    //         "unrealisedPnl": "-1.83",
    //         "markPrice": "0.3432",
    //         "cumRealisedPnl": "0.48805876",
    //         "positionMM": "0.381021",
    //         "createdTime": "1672121182216",
    //         "positionIdx": 0,
    //         "positionIM": "3.634521",
    //         "updatedTime": "1672279322668",
    //         "side": "Buy",
    //         "bustPrice": "",
    //         "size": "100",
    //         "positionStatus": "Normal",
    //         "stopLoss": "",
    //         "tradeMode": 0
    //     }
    //
    const contract = this.safeString(position, 'symbol');
    market = this.safeMarket(contract, market, undefined, 'contract');
    let size = _Precise.Precise.stringAbs(this.safeString(position, 'size'));
    let side = this.safeString(position, 'side');
    const positionIdx = this.safeString(position, 'positionIdx');
    if ((!side || side === '' || side === 'None') && positionIdx !== '0') {
      if (positionIdx === '1') {
        side = 'Buy';
      } else if (positionIdx === '2') {
        side = 'Sell';
      }
    }
    if (side !== undefined) {
      if (side === 'Buy') {
        side = 'long';
      } else if (side === 'Sell') {
        side = 'short';
        size = _Precise.Precise.stringMul(size, '-1');
      } else {
        side = undefined;
      }
    }
    const notional = this.safeString(position, 'positionValue');
    const realizedPnl = this.omitZero(this.safeString(position, 'cumRealisedPnl'));
    const unrealisedPnl = this.omitZero(this.safeString(position, 'unrealisedPnl'));
    let initialMarginString = this.safeString(position, 'positionIM');
    let maintenanceMarginString = this.safeString(position, 'positionMM');
    let timestamp = this.parse8601(this.safeString2(position, 'updated_at', 'updated_time'));
    if (timestamp === undefined) {
      timestamp = this.safeInteger2(position, 'updatedAt', 'updatedTime');
    }
    // default to cross of USDC margined positions
    const tradeMode = this.safeInteger(position, 'tradeMode', 0);
    const marginMode = tradeMode ? 'isolated' : 'cross';
    let collateralString = this.safeString(position, 'positionBalance');
    const entryPrice = this.omitZero(this.safeString2(position, 'entryPrice', 'avgPrice'));
    const liquidationPrice = this.omitZero(this.safeString(position, 'liqPrice'));
    const leverage = this.safeString(position, 'leverage');
    if (liquidationPrice !== undefined) {
      if (market['settle'] === 'USDC') {
        //  (Entry price - Liq price) * Contracts + Maintenance Margin + (unrealised pnl) = Collateral
        const difference = _Precise.Precise.stringAbs(_Precise.Precise.stringSub(entryPrice, liquidationPrice));
        collateralString = _Precise.Precise.stringAdd(_Precise.Precise.stringAdd(_Precise.Precise.stringMul(difference, size), maintenanceMarginString), unrealisedPnl);
      } else {
        const bustPrice = this.safeString(position, 'bustPrice');
        if (market['linear']) {
          // derived from the following formulas
          //  (Entry price - Bust price) * Contracts = Collateral
          //  (Entry price - Liq price) * Contracts = Collateral - Maintenance Margin
          // Maintenance Margin = (Bust price - Liq price) x Contracts
          const maintenanceMarginPriceDifference = _Precise.Precise.stringAbs(_Precise.Precise.stringSub(liquidationPrice, bustPrice));
          maintenanceMarginString = _Precise.Precise.stringMul(maintenanceMarginPriceDifference, size);
          // Initial Margin = Contracts x Entry Price / Leverage
          if (entryPrice !== undefined) {
            initialMarginString = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(size, entryPrice), leverage);
          }
        } else {
          // Contracts * (1 / Entry price - 1 / Bust price) = Collateral
          // Contracts * (1 / Entry price - 1 / Liq price) = Collateral - Maintenance Margin
          // Maintenance Margin = Contracts * (1 / Liq price - 1 / Bust price)
          // Maintenance Margin = Contracts * (Bust price - Liq price) / (Liq price x Bust price)
          const difference = _Precise.Precise.stringAbs(_Precise.Precise.stringSub(bustPrice, liquidationPrice));
          const multiply = _Precise.Precise.stringMul(bustPrice, liquidationPrice);
          maintenanceMarginString = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(size, difference), multiply);
          // Initial Margin = Leverage x Contracts / EntryPrice
          if (entryPrice !== undefined) {
            initialMarginString = _Precise.Precise.stringDiv(size, _Precise.Precise.stringMul(entryPrice, leverage));
          }
        }
      }
    }
    const maintenanceMarginPercentage = _Precise.Precise.stringDiv(maintenanceMarginString, notional);
    const percentage = _Precise.Precise.stringMul(_Precise.Precise.stringDiv(unrealisedPnl, initialMarginString), '100');
    const marginRatio = _Precise.Precise.stringDiv(maintenanceMarginString, collateralString, 4);
    let mode = 'oneway';
    let id = market['symbol'];
    if (positionIdx !== '0') {
      mode = 'hedged';
      if (side !== undefined) {
        id = id + ':' + side;
      }
    }
    let status = true;
    let active = true;
    const positionStatus = this.safeString(position, 'positionStatus');
    if (positionStatus !== 'Normal' || size === '0') {
      status = false;
      active = false;
    }
    return {
      'info': position,
      'id': id,
      'mode': mode,
      'symbol': market['symbol'],
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'initialMargin': this.parseNumber(initialMarginString),
      'initialMarginPercentage': this.parseNumber(_Precise.Precise.stringDiv(initialMarginString, notional)),
      'maintenanceMargin': this.parseNumber(maintenanceMarginString),
      'maintenanceMarginPercentage': this.parseNumber(maintenanceMarginPercentage),
      'entryPrice': this.parseNumber(entryPrice),
      'notional': this.parseNumber(notional),
      'leverage': this.parseNumber(leverage),
      'unrealizedPnl': this.parseNumber(unrealisedPnl),
      'pnl': this.parseNumber(realizedPnl),
      'contracts': this.parseNumber(size),
      'contractSize': this.safeNumber(market, 'contractSize'),
      'marginRatio': this.parseNumber(marginRatio),
      'liquidationPrice': this.parseNumber(liquidationPrice),
      'markPrice': this.safeNumber(position, 'markPrice'),
      'collateral': this.parseNumber(collateralString),
      'marginMode': marginMode,
      'isolated': marginMode === 'isolated',
      'hedged': mode === 'hedged',
      'price': this.parseNumber(entryPrice),
      'status': status,
      'positionMode': mode,
      'active': active,
      'side': side,
      'percentage': this.parseNumber(percentage)
    };
  }
  parseAccountConfig(position) {
    // {
    //     "info": {
    //     "symbol": "BTCUSDT",
    //         "leverage": "100",
    //         "autoAddMargin": "0",
    //         "avgPrice": "30675.7",
    //         "liqPrice": "56522.58784",
    //         "riskLimitValue": "2000000",
    //         "takeProfit": "",
    //         "positionValue": "30.6757",
    //         "tpslMode": "Full",
    //         "riskId": "1",
    //         "trailingStop": "0",
    //         "unrealisedPnl": "0.6903",
    //         "markPrice": "29985.4",
    //         "adlRankIndicator": "2",
    //         "cumRealisedPnl": "-0.01188196",
    //         "positionMM": "0.17196798",
    //         "createdTime": "1687265385857",
    //         "positionIdx": "0",
    //         "positionIM": "0.32534648",
    //         "updatedTime": "1687968000055",
    //         "side": "Sell",
    //         "bustPrice": "",
    //         "positionBalance": "0",
    //         "size": "0.001",
    //         "positionStatus": "Normal",
    //         "stopLoss": "",
    //         "tradeMode": "0"
    // },
    //     "id": "BTC/USDT:USDT:BTC/USDT:USDT",
    //     "mode": "oneway",
    //     "symbol": "BTC/USDT:USDT",
    //     "timestamp": None,
    //     "datetime": None,
    //     "initialMargin": -0.306757,
    //     "initialMarginPercentage": -0.01,
    //     "maintenanceMargin": None,
    //     "maintenanceMarginPercentage": None,
    //     "entryPrice": 30675.7,
    //     "notional": 30.6757,
    //     "leverage": 100.0,
    //     "unrealizedPnl": 0.6903,
    //     "pnl": "-0.011881960.6903",
    //     "contracts": -0.001,
    //     "contractSize": 1.0,
    //     "marginRatio": None,
    //     "liquidationPrice": 56522.58784,
    //     "markPrice": 29985.4,
    //     "collateral": 0.0,
    //     "marginMode": "cross",
    //     "isolated": False,
    //     "hedged": False,
    //     "price": 30675.7,
    //     "status": True,
    //     "tradeMode": "oneway",
    //     "active": True,
    //     "side": "short",
    //     "percentage": -225.0315396225677
    // }
    return position;
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    await this.loadMarkets();
    const values = await this.isUnifiedEnabled();
    const isUnifiedAccount = this.safeValue(values, 1);
    const market = this.market(symbol);
    if (isUnifiedAccount && market['linear']) {
      return await this.setUnifiedMarginMode(marginMode, symbol, params);
    }
    return await this.setDerivativesMarginMode(marginMode, symbol, params);
  }
  async setUnifiedMarginMode(marginMode, symbol = undefined, params = {}) {
    await this.loadMarkets();
    let formattedMarginMode = marginMode;
    if (marginMode === 'isolated') {
      formattedMarginMode = 'ISOLATED_MARGIN';
    } else if (marginMode === 'cross') {
      formattedMarginMode = 'REGULAR_MARGIN';
    } else {
      throw new _errors.BadRequest(this.id + ' setMarginMode() does not support marginMode ' + marginMode + '');
    }
    const request = {
      'setMarginMode': formattedMarginMode
    };
    const response = await this.privatePostV5AccountSetMarginMode(this.extend(request, params));
    return response;
  }
  async setDerivativesMarginMode(marginMode, symbol = undefined, params = {}) {
    this.checkRequiredSymbol('setMarginMode', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    if (market['settle'] === 'USDC') {
      throw new _errors.NotSupported(this.id + ' setMarginMode() does not support market ' + symbol + '');
    }
    marginMode = marginMode.toUpperCase();
    if (marginMode !== 'ISOLATED' && marginMode !== 'CROSS') {
      throw new _errors.BadRequest(this.id + ' setMarginMode() marginMode must be either isolated or cross');
    }
    const leverage = this.safeString(params, 'leverage');
    let sellLeverage = undefined;
    let buyLeverage = undefined;
    if (leverage === undefined) {
      sellLeverage = this.safeString2(params, 'sell_leverage', 'sellLeverage');
      buyLeverage = this.safeString2(params, 'buy_leverage', 'buyLeverage');
      if (sellLeverage === undefined && buyLeverage === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' setMarginMode() requires a leverage parameter or sell_leverage and buy_leverage parameters');
      }
      if (buyLeverage === undefined) {
        buyLeverage = sellLeverage;
      }
      if (sellLeverage === undefined) {
        sellLeverage = buyLeverage;
      }
      params = this.omit(params, ['buy_leverage', 'sell_leverage', 'sellLeverage', 'buyLeverage']);
    } else {
      params = this.omit(params, 'leverage');
      sellLeverage = leverage;
      buyLeverage = leverage;
    }
    const tradeMode = marginMode === 'ISOLATED' ? 1 : 0;
    const request = {
      'symbol': market['id'],
      // TEALSTREET
      'category': market['linear'] ? 'linear' : 'inverse',
      // TEALSTREET
      'tradeMode': tradeMode,
      'buyLeverage': buyLeverage,
      'sellLeverage': sellLeverage
    };
    // TEALSTREET
    const args = this.extend(request, params);
    args['buyLeverage'] = this.numberToString(args['buyLeverage']);
    args['sellLeverage'] = this.numberToString(args['sellLeverage']);
    // TEALSTREET
    const response = await this.privatePostContractV3PrivatePositionSwitchIsolated(args);
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {},
    //         "retExtInfo": null,
    //         "time": 1658908532580
    //     }
    //
    return response;
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bybit#setLeverage
     * @description set the level of leverage for a market
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} response from the exchange
     */
    this.checkRequiredSymbol('setLeverage', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
    // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
    const isUsdcSettled = market['settle'] === 'USDC';
    const [enableUnifiedMargin, enableUnifiedAccount] = await this.isUnifiedEnabled();
    // engage in leverage setting
    // we reuse the code here instead of having two methods
    leverage = this.numberToString(leverage);
    const buyLeverage = this.safeString(params, 'buyLeverage', leverage);
    const sellLeverage = this.safeString(params, 'sellLeverage', leverage);
    let method = undefined;
    let request = undefined;
    if (enableUnifiedMargin || enableUnifiedAccount || !isUsdcSettled) {
      request = {
        'symbol': market['id'],
        'buyLeverage': buyLeverage,
        'sellLeverage': sellLeverage
      };
      if (enableUnifiedAccount) {
        if (market['linear']) {
          request['category'] = 'linear';
        } else {
          request['category'] = 'inverse';
        }
        method = 'privatePostV5PositionSetLeverage';
      } else if (enableUnifiedMargin) {
        if (market['option']) {
          request['category'] = 'option';
        } else if (market['linear']) {
          request['category'] = 'linear';
        } else {
          request['category'] = 'inverse';
        }
        method = 'privatePostUnifiedV3PrivatePositionSetLeverage';
      } else {
        method = 'privatePostContractV3PrivatePositionSetLeverage';
      }
    } else {
      request = {
        'symbol': market['id'],
        'leverage': leverage
      };
      method = 'privatePostPerpetualUsdcOpenapiPrivateV1PositionLeverageSave';
    }
    // TEALSTREET
    params = {
      'buyLeverage': buyLeverage || request['buyLeverage'],
      'sellLeverage': sellLeverage || request['sellLeverage']
    };
    // TEALSTREET
    return await this[method](this.extend(request, params));
  }
  async setPositionMode(hedged, symbol = undefined, params = {}) {
    await this.loadMarkets();
    let mode = undefined;
    if (hedged) {
      mode = 3;
    } else {
      mode = 0;
    }
    const request = {
      'mode': mode
    };
    if (symbol === undefined) {
      request['coin'] = 'USDT';
    } else {
      const market = this.market(symbol);
      // TEALSTREET
      request['category'] = market['linear'] ? 'linear' : 'inverse';
      // TEALSTREET
      request['symbol'] = market['id'];
    }
    //
    //     {
    //         "ret_code": 0,
    //         "ret_msg": "ok",
    //         "ext_code": "",
    //         "result": null,
    //         "ext_info": null,
    //         "time_now": "1577477968.175013",
    //         "rate_limit_status": 74,
    //         "rate_limit_reset_ms": 1577477968183,
    //         "rate_limit": 75
    //     }
    //
    return await this.privatePostV5PositionSwitchMode(this.extend(request, params));
  }
  async fetchDerivativesOpenInterestHistory(symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    let market = this.market(symbol);
    const subType = market['linear'] ? 'linear' : 'inverse';
    const category = this.safeString(params, 'category', subType);
    const intervals = this.safeValue(this.options, 'intervals');
    const interval = this.safeString(intervals, timeframe); // 5min,15min,30min,1h,4h,1d
    if (interval === undefined) {
      throw new _errors.BadRequest(this.id + ' fetchOpenInterestHistory() cannot use the ' + timeframe + ' timeframe');
    }
    const request = {
      'symbol': market['id'],
      'intervalTime': interval,
      'category': category
    };
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.publicGetV5MarketOpenInterest(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "symbol": "BTCUSD",
    //             "category": "inverse",
    //             "list": [
    //                 {
    //                     "openInterest": "461134384.00000000",
    //                     "timestamp": "1669571400000"
    //                 },
    //                 {
    //                     "openInterest": "461134292.00000000",
    //                     "timestamp": "1669571100000"
    //                 }
    //             ],
    //             "nextPageCursor": ""
    //         },
    //         "retExtInfo": {},
    //         "time": 1672053548579
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const id = this.safeString(result, 'symbol');
    market = this.safeMarket(id, market, undefined, 'contract');
    const data = this.safeValue(result, 'list', []);
    return this.parseOpenInterests(data, market, since, limit);
  }
  async fetchOpenInterest(symbol, params = {}) {
    /**
     * @method
     * @name bybit#fetchOpenInterest
     * @description Retrieves the open interest of a derivative trading pair
     * @see https://bybit-exchange.github.io/docs/v5/market/open-interest
     * @param {string} symbol Unified CCXT market symbol
     * @param {object} params exchange specific parameters
     * @param {string|undefined} params.interval 5m, 15m, 30m, 1h, 4h, 1d
     * @param {string|undefined} params.category "linear" or "inverse"
     * @returns {object} an open interest structure{@link https://docs.ccxt.com/#/?id=interest-history-structure}
     */
    await this.loadMarkets();
    let market = this.market(symbol);
    if (!market['contract']) {
      throw new _errors.BadRequest(this.id + ' fetchOpenInterest() supports contract markets only');
    }
    const timeframe = this.safeString(params, 'interval', '1h');
    const intervals = this.safeValue(this.options, 'intervals');
    const interval = this.safeString(intervals, timeframe); // 5min,15min,30min,1h,4h,1d
    if (interval === undefined) {
      throw new _errors.BadRequest(this.id + ' fetchOpenInterest() cannot use the ' + timeframe + ' timeframe');
    }
    const subType = market['linear'] ? 'linear' : 'inverse';
    const category = this.safeString(params, 'category', subType);
    const request = {
      'symbol': market['id'],
      'intervalTime': interval,
      'category': category
    };
    const response = await this.publicGetV5MarketOpenInterest(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "symbol": "BTCUSD",
    //             "category": "inverse",
    //             "list": [
    //                 {
    //                     "openInterest": "461134384.00000000",
    //                     "timestamp": "1669571400000"
    //                 },
    //                 {
    //                     "openInterest": "461134292.00000000",
    //                     "timestamp": "1669571100000"
    //                 }
    //             ],
    //             "nextPageCursor": ""
    //         },
    //         "retExtInfo": {},
    //         "time": 1672053548579
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const id = this.safeString(result, 'symbol');
    market = this.safeMarket(id, market, undefined, 'contract');
    const data = this.safeValue(result, 'list', []);
    return this.parseOpenInterest(data[0], market);
  }
  async fetchOpenInterestHistory(symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchOpenInterestHistory
     * @description Gets the total amount of unsettled contracts. In other words, the total number of contracts held in open positions
     * @see https://bybit-exchange.github.io/docs/v5/market/open-interest
     * @param {string} symbol Unified market symbol
     * @param {string} timeframe "5m", 15m, 30m, 1h, 4h, 1d
     * @param {int} since Not used by Bybit
     * @param {int} limit The number of open interest structures to return. Max 200, default 50
     * @param {object} params Exchange specific parameters
     * @returns An array of open interest structures
     */
    if (timeframe === '1m') {
      throw new _errors.BadRequest(this.id + 'fetchOpenInterestHistory cannot use the 1m timeframe');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    if (market['spot'] || market['option']) {
      throw new _errors.BadRequest(this.id + ' fetchOpenInterestHistory() symbol does not support market ' + symbol);
    }
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    return await this.fetchDerivativesOpenInterestHistory(symbol, timeframe, since, limit, params);
  }
  parseOpenInterest(interest, market = undefined) {
    //
    //    {
    //        "openInterest": 64757.62400000,
    //        "timestamp": 1665784800000,
    //    }
    //
    const timestamp = this.safeInteger(interest, 'timestamp');
    const value = this.safeNumber2(interest, 'open_interest', 'openInterest');
    return {
      'symbol': market['symbol'],
      'openInterestAmount': undefined,
      'openInterestValue': value,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': interest
    };
  }
  async fetchBorrowRate(code, params = {}) {
    /**
     * @method
     * @name bybit#fetchBorrowRate
     * @description fetch the rate of interest to borrow a currency for margin trading
     * @see https://bybit-exchange.github.io/docs/spot/v3/#t-queryinterestquota
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'coin': currency['id']
    };
    const response = await this.privateGetSpotV3PrivateCrossMarginLoanInfo(this.extend(request, params));
    //
    //    {
    //         "retCode": "0",
    //         "retMsg": "success",
    //         "result": {
    //             "coin": "USDT",
    //             "interestRate": "0.000107000000",
    //             "loanAbleAmount": "",
    //             "maxLoanAmount": "79999.999"
    //         },
    //         "retExtInfo": null,
    //         "time": "1666734490778"
    //     }
    //
    const data = this.safeValue(response, 'result', {});
    return this.parseBorrowRate(data, currency);
  }
  parseBorrowRate(info, currency = undefined) {
    //
    //     {
    //         "coin": "USDT",
    //         "interestRate": "0.000107000000",
    //         "loanAbleAmount": "",
    //         "maxLoanAmount": "79999.999"
    //     }
    //
    const timestamp = this.milliseconds();
    const currencyId = this.safeString(info, 'coin');
    return {
      'currency': this.safeCurrencyCode(currencyId, currency),
      'rate': this.safeNumber(info, 'interestRate'),
      'period': 86400000,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': info
    };
  }
  async fetchBorrowInterest(code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchBorrowInterest
     * @description fetch the interest owed by the user for borrowing currency for margin trading
     * @param {string|undefined} code unified currency code
     * @param {string|undefined} symbol unified market symbol when fetch interest in isolated markets
     * @param {number|undefined} since the earliest time in ms to fetch borrrow interest for
     * @param {number|undefined} limit the maximum number of structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure}
     */
    await this.loadMarkets();
    const request = {};
    const response = await this.privateGetSpotV3PrivateCrossMarginAccount(this.extend(request, params));
    //
    //     {
    //         "ret_code": 0,
    //         "ret_msg": "",
    //         "ext_code": null,
    //         "ext_info": null,
    //         "result": {
    //             "status": "1",
    //             "riskRate": "0",
    //             "acctBalanceSum": "0.000486213817680857",
    //             "debtBalanceSum": "0",
    //             "loanAccountList": [
    //                 {
    //                     "tokenId": "BTC",
    //                     "total": "0.00048621",
    //                     "locked": "0",
    //                     "loan": "0",
    //                     "interest": "0",
    //                     "free": "0.00048621"
    //                 },
    //                 ...
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(response, 'result', {});
    const rows = this.safeValue(data, 'loanAccountList', []);
    const interest = this.parseBorrowInterests(rows, undefined);
    return this.filterByCurrencySinceLimit(interest, code, since, limit);
  }
  parseBorrowInterest(info, market = undefined) {
    //
    //     {
    //         "tokenId": "BTC",
    //         "total": "0.00048621",
    //         "locked": "0",
    //         "loan": "0",
    //         "interest": "0",
    //         "free": "0.00048621"
    //     },
    //
    return {
      'symbol': undefined,
      'marginMode': 'cross',
      'currency': this.safeCurrencyCode(this.safeString(info, 'tokenId')),
      'interest': this.safeNumber(info, 'interest'),
      'interestRate': undefined,
      'amountBorrowed': this.safeNumber(info, 'loan'),
      'timestamp': undefined,
      'datetime': undefined,
      'info': info
    };
  }
  async transfer(code, amount, fromAccount, toAccount, params = {}) {
    /**
     * @method
     * @name bybit#transfer
     * @description transfer currency internally between wallets on the same account
     * @see https://bybit-exchange.github.io/docs/account_asset/#t-createinternaltransfer
     * @see https://bybit-exchange.github.io/docs/account_asset/v3/#t-createinternaltransfer
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount account to transfer from
     * @param {string} toAccount account to transfer to
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @param {string} params.transferId UUID, which is unique across the platform
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    const transferId = this.safeString(params, 'transferId', this.uuid());
    const accountTypes = this.safeValue(this.options, 'accountsByType', {});
    const fromId = this.safeString(accountTypes, fromAccount, fromAccount);
    const toId = this.safeString(accountTypes, toAccount, toAccount);
    const currency = this.currency(code);
    const amountToPrecision = this.currencyToPrecision(code, amount);
    let method = undefined;
    [method, params] = this.handleOptionAndParams(params, 'transfer', 'method', 'privatePostAssetV1PrivateTransfer'); // v1 preferred atm, because it supports funding
    let request = undefined;
    if (method === 'privatePostAssetV3PrivateTransferInterTransfer' || method === 'privatePostV5AssetTransferInterTransfer') {
      request = {
        'transferId': transferId,
        'fromAccountType': fromId,
        'toAccountType': toId,
        'coin': currency['id'],
        'amount': amountToPrecision
      };
    } else {
      request = {
        'transfer_id': transferId,
        'from_account_type': fromId,
        'to_account_type': toId,
        'coin': currency['id'],
        'amount': amountToPrecision
      };
    }
    const response = await this[method](this.extend(request, params));
    //
    // {
    //     "retCode": 0,
    //     "retMsg": "success",
    //     "result": {
    //         "transferId": "4244af44-f3b0-4cf6-a743-b56560e987bc" // transfer_id in v1
    //     },
    //     "retExtInfo": {},
    //     "time": 1666875857205
    // }
    //
    const timestamp = this.safeInteger2(response, 'time', 'time_now');
    const transfer = this.safeValue(response, 'result', {});
    const statusRaw = this.safeStringN(response, ['retCode', 'retMsg', 'ret_code', 'ret_msg']);
    const status = this.parseTransferStatus(statusRaw);
    return this.extend(this.parseTransfer(transfer, currency), {
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'amount': this.parseNumber(amountToPrecision),
      'fromAccount': fromAccount,
      'toAccount': toAccount,
      'status': status
    });
  }
  async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#fetchTransfers
     * @description fetch a history of internal transfers made on an account
     * @see https://bybit-exchange.github.io/docs/v5/asset/inter-transfer-list
     * @param {string|undefined} code unified currency code of the currency transferred
     * @param {int|undefined} since the earliest time in ms to fetch transfers for
     * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    let currency = undefined;
    const request = {};
    if (code !== undefined) {
      currency = this.safeCurrencyCode(code);
      request['coin'] = currency;
    }
    if (since !== undefined) {
      request['startTime'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetV5AssetTransferQueryInterTransferList(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "list": [
    //                 {
    //                     "transferId": "selfTransfer_a1091cc7-9364-4b74-8de1-18f02c6f2d5c",
    //                     "coin": "USDT",
    //                     "amount": "5000",
    //                     "fromAccountType": "SPOT",
    //                     "toAccountType": "UNIFIED",
    //                     "timestamp": "1667283263000",
    //                     "status": "SUCCESS"
    //                 }
    //             ],
    //             "nextPageCursor": "eyJtaW5JRCI6MTM1ODQ2OCwibWF4SUQiOjEzNTg0Njh9"
    //         },
    //         "retExtInfo": {},
    //         "time": 1670988271677
    //     }
    //
    const data = this.safeValue(response, 'result', {});
    const transfers = this.safeValue(data, 'list', []);
    return this.parseTransfers(transfers, currency, since, limit);
  }
  async borrowMargin(code, amount, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bybit#borrowMargin
     * @description create a loan to borrow margin
     * @see https://bybit-exchange.github.io/docs/spot/v3/#t-borrowmarginloan
     * @param {string} code unified currency code of the currency to borrow
     * @param {float} amount the amount to borrow
     * @param {string|undefined} symbol not used by bybit.borrowMargin ()
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const [marginMode, query] = this.handleMarginModeAndParams('borrowMargin', params);
    if (marginMode === 'isolated') {
      throw new _errors.NotSupported(this.id + ' borrowMargin () cannot use isolated margin');
    }
    const request = {
      'coin': currency['id'],
      'qty': this.currencyToPrecision(code, amount)
    };
    const response = await this.privatePostSpotV3PrivateCrossMarginLoan(this.extend(request, query));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //             "transactId": "14143"
    //         },
    //         "retExtInfo": null,
    //         "time": 1662617848970
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const transaction = this.parseMarginLoan(result, currency);
    return this.extend(transaction, {
      'symbol': symbol,
      'amount': amount
    });
  }
  async repayMargin(code, amount, symbol = undefined, params = {}) {
    /**
     * @method
     * @name bybit#repayMargin
     * @description repay borrowed margin and interest
     * @see https://bybit-exchange.github.io/docs/spot/v3/#t-repaymarginloan
     * @param {string} code unified currency code of the currency to repay
     * @param {float} amount the amount to repay
     * @param {string|undefined} symbol not used by bybit.repayMargin ()
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const [marginMode, query] = this.handleMarginModeAndParams('repayMargin', params);
    if (marginMode === 'isolated') {
      throw new _errors.NotSupported(this.id + ' repayMargin () cannot use isolated margin');
    }
    const request = {
      'coin': currency['id'],
      'qty': this.numberToString(amount)
    };
    const response = await this.privatePostSpotV3PrivateCrossMarginRepay(this.extend(request, query));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "success",
    //         "result": {
    //            "repayId": "12128"
    //         },
    //         "retExtInfo": null,
    //         "time": 1662618298452
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const transaction = this.parseMarginLoan(result, currency);
    return this.extend(transaction, {
      'symbol': symbol,
      'amount': amount
    });
  }
  parseMarginLoan(info, currency = undefined) {
    //
    // borrowMargin
    //
    //     {
    //         "transactId": "14143"
    //     }
    //
    // repayMargin
    //
    //     {
    //         "repayId": "12128"
    //     }
    //
    return {
      'id': this.safeString2(info, 'transactId', 'repayId'),
      'currency': this.safeString(currency, 'code'),
      'amount': undefined,
      'symbol': undefined,
      'timestamp': undefined,
      'datetime': undefined,
      'info': info
    };
  }
  parseTransferStatus(status) {
    const statuses = {
      '0': 'ok',
      'OK': 'ok',
      'SUCCESS': 'ok'
    };
    return this.safeString(statuses, status, status);
  }
  parseTransfer(transfer, currency = undefined) {
    //
    // transfer
    //
    //     {
    //         "transferId": "22c2bc11-ed5b-49a4-8647-c4e0f5f6f2b2" // transfer_id in v1
    //     }
    //
    // fetchTransfers
    //
    //     {
    //         "transferId": "e9c421c4-b010-4b16-abd6-106179f27702", // transfer_id in v1
    //         "coin": "USDT",
    //         "amount": "8",
    //         "fromAccountType": "FUND", // from_account_type in v1
    //         "toAccountType": "SPOT", // to_account_type in v1
    //         "timestamp": "1666879426000",
    //         "status": "SUCCESS"
    //      }
    //
    const currencyId = this.safeString(transfer, 'coin');
    const timestamp = this.safeInteger(transfer, 'timestamp');
    const fromAccountId = this.safeString2(transfer, 'fromAccountType', 'from_account_type');
    const toAccountId = this.safeString2(transfer, 'toAccountType', 'to_account_type');
    const accountIds = this.safeValue(this.options, 'accountsById', {});
    const fromAccount = this.safeString(accountIds, fromAccountId, fromAccountId);
    const toAccount = this.safeString(accountIds, toAccountId, toAccountId);
    return {
      'info': transfer,
      'id': this.safeString2(transfer, 'transferId', 'transfer_id'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'currency': this.safeCurrencyCode(currencyId, currency),
      'amount': this.safeNumber(transfer, 'amount'),
      'fromAccount': fromAccount,
      'toAccount': toAccount,
      'status': this.parseTransferStatus(this.safeString(transfer, 'status'))
    };
  }
  async fetchDerivativesMarketLeverageTiers(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (market['linear']) {
      request['category'] = 'linear';
    } else if (market['inverse']) {
      request['category'] = 'inverse';
    }
    const response = await this.publicGetV5MarketRiskLimit(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "category": "inverse",
    //             "list": [
    //                 {
    //                     "id": 1,
    //                     "symbol": "BTCUSD",
    //                     "riskLimitValue": "150",
    //                     "maintenanceMargin": "0.5",
    //                     "initialMargin": "1",
    //                     "isLowestRisk": 1,
    //                     "maxLeverage": "100.00"
    //                 },
    //             ....
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1672054488010
    //     }
    //
    const result = this.safeValue(response, 'result');
    const tiers = this.safeValue(result, 'list');
    return this.parseMarketLeverageTiers(tiers, market);
  }
  async fetchMarketLeverageTiers(symbol, params = {}) {
    /**
     * @method
     * @name bybit#fetchMarketLeverageTiers
     * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes for a single market
     * @see https://bybit-exchange.github.io/docs/v5/market/risk-limit
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [leverage tiers structure]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    market = this.market(symbol);
    if (market['spot'] || market['option']) {
      throw new _errors.BadRequest(this.id + ' fetchMarketLeverageTiers() symbol does not support market ' + symbol);
    }
    request['symbol'] = market['id'];
    return await this.fetchDerivativesMarketLeverageTiers(symbol, params);
  }
  parseMarketLeverageTiers(info, market = undefined) {
    //
    //     {
    //         "id": 1,
    //         "symbol": "BTCUSD",
    //         "riskLimitValue": "150",
    //         "maintenanceMargin": "0.5",
    //         "initialMargin": "1",
    //         "isLowestRisk": 1,
    //         "maxLeverage": "100.00"
    //     }
    //
    let minNotional = 0;
    const tiers = [];
    for (let i = 0; i < info.length; i++) {
      const item = info[i];
      const maxNotional = this.safeNumber(item, 'riskLimitValue');
      tiers.push({
        'tier': this.sum(i, 1),
        'currency': market['base'],
        'minNotional': minNotional,
        'maxNotional': maxNotional,
        'maintenanceMarginRate': this.safeNumber(item, 'maintenanceMargin'),
        'maxLeverage': this.safeNumber(item, 'maxLeverage'),
        'info': item
      });
      minNotional = maxNotional;
    }
    return tiers;
  }
  parseTradingFee(fee, market = undefined) {
    //
    //     {
    //         "symbol": "ETHUSDT",
    //         "makerFeeRate": 0.001,
    //         "takerFeeRate": 0.001
    //     }
    //
    const marketId = this.safeString(fee, 'symbol');
    const symbol = this.safeSymbol(marketId, undefined, undefined, 'contract');
    return {
      'info': fee,
      'symbol': symbol,
      'maker': this.safeNumber(fee, 'makerFeeRate'),
      'taker': this.safeNumber(fee, 'takerFeeRate')
    };
  }
  async fetchTradingFee(symbol, params = {}) {
    /**
     * @method
     * @name bybit#fetchTradingFee
     * @description fetch the trading fees for a market
     * @see https://bybit-exchange.github.io/docs/v5/account/fee-rate
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    if (market['spot']) {
      throw new _errors.NotSupported(this.id + ' fetchTradingFee() is not supported for spot market');
    }
    const request = {
      'symbol': market['id']
    };
    const response = await this.privateGetV5AccountFeeRate(this.extend(request, params));
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [
    //                 {
    //                     "symbol": "ETHUSDT",
    //                     "takerFeeRate": "0.0006",
    //                     "makerFeeRate": "0.0001"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1676360412576
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const fees = this.safeValue(result, 'list', []);
    const first = this.safeValue(fees, 0, {});
    return this.parseTradingFee(first);
  }
  async fetchTradingFees(params = {}) {
    /**
     * @method
     * @name bybit#fetchTradingFees
     * @description fetch the trading fees for multiple markets
     * @see https://bybit-exchange.github.io/docs/v5/account/fee-rate
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
     */
    await this.loadMarkets();
    let type = undefined;
    [type, params] = this.handleOptionAndParams(params, 'fetchTradingFees', 'type', 'future');
    if (type === 'spot') {
      throw new _errors.NotSupported(this.id + ' fetchTradingFees() is not supported for spot market');
    }
    const response = await this.privateGetV5AccountFeeRate(params);
    //
    //     {
    //         "retCode": 0,
    //         "retMsg": "OK",
    //         "result": {
    //             "list": [
    //                 {
    //                     "symbol": "ETHUSDT",
    //                     "takerFeeRate": "0.0006",
    //                     "makerFeeRate": "0.0001"
    //                 }
    //             ]
    //         },
    //         "retExtInfo": {},
    //         "time": 1676360412576
    //     }
    //
    let fees = this.safeValue(response, 'result', {});
    fees = this.safeValue(fees, 'list', []);
    const result = {};
    for (let i = 0; i < fees.length; i++) {
      const fee = this.parseTradingFee(fees[i]);
      const symbol = fee['symbol'];
      result[symbol] = fee;
    }
    return result;
  }
  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    let url = this.implodeHostname(this.urls['api'][api]) + '/' + path;
    if (api === 'public') {
      if (Object.keys(params).length) {
        url += '?' + this.rawencode(params);
      }
    } else if (api === 'private') {
      this.checkRequiredCredentials();
      const isOpenapi = url.indexOf('openapi') >= 0;
      const isV3UnifiedMargin = url.indexOf('unified/v3') >= 0;
      const isV3Contract = url.indexOf('contract/v3') >= 0;
      const isV5UnifiedAccount = url.indexOf('v5') >= 0;
      const timestamp = this.nonce().toString();
      if (isOpenapi) {
        if (Object.keys(params).length) {
          body = this.json(params);
        } else {
          // this fix for PHP is required otherwise it generates
          // '[]' on empty arrays even when forced to use objects
          body = '{}';
        }
        const payload = timestamp + this.apiKey + body;
        const signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'hex');
        headers = {
          'Content-Type': 'application/json',
          'X-BAPI-API-KEY': this.apiKey,
          'X-BAPI-TIMESTAMP': timestamp,
          'X-BAPI-SIGN': signature
        };
      } else if (isV3UnifiedMargin || isV3Contract || isV5UnifiedAccount) {
        headers = {
          'Content-Type': 'application/json',
          'X-BAPI-API-KEY': this.apiKey,
          'X-BAPI-TIMESTAMP': timestamp,
          'X-BAPI-RECV-WINDOW': this.options['recvWindow'].toString()
        };
        if (isV3UnifiedMargin || isV3Contract) {
          headers['X-BAPI-SIGN-TYPE'] = '2';
        }
        const query = params;
        const queryEncoded = this.rawencode(query);
        const auth_base = timestamp.toString() + this.apiKey + this.options['recvWindow'].toString();
        let authFull = undefined;
        if (method === 'POST') {
          body = this.json(query);
          authFull = auth_base + body;
        } else {
          authFull = auth_base + queryEncoded;
          url += '?' + this.rawencode(query);
        }
        headers['X-BAPI-SIGN'] = this.hmac(this.encode(authFull), this.encode(this.secret));
      } else {
        const query = this.extend(params, {
          'api_key': this.apiKey,
          'recv_window': this.options['recvWindow'],
          'timestamp': timestamp
        });
        const sortedQuery = this.keysort(query);
        const auth = this.rawencode(sortedQuery);
        const signature = this.hmac(this.encode(auth), this.encode(this.secret));
        if (method === 'POST') {
          const isSpot = url.indexOf('spot') >= 0;
          const extendedQuery = this.extend(query, {
            'sign': signature
          });
          if (isSpot) {
            body = this.urlencode(extendedQuery);
            headers = {
              'Content-Type': 'application/x-www-form-urlencoded'
            };
          } else {
            body = this.json(extendedQuery);
            headers = {
              'Content-Type': 'application/json'
            };
          }
        } else {
          url += '?' + this.rawencode(sortedQuery);
          url += '&sign=' + signature;
        }
      }
    }
    if (method === 'POST') {
      const brokerId = this.safeString(this.options, 'brokerId');
      if (brokerId !== undefined) {
        headers['Referer'] = brokerId;
      }
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (!response) {
      return; // fallback to default error handler
    }
    //
    //     {
    //         ret_code: 10001,
    //         ret_msg: 'ReadMapCB: expect { or n, but found \u0000, error ' +
    //         'found in #0 byte of ...||..., bigger context ' +
    //         '...||...',
    //         ext_code: '',
    //         ext_info: '',
    //         result: null,
    //         time_now: '1583934106.590436'
    //     }
    //
    //     {
    //         "retCode":10001,
    //         "retMsg":"symbol params err",
    //         "result":{"symbol":"","bid":"","bidIv":"","bidSize":"","ask":"","askIv":"","askSize":"","lastPrice":"","openInterest":"","indexPrice":"","markPrice":"","markPriceIv":"","change24h":"","high24h":"","low24h":"","volume24h":"","turnover24h":"","totalVolume":"","totalTurnover":"","fundingRate":"","predictedFundingRate":"","nextFundingTime":"","countdownHour":"0","predictedDeliveryPrice":"","underlyingPrice":"","delta":"","gamma":"","vega":"","theta":""}
    //     }
    //
    const errorCode = this.safeString2(response, 'ret_code', 'retCode');
    if (errorCode !== '0') {
      if (errorCode === '30084') {
        // not an error
        // https://github.com/ccxt/ccxt/issues/11268
        // https://github.com/ccxt/ccxt/pull/11624
        // POST https://api.bybit.com/v2/private/position/switch-isolated 200 OK
        // {"ret_code":30084,"ret_msg":"Isolated not modified","ext_code":"","ext_info":"","result":null,"time_now":"1642005219.937988","rate_limit_status":73,"rate_limit_reset_ms":1642005219894,"rate_limit":75}
        return undefined;
      }
      let feedback = undefined;
      if (errorCode === '10005') {
        feedback = this.id + ' private api uses /user/v3/private/query-api to check if you have a unified account. The API key of user id must own one of permissions: "Account Transfer", "Subaccount Transfer", "Withdrawal" ' + body;
      } else {
        feedback = this.id + ' ' + body;
      }
      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);
      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
      throw new _errors.ExchangeError(feedback); // unknown message
    }
  }
}
exports.default = bybit;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _okx = _interopRequireDefault(require("./okx.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class okex extends _okx.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'okex',
      'alias': true
    });
  }
}
exports.default = okex;

},{"./okx.js":34}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _okex = _interopRequireDefault(require("./okex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class okex5 extends _okex.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'okex5',
      'alias': true
    });
  }
}
exports.default = okex5;

},{"./okex.js":32}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
var _number = require("./base/functions/number.js");
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class okx extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'okx',
      'name': 'OKX',
      'countries': ['CN', 'US'],
      'version': 'v5',
      'rateLimit': 100,
      'pro': true,
      'certified': true,
      'has': {
        'CORS': undefined,
        'spot': true,
        'margin': true,
        'swap': true,
        'future': true,
        'option': undefined,
        'addMargin': true,
        'borrowMargin': true,
        'cancelAllOrders': false,
        'cancelOrder': true,
        'cancelOrders': true,
        'createDepositAddress': false,
        'createOrder': true,
        'createPostOnlyOrder': true,
        'createReduceOnlyOrder': true,
        'createStopLimitOrder': true,
        'createStopMarketOrder': true,
        'createStopOrder': true,
        'fetchAccounts': true,
        'fetchBalance': true,
        'fetchBidsAsks': undefined,
        'fetchBorrowInterest': true,
        'fetchBorrowRate': true,
        'fetchBorrowRateHistories': true,
        'fetchBorrowRateHistory': true,
        'fetchBorrowRates': true,
        'fetchBorrowRatesPerSymbol': false,
        'fetchCanceledOrders': true,
        'fetchClosedOrder': undefined,
        'fetchClosedOrders': true,
        'fetchCurrencies': true,
        'fetchDeposit': true,
        'fetchDepositAddress': true,
        'fetchDepositAddresses': false,
        'fetchDepositAddressesByNetwork': true,
        'fetchDeposits': true,
        'fetchDepositWithdrawFee': 'emulated',
        'fetchDepositWithdrawFees': true,
        'fetchFundingHistory': true,
        'fetchFundingRate': true,
        'fetchFundingRateHistory': true,
        'fetchFundingRates': false,
        'fetchIndexOHLCV': true,
        'fetchL3OrderBook': false,
        'fetchLedger': true,
        'fetchLedgerEntry': undefined,
        'fetchLeverage': true,
        'fetchLeverageTiers': false,
        'fetchMarketLeverageTiers': true,
        'fetchMarkets': true,
        'fetchMarkOHLCV': true,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenInterest': true,
        'fetchOpenInterestHistory': true,
        'fetchOpenOrder': undefined,
        'fetchOpenOrders': true,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrderBooks': false,
        'fetchOrders': false,
        'fetchOrderTrades': true,
        'fetchPermissions': undefined,
        'fetchPosition': true,
        'fetchPositions': true,
        'fetchPositionsRisk': false,
        'fetchPremiumIndexOHLCV': false,
        'fetchStatus': true,
        'fetchTicker': true,
        'fetchTickers': true,
        'fetchTime': true,
        'fetchTrades': true,
        'fetchTradingFee': true,
        'fetchTradingFees': false,
        'fetchTradingLimits': false,
        'fetchTransactionFee': false,
        'fetchTransactionFees': false,
        'fetchTransactions': false,
        'fetchTransfer': true,
        'fetchTransfers': false,
        'fetchWithdrawal': true,
        'fetchWithdrawals': true,
        'fetchWithdrawalWhitelist': false,
        'reduceMargin': true,
        'repayMargin': true,
        'setLeverage': true,
        'setMargin': false,
        'setMarginMode': true,
        'setPositionMode': true,
        'signIn': false,
        'transfer': true,
        'withdraw': true
      },
      'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1H',
        '2h': '2H',
        '4h': '4H',
        '6h': '6H',
        '12h': '12H',
        '1d': '1D',
        '1w': '1W',
        '1M': '1M',
        '3M': '3M'
      },
      'hostname': 'www.okx.com',
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/152485636-38b19e4a-bece-4dec-979a-5982859ffc04.jpg',
        'api': {
          'rest': 'https://{hostname}'
        },
        'www': 'https://www.okx.com',
        'doc': 'https://www.okx.com/docs-v5/en/',
        'fees': 'https://www.okx.com/pages/products/fees.html',
        'referral': 'https://www.okx.com/join/1888677',
        'test': {
          'rest': 'https://{hostname}'
        }
      },
      'api': {
        'public': {
          'get': {
            'market/tickers': 1,
            'market/ticker': 1,
            'market/index-tickers': 1,
            'market/books': 1,
            'market/books-lite': 1.66,
            'market/candles': 0.5,
            'market/history-candles': 1,
            'market/history-mark-price-candles': 2,
            'market/history-index-candles': 2,
            'market/index-candles': 1,
            'market/mark-price-candles': 1,
            'market/trades': 1,
            'market/platform-24-volume': 10,
            'market/open-oracle': 40,
            'market/index-components': 1,
            'market/option/instrument-family-trades': 1,
            // 'market/oracle',
            'public/instruments': 1,
            'public/delivery-exercise-history': 0.5,
            'public/open-interest': 1,
            'public/funding-rate': 1,
            'public/funding-rate-history': 1,
            'public/price-limit': 1,
            'public/opt-summary': 1,
            'public/estimated-price': 2,
            'public/discount-rate-interest-free-quota': 10,
            'public/time': 2,
            'public/liquidation-orders': 0.5,
            'public/mark-price': 2,
            'public/option-trades': 1,
            // 'public/tier',
            'public/position-tiers': 2,
            'public/underlying': 1,
            'public/interest-rate-loan-quota': 10,
            'public/vip-interest-rate-loan-quota': 10,
            'rubik/stat/trading-data/support-coin': 4,
            'rubik/stat/taker-volume': 4,
            'rubik/stat/margin/loan-ratio': 4,
            // long/short
            'rubik/stat/contracts/long-short-account-ratio': 4,
            'rubik/stat/contracts/open-interest-volume': 4,
            'rubik/stat/option/open-interest-volume': 4,
            // put/call
            'rubik/stat/option/open-interest-volume-ratio': 4,
            'rubik/stat/option/open-interest-volume-expiry': 4,
            'rubik/stat/option/open-interest-volume-strike': 4,
            'rubik/stat/option/taker-block-volume': 4,
            'system/status': 100,
            'asset/lending-rate-summary': 5 / 3,
            'asset/lending-rate-history': 5 / 3,
            'market/exchange-rate': 20
          }
        },
        'private': {
          'get': {
            'account/account-position-risk': 2,
            'account/balance': 2,
            'account/positions': 2,
            'account/positions-history': 2,
            'account/bills': 5 / 3,
            'account/bills-archive': 5 / 3,
            'account/config': 4,
            'account/max-size': 1,
            'account/max-avail-size': 1,
            'account/leverage-info': 1,
            'account/max-loan': 1,
            'account/trade-fee': 4,
            'account/interest-accrued': 4,
            'account/interest-rate': 4,
            'account/max-withdrawal': 1,
            'account/risk-state': 2,
            'account/borrow-repay-history': 4,
            'account/quick-margin-borrow-repay-history': 4,
            'account/interest-limits': 4,
            'account/vip-interest-accrued': 4,
            'account/vip-loan-order-list': 4,
            'account/vip-loan-order-detail': 4,
            'asset/asset-valuation': 1 / 5,
            'asset/deposit-address': 5 / 3,
            'asset/balances': 5 / 3,
            'asset/transfer-state': 10,
            'asset/deposit-history': 5 / 3,
            'asset/withdrawal-history': 5 / 3,
            'asset/deposit-withdraw-status': 20,
            'asset/currencies': 5 / 3,
            'asset/bills': 5 / 3,
            'asset/piggy-balance': 5 / 3,
            'asset/deposit-lightning': 5,
            'asset/lending-history': 5 / 3,
            'asset/saving-balance': 5 / 3,
            'asset/non-tradable-assets': 5 / 3,
            'trade/order': 1 / 3,
            'trade/orders-pending': 1,
            'trade/orders-history': 0.5,
            'trade/orders-history-archive': 1,
            'trade/fills': 1 / 3,
            'trade/fills-history': 2,
            'trade/orders-algo-pending': 1,
            'trade/orders-algo-history': 1,
            'trade/order-algo': 1,
            'account/subaccount/balances': 10,
            'asset/subaccount/bills': 5 / 3,
            'users/subaccount/list': 10,
            'users/subaccount/apikey': 10,
            'users/entrust-subaccount-list': 10,
            // broker
            'broker/nd/info': 10,
            'broker/nd/subaccount-info': 10,
            'asset/broker/nd/subaccount-deposit-address': 4,
            'asset/broker/nd/subaccount-deposit-history': 4,
            'broker/nd/rebate-daily': 1,
            'broker/nd/subaccount/apikey': 10,
            'broker/nd/rebate-per-orders': 300,
            'asset/broker/nd/subaccount-withdrawal-history': 4,
            // convert
            'asset/convert/currencies': 5 / 3,
            'asset/convert/currency-pair': 5 / 3,
            'asset/convert/estimate-quote': 5,
            'asset/convert/trade': 5,
            'asset/convert/history': 5 / 3,
            // options
            'account/greeks': 2,
            // earn
            'finance/staking-defi/offers': 1,
            'finance/staking-defi/orders-active': 1,
            'finance/staking-defi/orders-history': 1,
            'rfq/counterparties': 4,
            'rfq/maker-instrument-settings': 4,
            'rfq/rfqs': 10,
            'rfq/quotes': 10,
            'rfq/trades': 4,
            'rfq/public-trades': 4,
            // copytrading
            'copytrading/current-subpositions': 10,
            'copytrading/subpositions-history': 10,
            'copytrading/instruments': 10,
            'copytrading/profit-sharing-details': 10,
            'copytrading/total-profit-sharing': 10,
            'copytrading/unrealized-profit-sharing-details': 10,
            // grid trading
            'tradingBot/grid/orders-algo-pending': 1,
            'tradingBot/grid/orders-algo-history': 1,
            'tradingBot/grid/orders-algo-details': 1,
            'tradingBot/grid/sub-orders': 1,
            'tradingBot/grid/positions': 1,
            'tradingBot/grid/ai-param': 1
          },
          'post': {
            'account/set-position-mode': 4,
            'account/set-leverage': 1,
            'account/position/margin-balance': 1,
            'account/set-greeks': 4,
            'account/set-isolated-mode': 4,
            'account/set-riskOffset-type': 2,
            'account/simulated_margin': 10,
            'account/borrow-repay': 5 / 3,
            'account/quick-margin-borrow-repay': 4,
            'account/activate-option': 4,
            'account/set-auto-loan': 4,
            'asset/transfer': 10,
            'asset/withdrawal': 5 / 3,
            'asset/purchase_redempt': 5 / 3,
            'asset/withdrawal-lightning': 5,
            'asset/set-lending-rate': 5 / 3,
            'asset/cancel-withdrawal': 5 / 3,
            'asset/convert-dust-assets': 10,
            'trade/order': 1 / 3,
            'trade/batch-orders': 1 / 15,
            'trade/cancel-order': 1 / 3,
            'trade/cancel-batch-orders': 1 / 15,
            'trade/amend-order': 1 / 3,
            'trade/amend-batch-orders': 1 / 3,
            'trade/close-position': 1,
            'trade/order-algo': 1,
            'trade/cancel-algos': 1,
            'trade/cancel-advance-algos': 1,
            'users/subaccount/delete-apikey': 10,
            'users/subaccount/modify-apikey': 10,
            'users/subaccount/apikey': 10,
            'users/subaccount/set-transfer-out': 10,
            'asset/subaccount/transfer': 10,
            // broker
            'broker/nd/create-subaccount': 10,
            'broker/nd/delete-subaccount': 10,
            'broker/nd/set-subaccount-level': 4,
            'broker/nd/set-subaccount-fee-rate': 4,
            'asset/broker/nd/subaccount-deposit-address': 4,
            'broker/nd/subaccount/apikey': 10,
            'broker/nd/subaccount/delete-apikey': 10,
            'broker/nd/subaccount/modify-apikey': 10,
            'broker/nd/rebate-per-orders': 36000,
            // earn
            'finance/staking-defi/purchase': 3,
            'finance/staking-defi/redeem': 3,
            'finance/staking-defi/cancel': 3,
            'rfq/create-rfq': 4,
            'rfq/cancel-rfq': 4,
            'rfq/cancel-batch-rfqs': 10,
            'rfq/cancel-all-rfqs': 10,
            'rfq/execute-quote': 10,
            'rfq/maker-instrument-settings': 4,
            'rfq/mmp-reset': 4,
            'rfq/create-quote': 0.4,
            'rfq/cancel-quote': 0.4,
            'rfq/cancel-batch-quotes': 10,
            'rfq/cancel-all-quotes': 10,
            // copytrading
            'copytrading/algo-order': 20,
            'copytrading/close-subposition': 10,
            'copytrading/set-instruments': 10,
            // grid trading
            'tradingBot/grid/order-algo': 1,
            'tradingBot/grid/amend-order-algo': 1,
            'tradingBot/grid/stop-order-algo': 1,
            'tradingBot/grid/withdraw-income': 1,
            'tradingBot/grid/compute-margin-balance': 1,
            'tradingBot/grid/margin-balance': 1
          }
        }
      },
      'fees': {
        'trading': {
          'taker': this.parseNumber('0.0015'),
          'maker': this.parseNumber('0.0010')
        },
        'spot': {
          'taker': this.parseNumber('0.0015'),
          'maker': this.parseNumber('0.0010')
        },
        'future': {
          'taker': this.parseNumber('0.0005'),
          'maker': this.parseNumber('0.0002')
        },
        'swap': {
          'taker': this.parseNumber('0.00050'),
          'maker': this.parseNumber('0.00020')
        }
      },
      'requiredCredentials': {
        'apiKey': true,
        'secret': true,
        'password': true
      },
      'exceptions': {
        'exact': {
          // Public error codes from 50000-53999
          // General Class
          '1': _errors.ExchangeError,
          '2': _errors.ExchangeError,
          '50000': _errors.BadRequest,
          '50001': _errors.OnMaintenance,
          '50002': _errors.BadRequest,
          '50004': _errors.RequestTimeout,
          '50005': _errors.ExchangeNotAvailable,
          '50006': _errors.BadRequest,
          '50007': _errors.AccountSuspended,
          '50008': _errors.AuthenticationError,
          '50009': _errors.AccountSuspended,
          '50010': _errors.ExchangeError,
          '50011': _errors.RateLimitExceeded,
          '50012': _errors.ExchangeError,
          '50013': _errors.ExchangeNotAvailable,
          '50014': _errors.BadRequest,
          '50015': _errors.ExchangeError,
          '50016': _errors.ExchangeError,
          '50017': _errors.ExchangeError,
          '50018': _errors.ExchangeError,
          '50019': _errors.ExchangeError,
          '50020': _errors.ExchangeError,
          '50021': _errors.ExchangeError,
          '50022': _errors.ExchangeError,
          '50023': _errors.ExchangeError,
          '50024': _errors.BadRequest,
          '50025': _errors.ExchangeError,
          '50026': _errors.ExchangeNotAvailable,
          '50027': _errors.PermissionDenied,
          '50028': _errors.ExchangeError,
          '50044': _errors.BadRequest,
          // API Class
          '50100': _errors.ExchangeError,
          '50101': _errors.AuthenticationError,
          '50102': _errors.InvalidNonce,
          '50103': _errors.AuthenticationError,
          '50104': _errors.AuthenticationError,
          '50105': _errors.AuthenticationError,
          '50106': _errors.AuthenticationError,
          '50107': _errors.AuthenticationError,
          '50108': _errors.ExchangeError,
          '50109': _errors.ExchangeError,
          '50110': _errors.PermissionDenied,
          '50111': _errors.AuthenticationError,
          '50112': _errors.AuthenticationError,
          '50113': _errors.AuthenticationError,
          '50114': _errors.AuthenticationError,
          '50115': _errors.BadRequest,
          // Trade Class
          '51000': _errors.BadRequest,
          '51001': _errors.BadSymbol,
          '51002': _errors.BadSymbol,
          '51003': _errors.BadRequest,
          '51004': _errors.InvalidOrder,
          '51005': _errors.InvalidOrder,
          '51006': _errors.InvalidOrder,
          '51007': _errors.InvalidOrder,
          '51008': _errors.InsufficientFunds,
          '51009': _errors.AccountSuspended,
          '51010': _errors.AccountNotEnabled,
          '51011': _errors.InvalidOrder,
          '51012': _errors.BadSymbol,
          '51014': _errors.BadSymbol,
          '51015': _errors.BadSymbol,
          '51016': _errors.InvalidOrder,
          '51017': _errors.ExchangeError,
          '51018': _errors.ExchangeError,
          '51019': _errors.ExchangeError,
          '51020': _errors.InvalidOrder,
          '51021': _errors.BadSymbol,
          '51022': _errors.BadSymbol,
          '51023': _errors.ExchangeError,
          '51024': _errors.AccountSuspended,
          '51025': _errors.ExchangeError,
          '51026': _errors.BadSymbol,
          '51027': _errors.BadSymbol,
          '51028': _errors.BadSymbol,
          '51029': _errors.BadSymbol,
          '51030': _errors.BadSymbol,
          '51031': _errors.InvalidOrder,
          '51100': _errors.InvalidOrder,
          '51101': _errors.InvalidOrder,
          '51102': _errors.InvalidOrder,
          '51103': _errors.InvalidOrder,
          '51104': _errors.InvalidOrder,
          '51105': _errors.InvalidOrder,
          '51106': _errors.InvalidOrder,
          '51107': _errors.InvalidOrder,
          '51108': _errors.InvalidOrder,
          '51109': _errors.InvalidOrder,
          '51110': _errors.InvalidOrder,
          '51111': _errors.BadRequest,
          '51112': _errors.InvalidOrder,
          '51113': _errors.RateLimitExceeded,
          '51115': _errors.InvalidOrder,
          '51116': _errors.InvalidOrder,
          '51117': _errors.InvalidOrder,
          '51118': _errors.InvalidOrder,
          '51119': _errors.InsufficientFunds,
          '51120': _errors.InvalidOrder,
          '51121': _errors.InvalidOrder,
          '51122': _errors.InvalidOrder,
          '51124': _errors.InvalidOrder,
          '51125': _errors.InvalidOrder,
          '51126': _errors.InvalidOrder,
          '51127': _errors.InsufficientFunds,
          '51128': _errors.InvalidOrder,
          '51129': _errors.InvalidOrder,
          '51130': _errors.BadSymbol,
          '51131': _errors.InsufficientFunds,
          '51132': _errors.InvalidOrder,
          '51133': _errors.InvalidOrder,
          '51134': _errors.InvalidOrder,
          '51135': _errors.InvalidOrder,
          '51136': _errors.InvalidOrder,
          '51137': _errors.InvalidOrder,
          '51138': _errors.InvalidOrder,
          '51139': _errors.InvalidOrder,
          '51156': _errors.BadRequest,
          '51159': _errors.BadRequest,
          '51162': _errors.InvalidOrder,
          '51163': _errors.InvalidOrder,
          '51166': _errors.InvalidOrder,
          '51201': _errors.InvalidOrder,
          '51202': _errors.InvalidOrder,
          '51203': _errors.InvalidOrder,
          '51204': _errors.InvalidOrder,
          '51205': _errors.InvalidOrder,
          '51250': _errors.InvalidOrder,
          '51251': _errors.InvalidOrder,
          '51252': _errors.InvalidOrder,
          '51253': _errors.InvalidOrder,
          '51254': _errors.InvalidOrder,
          '51255': _errors.InvalidOrder,
          '51256': _errors.InvalidOrder,
          '51257': _errors.InvalidOrder,
          '51258': _errors.InvalidOrder,
          '51259': _errors.InvalidOrder,
          '51260': _errors.InvalidOrder,
          '51261': _errors.InvalidOrder,
          '51262': _errors.InvalidOrder,
          '51263': _errors.InvalidOrder,
          '51264': _errors.InvalidOrder,
          '51265': _errors.InvalidOrder,
          '51267': _errors.InvalidOrder,
          '51268': _errors.InvalidOrder,
          '51269': _errors.InvalidOrder,
          '51270': _errors.InvalidOrder,
          '51271': _errors.InvalidOrder,
          '51272': _errors.InvalidOrder,
          '51273': _errors.InvalidOrder,
          '51274': _errors.InvalidOrder,
          '51275': _errors.InvalidOrder,
          '51276': _errors.InvalidOrder,
          '51277': _errors.InvalidOrder,
          '51278': _errors.InvalidOrder,
          '51279': _errors.InvalidOrder,
          '51280': _errors.InvalidOrder,
          '51321': _errors.InvalidOrder,
          '51322': _errors.InvalidOrder,
          '51323': _errors.BadRequest,
          '51324': _errors.BadRequest,
          '51325': _errors.InvalidOrder,
          '51327': _errors.InvalidOrder,
          '51328': _errors.InvalidOrder,
          '51329': _errors.InvalidOrder,
          '51330': _errors.InvalidOrder,
          '51400': _errors.OrderNotFound,
          '51401': _errors.OrderNotFound,
          '51402': _errors.OrderNotFound,
          '51403': _errors.InvalidOrder,
          '51404': _errors.InvalidOrder,
          '51405': _errors.ExchangeError,
          '51406': _errors.ExchangeError,
          '51407': _errors.BadRequest,
          '51408': _errors.ExchangeError,
          '51409': _errors.ExchangeError,
          '51410': _errors.CancelPending,
          '51500': _errors.ExchangeError,
          '51501': _errors.ExchangeError,
          '51502': _errors.InsufficientFunds,
          '51503': _errors.ExchangeError,
          '51506': _errors.ExchangeError,
          '51508': _errors.ExchangeError,
          '51509': _errors.ExchangeError,
          '51510': _errors.ExchangeError,
          '51511': _errors.ExchangeError,
          '51600': _errors.ExchangeError,
          '51601': _errors.ExchangeError,
          '51602': _errors.ExchangeError,
          '51603': _errors.OrderNotFound,
          '51732': _errors.AuthenticationError,
          '51733': _errors.AuthenticationError,
          '51734': _errors.AuthenticationError,
          '51735': _errors.ExchangeError,
          '51736': _errors.InsufficientFunds,
          // Data class
          '52000': _errors.ExchangeError,
          // SPOT/MARGIN error codes 54000-54999
          '54000': _errors.ExchangeError,
          '54001': _errors.ExchangeError,
          // FUNDING error codes 58000-58999
          '58000': _errors.ExchangeError,
          '58001': _errors.AuthenticationError,
          '58002': _errors.PermissionDenied,
          '58003': _errors.ExchangeError,
          '58004': _errors.AccountSuspended,
          '58005': _errors.ExchangeError,
          '58006': _errors.ExchangeError,
          '58007': _errors.ExchangeError,
          '58100': _errors.ExchangeError,
          '58101': _errors.AccountSuspended,
          '58102': _errors.RateLimitExceeded,
          '58103': _errors.ExchangeError,
          '58104': _errors.ExchangeError,
          '58105': _errors.ExchangeError,
          '58106': _errors.ExchangeError,
          '58107': _errors.ExchangeError,
          '58108': _errors.ExchangeError,
          '58109': _errors.ExchangeError,
          '58110': _errors.ExchangeError,
          '58111': _errors.ExchangeError,
          '58112': _errors.ExchangeError,
          '58114': _errors.ExchangeError,
          '58115': _errors.ExchangeError,
          '58116': _errors.ExchangeError,
          '58117': _errors.ExchangeError,
          '58125': _errors.BadRequest,
          '58126': _errors.BadRequest,
          '58127': _errors.BadRequest,
          '58128': _errors.BadRequest,
          '58200': _errors.ExchangeError,
          '58201': _errors.ExchangeError,
          '58202': _errors.ExchangeError,
          '58203': _errors.InvalidAddress,
          '58204': _errors.AccountSuspended,
          '58205': _errors.ExchangeError,
          '58206': _errors.ExchangeError,
          '58207': _errors.InvalidAddress,
          '58208': _errors.ExchangeError,
          '58209': _errors.ExchangeError,
          '58210': _errors.ExchangeError,
          '58211': _errors.ExchangeError,
          '58212': _errors.ExchangeError,
          '58213': _errors.AuthenticationError,
          '58221': _errors.BadRequest,
          '58222': _errors.BadRequest,
          '58224': _errors.BadRequest,
          '58227': _errors.BadRequest,
          '58228': _errors.BadRequest,
          '58229': _errors.InsufficientFunds,
          '58300': _errors.ExchangeError,
          '58350': _errors.InsufficientFunds,
          // Account error codes 59000-59999
          '59000': _errors.ExchangeError,
          '59001': _errors.ExchangeError,
          '59100': _errors.ExchangeError,
          '59101': _errors.ExchangeError,
          '59102': _errors.ExchangeError,
          '59103': _errors.InsufficientFunds,
          '59104': _errors.ExchangeError,
          '59105': _errors.ExchangeError,
          '59106': _errors.ExchangeError,
          '59107': _errors.ExchangeError,
          '59108': _errors.InsufficientFunds,
          '59109': _errors.ExchangeError,
          '59128': _errors.InvalidOrder,
          '59200': _errors.InsufficientFunds,
          '59201': _errors.InsufficientFunds,
          '59216': _errors.BadRequest,
          '59300': _errors.ExchangeError,
          '59301': _errors.ExchangeError,
          '59313': _errors.ExchangeError,
          '59401': _errors.ExchangeError,
          '59500': _errors.ExchangeError,
          '59501': _errors.ExchangeError,
          '59502': _errors.ExchangeError,
          '59503': _errors.ExchangeError,
          '59504': _errors.ExchangeError,
          '59505': _errors.ExchangeError,
          '59506': _errors.ExchangeError,
          '59507': _errors.ExchangeError,
          '59508': _errors.AccountSuspended,
          // WebSocket error Codes from 60000-63999
          '60001': _errors.AuthenticationError,
          '60002': _errors.AuthenticationError,
          '60003': _errors.AuthenticationError,
          '60004': _errors.AuthenticationError,
          '60005': _errors.AuthenticationError,
          '60006': _errors.InvalidNonce,
          '60007': _errors.AuthenticationError,
          '60008': _errors.AuthenticationError,
          '60009': _errors.AuthenticationError,
          '60010': _errors.AuthenticationError,
          '60011': _errors.AuthenticationError,
          '60012': _errors.BadRequest,
          '60013': _errors.BadRequest,
          '60014': _errors.RateLimitExceeded,
          '60015': _errors.NetworkError,
          '60016': _errors.ExchangeNotAvailable,
          '60017': _errors.BadRequest,
          '60018': _errors.BadRequest,
          '60019': _errors.BadRequest,
          '63999': _errors.ExchangeError,
          '70010': _errors.BadRequest,
          '70013': _errors.BadRequest,
          '70016': _errors.BadRequest // Please specify your instrument settings for at least one instType.
        },

        'broad': {
          'Internal Server Error': _errors.ExchangeNotAvailable,
          'server error': _errors.ExchangeNotAvailable // {"code":500,"data":{},"detailMsg":"","error_code":"500","error_message":"server error 1236805249","msg":"server error 1236805249"}
        }
      },

      'httpExceptions': {
        '429': _errors.ExchangeNotAvailable // https://github.com/ccxt/ccxt/issues/9612
      },

      'precisionMode': _number.TICK_SIZE,
      'options': {
        'defaultNetwork': 'ERC20',
        'networks': {
          'BTC': 'Bitcoin',
          'OMNI': 'Omni',
          'SOL': 'Solana',
          'LTC': 'Litecoin',
          'MATIC': 'Polygon',
          'OP': 'Optimism',
          'ARB': 'Arbitrum one',
          'AVAX': 'Avalanche C-Chain'
        },
        'networksById': {
          'Bitcoin': 'BTC',
          'Omni': 'OMNI',
          'Solana': 'SOL',
          'Litecoin': 'LTC',
          'Polygon': 'MATIC',
          'Optimism': 'OP',
          'Arbitrum one': 'ARB',
          'Avalanche C-Chain': 'AVAX'
        },
        'fetchOpenInterestHistory': {
          'timeframes': {
            '5m': '5m',
            '1h': '1H',
            '1d': '1D',
            '5M': '5m',
            '1H': '1H',
            '1D': '1D'
          }
        },
        'fetchOHLCV': {
          // 'type': 'Candles', // Candles or HistoryCandles, IndexCandles, MarkPriceCandles
          'timezone': 'UTC' // UTC, HK
        },

        'fetchPositions': {
          'method': 'privateGetAccountPositions' // privateGetAccountPositions or privateGetAccountPositionsHistory
        },

        'createOrder': 'privatePostTradeBatchOrders',
        'createMarketBuyOrderRequiresPrice': false,
        'fetchMarkets': ['spot', 'future', 'swap', 'option'],
        'defaultType': 'spot',
        // 'fetchBalance': {
        //     'type': 'spot', // 'funding', 'trading', 'spot'
        // },
        'fetchLedger': {
          'method': 'privateGetAccountBills' // privateGetAccountBillsArchive, privateGetAssetBills
        },

        // 6: Funding account, 18: Trading account
        'fetchOrder': {
          'method': 'privateGetTradeOrder' // privateGetTradeOrdersAlgoHistory
        },

        'fetchOpenOrders': {
          'method': 'privateGetTradeOrdersPending' // privateGetTradeOrdersAlgoPending
        },

        'cancelOrders': {
          'method': 'privatePostTradeCancelBatchOrders' // privatePostTradeCancelAlgos
        },

        'fetchCanceledOrders': {
          'method': 'privateGetTradeOrdersHistory' // privateGetTradeOrdersAlgoHistory
        },

        'fetchClosedOrders': {
          'method': 'privateGetTradeOrdersHistory' // privateGetTradeOrdersAlgoHistory
        },

        'algoOrderTypes': {
          'conditional': true,
          'trigger': true,
          'oco': true,
          'move_order_stop': true,
          'iceberg': true,
          'twap': true
        },
        'accountsByType': {
          'funding': '6',
          'trading': '18',
          'spot': '18',
          'future': '18',
          'futures': '18',
          'margin': '18',
          'swap': '18',
          'option': '18'
        },
        'accountsById': {
          '6': 'funding',
          '18': 'trading' // unified trading account
        },

        'exchangeType': {
          'spot': 'SPOT',
          'margin': 'MARGIN',
          'swap': 'SWAP',
          'future': 'FUTURES',
          'futures': 'FUTURES',
          'option': 'OPTION',
          'SPOT': 'SPOT',
          'MARGIN': 'MARGIN',
          'SWAP': 'SWAP',
          'FUTURES': 'FUTURES',
          'OPTION': 'OPTION'
        },
        'brokerId': 'e847386590ce4dBC'
      },
      'commonCurrencies': {
        // the exchange refers to ERC20 version of Aeternity (AEToken)
        'AE': 'AET',
        'BOX': 'DefiBox',
        'HOT': 'Hydro Protocol',
        'HSR': 'HC',
        'MAG': 'Maggie',
        'SBTC': 'Super Bitcoin',
        'TRADE': 'Unitrade',
        'YOYO': 'YOYOW',
        'WIN': 'WinToken' // https://github.com/ccxt/ccxt/issues/5701
      }
    });
  }

  handleMarketTypeAndParams(methodName, market = undefined, params = {}) {
    const instType = this.safeString(params, 'instType');
    params = this.omit(params, 'instType');
    const type = this.safeString(params, 'type');
    if (type === undefined && instType !== undefined) {
      params['type'] = instType;
    }
    return super.handleMarketTypeAndParams(methodName, market, params);
  }
  convertToInstrumentType(type) {
    const exchangeTypes = this.safeValue(this.options, 'exchangeType', {});
    return this.safeString(exchangeTypes, type, type);
  }
  async fetchStatus(params = {}) {
    /**
     * @method
     * @name okx#fetchStatus
     * @description the latest known information on the availability of the exchange API
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
     */
    const response = await this.publicGetSystemStatus(params);
    //
    // Note, if there is no maintenance around, the 'data' array is empty
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "begin": "1621328400000",
    //                 "end": "1621329000000",
    //                 "href": "https://www.okx.com/support/hc/en-us/articles/360060882172",
    //                 "scheDesc": "",
    //                 "serviceType": "1", // 0 WebSocket, 1 Spot/Margin, 2 Futures, 3 Perpetual, 4 Options, 5 Trading service
    //                 "state": "scheduled", // ongoing, completed, canceled
    //                 "system": "classic", // classic, unified
    //                 "title": "Classic Spot System Upgrade"
    //             },
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const dataLength = data.length;
    const update = {
      'updated': undefined,
      'status': dataLength === 0 ? 'ok' : 'maintenance',
      'eta': undefined,
      'url': undefined,
      'info': response
    };
    for (let i = 0; i < data.length; i++) {
      const event = data[i];
      const state = this.safeString(event, 'state');
      if (state === 'ongoing') {
        update['eta'] = this.safeInteger(event, 'end');
        update['status'] = 'maintenance';
      }
    }
    return update;
  }
  async fetchTime(params = {}) {
    /**
     * @method
     * @name okx#fetchTime
     * @description fetches the current integer timestamp in milliseconds from the exchange server
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {int} the current integer timestamp in milliseconds from the exchange server
     */
    const response = await this.publicGetPublicTime(params);
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {"ts": "1621247923668"}
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const first = this.safeValue(data, 0, {});
    return this.safeInteger(first, 'ts');
  }
  async fetchAccounts(params = {}) {
    /**
     * @method
     * @name okx#fetchAccounts
     * @description fetch all the accounts associated with a profile
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
     */
    const response = await this.privateGetAccountConfig(params);
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "acctLv": "2",
    //                 "autoLoan": false,
    //                 "ctIsoMode": "automatic",
    //                 "greeksType": "PA",
    //                 "level": "Lv1",
    //                 "levelTmp": "",
    //                 "mgnIsoMode": "automatic",
    //                 "posMode": "long_short_mode",
    //                 "uid": "88018754289672195"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const result = [];
    for (let i = 0; i < data.length; i++) {
      const account = data[i];
      const accountId = this.safeString(account, 'uid');
      const type = this.safeString(account, 'acctLv');
      result.push({
        'id': accountId,
        'type': type,
        'currency': undefined,
        'info': account
      });
    }
    return result;
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name okx#fetchMarkets
     * @description retrieves data on all markets for okx
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    const types = this.safeValue(this.options, 'fetchMarkets');
    let promises = [];
    let result = [];
    for (let i = 0; i < types.length; i++) {
      promises.push(this.fetchMarketsByType(types[i], params));
    }
    // why not both ¯\_(ツ)_/¯
    promises = await Promise.all(promises);
    for (let i = 0; i < promises.length; i++) {
      result = this.arrayConcat(result, promises[i]);
    }
    return result;
  }
  parseMarkets(markets) {
    const result = [];
    for (let i = 0; i < markets.length; i++) {
      result.push(this.parseMarket(markets[i]));
    }
    return result;
  }
  parseMarket(market) {
    //
    //     {
    //         "alias": "", // this_week, next_week, quarter, next_quarter
    //         "baseCcy": "BTC",
    //         "category": "1",
    //         "ctMult": "",
    //         "ctType": "", // inverse, linear
    //         "ctVal": "",
    //         "ctValCcy": "",
    //         "expTime": "",
    //         "instId": "BTC-USDT", // BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
    //         "instType": "SPOT", // SPOT, FUTURES, SWAP, OPTION
    //         "lever": "10",
    //         "listTime": "1548133413000",
    //         "lotSz": "0.00000001",
    //         "minSz": "0.00001",
    //         "optType": "",
    //         "quoteCcy": "USDT",
    //         "settleCcy": "",
    //         "state": "live",
    //         "stk": "",
    //         "tickSz": "0.1",
    //         "uly": ""
    //     }
    //
    //     {
    //         alias: "",
    //         baseCcy: "",
    //         category: "1",
    //         ctMult: "0.1",
    //         ctType: "",
    //         ctVal: "1",
    //         ctValCcy: "BTC",
    //         expTime: "1648195200000",
    //         instId: "BTC-USD-220325-194000-P",
    //         instType: "OPTION",
    //         lever: "",
    //         listTime: "1631262612280",
    //         lotSz: "1",
    //         minSz: "1",
    //         optType: "P",
    //         quoteCcy: "",
    //         settleCcy: "BTC",
    //         state: "live",
    //         stk: "194000",
    //         tickSz: "0.0005",
    //         uly: "BTC-USD"
    //     }
    //
    const id = this.safeString(market, 'instId');
    let type = this.safeStringLower(market, 'instType');
    if (type === 'futures') {
      type = 'future';
    }
    const spot = type === 'spot';
    const future = type === 'future';
    const swap = type === 'swap';
    const option = type === 'option';
    const contract = swap || future || option;
    let baseId = this.safeString(market, 'baseCcy');
    let quoteId = this.safeString(market, 'quoteCcy');
    const settleId = this.safeString(market, 'settleCcy');
    const settle = this.safeCurrencyCode(settleId);
    const underlying = this.safeString(market, 'uly');
    if (underlying !== undefined && !spot) {
      const parts = underlying.split('-');
      baseId = this.safeString(parts, 0);
      quoteId = this.safeString(parts, 1);
    }
    const base = this.safeCurrencyCode(baseId);
    const quote = this.safeCurrencyCode(quoteId);
    let symbol = base + '/' + quote;
    let expiry = undefined;
    let strikePrice = undefined;
    let optionType = undefined;
    if (contract) {
      symbol = symbol + ':' + settle;
      expiry = this.safeInteger(market, 'expTime');
      if (future) {
        const ymd = this.yymmdd(expiry);
        symbol = symbol + '-' + ymd;
      } else if (option) {
        strikePrice = this.safeString(market, 'stk');
        optionType = this.safeString(market, 'optType');
        const ymd = this.yymmdd(expiry);
        symbol = symbol + '-' + ymd + '-' + strikePrice + '-' + optionType;
        optionType = optionType === 'P' ? 'put' : 'call';
      }
    }
    const tickSize = this.safeString(market, 'tickSz');
    const minAmountString = this.safeString(market, 'minSz');
    const minAmount = this.parseNumber(minAmountString);
    const fees = this.safeValue2(this.fees, type, 'trading', {});
    const precisionPrice = this.parseNumber(tickSize);
    let maxLeverage = this.safeString(market, 'lever', '1');
    maxLeverage = _Precise.Precise.stringMax(maxLeverage, '1');
    return this.extend(fees, {
      'id': id,
      'symbol': symbol,
      'base': base,
      'quote': quote,
      'settle': settle,
      'baseId': baseId,
      'quoteId': quoteId,
      'settleId': settleId,
      'type': type,
      'spot': spot,
      'margin': spot && _Precise.Precise.stringGt(maxLeverage, '1'),
      'swap': swap,
      'future': future,
      'option': option,
      'active': true,
      'contract': contract,
      'linear': contract ? quoteId === settleId : undefined,
      'inverse': contract ? baseId === settleId : undefined,
      'contractSize': contract ? this.safeNumber(market, 'ctVal') : undefined,
      'expiry': expiry,
      'expiryDatetime': this.iso8601(expiry),
      'strike': strikePrice,
      'optionType': optionType,
      'precision': {
        'amount': this.safeNumber(market, 'lotSz'),
        'price': precisionPrice
      },
      'limits': {
        'leverage': {
          'min': this.parseNumber('1'),
          'max': this.parseNumber(maxLeverage)
        },
        'amount': {
          'min': minAmount,
          'max': undefined
        },
        'price': {
          'min': precisionPrice,
          'max': undefined
        },
        'cost': {
          'min': undefined,
          'max': undefined
        }
      },
      'info': market
    });
  }
  async fetchMarketsByType(type, params = {}) {
    const request = {
      'instType': this.convertToInstrumentType(type)
    };
    if (type === 'option') {
      const defaultUnderlying = this.safeValue(this.options, 'defaultUnderlying', 'BTC-USD');
      const currencyId = this.safeString2(params, 'uly', 'marketId', defaultUnderlying);
      if (currencyId === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchMarketsByType() requires an underlying uly or marketId parameter for options markets');
      } else {
        request['uly'] = currencyId;
      }
    }
    const response = await this.publicGetPublicInstruments(this.extend(request, params));
    //
    // spot, future, swap, option
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "alias": "", // this_week, next_week, quarter, next_quarter
    //                 "baseCcy": "BTC",
    //                 "category": "1",
    //                 "ctMult": "",
    //                 "ctType": "", // inverse, linear
    //                 "ctVal": "",
    //                 "ctValCcy": "",
    //                 "expTime": "",
    //                 "instId": "BTC-USDT", // BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
    //                 "instType": "SPOT", // SPOT, FUTURES, SWAP, OPTION
    //                 "lever": "10",
    //                 "listTime": "1548133413000",
    //                 "lotSz": "0.00000001",
    //                 "minSz": "0.00001",
    //                 "optType": "",
    //                 "quoteCcy": "USDT",
    //                 "settleCcy": "",
    //                 "state": "live",
    //                 "stk": "",
    //                 "tickSz": "0.1",
    //                 "uly": ""
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseMarkets(data);
  }
  safeNetwork(networkId) {
    const networksById = {
      'Bitcoin': 'BTC',
      'Omni': 'OMNI',
      'TRON': 'TRC20'
    };
    return this.safeString(networksById, networkId, networkId);
  }
  async fetchCurrencies(params = {}) {
    /**
     * @method
     * @name okx#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-currencies
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} an associative dictionary of currencies
     */
    // this endpoint requires authentication
    // while fetchCurrencies is a public API method by design
    // therefore we check the keys here
    // and fallback to generating the currencies from the markets
    if (!this.checkRequiredCredentials(false)) {
      return undefined;
    }
    //
    // has['fetchCurrencies'] is currently set to true, but an unauthorized request returns
    //
    //     {"msg":"Request header “OK_ACCESS_KEY“ can't be empty.","code":"50103"}
    //
    const response = await this.privateGetAssetCurrencies(params);
    //
    //    {
    //        "code": "0",
    //        "data": [
    //            {
    //                "canDep": true,
    //                "canInternal": false,
    //                "canWd": true,
    //                "ccy": "USDT",
    //                "chain": "USDT-TRC20",
    //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
    //                "mainNet": false,
    //                "maxFee": "1.6",
    //                "maxWd": "8852150",
    //                "minFee": "0.8",
    //                "minWd": "2",
    //                "name": "Tether",
    //                "usedWdQuota": "0",
    //                "wdQuota": "500",
    //                "wdTickSz": "3"
    //            },
    //            {
    //                "canDep": true,
    //                "canInternal": false,
    //                "canWd": true,
    //                "ccy": "USDT",
    //                "chain": "USDT-ERC20",
    //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
    //                "mainNet": false,
    //                "maxFee": "16",
    //                "maxWd": "8852150",
    //                "minFee": "8",
    //                "minWd": "2",
    //                "name": "Tether",
    //                "usedWdQuota": "0",
    //                "wdQuota": "500",
    //                "wdTickSz": "3"
    //            },
    //            ...
    //        ],
    //        "msg": ""
    //    }
    //
    const data = this.safeValue(response, 'data', []);
    const result = {};
    const dataByCurrencyId = this.groupBy(data, 'ccy');
    const currencyIds = Object.keys(dataByCurrencyId);
    for (let i = 0; i < currencyIds.length; i++) {
      const currencyId = currencyIds[i];
      const currency = this.safeCurrency(currencyId);
      const code = currency['code'];
      const chains = dataByCurrencyId[currencyId];
      const networks = {};
      let currencyActive = false;
      let depositEnabled = undefined;
      let withdrawEnabled = undefined;
      let maxPrecision = undefined;
      for (let j = 0; j < chains.length; j++) {
        const chain = chains[j];
        const canDeposit = this.safeValue(chain, 'canDep');
        const canWithdraw = this.safeValue(chain, 'canWd');
        const canInternal = this.safeValue(chain, 'canInternal');
        const active = canDeposit && canWithdraw && canInternal ? true : false;
        currencyActive = currencyActive === undefined ? active : currencyActive;
        const networkId = this.safeString(chain, 'chain');
        if (canDeposit && !depositEnabled) {
          depositEnabled = true;
        } else if (!canDeposit) {
          depositEnabled = false;
        }
        if (canWithdraw && !withdrawEnabled) {
          withdrawEnabled = true;
        } else if (!canWithdraw) {
          withdrawEnabled = false;
        }
        if (networkId !== undefined && networkId.indexOf('-') >= 0) {
          const parts = networkId.split('-');
          const chainPart = this.safeString(parts, 1, networkId);
          const networkCode = this.safeNetwork(chainPart);
          const precision = this.parsePrecision(this.safeString(chain, 'wdTickSz'));
          if (maxPrecision === undefined) {
            maxPrecision = precision;
          } else {
            maxPrecision = _Precise.Precise.stringMin(maxPrecision, precision);
          }
          networks[networkCode] = {
            'id': networkId,
            'network': networkCode,
            'active': active,
            'deposit': canDeposit,
            'withdraw': canWithdraw,
            'fee': this.safeNumber(chain, 'minFee'),
            'precision': this.parseNumber(precision),
            'limits': {
              'withdraw': {
                'min': this.safeNumber(chain, 'minWd'),
                'max': this.safeNumber(chain, 'maxWd')
              }
            },
            'info': chain
          };
        }
      }
      const firstChain = this.safeValue(chains, 0);
      result[code] = {
        'info': undefined,
        'code': code,
        'id': currencyId,
        'name': this.safeString(firstChain, 'name'),
        'active': currencyActive,
        'deposit': depositEnabled,
        'withdraw': withdrawEnabled,
        'fee': undefined,
        'precision': this.parseNumber(maxPrecision),
        'limits': {
          'amount': {
            'min': undefined,
            'max': undefined
          }
        },
        'networks': networks
      };
    }
    return result;
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instId': market['id']
    };
    limit = limit === undefined ? 20 : limit;
    if (limit !== undefined) {
      request['sz'] = limit; // max 400
    }

    const response = await this.publicGetMarketBooks(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "asks": [
    //                     ["0.07228","4.211619","0","2"], // price, amount, liquidated orders, total open orders
    //                     ["0.0723","299.880364","0","2"],
    //                     ["0.07231","3.72832","0","1"],
    //                 ],
    //                 "bids": [
    //                     ["0.07221","18.5","0","1"],
    //                     ["0.0722","18.5","0","1"],
    //                     ["0.07219","0.505407","0","1"],
    //                 ],
    //                 "ts": "1621438475342"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const first = this.safeValue(data, 0, {});
    const timestamp = this.safeInteger(first, 'ts');
    return this.parseOrderBook(first, symbol, timestamp);
  }
  parseTicker(ticker, market = undefined) {
    //
    //     {
    //         "instType": "SPOT",
    //         "instId": "ETH-BTC",
    //         "last": "0.07319",
    //         "lastSz": "0.044378",
    //         "askPx": "0.07322",
    //         "askSz": "4.2",
    //         "bidPx": "0.0732",
    //         "bidSz": "6.050058",
    //         "open24h": "0.07801",
    //         "high24h": "0.07975",
    //         "low24h": "0.06019",
    //         "volCcy24h": "11788.887619",
    //         "vol24h": "167493.829229",
    //         "ts": "1621440583784",
    //         "sodUtc0": "0.07872",
    //         "sodUtc8": "0.07345"
    //     }
    //
    const timestamp = this.safeInteger(ticker, 'ts');
    const marketId = this.safeString(ticker, 'instId');
    market = this.safeMarket(marketId, market, '-');
    const symbol = market['symbol'];
    const last = this.safeString(ticker, 'last');
    const open = this.safeString(ticker, 'open24h');
    const spot = this.safeValue(market, 'spot', false);
    const quoteVolume = spot ? this.safeString(ticker, 'volCcy24h') : undefined;
    const baseVolume = this.safeString(ticker, 'vol24h');
    const high = this.safeString(ticker, 'high24h');
    const low = this.safeString(ticker, 'low24h');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': high,
      'low': low,
      'bid': this.safeString(ticker, 'bidPx'),
      'bidVolume': this.safeString(ticker, 'bidSz'),
      'ask': this.safeString(ticker, 'askPx'),
      'askVolume': this.safeString(ticker, 'askSz'),
      'vwap': undefined,
      'open': open,
      'close': last,
      'last': last,
      'previousClose': undefined,
      'change': undefined,
      'percentage': undefined,
      'average': undefined,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    }, market);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instId': market['id']
    };
    const response = await this.publicGetMarketTicker(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "instType": "SPOT",
    //                 "instId": "ETH-BTC",
    //                 "last": "0.07319",
    //                 "lastSz": "0.044378",
    //                 "askPx": "0.07322",
    //                 "askSz": "4.2",
    //                 "bidPx": "0.0732",
    //                 "bidSz": "6.050058",
    //                 "open24h": "0.07801",
    //                 "high24h": "0.07975",
    //                 "low24h": "0.06019",
    //                 "volCcy24h": "11788.887619",
    //                 "vol24h": "167493.829229",
    //                 "ts": "1621440583784",
    //                 "sodUtc0": "0.07872",
    //                 "sodUtc8": "0.07345"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const first = this.safeValue(data, 0, {});
    return this.parseTicker(first, market);
  }
  async fetchTickersByType(type, symbols = undefined, params = {}) {
    await this.loadMarkets();
    const request = {
      'instType': this.convertToInstrumentType(type)
    };
    if (type === 'option') {
      const defaultUnderlying = this.safeValue(this.options, 'defaultUnderlying', 'BTC-USD');
      const currencyId = this.safeString2(params, 'uly', 'marketId', defaultUnderlying);
      if (currencyId === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' fetchTickersByType() requires an underlying uly or marketId parameter for options markets');
      } else {
        request['uly'] = currencyId;
      }
    }
    const response = await this.publicGetMarketTickers(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "instType": "SPOT",
    //                 "instId": "BCD-BTC",
    //                 "last": "0.0000769",
    //                 "lastSz": "5.4788",
    //                 "askPx": "0.0000777",
    //                 "askSz": "3.2197",
    //                 "bidPx": "0.0000757",
    //                 "bidSz": "4.7509",
    //                 "open24h": "0.0000885",
    //                 "high24h": "0.0000917",
    //                 "low24h": "0.0000596",
    //                 "volCcy24h": "9.2877",
    //                 "vol24h": "124824.1985",
    //                 "ts": "1621441741434",
    //                 "sodUtc0": "0.0000905",
    //                 "sodUtc8": "0.0000729"
    //             },
    //         ]
    //     }
    //
    const tickers = this.safeValue(response, 'data', []);
    return this.parseTickers(tickers, symbols);
  }
  async fetchTickers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchTickers
     * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
     * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const first = this.safeString(symbols, 0);
    let market = undefined;
    if (first !== undefined) {
      market = this.market(first);
    }
    const [type, query] = this.handleMarketTypeAndParams('fetchTickers', market, params);
    return await this.fetchTickersByType(type, symbols, query);
  }
  parseTrade(trade, market = undefined) {
    //
    // public fetchTrades
    //
    //     {
    //         "instId": "ETH-BTC",
    //         "side": "sell",
    //         "sz": "0.119501",
    //         "px": "0.07065",
    //         "tradeId": "15826757",
    //         "ts": "1621446178316"
    //     }
    //
    // private fetchMyTrades
    //
    //     {
    //         "side": "buy",
    //         "fillSz": "0.007533",
    //         "fillPx": "2654.98",
    //         "fee": "-0.000007533",
    //         "ordId": "317321390244397056",
    //         "instType": "SPOT",
    //         "instId": "ETH-USDT",
    //         "clOrdId": "",
    //         "posSide": "net",
    //         "billId": "317321390265368576",
    //         "tag": "0",
    //         "execType": "T",
    //         "tradeId": "107601752",
    //         "feeCcy": "ETH",
    //         "ts": "1621927314985"
    //     }
    //
    const id = this.safeString(trade, 'tradeId');
    const marketId = this.safeString(trade, 'instId');
    market = this.safeMarket(marketId, market, '-');
    const symbol = market['symbol'];
    const timestamp = this.safeInteger(trade, 'ts');
    const price = this.safeString2(trade, 'fillPx', 'px');
    const amount = this.safeString2(trade, 'fillSz', 'sz');
    const side = this.safeString(trade, 'side');
    const orderId = this.safeString(trade, 'ordId');
    const feeCostString = this.safeString(trade, 'fee');
    let fee = undefined;
    if (feeCostString !== undefined) {
      const feeCostSigned = _Precise.Precise.stringNeg(feeCostString);
      const feeCurrencyId = this.safeString(trade, 'feeCcy');
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': feeCostSigned,
        'currency': feeCurrencyCode
      };
    }
    let takerOrMaker = this.safeString(trade, 'execType');
    if (takerOrMaker === 'T') {
      takerOrMaker = 'taker';
    } else if (takerOrMaker === 'M') {
      takerOrMaker = 'maker';
    }
    return this.safeTrade({
      'info': trade,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'id': id,
      'order': orderId,
      'type': undefined,
      'takerOrMaker': takerOrMaker,
      'side': side,
      'price': price,
      'amount': amount,
      'cost': undefined,
      'fee': fee
    }, market);
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instId': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit; // default 100
    }

    const response = await this.publicGetMarketTrades(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {"instId":"ETH-BTC","side":"sell","sz":"0.119501","px":"0.07065","tradeId":"15826757","ts":"1621446178316"},
    //             {"instId":"ETH-BTC","side":"sell","sz":"0.03","px":"0.07068","tradeId":"15826756","ts":"1621446178066"},
    //             {"instId":"ETH-BTC","side":"buy","sz":"0.507","px":"0.07069","tradeId":"15826755","ts":"1621446175085"},
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseTrades(data, market, since, limit);
  }
  parseOHLCV(ohlcv, market = undefined) {
    //
    //     [
    //         "1678928760000", // timestamp
    //         "24341.4", // open
    //         "24344", // high
    //         "24313.2", // low
    //         "24323", // close
    //         "628", // contract volume
    //         "2.5819", // base volume
    //         "62800", // quote volume
    //         "0" // candlestick state
    //     ]
    //
    const res = this.handleMarketTypeAndParams('fetchOHLCV', market, undefined);
    const type = res[0];
    const volumeIndex = type === 'spot' ? 5 : 6;
    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, volumeIndex)];
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-candlesticks
     * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-candlesticks-history
     * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-mark-price-candlesticks
     * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-mark-price-candlesticks-history
     * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-index-candlesticks
     * @see https://www.okx.com/docs-v5/en/#rest-api-market-data-get-index-candlesticks-history
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string|undefined} params.price "mark" or "index" for mark price and index price candles
     * @param {int|undefined} params.until timestamp in ms of the latest candle to fetch
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const price = this.safeString(params, 'price');
    params = this.omit(params, 'price');
    const options = this.safeValue(this.options, 'fetchOHLCV', {});
    const timezone = this.safeString(options, 'timezone', 'UTC');
    if (limit === undefined) {
      limit = 100; // default 100, max 100
    }

    const duration = this.parseTimeframe(timeframe);
    let bar = this.safeString(this.timeframes, timeframe, timeframe);
    if (timezone === 'UTC' && duration >= 21600) {
      // if utc and timeframe >= 6h
      bar += timezone.toLowerCase();
    }
    const request = {
      'instId': market['id'],
      'bar': bar,
      'limit': limit
    };
    let defaultType = 'Candles';
    if (since !== undefined) {
      const now = this.milliseconds();
      const difference = now - since;
      // if the since timestamp is more than limit candles back in the past
      if (difference > 1440 * duration * 1000) {
        defaultType = 'HistoryCandles';
      }
      const durationInMilliseconds = duration * 1000;
      const startTime = Math.max(since - 1, 0);
      request['before'] = startTime;
      request['after'] = this.sum(startTime, durationInMilliseconds * limit);
    }
    const until = this.safeInteger(params, 'until');
    if (until !== undefined) {
      request['after'] = until;
      params = this.omit(params, 'until');
    }
    defaultType = this.safeString(options, 'type', defaultType); // Candles or HistoryCandles
    const type = this.safeString(params, 'type', defaultType);
    params = this.omit(params, 'type');
    let method = 'publicGetMarket' + type;
    const isHistoryCandles = type === 'HistoryCandles';
    if (price === 'mark') {
      method = isHistoryCandles ? 'publicGetMarketHistoryMarkPriceCandles' : 'publicGetMarketMarkPriceCandles';
    } else if (price === 'index') {
      method = isHistoryCandles ? 'publicGetMarketHistoryIndexCandles' : 'publicGetMarketIndexCandles';
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             ["1678928760000","24341.4","24344","24313.2","24323","628","2.5819","62800","0"],
    //             ["1678928700000","24324.1","24347.6","24321.7","24341.4","2565","10.5401","256500","1"],
    //             ["1678928640000","24300.2","24324.1","24288","24324.1","3304","13.5937","330400","1"],
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseOHLCVs(data, market, timeframe, since, limit);
  }
  async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchFundingRateHistory
     * @description fetches historical funding rate prices
     * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
     * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
     * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchFundingRateHistory() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instId': market['id']
    };
    if (since !== undefined) {
      request['before'] = Math.max(since - 1, 0);
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.publicGetPublicFundingRateHistory(this.extend(request, params));
    //
    //     {
    //         "code":"0",
    //         "msg":"",
    //         "data":[
    //             {
    //                 "instType":"SWAP",
    //                 "instId":"BTC-USDT-SWAP",
    //                 "fundingRate":"0.018",
    //                 "realizedRate":"0.017",
    //                 "fundingTime":"1597026383085"
    //             },
    //             {
    //                 "instType":"SWAP",
    //                 "instId":"BTC-USDT-SWAP",
    //                 "fundingRate":"0.018",
    //                 "realizedRate":"0.017",
    //                 "fundingTime":"1597026383085"
    //             }
    //         ]
    //     }
    //
    const rates = [];
    const data = this.safeValue(response, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const rate = data[i];
      const timestamp = this.safeNumber(rate, 'fundingTime');
      rates.push({
        'info': rate,
        'symbol': this.safeSymbol(this.safeString(rate, 'instId')),
        'fundingRate': this.safeNumber(rate, 'realizedRate'),
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp)
      });
    }
    const sorted = this.sortBy(rates, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, market['symbol'], since, limit);
  }
  parseBalanceByType(type, response) {
    if (type === 'funding') {
      return this.parseFundingBalance(response);
    } else {
      return this.parseTradingBalance(response);
    }
  }
  parseTradingBalance(response) {
    const result = {
      'info': response
    };
    const data = this.safeValue(response, 'data', []);
    const first = this.safeValue(data, 0, {});
    const timestamp = this.safeInteger(first, 'uTime');
    const details = this.safeValue(first, 'details', []);
    for (let i = 0; i < details.length; i++) {
      const balance = details[i];
      const currencyId = this.safeString(balance, 'ccy');
      const code = this.safeCurrencyCode(currencyId);
      const account = this.account();
      // it may be incorrect to use total, free and used for swap accounts
      const eq = this.safeString(balance, 'eq');
      const availEq = this.safeString(balance, 'availEq');
      if (eq === undefined || availEq === undefined) {
        account['free'] = this.safeString(balance, 'availBal');
        account['used'] = this.safeString(balance, 'frozenBal');
      } else {
        account['total'] = eq;
        account['free'] = availEq;
      }
      result[code] = account;
    }
    result['timestamp'] = timestamp;
    result['datetime'] = this.iso8601(timestamp);
    return this.safeBalance(result);
  }
  parseFundingBalance(response) {
    const result = {
      'info': response
    };
    const data = this.safeValue(response, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const balance = data[i];
      const currencyId = this.safeString(balance, 'ccy');
      const code = this.safeCurrencyCode(currencyId);
      const account = this.account();
      // it may be incorrect to use total, free and used for swap accounts
      account['total'] = this.safeString(balance, 'bal');
      account['free'] = this.safeString(balance, 'availBal');
      account['used'] = this.safeString(balance, 'frozenBal');
      result[code] = account;
    }
    return this.safeBalance(result);
  }
  parseTradingFee(fee, market = undefined) {
    // https://www.okx.com/docs-v5/en/#rest-api-account-get-fee-rates
    //
    //     {
    //         "category": "1",
    //         "delivery": "",
    //         "exercise": "",
    //         "instType": "SPOT",
    //         "level": "Lv1",
    //         "maker": "-0.0008",
    //         "taker": "-0.001",
    //         "ts": "1639043138472"
    //     }
    //
    return {
      'info': fee,
      'symbol': this.safeSymbol(undefined, market),
      // OKX returns the fees as negative values opposed to other exchanges, so the sign needs to be flipped
      'maker': this.parseNumber(_Precise.Precise.stringNeg(this.safeString2(fee, 'maker', 'makerU'))),
      'taker': this.parseNumber(_Precise.Precise.stringNeg(this.safeString2(fee, 'taker', 'takerU')))
    };
  }
  async fetchTradingFee(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchTradingFee
     * @description fetch the trading fees for a market
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instType': this.convertToInstrumentType(market['type']) // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'instId': market['id'], // only applicable to SPOT/MARGIN
      // 'uly': market['id'], // only applicable to FUTURES/SWAP/OPTION
      // 'category': '1', // 1 = Class A, 2 = Class B, 3 = Class C, 4 = Class D
    };

    if (market['spot']) {
      request['instId'] = market['id'];
    } else if (market['swap'] || market['future'] || market['option']) {
      request['uly'] = market['baseId'] + '-' + market['quoteId'];
    } else {
      throw new _errors.NotSupported(this.id + ' fetchTradingFee() supports spot, swap, future or option markets only');
    }
    const response = await this.privateGetAccountTradeFee(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "category": "1",
    //                 "delivery": "",
    //                 "exercise": "",
    //                 "instType": "SPOT",
    //                 "level": "Lv1",
    //                 "maker": "-0.0008",
    //                 "taker": "-0.001",
    //                 "ts": "1639043138472"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const first = this.safeValue(data, 0, {});
    return this.parseTradingFee(first, market);
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name okx#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const [marketType, query] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
    let method = undefined;
    if (marketType === 'funding') {
      method = 'privateGetAssetBalances';
    } else {
      method = 'privateGetAccountBalance';
    }
    const request = {
      // 'ccy': 'BTC,ETH', // comma-separated list of currency ids
    };
    const response = await this[method](this.extend(request, query));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "adjEq": "",
    //                 "details": [
    //                     {
    //                         "availBal": "",
    //                         "availEq": "28.21006347",
    //                         "cashBal": "28.21006347",
    //                         "ccy": "USDT",
    //                         "crossLiab": "",
    //                         "disEq": "28.2687404020176",
    //                         "eq":"28 .21006347",
    //                         "eqUsd": "28.2687404020176",
    //                         "frozenBal": "0",
    //                         "interest": "",
    //                         "isoEq": "0",
    //                         "isoLiab": "",
    //                         "liab": "",
    //                         "maxLoan": "",
    //                         "mgnRatio": "",
    //                         "notionalLever": "0",
    //                         "ordFrozen": "0",
    //                         "twap": "0",
    //                         "uTime": "1621556539861",
    //                         "upl": "0",
    //                         "uplLiab": ""
    //                     }
    //                 ],
    //                 "imr": "",
    //                 "isoEq": "0",
    //                 "mgnRatio": "",
    //                 "mmr": "",
    //                 "notionalUsd": "",
    //                 "ordFroz": "",
    //                 "totalEq": "28.2687404020176",
    //                 "uTime": "1621556553510"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "adjEq": "",
    //                 "details": [
    //                     {
    //                         "availBal": "0.049",
    //                         "availEq": "",
    //                         "cashBal": "0.049",
    //                         "ccy": "BTC",
    //                         "crossLiab": "",
    //                         "disEq": "1918.55678",
    //                         "eq": "0.049",
    //                         "eqUsd": "1918.55678",
    //                         "frozenBal": "0",
    //                         "interest": "",
    //                         "isoEq": "",
    //                         "isoLiab": "",
    //                         "liab": "",
    //                         "maxLoan": "",
    //                         "mgnRatio": "",
    //                         "notionalLever": "",
    //                         "ordFrozen": "0",
    //                         "twap": "0",
    //                         "uTime": "1621973128591",
    //                         "upl": "",
    //                         "uplLiab": ""
    //                     }
    //                 ],
    //                 "imr": "",
    //                 "isoEq": "",
    //                 "mgnRatio": "",
    //                 "mmr": "",
    //                 "notionalUsd": "",
    //                 "ordFroz": "",
    //                 "totalEq": "1918.55678",
    //                 "uTime": "1622045126908"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    // funding
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "availBal": "0.00005426",
    //                 "bal": 0.0000542600000000,
    //                 "ccy": "BTC",
    //                 "frozenBal": "0"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    return this.parseBalanceByType(marketType, response);
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name okx#createOrder
     * @description create a trade order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {bool|undefined} params.reduceOnly MARGIN orders only, or swap/future orders in net mode
     * @param {bool|undefined} params.postOnly true to place a post only order
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instId': market['id'],
      // 'ccy': currency['id'], // only applicable to cross MARGIN orders in single-currency margin
      // 'clOrdId': clientOrderId, // up to 32 characters, must be unique
      // 'tag': tag, // up to 8 characters
      'side': side,
      // 'posSide': 'long', // long, short, // required in the long/short mode, and can only be long or short (only for future or swap)
      'ordType': type,
      // 'ordType': type, // privatePostTradeOrder: market, limit, post_only, fok, ioc, optimal_limit_ioc
      // 'ordType': type, // privatePostTradeOrderAlgo: conditional, oco, trigger, move_order_stop, iceberg, twap
      'sz': this.amountToPrecision(symbol, amount)
      // 'px': this.priceToPrecision (symbol, price), // limit orders only
      // 'reduceOnly': false,
      //
      // 'triggerPx': 10, // stopPrice (trigger orders)
      // 'orderPx': 10, // Order price if -1, the order will be executed at the market price. (trigger orders)
      // 'triggerPxType': 'last', // Conditional default is last, mark or index (trigger orders)
      //
      // 'tpTriggerPx': 10, // takeProfitPrice (conditional orders)
      // 'tpTriggerPxType': 'last', // Conditional default is last, mark or index (conditional orders)
      // 'tpOrdPx': 10, // Order price for Take-Profit orders, if -1 will be executed at market price (conditional orders)
      //
      // 'slTriggerPx': 10, // stopLossPrice (conditional orders)
      // 'slTriggerPxType': 'last', // Conditional default is last, mark or index (conditional orders)
      // 'slOrdPx': 10, // Order price for Stop-Loss orders, if -1 will be executed at market price (conditional orders)
    };

    const spot = market['spot'];
    const contract = market['contract'];
    const triggerPrice = this.safeValueN(params, ['triggerPrice', 'stopPrice', 'triggerPx']);
    const timeInForce = this.safeString(params, 'timeInForce', 'GTC');
    const takeProfitPrice = this.safeValue2(params, 'takeProfitPrice', 'tpTriggerPx');
    const tpOrdPx = this.safeValue(params, 'tpOrdPx', price);
    const tpTriggerPxType = this.safeString(params, 'tpTriggerPxType', 'last');
    const stopLossPrice = this.safeValue2(params, 'stopLossPrice', 'slTriggerPx');
    const slOrdPx = this.safeValue(params, 'slOrdPx', price);
    const slTriggerPxType = this.safeString(params, 'slTriggerPxType', 'last');
    const clientOrderId = this.safeString2(params, 'clOrdId', 'clientOrderId');
    const defaultMarginMode = this.safeString2(this.options, 'defaultMarginMode', 'marginMode', 'cross');
    let marginMode = this.safeString2(params, 'marginMode', 'tdMode'); // cross or isolated, tdMode not ommited so as to be extended into the request
    let margin = false;
    if (marginMode !== undefined && marginMode !== 'cash') {
      margin = true;
    } else {
      marginMode = defaultMarginMode;
      margin = this.safeValue(params, 'margin', false);
    }
    if (spot) {
      if (margin) {
        const defaultCurrency = side === 'buy' ? market['quote'] : market['base'];
        const currency = this.safeString(params, 'ccy', defaultCurrency);
        request['ccy'] = this.safeCurrencyCode(currency);
      }
      const tradeMode = margin ? marginMode : 'cash';
      request['tdMode'] = tradeMode;
    } else if (contract) {
      request['tdMode'] = marginMode;
    }
    const isMarketOrder = type === 'market';
    const postOnly = this.isPostOnly(isMarketOrder, type === 'post_only', params);
    params = this.omit(params, ['currency', 'ccy', 'marginMode', 'timeInForce', 'stopPrice', 'triggerPrice', 'clientOrderId', 'stopLossPrice', 'takeProfitPrice', 'slOrdPx', 'tpOrdPx', 'margin']);
    const ioc = timeInForce === 'IOC' || type === 'ioc';
    const fok = timeInForce === 'FOK' || type === 'fok';
    const trigger = triggerPrice !== undefined || type === 'trigger';
    const conditional = stopLossPrice !== undefined || takeProfitPrice !== undefined || type === 'conditional';
    const marketIOC = isMarketOrder && ioc || type === 'optimal_limit_ioc';
    const defaultMethod = this.safeString(this.options, 'createOrder', 'privatePostTradeBatchOrders');
    const defaultTgtCcy = this.safeString(this.options, 'tgtCcy', 'base_ccy');
    const tgtCcy = this.safeString(params, 'tgtCcy', defaultTgtCcy);
    if (!contract && !margin) {
      request['tgtCcy'] = tgtCcy;
    }
    let method = defaultMethod;
    if (isMarketOrder || marketIOC) {
      request['ordType'] = 'market';
      if (spot && side === 'buy') {
        // spot market buy: "sz" can refer either to base currency units or to quote currency units
        // see documentation: https://www.okx.com/docs-v5/en/#rest-api-trade-place-order
        if (tgtCcy === 'quote_ccy') {
          // quote_ccy: sz refers to units of quote currency
          let notional = this.safeNumber2(params, 'cost', 'sz');
          const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);
          if (createMarketBuyOrderRequiresPrice) {
            if (price !== undefined) {
              if (notional === undefined) {
                const amountString = this.numberToString(amount);
                const priceString = this.numberToString(price);
                const quoteAmount = _Precise.Precise.stringMul(amountString, priceString);
                notional = this.parseNumber(quoteAmount);
              }
            } else if (notional === undefined) {
              throw new _errors.InvalidOrder(this.id + " createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'cost' unified extra parameter or in exchange-specific 'sz' extra parameter (the exchange-specific behaviour)");
            }
          } else {
            notional = notional === undefined ? amount : notional;
          }
          request['sz'] = this.costToPrecision(symbol, notional);
          params = this.omit(params, ['cost', 'sz']);
        }
      }
      if (marketIOC && contract) {
        request['ordType'] = 'optimal_limit_ioc';
      }
    } else {
      if (!trigger && !conditional) {
        request['px'] = this.priceToPrecision(symbol, price);
      }
    }
    if (postOnly) {
      method = defaultMethod;
      request['ordType'] = 'post_only';
    } else if (ioc && !marketIOC) {
      method = defaultMethod;
      request['ordType'] = 'ioc';
    } else if (fok) {
      method = defaultMethod;
      request['ordType'] = 'fok';
    } else if (trigger) {
      method = 'privatePostTradeOrderAlgo';
      request['ordType'] = 'trigger';
      request['triggerPx'] = this.priceToPrecision(symbol, triggerPrice);
      request['orderPx'] = isMarketOrder ? '-1' : this.priceToPrecision(symbol, price);
    } else if (conditional) {
      method = 'privatePostTradeOrderAlgo';
      request['ordType'] = 'conditional';
      const twoWayCondition = takeProfitPrice !== undefined && stopLossPrice !== undefined;
      // if TP and SL are sent together
      // as ordType 'conditional' only stop-loss order will be applied
      if (twoWayCondition) {
        request['ordType'] = 'oco';
      }
      if (takeProfitPrice !== undefined) {
        request['tpTriggerPx'] = this.priceToPrecision(symbol, takeProfitPrice);
        request['tpOrdPx'] = tpOrdPx === undefined ? '-1' : this.priceToPrecision(symbol, tpOrdPx);
        request['tpTriggerPxType'] = tpTriggerPxType;
      }
      if (stopLossPrice !== undefined) {
        request['slTriggerPx'] = this.priceToPrecision(symbol, stopLossPrice);
        request['slOrdPx'] = slOrdPx === undefined ? '-1' : this.priceToPrecision(symbol, slOrdPx);
        request['slTriggerPxType'] = slTriggerPxType;
      }
    }
    if (type === 'oco' || type === 'move_order_stop' || type === 'iceberg' || type === 'twap') {
      method = 'privatePostTradeOrderAlgo';
    }
    if (clientOrderId === undefined) {
      const brokerId = this.safeString(this.options, 'brokerId');
      if (brokerId !== undefined) {
        request['clOrdId'] = brokerId + this.uuid16();
        request['tag'] = brokerId;
      }
    } else {
      request['clOrdId'] = clientOrderId;
      params = this.omit(params, ['clOrdId', 'clientOrderId']);
    }
    let extendedRequest = undefined;
    if (method === 'privatePostTradeOrder' || method === 'privatePostTradeOrderAlgo') {
      extendedRequest = this.extend(request, params);
    } else if (method === 'privatePostTradeBatchOrders') {
      // keep the request body the same
      // submit a single order in an array to the batch order endpoint
      // because it has a lower ratelimit
      extendedRequest = [this.extend(request, params)];
    } else {
      throw new _errors.ExchangeError(this.id + ' createOrder() this.options["createOrder"] must be either privatePostTradeBatchOrders or privatePostTradeOrder');
    }
    const response = await this[method](extendedRequest);
    const data = this.safeValue(response, 'data', []);
    const first = this.safeValue(data, 0);
    const order = this.parseOrder(first, market);
    return this.extend(order, {
      'type': type,
      'side': side
    });
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    const stop = this.safeValue(params, 'stop');
    if (stop) {
      const order = await this.cancelOrders([id], symbol, params);
      return this.safeValue(order, 0);
    }
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instId': market['id']
      // 'ordId': id, // either ordId or clOrdId is required
      // 'clOrdId': clientOrderId,
    };

    const clientOrderId = this.safeString2(params, 'clOrdId', 'clientOrderId');
    if (clientOrderId !== undefined) {
      request['clOrdId'] = clientOrderId;
    } else {
      request['ordId'] = id;
    }
    const query = this.omit(params, ['clOrdId', 'clientOrderId']);
    const response = await this.privatePostTradeCancelOrder(this.extend(request, query));
    // {"code":"0","data":[{"clOrdId":"","ordId":"317251910906576896","sCode":"0","sMsg":""}],"msg":""}
    const data = this.safeValue(response, 'data', []);
    const order = this.safeValue(data, 0);
    return this.parseOrder(order, market);
  }
  parseIds(ids) {
    /**
     * @ignore
     * @method
     * @name okx#parseIds
     * @param {[str]|str} ids order ids
     * @returns {[str]} list of order ids
     */
    if (typeof ids === 'string') {
      return ids.split(',');
    } else {
      return ids;
    }
  }
  async cancelOrders(ids, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#cancelOrders
     * @description cancel multiple orders
     * @param {[string]} ids order ids
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    // TODO : the original endpoint signature differs, according to that you can skip individual symbol and assign ids in batch. At this moment, `params` is not being used too.
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = [];
    const options = this.safeValue(this.options, 'cancelOrders', {});
    const defaultMethod = this.safeString(options, 'method', 'privatePostTradeCancelBatchOrders');
    let method = this.safeString(params, 'method', defaultMethod);
    const clientOrderIds = this.parseIds(this.safeValue2(params, 'clOrdId', 'clientOrderId'));
    const algoIds = this.parseIds(this.safeValue(params, 'algoId'));
    const stop = this.safeValue(params, 'stop');
    if (stop) {
      method = 'privatePostTradeCancelAlgos';
    }
    if (clientOrderIds === undefined) {
      ids = this.parseIds(ids);
      if (algoIds !== undefined) {
        for (let i = 0; i < algoIds.length; i++) {
          request.push({
            'algoId': algoIds[i],
            'instId': market['id']
          });
        }
      }
      for (let i = 0; i < ids.length; i++) {
        if (stop) {
          request.push({
            'algoId': ids[i],
            'instId': market['id']
          });
        } else {
          request.push({
            'ordId': ids[i],
            'instId': market['id']
          });
        }
      }
    } else {
      for (let i = 0; i < clientOrderIds.length; i++) {
        request.push({
          'instId': market['id'],
          'clOrdId': clientOrderIds[i]
        });
      }
    }
    const response = await this[method](request); // * dont extend with params, otherwise ARRAY will be turned into OBJECT
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "clOrdId": "e123456789ec4dBC1123456ba123b45e",
    //                 "ordId": "405071912345641543",
    //                 "sCode": "0",
    //                 "sMsg": ""
    //             },
    //             ...
    //         ],
    //         "msg": ""
    //     }
    //
    // Algo order
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "algoId": "431375349042380800",
    //                 "sCode": "0",
    //                 "sMsg": ""
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const ordersData = this.safeValue(response, 'data', []);
    return this.parseOrders(ordersData, market, undefined, undefined, params);
  }
  parseOrderStatus(status) {
    const statuses = {
      'canceled': 'canceled',
      'live': 'open',
      'partially_filled': 'open',
      'filled': 'closed',
      'effective': 'closed'
    };
    return this.safeString(statuses, status, status);
  }
  parseOrder(order, market = undefined) {
    //
    // createOrder
    //
    //     {
    //         "clOrdId": "oktswap6",
    //         "ordId": "312269865356374016",
    //         "tag": "",
    //         "sCode": "0",
    //         "sMsg": ""
    //     }
    //
    // Spot and Swap fetchOrder, fetchOpenOrders
    //
    //     {
    //         "accFillSz": "0",
    //         "avgPx": "",
    //         "cTime": "1621910749815",
    //         "category": "normal",
    //         "ccy": "",
    //         "clOrdId": "",
    //         "fee": "0",
    //         "feeCcy": "ETH",
    //         "fillPx": "",
    //         "fillSz": "0",
    //         "fillTime": "",
    //         "instId": "ETH-USDT",
    //         "instType": "SPOT",
    //         "lever": "",
    //         "ordId": "317251910906576896",
    //         "ordType": "limit",
    //         "pnl": "0",
    //         "posSide": "net",
    //         "px": "2000",
    //         "rebate": "0",
    //         "rebateCcy": "USDT",
    //         "side": "buy",
    //         "slOrdPx": "",
    //         "slTriggerPx": "",
    //         "state": "live",
    //         "sz": "0.001",
    //         "tag": "",
    //         "tdMode": "cash",
    //         "tpOrdPx": "",
    //         "tpTriggerPx": "",
    //         "tradeId": "",
    //         "uTime": "1621910749815"
    //     }
    //
    // Algo Order fetchOpenOrders, fetchCanceledOrders, fetchClosedOrders
    //
    //     {
    //         "activePx": "",
    //         "activePxType": "",
    //         "actualPx": "",
    //         "actualSide": "buy",
    //         "actualSz": "0",
    //         "algoId": "431375349042380800",
    //         "cTime": "1649119897778",
    //         "callbackRatio": "",
    //         "callbackSpread": "",
    //         "ccy": "",
    //         "ctVal": "0.01",
    //         "instId": "BTC-USDT-SWAP",
    //         "instType": "SWAP",
    //         "last": "46538.9",
    //         "lever": "125",
    //         "moveTriggerPx": "",
    //         "notionalUsd": "467.059",
    //         "ordId": "",
    //         "ordPx": "50000",
    //         "ordType": "trigger",
    //         "posSide": "long",
    //         "pxLimit": "",
    //         "pxSpread": "",
    //         "pxVar": "",
    //         "side": "buy",
    //         "slOrdPx": "",
    //         "slTriggerPx": "",
    //         "slTriggerPxType": "",
    //         "state": "live",
    //         "sz": "1",
    //         "szLimit": "",
    //         "tag": "",
    //         "tdMode": "isolated",
    //         "tgtCcy": "",
    //         "timeInterval": "",
    //         "tpOrdPx": "",
    //         "tpTriggerPx": "",
    //         "tpTriggerPxType": "",
    //         "triggerPx": "50000",
    //         "triggerPxType": "last",
    //         "triggerTime": "",
    //         "uly": "BTC-USDT"
    //     }
    //
    const id = this.safeString2(order, 'algoId', 'ordId');
    const timestamp = this.safeInteger(order, 'cTime');
    const lastTradeTimestamp = this.safeInteger(order, 'fillTime');
    const side = this.safeString(order, 'side');
    let type = this.safeString(order, 'ordType');
    let postOnly = undefined;
    let timeInForce = undefined;
    if (type === 'post_only') {
      postOnly = true;
      type = 'limit';
    } else if (type === 'fok') {
      timeInForce = 'FOK';
      type = 'limit';
    } else if (type === 'ioc') {
      timeInForce = 'IOC';
      type = 'limit';
    }
    const marketId = this.safeString(order, 'instId');
    const symbol = this.safeSymbol(marketId, market, '-');
    const filled = this.safeString(order, 'accFillSz');
    const price = this.safeString2(order, 'px', 'ordPx');
    const average = this.safeString(order, 'avgPx');
    const status = this.parseOrderStatus(this.safeString(order, 'state'));
    const feeCostString = this.safeString(order, 'fee');
    let amount = undefined;
    let cost = undefined;
    // spot market buy: "sz" can refer either to base currency units or to quote currency units
    // see documentation: https://www.okx.com/docs-v5/en/#rest-api-trade-place-order
    const defaultTgtCcy = this.safeString(this.options, 'tgtCcy', 'base_ccy');
    const tgtCcy = this.safeString(order, 'tgtCcy', defaultTgtCcy);
    const instType = this.safeString(order, 'instType');
    if (side === 'buy' && type === 'market' && instType === 'SPOT' && tgtCcy === 'quote_ccy') {
      // "sz" refers to the cost
      cost = this.safeString(order, 'sz');
    } else {
      // "sz" refers to the trade currency amount
      amount = this.safeString(order, 'sz');
    }
    let fee = undefined;
    if (feeCostString !== undefined) {
      const feeCostSigned = _Precise.Precise.stringNeg(feeCostString);
      const feeCurrencyId = this.safeString(order, 'feeCcy');
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': this.parseNumber(feeCostSigned),
        'currency': feeCurrencyCode
      };
    }
    let clientOrderId = this.safeString(order, 'clOrdId');
    if (clientOrderId !== undefined && clientOrderId.length < 1) {
      clientOrderId = undefined; // fix empty clientOrderId string
    }

    const stopLossPrice = this.safeNumber2(order, 'slTriggerPx', 'slOrdPx');
    const takeProfitPrice = this.safeNumber2(order, 'tpTriggerPx', 'tpOrdPx');
    const stopPrice = this.safeNumberN(order, ['triggerPx', 'moveTriggerPx']);
    const reduceOnlyRaw = this.safeString(order, 'reduceOnly');
    let reduceOnly = false;
    if (reduceOnly !== undefined) {
      reduceOnly = reduceOnlyRaw === 'true';
    }
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': postOnly,
      'side': side,
      'price': price,
      'stopLossPrice': stopLossPrice,
      'takeProfitPrice': takeProfitPrice,
      'stopPrice': stopPrice,
      'triggerPrice': stopPrice,
      'average': average,
      'cost': cost,
      'amount': amount,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': fee,
      'trades': undefined,
      'reduceOnly': reduceOnly
    }, market);
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchOrder
     * @description fetch an order by the id
     * @param {string} id the order id
     * @param {string} symbol unified market symbol
     * @param {object} params extra and exchange specific parameters
     * @returns [an order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
    */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'instId': market['id']
      // 'clOrdId': 'abcdef12345', // optional, [a-z0-9]{1,32}
      // 'ordId': id,
      // 'instType': // spot, swap, futures, margin
    };

    const clientOrderId = this.safeString2(params, 'clOrdId', 'clientOrderId');
    const options = this.safeValue(this.options, 'fetchOrder', {});
    const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrder');
    let method = this.safeString(params, 'method', defaultMethod);
    const stop = this.safeValue(params, 'stop');
    if (stop) {
      method = 'privateGetTradeOrderAlgo';
      if (clientOrderId !== undefined) {
        request['algoClOrdId'] = clientOrderId;
      } else {
        request['algoId'] = id;
      }
    } else {
      if (clientOrderId !== undefined) {
        request['clOrdId'] = clientOrderId;
      } else {
        request['ordId'] = id;
      }
    }
    const query = this.omit(params, ['method', 'clOrdId', 'clientOrderId', 'stop']);
    const response = await this[method](this.extend(request, query));
    //
    // Spot and Swap
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "accFillSz": "0",
    //                 "avgPx": "",
    //                 "cTime": "1621910749815",
    //                 "category": "normal",
    //                 "ccy": "",
    //                 "clOrdId": "",
    //                 "fee": "0",
    //                 "feeCcy": "ETH",
    //                 "fillPx": "",
    //                 "fillSz": "0",
    //                 "fillTime": "",
    //                 "instId": "ETH-USDT",
    //                 "instType": "SPOT",
    //                 "lever": "",
    //                 "ordId": "317251910906576896",
    //                 "ordType": "limit",
    //                 "pnl": "0",
    //                 "posSide": "net",
    //                 "px":"20 00",
    //                 "rebate": "0",
    //                 "rebateCcy": "USDT",
    //                 "side": "buy",
    //                 "slOrdPx": "",
    //                 "slTriggerPx": "",
    //                 "state": "live",
    //                 "sz":"0. 001",
    //                 "tag": "",
    //                 "tdMode": "cash",
    //                 "tpOrdPx": "",
    //                 "tpTriggerPx": "",
    //                 "tradeId": "",
    //                 "uTime": "1621910749815"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    // Algo order
    //     {
    //         "code":"0",
    //         "msg":"",
    //         "data":[
    //             {
    //                 "instType":"FUTURES",
    //                 "instId":"BTC-USD-200329",
    //                 "ordId":"123445",
    //                 "ccy":"BTC",
    //                 "clOrdId":"",
    //                 "algoId":"1234",
    //                 "sz":"999",
    //                 "closeFraction":"",
    //                 "ordType":"oco",
    //                 "side":"buy",
    //                 "posSide":"long",
    //                 "tdMode":"cross",
    //                 "tgtCcy": "",
    //                 "state":"effective",
    //                 "lever":"20",
    //                 "tpTriggerPx":"",
    //                 "tpTriggerPxType":"",
    //                 "tpOrdPx":"",
    //                 "slTriggerPx":"",
    //                 "slTriggerPxType":"",
    //                 "triggerPx":"99",
    //                 "triggerPxType":"last",
    //                 "ordPx":"12",
    //                 "actualSz":"",
    //                 "actualPx":"",
    //                 "actualSide":"",
    //                 "pxVar":"",
    //                 "pxSpread":"",
    //                 "pxLimit":"",
    //                 "szLimit":"",
    //                 "tag": "adadadadad",
    //                 "timeInterval":"",
    //                 "callbackRatio":"",
    //                 "callbackSpread":"",
    //                 "activePx":"",
    //                 "moveTriggerPx":"",
    //                 "reduceOnly": "false",
    //                 "triggerTime":"1597026383085",
    //                 "last": "16012",
    //                 "failCode": "",
    //                 "algoClOrdId": "",
    //                 "cTime":"1597026383000"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const order = this.safeValue(data, 0);
    return this.parseOrder(order, market);
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchOpenOrders
     * @description Fetch orders that are still open
     * @description fetch all unfilled currently open orders
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch open orders for
     * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {int} params.till Timestamp in ms of the latest time to retrieve orders for
     * @param {bool} params.stop True if fetching trigger or conditional orders
     * @param {string} params.ordType "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"
     * @param {string|undefined} params.algoId Algo ID "'433845797218942976'"
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'uly': currency['id'],
      // 'instId': market['id'],
      // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated, stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
      // 'state': 'live', // live, partially_filled
      // 'after': orderId,
      // 'before': orderId,
      // 'limit': limit, // default 100, max 100
    };
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['instId'] = market['id'];
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    const options = this.safeValue(this.options, 'fetchOpenOrders', {});
    const algoOrderTypes = this.safeValue(this.options, 'algoOrderTypes', {});
    const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrdersPending');
    let method = this.safeString(params, 'method', defaultMethod);
    const ordType = this.safeString(params, 'ordType');
    const stop = this.safeValue(params, 'stop');
    if (stop || ordType in algoOrderTypes) {
      method = 'privateGetTradeOrdersAlgoPending';
      if (stop) {
        if (ordType === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' fetchOpenOrders() requires an "ordType" string parameter, "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"');
        }
      }
    }
    const query = this.omit(params, ['method', 'stop']);
    const response = await this[method](this.extend(request, query));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "accFillSz": "0",
    //                 "avgPx": "",
    //                 "cTime": "1621910749815",
    //                 "category": "normal",
    //                 "ccy": "",
    //                 "clOrdId": "",
    //                 "fee": "0",
    //                 "feeCcy": "ETH",
    //                 "fillPx": "",
    //                 "fillSz": "0",
    //                 "fillTime": "",
    //                 "instId": "ETH-USDT",
    //                 "instType": "SPOT",
    //                 "lever": "",
    //                 "ordId": "317251910906576896",
    //                 "ordType": "limit",
    //                 "pnl": "0",
    //                 "posSide": "net",
    //                 "px":"20 00",
    //                 "rebate": "0",
    //                 "rebateCcy": "USDT",
    //                 "side": "buy",
    //                 "slOrdPx": "",
    //                 "slTriggerPx": "",
    //                 "state": "live",
    //                 "sz":"0. 001",
    //                 "tag": "",
    //                 "tdMode": "cash",
    //                 "tpOrdPx": "",
    //                 "tpTriggerPx": "",
    //                 "tradeId": "",
    //                 "uTime": "1621910749815"
    //             }
    //         ],
    //         "msg":""
    //     }
    //
    // Algo order
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "activePx": "",
    //                 "activePxType": "",
    //                 "actualPx": "",
    //                 "actualSide": "buy",
    //                 "actualSz": "0",
    //                 "algoId": "431375349042380800",
    //                 "cTime": "1649119897778",
    //                 "callbackRatio": "",
    //                 "callbackSpread": "",
    //                 "ccy": "",
    //                 "ctVal": "0.01",
    //                 "instId": "BTC-USDT-SWAP",
    //                 "instType": "SWAP",
    //                 "last": "46538.9",
    //                 "lever": "125",
    //                 "moveTriggerPx": "",
    //                 "notionalUsd": "467.059",
    //                 "ordId": "",
    //                 "ordPx": "50000",
    //                 "ordType": "trigger",
    //                 "posSide": "long",
    //                 "pxLimit": "",
    //                 "pxSpread": "",
    //                 "pxVar": "",
    //                 "side": "buy",
    //                 "slOrdPx": "",
    //                 "slTriggerPx": "",
    //                 "slTriggerPxType": "",
    //                 "state": "live",
    //                 "sz": "1",
    //                 "szLimit": "",
    //                 "tag": "",
    //                 "tdMode": "isolated",
    //                 "tgtCcy": "",
    //                 "timeInterval": "",
    //                 "tpOrdPx": "",
    //                 "tpTriggerPx": "",
    //                 "tpTriggerPxType": "",
    //                 "triggerPx": "50000",
    //                 "triggerPxType": "last",
    //                 "triggerTime": "",
    //                 "uly": "BTC-USDT"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchCanceledOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchCanceledOrders
     * @description fetches information on multiple canceled orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
     * @param {int|undefined} limit max number of orders to return, default is undefined
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {bool} params.stop True if fetching trigger or conditional orders
     * @param {string} params.ordType "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"
     * @param {string|undefined} params.algoId Algo ID "'433845797218942976'"
     * @param {int|undefined} params.until timestamp in ms to fetch orders for
     * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'instType': type.toUpperCase (), // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'uly': currency['id'],
      // 'instId': market['id'],
      // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
      // 'state': 'canceled', // filled, canceled
      // 'after': orderId,
      // 'before': orderId,
      // 'limit': limit, // default 100, max 100
      // 'algoId': "'433845797218942976'", // Algo order
    };
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['instId'] = market['id'];
    }
    let type = undefined;
    let query = undefined;
    [type, query] = this.handleMarketTypeAndParams('fetchCanceledOrders', market, params);
    request['instType'] = this.convertToInstrumentType(type);
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    request['state'] = 'canceled';
    const options = this.safeValue(this.options, 'fetchCanceledOrders', {});
    const algoOrderTypes = this.safeValue(this.options, 'algoOrderTypes', {});
    const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrdersHistory');
    let method = this.safeString(params, 'method', defaultMethod);
    const ordType = this.safeString(params, 'ordType');
    const stop = this.safeValue(params, 'stop');
    if (stop || ordType in algoOrderTypes) {
      method = 'privateGetTradeOrdersAlgoHistory';
      const algoId = this.safeString(params, 'algoId');
      if (algoId !== undefined) {
        request['algoId'] = algoId;
        params = this.omit(params, 'algoId');
      }
      if (stop) {
        if (ordType === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' fetchCanceledOrders() requires an "ordType" string parameter, "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"');
        }
        request['ordType'] = ordType;
      }
    } else {
      if (since !== undefined) {
        request['begin'] = since;
      }
      const until = this.safeInteger2(query, 'till', 'until');
      if (until !== undefined) {
        request['end'] = until;
        query = this.omit(query, ['until', 'till']);
      }
    }
    const send = this.omit(query, ['method', 'stop', 'ordType']);
    const response = await this[method](this.extend(request, send));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "accFillSz": "0",
    //                 "avgPx": "",
    //                 "cTime": "1644037822494",
    //                 "category": "normal",
    //                 "ccy": "",
    //                 "clOrdId": "",
    //                 "fee": "0",
    //                 "feeCcy": "BTC",
    //                 "fillPx": "",
    //                 "fillSz": "0",
    //                 "fillTime": "",
    //                 "instId": "BTC-USDT",
    //                 "instType": "SPOT",
    //                 "lever": "",
    //                 "ordId": "410059580352409602",
    //                 "ordType": "limit",
    //                 "pnl": "0",
    //                 "posSide": "net",
    //                 "px": "30000",
    //                 "rebate": "0",
    //                 "rebateCcy": "USDT",
    //                 "side": "buy",
    //                 "slOrdPx": "",
    //                 "slTriggerPx": "",
    //                 "slTriggerPxType": "",
    //                 "source": "",
    //                 "state": "canceled",
    //                 "sz": "0.0005452",
    //                 "tag": "",
    //                 "tdMode": "cash",
    //                 "tgtCcy": "",
    //                 "tpOrdPx": "",
    //                 "tpTriggerPx": "",
    //                 "tpTriggerPxType": "",
    //                 "tradeId": "",
    //                 "uTime": "1644038165667"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    // Algo order
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "activePx": "",
    //                 "activePxType": "",
    //                 "actualPx": "",
    //                 "actualSide": "buy",
    //                 "actualSz": "0",
    //                 "algoId": "433845797218942976",
    //                 "cTime": "1649708898523",
    //                 "callbackRatio": "",
    //                 "callbackSpread": "",
    //                 "ccy": "",
    //                 "ctVal": "0.01",
    //                 "instId": "BTC-USDT-SWAP",
    //                 "instType": "SWAP",
    //                 "last": "39950.4",
    //                 "lever": "125",
    //                 "moveTriggerPx": "",
    //                 "notionalUsd": "1592.1760000000002",
    //                 "ordId": "",
    //                 "ordPx": "29000",
    //                 "ordType": "trigger",
    //                 "posSide": "long",
    //                 "pxLimit": "",
    //                 "pxSpread": "",
    //                 "pxVar": "",
    //                 "side": "buy",
    //                 "slOrdPx": "",
    //                 "slTriggerPx": "",
    //                 "slTriggerPxType": "",
    //                 "state": "canceled",
    //                 "sz": "4",
    //                 "szLimit": "",
    //                 "tag": "",
    //                 "tdMode": "isolated",
    //                 "tgtCcy": "",
    //                 "timeInterval": "",
    //                 "tpOrdPx": "",
    //                 "tpTriggerPx": "",
    //                 "tpTriggerPxType": "",
    //                 "triggerPx": "30000",
    //                 "triggerPxType": "last",
    //                 "triggerTime": "",
    //                 "uly": "BTC-USDT"
    //             },
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchClosedOrders
     * @description fetches information on multiple closed orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {bool} params.stop True if fetching trigger or conditional orders
     * @param {string} params.ordType "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"
     * @param {string|undefined} params.algoId Algo ID "'433845797218942976'"
     * @param {int|undefined} params.until timestamp in ms to fetch orders for
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'instType': type.toUpperCase (), // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'uly': currency['id'],
      // 'instId': market['id'],
      // 'ordType': 'limit', // market, limit, post_only, fok, ioc, comma-separated stop orders: conditional, oco, trigger, move_order_stop, iceberg, or twap
      // 'state': 'filled', // filled, effective
      // 'after': orderId,
      // 'before': orderId,
      // 'limit': limit, // default 100, max 100
      // 'algoId': "'433845797218942976'", // Algo order
    };
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['instId'] = market['id'];
    }
    let type = undefined;
    let query = undefined;
    [type, query] = this.handleMarketTypeAndParams('fetchClosedOrders', market, params);
    request['instType'] = this.convertToInstrumentType(type);
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    const options = this.safeValue(this.options, 'fetchClosedOrders', {});
    const algoOrderTypes = this.safeValue(this.options, 'algoOrderTypes', {});
    const defaultMethod = this.safeString(options, 'method', 'privateGetTradeOrdersHistory');
    let method = this.safeString(params, 'method', defaultMethod);
    const ordType = this.safeString(params, 'ordType');
    const stop = this.safeValue(params, 'stop');
    if (stop || ordType in algoOrderTypes) {
      method = 'privateGetTradeOrdersAlgoHistory';
      if (stop) {
        if (ordType === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' fetchClosedOrders() requires an "ordType" string parameter, "conditional", "oco", "trigger", "move_order_stop", "iceberg", or "twap"');
        }
      }
      request['state'] = 'effective';
    } else {
      if (since !== undefined) {
        request['begin'] = since;
      }
      const until = this.safeInteger2(query, 'till', 'until');
      if (until !== undefined) {
        request['end'] = until;
        query = this.omit(query, ['until', 'till']);
      }
      request['state'] = 'filled';
    }
    const send = this.omit(query, ['method', 'stop']);
    const response = await this[method](this.extend(request, send));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "accFillSz": "0",
    //                 "avgPx": "",
    //                 "cTime": "1621910749815",
    //                 "category": "normal",
    //                 "ccy": "",
    //                 "clOrdId": "",
    //                 "fee": "0",
    //                 "feeCcy": "ETH",
    //                 "fillPx": "",
    //                 "fillSz": "0",
    //                 "fillTime": "",
    //                 "instId": "ETH-USDT",
    //                 "instType": "SPOT",
    //                 "lever": "",
    //                 "ordId": "317251910906576896",
    //                 "ordType": "limit",
    //                 "pnl": "0",
    //                 "posSide": "net",
    //                 "px": "2000",
    //                 "rebate": "0",
    //                 "rebateCcy": "USDT",
    //                 "side": "buy",
    //                 "slOrdPx": "",
    //                 "slTriggerPx": "",
    //                 "state": "live",
    //                 "sz": "0.001",
    //                 "tag": "",
    //                 "tdMode": "cash",
    //                 "tpOrdPx": "",
    //                 "tpTriggerPx": "",
    //                 "tradeId": "",
    //                 "uTime": "1621910749815"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    // Algo order
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "activePx": "",
    //                 "activePxType": "",
    //                 "actualPx": "",
    //                 "actualSide": "buy",
    //                 "actualSz": "0",
    //                 "algoId": "433845797218942976",
    //                 "cTime": "1649708898523",
    //                 "callbackRatio": "",
    //                 "callbackSpread": "",
    //                 "ccy": "",
    //                 "ctVal": "0.01",
    //                 "instId": "BTC-USDT-SWAP",
    //                 "instType": "SWAP",
    //                 "last": "39950.4",
    //                 "lever": "125",
    //                 "moveTriggerPx": "",
    //                 "notionalUsd": "1592.1760000000002",
    //                 "ordId": "",
    //                 "ordPx": "29000",
    //                 "ordType": "trigger",
    //                 "posSide": "long",
    //                 "pxLimit": "",
    //                 "pxSpread": "",
    //                 "pxVar": "",
    //                 "side": "buy",
    //                 "slOrdPx": "",
    //                 "slTriggerPx": "",
    //                 "slTriggerPxType": "",
    //                 "state": "effective",
    //                 "sz": "4",
    //                 "szLimit": "",
    //                 "tag": "",
    //                 "tdMode": "isolated",
    //                 "tgtCcy": "",
    //                 "timeInterval": "",
    //                 "tpOrdPx": "",
    //                 "tpTriggerPx": "",
    //                 "tpTriggerPxType": "",
    //                 "triggerPx": "30000",
    //                 "triggerPxType": "last",
    //                 "triggerTime": "",
    //                 "uly": "BTC-USDT"
    //             },
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseOrders(data, market, since, limit);
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'uly': currency['id'],
      // 'instId': market['id'],
      // 'ordId': orderId,
      // 'after': billId,
      // 'before': billId,
      // 'limit': limit, // default 100, max 100
    };
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['instId'] = market['id'];
    }
    const [type, query] = this.handleMarketTypeAndParams('fetchMyTrades', market, params);
    request['instType'] = this.convertToInstrumentType(type);
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    const response = await this.privateGetTradeFillsHistory(this.extend(request, query));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "side": "buy",
    //                 "fillSz": "0.007533",
    //                 "fillPx": "2654.98",
    //                 "fee": "-0.000007533",
    //                 "ordId": "317321390244397056",
    //                 "instType": "SPOT",
    //                 "instId": "ETH-USDT",
    //                 "clOrdId": "",
    //                 "posSide": "net",
    //                 "billId": "317321390265368576",
    //                 "tag": "0",
    //                 "execType": "T",
    //                 "tradeId": "107601752",
    //                 "feeCcy": "ETH",
    //                 "ts": "1621927314985"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseTrades(data, market, since, limit, query);
  }
  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @param {string} id order id
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    const request = {
      // 'instrument_id': market['id'],
      'ordId': id
      // 'after': '1', // return the page after the specified page number
      // 'before': '1', // return the page before the specified page number
      // 'limit': limit, // optional, number of results per request, default = maximum = 100
    };

    return await this.fetchMyTrades(symbol, since, limit, this.extend(request, params));
  }
  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-bills-details-last-7-days
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-bills-details-last-3-months
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-asset-bills-details
     * @param {string|undefined} code unified currency code, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
     * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string|undefined} params.marginMode 'cross' or 'isolated'
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    await this.loadMarkets();
    const options = this.safeValue(this.options, 'fetchLedger', {});
    let method = this.safeString(options, 'method');
    method = this.safeString(params, 'method', method);
    params = this.omit(params, 'method');
    const request = {
      // 'instType': undefined, // 'SPOT', 'MARGIN', 'SWAP', 'FUTURES", 'OPTION'
      // 'ccy': undefined, // currency['id'],
      // 'mgnMode': undefined, // 'isolated', 'cross'
      // 'ctType': undefined, // 'linear', 'inverse', only applicable to FUTURES/SWAP
      // 'type': undefined,
      //     1 Transfer,
      //     2 Trade,
      //     3 Delivery,
      //     4 Auto token conversion,
      //     5 Liquidation,
      //     6 Margin transfer,
      //     7 Interest deduction,
      //     8 Funding rate,
      //     9 ADL,
      //     10 Clawback,
      //     11 System token conversion
      // 'subType': undefined,
      //     1 Buy
      //     2 Sell
      //     3 Open long
      //     4 Open short
      //     5 Close long
      //     6 Close short
      //     9 Interest deduction
      //     11 Transfer in
      //     12 Transfer out
      //     160 Manual margin increase
      //     161 Manual margin decrease
      //     162 Auto margin increase
      //     110 Auto buy
      //     111 Auto sell
      //     118 System token conversion transfer in
      //     119 System token conversion transfer out
      //     100 Partial liquidation close long
      //     101 Partial liquidation close short
      //     102 Partial liquidation buy
      //     103 Partial liquidation sell
      //     104 Liquidation long
      //     105 Liquidation short
      //     106 Liquidation buy
      //     107 Liquidation sell
      //     110 Liquidation transfer in
      //     111 Liquidation transfer out
      //     125 ADL close long
      //     126 ADL close short
      //     127 ADL buy
      //     128 ADL sell
      //     170 Exercised
      //     171 Counterparty exercised
      //     172 Expired OTM
      //     112 Delivery long
      //     113 Delivery short
      //     117 Delivery/Exercise clawback
      //     173 Funding fee expense
      //     174 Funding fee income
      //
      // 'after': 'id', // return records earlier than the requested bill id
      // 'before': 'id', // return records newer than the requested bill id
      // 'limit': 100, // default 100, max 100
    };
    let marginMode = undefined;
    [marginMode, params] = this.handleMarginModeAndParams('fetchLedger', params);
    if (marginMode === undefined) {
      marginMode = this.safeString(params, 'mgnMode');
    }
    if (method !== 'privateGetAssetBills') {
      if (marginMode !== undefined) {
        request['mgnMode'] = marginMode;
      }
    }
    const [type, query] = this.handleMarketTypeAndParams('fetchLedger', undefined, params);
    if (type !== undefined) {
      request['instType'] = this.convertToInstrumentType(type);
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['ccy'] = currency['id'];
    }
    const response = await this[method](this.extend(request, query));
    //
    // privateGetAccountBills, privateGetAccountBillsArchive
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "bal": "0.0000819307998198",
    //                 "balChg": "-664.2679586599999802",
    //                 "billId": "310394313544966151",
    //                 "ccy": "USDT",
    //                 "fee": "0",
    //                 "from": "",
    //                 "instId": "LTC-USDT",
    //                 "instType": "SPOT",
    //                 "mgnMode": "cross",
    //                 "notes": "",
    //                 "ordId": "310394313519800320",
    //                 "pnl": "0",
    //                 "posBal": "0",
    //                 "posBalChg": "0",
    //                 "subType": "2",
    //                 "sz": "664.26795866",
    //                 "to": "",
    //                 "ts": "1620275771196",
    //                 "type": "2"
    //             }
    //         ]
    //     }
    //
    // privateGetAssetBills
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "billId": "12344",
    //                 "ccy": "BTC",
    //                 "balChg": "2",
    //                 "bal": "12",
    //                 "type": "1",
    //                 "ts": "1597026383085"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseLedger(data, currency, since, limit);
  }
  parseLedgerEntryType(type) {
    const types = {
      '1': 'transfer',
      '2': 'trade',
      '3': 'trade',
      '4': 'rebate',
      '5': 'trade',
      '6': 'transfer',
      '7': 'trade',
      '8': 'fee',
      '9': 'trade',
      '10': 'trade',
      '11': 'trade' // system token conversion
    };

    return this.safeString(types, type, type);
  }
  parseLedgerEntry(item, currency = undefined) {
    //
    // privateGetAccountBills, privateGetAccountBillsArchive
    //
    //     {
    //         "bal": "0.0000819307998198",
    //         "balChg": "-664.2679586599999802",
    //         "billId": "310394313544966151",
    //         "ccy": "USDT",
    //         "fee": "0",
    //         "from": "",
    //         "instId": "LTC-USDT",
    //         "instType": "SPOT",
    //         "mgnMode": "cross",
    //         "notes": "",
    //         "ordId": "310394313519800320",
    //         "pnl": "0",
    //         "posBal": "0",
    //         "posBalChg": "0",
    //         "subType": "2",
    //         "sz": "664.26795866",
    //         "to": "",
    //         "ts": "1620275771196",
    //         "type": "2"
    //     }
    //
    // privateGetAssetBills
    //
    //     {
    //         "billId": "12344",
    //         "ccy": "BTC",
    //         "balChg": "2",
    //         "bal": "12",
    //         "type": "1",
    //         "ts": "1597026383085"
    //     }
    //
    const id = this.safeString(item, 'billId');
    const account = undefined;
    const referenceId = this.safeString(item, 'ordId');
    const referenceAccount = undefined;
    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));
    const code = this.safeCurrencyCode(this.safeString(item, 'ccy'), currency);
    const amountString = this.safeString(item, 'balChg');
    const amount = this.parseNumber(amountString);
    const timestamp = this.safeInteger(item, 'ts');
    const feeCostString = this.safeString(item, 'fee');
    let fee = undefined;
    if (feeCostString !== undefined) {
      fee = {
        'cost': this.parseNumber(_Precise.Precise.stringNeg(feeCostString)),
        'currency': code
      };
    }
    const before = undefined;
    const afterString = this.safeString(item, 'bal');
    const after = this.parseNumber(afterString);
    const status = 'ok';
    const marketId = this.safeString(item, 'instId');
    const symbol = this.safeSymbol(marketId, undefined, '-');
    return {
      'id': id,
      'info': item,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'account': account,
      'referenceId': referenceId,
      'referenceAccount': referenceAccount,
      'type': type,
      'currency': code,
      'symbol': symbol,
      'amount': amount,
      'before': before,
      'after': after,
      'status': status,
      'fee': fee
    };
  }
  parseDepositAddress(depositAddress, currency = undefined) {
    //
    //     {
    //         "addr": "okbtothemoon",
    //         "memo": "971668", // may be missing
    //         "tag":"52055", // may be missing
    //         "pmtId": "", // may be missing
    //         "ccy": "BTC",
    //         "to": "6", // 1 SPOT, 3 FUTURES, 6 FUNDING, 9 SWAP, 12 OPTION, 18 Unified account
    //         "selected": true
    //     }
    //
    //     {
    //         "ccy":"usdt-erc20",
    //         "to":"6",
    //         "addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa",
    //         "selected":true
    //     }
    //
    //     {
    //        "chain": "ETH-OKExChain",
    //        "ctAddr": "72315c",
    //        "ccy": "ETH",
    //        "to": "6",
    //        "addr": "0x1c9f2244d1ccaa060bd536827c18925db10db102",
    //        "selected": true
    //     }
    //
    const address = this.safeString(depositAddress, 'addr');
    let tag = this.safeString2(depositAddress, 'tag', 'pmtId');
    tag = this.safeString(depositAddress, 'memo', tag);
    const currencyId = this.safeString(depositAddress, 'ccy');
    currency = this.safeCurrency(currencyId, currency);
    const code = currency['code'];
    const chain = this.safeString(depositAddress, 'chain');
    const networks = this.safeValue(currency, 'networks', {});
    const networksById = this.indexBy(networks, 'id');
    let networkData = this.safeValue(networksById, chain);
    // inconsistent naming responses from exchange
    // with respect to network naming provided in currency info vs address chain-names and ids
    //
    // response from address endpoint:
    //      {
    //          "chain": "USDT-Polygon",
    //          "ctAddr": "",
    //          "ccy": "USDT",
    //          "to":"6" ,
    //          "addr": "0x1903441e386cc49d937f6302955b5feb4286dcfa",
    //          "selected": true
    //      }
    // network information from currency['networks'] field:
    // Polygon: {
    //        info: {
    //            canDep: false,
    //            canInternal: false,
    //            canWd: false,
    //            ccy: 'USDT',
    //            chain: 'USDT-Polygon-Bridge',
    //            mainNet: false,
    //            maxFee: '26.879528',
    //            minFee: '13.439764',
    //            minWd: '0.001',
    //            name: ''
    //        },
    //        id: 'USDT-Polygon-Bridge',
    //        network: 'Polygon',
    //        active: false,
    //        deposit: false,
    //        withdraw: false,
    //        fee: 13.439764,
    //        precision: undefined,
    //        limits: {
    //            withdraw: {
    //                min: 0.001,
    //                max: undefined
    //            }
    //        }
    //     },
    //
    if (chain === 'USDT-Polygon') {
      networkData = this.safeValue(networksById, 'USDT-Polygon-Bridge');
    }
    const network = this.safeString(networkData, 'network');
    this.checkAddress(address);
    return {
      'currency': code,
      'address': address,
      'tag': tag,
      'network': network,
      'info': depositAddress
    };
  }
  async fetchDepositAddressesByNetwork(code, params = {}) {
    /**
     * @method
     * @name okx#fetchDepositAddressesByNetwork
     * @description fetch a dictionary of addresses for a currency, indexed by network
     * @param {string} code unified currency code of the currency for the deposit address
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a dictionary of [address structures]{@link https://docs.ccxt.com/#/?id=address-structure} indexed by the network
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'ccy': currency['id']
    };
    const response = await this.privateGetAssetDepositAddress(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "addr": "okbtothemoon",
    //                 "memo": "971668", // may be missing
    //                 "tag":"52055", // may be missing
    //                 "pmtId": "", // may be missing
    //                 "ccy": "BTC",
    //                 "to": "6", // 1 SPOT, 3 FUTURES, 6 FUNDING, 9 SWAP, 12 OPTION, 18 Unified account
    //                 "selected": true
    //             },
    //             // {"ccy":"usdt-erc20","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true},
    //             // {"ccy":"usdt-trc20","to":"6","addr":"TRrd5SiSZrfQVRKm4e9SRSbn2LNTYqCjqx","selected":true},
    //             // {"ccy":"usdt_okexchain","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true},
    //             // {"ccy":"usdt_kip20","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true},
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const filtered = this.filterBy(data, 'selected', true);
    const parsed = this.parseDepositAddresses(filtered, [currency['code']], false);
    return this.indexBy(parsed, 'network');
  }
  async fetchDepositAddress(code, params = {}) {
    /**
     * @method
     * @name okx#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    const rawNetwork = this.safeStringUpper(params, 'network');
    const networks = this.safeValue(this.options, 'networks', {});
    const network = this.safeString(networks, rawNetwork, rawNetwork);
    params = this.omit(params, 'network');
    const response = await this.fetchDepositAddressesByNetwork(code, params);
    let result = undefined;
    if (network === undefined) {
      result = this.safeValue(response, code);
      if (result === undefined) {
        const alias = this.safeString(networks, code, code);
        result = this.safeValue(response, alias);
        if (result === undefined) {
          const defaultNetwork = this.safeString(this.options, 'defaultNetwork', 'ERC20');
          result = this.safeValue(response, defaultNetwork);
          if (result === undefined) {
            const values = Object.values(response);
            result = this.safeValue(values, 0);
            if (result === undefined) {
              throw new _errors.InvalidAddress(this.id + ' fetchDepositAddress() cannot find deposit address for ' + code);
            }
          }
        }
      }
      return result;
    }
    result = this.safeValue(response, network);
    if (result === undefined) {
      throw new _errors.InvalidAddress(this.id + ' fetchDepositAddress() cannot find ' + network + ' deposit address for ' + code);
    }
    return result;
  }
  async withdraw(code, amount, address, tag = undefined, params = {}) {
    /**
     * @method
     * @name okx#withdraw
     * @description make a withdrawal
     * @param {string} code unified currency code
     * @param {float} amount the amount to withdraw
     * @param {string} address the address to withdraw to
     * @param {string|undefined} tag
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    [tag, params] = this.handleWithdrawTagAndParams(tag, params);
    this.checkAddress(address);
    await this.loadMarkets();
    const currency = this.currency(code);
    if (tag !== undefined && tag.length > 0) {
      address = address + ':' + tag;
    }
    const request = {
      'ccy': currency['id'],
      'toAddr': address,
      'dest': '4',
      'amt': this.numberToString(amount)
    };
    const networks = this.safeValue(this.options, 'networks', {});
    let network = this.safeStringUpper(params, 'network'); // this line allows the user to specify either ERC20 or ETH
    network = this.safeString(networks, network, network); // handle ETH>ERC20 alias
    if (network !== undefined) {
      request['chain'] = currency['id'] + '-' + network;
      params = this.omit(params, 'network');
    }
    let fee = this.safeString(params, 'fee');
    if (fee === undefined) {
      const currencies = await this.fetchCurrencies();
      this.currencies = this.deepExtend(this.currencies, currencies);
      const targetNetwork = this.safeValue(currency['networks'], this.networkIdToCode(network), {});
      fee = this.safeString(targetNetwork, 'fee');
      if (fee === undefined) {
        throw new _errors.ArgumentsRequired(this.id + " withdraw() requires a 'fee' string parameter, network transaction fee must be ≥ 0. Withdrawals to OKCoin or OKX are fee-free, please set '0'. Withdrawing to external digital asset address requires network transaction fee.");
      }
    }
    request['fee'] = this.numberToString(fee); // withdrawals to OKCoin or OKX are fee-free, please set 0
    if ('password' in params) {
      request['pwd'] = params['password'];
    } else if ('pwd' in params) {
      request['pwd'] = params['pwd'];
    }
    const query = this.omit(params, ['fee', 'password', 'pwd']);
    if (!('pwd' in request)) {
      throw new _errors.ExchangeError(this.id + ' withdraw() requires a password parameter or a pwd parameter, it must be the funding password, not the API passphrase');
    }
    const response = await this.privatePostAssetWithdrawal(this.extend(request, query));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "amt": "0.1",
    //                 "wdId": "67485",
    //                 "ccy": "BTC"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const transaction = this.safeValue(data, 0);
    return this.parseTransaction(transaction, currency);
  }
  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchDeposits
     * @description fetch all deposits made to an account
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-deposit-history
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch deposits for
     * @param {int|undefined} limit the maximum number of deposits structures to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'ccy': currency['id'],
      // 'state': 2, // 0 waiting for confirmation, 1 deposit credited, 2 deposit successful
      // 'after': since,
      // 'before' this.milliseconds (),
      // 'limit': limit, // default 100, max 100
    };
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['ccy'] = currency['id'];
    }
    if (since !== undefined) {
      request['before'] = Math.max(since - 1, 0);
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    const response = await this.privateGetAssetDepositHistory(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "amt": "0.01044408",
    //                 "txId": "1915737_3_0_0_asset",
    //                 "ccy": "BTC",
    //                 "from": "13801825426",
    //                 "to": "",
    //                 "ts": "1597026383085",
    //                 "state": "2",
    //                 "depId": "4703879"
    //             },
    //             {
    //                 "amt": "491.6784211",
    //                 "txId": "1744594_3_184_0_asset",
    //                 "ccy": "OKB",
    //                 "from": "",
    //                 "to": "",
    //                 "ts": "1597026383085",
    //                 "state": "2",
    //                 "depId": "4703809"
    //             },
    //             {
    //                 "amt": "223.18782496",
    //                 "txId": "6d892c669225b1092c780bf0da0c6f912fc7dc8f6b8cc53b003288624c",
    //                 "ccy": "USDT",
    //                 "from": "",
    //                 "to": "39kK4XvgEuM7rX9frgyHoZkWqx4iKu1spD",
    //                 "ts": "1597026383085",
    //                 "state": "2",
    //                 "depId": "4703779"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseTransactions(data, currency, since, limit, params);
  }
  async fetchDeposit(id, code = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchDeposit
     * @description fetch data on a currency deposit via the deposit id
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-deposit-history
     * @param {string} id deposit id
     * @param {string|undefined} code filter by currency code
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    const request = {
      'depId': id
    };
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['ccy'] = currency['id'];
    }
    const response = await this.privateGetAssetDepositHistory(this.extend(request, params));
    const data = this.safeValue(response, 'data');
    const deposit = this.safeValue(data, 0, {});
    return this.parseTransaction(deposit, currency);
  }
  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchWithdrawals
     * @description fetch all withdrawals made from an account
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-withdrawal-history
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
     * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'ccy': currency['id'],
      // 'state': 2, // -3: pending cancel, -2 canceled, -1 failed, 0, pending, 1 sending, 2 sent, 3 awaiting email verification, 4 awaiting manual verification, 5 awaiting identity verification
      // 'after': since,
      // 'before': this.milliseconds (),
      // 'limit': limit, // default 100, max 100
    };
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['ccy'] = currency['id'];
    }
    if (since !== undefined) {
      request['before'] = Math.max(since - 1, 0);
    }
    if (limit !== undefined) {
      request['limit'] = limit; // default 100, max 100
    }

    const response = await this.privateGetAssetWithdrawalHistory(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "amt": "0.094",
    //                 "wdId": "4703879",
    //                 "fee": "0.01000000eth",
    //                 "txId": "0x62477bac6509a04512819bb1455e923a60dea5966c7caeaa0b24eb8fb0432b85",
    //                 "ccy": "ETH",
    //                 "from": "13426335357",
    //                 "to": "0xA41446125D0B5b6785f6898c9D67874D763A1519",
    //                 "ts": "1597026383085",
    //                 "state": "2"
    //             },
    //             {
    //                 "amt": "0.01",
    //                 "wdId": "4703879",
    //                 "fee": "0.00000000btc",
    //                 "txId": "",
    //                 "ccy": "BTC",
    //                 "from": "13426335357",
    //                 "to": "13426335357",
    //                 "ts": "1597026383085",
    //                 "state": "2"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseTransactions(data, currency, since, limit, params);
  }
  async fetchWithdrawal(id, code = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchWithdrawal
     * @description fetch data on a currency withdrawal via the withdrawal id
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-withdrawal-history
     * @param {string} id withdrawal id
     * @param {string|undefined} code unified currency code of the currency withdrawn, default is undefined
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    const request = {
      'wdId': id
    };
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['ccy'] = currency['id'];
    }
    const response = await this.privateGetAssetWithdrawalHistory(this.extend(request, params));
    //
    //    {
    //        code: '0',
    //        data: [
    //            {
    //                chain: 'USDT-TRC20',
    //                clientId: '',
    //                fee: '0.8',
    //                ccy: 'USDT',
    //                amt: '54.561',
    //                txId: '00cff6ec7fa7c7d7d184bd84e82b9ff36863f07c0421188607f87dfa94e06b70',
    //                from: 'example@email.com',
    //                to: 'TEY6qjnKDyyq5jDc3DJizWLCdUySrpQ4yp',
    //                state: '2',
    //                ts: '1641376485000',
    //                wdId: '25147041'
    //            }
    //        ],
    //        msg: ''
    //    }
    //
    const data = this.safeValue(response, 'data');
    const withdrawal = this.safeValue(data, 0, {});
    return this.parseTransaction(withdrawal);
  }
  parseTransactionStatus(status) {
    //
    // deposit statuses
    //
    //     {
    //         '0': 'waiting for confirmation',
    //         '1': 'deposit credited',
    //         '2': 'deposit successful'
    //     }
    //
    // withdrawal statuses
    //
    //     {
    //        '-3': 'pending cancel',
    //        '-2': 'canceled',
    //        '-1': 'failed',
    //         '0': 'pending',
    //         '1': 'sending',
    //         '2': 'sent',
    //         '3': 'awaiting email verification',
    //         '4': 'awaiting manual verification',
    //         '5': 'awaiting identity verification'
    //     }
    //
    const statuses = {
      '-3': 'pending',
      '-2': 'canceled',
      '-1': 'failed',
      '0': 'pending',
      '1': 'pending',
      '2': 'ok',
      '3': 'pending',
      '4': 'pending',
      '5': 'pending'
    };
    return this.safeString(statuses, status, status);
  }
  parseTransaction(transaction, currency = undefined) {
    //
    // withdraw
    //
    //     {
    //         "amt": "0.1",
    //         "wdId": "67485",
    //         "ccy": "BTC"
    //     }
    //
    // fetchWithdrawals
    //
    //     {
    //         "amt": "0.094",
    //         "wdId": "4703879",
    //         "fee": "0.01000000eth",
    //         "txId": "0x62477bac6509a04512819bb1455e923a60dea5966c7caeaa0b24eb8fb0432b85",
    //         "ccy": "ETH",
    //         "from": "13426335357",
    //         "to": "0xA41446125D0B5b6785f6898c9D67874D763A1519",
    //         'tag': string,
    //         'pmtId': string,
    //         'memo': string,
    //         "ts": "1597026383085",
    //         "state": "2"
    //     }
    //
    // fetchDeposits
    //
    //     {
    //         "amt": "0.01044408",
    //         "txId": "1915737_3_0_0_asset",
    //         "ccy": "BTC",
    //         "from": "13801825426",
    //         "to": "",
    //         "ts": "1597026383085",
    //         "state": "2",
    //         "depId": "4703879"
    //     }
    //
    let type = undefined;
    let id = undefined;
    const withdrawalId = this.safeString(transaction, 'wdId');
    const addressFrom = this.safeString(transaction, 'from');
    const addressTo = this.safeString(transaction, 'to');
    const address = addressTo;
    let tagTo = this.safeString2(transaction, 'tag', 'memo');
    tagTo = this.safeString2(transaction, 'pmtId', tagTo);
    if (withdrawalId !== undefined) {
      type = 'withdrawal';
      id = withdrawalId;
    } else {
      // the payment_id will appear on new deposits but appears to be removed from the response after 2 months
      id = this.safeString(transaction, 'depId');
      type = 'deposit';
    }
    const currencyId = this.safeString(transaction, 'ccy');
    const code = this.safeCurrencyCode(currencyId);
    const amount = this.safeNumber(transaction, 'amt');
    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));
    const txid = this.safeString(transaction, 'txId');
    const timestamp = this.safeInteger(transaction, 'ts');
    let feeCost = undefined;
    if (type === 'deposit') {
      feeCost = 0;
    } else {
      feeCost = this.safeNumber(transaction, 'fee');
    }
    // todo parse tags
    return {
      'info': transaction,
      'id': id,
      'currency': code,
      'amount': amount,
      'network': undefined,
      'addressFrom': addressFrom,
      'addressTo': addressTo,
      'address': address,
      'tagFrom': undefined,
      'tagTo': tagTo,
      'tag': tagTo,
      'status': status,
      'type': type,
      'updated': undefined,
      'txid': txid,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'fee': {
        'currency': code,
        'cost': feeCost
      }
    };
  }
  async fetchLeverage(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchLeverage
     * @description fetch the set leverage for a market
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string} params.marginMode 'cross' or 'isolated'
     * @returns {object} a [leverage structure]{@link https://docs.ccxt.com/#/?id=leverage-structure}
     */
    await this.loadMarkets();
    let marginMode = undefined;
    [marginMode, params] = this.handleMarginModeAndParams('fetchLeverage', params);
    if (marginMode === undefined) {
      marginMode = this.safeString(params, 'mgnMode', 'cross'); // cross as default marginMode
    }

    if (marginMode !== 'cross' && marginMode !== 'isolated') {
      throw new _errors.BadRequest(this.id + ' fetchLeverage() requires a marginMode parameter that must be either cross or isolated');
    }
    const market = this.market(symbol);
    const request = {
      'instId': market['id'],
      'mgnMode': marginMode
    };
    const response = await this.privateGetAccountLeverageInfo(this.extend(request, params));
    //
    //     {
    //        "code": "0",
    //        "data": [
    //            {
    //                "instId": "BTC-USDT-SWAP",
    //                "lever": "5.00000000",
    //                "mgnMode": "isolated",
    //                "posSide": "net"
    //            }
    //        ],
    //        "msg": ""
    //     }
    //
    return response;
  }
  async fetchPosition(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchPosition
     * @description fetch data on a single open contract trade position
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-positions
     * @param {string} symbol unified market symbol of the market the position is held in, default is undefined
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string|undefined} params.instType MARGIN, SWAP, FUTURES, OPTION
     * @returns {object} a [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const [type, query] = this.handleMarketTypeAndParams('fetchPosition', market, params);
    const request = {
      // instType String No Instrument type, MARGIN, SWAP, FUTURES, OPTION
      'instId': market['id']
      // posId String No Single position ID or multiple position IDs (no more than 20) separated with comma
    };

    if (type !== undefined) {
      request['instType'] = this.convertToInstrumentType(type);
    }
    const response = await this.privateGetAccountPositions(this.extend(request, query));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "adl": "1",
    //                 "availPos": "1",
    //                 "avgPx": "2566.31",
    //                 "cTime": "1619507758793",
    //                 "ccy": "ETH",
    //                 "deltaBS": "",
    //                 "deltaPA": "",
    //                 "gammaBS": "",
    //                 "gammaPA": "",
    //                 "imr": "",
    //                 "instId": "ETH-USD-210430",
    //                 "instType": "FUTURES",
    //                 "interest": "0",
    //                 "last": "2566.22",
    //                 "lever": "10",
    //                 "liab": "",
    //                 "liabCcy": "",
    //                 "liqPx": "2352.8496681818233",
    //                 "margin": "0.0003896645377994",
    //                 "mgnMode": "isolated",
    //                 "mgnRatio": "11.731726509588816",
    //                 "mmr": "0.0000311811092368",
    //                 "optVal": "",
    //                 "pTime": "1619507761462",
    //                 "pos": "1",
    //                 "posCcy": "",
    //                 "posId": "307173036051017730",
    //                 "posSide": "long",
    //                 "thetaBS": "",
    //                 "thetaPA": "",
    //                 "tradeId": "109844",
    //                 "uTime": "1619507761462",
    //                 "upl": "-0.0000009932766034",
    //                 "uplRatio": "-0.0025490556801078",
    //                 "vegaBS": "",
    //                 "vegaPA": ""
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const position = this.safeValue(data, 0);
    if (position === undefined) {
      return position;
    }
    return this.parsePosition(position);
  }
  async fetchPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchPositions
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-positions
     * @description fetch all open positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string|undefined} params.instType MARGIN, SWAP, FUTURES, OPTION
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'instType': 'MARGIN', // optional string, MARGIN, SWAP, FUTURES, OPTION
      // 'instId': market['id'], // optional string, e.g. 'BTC-USD-190927-5000-C'
      // 'posId': '307173036051017730', // optional string, Single or multiple position IDs (no more than 20) separated with commas
    };
    if (symbols !== undefined) {
      const marketIds = [];
      for (let i = 0; i < symbols.length; i++) {
        const entry = symbols[i];
        const market = this.market(entry);
        marketIds.push(market['id']);
      }
      const marketIdsLength = marketIds.length;
      if (marketIdsLength > 0) {
        request['instId'] = marketIds.join(',');
      }
    }
    const fetchPositionsOptions = this.safeValue(this.options, 'fetchPositions', {});
    const method = this.safeString(fetchPositionsOptions, 'method', 'privateGetAccountPositions');
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "adl": "1",
    //                 "availPos": "1",
    //                 "avgPx": "2566.31",
    //                 "cTime": "1619507758793",
    //                 "ccy": "ETH",
    //                 "deltaBS": "",
    //                 "deltaPA": "",
    //                 "gammaBS": "",
    //                 "gammaPA": "",
    //                 "imr": "",
    //                 "instId": "ETH-USD-210430",
    //                 "instType": "FUTURES",
    //                 "interest": "0",
    //                 "last": "2566.22",
    //                 "lever": "10",
    //                 "liab": "",
    //                 "liabCcy": "",
    //                 "liqPx": "2352.8496681818233",
    //                 "margin": "0.0003896645377994",
    //                 "mgnMode": "isolated",
    //                 "mgnRatio": "11.731726509588816",
    //                 "mmr": "0.0000311811092368",
    //                 "optVal": "",
    //                 "pTime": "1619507761462",
    //                 "pos": "1",
    //                 "posCcy": "",
    //                 "posId": "307173036051017730",
    //                 "posSide": "long",
    //                 "thetaBS": "",
    //                 "thetaPA": "",
    //                 "tradeId": "109844",
    //                 "uTime": "1619507761462",
    //                 "upl": "-0.0000009932766034",
    //                 "uplRatio": "-0.0025490556801078",
    //                 "vegaBS": "",
    //                 "vegaPA": ""
    //             }
    //         ]
    //     }
    //
    const positions = this.safeValue(response, 'data', []);
    const result = [];
    for (let i = 0; i < positions.length; i++) {
      result.push(this.parsePosition(positions[i]));
    }
    return this.filterByArray(result, 'symbol', symbols, false);
  }
  parsePosition(position, market = undefined) {
    //
    //     {
    //        "adl": "3",
    //        "availPos": "1",
    //        "avgPx": "34131.1",
    //        "cTime": "1627227626502",
    //        "ccy": "USDT",
    //        "deltaBS": "",
    //        "deltaPA": "",
    //        "gammaBS": "",
    //        "gammaPA": "",
    //        "imr": "170.66093041794787",
    //        "instId": "BTC-USDT-SWAP",
    //        "instType": "SWAP",
    //        "interest": "0",
    //        "last": "34134.4",
    //        "lever": "2",
    //        "liab": "",
    //        "liabCcy": "",
    //        "liqPx": "12608.959083877446",
    //        "markPx": "4786.459271773621",
    //        "margin": "",
    //        "mgnMode": "cross",
    //        "mgnRatio": "140.49930117599155",
    //        "mmr": "1.3652874433435829",
    //        "notionalUsd": "341.5130010779638",
    //        "optVal": "",
    //        "pos": "1",
    //        "posCcy": "",
    //        "posId": "339552508062380036",
    //        "posSide": "long",
    //        "thetaBS": "",
    //        "thetaPA": "",
    //        "tradeId": "98617799",
    //        "uTime": "1627227626502",
    //        "upl": "0.0108608358957281",
    //        "uplRatio": "0.0000636418743944",
    //        "vegaBS": "",
    //        "vegaPA": ""
    //    }
    //
    const marketId = this.safeString(position, 'instId');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const pos = this.safeString(position, 'pos'); // 'pos' field: One way mode: 0 if position is not open, 1 if open | Two way (hedge) mode: -1 if short, 1 if long, 0 if position is not open
    const contractsAbs = _Precise.Precise.stringAbs(pos);
    let side = this.safeString(position, 'posSide');
    const hedged = side !== 'net';
    const contracts = this.parseNumber(contractsAbs);
    if (market['margin']) {
      // margin position
      if (side === 'net') {
        const posCcy = this.safeString(position, 'posCcy');
        const parsedCurrency = this.safeCurrencyCode(posCcy);
        if (parsedCurrency !== undefined) {
          side = market['base'] === parsedCurrency ? 'long' : 'short';
        }
      }
      if (side === undefined) {
        side = this.safeString(position, 'direction');
      }
    } else {
      if (pos !== undefined) {
        if (side === 'net') {
          if (_Precise.Precise.stringGt(pos, '0')) {
            side = 'long';
          } else if (_Precise.Precise.stringLt(pos, '0')) {
            side = 'short';
          } else {
            side = undefined;
          }
        }
      }
    }
    const contractSize = this.safeNumber(market, 'contractSize');
    const contractSizeString = this.numberToString(contractSize);
    const markPriceString = this.safeString(position, 'markPx');
    let notionalString = this.safeString(position, 'notionalUsd');
    if (market['inverse']) {
      notionalString = _Precise.Precise.stringDiv(_Precise.Precise.stringMul(contractsAbs, contractSizeString), markPriceString);
    }
    const notional = this.parseNumber(notionalString);
    const marginMode = this.safeString(position, 'mgnMode');
    let initialMarginString = undefined;
    const entryPriceString = this.safeString(position, 'avgPx');
    const unrealizedPnlString = this.safeString(position, 'upl');
    const leverageString = this.safeString(position, 'lever');
    let initialMarginPercentage = undefined;
    let collateralString = undefined;
    if (marginMode === 'cross') {
      initialMarginString = this.safeString(position, 'imr');
      collateralString = _Precise.Precise.stringAdd(initialMarginString, unrealizedPnlString);
    } else if (marginMode === 'isolated') {
      initialMarginPercentage = _Precise.Precise.stringDiv('1', leverageString);
      collateralString = this.safeString(position, 'margin');
    }
    const maintenanceMarginString = this.safeString(position, 'mmr');
    const maintenanceMargin = this.parseNumber(maintenanceMarginString);
    const maintenanceMarginPercentageString = _Precise.Precise.stringDiv(maintenanceMarginString, notionalString);
    if (initialMarginPercentage === undefined) {
      initialMarginPercentage = this.parseNumber(_Precise.Precise.stringDiv(initialMarginString, notionalString, 4));
    } else if (initialMarginString === undefined) {
      initialMarginString = _Precise.Precise.stringMul(initialMarginPercentage, notionalString);
    }
    const rounder = '0.00005'; // round to closest 0.01%
    const maintenanceMarginPercentage = this.parseNumber(_Precise.Precise.stringDiv(_Precise.Precise.stringAdd(maintenanceMarginPercentageString, rounder), '1', 4));
    const liquidationPrice = this.safeNumber(position, 'liqPx');
    const percentageString = this.safeString(position, 'uplRatio');
    const percentage = this.parseNumber(_Precise.Precise.stringMul(percentageString, '100'));
    const timestamp = this.safeInteger(position, 'uTime');
    const marginRatio = this.parseNumber(_Precise.Precise.stringDiv(maintenanceMarginString, collateralString, 4));
    return {
      'info': position,
      'id': undefined,
      'symbol': symbol,
      'notional': notional,
      'marginMode': marginMode,
      'liquidationPrice': liquidationPrice,
      'entryPrice': this.parseNumber(entryPriceString),
      'unrealizedPnl': this.parseNumber(unrealizedPnlString),
      'percentage': percentage,
      'contracts': contracts,
      'contractSize': contractSize,
      'markPrice': this.parseNumber(markPriceString),
      'side': side,
      'hedged': hedged,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'maintenanceMargin': maintenanceMargin,
      'maintenanceMarginPercentage': maintenanceMarginPercentage,
      'collateral': this.parseNumber(collateralString),
      'initialMargin': this.parseNumber(initialMarginString),
      'initialMarginPercentage': this.parseNumber(initialMarginPercentage),
      'leverage': this.parseNumber(leverageString),
      'marginRatio': marginRatio
    };
  }
  async transfer(code, amount, fromAccount, toAccount, params = {}) {
    /**
     * @method
     * @name okx#transfer
     * @description transfer currency internally between wallets on the same account
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-funds-transfer
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount account to transfer from
     * @param {string} toAccount account to transfer to
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const accountsByType = this.safeValue(this.options, 'accountsByType', {});
    const fromId = this.safeString(accountsByType, fromAccount, fromAccount);
    const toId = this.safeString(accountsByType, toAccount, toAccount);
    const request = {
      'ccy': currency['id'],
      'amt': this.currencyToPrecision(code, amount),
      'type': '0',
      'from': fromId,
      'to': toId // beneficiary account, 6: Funding account, 18: Trading account
      // 'subAcct': 'sub-account-name', // optional, only required when type is 1, 2 or 4
      // 'loanTrans': false, // Whether or not borrowed coins can be transferred out under Multi-currency margin and Portfolio margin. The default is false
      // 'clientId': 'client-supplied id', // A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters
      // 'omitPosRisk': false, // Ignore position risk. Default is false. Applicable to Portfolio margin
    };

    if (fromId === 'master') {
      request['type'] = '1';
      request['subAcct'] = toId;
      request['from'] = this.safeString(params, 'from', '6');
      request['to'] = this.safeString(params, 'to', '6');
    } else if (toId === 'master') {
      request['type'] = '2';
      request['subAcct'] = fromId;
      request['from'] = this.safeString(params, 'from', '6');
      request['to'] = this.safeString(params, 'to', '6');
    }
    const response = await this.privatePostAssetTransfer(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "msg": "",
    //         "data": [
    //             {
    //                 "transId": "754147",
    //                 "ccy": "USDT",
    //                 "from": "6",
    //                 "amt": "0.1",
    //                 "to": "18"
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const rawTransfer = this.safeValue(data, 0, {});
    return this.parseTransfer(rawTransfer, currency);
  }
  parseTransfer(transfer, currency = undefined) {
    //
    // transfer
    //
    //     {
    //         "transId": "754147",
    //         "ccy": "USDT",
    //         "from": "6",
    //         "amt": "0.1",
    //         "to": "18"
    //     }
    //
    // fetchTransfer
    //
    //     {
    //         "amt": "5",
    //         "ccy": "USDT",
    //         "from": "18",
    //         "instId": "",
    //         "state": "success",
    //         "subAcct": "",
    //         "to": "6",
    //         "toInstId": "",
    //         "transId": "464424732",
    //         "type": "0"
    //     }
    //
    const id = this.safeString(transfer, 'transId');
    const currencyId = this.safeString(transfer, 'ccy');
    const code = this.safeCurrencyCode(currencyId, currency);
    const amount = this.safeNumber(transfer, 'amt');
    const fromAccountId = this.safeString(transfer, 'from');
    const toAccountId = this.safeString(transfer, 'to');
    const accountsById = this.safeValue(this.options, 'accountsById', {});
    const fromAccount = this.safeString(accountsById, fromAccountId);
    const toAccount = this.safeString(accountsById, toAccountId);
    const timestamp = this.milliseconds();
    const status = this.safeString(transfer, 'state');
    return {
      'info': transfer,
      'id': id,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'currency': code,
      'amount': amount,
      'fromAccount': fromAccount,
      'toAccount': toAccount,
      'status': status
    };
  }
  async fetchTransfer(id, code = undefined, params = {}) {
    await this.loadMarkets();
    const request = {
      'transId': id
      // 'type': 0, // default is 0 transfer within account, 1 master to sub, 2 sub to master
    };

    const response = await this.privateGetAssetTransferState(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "amt": "5",
    //                 "ccy": "USDT",
    //                 "from": "18",
    //                 "instId": "",
    //                 "state": "success",
    //                 "subAcct": "",
    //                 "to": "6",
    //                 "toInstId": "",
    //                 "transId": "464424732",
    //                 "type": "0"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const transfer = this.safeValue(data, 0);
    return this.parseTransfer(transfer);
  }
  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    const isArray = Array.isArray(params);
    const request = '/api/' + this.version + '/' + this.implodeParams(path, params);
    const query = this.omit(params, this.extractParams(path));
    let url = this.implodeHostname(this.urls['api']['rest']) + request;
    // const type = this.getPathAuthenticationType (path);
    if (api === 'public') {
      if (Object.keys(query).length) {
        url += '?' + this.urlencode(query);
      }
    } else if (api === 'private') {
      this.checkRequiredCredentials();
      const timestamp = this.iso8601(this.milliseconds());
      headers = {
        'OK-ACCESS-KEY': this.apiKey,
        'OK-ACCESS-PASSPHRASE': this.password,
        'OK-ACCESS-TIMESTAMP': timestamp
        // 'OK-FROM': '',
        // 'OK-TO': '',
        // 'OK-LIMIT': '',
      };

      let auth = timestamp + method + request;
      if (method === 'GET') {
        if (Object.keys(query).length) {
          const urlencodedQuery = '?' + this.urlencode(query);
          url += urlencodedQuery;
          auth += urlencodedQuery;
        }
      } else {
        if (isArray || Object.keys(query).length) {
          body = this.json(query);
          auth += body;
        }
        headers['Content-Type'] = 'application/json';
      }
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
      headers['OK-ACCESS-SIGN'] = signature;
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  parseFundingRate(contract, market = undefined) {
    //
    //    {
    //        "fundingRate": "0.00027815",
    //        "fundingTime": "1634256000000",
    //        "instId": "BTC-USD-SWAP",
    //        "instType": "SWAP",
    //        "nextFundingRate": "0.00017",
    //        "nextFundingTime": "1634284800000"
    //    }
    //
    // in the response above nextFundingRate is actually two funding rates from now
    //
    const nextFundingRateTimestamp = this.safeInteger(contract, 'nextFundingTime');
    const marketId = this.safeString(contract, 'instId');
    const symbol = this.safeSymbol(marketId, market);
    const nextFundingRate = this.safeNumber(contract, 'nextFundingRate');
    const fundingTime = this.safeInteger(contract, 'fundingTime');
    // https://www.okx.com/support/hc/en-us/articles/360053909272-Ⅸ-Introduction-to-perpetual-swap-funding-fee
    // > The current interest is 0.
    return {
      'info': contract,
      'symbol': symbol,
      'markPrice': undefined,
      'indexPrice': undefined,
      'interestRate': this.parseNumber('0'),
      'estimatedSettlePrice': undefined,
      'timestamp': undefined,
      'datetime': undefined,
      'fundingRate': this.safeNumber(contract, 'fundingRate'),
      'fundingTimestamp': fundingTime,
      'fundingDatetime': this.iso8601(fundingTime),
      'nextFundingRate': nextFundingRate,
      'nextFundingTimestamp': nextFundingRateTimestamp,
      'nextFundingDatetime': this.iso8601(nextFundingRateTimestamp),
      'previousFundingRate': undefined,
      'previousFundingTimestamp': undefined,
      'previousFundingDatetime': undefined
    };
  }
  async fetchFundingRate(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchFundingRate
     * @description fetch the current funding rate
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['swap']) {
      throw new _errors.ExchangeError(this.id + ' fetchFundingRate() is only valid for swap markets');
    }
    const request = {
      'instId': market['id']
    };
    const response = await this.publicGetPublicFundingRate(this.extend(request, params));
    //
    //    {
    //        "code": "0",
    //        "data": [
    //            {
    //                "fundingRate": "0.00027815",
    //                "fundingTime": "1634256000000",
    //                "instId": "BTC-USD-SWAP",
    //                "instType": "SWAP",
    //                "nextFundingRate": "0.00017",
    //                "nextFundingTime": "1634284800000"
    //            }
    //        ],
    //        "msg": ""
    //    }
    //
    const data = this.safeValue(response, 'data', []);
    const entry = this.safeValue(data, 0, {});
    return this.parseFundingRate(entry, market);
  }
  async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchFundingHistory
     * @description fetch the history of funding payments paid and received on this account
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch funding history for
     * @param {int|undefined} limit the maximum number of funding history structures to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
     */
    await this.loadMarkets();
    const request = {
      // 'instType': 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
      // 'ccy': currency['id'],
      // 'mgnMode': 'isolated', // isolated, cross
      // 'ctType': 'linear', // linear, inverse, only applicable to FUTURES/SWAP
      'type': '8'
      //
      // supported values for type
      //
      //     1 Transfer
      //     2 Trade
      //     3 Delivery
      //     4 Auto token conversion
      //     5 Liquidation
      //     6 Margin transfer
      //     7 Interest deduction
      //     8 Funding fee
      //     9 ADL
      //     10 Clawback
      //     11 System token conversion
      //     12 Strategy transfer
      //     13 ddh
      //
      // 'subType': '',
      //
      // supported values for subType
      //
      //     1 Buy
      //     2 Sell
      //     3 Open long
      //     4 Open short
      //     5 Close long
      //     6 Close short
      //     9 Interest deduction
      //     11 Transfer in
      //     12 Transfer out
      //     160 Manual margin increase
      //     161 Manual margin decrease
      //     162 Auto margin increase
      //     110 Auto buy
      //     111 Auto sell
      //     118 System token conversion transfer in
      //     119 System token conversion transfer out
      //     100 Partial liquidation close long
      //     101 Partial liquidation close short
      //     102 Partial liquidation buy
      //     103 Partial liquidation sell
      //     104 Liquidation long
      //     105 Liquidation short
      //     106 Liquidation buy
      //     107 Liquidation sell
      //     110 Liquidation transfer in
      //     111 Liquidation transfer out
      //     125 ADL close long
      //     126 ADL close short
      //     127 ADL buy
      //     128 ADL sell
      //     131 ddh buy
      //     132 ddh sell
      //     170 Exercised
      //     171 Counterparty exercised
      //     172 Expired OTM
      //     112 Delivery long
      //     113 Delivery short
      //     117 Delivery/Exercise clawback
      //     173 Funding fee expense
      //     174 Funding fee income
      //     200 System transfer in
      //     201 Manually transfer in
      //     202 System transfer out
      //     203 Manually transfer out
      //
      // 'after': 'id', // earlier than the requested bill ID
      // 'before': 'id', // newer than the requested bill ID
      // 'limit': '100', // default 100, max 100
    };

    if (limit !== undefined) {
      request['limit'] = limit.toString(); // default 100, max 100
    }

    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      if (market['contract']) {
        if (market['linear']) {
          request['ctType'] = 'linear';
          request['ccy'] = market['quoteId'];
        } else {
          request['ctType'] = 'inverse';
          request['ccy'] = market['baseId'];
        }
      }
    }
    const [type, query] = this.handleMarketTypeAndParams('fetchFundingHistory', market, params);
    if (type === 'swap') {
      request['instType'] = this.convertToInstrumentType(type);
    }
    // AccountBillsArchive has the same cost as AccountBills but supports three months of data
    const response = await this.privateGetAccountBillsArchive(this.extend(request, query));
    //
    //    {
    //        "bal": "0.0242946200998573",
    //        "balChg": "0.0000148752712240",
    //        "billId": "377970609204146187",
    //        "ccy": "ETH",
    //        "execType": "",
    //        "fee": "0",
    //        "from": "",
    //        "instId": "ETH-USD-SWAP",
    //        "instType": "SWAP",
    //        "mgnMode": "isolated",
    //        "notes": "",
    //        "ordId": "",
    //        "pnl": "0.000014875271224",
    //        "posBal": "0",
    //        "posBalChg": "0",
    //        "subType": "174",
    //        "sz": "9",
    //        "to": "",
    //        "ts": "1636387215588",
    //        "type": "8"
    //    }
    //
    const data = this.safeValue(response, 'data', []);
    const result = [];
    for (let i = 0; i < data.length; i++) {
      const entry = data[i];
      const timestamp = this.safeInteger(entry, 'ts');
      const instId = this.safeString(entry, 'instId');
      const market = this.safeMarket(instId);
      const currencyId = this.safeString(entry, 'ccy');
      const code = this.safeCurrencyCode(currencyId);
      result.push({
        'info': entry,
        'symbol': market['symbol'],
        'code': code,
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp),
        'id': this.safeString(entry, 'billId'),
        'amount': this.safeNumber(entry, 'balChg')
      });
    }
    const sorted = this.sortBy(result, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#setLeverage
     * @description set the level of leverage for a market
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-set-leverage
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string} params.marginMode 'cross' or 'isolated'
     * @param {string|undefined} params.posSide 'long' or 'short' for isolated margin long/short mode on futures and swap markets
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
    }
    // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
    // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
    if (leverage < 1 || leverage > 125) {
      throw new _errors.BadRequest(this.id + ' setLeverage() leverage should be between 1 and 125');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    let marginMode = undefined;
    [marginMode, params] = this.handleMarginModeAndParams('setLeverage', params);
    if (marginMode === undefined) {
      marginMode = this.safeString(params, 'mgnMode', 'cross'); // cross as default marginMode
    }

    if (marginMode !== 'cross' && marginMode !== 'isolated') {
      throw new _errors.BadRequest(this.id + ' setLeverage() requires a marginMode parameter that must be either cross or isolated');
    }
    const request = {
      'lever': leverage,
      'mgnMode': marginMode,
      'instId': market['id']
    };
    const posSide = this.safeString(params, 'posSide');
    if (marginMode === 'isolated') {
      if (posSide === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' setLeverage() requires a posSide argument for isolated margin');
      }
      if (posSide !== 'long' && posSide !== 'short' && posSide !== 'net') {
        throw new _errors.BadRequest(this.id + ' setLeverage() requires the posSide argument to be either "long", "short" or "net"');
      }
    }
    const response = await this.privatePostAccountSetLeverage(this.extend(request, params));
    //
    //     {
    //       "code": "0",
    //       "data": [
    //         {
    //           "instId": "BTC-USDT-SWAP",
    //           "lever": "5",
    //           "mgnMode": "isolated",
    //           "posSide": "long"
    //         }
    //       ],
    //       "msg": ""
    //     }
    //
    return response;
  }
  async setPositionMode(hedged, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#setPositionMode
     * @description set hedged to true or false for a market
     * @param {bool} hedged set to true to use long_short_mode, false for net_mode
     * @param {string|undefined} symbol not used by okx setPositionMode
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} response from the exchange
     */
    let hedgeMode = undefined;
    if (hedged) {
      hedgeMode = 'long_short_mode';
    } else {
      hedgeMode = 'net_mode';
    }
    const request = {
      'posMode': hedgeMode
    };
    const response = await this.privatePostAccountSetPositionMode(this.extend(request, params));
    //
    //    {
    //        "code": "0",
    //        "data": [
    //            {
    //                "posMode": "net_mode"
    //            }
    //        ],
    //        "msg": ""
    //    }
    //
    return response;
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#setMarginMode
     * @description set margin mode to 'cross' or 'isolated'
     * @param {string} marginMode 'cross' or 'isolated'
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} response from the exchange
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setMarginMode() requires a symbol argument');
    }
    // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
    // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
    marginMode = marginMode.toLowerCase();
    if (marginMode !== 'cross' && marginMode !== 'isolated') {
      throw new _errors.BadRequest(this.id + ' setMarginMode() marginMode must be either cross or isolated');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const lever = this.safeInteger(params, 'lever');
    if (lever === undefined || lever < 1 || lever > 125) {
      throw new _errors.BadRequest(this.id + ' setMarginMode() params["lever"] should be between 1 and 125');
    }
    params = this.omit(params, ['lever']);
    const request = {
      'lever': lever,
      'mgnMode': marginMode,
      'instId': market['id']
    };
    const response = await this.privatePostAccountSetLeverage(this.extend(request, params));
    //
    //     {
    //       "code": "0",
    //       "data": [
    //         {
    //           "instId": "BTC-USDT-SWAP",
    //           "lever": "5",
    //           "mgnMode": "isolated",
    //           "posSide": "long"
    //         }
    //       ],
    //       "msg": ""
    //     }
    //
    return response;
  }
  async fetchBorrowRates(params = {}) {
    /**
     * @method
     * @name okx#fetchBorrowRates
     * @description fetch the borrow interest rates of all currencies
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a list of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    await this.loadMarkets();
    const response = await this.privateGetAccountInterestRate(params);
    //
    //    {
    //        "code": "0",
    //        "data": [
    //            {
    //                "ccy": "BTC",
    //                "interestRate": "0.00000833"
    //            }
    //            ...
    //        ],
    //    }
    //
    const timestamp = this.milliseconds();
    const data = this.safeValue(response, 'data');
    const rates = {};
    for (let i = 0; i < data.length; i++) {
      const rate = data[i];
      const code = this.safeCurrencyCode(this.safeString(rate, 'ccy'));
      rates[code] = {
        'currency': code,
        'rate': this.safeNumber(rate, 'interestRate'),
        'period': 86400000,
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp),
        'info': rate
      };
    }
    return rates;
  }
  async fetchBorrowRate(code, params = {}) {
    /**
     * @method
     * @name okx#fetchBorrowRate
     * @description fetch the rate of interest to borrow a currency for margin trading
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'ccy': currency['id']
    };
    const response = await this.privateGetAccountInterestRate(this.extend(request, params));
    //
    //    {
    //        "code": "0",
    //        "data": [
    //             {
    //                "ccy": "USDT",
    //                "interestRate": "0.00002065"
    //             }
    //             ...
    //        ],
    //        "msg": ""
    //    }
    //
    const data = this.safeValue(response, 'data');
    const rate = this.safeValue(data, 0);
    return this.parseBorrowRate(rate);
  }
  parseBorrowRate(info, currency = undefined) {
    //
    //    {
    //        "amt": "992.10341195",
    //        "ccy": "BTC",
    //        "rate": "0.01",
    //        "ts": "1643954400000"
    //    }
    //
    const ccy = this.safeString(info, 'ccy');
    const timestamp = this.safeInteger(info, 'ts');
    return {
      'currency': this.safeCurrencyCode(ccy),
      'rate': this.safeNumber2(info, 'interestRate', 'rate'),
      'period': 86400000,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': info
    };
  }
  parseBorrowRateHistories(response, codes, since, limit) {
    //
    //    [
    //        {
    //            "amt": "992.10341195",
    //            "ccy": "BTC",
    //            "rate": "0.01",
    //            "ts": "1643954400000"
    //        },
    //        ...
    //    ]
    //
    const borrowRateHistories = {};
    for (let i = 0; i < response.length; i++) {
      const item = response[i];
      const code = this.safeCurrencyCode(this.safeString(item, 'ccy'));
      if (codes === undefined || this.inArray(code, codes)) {
        if (!(code in borrowRateHistories)) {
          borrowRateHistories[code] = [];
        }
        const borrowRateStructure = this.parseBorrowRate(item);
        borrowRateHistories[code].push(borrowRateStructure);
      }
    }
    const keys = Object.keys(borrowRateHistories);
    for (let i = 0; i < keys.length; i++) {
      const code = keys[i];
      borrowRateHistories[code] = this.filterByCurrencySinceLimit(borrowRateHistories[code], code, since, limit);
    }
    return borrowRateHistories;
  }
  parseBorrowRateHistory(response, code, since, limit) {
    const result = [];
    for (let i = 0; i < response.length; i++) {
      const item = response[i];
      const borrowRate = this.parseBorrowRate(item);
      result.push(borrowRate);
    }
    const sorted = this.sortBy(result, 'timestamp');
    return this.filterByCurrencySinceLimit(sorted, code, since, limit);
  }
  async fetchBorrowRateHistories(codes = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchBorrowRateHistories
     * @description retrieves a history of a multiple currencies borrow interest rate at specific time slots, returns all currencies if no symbols passed, default is undefined
     * @param {[string]|undefined} codes list of unified currency codes, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest borrowRate, default is undefined
     * @param {int|undefined} limit max number of borrow rate prices to return, default is undefined
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a dictionary of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure} indexed by the market symbol
     */
    await this.loadMarkets();
    const request = {
      // 'ccy': currency['id'],
      // 'after': this.milliseconds (), // Pagination of data to return records earlier than the requested ts,
      // 'before': since, // Pagination of data to return records newer than the requested ts,
      // 'limit': limit, // default is 100 and maximum is 100
    };
    if (since !== undefined) {
      request['before'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.publicGetAssetLendingRateHistory(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "amt": "992.10341195",
    //                 "ccy": "BTC",
    //                 "rate": "0.01",
    //                 "ts": "1643954400000"
    //             },
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseBorrowRateHistories(data, codes, since, limit);
  }
  async fetchBorrowRateHistory(code, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchBorrowRateHistory
     * @description retrieves a history of a currencies borrow interest rate at specific time slots
     * @param {string} code unified currency code
     * @param {int|undefined} since timestamp for the earliest borrow rate
     * @param {int|undefined} limit the maximum number of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure} to retrieve
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'ccy': currency['id']
      // 'after': this.milliseconds (), // Pagination of data to return records earlier than the requested ts,
      // 'before': since, // Pagination of data to return records newer than the requested ts,
      // 'limit': limit, // default is 100 and maximum is 100
    };

    if (since !== undefined) {
      request['before'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.publicGetAssetLendingRateHistory(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "amt": "992.10341195",
    //                 "ccy": "BTC",
    //                 "rate": "0.01",
    //                 "ts": "1643954400000"
    //             },
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseBorrowRateHistory(data, code, since, limit);
  }
  async modifyMarginHelper(symbol, amount, type, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const posSide = this.safeString(params, 'posSide', 'net');
    params = this.omit(params, ['posSide']);
    const request = {
      'instId': market['id'],
      'amt': amount,
      'type': type,
      'posSide': posSide
    };
    const response = await this.privatePostAccountPositionMarginBalance(this.extend(request, params));
    //
    //     {
    //       "code": "0",
    //       "data": [
    //         {
    //           "amt": "0.01",
    //           "instId": "ETH-USD-SWAP",
    //           "posSide": "net",
    //           "type": "reduce"
    //         }
    //       ],
    //       "msg": ""
    //     }
    //
    return this.parseMarginModification(response, market);
  }
  parseMarginModification(data, market = undefined) {
    const innerData = this.safeValue(data, 'data', []);
    const entry = this.safeValue(innerData, 0, {});
    const errorCode = this.safeString(data, 'code');
    const status = errorCode === '0' ? 'ok' : 'failed';
    const amountRaw = this.safeNumber(entry, 'amt');
    const typeRaw = this.safeString(entry, 'type');
    const type = typeRaw === 'reduce' ? 'reduce' : 'add';
    const marketId = this.safeString(entry, 'instId');
    const responseMarket = this.safeMarket(marketId, market);
    const code = responseMarket['inverse'] ? responseMarket['base'] : responseMarket['quote'];
    return {
      'info': data,
      'type': type,
      'amount': amountRaw,
      'code': code,
      'symbol': responseMarket['symbol'],
      'status': status
    };
  }
  async reduceMargin(symbol, amount, params = {}) {
    /**
     * @method
     * @name okx#reduceMargin
     * @description remove margin from a position
     * @param {string} symbol unified market symbol
     * @param {float} amount the amount of margin to remove
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=reduce-margin-structure}
     */
    return await this.modifyMarginHelper(symbol, amount, 'reduce', params);
  }
  async addMargin(symbol, amount, params = {}) {
    /**
     * @method
     * @name okx#addMargin
     * @description add margin
     * @param {string} symbol unified market symbol
     * @param {float} amount amount of margin to add
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=add-margin-structure}
     */
    return await this.modifyMarginHelper(symbol, amount, 'add', params);
  }
  async fetchMarketLeverageTiers(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchMarketLeverageTiers
     * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes for a single market
     * @see https://www.okx.com/docs-v5/en/#rest-api-public-data-get-position-tiers
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {string} params.marginMode 'cross' or 'isolated'
     * @returns {object} a [leverage tiers structure]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const type = market['spot'] ? 'MARGIN' : this.convertToInstrumentType(market['type']);
    const uly = this.safeString(market['info'], 'uly');
    if (!uly) {
      if (type !== 'MARGIN') {
        throw new _errors.BadRequest(this.id + ' fetchMarketLeverageTiers() cannot fetch leverage tiers for ' + symbol);
      }
    }
    let marginMode = undefined;
    [marginMode, params] = this.handleMarginModeAndParams('fetchMarketLeverageTiers', params);
    if (marginMode === undefined) {
      marginMode = this.safeString(params, 'tdMode', 'cross'); // cross as default marginMode
    }

    const request = {
      'instType': type,
      'tdMode': marginMode,
      'uly': uly
    };
    if (type === 'MARGIN') {
      request['instId'] = market['id'];
    }
    const response = await this.publicGetPublicPositionTiers(this.extend(request, params));
    //
    //    {
    //        "code": "0",
    //        "data": [
    //            {
    //                "baseMaxLoan": "500",
    //                "imr": "0.1",
    //                "instId": "ETH-USDT",
    //                "maxLever": "10",
    //                "maxSz": "500",
    //                "minSz": "0",
    //                "mmr": "0.03",
    //                "optMgnFactor": "0",
    //                "quoteMaxLoan": "200000",
    //                "tier": "1",
    //                "uly": ""
    //            },
    //            ...
    //        ]
    //    }
    //
    const data = this.safeValue(response, 'data');
    return this.parseMarketLeverageTiers(data, market);
  }
  parseMarketLeverageTiers(info, market = undefined) {
    /**
     * @ignore
     * @method
     * @param {object} info Exchange response for 1 market
     * @param {object} market CCXT market
     */
    //
    //    [
    //        {
    //            "baseMaxLoan": "500",
    //            "imr": "0.1",
    //            "instId": "ETH-USDT",
    //            "maxLever": "10",
    //            "maxSz": "500",
    //            "minSz": "0",
    //            "mmr": "0.03",
    //            "optMgnFactor": "0",
    //            "quoteMaxLoan": "200000",
    //            "tier": "1",
    //            "uly": ""
    //        },
    //        ...
    //    ]
    //
    const tiers = [];
    for (let i = 0; i < info.length; i++) {
      const tier = info[i];
      tiers.push({
        'tier': this.safeInteger(tier, 'tier'),
        'currency': market['quote'],
        'minNotional': this.safeNumber(tier, 'minSz'),
        'maxNotional': this.safeNumber(tier, 'maxSz'),
        'maintenanceMarginRate': this.safeNumber(tier, 'mmr'),
        'maxLeverage': this.safeNumber(tier, 'maxLever'),
        'info': tier
      });
    }
    return tiers;
  }
  async fetchBorrowInterest(code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchBorrowInterest
     * @description fetch the interest owed by the user for borrowing currency for margin trading
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-get-interest-accrued-data
     * @param {string|undefined} code the unified currency code for the currency of the interest
     * @param {string|undefined} symbol the market symbol of an isolated margin market, if undefined, the interest for cross margin markets is returned
     * @param {int|undefined} since timestamp in ms of the earliest time to receive interest records for
     * @param {int|undefined} limit the number of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure} to retrieve
     * @param {object} params exchange specific parameters
     * @param {int|undefined} params.type Loan type 1 - VIP loans 2 - Market loans *Default is Market loans*
     * @param {string} params.marginMode 'cross' or 'isolated'
     * @returns {[object]} An list of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure}
     */
    await this.loadMarkets();
    let marginMode = undefined;
    [marginMode, params] = this.handleMarginModeAndParams('fetchBorrowInterest', params);
    if (marginMode === undefined) {
      marginMode = this.safeString(params, 'mgnMode', 'cross'); // cross as default marginMode
    }

    const request = {
      'mgnMode': marginMode
    };
    let market = undefined;
    if (code !== undefined) {
      const currency = this.currency(code);
      request['ccy'] = currency['id'];
    }
    if (since !== undefined) {
      request['before'] = since - 1;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['instId'] = market['id'];
    }
    const response = await this.privateGetAccountInterestAccrued(this.extend(request, params));
    //
    //    {
    //        "code": "0",
    //        "data": [
    //            {
    //                "ccy": "USDT",
    //                "instId": "",
    //                "interest": "0.0003960833333334",
    //                "interestRate": "0.0000040833333333",
    //                "liab": "97",
    //                "mgnMode": "",
    //                "ts": "1637312400000",
    //                "type": "1"
    //            },
    //            ...
    //        ],
    //        "msg": ""
    //    }
    //
    const data = this.safeValue(response, 'data');
    const interest = this.parseBorrowInterests(data);
    return this.filterByCurrencySinceLimit(interest, code, since, limit);
  }
  parseBorrowInterest(info, market = undefined) {
    const instId = this.safeString(info, 'instId');
    if (instId !== undefined) {
      market = this.safeMarket(instId, market);
    }
    const timestamp = this.safeInteger(info, 'ts');
    return {
      'symbol': this.safeString(market, 'symbol'),
      'marginMode': this.safeString(info, 'mgnMode'),
      'currency': this.safeCurrencyCode(this.safeString(info, 'ccy')),
      'interest': this.safeNumber(info, 'interest'),
      'interestRate': this.safeNumber(info, 'interestRate'),
      'amountBorrowed': this.safeNumber(info, 'liab'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': info
    };
  }
  async borrowMargin(code, amount, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#borrowMargin
     * @description create a loan to borrow margin
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-vip-loans-borrow-and-repay
     * @param {string} code unified currency code of the currency to borrow
     * @param {float} amount the amount to borrow
     * @param {string|undefined} symbol not used by okx.borrowMargin ()
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'ccy': currency['id'],
      'amt': this.currencyToPrecision(code, amount),
      'side': 'borrow'
    };
    const response = await this.privatePostAccountBorrowRepay(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "amt": "102",
    //                 "availLoan": "97",
    //                 "ccy": "USDT",
    //                 "loanQuota": "6000000",
    //                 "posLoan": "0",
    //                 "side": "borrow",
    //                 "usedLoan": "97"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const loan = this.safeValue(data, 0);
    const transaction = this.parseMarginLoan(loan, currency);
    return this.extend(transaction, {
      'symbol': symbol
    });
  }
  async repayMargin(code, amount, symbol = undefined, params = {}) {
    /**
     * @method
     * @name okx#repayMargin
     * @description repay borrowed margin and interest
     * @see https://www.okx.com/docs-v5/en/#rest-api-account-vip-loans-borrow-and-repay
     * @param {string} code unified currency code of the currency to repay
     * @param {float} amount the amount to repay
     * @param {string|undefined} symbol not used by okx.repayMargin ()
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'ccy': currency['id'],
      'amt': this.currencyToPrecision(code, amount),
      'side': 'repay'
    };
    const response = await this.privatePostAccountBorrowRepay(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "amt": "102",
    //                 "availLoan": "97",
    //                 "ccy": "USDT",
    //                 "loanQuota": "6000000",
    //                 "posLoan": "0",
    //                 "side": "repay",
    //                 "usedLoan": "97"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    const loan = this.safeValue(data, 0);
    const transaction = this.parseMarginLoan(loan, currency);
    return this.extend(transaction, {
      'symbol': symbol
    });
  }
  parseMarginLoan(info, currency = undefined) {
    //
    //     {
    //         "amt": "102",
    //         "availLoan": "97",
    //         "ccy": "USDT",
    //         "loanQuota": "6000000",
    //         "posLoan": "0",
    //         "side": "repay",
    //         "usedLoan": "97"
    //     }
    //
    const currencyId = this.safeString(info, 'ccy');
    return {
      'id': undefined,
      'currency': this.safeCurrencyCode(currencyId, currency),
      'amount': this.safeNumber(info, 'amt'),
      'symbol': undefined,
      'timestamp': undefined,
      'datetime': undefined,
      'info': info
    };
  }
  async fetchOpenInterest(symbol, params = {}) {
    /**
     * @method
     * @name okx#fetchOpenInterest
     * @description Retrieves the open interest of a currency
     * @see https://www.okx.com/docs-v5/en/#rest-api-public-data-get-open-interest
     * @param {string} symbol Unified CCXT market symbol
     * @param {object} params exchange specific parameters
     * @returns {object} an open interest structure{@link https://docs.ccxt.com/#/?id=interest-history-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['contract']) {
      throw new _errors.BadRequest(this.id + ' fetchOpenInterest() supports contract markets only');
    }
    const type = this.convertToInstrumentType(market['type']);
    const uly = this.safeString(market['info'], 'uly');
    const request = {
      'instType': type,
      'uly': uly,
      'instId': market['id']
    };
    const response = await this.publicGetPublicOpenInterest(this.extend(request, params));
    //
    //     {
    //         "code": "0",
    //         "data": [
    //             {
    //                 "instId": "BTC-USDT-SWAP",
    //                 "instType": "SWAP",
    //                 "oi": "2125419",
    //                 "oiCcy": "21254.19",
    //                 "ts": "1664005108969"
    //             }
    //         ],
    //         "msg": ""
    //     }
    //
    const data = this.safeValue(response, 'data', []);
    return this.parseOpenInterest(data[0], market);
  }
  async fetchOpenInterestHistory(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchOpenInterestHistory
     * @description Retrieves the open interest history of a currency
     * @param {string} symbol Unified CCXT currency code instead of a unified symbol
     * @param {string} timeframe "5m", "1h", or "1d"
     * @param {int|undefined} since The time in ms of the earliest record to retrieve as a unix timestamp
     * @param {int|undefined} limit Not used by okx, but parsed internally by CCXT
     * @param {object} params Exchange specific parameters
     * @param {int|undefined} params.until The time in ms of the latest record to retrieve as a unix timestamp
     * @returns An array of [open interest structures]{@link https://docs.ccxt.com/#/?id=interest-history-structure}
     */
    const options = this.safeValue(this.options, 'fetchOpenInterestHistory', {});
    const timeframes = this.safeValue(options, 'timeframes', {});
    timeframe = this.safeString(timeframes, timeframe, timeframe);
    if (timeframe !== '5m' && timeframe !== '1H' && timeframe !== '1D') {
      throw new _errors.BadRequest(this.id + ' fetchOpenInterestHistory cannot only use the 5m, 1h, and 1d timeframe');
    }
    await this.loadMarkets();
    const currency = this.currency(symbol);
    const request = {
      'ccy': currency['id'],
      'period': timeframe
    };
    if (since !== undefined) {
      request['begin'] = since;
    }
    const until = this.safeInteger2(params, 'till', 'until');
    if (until !== undefined) {
      request['end'] = until;
      params = this.omit(params, ['until', 'till']);
    }
    const response = await this.publicGetRubikStatContractsOpenInterestVolume(this.extend(request, params));
    //
    //    {
    //        code: '0',
    //        data: [
    //            [
    //                '1648221300000',  // timestamp
    //                '2183354317.945',  // open interest (USD)
    //                '74285877.617',  // volume (USD)
    //            ],
    //            ...
    //        ],
    //        msg: ''
    //    }
    //
    const data = this.safeValue(response, 'data');
    return this.parseOpenInterests(data, undefined, since, limit);
  }
  parseOpenInterest(interest, market = undefined) {
    //
    // fetchOpenInterestHistory
    //
    //    [
    //        '1648221300000',  // timestamp
    //        '2183354317.945',  // open interest (USD)
    //        '74285877.617',  // volume (USD)
    //    ]
    //
    // fetchOpenInterest
    //
    //     {
    //         "instId": "BTC-USDT-SWAP",
    //         "instType": "SWAP",
    //         "oi": "2125419",
    //         "oiCcy": "21254.19",
    //         "ts": "1664005108969"
    //     }
    //
    const id = this.safeString(interest, 'instId');
    market = this.safeMarket(id, market);
    const time = this.safeInteger(interest, 'ts');
    const timestamp = this.safeNumber(interest, 0, time);
    const numContracts = this.safeNumber(interest, 'oi');
    const inCurrency = this.safeNumber(interest, 'oiCcy');
    const openInterest = this.safeNumber(interest, 1, inCurrency);
    return {
      'symbol': this.safeSymbol(id),
      'baseVolume': undefined,
      'quoteVolume': openInterest,
      'openInterestAmount': numContracts,
      'openInterestValue': openInterest,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'info': interest
    };
  }
  setSandboxMode(enable) {
    super.setSandboxMode(enable);
    if (enable) {
      this.headers['x-simulated-trading'] = '1';
    } else if ('x-simulated-trading' in this.headers) {
      this.headers = this.omit(this.headers, 'x-simulated-trading');
    }
  }
  async fetchDepositWithdrawFees(codes = undefined, params = {}) {
    /**
     * @method
     * @name okx#fetchDepositWithdrawFees
     * @description fetch deposit and withdraw fees
     * @see https://www.okx.com/docs-v5/en/#rest-api-funding-get-currencies
     * @param {[string]|undefined} codes list of unified currency codes
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [fees structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    await this.loadMarkets();
    const response = await this.privateGetAssetCurrencies(params);
    //
    //    {
    //        "code": "0",
    //        "data": [
    //            {
    //                "canDep": true,
    //                "canInternal": false,
    //                "canWd": true,
    //                "ccy": "USDT",
    //                "chain": "USDT-TRC20",
    //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
    //                "mainNet": false,
    //                "maxFee": "1.6",
    //                "maxWd": "8852150",
    //                "minFee": "0.8",
    //                "minWd": "2",
    //                "name": "Tether",
    //                "usedWdQuota": "0",
    //                "wdQuota": "500",
    //                "wdTickSz": "3"
    //            },
    //            {
    //                "canDep": true,
    //                "canInternal": false,
    //                "canWd": true,
    //                "ccy": "USDT",
    //                "chain": "USDT-ERC20",
    //                "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
    //                "mainNet": false,
    //                "maxFee": "16",
    //                "maxWd": "8852150",
    //                "minFee": "8",
    //                "minWd": "2",
    //                "name": "Tether",
    //                "usedWdQuota": "0",
    //                "wdQuota": "500",
    //                "wdTickSz": "3"
    //            },
    //            ...
    //        ],
    //        "msg": ""
    //    }
    //
    const data = this.safeValue(response, 'data');
    return this.parseDepositWithdrawFees(data, codes);
  }
  parseDepositWithdrawFees(response, codes = undefined, currencyIdKey = undefined) {
    //
    // [
    //   {
    //       "canDep": true,
    //       "canInternal": false,
    //       "canWd": true,
    //       "ccy": "USDT",
    //       "chain": "USDT-TRC20",
    //       "logoLink": "https://static.coinall.ltd/cdn/assets/imgs/221/5F74EB20302D7761.png",
    //       "mainNet": false,
    //       "maxFee": "1.6",
    //       "maxWd": "8852150",
    //       "minFee": "0.8",
    //       "minWd": "2",
    //       "name": "Tether",
    //       "usedWdQuota": "0",
    //       "wdQuota": "500",
    //       "wdTickSz": "3"
    //   }
    // ]
    //
    const depositWithdrawFees = {};
    codes = this.marketCodes(codes);
    for (let i = 0; i < response.length; i++) {
      const feeInfo = response[i];
      const currencyId = this.safeString(feeInfo, 'ccy');
      const code = this.safeCurrencyCode(currencyId);
      if (codes === undefined || this.inArray(code, codes)) {
        const depositWithdrawFee = this.safeValue(depositWithdrawFees, code);
        if (depositWithdrawFee === undefined) {
          depositWithdrawFees[code] = this.depositWithdrawFee({});
        }
        depositWithdrawFees[code]['info'][currencyId] = feeInfo;
        const chain = this.safeString(feeInfo, 'chain');
        const chainSplit = chain.split('-');
        const networkId = this.safeValue(chainSplit, 1);
        const withdrawFee = this.safeNumber(feeInfo, 'minFee');
        const withdrawResult = {
          'fee': withdrawFee,
          'percentage': withdrawFee !== undefined ? false : undefined
        };
        const depositResult = {
          'fee': undefined,
          'percentage': undefined
        };
        const networkCode = this.networkIdToCode(networkId, code);
        depositWithdrawFees[code]['networks'][networkCode] = {
          'withdraw': withdrawResult,
          'deposit': depositResult
        };
      }
    }
    const depositWithdrawCodes = Object.keys(depositWithdrawFees);
    for (let i = 0; i < depositWithdrawCodes.length; i++) {
      const code = depositWithdrawCodes[i];
      const currency = this.currency(code);
      depositWithdrawFees[code] = this.assignDefaultDepositWithdrawFees(depositWithdrawFees[code], currency);
    }
    return depositWithdrawFees;
  }
  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (!response) {
      return; // fallback to default error handler
    }
    //
    //    {
    //        "code": "1",
    //        "data": [
    //            {
    //                "clOrdId": "",
    //                "ordId": "",
    //                "sCode": "51119",
    //                "sMsg": "Order placement failed due to insufficient balance. ",
    //                "tag": ""
    //            }
    //        ],
    //        "msg": ""
    //    },
    //    {
    //        "code": "58001",
    //        "data": [],
    //        "msg": "Incorrect trade password"
    //    }
    //
    const code = this.safeString(response, 'code');
    if (code !== '0') {
      const feedback = this.id + ' ' + body;
      const data = this.safeValue(response, 'data', []);
      for (let i = 0; i < data.length; i++) {
        const error = data[i];
        const errorCode = this.safeString(error, 'sCode');
        const message = this.safeString(error, 'sMsg');
        this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
      }
      this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);
      throw new _errors.ExchangeError(feedback); // unknown message
    }
  }
}
exports.default = okx;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
var _number = require("./base/functions/number.js");
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
class phemex extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'phemex',
      'name': 'Phemex',
      'countries': ['CN'],
      'rateLimit': 100,
      'version': 'v1',
      'certified': false,
      'pro': true,
      'hostname': 'api.phemex.com',
      'has': {
        'CORS': undefined,
        'spot': true,
        'margin': false,
        'swap': true,
        'future': false,
        'option': false,
        'addMargin': false,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'createOrder': true,
        'createReduceOnlyOrder': true,
        'createStopLimitOrder': true,
        'createStopMarketOrder': true,
        'createStopOrder': true,
        'editOrder': true,
        'fetchBalance': true,
        'fetchBorrowRate': false,
        'fetchBorrowRateHistories': false,
        'fetchBorrowRateHistory': false,
        'fetchBorrowRates': false,
        'fetchBorrowRatesPerSymbol': false,
        'fetchClosedOrders': true,
        'fetchCurrencies': true,
        'fetchDepositAddress': true,
        'fetchDeposits': true,
        'fetchFundingHistory': true,
        'fetchFundingRate': true,
        'fetchFundingRateHistories': false,
        'fetchFundingRateHistory': false,
        'fetchFundingRates': false,
        'fetchIndexOHLCV': false,
        'fetchLeverage': false,
        'fetchLeverageTiers': true,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': true,
        'fetchMarkOHLCV': false,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenOrders': true,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrders': true,
        'fetchPositions': true,
        'fetchPositionsRisk': false,
        'fetchPremiumIndexOHLCV': false,
        'fetchTicker': true,
        'fetchTrades': true,
        'fetchTradingFee': false,
        'fetchTradingFees': false,
        'fetchTransfers': true,
        'fetchWithdrawals': true,
        'reduceMargin': false,
        'setLeverage': true,
        'setMargin': true,
        'setMarginMode': true,
        'setPositionMode': true,
        'transfer': true,
        'withdraw': undefined
      },
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/85225056-221eb600-b3d7-11ea-930d-564d2690e3f6.jpg',
        'test': {
          'v1': 'https://testnet-api.phemex.com/v1',
          'public': 'https://testnet-api.phemex.com/exchange/public',
          'private': 'https://testnet-api.phemex.com'
        },
        'api': {
          'v1': 'https://{hostname}/v1',
          'v2': 'https://{hostname}',
          'public': 'https://{hostname}/exchange/public',
          'private': 'https://{hostname}'
        },
        'www': 'https://phemex.com',
        'doc': 'https://github.com/phemex/phemex-api-docs',
        'fees': 'https://phemex.com/fees-conditions',
        'referral': {
          'url': 'https://phemex.com/register?referralCode=EDNVJ',
          'discount': 0.1
        }
      },
      'timeframes': {
        '1m': '60',
        '3m': '180',
        '5m': '300',
        '15m': '900',
        '30m': '1800',
        '1h': '3600',
        '2h': '7200',
        '3h': '10800',
        '4h': '14400',
        '6h': '21600',
        '12h': '43200',
        '1d': '86400',
        '1w': '604800',
        '1M': '2592000',
        '3M': '7776000',
        '1Y': '31104000'
      },
      'api': {
        'public': {
          'get': ['cfg/v2/products', 'cfg/fundingRates', 'products', 'nomics/trades', 'md/kline', 'md/v2/kline/list', 'md/v2/kline', 'md/v2/kline/last' // perpetual ?symbol=<symbol>&resolution=<resolution>&limit=<limit>
          ]
        },

        'v1': {
          'get': ['md/orderbook', 'md/trade', 'md/ticker/24hr', 'md/ticker/24hr/all', 'md/spot/ticker/24hr', 'md/spot/ticker/24hr/all', 'exchange/public/products' // contracts only
          ]
        },

        'v2': {
          'get': ['md/v2/orderbook', 'md/v2/trade', 'md/v2/ticker/24hr', 'md/v2/ticker/24hr/all' // ?id=<id>
          ]
        },

        'private': {
          'get': [
          // spot
          'spot/orders/active',
          // 'spot/orders/active', // ?symbol=<symbol>&clOrDID=<clOrdID>
          'spot/orders', 'spot/wallets', 'exchange/spot/order', 'exchange/spot/order/trades', 'exchange/order/v2/orderList', 'exchange/order/v2/tradingList',
          // swap
          'accounts/accountPositions', 'g-accounts/accountPositions', 'accounts/positions', 'api-data/futures/funding-fees', 'api-data/g-futures/funding-fees', 'api-data/futures/orders', 'api-data/g-futures/orders', 'api-data/futures/orders/by-order-id', 'api-data/g-futures/orders/by-order-id', 'api-data/futures/trades', 'api-data/g-futures/trades', 'api-data/futures/trading-fees', 'api-data/g-futures/trading-fees', 'g-orders/activeList', 'orders/activeList', 'exchange/order/list', 'exchange/order',
          // 'exchange/order', // ?symbol=<symbol>&clOrdID=<clOrdID1,clOrdID2>
          'exchange/order/trade', 'phemex-user/users/children', 'phemex-user/wallets/v2/depositAddress', 'phemex-user/wallets/tradeAccountDetail', 'phemex-user/order/closedPositionList', 'exchange/margins/transfer', 'exchange/wallets/confirm/withdraw', 'exchange/wallets/withdrawList', 'exchange/wallets/depositList', 'exchange/wallets/v2/depositAddress', 'api-data/spots/funds', 'assets/convert',
          // transfer
          'assets/transfer', 'assets/spots/sub-accounts/transfer', 'assets/futures/sub-accounts/transfer', 'assets/quote', 'assets/convert' // ?fromCurrency=<currency>&toCurrency=<currency>&startTime=<start>&endTime=<end>&limit=<limit>&offset=<offset>
          ],

          'post': [
          // spot
          'spot/orders',
          // swap
          'orders', 'g-orders', 'positions/assign', 'exchange/wallets/transferOut', 'exchange/wallets/transferIn', 'exchange/margins', 'exchange/wallets/createWithdraw', 'exchange/wallets/cancelWithdraw', 'exchange/wallets/createWithdrawAddress',
          // transfer
          'assets/transfer', 'assets/spots/sub-accounts/transfer', 'assets/futures/sub-accounts/transfer', 'assets/universal-transfer', 'assets/convert'],
          'put': [
          // spot
          'spot/orders',
          // swap
          'orders/replace', 'g-orders/replace', 'positions/leverage', 'g-positions/leverage', 'g-positions/switch-pos-mode-sync', 'positions/riskLimit' // ?symbol=<symbol>&riskLimit=<riskLimit>&riskLimitEv=<riskLimitEv>
          ],

          'delete': [
          // spot
          'spot/orders', 'spot/orders/all',
          // 'spot/orders', // ?symbol=<symbol>&clOrdID=<clOrdID>
          // swap
          'orders/cancel', 'orders', 'orders/all', 'g-orders/cancel', 'g-orders', 'g-orders/all' // ?symbol=<symbol>&untriggered=<untriggered>&text=<text>
          ]
        }
      },

      'precisionMode': _number.TICK_SIZE,
      'fees': {
        'trading': {
          'tierBased': false,
          'percentage': true,
          'taker': this.parseNumber('0.001'),
          'maker': this.parseNumber('0.001')
        }
      },
      'requiredCredentials': {
        'apiKey': true,
        'secret': true
      },
      'exceptions': {
        'exact': {
          // not documented
          '412': _errors.BadRequest,
          '6001': _errors.BadRequest,
          // documented
          '19999': _errors.BadRequest,
          '10001': _errors.DuplicateOrderId,
          '10002': _errors.OrderNotFound,
          '10003': _errors.CancelPending,
          '10004': _errors.CancelPending,
          '10005': _errors.CancelPending,
          '11001': _errors.InsufficientFunds,
          '11002': _errors.InvalidOrder,
          '11003': _errors.InsufficientFunds,
          '11004': _errors.InvalidOrder,
          '11005': _errors.InsufficientFunds,
          '11006': _errors.ExchangeError,
          '11007': _errors.ExchangeError,
          '11008': _errors.ExchangeError,
          '11009': _errors.ExchangeError,
          '11010': _errors.InsufficientFunds,
          '11011': _errors.InvalidOrder,
          '11012': _errors.InvalidOrder,
          '11013': _errors.InvalidOrder,
          '11014': _errors.InvalidOrder,
          '11015': _errors.InvalidOrder,
          '11016': _errors.BadRequest,
          '11017': _errors.ExchangeError,
          '11018': _errors.ExchangeError,
          '11019': _errors.ExchangeError,
          '11020': _errors.ExchangeError,
          '11021': _errors.ExchangeError,
          '11022': _errors.AccountSuspended,
          '11023': _errors.ExchangeError,
          '11024': _errors.ExchangeError,
          '11025': _errors.BadRequest,
          '11026': _errors.ExchangeError,
          '11027': _errors.BadSymbol,
          '11028': _errors.BadSymbol,
          '11029': _errors.ExchangeError,
          '11030': _errors.ExchangeError,
          '11031': _errors.DDoSProtection,
          '11032': _errors.DDoSProtection,
          '11033': _errors.DuplicateOrderId,
          '11034': _errors.InvalidOrder,
          '11035': _errors.InvalidOrder,
          '11036': _errors.InvalidOrder,
          '11037': _errors.InvalidOrder,
          '11038': _errors.InvalidOrder,
          '11039': _errors.InvalidOrder,
          '11040': _errors.InvalidOrder,
          '11041': _errors.InvalidOrder,
          '11042': _errors.InvalidOrder,
          '11043': _errors.InvalidOrder,
          '11044': _errors.InvalidOrder,
          '11045': _errors.InvalidOrder,
          '11046': _errors.InvalidOrder,
          '11047': _errors.InvalidOrder,
          '11048': _errors.InvalidOrder,
          '11049': _errors.InvalidOrder,
          '11050': _errors.InvalidOrder,
          '11051': _errors.InvalidOrder,
          '11052': _errors.InvalidOrder,
          '11053': _errors.InvalidOrder,
          '11054': _errors.InvalidOrder,
          '11055': _errors.InvalidOrder,
          '11056': _errors.InvalidOrder,
          '11057': _errors.InvalidOrder,
          '11058': _errors.InvalidOrder,
          '11059': _errors.InvalidOrder,
          '11060': _errors.InvalidOrder,
          '11061': _errors.CancelPending,
          '11062': _errors.InvalidOrder,
          '11063': _errors.InvalidOrder,
          '11064': _errors.InvalidOrder,
          '11065': _errors.InvalidOrder,
          '11066': _errors.InvalidOrder,
          '11067': _errors.InvalidOrder,
          '11068': _errors.InvalidOrder,
          '11069': _errors.ExchangeError,
          '11070': _errors.BadSymbol,
          '11071': _errors.InvalidOrder,
          '11072': _errors.InvalidOrder,
          '11073': _errors.InvalidOrder,
          '11074': _errors.InvalidOrder,
          '11075': _errors.InvalidOrder,
          '11076': _errors.InvalidOrder,
          '11077': _errors.InvalidOrder,
          '11078': _errors.InvalidOrder,
          '11079': _errors.InvalidOrder,
          '11080': _errors.InvalidOrder,
          '11081': _errors.InvalidOrder,
          '11082': _errors.InsufficientFunds,
          '11083': _errors.InvalidOrder,
          '11084': _errors.InvalidOrder,
          '11085': _errors.DuplicateOrderId,
          '11086': _errors.InvalidOrder,
          '11087': _errors.InvalidOrder,
          '11088': _errors.InvalidOrder,
          '11089': _errors.InvalidOrder,
          '11090': _errors.InvalidOrder,
          '11091': _errors.InvalidOrder,
          '11092': _errors.InvalidOrder,
          '11093': _errors.InvalidOrder,
          '11094': _errors.InvalidOrder,
          '11095': _errors.InvalidOrder,
          '11096': _errors.InvalidOrder,
          '11097': _errors.BadRequest,
          '11098': _errors.BadRequest,
          '11099': _errors.ExchangeError,
          '11100': _errors.InsufficientFunds,
          '11101': _errors.InsufficientFunds,
          '11102': _errors.BadRequest,
          '11103': _errors.BadRequest,
          '11104': _errors.BadRequest,
          '11105': _errors.InsufficientFunds,
          '11106': _errors.InsufficientFunds,
          '11107': _errors.ExchangeError,
          '11108': _errors.InvalidOrder,
          '11109': _errors.InvalidOrder,
          '11110': _errors.InvalidOrder,
          '11111': _errors.InvalidOrder,
          '11112': _errors.InvalidOrder,
          '11113': _errors.BadRequest,
          '11114': _errors.InvalidOrder,
          '11115': _errors.InvalidOrder,
          '11116': _errors.InvalidOrder,
          '11117': _errors.InvalidOrder,
          '11118': _errors.InvalidOrder,
          '11119': _errors.InvalidOrder,
          '11120': _errors.InvalidOrder,
          '11121': _errors.InvalidOrder,
          '11122': _errors.InvalidOrder,
          '11123': _errors.InvalidOrder,
          '11124': _errors.InvalidOrder,
          '11125': _errors.InvalidOrder,
          '11126': _errors.InvalidOrder,
          '11128': _errors.InvalidOrder,
          '11129': _errors.InvalidOrder,
          '11130': _errors.InvalidOrder,
          '11131': _errors.InvalidOrder,
          '11132': _errors.InvalidOrder,
          '11133': _errors.InvalidOrder,
          '11134': _errors.InvalidOrder,
          // not documented
          '30000': _errors.BadRequest,
          '30018': _errors.BadRequest,
          '34003': _errors.PermissionDenied,
          '35104': _errors.InsufficientFunds,
          '39995': _errors.RateLimitExceeded,
          '39996': _errors.PermissionDenied // {"code": "39996","msg": "Access denied."}
        },

        'broad': {
          '401 Insufficient privilege': _errors.PermissionDenied,
          '401 Request IP mismatch': _errors.PermissionDenied,
          'Failed to find api-key': _errors.AuthenticationError,
          'Missing required parameter': _errors.BadRequest,
          'API Signature verification failed': _errors.AuthenticationError,
          'Api key not found': _errors.AuthenticationError // {"msg":"Api key not found 698dc9e3-6faa-4910-9476-12857e79e198","code":"10500"}
        }
      },

      'options': {
        'brokerId': 'ccxt2022',
        'x-phemex-request-expiry': 60,
        'createOrderByQuoteRequiresPrice': true,
        'networks': {
          'TRC20': 'TRX',
          'ERC20': 'ETH'
        },
        'defaultNetworks': {
          'USDT': 'ETH'
        },
        'defaultSubType': 'linear',
        'accountsByType': {
          'spot': 'spot',
          'swap': 'future'
        },
        'transfer': {
          'fillResponseFromRequest': true
        }
      }
    });
  }
  parseSafeNumber(value = undefined) {
    if (value === undefined) {
      return value;
    }
    let parts = value.split(',');
    value = parts.join('');
    parts = value.split(' ');
    return this.safeNumber(parts, 0);
  }
  parseSwapMarket(market) {
    //
    //     {
    //         "symbol":"BTCUSD",
    //         "displaySymbol":"BTC / USD",
    //         "indexSymbol":".BTC",
    //         "markSymbol":".MBTC",
    //         "fundingRateSymbol":".BTCFR",
    //         "fundingRate8hSymbol":".BTCFR8H",
    //         "contractUnderlyingAssets":"USD",
    //         "settleCurrency":"BTC",
    //         "quoteCurrency":"USD",
    //         "contractSize":"1 USD",
    //         "lotSize":1,
    //         "tickSize":0.5,
    //         "priceScale":4,
    //         "ratioScale":8,
    //         "pricePrecision":1,
    //         "minPriceEp":5000,
    //         "maxPriceEp":10000000000,
    //         "maxOrderQty":1000000,
    //         "type":"Perpetual",
    //         "status":"Listed",
    //         "tipOrderQty":1000000,
    //         "steps":"50",
    //         "riskLimits":[
    //             {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
    //             {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
    //             {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
    //         ],
    //         "underlyingSymbol":".BTC",
    //         "baseCurrency":"BTC",
    //         "settlementCurrency":"BTC",
    //         "valueScale":8,
    //         "defaultLeverage":0,
    //         "maxLeverage":100,
    //         "initMarginEr":"1000000",
    //         "maintMarginEr":"500000",
    //         "defaultRiskLimitEv":10000000000,
    //         "deleverage":true,
    //         "makerFeeRateEr":-250000,
    //         "takerFeeRateEr":750000,
    //         "fundingInterval":8,
    //         "marketUrl":"https://phemex.com/trade/BTCUSD",
    //         "description":"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.",
    //     }
    //
    const id = this.safeString(market, 'symbol');
    const baseId = this.safeString2(market, 'baseCurrency', 'contractUnderlyingAssets');
    const quoteId = this.safeString(market, 'quoteCurrency');
    const settleId = this.safeString(market, 'settleCurrency');
    const base = this.safeCurrencyCode(baseId);
    const quote = this.safeCurrencyCode(quoteId);
    const settle = this.safeCurrencyCode(settleId);
    let inverse = false;
    if (settleId !== quoteId) {
      inverse = true;
    }
    const priceScale = this.safeInteger(market, 'priceScale');
    const ratioScale = this.safeInteger(market, 'ratioScale');
    const valueScale = this.safeInteger(market, 'valueScale');
    const minPriceEp = this.safeString(market, 'minPriceEp');
    const maxPriceEp = this.safeString(market, 'maxPriceEp');
    const makerFeeRateEr = this.safeString(market, 'makerFeeRateEr');
    const takerFeeRateEr = this.safeString(market, 'takerFeeRateEr');
    const status = this.safeString(market, 'status');
    const contractSizeString = this.safeString(market, 'contractSize', ' ');
    let contractSize = undefined;
    if (contractSizeString.indexOf(' ')) {
      // "1 USD"
      // "0.005 ETH"
      const parts = contractSizeString.split(' ');
      contractSize = this.parseNumber(parts[0]);
    } else {
      // "1.0"
      contractSize = this.parseNumber(contractSizeString);
    }
    const riskLimits = this.safeValue(market, 'riskLimits', []);
    let maxLeverage = this.safeNumber(market, 'maxLeverage');
    const maxAmount = undefined;
    if (riskLimits.length > 0) {
      // assume lowest risk limit for now
      const baseRiskLimit = riskLimits[0];
      // {'limit': '1000000', 'initialMarginRr': '0.01', 'maintenanceMarginRr': '0.005'}
      // {'limit': '100', 'initialMargin': '1.0%', 'initialMarginEr': '1000000', 'maintenanceMargin': '0.5%', 'maintenanceMarginEr': '500000'}
      if (!maxLeverage) {
        if (settle === 'USDT') {
          const initialMarginRr = this.safeString(baseRiskLimit, 'initialMarginRr', '0.01');
          const maxLeverageString = _Precise.Precise.stringDiv('1', initialMarginRr);
          maxLeverage = this.parseSafeNumber(maxLeverageString);
        } else {
          const initialMarginEr = this.safeString(baseRiskLimit, 'initialMarginEr');
          const initialMargin = this.fromEn(initialMarginEr, ratioScale);
          const maxLeverageString = _Precise.Precise.stringDiv('1', initialMargin);
          maxLeverage = this.parseNumber(maxLeverageString);
        }
      }
      // this is in the quote currency -- would need to somehow convert to base to make this useful
      // maxAmount = this.safeNumber (baseRiskLimit, 'limit');
    }

    return {
      'id': id,
      'symbol': base + '/' + quote + ':' + settle,
      'base': base,
      'quote': quote,
      'settle': settle,
      'baseId': baseId,
      'quoteId': quoteId,
      'settleId': settleId,
      'type': 'swap',
      'spot': false,
      'margin': false,
      'swap': true,
      'future': false,
      'option': false,
      'active': status === 'Listed',
      'contract': true,
      'linear': !inverse,
      'inverse': inverse,
      'taker': this.parseNumber(this.fromEn(takerFeeRateEr, ratioScale)),
      'maker': this.parseNumber(this.fromEn(makerFeeRateEr, ratioScale)),
      'contractSize': contractSize,
      'expiry': undefined,
      'expiryDatetime': undefined,
      'strike': undefined,
      'optionType': undefined,
      'priceScale': priceScale,
      'valueScale': valueScale,
      'ratioScale': ratioScale,
      'precision': {
        'amount': this.safeNumber2(market, 'lotSize', 'qtyStepSize'),
        'price': this.safeNumber(market, 'tickSize')
      },
      'limits': {
        'leverage': {
          'min': this.parseNumber('1'),
          'max': maxLeverage
        },
        'amount': {
          'min': undefined,
          'max': maxAmount
        },
        'price': {
          'min': this.parseNumber(this.fromEn(minPriceEp, priceScale)),
          'max': this.parseNumber(this.fromEn(maxPriceEp, priceScale))
        },
        'cost': {
          'min': undefined,
          'max': this.parseNumber(this.safeString(market, 'maxOrderQty'))
        }
      },
      'info': market
    };
  }
  parseSpotMarket(market) {
    //
    //     {
    //         "symbol":"sBTCUSDT",
    //         "displaySymbol":"BTC / USDT",
    //         "quoteCurrency":"USDT",
    //         "pricePrecision":2,
    //         "type":"Spot",
    //         "baseCurrency":"BTC",
    //         "baseTickSize":"0.000001 BTC",
    //         "baseTickSizeEv":100,
    //         "quoteTickSize":"0.01 USDT",
    //         "quoteTickSizeEv":1000000,
    //         "minOrderValue":"10 USDT",
    //         "minOrderValueEv":1000000000,
    //         "maxBaseOrderSize":"1000 BTC",
    //         "maxBaseOrderSizeEv":100000000000,
    //         "maxOrderValue":"5,000,000 USDT",
    //         "maxOrderValueEv":500000000000000,
    //         "defaultTakerFee":"0.001",
    //         "defaultTakerFeeEr":100000,
    //         "defaultMakerFee":"0.001",
    //         "defaultMakerFeeEr":100000,
    //         "baseQtyPrecision":6,
    //         "quoteQtyPrecision":2,
    //         "status":"Listed",
    //         "tipOrderQty":20
    //     }
    //
    const type = this.safeStringLower(market, 'type');
    const id = this.safeString(market, 'symbol');
    const quoteId = this.safeString(market, 'quoteCurrency');
    const baseId = this.safeString(market, 'baseCurrency');
    const base = this.safeCurrencyCode(baseId);
    const quote = this.safeCurrencyCode(quoteId);
    const status = this.safeString(market, 'status');
    const precisionAmount = this.parseSafeNumber(this.safeString(market, 'baseTickSize'));
    const precisionPrice = this.parseSafeNumber(this.safeString(market, 'quoteTickSize'));
    return {
      'id': id,
      'symbol': base + '/' + quote,
      'base': base,
      'quote': quote,
      'settle': undefined,
      'baseId': baseId,
      'quoteId': quoteId,
      'settleId': undefined,
      'type': type,
      'spot': true,
      'margin': false,
      'swap': false,
      'future': false,
      'option': false,
      'active': status === 'Listed',
      'contract': false,
      'linear': undefined,
      'inverse': undefined,
      'taker': this.safeNumber(market, 'defaultTakerFee'),
      'maker': this.safeNumber(market, 'defaultMakerFee'),
      'contractSize': undefined,
      'expiry': undefined,
      'expiryDatetime': undefined,
      'strike': undefined,
      'optionType': undefined,
      'priceScale': 8,
      'valueScale': 8,
      'ratioScale': 8,
      'precision': {
        'amount': precisionAmount,
        'price': precisionPrice
      },
      'limits': {
        'leverage': {
          'min': undefined,
          'max': undefined
        },
        'amount': {
          'min': precisionAmount,
          'max': this.parseSafeNumber(this.safeString(market, 'maxBaseOrderSize'))
        },
        'price': {
          'min': precisionPrice,
          'max': undefined
        },
        'cost': {
          'min': this.parseSafeNumber(this.safeString(market, 'minOrderValue')),
          'max': this.parseSafeNumber(this.safeString(market, 'maxOrderValue'))
        }
      },
      'info': market
    };
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name phemex#fetchMarkets
     * @description retrieves data on all markets for phemex
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    const v2Products = await this.publicGetCfgV2Products(params);
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":{
    //             "ratioScale":8,
    //             "currencies":[
    //                 {"currency":"BTC","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"Bitcoin"},
    //                 {"currency":"USD","valueScale":4,"minValueEv":1,"maxValueEv":500000000000000,"name":"USD"},
    //                 {"currency":"USDT","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"TetherUS"},
    //             ],
    //             "products":[
    //                 {
    //                     "symbol":"BTCUSD",
    //                     "displaySymbol":"BTC / USD",
    //                     "indexSymbol":".BTC",
    //                     "markSymbol":".MBTC",
    //                     "fundingRateSymbol":".BTCFR",
    //                     "fundingRate8hSymbol":".BTCFR8H",
    //                     "contractUnderlyingAssets":"USD",
    //                     "settleCurrency":"BTC",
    //                     "quoteCurrency":"USD",
    //                     "contractSize":1.0,
    //                     "lotSize":1,
    //                     "tickSize":0.5,
    //                     "priceScale":4,
    //                     "ratioScale":8,
    //                     "pricePrecision":1,
    //                     "minPriceEp":5000,
    //                     "maxPriceEp":10000000000,
    //                     "maxOrderQty":1000000,
    //                     "type":"Perpetual"
    //                 },
    //                 {
    //                     "symbol":"sBTCUSDT",
    //                     "displaySymbol":"BTC / USDT",
    //                     "quoteCurrency":"USDT",
    //                     "pricePrecision":2,
    //                     "type":"Spot",
    //                     "baseCurrency":"BTC",
    //                     "baseTickSize":"0.000001 BTC",
    //                     "baseTickSizeEv":100,
    //                     "quoteTickSize":"0.01 USDT",
    //                     "quoteTickSizeEv":1000000,
    //                     "minOrderValue":"10 USDT",
    //                     "minOrderValueEv":1000000000,
    //                     "maxBaseOrderSize":"1000 BTC",
    //                     "maxBaseOrderSizeEv":100000000000,
    //                     "maxOrderValue":"5,000,000 USDT",
    //                     "maxOrderValueEv":500000000000000,
    //                     "defaultTakerFee":"0.001",
    //                     "defaultTakerFeeEr":100000,
    //                     "defaultMakerFee":"0.001",
    //                     "defaultMakerFeeEr":100000,
    //                     "baseQtyPrecision":6,
    //                     "quoteQtyPrecision":2
    //                 },
    //             ],
    //             "riskLimits":[
    //                 {
    //                     "symbol":"BTCUSD",
    //                     "steps":"50",
    //                     "riskLimits":[
    //                         {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
    //                         {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
    //                         {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
    //                     ]
    //                 },
    //             ],
    //             "leverages":[
    //                 {"initialMargin":"1.0%","initialMarginEr":1000000,"options":[1,2,3,5,10,25,50,100]},
    //                 {"initialMargin":"1.5%","initialMarginEr":1500000,"options":[1,2,3,5,10,25,50,66]},
    //                 {"initialMargin":"2.0%","initialMarginEr":2000000,"options":[1,2,3,5,10,25,33,50]},
    //             ]
    //         }
    //     }
    //
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":[
    //             {
    //                 "symbol":"BTCUSD",
    //                 "underlyingSymbol":".BTC",
    //                 "quoteCurrency":"USD",
    //                 "baseCurrency":"BTC",
    //                 "settlementCurrency":"BTC",
    //                 "maxOrderQty":1000000,
    //                 "maxPriceEp":100000000000000,
    //                 "lotSize":1,
    //                 "tickSize":"0.5",
    //                 "contractSize":"1 USD",
    //                 "priceScale":4,
    //                 "ratioScale":8,
    //                 "valueScale":8,
    //                 "defaultLeverage":0,
    //                 "maxLeverage":100,
    //                 "initMarginEr":"1000000",
    //                 "maintMarginEr":"500000",
    //                 "defaultRiskLimitEv":10000000000,
    //                 "deleverage":true,
    //                 "makerFeeRateEr":-250000,
    //                 "takerFeeRateEr":750000,
    //                 "fundingInterval":8,
    //                 "marketUrl":"https://phemex.com/trade/BTCUSD",
    //                 "description":"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.",
    //                 "type":"Perpetual"
    //             },
    //         ]
    //     }
    //
    const v2ProductsData = this.safeValue(v2Products, 'data', {});
    const products = this.safeValue(v2ProductsData, 'products', []);
    const v1RiskLimits = this.safeValue(v2ProductsData, 'riskLimits', []);
    const v1RiskLimitsById = this.indexBy(v1RiskLimits, 'symbol');
    const v2RiskLimits = this.safeValue(v2ProductsData, 'riskLimitsV2', []);
    const v2RiskLimitsById = this.indexBy(v2RiskLimits, 'symbol');
    const productsById = this.indexBy(products, 'symbol');
    const result = [];
    for (let i = 0; i < products.length; i++) {
      let market = products[i];
      const type = this.safeStringLower(market, 'type');
      if (type === 'perpetual') {
        const id = this.safeString(market, 'symbol');
        const riskLimitValues = this.safeValue(v1RiskLimitsById, id, {});
        market = this.extend(market, riskLimitValues);
        const productValues = this.safeValue(productsById, id, {});
        market = this.extend(market, productValues);
        market = this.parseSwapMarket(market);
      } else if (type === 'perpetualv2') {
        const id = this.safeString(market, 'symbol');
        const riskLimitValues = this.safeValue(v2RiskLimitsById, id, {});
        market = this.extend(market, riskLimitValues);
        const productValues = this.safeValue(productsById, id, {});
        market = this.extend(market, productValues);
        market = this.parseSwapMarket(market);
      } else {
        market = this.parseSpotMarket(market);
      }
      result.push(market);
    }
    return result;
  }
  async fetchCurrencies(params = {}) {
    /**
     * @method
     * @name phemex#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} an associative dictionary of currencies
     */
    const response = await this.publicGetCfgV2Products(params);
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":{
    //             ...,
    //             "currencies":[
    //                 {"currency":"BTC","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"Bitcoin"},
    //                 {"currency":"USD","valueScale":4,"minValueEv":1,"maxValueEv":500000000000000,"name":"USD"},
    //                 {"currency":"USDT","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"TetherUS"},
    //             ],
    //             ...
    //         }
    //     }
    const data = this.safeValue(response, 'data', {});
    const currencies = this.safeValue(data, 'currencies', []);
    const result = {};
    for (let i = 0; i < currencies.length; i++) {
      const currency = currencies[i];
      const id = this.safeString(currency, 'currency');
      const name = this.safeString(currency, 'name');
      const code = this.safeCurrencyCode(id);
      const valueScaleString = this.safeString(currency, 'valueScale');
      const valueScale = parseInt(valueScaleString);
      const minValueEv = this.safeString(currency, 'minValueEv');
      const maxValueEv = this.safeString(currency, 'maxValueEv');
      let minAmount = undefined;
      let maxAmount = undefined;
      let precision = undefined;
      if (valueScale !== undefined) {
        const precisionString = this.parsePrecision(valueScaleString);
        precision = this.parseNumber(precisionString);
        minAmount = this.parseNumber(_Precise.Precise.stringMul(minValueEv, precisionString));
        maxAmount = this.parseNumber(_Precise.Precise.stringMul(maxValueEv, precisionString));
      }
      result[code] = {
        'id': id,
        'info': currency,
        'code': code,
        'name': name,
        'active': undefined,
        'deposit': undefined,
        'withdraw': undefined,
        'fee': undefined,
        'precision': precision,
        'limits': {
          'amount': {
            'min': minAmount,
            'max': maxAmount
          },
          'withdraw': {
            'min': undefined,
            'max': undefined
          }
        },
        'valueScale': valueScale
      };
    }
    return result;
  }
  parseBidAsk(bidask, priceKey = 0, amountKey = 1, market = undefined) {
    if (market === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' parseBidAsk() requires a market argument');
    }
    let amount = this.safeString(bidask, amountKey);
    if (market['spot']) {
      amount = this.fromEv(amount, market);
    }
    return [this.parseNumber(this.fromEp(this.safeString(bidask, priceKey), market)), this.parseNumber(amount)];
  }
  customParseOrderBook(orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1, market = undefined) {
    const result = {
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'nonce': undefined
    };
    const sides = [bidsKey, asksKey];
    for (let i = 0; i < sides.length; i++) {
      const side = sides[i];
      const orders = [];
      const bidasks = this.safeValue(orderbook, side);
      for (let k = 0; k < bidasks.length; k++) {
        orders.push(this.parseBidAsk(bidasks[k], priceKey, amountKey, market));
      }
      result[side] = orders;
    }
    result[bidsKey] = this.sortBy(result[bidsKey], 0, true);
    result[asksKey] = this.sortBy(result[asksKey], 0);
    return result;
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryorderbook
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'id': 123456789, // optional request id
    };

    let method = 'v1GetMdOrderbook';
    if (market['linear'] && market['settle'] === 'USDT') {
      method = 'v2GetMdV2Orderbook';
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "error": null,
    //         "id": 0,
    //         "result": {
    //             "book": {
    //                 "asks": [
    //                     [ 23415000000, 105262000 ],
    //                     [ 23416000000, 147914000 ],
    //                     [ 23419000000, 160914000 ],
    //                 ],
    //                 "bids": [
    //                     [ 23360000000, 32995000 ],
    //                     [ 23359000000, 221887000 ],
    //                     [ 23356000000, 284599000 ],
    //                 ],
    //             },
    //             "depth": 30,
    //             "sequence": 1592059928,
    //             "symbol": "sETHUSDT",
    //             "timestamp": 1592387340020000955,
    //             "type": "snapshot"
    //         }
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const book = this.safeValue2(result, 'book', 'orderbook_p', {});
    const timestamp = this.safeIntegerProduct(result, 'timestamp', 0.000001);
    const orderbook = this.customParseOrderBook(book, symbol, timestamp, 'bids', 'asks', 0, 1, market);
    orderbook['nonce'] = this.safeInteger(result, 'sequence');
    return orderbook;
  }
  toEn(n, scale) {
    const stringN = n.toString();
    const precise = new _Precise.Precise(stringN);
    precise.decimals = precise.decimals - scale;
    precise.reduce();
    const stringValue = precise.toString();
    const floatValue = parseFloat(stringValue);
    const floatString = floatValue.toString();
    return parseInt(floatString);
  }
  toEv(amount, market = undefined) {
    if (amount === undefined || market === undefined) {
      return amount;
    }
    return this.toEn(amount, market['valueScale']);
  }
  toEp(price, market = undefined) {
    if (price === undefined || market === undefined) {
      return price;
    }
    return this.toEn(price, market['priceScale']);
  }
  fromEn(en, scale) {
    if (en === undefined) {
      return undefined;
    }
    const precise = new _Precise.Precise(en);
    precise.decimals = this.sum(precise.decimals, scale);
    precise.reduce();
    return precise.toString();
  }
  fromEp(ep, market = undefined) {
    if (ep === undefined || market === undefined) {
      return ep;
    }
    return this.fromEn(ep, this.safeInteger(market, 'priceScale'));
  }
  fromEv(ev, market = undefined) {
    if (ev === undefined || market === undefined) {
      return ev;
    }
    return this.fromEn(ev, this.safeInteger(market, 'valueScale'));
  }
  fromEr(er, market = undefined) {
    if (er === undefined || market === undefined) {
      return er;
    }
    return this.fromEn(er, this.safeInteger(market, 'ratioScale'));
  }
  parseOHLCV(ohlcv, market = undefined) {
    //
    //     [
    //         1592467200, // timestamp
    //         300, // interval
    //         23376000000, // last
    //         23322000000, // open
    //         23381000000, // high
    //         23315000000, // low
    //         23367000000, // close
    //         208671000, // base volume
    //         48759063370, // quote volume
    //     ]
    //
    let baseVolume = undefined;
    if (market !== undefined && market['spot']) {
      baseVolume = this.parseNumber(this.fromEv(this.safeString(ohlcv, 7), market));
    } else {
      baseVolume = this.safeNumber(ohlcv, 7);
    }
    const lastClose = this.parseNumber(this.fromEp(this.safeString(ohlcv, 2), market));
    const currentOpen = this.parseNumber(this.fromEp(this.safeString(ohlcv, 3), market));
    const open = lastClose > 0 ? lastClose : currentOpen;
    return [this.safeTimestamp(ohlcv, 0), open, this.parseNumber(this.fromEp(this.safeString(ohlcv, 4), market)), this.parseNumber(this.fromEp(this.safeString(ohlcv, 5), market)), this.parseNumber(this.fromEp(this.safeString(ohlcv, 6), market)), baseVolume];
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#querykline
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#query-kline
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'resolution': this.safeString(this.timeframes, timeframe, timeframe)
      // 'from': 1588830682, // seconds
      // 'to': this.seconds (),
    };

    const duration = this.parseTimeframe(timeframe);
    const now = this.seconds();
    const possibleLimitValues = [5, 10, 50, 100, 500, 1000];
    const maxLimit = 1000; // maximum limit, we shouldn't sent request of more than it
    if (limit === undefined) {
      limit = 100; // set default, as exchange doesn't have any defaults and needs something to be set
    }

    limit = Math.min(limit, maxLimit);
    let method = 'publicGetMdKline';
    if (since !== undefined) {
      // phemex also provides kline query with from/to, however, this interface is NOT recommended.
      since = this.parseToInt(since / 1000);
      request['from'] = since;
      // time ranges ending in the future are not accepted
      // https://github.com/ccxt/ccxt/issues/8050
      request['to'] = Math.min(now, this.sum(since, duration * limit));
      method = 'publicGetMdV2KlineList';
    } else {
      if (!this.inArray(limit, possibleLimitValues)) {
        limit = 100;
      }
      request['limit'] = limit;
      if (market['linear'] || market['settle'] === 'USDT') {
        method = 'publicGetMdV2KlineLast';
      }
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":{
    //             "total":-1,
    //             "rows":[
    //                 [1592467200,300,23376000000,23322000000,23381000000,23315000000,23367000000,208671000,48759063370],
    //                 [1592467500,300,23367000000,23314000000,23390000000,23311000000,23331000000,234820000,54848948710],
    //                 [1592467800,300,23331000000,23385000000,23391000000,23326000000,23387000000,152931000,35747882250],
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    const rows = this.safeValue(data, 'rows', []);
    return this.parseOHLCVs(rows, market, timeframe, since, limit);
  }
  parseTicker(ticker, market = undefined) {
    //
    // spot
    //
    //     {
    //         "askEp": 943836000000,
    //         "bidEp": 943601000000,
    //         "highEp": 955946000000,
    //         "lastEp": 943803000000,
    //         "lowEp": 924973000000,
    //         "openEp": 948693000000,
    //         "symbol": "sBTCUSDT",
    //         "timestamp": 1592471203505728630,
    //         "turnoverEv": 111822826123103,
    //         "volumeEv": 11880532281
    //     }
    //
    // swap
    //
    //     {
    //         "askEp": 2332500,
    //         "bidEp": 2331000,
    //         "fundingRateEr": 10000,
    //         "highEp": 2380000,
    //         "indexEp": 2329057,
    //         "lastEp": 2331500,
    //         "lowEp": 2274000,
    //         "markEp": 2329232,
    //         "openEp": 2337500,
    //         "openInterest": 1298050,
    //         "predFundingRateEr": 19921,
    //         "symbol": "ETHUSD",
    //         "timestamp": 1592474241582701416,
    //         "turnoverEv": 47228362330,
    //         "volume": 4053863
    //     }
    // linear swap v2
    //
    //     {
    //         "closeRp":"16820.5",
    //         "fundingRateRr":"0.0001",
    //         "highRp":"16962.1",
    //         "indexPriceRp":"16830.15651565",
    //         "lowRp":"16785",
    //         "markPriceRp":"16830.97534951",
    //         "openInterestRv":"1323.596",
    //         "openRp":"16851.7",
    //         "predFundingRateRr":"0.0001",
    //         "symbol":"BTCUSDT",
    //         "timestamp":"1672142789065593096",
    //         "turnoverRv":"124835296.0538",
    //         "volumeRq":"7406.95"
    //     }
    //
    const marketId = this.safeString(ticker, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const timestamp = this.safeIntegerProduct(ticker, 'timestamp', 0.000001);
    const last = this.fromEp(this.safeString2(ticker, 'lastEp', 'closeRp'), market);
    const quoteVolume = this.fromEv(this.safeString2(ticker, 'turnoverEv', 'turnoverRv'), market);
    let baseVolume = this.safeString(ticker, 'volume');
    if (baseVolume === undefined) {
      baseVolume = this.fromEv(this.safeString2(ticker, 'volumeEv', 'volumeRq'), market);
    }
    const open = this.fromEp(this.safeString(ticker, 'openEp'), market);
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.fromEp(this.safeString2(ticker, 'highEp', 'highRp'), market),
      'low': this.fromEp(this.safeString2(ticker, 'lowEp', 'lowRp'), market),
      'bid': this.fromEp(this.safeString(ticker, 'bidEp'), market),
      'bidVolume': undefined,
      'ask': this.fromEp(this.safeString(ticker, 'askEp'), market),
      'askVolume': undefined,
      'vwap': undefined,
      'open': open,
      'close': last,
      'last': last,
      'previousClose': undefined,
      'change': undefined,
      'percentage': undefined,
      'average': undefined,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    }, market);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name phemex#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query24hrsticker
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'id': 123456789, // optional request id
    };

    let method = 'v1GetMdSpotTicker24hr';
    if (market['swap']) {
      if (market['inverse'] || market['settle'] === 'USD') {
        method = 'v1GetMdTicker24hr';
      } else {
        method = 'v2GetMdV2Ticker24hr';
      }
    }
    const response = await this[method](this.extend(request, params));
    //
    // spot
    //
    //     {
    //         "error": null,
    //         "id": 0,
    //         "result": {
    //             "askEp": 943836000000,
    //             "bidEp": 943601000000,
    //             "highEp": 955946000000,
    //             "lastEp": 943803000000,
    //             "lowEp": 924973000000,
    //             "openEp": 948693000000,
    //             "symbol": "sBTCUSDT",
    //             "timestamp": 1592471203505728630,
    //             "turnoverEv": 111822826123103,
    //             "volumeEv": 11880532281
    //         }
    //     }
    //
    // swap
    //
    //     {
    //         "error": null,
    //         "id": 0,
    //         "result": {
    //             "askEp": 2332500,
    //             "bidEp": 2331000,
    //             "fundingRateEr": 10000,
    //             "highEp": 2380000,
    //             "indexEp": 2329057,
    //             "lastEp": 2331500,
    //             "lowEp": 2274000,
    //             "markEp": 2329232,
    //             "openEp": 2337500,
    //             "openInterest": 1298050,
    //             "predFundingRateEr": 19921,
    //             "symbol": "ETHUSD",
    //             "timestamp": 1592474241582701416,
    //             "turnoverEv": 47228362330,
    //             "volume": 4053863
    //         }
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return this.parseTicker(result, market);
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#querytrades
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'id': 123456789, // optional request id
    };

    let method = 'v1GetMdTrade';
    if (market['linear'] && market['settle'] === 'USDT') {
      method = 'v2GetMdV2Trade';
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "error": null,
    //         "id": 0,
    //         "result": {
    //             "sequence": 1315644947,
    //             "symbol": "BTCUSD",
    //             "trades": [
    //                 [ 1592541746712239749, 13156448570000, "Buy", 93070000, 40173 ],
    //                 [ 1592541740434625085, 13156447110000, "Sell", 93065000, 5000 ],
    //                 [ 1592541732958241616, 13156441390000, "Buy", 93070000, 3460 ],
    //             ],
    //             "type": "snapshot"
    //         }
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    const trades = this.safeValue2(result, 'trades', 'trades_p', []);
    return this.parseTrades(trades, market, since, limit);
  }
  parseTrade(trade, market = undefined) {
    //
    // fetchTrades (public) spot & contract
    //
    //     [
    //         1592541746712239749,
    //         13156448570000,
    //         "Buy",
    //         93070000,
    //         40173
    //     ]
    //
    // fetchTrades (public) perp
    //
    //     [
    //         1675690986063435800,
    //         "Sell",
    //         "22857.4",
    //         "0.269"
    //     ]
    //
    // fetchMyTrades (private)
    //
    // spot
    //
    //     {
    //         "qtyType": "ByQuote",
    //         "transactTimeNs": 1589450974800550100,
    //         "clOrdID": "8ba59d40-df25-d4b0-14cf-0703f44e9690",
    //         "orderID": "b2b7018d-f02f-4c59-b4cf-051b9c2d2e83",
    //         "symbol": "sBTCUSDT",
    //         "side": "Buy",
    //         "priceEP": 970056000000,
    //         "baseQtyEv": 0,
    //         "quoteQtyEv": 1000000000,
    //         "action": "New",
    //         "execStatus": "MakerFill",
    //         "ordStatus": "Filled",
    //         "ordType": "Limit",
    //         "execInst": "None",
    //         "timeInForce": "GoodTillCancel",
    //         "stopDirection": "UNSPECIFIED",
    //         "tradeType": "Trade",
    //         "stopPxEp": 0,
    //         "execId": "c6bd8979-07ba-5946-b07e-f8b65135dbb1",
    //         "execPriceEp": 970056000000,
    //         "execBaseQtyEv": 103000,
    //         "execQuoteQtyEv": 999157680,
    //         "leavesBaseQtyEv": 0,
    //         "leavesQuoteQtyEv": 0,
    //         "execFeeEv": 0,
    //         "feeRateEr": 0
    //     }
    //
    // swap
    //
    //     {
    //         "transactTimeNs": 1578026629824704800,
    //         "symbol": "BTCUSD",
    //         "currency": "BTC",
    //         "action": "Replace",
    //         "side": "Sell",
    //         "tradeType": "Trade",
    //         "execQty": 700,
    //         "execPriceEp": 71500000,
    //         "orderQty": 700,
    //         "priceEp": 71500000,
    //         "execValueEv": 9790209,
    //         "feeRateEr": -25000,
    //         "execFeeEv": -2447,
    //         "ordType": "Limit",
    //         "execID": "b01671a1-5ddc-5def-b80a-5311522fd4bf",
    //         "orderID": "b63bc982-be3a-45e0-8974-43d6375fb626",
    //         "clOrdID": "uuid-1577463487504",
    //         "execStatus": "MakerFill"
    //     }
    //
    // swap - USDT
    //
    //     {
    //         "createdAt": 1666226932259,
    //         "symbol": "ETHUSDT",
    //         "currency": "USDT",
    //         "action": 1,
    //         "tradeType": 1,
    //         "execQtyRq": "0.01",
    //         "execPriceRp": "1271.9",
    //         "side": 1,
    //         "orderQtyRq": "0.78",
    //         "priceRp": "1271.9",
    //         "execValueRv": "12.719",
    //         "feeRateRr": "0.0001",
    //         "execFeeRv": "0.0012719",
    //         "ordType": 2,
    //         "execId": "8718cae",
    //         "execStatus": 6
    //     }
    //
    let priceString = undefined;
    let amountString = undefined;
    let timestamp = undefined;
    let id = undefined;
    let side = undefined;
    let costString = undefined;
    let type = undefined;
    let fee = undefined;
    let feeCostString = undefined;
    let feeRateString = undefined;
    let feeCurrencyCode = undefined;
    const marketId = this.safeString(trade, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    let orderId = undefined;
    let takerOrMaker = undefined;
    if (Array.isArray(trade)) {
      const tradeLength = trade.length;
      timestamp = this.safeIntegerProduct(trade, 0, 0.000001);
      if (tradeLength > 4) {
        id = this.safeString(trade, tradeLength - 4);
      }
      side = this.safeStringLower(trade, tradeLength - 3);
      priceString = this.safeString(trade, tradeLength - 2);
      amountString = this.safeString(trade, tradeLength - 1);
      if (typeof trade[tradeLength - 2] === 'number') {
        priceString = this.fromEp(priceString, market);
        amountString = this.fromEv(amountString, market);
      }
    } else {
      timestamp = this.safeIntegerProduct(trade, 'transactTimeNs', 0.000001);
      if (timestamp === undefined) {
        timestamp = this.safeInteger(trade, 'createdAt');
      }
      id = this.safeString2(trade, 'execId', 'execID');
      orderId = this.safeString(trade, 'orderID');
      if (market['settle'] === 'USDT') {
        const sideId = this.safeString(trade, 'side');
        side = sideId === '1' ? 'buy' : 'sell';
        const ordType = this.safeString(trade, 'ordType');
        if (ordType === '1') {
          type = 'market';
        } else if (ordType === '2') {
          type = 'limit';
        }
        priceString = this.safeString2(trade, 'execPriceRp', 'priceRp');
        amountString = this.safeString(trade, 'execQtyRq');
        costString = this.safeString(trade, 'execValueRv');
        feeCostString = this.safeString(trade, 'execFeeRv');
        feeRateString = this.safeString(trade, 'feeRateRr');
        const currencyId = this.safeString(trade, 'currency');
        feeCurrencyCode = this.safeCurrencyCode(currencyId);
      } else {
        side = this.safeStringLower(trade, 'side');
        type = this.parseOrderType(this.safeString(trade, 'ordType'));
        const execStatus = this.safeString(trade, 'execStatus');
        if (execStatus === 'MakerFill') {
          takerOrMaker = 'maker';
        }
        priceString = this.fromEp(this.safeString(trade, 'execPriceEp'), market);
        amountString = this.fromEv(this.safeString(trade, 'execBaseQtyEv'), market);
        amountString = this.safeString(trade, 'execQty', amountString);
        costString = this.fromEv(this.safeString2(trade, 'execQuoteQtyEv', 'execValueEv'), market);
        feeCostString = this.fromEv(this.safeString(trade, 'execFeeEv'), market);
        if (feeCostString !== undefined) {
          feeRateString = this.fromEr(this.safeString(trade, 'feeRateEr'), market);
          if (market['spot']) {
            feeCurrencyCode = side === 'buy' ? market['base'] : market['quote'];
          } else {
            const info = this.safeValue(market, 'info');
            if (info !== undefined) {
              const settlementCurrencyId = this.safeString(info, 'settlementCurrency');
              feeCurrencyCode = this.safeCurrencyCode(settlementCurrencyId);
            }
          }
        }
      }
      fee = {
        'cost': feeCostString,
        'rate': feeRateString,
        'currency': feeCurrencyCode
      };
    }
    return this.safeTrade({
      'info': trade,
      'id': id,
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'order': orderId,
      'type': type,
      'side': side,
      'takerOrMaker': takerOrMaker,
      'price': priceString,
      'amount': amountString,
      'cost': costString,
      'fee': fee
    }, market);
  }
  parseSpotBalance(response) {
    //
    //     {
    //         "code":0,
    //         "msg":"",
    //         "data":[
    //             {
    //                 "currency":"USDT",
    //                 "balanceEv":0,
    //                 "lockedTradingBalanceEv":0,
    //                 "lockedWithdrawEv":0,
    //                 "lastUpdateTimeNs":1592065834511322514,
    //                 "walletVid":0
    //             },
    //             {
    //                 "currency":"ETH",
    //                 "balanceEv":0,
    //                 "lockedTradingBalanceEv":0,
    //                 "lockedWithdrawEv":0,
    //                 "lastUpdateTimeNs":1592065834511322514,
    //                 "walletVid":0
    //             }
    //         ]
    //     }
    //
    let timestamp = undefined;
    const result = {
      'info': response
    };
    const data = this.safeValue(response, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const balance = data[i];
      const currencyId = this.safeString(balance, 'currency');
      const code = this.safeCurrencyCode(currencyId);
      const currency = this.safeValue(this.currencies, code, {});
      const scale = this.safeInteger(currency, 'valueScale', 8);
      const account = this.account();
      const balanceEv = this.safeString(balance, 'balanceEv');
      const lockedTradingBalanceEv = this.safeString(balance, 'lockedTradingBalanceEv');
      const lockedWithdrawEv = this.safeString(balance, 'lockedWithdrawEv');
      const total = this.fromEn(balanceEv, scale);
      const lockedTradingBalance = this.fromEn(lockedTradingBalanceEv, scale);
      const lockedWithdraw = this.fromEn(lockedWithdrawEv, scale);
      const used = _Precise.Precise.stringAdd(lockedTradingBalance, lockedWithdraw);
      const lastUpdateTimeNs = this.safeIntegerProduct(balance, 'lastUpdateTimeNs', 0.000001);
      timestamp = timestamp === undefined ? lastUpdateTimeNs : Math.max(timestamp, lastUpdateTimeNs);
      account['total'] = total;
      account['used'] = used;
      result[code] = account;
    }
    result['timestamp'] = timestamp;
    result['datetime'] = this.iso8601(timestamp);
    return this.safeBalance(result);
  }
  parseSwapBalance(response) {
    // usdt
    //   {
    //       info: {
    //         code: '0',
    //         msg: '',
    //         data: {
    //           account: {
    //             userID: '940666',
    //             accountId: '9406660003',
    //             currency: 'USDT',
    //             accountBalanceRv: '99.93143972',
    //             totalUsedBalanceRv: '0.40456',
    //             bonusBalanceRv: '0'
    //           },
    //   }
    //
    //     {
    //         "code":0,
    //         "msg":"",
    //         "data":{
    //             "account":{
    //                 "accountId":6192120001,
    //                 "currency":"BTC",
    //                 "accountBalanceEv":1254744,
    //                 "totalUsedBalanceEv":0,
    //                 "bonusBalanceEv":1254744
    //             }
    //         }
    //     }
    //
    const result = {
      'info': response
    };
    const data = this.safeValue(response, 'data', {});
    const balance = this.safeValue(data, 'account', {});
    const currencyId = this.safeString(balance, 'currency');
    const code = this.safeCurrencyCode(currencyId);
    const currency = this.currency(code);
    const valueScale = this.safeInteger(currency, 'valueScale', 8);
    const account = this.account();
    const accountBalanceEv = this.safeString2(balance, 'accountBalanceEv', 'accountBalanceRv');
    const totalUsedBalanceEv = this.safeString2(balance, 'totalUsedBalanceEv', 'totalUsedBalanceRv');
    const needsConversion = code !== 'USDT';
    account['total'] = needsConversion ? this.fromEn(accountBalanceEv, valueScale) : accountBalanceEv;
    account['used'] = needsConversion ? this.fromEn(totalUsedBalanceEv, valueScale) : totalUsedBalanceEv;
    result[code] = account;
    return this.safeBalance(result);
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name phemex#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-account-positions
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('fetchBalance', undefined, params);
    let method = 'privateGetSpotWallets';
    const request = {};
    if (type === 'swap') {
      const code = this.safeString(params, 'code');
      let settle = undefined;
      [settle, params] = this.handleOptionAndParams(params, 'fetchBalance', 'settle');
      if (code !== undefined || settle !== undefined) {
        let coin = undefined;
        if (code !== undefined) {
          coin = code;
        } else {
          coin = settle;
        }
        const currency = this.currency(coin);
        request['currency'] = currency['id'];
        if (currency['id'] === 'USDT') {
          method = 'privateGetGAccountsAccountPositions';
        } else {
          method = 'privateGetAccountsAccountPositions';
        }
      } else {
        const currency = this.safeString(params, 'currency');
        if (currency === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' fetchBalance() requires a code parameter or a currency or settle parameter for ' + type + ' type');
        }
      }
    }
    params = this.omit(params, ['type', 'code']);
    const response = await this[method](this.extend(request, params));
    //
    // usdt
    //   {
    //       info: {
    //         code: '0',
    //         msg: '',
    //         data: {
    //           account: {
    //             userID: '940666',
    //             accountId: '9406660003',
    //             currency: 'USDT',
    //             accountBalanceRv: '99.93143972',
    //             totalUsedBalanceRv: '0.40456',
    //             bonusBalanceRv: '0'
    //           },
    //   }
    //
    // spot
    //
    //     {
    //         "code":0,
    //         "msg":"",
    //         "data":[
    //             {
    //                 "currency":"USDT",
    //                 "balanceEv":0,
    //                 "lockedTradingBalanceEv":0,
    //                 "lockedWithdrawEv":0,
    //                 "lastUpdateTimeNs":1592065834511322514,
    //                 "walletVid":0
    //             },
    //             {
    //                 "currency":"ETH",
    //                 "balanceEv":0,
    //                 "lockedTradingBalanceEv":0,
    //                 "lockedWithdrawEv":0,
    //                 "lastUpdateTimeNs":1592065834511322514,
    //                 "walletVid":0
    //             }
    //         ]
    //     }
    //
    // swap
    //
    //     {
    //         "code":0,
    //         "msg":"",
    //         "data":{
    //             "account":{
    //                 "accountId":6192120001,
    //                 "currency":"BTC",
    //                 "accountBalanceEv":1254744,
    //                 "totalUsedBalanceEv":0,
    //                 "bonusBalanceEv":1254744
    //             },
    //             "positions":[
    //                 {
    //                     "accountID":6192120001,
    //                     "symbol":"BTCUSD",
    //                     "currency":"BTC",
    //                     "side":"None",
    //                     "positionStatus":"Normal",
    //                     "crossMargin":false,
    //                     "leverageEr":0,
    //                     "leverage":0E-8,
    //                     "initMarginReqEr":1000000,
    //                     "initMarginReq":0.01000000,
    //                     "maintMarginReqEr":500000,
    //                     "maintMarginReq":0.00500000,
    //                     "riskLimitEv":10000000000,
    //                     "riskLimit":100.00000000,
    //                     "size":0,
    //                     "value":0E-8,
    //                     "valueEv":0,
    //                     "avgEntryPriceEp":0,
    //                     "avgEntryPrice":0E-8,
    //                     "posCostEv":0,
    //                     "posCost":0E-8,
    //                     "assignedPosBalanceEv":0,
    //                     "assignedPosBalance":0E-8,
    //                     "bankruptCommEv":0,
    //                     "bankruptComm":0E-8,
    //                     "bankruptPriceEp":0,
    //                     "bankruptPrice":0E-8,
    //                     "positionMarginEv":0,
    //                     "positionMargin":0E-8,
    //                     "liquidationPriceEp":0,
    //                     "liquidationPrice":0E-8,
    //                     "deleveragePercentileEr":0,
    //                     "deleveragePercentile":0E-8,
    //                     "buyValueToCostEr":1150750,
    //                     "buyValueToCost":0.01150750,
    //                     "sellValueToCostEr":1149250,
    //                     "sellValueToCost":0.01149250,
    //                     "markPriceEp":96359083,
    //                     "markPrice":9635.90830000,
    //                     "markValueEv":0,
    //                     "markValue":null,
    //                     "unRealisedPosLossEv":0,
    //                     "unRealisedPosLoss":null,
    //                     "estimatedOrdLossEv":0,
    //                     "estimatedOrdLoss":0E-8,
    //                     "usedBalanceEv":0,
    //                     "usedBalance":0E-8,
    //                     "takeProfitEp":0,
    //                     "takeProfit":null,
    //                     "stopLossEp":0,
    //                     "stopLoss":null,
    //                     "realisedPnlEv":0,
    //                     "realisedPnl":null,
    //                     "cumRealisedPnlEv":0,
    //                     "cumRealisedPnl":null
    //                 }
    //             ]
    //         }
    //     }
    //
    const result = type === 'swap' ? this.parseSwapBalance(response) : this.parseSpotBalance(response);
    return result;
  }
  parseOrderStatus(status) {
    const statuses = {
      'Created': 'open',
      'Untriggered': 'open',
      'Deactivated': 'closed',
      'Triggered': 'open',
      'Rejected': 'rejected',
      'New': 'open',
      'PartiallyFilled': 'open',
      'Filled': 'closed',
      'Canceled': 'canceled',
      '1': 'open',
      '5': 'open',
      '6': 'open',
      '7': 'closed',
      '8': 'canceled'
    };
    return this.safeString(statuses, status, status);
  }
  parseOrderType(type) {
    const types = {
      '1': 'market',
      '2': 'limit',
      '3': 'stop',
      '4': 'stopLimit',
      '5': 'market',
      '6': 'limit',
      '7': 'market',
      '8': 'market',
      '9': 'stopLimit',
      '10': 'market',
      'Limit': 'limit',
      'Market': 'market',
      'MarketIfTouched': 'stop',
      'LimitIfTouched': 'stopLimit'
    };
    return this.safeString(types, type, type);
  }
  parseTimeInForce(timeInForce) {
    const timeInForces = {
      'GoodTillCancel': 'GTC',
      'PostOnly': 'PO',
      'ImmediateOrCancel': 'IOC',
      'FillOrKill': 'FOK'
    };
    return this.safeString(timeInForces, timeInForce, timeInForce);
  }
  formatTimeInForce(timeInForce) {
    const timeInForces = {
      'GTC': 'GoodTillCancel',
      'PO': 'PostOnly',
      'IOC': 'ImmediateOrCancel',
      'FOK': 'FillOrKill'
    };
    return this.safeString(timeInForces, timeInForce.toUpperCase(), timeInForce);
  }
  parseTriggerType(triggerType) {
    const triggerTypes = {
      'ByMarkPrice': 'mark',
      'ByLastPrice': 'last'
    };
    return this.safeString(triggerTypes, triggerType, triggerType);
  }
  formatTriggerType(triggerType) {
    const triggerTypes = {
      'mark': 'ByMarkPrice',
      'last': 'ByLastPrice'
    };
    return this.safeString(triggerTypes, triggerType.toLowerCase(), triggerType);
  }
  parseSpotOrder(order, market = undefined) {
    //
    // spot
    //
    //     {
    //         "orderID": "d1d09454-cabc-4a23-89a7-59d43363f16d",
    //         "clOrdID": "309bcd5c-9f6e-4a68-b775-4494542eb5cb",
    //         "priceEp": 0,
    //         "action": "New",
    //         "trigger": "UNSPECIFIED",
    //         "pegPriceType": "UNSPECIFIED",
    //         "stopDirection": "UNSPECIFIED",
    //         "bizError": 0,
    //         "symbol": "sBTCUSDT",
    //         "side": "Buy",
    //         "baseQtyEv": 0,
    //         "ordType": "Limit",
    //         "timeInForce": "GoodTillCancel",
    //         "ordStatus": "Created",
    //         "cumFeeEv": 0,
    //         "cumBaseQtyEv": 0,
    //         "cumQuoteQtyEv": 0,
    //         "leavesBaseQtyEv": 0,
    //         "leavesQuoteQtyEv": 0,
    //         "avgPriceEp": 0,
    //         "cumBaseAmountEv": 0,
    //         "cumQuoteAmountEv": 0,
    //         "quoteQtyEv": 0,
    //         "qtyType": "ByBase",
    //         "stopPxEp": 0,
    //         "pegOffsetValueEp": 0
    //     }
    //
    //     {
    //         "orderID":"99232c3e-3d6a-455f-98cc-2061cdfe91bc",
    //         "stopPxEp":0,
    //         "avgPriceEp":0,
    //         "qtyType":"ByBase",
    //         "leavesBaseQtyEv":0,
    //         "leavesQuoteQtyEv":0,
    //         "baseQtyEv":"1000000000",
    //         "feeCurrency":"4",
    //         "stopDirection":"UNSPECIFIED",
    //         "symbol":"sETHUSDT",
    //         "side":"Buy",
    //         "quoteQtyEv":250000000000,
    //         "priceEp":25000000000,
    //         "ordType":"Limit",
    //         "timeInForce":"GoodTillCancel",
    //         "ordStatus":"Rejected",
    //         "execStatus":"NewRejected",
    //         "createTimeNs":1592675305266037130,
    //         "cumFeeEv":0,
    //         "cumBaseValueEv":0,
    //         "cumQuoteValueEv":0
    //     }
    //
    const id = this.safeString(order, 'orderID');
    let clientOrderId = this.safeString(order, 'clOrdID');
    if (clientOrderId !== undefined && clientOrderId.length < 1) {
      clientOrderId = undefined;
    }
    const marketId = this.safeString(order, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const price = this.fromEp(this.safeString(order, 'priceEp'), market);
    const amount = this.fromEv(this.safeString(order, 'baseQtyEv'), market);
    const remaining = this.omitZero(this.fromEv(this.safeString(order, 'leavesBaseQtyEv'), market));
    const filled = this.fromEv(this.safeString2(order, 'cumBaseQtyEv', 'cumBaseValueEv'), market);
    const cost = this.fromEv(this.safeString2(order, 'cumQuoteValueEv', 'quoteQtyEv'), market);
    const average = this.fromEp(this.safeString(order, 'avgPriceEp'), market);
    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
    const side = this.safeStringLower(order, 'side');
    const type = this.parseOrderType(this.safeString(order, 'ordType'));
    const timestamp = this.safeIntegerProduct2(order, 'actionTimeNs', 'createTimeNs', 0.000001);
    let fee = undefined;
    const feeCost = this.fromEv(this.safeString(order, 'cumFeeEv'), market);
    if (feeCost !== undefined) {
      fee = {
        'cost': feeCost,
        'currency': undefined
      };
    }
    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
    const stopPrice = this.parseNumber(this.omitZero(this.fromEp(this.safeString(order, 'stopPxEp', market))));
    const postOnly = timeInForce === 'PO';
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': undefined,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': postOnly,
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': stopPrice,
      'amount': amount,
      'cost': cost,
      'average': average,
      'filled': filled,
      'remaining': remaining,
      'status': status,
      'fee': fee,
      'trades': undefined
    }, market);
  }
  parseOrderSide(side) {
    const sides = {
      '1': 'buy',
      '2': 'sell'
    };
    return this.safeString(sides, side, side);
  }
  parseSwapOrder(order, market = undefined) {
    //
    //     {
    //         "bizError":0,
    //         "orderID":"7a1ad384-44a3-4e54-a102-de4195a29e32",
    //         "clOrdID":"",
    //         "symbol":"ETHUSD",
    //         "side":"Buy",
    //         "actionTimeNs":1592668973945065381,
    //         "transactTimeNs":0,
    //         "orderType":"Market",
    //         "priceEp":2267500,
    //         "price":226.75000000,
    //         "orderQty":1,
    //         "displayQty":0,
    //         "timeInForce":"ImmediateOrCancel",
    //         "reduceOnly":false,
    //         "closedPnlEv":0,
    //         "closedPnl":0E-8,
    //         "closedSize":0,
    //         "cumQty":0,
    //         "cumValueEv":0,
    //         "cumValue":0E-8,
    //         "leavesQty":1,
    //         "leavesValueEv":11337,
    //         "leavesValue":1.13370000,
    //         "stopDirection":"UNSPECIFIED",
    //         "stopPxEp":0,
    //         "stopPx":0E-8,
    //         "trigger":"UNSPECIFIED",
    //         "pegOffsetValueEp":0,
    //         "execStatus":"PendingNew",
    //         "pegPriceType":"UNSPECIFIED",
    //         "ordStatus":"Created",
    //         "execInst": "ReduceOnly"
    //     }
    //
    // usdt
    // {
    //        "bizError":"0",
    //        "orderID":"bd720dff-5647-4596-aa4e-656bac87aaad",
    //        "clOrdID":"ccxt2022843dffac9477b497",
    //        "symbol":"LTCUSDT",
    //        "side":"Buy",
    //        "actionTimeNs":"1677667878751724052",
    //        "transactTimeNs":"1677667878754017434",
    //        "orderType":"Limit",
    //        "priceRp":"40",
    //        "orderQtyRq":"0.1",
    //        "displayQtyRq":"0.1",
    //        "timeInForce":"GoodTillCancel",
    //        "reduceOnly":false,
    //        "closedPnlRv":"0",
    //        "closedSizeRq":"0",
    //        "cumQtyRq":"0",
    //        "cumValueRv":"0",
    //        "leavesQtyRq":"0.1",
    //        "leavesValueRv":"4",
    //        "stopDirection":"UNSPECIFIED",
    //        "stopPxRp":"0",
    //        "trigger":"UNSPECIFIED",
    //        "pegOffsetValueRp":"0",
    //        "pegOffsetProportionRr":"0",
    //        "execStatus":"New",
    //        "pegPriceType":"UNSPECIFIED",
    //        "ordStatus":"New",
    //        "execInst":"None",
    //        "takeProfitRp":"0",
    //        "stopLossRp":"0"
    //     }
    //
    // v2 orderList
    //    {
    //        "createdAt":"1677686231301",
    //        "symbol":"LTCUSDT",
    //        "orderQtyRq":"0.2",
    //        "side":"1",
    //        "posSide":"3",
    //        "priceRp":"50",
    //        "execQtyRq":"0",
    //        "leavesQtyRq":"0.2",
    //        "execPriceRp":"0",
    //        "orderValueRv":"10",
    //        "leavesValueRv":"10",
    //        "cumValueRv":"0",
    //        "stopDirection":"0",
    //        "stopPxRp":"0",
    //        "trigger":"0",
    //        "actionBy":"1",
    //        "execFeeRv":"0",
    //        "ordType":"2",
    //        "ordStatus":"5",
    //        "clOrdId":"4b3b188",
    //        "orderId":"4b3b1884-87cf-4897-b596-6693b7ed84d1",
    //        "execStatus":"5",
    //        "bizError":"0",
    //        "totalPnlRv":null,
    //        "avgTransactPriceRp":null,
    //        "orderDetailsVos":null,
    //        "tradeType":"0"
    //    }
    //
    const id = this.safeString2(order, 'orderID', 'orderId');
    let clientOrderId = this.safeString2(order, 'clOrdID', 'clOrdId');
    if (clientOrderId !== undefined && clientOrderId.length < 1) {
      clientOrderId = undefined;
    }
    const marketId = this.safeString(order, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
    const side = this.parseOrderSide(this.safeStringLower(order, 'side'));
    const type = this.parseOrderType(this.safeString2(order, 'orderType', 'ordType'));
    let price = this.safeString(order, 'priceRp');
    if (price === undefined) {
      price = this.fromEp(this.safeString(order, 'priceEp'), market);
    }
    const amount = this.safeNumber2(order, 'orderQty', 'orderQtyRq');
    const filled = this.safeNumber2(order, 'cumQty', 'cumQtyRq');
    const remaining = this.safeNumber2(order, 'leavesQty', 'leavesQtyRq');
    let timestamp = this.safeIntegerProduct(order, 'actionTimeNs', 0.000001);
    if (timestamp === undefined) {
      timestamp = this.safeInteger(order, 'createdAt');
    }
    const cost = this.safeNumber2(order, 'cumValue', 'cumValueRv');
    let lastTradeTimestamp = this.safeIntegerProduct(order, 'transactTimeNs', 0.000001);
    if (lastTradeTimestamp === 0) {
      lastTradeTimestamp = undefined;
    }
    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
    const stopPrice = this.safeNumber2(order, 'stopPx', 'stopPxRp') || null;
    const postOnly = timeInForce === 'PO';
    let reduceOnly = this.safeValue(order, 'reduceOnly');
    let close = this.safeValue(order, 'closeOnTrigger');
    const execInst = this.safeString(order, 'execInst', '');
    if (execInst.indexOf('ReduceOnly') >= 0) {
      reduceOnly = true;
    }
    if (execInst.indexOf('CloseOnTrigger') >= 0) {
      close = true;
    }
    const trigger = this.parseTriggerType(this.safeStringN(order, ['trigger', 'slTrigger', 'tpTrigger']));
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'datetime': this.iso8601(timestamp),
      'timestamp': timestamp,
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': stopPrice,
      'amount': amount,
      'filled': filled,
      'remaining': remaining,
      'cost': cost,
      'average': undefined,
      'status': status,
      'fee': undefined,
      'trades': undefined,
      'reduceOnly': reduceOnly,
      'postOnly': postOnly,
      'close': close,
      'trigger': trigger
    });
  }
  parseOrder(order, market = undefined) {
    const isSwap = this.safeValue(market, 'swap', false);
    const hasPnl = ('closedPnl' in order);
    if (isSwap || hasPnl) {
      return this.parseSwapOrder(order, market);
    }
    return this.parseSpotOrder(order, market);
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name phemex#createOrder
     * @description create a trade order
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#place-order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    side = this.capitalize(side);
    type = this.capitalize(type);
    const reduceOnly = this.safeValue2(params, 'reduce', 'reduceOnly');
    const closeOnTrigger = this.safeValue2(params, 'close', 'closeOnTrigger');
    const request = {
      // common
      'symbol': market['id'],
      'side': side,
      'ordType': type // Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched (additionally for contract-markets: MarketAsLimit, StopAsLimit, MarketIfTouchedAsLimit)
      // 'stopPxEp': this.toEp (stopPx, market), // for conditional orders
      // 'priceEp': this.toEp (price, market), // required for limit orders
      // 'timeInForce': 'GoodTillCancel', // GoodTillCancel, PostOnly, ImmediateOrCancel, FillOrKill
      // ----------------------------------------------------------------
      // spot
      // 'qtyType': 'ByBase', // ByBase, ByQuote
      // 'quoteQtyEv': this.toEp (cost, market),
      // 'baseQtyEv': this.toEv (amount, market),
      // 'trigger': 'ByLastPrice', // required for conditional orders
      // ----------------------------------------------------------------
      // swap
      // 'clOrdID': this.uuid (), // max length 40
      // 'orderQty': this.amountToPrecision (amount, symbol),
      // 'reduceOnly': false,
      // 'closeOnTrigger': false, // implicit reduceOnly and cancel other orders in the same direction
      // 'takeProfitEp': this.toEp (takeProfit, market),
      // 'stopLossEp': this.toEp (stopLossEp, market),
      // 'triggerType': 'ByMarkPrice', // ByMarkPrice, ByLastPrice
      // 'pegOffsetValueEp': integer, // Trailing offset from current price. Negative value when position is long, positive when position is short
      // 'pegPriceType': 'TrailingStopPeg', // TrailingTakeProfitPeg
      // 'text': 'comment',
      // 'posSide': Position direction - "Merged" for oneway mode , "Long" / "Short" for hedge mode
    };

    const timeInForce = this.formatTimeInForce(this.safeString(params, 'timeInForce'));
    if (timeInForce !== undefined) {
      request['timeInForce'] = timeInForce;
    }
    const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
    if (clientOrderId === undefined) {
      const brokerId = this.safeString(this.options, 'brokerId');
      if (brokerId !== undefined) {
        request['clOrdID'] = brokerId + '_' + this.uuid16();
      }
    } else {
      request['clOrdID'] = clientOrderId;
      params = this.omit(params, ['clOrdID', 'clientOrderId']);
    }
    const stopPrice = this.safeString2(params, 'stopPx', 'stopPrice');
    let formattedStopPrice = undefined;
    if (stopPrice !== undefined) {
      if (market['settle'] === 'USDT') {
        request['stopPxRp'] = this.priceToPrecision(symbol, stopPrice);
        formattedStopPrice = this.safeFloat(request, 'stopPxRp');
      } else {
        request['stopPxEp'] = this.toEp(stopPrice, market);
        formattedStopPrice = this.safeFloat(request, 'stopPxEp');
      }
    }
    params = this.omit(params, ['stopPx', 'stopPrice']);
    if (market['spot']) {
      let qtyType = this.safeValue(params, 'qtyType', 'ByBase');
      if (type === 'Market' || type === 'Stop' || type === 'MarketIfTouched') {
        if (price !== undefined) {
          qtyType = 'ByQuote';
        }
      }
      request['qtyType'] = qtyType;
      if (qtyType === 'ByQuote') {
        let cost = this.safeNumber(params, 'cost');
        params = this.omit(params, 'cost');
        if (this.options['createOrderByQuoteRequiresPrice']) {
          if (price !== undefined) {
            const amountString = this.numberToString(amount);
            const priceString = this.numberToString(price);
            const quoteAmount = _Precise.Precise.stringMul(amountString, priceString);
            cost = this.parseNumber(quoteAmount);
          } else if (cost === undefined) {
            throw new _errors.ArgumentsRequired(this.id + ' createOrder() ' + qtyType + ' requires a price argument or a cost parameter');
          }
        }
        cost = cost === undefined ? amount : cost;
        const costString = cost.toString();
        request['quoteQtyEv'] = this.toEv(costString, market);
      } else {
        const amountString = amount.toString();
        request['baseQtyEv'] = this.toEv(amountString, market);
      }
    } else if (market['swap']) {
      request['posSide'] = this.formatPosSide(side, params);
      if (reduceOnly !== undefined) {
        request['reduceOnly'] = reduceOnly;
      }
      if (market['settle'] === 'USDT') {
        request['orderQtyRq'] = amount;
      } else {
        request['orderQty'] = parseInt(amount);
      }
      if (formattedStopPrice !== undefined) {
        const triggerType = this.formatTriggerType(this.safeString2(params, 'trigger', 'triggerType', 'ByMarkPrice'));
        request['triggerType'] = triggerType;
        if (closeOnTrigger !== undefined) {
          request['closeOnTrigger'] = closeOnTrigger;
        }
        const basePrice = this.safeFloat(params, 'basePrice');
        if (basePrice !== undefined) {
          if (formattedStopPrice > basePrice && side === 'Sell' || formattedStopPrice < basePrice && side === 'Buy') {
            if (type === 'Stop') {
              type = 'MarketIfTouched';
              request['ordType'] = type;
            } else if (type === 'StopLimit') {
              type = 'LimitIfTouched';
              request['ordType'] = type;
            }
          }
        }
      }
    }
    if (type === 'Limit' || type === 'StopLimit' || type === 'LimitIfTouched') {
      if (market['settle'] === 'USDT') {
        request['priceRp'] = this.priceToPrecision(symbol, price);
      } else {
        const priceString = this.numberToString(price);
        request['priceEp'] = this.toEp(priceString, market);
      }
    }
    const takeProfitPrice = this.safeString(params, 'takeProfitPrice');
    if (takeProfitPrice !== undefined) {
      if (market['settle'] === 'USDT') {
        request['takeProfitRp'] = this.priceToPrecision(symbol, takeProfitPrice);
      } else {
        request['takeProfitEp'] = this.toEp(takeProfitPrice, market);
      }
      params = this.omit(params, 'takeProfitPrice');
    }
    const stopLossPrice = this.safeString(params, 'stopLossPrice');
    if (stopLossPrice !== undefined) {
      if (market['settle'] === 'USDT') {
        request['stopLossRp'] = this.priceToPrecision(symbol, stopLossPrice);
      } else {
        request['stopLossEp'] = this.toEp(stopLossPrice, market);
      }
      params = this.omit(params, 'stopLossPrice');
    }
    let method = 'privatePostSpotOrders';
    if (market['settle'] === 'USDT') {
      method = 'privatePostGOrders';
    } else if (market['contract']) {
      method = 'privatePostOrders';
    }
    params = this.omit(params, 'reduceOnly', 'timeInForce', 'closeOnTrigger', 'close', 'basePrice', 'positionMode');
    const response = await this[method](this.extend(request, params));
    //
    // spot
    //
    //     {
    //         "code": 0,
    //         "msg": "",
    //         "data": {
    //             "orderID": "d1d09454-cabc-4a23-89a7-59d43363f16d",
    //             "clOrdID": "309bcd5c-9f6e-4a68-b775-4494542eb5cb",
    //             "priceEp": 0,
    //             "action": "New",
    //             "trigger": "UNSPECIFIED",
    //             "pegPriceType": "UNSPECIFIED",
    //             "stopDirection": "UNSPECIFIED",
    //             "bizError": 0,
    //             "symbol": "sBTCUSDT",
    //             "side": "Buy",
    //             "baseQtyEv": 0,
    //             "ordType": "Limit",
    //             "timeInForce": "GoodTillCancel",
    //             "ordStatus": "Created",
    //             "cumFeeEv": 0,
    //             "cumBaseQtyEv": 0,
    //             "cumQuoteQtyEv": 0,
    //             "leavesBaseQtyEv": 0,
    //             "leavesQuoteQtyEv": 0,
    //             "avgPriceEp": 0,
    //             "cumBaseAmountEv": 0,
    //             "cumQuoteAmountEv": 0,
    //             "quoteQtyEv": 0,
    //             "qtyType": "ByBase",
    //             "stopPxEp": 0,
    //             "pegOffsetValueEp": 0
    //         }
    //     }
    //
    // swap
    //
    //     {
    //         "code":0,
    //         "msg":"",
    //         "data":{
    //             "bizError":0,
    //             "orderID":"7a1ad384-44a3-4e54-a102-de4195a29e32",
    //             "clOrdID":"",
    //             "symbol":"ETHUSD",
    //             "side":"Buy",
    //             "actionTimeNs":1592668973945065381,
    //             "transactTimeNs":0,
    //             "orderType":"Market",
    //             "priceEp":2267500,
    //             "price":226.75000000,
    //             "orderQty":1,
    //             "displayQty":0,
    //             "timeInForce":"ImmediateOrCancel",
    //             "reduceOnly":false,
    //             "closedPnlEv":0,
    //             "closedPnl":0E-8,
    //             "closedSize":0,
    //             "cumQty":0,
    //             "cumValueEv":0,
    //             "cumValue":0E-8,
    //             "leavesQty":1,
    //             "leavesValueEv":11337,
    //             "leavesValue":1.13370000,
    //             "stopDirection":"UNSPECIFIED",
    //             "stopPxEp":0,
    //             "stopPx":0E-8,
    //             "trigger":"UNSPECIFIED",
    //             "pegOffsetValueEp":0,
    //             "execStatus":"PendingNew",
    //             "pegPriceType":"UNSPECIFIED",
    //             "ordStatus":"Created"
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseOrder(data, market);
  }
  formatPosSide(side, params = {}) {
    side = this.capitalize(side);
    let posSide = this.safeStringLower2(params, 'positionMode', 'posSide');
    const reduceOnly = this.safeValue2(params, 'reduce', 'reduceOnly');
    const closeOnTrigger = this.safeValue2(params, 'close', 'closeOnTrigger');
    if (posSide === 'oneway') {
      posSide = 'Merged';
    } else if (posSide === 'hedged' || posSide === 'hedge') {
      if (side === 'Buy') {
        if (reduceOnly || closeOnTrigger) {
          posSide = 'Short';
        } else {
          posSide = 'Long';
        }
      } else {
        if (reduceOnly || closeOnTrigger) {
          posSide = 'Long';
        } else {
          posSide = 'Short';
        }
      }
    }
    if (posSide === undefined) {
      posSide = 'Merged';
    }
    return this.capitalize(posSide);
  }
  async editOrder(id, symbol, type = undefined, side = undefined, amount = undefined, price = undefined, params = {}) {
    /**
     * @method
     * @name phemex#editOrder
     * @description edit a trade order
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#amend-order-by-orderid
     * @param {string} id cancel order id
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the base currency, ignored in market orders
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @param {string|undefined} params.posSide either 'Hedged' or 'OneWay' or 'Merged'
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' editOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');
    params = this.omit(params, ['clientOrderId', 'clOrdID']);
    const isUSDTSettled = market['settle'] === 'USDT';
    if (clientOrderId !== undefined) {
      request['clOrdID'] = clientOrderId;
    } else {
      request['orderID'] = id;
    }
    if (price !== undefined) {
      if (isUSDTSettled) {
        request['priceRp'] = this.priceToPrecision(market['symbol'], price);
      } else {
        request['priceEp'] = this.toEp(price, market);
      }
    }
    // Note the uppercase 'V' in 'baseQtyEV' request. that is exchange's requirement at this moment. However, to avoid mistakes from user side, let's support lowercased 'baseQtyEv' too
    const finalQty = this.safeString(params, 'baseQtyEv');
    params = this.omit(params, ['baseQtyEv']);
    if (finalQty !== undefined) {
      request['baseQtyEV'] = finalQty;
      // support 0 amount for full close stops
    } else if (amount !== undefined && amount > 0) {
      if (isUSDTSettled) {
        if (market['type'] === 'swap') {
          request['orderQtyRq'] = this.amountToPrecision(market['symbol'], amount);
        } else {
          request['baseQtyEV'] = this.amountToPrecision(market['symbol'], amount);
        }
      } else {
        request['baseQtyEV'] = this.toEv(amount, market);
      }
    }
    const stopPrice = this.safeString2(params, 'stopPx', 'stopPrice');
    if (stopPrice !== undefined) {
      if (isUSDTSettled) {
        request['stopPxRp'] = this.priceToPrecision(symbol, stopPrice);
      } else {
        request['stopPxEp'] = this.toEp(stopPrice, market);
      }
    }
    params = this.omit(params, ['stopPx', 'stopPrice']);
    let method = 'privatePutSpotOrders';
    if (market['inverse']) {
      method = 'privatePutOrdersReplace';
    } else if (isUSDTSettled) {
      method = 'privatePutGOrdersReplace';
      request['posSide'] = this.formatPosSide(side, params);
    }
    params = this.omit(params, ['reduceOnly', 'timeInForce', 'closeOnTrigger', 'close', 'basePrice', 'positionSide']);
    const response = await this[method](this.extend(request, params));
    const data = this.safeValue(response, 'data', {});
    return this.parseOrder(data, market);
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name phemex#cancelOrder
     * @description cancels an open order
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#cancel-single-order-by-orderid
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @param {string|undefined} params.posSide either 'Hedged' or 'OneWay' or 'Merged'
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');
    params = this.omit(params, ['clientOrderId', 'clOrdID']);
    if (clientOrderId !== undefined) {
      request['clOrdID'] = clientOrderId;
    } else {
      request['orderID'] = id;
    }
    let method = 'privateDeleteSpotOrders';
    if (market['inverse']) {
      method = 'privateDeleteOrdersCancel';
    } else if (market['settle'] === 'USDT') {
      method = 'privateDeleteGOrdersCancel';
      const side = this.safeString(params, 'side');
      request['posSide'] = this.formatPosSide(side, params);
    }
    params = this.omit(params, ['side']);
    const response = await this[method](this.extend(request, params));
    const data = this.safeValue(response, 'data', {});
    return this.parseOrder(data, market);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name phemex#cancelAllOrders
     * @description cancel all open orders in a market
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#cancelall
     * @param {string} symbol unified market symbol of the market to cancel orders in
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelAllOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const request = {
      // 'symbol': market['id'],
      // 'untriggerred': false, // false to cancel non-conditional orders, true to cancel conditional orders
      // 'text': 'up to 40 characters max',
    };
    const market = this.market(symbol);
    let method = 'privateDeleteSpotOrdersAll';
    if (market['inverse']) {
      method = 'privateDeleteOrdersAll';
    } else if (market['settle'] === 'USDT') {
      method = 'privateDeleteGOrdersAll';
    }
    request['symbol'] = market['id'];
    return await this[method](this.extend(request, params));
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    if (market['settle'] === 'USDT') {
      throw new _errors.NotSupported(this.id + 'fetchOrder() is not supported yet for USDT settled swap markets'); // https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-user-order-by-orderid-or-query-user-order-by-client-order-id
    }

    const method = market['spot'] ? 'privateGetSpotOrdersActive' : 'privateGetExchangeOrder';
    const request = {
      'symbol': market['id']
    };
    const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');
    params = this.omit(params, ['clientOrderId', 'clOrdID']);
    if (clientOrderId !== undefined) {
      request['clOrdID'] = clientOrderId;
    } else {
      request['orderID'] = id;
    }
    const response = await this[method](this.extend(request, params));
    const data = this.safeValue(response, 'data', {});
    let order = data;
    if (Array.isArray(data)) {
      const numOrders = data.length;
      if (numOrders < 1) {
        if (clientOrderId !== undefined) {
          throw new _errors.OrderNotFound(this.id + ' fetchOrder() ' + symbol + ' order with clientOrderId ' + clientOrderId + ' not found');
        } else {
          throw new _errors.OrderNotFound(this.id + ' fetchOrder() ' + symbol + ' order with id ' + id + ' not found');
        }
      }
      order = this.safeValue(data, 0, {});
    }
    return this.parseOrder(order, market);
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryorder
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    let method = 'privateGetSpotOrders';
    if (market['inverse']) {
      method = 'privateGetExchangeOrderList';
    } else if (market['settle'] === 'USDT') {
      request['currency'] = market['settle'];
      method = 'privateGetExchangeOrderV2OrderList';
    }
    if (since !== undefined) {
      request['start'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, params));
    const data = this.safeValue(response, 'data', {});
    const rows = this.safeValue(data, 'rows', data);
    return this.parseOrders(rows, market, since, limit);
  }
  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchOpenOrders
     * @description fetch all unfilled currently open orders
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryopenorder
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch open orders for
     * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    let method = 'privateGetSpotOrders';
    if (market['inverse']) {
      method = 'privateGetOrdersActiveList';
    } else if (market['settle'] === 'USDT') {
      method = 'privateGetGOrdersActiveList';
    }
    const request = {
      'symbol': market['id']
    };
    let response = undefined;
    try {
      response = await this[method](this.extend(request, params));
    } catch (e) {
      if (e instanceof _errors.OrderNotFound) {
        return [];
      }
      throw e;
    }
    const data = this.safeValue(response, 'data', {});
    if (Array.isArray(data)) {
      return this.parseOrders(data, market, since, limit);
    } else {
      const rows = this.safeValue(data, 'rows', []);
      return this.parseOrders(rows, market, since, limit);
    }
  }
  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchClosedOrders
     * @description fetches information on multiple closed orders made by the user
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#queryorder
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    let method = 'privateGetExchangeSpotOrder';
    if (market['inverse']) {
      method = 'privateGetExchangeOrderList';
    } else if (market['settle'] === 'USDT') {
      request['currency'] = market['settle'];
      method = 'privateGetExchangeOrderV2OrderList';
    }
    if (since !== undefined) {
      request['start'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, params));
    //
    // spot
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":{
    //             "total":8,
    //             "rows":[
    //                 {
    //                     "orderID":"99232c3e-3d6a-455f-98cc-2061cdfe91bc",
    //                     "stopPxEp":0,
    //                     "avgPriceEp":0,
    //                     "qtyType":"ByBase",
    //                     "leavesBaseQtyEv":0,
    //                     "leavesQuoteQtyEv":0,
    //                     "baseQtyEv":"1000000000",
    //                     "feeCurrency":"4",
    //                     "stopDirection":"UNSPECIFIED",
    //                     "symbol":"sETHUSDT",
    //                     "side":"Buy",
    //                     "quoteQtyEv":250000000000,
    //                     "priceEp":25000000000,
    //                     "ordType":"Limit",
    //                     "timeInForce":"GoodTillCancel",
    //                     "ordStatus":"Rejected",
    //                     "execStatus":"NewRejected",
    //                     "createTimeNs":1592675305266037130,
    //                     "cumFeeEv":0,
    //                     "cumBaseValueEv":0,
    //                     "cumQuoteValueEv":0
    //                 },
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    if (Array.isArray(data)) {
      return this.parseOrders(data, market, since, limit);
    } else {
      const rows = this.safeValue(data, 'rows', []);
      return this.parseOrders(rows, market, since, limit);
    }
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchMyTrades
     * @description fetch all trades made by the user
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#query-user-trade
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-user-trade
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    let method = 'privateGetExchangeSpotOrderTrades';
    if (market['swap']) {
      method = 'privateGetExchangeOrderTrade';
      if (market['settle'] === 'USDT') {
        method = 'privateGetExchangeOrderV2TradingList';
      }
    }
    const request = {};
    if (market['settle'] === 'USDT') {
      request['currency'] = 'USDT';
      request['offset'] = 0;
      limit = 200;
      if (limit !== undefined) {
        limit = Math.min(200, limit);
      }
      request['limit'] = limit;
    } else {
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start'] = since;
    }
    if (market['swap'] && limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this[method](this.extend(request, params));
    //
    // spot
    //
    //     {
    //         "code": 0,
    //         "msg": "OK",
    //         "data": {
    //             "total": 1,
    //             "rows": [
    //                 {
    //                     "qtyType": "ByQuote",
    //                     "transactTimeNs": 1589450974800550100,
    //                     "clOrdID": "8ba59d40-df25-d4b0-14cf-0703f44e9690",
    //                     "orderID": "b2b7018d-f02f-4c59-b4cf-051b9c2d2e83",
    //                     "symbol": "sBTCUSDT",
    //                     "side": "Buy",
    //                     "priceEP": 970056000000,
    //                     "baseQtyEv": 0,
    //                     "quoteQtyEv": 1000000000,
    //                     "action": "New",
    //                     "execStatus": "MakerFill",
    //                     "ordStatus": "Filled",
    //                     "ordType": "Limit",
    //                     "execInst": "None",
    //                     "timeInForce": "GoodTillCancel",
    //                     "stopDirection": "UNSPECIFIED",
    //                     "tradeType": "Trade",
    //                     "stopPxEp": 0,
    //                     "execId": "c6bd8979-07ba-5946-b07e-f8b65135dbb1",
    //                     "execPriceEp": 970056000000,
    //                     "execBaseQtyEv": 103000,
    //                     "execQuoteQtyEv": 999157680,
    //                     "leavesBaseQtyEv": 0,
    //                     "leavesQuoteQtyEv": 0,
    //                     "execFeeEv": 0,
    //                     "feeRateEr": 0
    //                 }
    //             ]
    //         }
    //     }
    //
    //
    // swap
    //
    //     {
    //         "code": 0,
    //         "msg": "OK",
    //         "data": {
    //             "total": 79,
    //             "rows": [
    //                 {
    //                     "transactTimeNs": 1606054879331565300,
    //                     "symbol": "BTCUSD",
    //                     "currency": "BTC",
    //                     "action": "New",
    //                     "side": "Buy",
    //                     "tradeType": "Trade",
    //                     "execQty": 5,
    //                     "execPriceEp": 182990000,
    //                     "orderQty": 5,
    //                     "priceEp": 183870000,
    //                     "execValueEv": 27323,
    //                     "feeRateEr": 75000,
    //                     "execFeeEv": 21,
    //                     "ordType": "Market",
    //                     "execID": "5eee56a4-04a9-5677-8eb0-c2fe22ae3645",
    //                     "orderID": "ee0acb82-f712-4543-a11d-d23efca73197",
    //                     "clOrdID": "",
    //                     "execStatus": "TakerFill"
    //                 },
    //             ]
    //         }
    //     }
    //
    // swap - usdt
    //
    // {
    //     "code": 0,
    //     "msg": "OK",
    //     "data": {
    //         "total": 4,
    //         "rows": [
    //             {
    //                 "createdAt": 1666226932259,
    //                 "symbol": "ETHUSDT",
    //                 "currency": "USDT",
    //                 "action": 1,
    //                 "tradeType": 1,
    //                 "execQtyRq": "0.01",
    //                 "execPriceRp": "1271.9",
    //                 "side": 1,
    //                 "orderQtyRq": "0.78",
    //                 "priceRp": "1271.9",
    //                 "execValueRv": "12.719",
    //                 "feeRateRr": "0.0001",
    //                 "execFeeRv": "0.0012719",
    //                 "ordType": 2,
    //                 "execId": "8718cae",
    //                 "execStatus": 6
    //             },
    //         ]
    //     }
    // }
    //
    const data = this.safeValue(response, 'data', {});
    if (method !== 'privateGetExchangeOrderV2TradingList') {
      const rows = this.safeValue(data, 'rows', []);
      return this.parseTrades(rows, market, since, limit);
    }
    return this.parseTrades(data, market, since, limit);
  }
  async fetchDepositAddress(code, params = {}) {
    /**
     * @method
     * @name phemex#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'currency': currency['id']
    };
    const defaultNetworks = this.safeValue(this.options, 'defaultNetworks');
    const defaultNetwork = this.safeStringUpper(defaultNetworks, code);
    const networks = this.safeValue(this.options, 'networks', {});
    let network = this.safeStringUpper(params, 'network', defaultNetwork);
    network = this.safeString(networks, network, network);
    if (network === undefined) {
      request['chainName'] = currency['id'];
    } else {
      request['chainName'] = network;
      params = this.omit(params, 'network');
    }
    const response = await this.privateGetPhemexUserWalletsV2DepositAddress(this.extend(request, params));
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":{
    //             "address":"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad",
    //             "tag":null
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    const address = this.safeString(data, 'address');
    const tag = this.safeString(data, 'tag');
    this.checkAddress(address);
    return {
      'currency': code,
      'address': address,
      'tag': tag,
      'network': undefined,
      'info': response
    };
  }
  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchDeposits
     * @description fetch all deposits made to an account
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch deposits for
     * @param {int|undefined} limit the maximum number of deposits structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
    }
    const response = await this.privateGetExchangeWalletsDepositList(params);
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":[
    //             {
    //                 "id":29200,
    //                 "currency":"USDT",
    //                 "currencyCode":3,
    //                 "txHash":"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d",
    //                 "address":"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad",
    //                 "amountEv":3000000000,
    //                 "confirmations":13,
    //                 "type":"Deposit",
    //                 "status":"Success",
    //                 "createdAt":1592722565000
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseTransactions(data, currency, since, limit);
  }
  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchWithdrawals
     * @description fetch all withdrawals made from an account
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
     * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    await this.loadMarkets();
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
    }
    const response = await this.privateGetExchangeWalletsWithdrawList(params);
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":[
    //             {
    //                 "address": "1Lxxxxxxxxxxx"
    //                 "amountEv": 200000
    //                 "currency": "BTC"
    //                 "currencyCode": 1
    //                 "expiredTime": 0
    //                 "feeEv": 50000
    //                 "rejectReason": null
    //                 "status": "Succeed"
    //                 "txHash": "44exxxxxxxxxxxxxxxxxxxxxx"
    //                 "withdrawStatus: ""
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseTransactions(data, currency, since, limit);
  }
  parseTransactionStatus(status) {
    const statuses = {
      'Success': 'ok',
      'Succeed': 'ok'
    };
    return this.safeString(statuses, status, status);
  }
  parseTransaction(transaction, currency = undefined) {
    //
    // withdraw
    //
    //     ...
    //
    // fetchDeposits
    //
    //     {
    //         "id":29200,
    //         "currency":"USDT",
    //         "currencyCode":3,
    //         "txHash":"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d",
    //         "address":"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad",
    //         "amountEv":3000000000,
    //         "confirmations":13,
    //         "type":"Deposit",
    //         "status":"Success",
    //         "createdAt":1592722565000
    //     }
    //
    // fetchWithdrawals
    //
    //     {
    //         "address": "1Lxxxxxxxxxxx"
    //         "amountEv": 200000
    //         "currency": "BTC"
    //         "currencyCode": 1
    //         "expiredTime": 0
    //         "feeEv": 50000
    //         "rejectReason": null
    //         "status": "Succeed"
    //         "txHash": "44exxxxxxxxxxxxxxxxxxxxxx"
    //         "withdrawStatus: ""
    //     }
    //
    const id = this.safeString(transaction, 'id');
    const address = this.safeString(transaction, 'address');
    const tag = undefined;
    const txid = this.safeString(transaction, 'txHash');
    const currencyId = this.safeString(transaction, 'currency');
    currency = this.safeCurrency(currencyId, currency);
    const code = currency['code'];
    const timestamp = this.safeInteger2(transaction, 'createdAt', 'submitedAt');
    let type = this.safeStringLower(transaction, 'type');
    const feeCost = this.parseNumber(this.fromEn(this.safeString(transaction, 'feeEv'), currency['valueScale']));
    let fee = undefined;
    if (feeCost !== undefined) {
      type = 'withdrawal';
      fee = {
        'cost': feeCost,
        'currency': code
      };
    }
    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));
    const amount = this.parseNumber(this.fromEn(this.safeString(transaction, 'amountEv'), currency['valueScale']));
    return {
      'info': transaction,
      'id': id,
      'txid': txid,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'network': undefined,
      'address': address,
      'addressTo': address,
      'addressFrom': undefined,
      'tag': tag,
      'tagTo': tag,
      'tagFrom': undefined,
      'type': type,
      'amount': amount,
      'currency': code,
      'status': status,
      'updated': undefined,
      'fee': fee
    };
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const positions = await this.fetchPositions([symbol], params);
    const buyPosition = this.safeValue(positions, 0, {});
    const sellPosition = this.safeValue(positions, 1, {});
    const buyLeverage = this.safeFloat(buyPosition, 'leverage');
    const sellLeverage = this.safeFloat(sellPosition, 'leverage');
    const _marginMode = this.safeString(buyPosition, 'marginMode');
    let marginMode = 'cross';
    if (_marginMode === 'cross') {
      marginMode = 'cross';
    } else {
      marginMode = 'isolated';
    }
    const _positionMode = this.safeString(buyPosition, 'positionMode');
    let positionMode = 'oneway';
    if (_positionMode === 'hedged') {
      positionMode = 'hedged';
    } else {
      positionMode = 'oneway';
    }
    const accountConfig = {
      'marginMode': marginMode,
      'positionMode': positionMode,
      'markets': {},
      'info': positions
    };
    const leverageConfigs = accountConfig['markets'];
    leverageConfigs[market['symbol']] = {
      'buyLeverage': buyLeverage,
      'leverage': buyLeverage,
      'sellLeverage': sellLeverage,
      'positionMode': positionMode
    };
    return accountConfig;
  }
  async fetchAllPositions(params = {}) {
    /**
     * @method
     * @name phemex#fetchAllPositions
     * @description fetch all open positions for all currencies
     */
    const settleCurrencies = ['USDT', 'USD', 'BTC'];
    let promises = [];
    for (let i = 0; i < settleCurrencies.length; i++) {
      promises.push(this.fetchPositions(undefined, {
        'settle': settleCurrencies[i]
      }));
    }
    promises = await Promise.all(promises);
    let result = [];
    for (let i = 0; i < promises.length; i++) {
      result = this.arrayConcat(result, promises[i]);
    }
    return result;
  }
  async fetchPositions(symbols = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchPositions
     * @description fetch all open positions
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#query-trading-account-and-positions
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#query-account-positions
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    let subType = undefined;
    let method = 'privateGetAccountsAccountPositions';
    let code = this.safeString(params, 'currency');
    let settle = undefined;
    let market = undefined;
    const firstSymbol = this.safeString(symbols, 0);
    if (firstSymbol !== undefined) {
      market = this.market(firstSymbol);
      settle = market['settle'];
      code = market['settle'];
    } else {
      [settle, params] = this.handleOptionAndParams(params, 'fetchPositions', 'settle', 'USD');
    }
    [subType, params] = this.handleSubTypeAndParams('fetchPositions', market, params);
    if (settle === 'USDT') {
      code = 'USDT';
      method = 'privateGetGAccountsAccountPositions';
    } else if (code === undefined) {
      code = subType === 'linear' ? 'USD' : 'BTC';
    } else {
      params = this.omit(params, 'code');
    }
    const currency = this.currency(code);
    const request = {
      'currency': currency['id']
    };
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code":0,"msg":"",
    //         "data":{
    //             "account":{
    //                 "accountId":6192120001,
    //                 "currency":"BTC",
    //                 "accountBalanceEv":1254744,
    //                 "totalUsedBalanceEv":0,
    //                 "bonusBalanceEv":1254744
    //             },
    //             "positions":[
    //                 {
    //                     "accountID":6192120001,
    //                     "symbol":"BTCUSD",
    //                     "currency":"BTC",
    //                     "side":"None",
    //                     "positionStatus":"Normal",
    //                     "crossMargin":false,
    //                     "leverageEr":100000000,
    //                     "leverage":1.00000000,
    //                     "initMarginReqEr":100000000,
    //                     "initMarginReq":1.00000000,
    //                     "maintMarginReqEr":500000,
    //                     "maintMarginReq":0.00500000,
    //                     "riskLimitEv":10000000000,
    //                     "riskLimit":100.00000000,
    //                     "size":0,
    //                     "value":0E-8,
    //                     "valueEv":0,
    //                     "avgEntryPriceEp":0,
    //                     "avgEntryPrice":0E-8,
    //                     "posCostEv":0,
    //                     "posCost":0E-8,
    //                     "assignedPosBalanceEv":0,
    //                     "assignedPosBalance":0E-8,
    //                     "bankruptCommEv":0,
    //                     "bankruptComm":0E-8,
    //                     "bankruptPriceEp":0,
    //                     "bankruptPrice":0E-8,
    //                     "positionMarginEv":0,
    //                     "positionMargin":0E-8,
    //                     "liquidationPriceEp":0,
    //                     "liquidationPrice":0E-8,
    //                     "deleveragePercentileEr":0,
    //                     "deleveragePercentile":0E-8,
    //                     "buyValueToCostEr":100225000,
    //                     "buyValueToCost":1.00225000,
    //                     "sellValueToCostEr":100075000,
    //                     "sellValueToCost":1.00075000,
    //                     "markPriceEp":135736070,
    //                     "markPrice":13573.60700000,
    //                     "markValueEv":0,
    //                     "markValue":null,
    //                     "unRealisedPosLossEv":0,
    //                     "unRealisedPosLoss":null,
    //                     "estimatedOrdLossEv":0,
    //                     "estimatedOrdLoss":0E-8,
    //                     "usedBalanceEv":0,
    //                     "usedBalance":0E-8,
    //                     "takeProfitEp":0,
    //                     "takeProfit":null,
    //                     "stopLossEp":0,
    //                     "stopLoss":null,
    //                     "cumClosedPnlEv":0,
    //                     "cumFundingFeeEv":0,
    //                     "cumTransactFeeEv":0,
    //                     "realisedPnlEv":0,
    //                     "realisedPnl":null,
    //                     "cumRealisedPnlEv":0,
    //                     "cumRealisedPnl":null
    //                 }
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    const positions = this.safeValue(data, 'positions', []);
    const result = [];
    for (let i = 0; i < positions.length; i++) {
      const position = positions[i];
      result.push(this.parsePosition(position));
    }
    return this.filterByArray(result, 'symbol', symbols, false);
  }
  parsePosition(position, market = undefined) {
    //
    //   {
    //     userID: '811370',
    //     accountID: '8113700002',
    //     symbol: 'ETHUSD',
    //     currency: 'USD',
    //     side: 'Buy',
    //     positionStatus: 'Normal',
    //     crossMargin: false,
    //     leverageEr: '200000000',
    //     leverage: '2.00000000',
    //     initMarginReqEr: '50000000',
    //     initMarginReq: '0.50000000',
    //     maintMarginReqEr: '1000000',
    //     maintMarginReq: '0.01000000',
    //     riskLimitEv: '5000000000',
    //     riskLimit: '500000.00000000',
    //     size: '1',
    //     value: '22.22370000',
    //     valueEv: '222237',
    //     avgEntryPriceEp: '44447400',
    //     avgEntryPrice: '4444.74000000',
    //     posCostEv: '111202',
    //     posCost: '11.12020000',
    //     assignedPosBalanceEv: '111202',
    //     assignedPosBalance: '11.12020000',
    //     bankruptCommEv: '84',
    //     bankruptComm: '0.00840000',
    //     bankruptPriceEp: '22224000',
    //     bankruptPrice: '2222.40000000',
    //     positionMarginEv: '111118',
    //     positionMargin: '11.11180000',
    //     liquidationPriceEp: '22669000',
    //     liquidationPrice: '2266.90000000',
    //     deleveragePercentileEr: '0',
    //     deleveragePercentile: '0E-8',
    //     buyValueToCostEr: '50112500',
    //     buyValueToCost: '0.50112500',
    //     sellValueToCostEr: '50187500',
    //     sellValueToCost: '0.50187500',
    //     markPriceEp: '31332499',
    //     markPrice: '3133.24990000',
    //     markValueEv: '0',
    //     markValue: null,
    //     unRealisedPosLossEv: '0',
    //     unRealisedPosLoss: null,
    //     estimatedOrdLossEv: '0',
    //     estimatedOrdLoss: '0E-8',
    //     usedBalanceEv: '111202',
    //     usedBalance: '11.12020000',
    //     takeProfitEp: '0',
    //     takeProfit: null,
    //     stopLossEp: '0',
    //     stopLoss: null,
    //     cumClosedPnlEv: '-1546',
    //     cumFundingFeeEv: '1605',
    //     cumTransactFeeEv: '8438',
    //     realisedPnlEv: '0',
    //     realisedPnl: null,
    //     cumRealisedPnlEv: '0',
    //     cumRealisedPnl: null,
    //     transactTimeNs: '1641571200001885324',
    //     takerFeeRateEr: '0',
    //     makerFeeRateEr: '0',
    //     term: '6',
    //     lastTermEndTimeNs: '1607711882505745356',
    //     lastFundingTimeNs: '1641571200000000000',
    //     curTermRealisedPnlEv: '-1567',
    //     execSeq: '12112761561'
    //   }
    //
    const marketId = this.safeString(position, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const collateral = this.safeString2(position, 'positionMargin', 'positionMarginRv');
    const notionalString = this.safeString2(position, 'value', 'valueRv');
    const maintenanceMarginPercentageString = this.safeString2(position, 'maintMarginReq', 'maintMarginReqRr');
    const maintenanceMarginString = _Precise.Precise.stringMul(notionalString, maintenanceMarginPercentageString);
    const initialMarginString = this.safeStringN(position, ['posCostRv', 'assignedPosBalance', 'assignedPosBalanceRv']);
    const initialMarginPercentageString = _Precise.Precise.stringDiv(initialMarginString, notionalString);
    const liquidationPrice = this.safeNumber2(position, 'liquidationPrice', 'liquidationPriceRp');
    const markPriceString = this.safeString2(position, 'markPrice', 'markPriceRp');
    const contractSize = this.safeValue(market, 'contractSize');
    const contractSizeString = this.numberToString(contractSize);
    let leverage = this.safeNumber2(position, 'leverage', 'leverageRr');
    let marginMode = 'isolated';
    if (leverage < 0) {
      marginMode = 'cross';
      leverage = -1 * leverage;
    }
    const entryPriceString = this.safeString2(position, 'avgEntryPrice', 'avgEntryPriceRp');
    const rawSide = this.safeString(position, 'side');
    const rawPosSide = this.safeString(position, 'posSide');
    let side = undefined;
    if (rawPosSide === 'Long') {
      side = 'long';
    } else if (rawPosSide === 'Short') {
      side = 'short';
    } else if (rawSide !== undefined) {
      side = rawSide === 'Buy' ? 'long' : 'short';
    }
    let contracts = Math.abs(this.safeNumber(position, 'size', 0));
    if (side === 'short') {
      contracts = -1 * contracts;
    }
    const rawPosMode = this.safeString(position, 'posMode');
    let positionMode = 'oneway';
    let hedged = false;
    let id = undefined;
    if (rawPosMode === 'Hedged') {
      hedged = true;
      positionMode = 'hedged';
      id = symbol + ':' + side;
    } else {
      id = symbol;
    }
    let priceDiff = undefined;
    const currency = this.safeString(position, 'currency');
    if (currency === 'USD') {
      if (side === 'long') {
        priceDiff = _Precise.Precise.stringSub(markPriceString, entryPriceString);
      } else {
        priceDiff = _Precise.Precise.stringSub(entryPriceString, markPriceString);
      }
    } else {
      // inverse
      if (side === 'long') {
        priceDiff = _Precise.Precise.stringSub(_Precise.Precise.stringDiv('1', entryPriceString), _Precise.Precise.stringDiv('1', markPriceString));
      } else {
        priceDiff = _Precise.Precise.stringSub(_Precise.Precise.stringDiv('1', markPriceString), _Precise.Precise.stringDiv('1', entryPriceString));
      }
    }
    const contractsString = this.safeString(position, 'size');
    const unrealizedPnl = _Precise.Precise.stringMul(_Precise.Precise.stringMul(priceDiff, contractsString), contractSizeString);
    const percentage = _Precise.Precise.stringMul(_Precise.Precise.stringDiv(unrealizedPnl, initialMarginString), '100');
    const marginRatio = _Precise.Precise.stringDiv(maintenanceMarginString, collateral);
    return {
      'info': position,
      'id': id,
      'symbol': symbol,
      'contracts': this.parseNumber(contracts),
      'contractSize': contractSize,
      'unrealizedPnl': this.parseNumber(unrealizedPnl),
      'leverage': leverage,
      'liquidationPrice': liquidationPrice,
      'collateral': this.parseNumber(collateral),
      'notional': this.parseNumber(notionalString),
      'markPrice': this.parseNumber(markPriceString),
      'entryPrice': this.parseNumber(entryPriceString),
      'timestamp': undefined,
      'initialMargin': this.parseNumber(initialMarginString),
      'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),
      'maintenanceMargin': this.parseNumber(maintenanceMarginString),
      'maintenanceMarginPercentage': this.parseNumber(maintenanceMarginPercentageString),
      'marginRatio': this.parseNumber(marginRatio),
      'datetime': undefined,
      'marginMode': marginMode,
      'side': side,
      'hedged': hedged,
      'positionMode': positionMode,
      'percentage': this.parseNumber(percentage)
    };
  }
  async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchFundingHistory
     * @description fetch the history of funding payments paid and received on this account
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#futureDataFundingFeesHist
     * @param {string} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch funding history for
     * @param {int|undefined} limit the maximum number of funding history structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
     */
    await this.loadMarkets();
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchFundingHistory() requires a symbol argument');
    }
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
      // 'limit': 20, // Page size default 20, max 200
      // 'offset': 0, // Page start default 0
    };

    if (limit > 200) {
      throw new _errors.BadRequest(this.id + ' fetchFundingHistory() limit argument cannot exceed 200');
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    let method = 'privateGetApiDataFuturesFundingFees';
    if (market['settle'] === 'USDT') {
      method = 'privateGetApiDataGFuturesFundingFees';
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code": 0,
    //         "msg": "OK",
    //         "data": {
    //             "rows": [
    //                 {
    //                     "symbol": "BTCUSD",
    //                     "currency": "BTC",
    //                     "execQty": 18,
    //                     "side": "Buy",
    //                     "execPriceEp": 360086455,
    //                     "execValueEv": 49987,
    //                     "fundingRateEr": 10000,
    //                     "feeRateEr": 10000,
    //                     "execFeeEv": 5,
    //                     "createTime": 1651881600000
    //                 }
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    const rows = this.safeValue(data, 'rows', []);
    const result = [];
    for (let i = 0; i < rows.length; i++) {
      const entry = rows[i];
      const timestamp = this.safeInteger(entry, 'createTime');
      result.push({
        'info': entry,
        'symbol': this.safeString(entry, 'symbol'),
        'code': this.safeCurrencyCode(this.safeString(entry, 'currency')),
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp),
        'id': undefined,
        'amount': this.fromEv(this.safeString(entry, 'execFeeEv'), market)
      });
    }
    return result;
  }
  async fetchFundingRate(symbol, params = {}) {
    /**
     * @method
     * @name phemex#fetchFundingRate
     * @description fetch the current funding rate
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['swap']) {
      throw new _errors.BadSymbol(this.id + ' fetchFundingRate() supports swap contracts only');
    }
    const request = {
      'symbol': market['id']
    };
    let response = {};
    if (!market['linear']) {
      response = await this.v1GetMdTicker24hr(this.extend(request, params));
    } else {
      response = await this.v2GetMdV2Ticker24hr(this.extend(request, params));
    }
    //
    //     {
    //         "error": null,
    //         "id": 0,
    //         "result": {
    //             "askEp": 2332500,
    //             "bidEp": 2331000,
    //             "fundingRateEr": 10000,
    //             "highEp": 2380000,
    //             "indexEp": 2329057,
    //             "lastEp": 2331500,
    //             "lowEp": 2274000,
    //             "markEp": 2329232,
    //             "openEp": 2337500,
    //             "openInterest": 1298050,
    //             "predFundingRateEr": 19921,
    //             "symbol": "ETHUSD",
    //             "timestamp": 1592474241582701416,
    //             "turnoverEv": 47228362330,
    //             "volume": 4053863
    //         }
    //     }
    //
    const result = this.safeValue(response, 'result', {});
    return this.parseFundingRate(result, market);
  }
  parseFundingRate(contract, market = undefined) {
    //
    //     {
    //         "askEp": 2332500,
    //         "bidEp": 2331000,
    //         "fundingRateEr": 10000,
    //         "highEp": 2380000,
    //         "indexEp": 2329057,
    //         "lastEp": 2331500,
    //         "lowEp": 2274000,
    //         "markEp": 2329232,
    //         "openEp": 2337500,
    //         "openInterest": 1298050,
    //         "predFundingRateEr": 19921,
    //         "symbol": "ETHUSD",
    //         "timestamp": 1592474241582701416,
    //         "turnoverEv": 47228362330,
    //         "volume": 4053863
    //     }
    //
    // linear swap v2
    //
    //     {
    //         "closeRp":"16820.5",
    //         "fundingRateRr":"0.0001",
    //         "highRp":"16962.1",
    //         "indexPriceRp":"16830.15651565",
    //         "lowRp":"16785",
    //         "markPriceRp":"16830.97534951",
    //         "openInterestRv":"1323.596",
    //         "openRp":"16851.7",
    //         "predFundingRateRr":"0.0001",
    //         "symbol":"BTCUSDT",
    //         "timestamp":"1672142789065593096",
    //         "turnoverRv":"124835296.0538",
    //         "volumeRq":"7406.95"
    //     }
    //
    const marketId = this.safeString(contract, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const timestamp = this.safeIntegerProduct(contract, 'timestamp', 0.000001);
    return {
      'info': contract,
      'symbol': symbol,
      'markPrice': this.fromEp(this.safeString2(contract, 'markEp', 'markPriceRp'), market),
      'indexPrice': this.fromEp(this.safeString2(contract, 'indexEp', 'indexPriceRp'), market),
      'interestRate': undefined,
      'estimatedSettlePrice': undefined,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'fundingRate': this.fromEr(this.safeString(contract, 'fundingRateEr'), market),
      'fundingTimestamp': undefined,
      'fundingDatetime': undefined,
      'nextFundingRate': this.fromEr(this.safeString2(contract, 'predFundingRateEr', 'predFundingRateRr'), market),
      'nextFundingTimestamp': undefined,
      'nextFundingDatetime': undefined,
      'previousFundingRate': undefined,
      'previousFundingTimestamp': undefined,
      'previousFundingDatetime': undefined
    };
  }
  async setMargin(symbol, amount, params = {}) {
    /**
     * @method
     * @name phemex#setMargin
     * @description Either adds or reduces margin in an isolated position in order to set the margin to a specific value
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#assign-position-balance-in-isolated-marign-mode
     * @param {string} symbol unified market symbol of the market to set margin in
     * @param {float} amount the amount to set the margin to
     * @param {object} params parameters specific to the phemex api endpoint
     * @returns {object} A [margin structure]{@link https://docs.ccxt.com/#/?id=add-margin-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'posBalanceEv': this.toEv(amount, market)
    };
    const response = await this.privatePostPositionsAssign(this.extend(request, params));
    //
    //     {
    //         "code": 0,
    //         "msg": "",
    //         "data": "OK"
    //     }
    //
    return this.extend(this.parseMarginModification(response, market), {
      'amount': amount
    });
  }
  parseMarginStatus(status) {
    const statuses = {
      '0': 'ok'
    };
    return this.safeString(statuses, status, status);
  }
  parseMarginModification(data, market = undefined) {
    //
    //     {
    //         "code": 0,
    //         "msg": "",
    //         "data": "OK"
    //     }
    //
    market = this.safeMarket(undefined, market);
    const inverse = this.safeValue(market, 'inverse');
    const codeCurrency = inverse ? 'base' : 'quote';
    return {
      'info': data,
      'type': 'set',
      'amount': undefined,
      'total': undefined,
      'code': market[codeCurrency],
      'symbol': this.safeSymbol(undefined, market),
      'status': this.parseMarginStatus(this.safeString(data, 'code'))
    };
  }
  async setMarginMode(marginMode, symbol = undefined, params = {}) {
    /**
     * @method
     * @name phemex#setMarginMode
     * @description set margin mode to 'cross' or 'isolated'
     * @param {string} marginMode 'cross' or 'isolated'
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} response from the exchange
     */
    this.checkRequiredSymbol('setMarginMode', symbol);
    await this.loadMarkets();
    const market = this.market(symbol);
    if (!market['swap']) {
      throw new _errors.BadSymbol(this.id + ' setMarginMode() supports swap contracts only');
    }
    marginMode = marginMode.toLowerCase();
    if (marginMode !== 'isolated' && marginMode !== 'cross') {
      throw new _errors.BadRequest(this.id + ' setMarginMode() marginMode argument should be isolated or cross');
    }
    let leverage = this.safeInteger(params, 'leverage');
    if (marginMode === 'cross') {
      leverage = 0;
    }
    if (leverage === undefined) {
      const limits = this.safeValue(market, 'limits', {});
      const leverageLimits = this.safeValue(limits, 'leverage', {});
      leverage = this.safeInteger(leverageLimits, 'max');
    }
    let method = 'privatePutPositionsLeverage';
    const request = {
      'symbol': market['id']
    };
    if (market['settle'] === 'USDT') {
      const positionMode = this.safeStringLower(params, 'positionMode');
      if (positionMode === 'hedged' || positionMode === 'hedge') {
        let buyLeverage = this.safeInteger(params, 'buyLeverage', leverage);
        let sellLeverage = this.safeInteger(params, 'sellLeverage', leverage);
        if (marginMode === 'cross') {
          buyLeverage = 0;
          sellLeverage = 0;
        }
        request['longLeverageRr'] = buyLeverage;
        request['shortLeverageRr'] = sellLeverage;
      } else {
        request['leverageRr'] = leverage;
      }
      method = 'privatePutGPositionsLeverage';
    } else {
      request['leverage'] = leverage;
    }
    params = this.omit(params, ['leverage', 'buyLeverage', 'sellLeverage', 'positionMode']);
    return await this[method](this.extend(request, params));
  }
  async setPositionMode(hedged, symbol = undefined, params = {}) {
    /**
     * @method
     * @name phemex#setPositionMode
     * @description set hedged to true or false for a market
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#switch-position-mode-synchronously
     * @param {bool} hedged set to true to use dualSidePosition
     * @param {string|undefined} symbol not used by binance setPositionMode ()
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} response from the exchange
     */
    this.checkRequiredArgument('setPositionMode', symbol, 'symbol');
    const market = this.market(symbol);
    if (market['settle'] !== 'USDT') {
      throw new _errors.BadSymbol(this.id + ' setPositionMode() supports USDT settled markets only');
    }
    const request = {
      'symbol': market['id']
    };
    if (hedged) {
      request['targetPosMode'] = 'Hedged';
    } else {
      request['targetPosMode'] = 'OneWay';
    }
    return await this.privatePutGPositionsSwitchPosModeSync(this.extend(request, params));
  }
  async fetchLeverageTiers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchLeverageTiers
     * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
     * @param {[string]|undefined} symbols list of unified market symbols
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} a dictionary of [leverage tiers structures]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}, indexed by market symbols
     */
    await this.loadMarkets();
    const response = await this.publicGetCfgV2Products(params);
    //
    //     {
    //         "code":0,
    //         "msg":"OK",
    //         "data":{
    //             "ratioScale":8,
    //             "currencies":[
    //                 {"currency":"BTC","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"Bitcoin"},
    //                 {"currency":"USD","valueScale":4,"minValueEv":1,"maxValueEv":500000000000000,"name":"USD"},
    //                 {"currency":"USDT","valueScale":8,"minValueEv":1,"maxValueEv":5000000000000000000,"name":"TetherUS"},
    //             ],
    //             "products":[
    //                 {
    //                     "symbol":"BTCUSD",
    //                     "displaySymbol":"BTC / USD",
    //                     "indexSymbol":".BTC",
    //                     "markSymbol":".MBTC",
    //                     "fundingRateSymbol":".BTCFR",
    //                     "fundingRate8hSymbol":".BTCFR8H",
    //                     "contractUnderlyingAssets":"USD",
    //                     "settleCurrency":"BTC",
    //                     "quoteCurrency":"USD",
    //                     "contractSize":1.0,
    //                     "lotSize":1,
    //                     "tickSize":0.5,
    //                     "priceScale":4,
    //                     "ratioScale":8,
    //                     "pricePrecision":1,
    //                     "minPriceEp":5000,
    //                     "maxPriceEp":10000000000,
    //                     "maxOrderQty":1000000,
    //                     "type":"Perpetual"
    //                 },
    //                 {
    //                     "symbol":"sBTCUSDT",
    //                     "displaySymbol":"BTC / USDT",
    //                     "quoteCurrency":"USDT",
    //                     "pricePrecision":2,
    //                     "type":"Spot",
    //                     "baseCurrency":"BTC",
    //                     "baseTickSize":"0.000001 BTC",
    //                     "baseTickSizeEv":100,
    //                     "quoteTickSize":"0.01 USDT",
    //                     "quoteTickSizeEv":1000000,
    //                     "minOrderValue":"10 USDT",
    //                     "minOrderValueEv":1000000000,
    //                     "maxBaseOrderSize":"1000 BTC",
    //                     "maxBaseOrderSizeEv":100000000000,
    //                     "maxOrderValue":"5,000,000 USDT",
    //                     "maxOrderValueEv":500000000000000,
    //                     "defaultTakerFee":"0.001",
    //                     "defaultTakerFeeEr":100000,
    //                     "defaultMakerFee":"0.001",
    //                     "defaultMakerFeeEr":100000,
    //                     "baseQtyPrecision":6,
    //                     "quoteQtyPrecision":2
    //                 },
    //             ],
    //             "riskLimits":[
    //                 {
    //                     "symbol":"BTCUSD",
    //                     "steps":"50",
    //                     "riskLimits":[
    //                         {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
    //                         {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
    //                         {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
    //                     ]
    //                 },
    //             ],
    //             "leverages":[
    //                 {"initialMargin":"1.0%","initialMarginEr":1000000,"options":[1,2,3,5,10,25,50,100]},
    //                 {"initialMargin":"1.5%","initialMarginEr":1500000,"options":[1,2,3,5,10,25,50,66]},
    //                 {"initialMargin":"2.0%","initialMarginEr":2000000,"options":[1,2,3,5,10,25,33,50]},
    //             ]
    //         }
    //     }
    //
    //
    const data = this.safeValue(response, 'data', {});
    const riskLimits = this.safeValue(data, 'riskLimits');
    return this.parseLeverageTiers(riskLimits, symbols, 'symbol');
  }
  parseMarketLeverageTiers(info, market = undefined) {
    /**
     * @param {object} info Exchange market response for 1 market
     * @param {object} market CCXT market
     */
    //
    //     {
    //         "symbol":"BTCUSD",
    //         "steps":"50",
    //         "riskLimits":[
    //             {"limit":100,"initialMargin":"1.0%","initialMarginEr":1000000,"maintenanceMargin":"0.5%","maintenanceMarginEr":500000},
    //             {"limit":150,"initialMargin":"1.5%","initialMarginEr":1500000,"maintenanceMargin":"1.0%","maintenanceMarginEr":1000000},
    //             {"limit":200,"initialMargin":"2.0%","initialMarginEr":2000000,"maintenanceMargin":"1.5%","maintenanceMarginEr":1500000},
    //         ]
    //     },
    //
    market = this.safeMarket(undefined, market);
    const riskLimits = market['info']['riskLimits'];
    const tiers = [];
    let minNotional = 0;
    for (let i = 0; i < riskLimits.length; i++) {
      const tier = riskLimits[i];
      const maxNotional = this.safeInteger(tier, 'limit');
      tiers.push({
        'tier': this.sum(i, 1),
        'currency': market['settle'],
        'minNotional': minNotional,
        'maxNotional': maxNotional,
        'maintenanceMarginRate': this.safeString(tier, 'maintenanceMargin'),
        'maxLeverage': undefined,
        'info': tier
      });
      minNotional = maxNotional;
    }
    return tiers;
  }
  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    const query = this.omit(params, this.extractParams(path));
    const requestPath = '/' + this.implodeParams(path, params);
    let url = requestPath;
    let queryString = '';
    if (method === 'GET' || method === 'DELETE' || method === 'PUT' || url === '/positions/assign') {
      if (Object.keys(query).length) {
        queryString = this.urlencodeWithArrayRepeat(query);
        url += '?' + queryString;
      }
    }
    if (api === 'private') {
      this.checkRequiredCredentials();
      const timestamp = this.seconds();
      const xPhemexRequestExpiry = this.safeInteger(this.options, 'x-phemex-request-expiry', 60);
      const expiry = this.sum(timestamp, xPhemexRequestExpiry);
      const expiryString = expiry.toString();
      headers = {
        'x-phemex-access-token': this.apiKey,
        'x-phemex-request-expiry': expiryString
      };
      let payload = '';
      if (method === 'POST') {
        payload = this.json(params);
        body = payload;
        headers['Content-Type'] = 'application/json';
      }
      const auth = requestPath + queryString + expiryString + payload;
      headers['x-phemex-request-signature'] = this.hmac(this.encode(auth), this.encode(this.secret));
    }
    url = this.implodeHostname(this.urls['api'][api]) + url;
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    /**
     * @method
     * @name phemex#setLeverage
     * @description set the level of leverage for a market
     * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#set-leverage
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} response from the exchange
     */
    // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
    // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' setLeverage() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    let method = 'privatePutPositionsLeverage';
    const buyLeverage = this.safeFloat(params, 'buyLeverage', leverage);
    const sellLeverage = this.safeFloat(params, 'sellLeverage', leverage);
    leverage = buyLeverage || leverage;
    const marginMode = this.safeStringLower(params, 'marginMode', 'cross');
    if (market['settle'] === 'USDT') {
      method = 'privatePutGPositionsLeverage';
      const positionMode = this.safeStringLower(params, 'positionMode');
      if (positionMode === 'hedged' || positionMode === 'hedge') {
        if (buyLeverage === undefined || sellLeverage === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' setLeverage() in hedge mode requires both buyLeverage and sellLeverage arguments');
        }
        if (buyLeverage < 1 || buyLeverage > 100) {
          throw new _errors.BadRequest(this.id + ' setLeverage() buyLeverage should be between 1 and 100');
        }
        if (sellLeverage < 1 || sellLeverage > 100) {
          throw new _errors.BadRequest(this.id + ' setLeverage() sellLeverage should be between 1 and 100');
        }
        if (marginMode === 'cross') {
          request['longLeverageRr'] = -1 * buyLeverage;
          request['shortLeverageRr'] = -1 * sellLeverage;
        } else {
          request['longLeverageRr'] = buyLeverage;
          request['shortLeverageRr'] = sellLeverage;
        }
      } else {
        if (leverage < 1 || leverage > 100) {
          throw new _errors.BadRequest(this.id + ' setLeverage() leverage should be between 1 and 100');
        }
        if (marginMode === 'cross') {
          request['leverageRr'] = -1 * leverage;
        } else {
          request['leverageRr'] = leverage;
        }
      }
    } else {
      const effectiveLeverage = leverage || buyLeverage;
      if (effectiveLeverage < 1 || effectiveLeverage > 100) {
        throw new _errors.BadRequest(this.id + ' setLeverage() leverage should be between 1 and 100');
      }
      if (marginMode === 'cross') {
        request['leverage'] = -1 * effectiveLeverage;
      } else {
        request['leverage'] = effectiveLeverage;
      }
    }
    params = this.omit(params, 'leverage', 'buyLeverage', 'sellLeverage', 'marginMode', 'positionMode');
    return await this[method](this.extend(request, params));
  }
  async transfer(code, amount, fromAccount, toAccount, params = {}) {
    /**
     * @method
     * @name phemex#transfer
     * @description transfer currency internally between wallets on the same account
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount account to transfer from
     * @param {string} toAccount account to transfer to
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @param {string|undefined} params.bizType for transferring between main and sub-acounts either 'SPOT' or 'PERPETUAL' default is 'SPOT'
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const accountsByType = this.safeValue(this.options, 'accountsByType', {});
    const fromId = this.safeString(accountsByType, fromAccount, fromAccount);
    const toId = this.safeString(accountsByType, toAccount, toAccount);
    const scaledAmount = this.toEv(amount, currency);
    let direction = undefined;
    let transfer = undefined;
    if (fromId === 'spot' && toId === 'future') {
      direction = 2;
    } else if (fromId === 'future' && toId === 'spot') {
      direction = 1;
    }
    if (direction !== undefined) {
      const request = {
        'currency': currency['id'],
        'moveOp': direction,
        'amountEv': scaledAmount
      };
      const response = await this.privatePostAssetsTransfer(this.extend(request, params));
      //
      //     {
      //         code: '0',
      //         msg: 'OK',
      //         data: {
      //             linkKey: '8564eba4-c9ec-49d6-9b8c-2ec5001a0fb9',
      //             userId: '4018340',
      //             currency: 'USD',
      //             amountEv: '10',
      //             side: '2',
      //             status: '10'
      //         }
      //     }
      //
      const data = this.safeValue(response, 'data', {});
      transfer = this.parseTransfer(data, currency);
    } else {
      // sub account transfer
      const request = {
        'fromUserId': fromId,
        'toUserId': toId,
        'amountEv': scaledAmount,
        'currency': currency['id'],
        'bizType': this.safeString(params, 'bizType', 'SPOT')
      };
      const response = await this.privatePostAssetsUniversalTransfer(this.extend(request, params));
      //
      //     {
      //         code: '0',
      //         msg: 'OK',
      //         data: 'API-923db826-aaaa-aaaa-aaaa-4d98c3a7c9fd'
      //     }
      //
      transfer = this.parseTransfer(response);
    }
    const transferOptions = this.safeValue(this.options, 'transfer', {});
    const fillResponseFromRequest = this.safeValue(transferOptions, 'fillResponseFromRequest', true);
    if (fillResponseFromRequest) {
      if (transfer['fromAccount'] === undefined) {
        transfer['fromAccount'] = fromAccount;
      }
      if (transfer['toAccount'] === undefined) {
        transfer['toAccount'] = toAccount;
      }
      if (transfer['amount'] === undefined) {
        transfer['amount'] = amount;
      }
      if (transfer['currency'] === undefined) {
        transfer['currency'] = code;
      }
    }
    return transfer;
  }
  async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#fetchTransfers
     * @description fetch a history of internal transfers made on an account
     * @param {string|undefined} code unified currency code of the currency transferred
     * @param {int|undefined} since the earliest time in ms to fetch transfers for
     * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    if (code === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchTransfers() requires a code argument');
    }
    const currency = this.currency(code);
    const request = {
      'currency': currency['id']
    };
    if (since !== undefined) {
      request['start'] = since;
    }
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.privateGetAssetsTransfer(this.extend(request, params));
    //
    //     {
    //         "code": 0,
    //         "msg": "OK",
    //         "data": {
    //             "rows": [
    //                 {
    //                     "linkKey": "87c071a3-8628-4ac2-aca1-6ce0d1fad66c",
    //                     "userId": 4148428,
    //                     "currency": "BTC",
    //                     "amountEv": 67932,
    //                     "side": 2,
    //                     "status": 10,
    //                     "createTime": 1652832467000,
    //                     "bizType": 10
    //                 }
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    const transfers = this.safeValue(data, 'rows', []);
    return this.parseTransfers(transfers, currency, since, limit);
  }
  parseTransfer(transfer, currency = undefined) {
    //
    // transfer
    //
    //     {
    //         linkKey: '8564eba4-c9ec-49d6-9b8c-2ec5001a0fb9',
    //         userId: '4018340',
    //         currency: 'USD',
    //         amountEv: '10',
    //         side: '2',
    //         status: '10'
    //     }
    //
    // fetchTransfers
    //
    //     {
    //         "linkKey": "87c071a3-8628-4ac2-aca1-6ce0d1fad66c",
    //         "userId": 4148428,
    //         "currency": "BTC",
    //         "amountEv": 67932,
    //         "side": 2,
    //         "status": 10,
    //         "createTime": 1652832467000,
    //         "bizType": 10
    //     }
    //
    const id = this.safeString(transfer, 'linkKey');
    const status = this.safeString(transfer, 'status');
    const amountEv = this.safeString(transfer, 'amountEv');
    const amountTransfered = this.fromEv(amountEv, currency);
    const currencyId = this.safeString(transfer, 'currency');
    const code = this.safeCurrencyCode(currencyId, currency);
    const side = this.safeInteger(transfer, 'side');
    let fromId = undefined;
    let toId = undefined;
    if (side === 1) {
      fromId = 'swap';
      toId = 'spot';
    } else if (side === 2) {
      fromId = 'spot';
      toId = 'swap';
    }
    const timestamp = this.safeInteger(transfer, 'createTime');
    return {
      'info': transfer,
      'id': id,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'currency': code,
      'amount': amountTransfered,
      'fromAccount': fromId,
      'toAccount': toId,
      'status': this.parseTransferStatus(status)
    };
  }
  parseTransferStatus(status) {
    const statuses = {
      '3': 'rejected',
      '6': 'canceled',
      '10': 'ok',
      '11': 'failed' // 'Failed',
    };

    return this.safeString(statuses, status, status);
  }
  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (response === undefined) {
      return; // fallback to default error handler
    }
    //
    //     {"code":30018,"msg":"phemex.data.size.uplimt","data":null}
    //     {"code":412,"msg":"Missing parameter - resolution","data":null}
    //     {"code":412,"msg":"Missing parameter - to","data":null}
    //     {"error":{"code":6001,"message":"invalid argument"},"id":null,"result":null}
    //
    const error = this.safeValue(response, 'error', response);
    const errorCode = this.safeString(error, 'code');
    const message = this.safeString(error, 'msg');
    if (errorCode !== undefined && errorCode !== '0') {
      const feedback = this.id + ' ' + body;
      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
      throw new _errors.ExchangeError(feedback); // unknown message
    }
  }
}
exports.default = phemex;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _binance = _interopRequireDefault(require("../binance.js"));
var _Precise = require("../base/Precise.js");
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// ----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
class binance extends _binance.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': true,
        'watchMyTrades': true,
        'watchOHLCV': true,
        'watchOrderBook': true,
        'watchOrders': true,
        'watchTicker': true,
        'watchTickers': true,
        'watchTrades': true
      },
      'urls': {
        'test': {
          'ws': {
            'spot': 'wss://testnet.binance.vision/ws',
            'margin': 'wss://testnet.binance.vision/ws',
            'future': 'wss://stream.binancefuture.com/ws',
            'delivery': 'wss://dstream.binancefuture.com/ws'
          }
        },
        'api': {
          'ws': {
            'spot': 'wss://stream.binance.com:9443/ws',
            'margin': 'wss://stream.binance.com:9443/ws',
            'future': 'wss://fstream.binance.com/ws',
            'delivery': 'wss://dstream.binance.com/ws'
          }
        }
      },
      'streaming': {
        'keepAlive': 180000
      },
      'options': {
        'streamLimits': {
          'spot': 50,
          'margin': 50,
          'future': 50,
          'delivery': 50 // max 200
        },

        'streamBySubscriptionsHash': {},
        'streamIndex': -1,
        // get updates every 1000ms or 100ms
        // or every 0ms in real-time for futures
        'watchOrderBookRate': 100,
        'tradesLimit': 1000,
        'ordersLimit': 1000,
        'OHLCVLimit': 1000,
        'requestId': {},
        'watchOrderBookLimit': 1000,
        'watchTrades': {
          'name': 'trade' // 'trade' or 'aggTrade'
        },

        'watchTicker': {
          'name': 'ticker' // ticker = 1000ms L1+OHLCV, bookTicker = real-time L1
        },

        'watchTickers': {
          'name': 'ticker' // ticker or miniTicker or bookTicker
        },

        'watchOHLCV': {
          'name': 'kline' // or indexPriceKline or markPriceKline (coin-m futures)
        },

        'watchBalance': {
          'fetchBalanceSnapshot': false,
          'awaitBalanceSnapshot': true // whether to wait for the balance snapshot before providing updates
        },

        'wallet': 'wb',
        'listenKeyRefreshRate': 1200000,
        'ws': {
          'cost': 5
        }
      }
    });
  }
  requestId(url) {
    const options = this.safeValue(this.options, 'requestId', {});
    const previousValue = this.safeInteger(options, url, 0);
    const newValue = this.sum(previousValue, 1);
    this.options['requestId'][url] = newValue;
    return newValue;
  }
  stream(type, subscriptionHash) {
    const streamBySubscriptionsHash = this.safeValue(this.options, 'streamBySubscriptionsHash', {});
    let stream = this.safeString(streamBySubscriptionsHash, subscriptionHash);
    if (stream === undefined) {
      let streamIndex = this.safeInteger(this.options, 'streamIndex', -1);
      const streamLimits = this.safeValue(this.options, 'streamLimits');
      const streamLimit = this.safeInteger(streamLimits, type);
      streamIndex = streamIndex + 1;
      const normalizedIndex = streamIndex % streamLimit;
      this.options['streamIndex'] = streamIndex;
      stream = this.numberToString(normalizedIndex);
      this.options['streamBySubscriptionsHash'][subscriptionHash] = stream;
    }
    return stream;
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    //
    // todo add support for <levels>-snapshots (depth)
    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#partial-book-depth-streams        // <symbol>@depth<levels>@100ms or <symbol>@depth<levels> (1000ms)
    // valid <levels> are 5, 10, or 20
    //
    // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000
    if (limit !== undefined) {
      if (limit !== 5 && limit !== 10 && limit !== 20 && limit !== 50 && limit !== 100 && limit !== 500 && limit !== 1000) {
        throw new _errors.ExchangeError(this.id + ' watchOrderBook limit argument must be undefined, 5, 10, 20, 50, 100, 500 or 1000');
      }
    }
    //
    await this.loadMarkets();
    const market = this.market(symbol);
    let type = market['type'];
    if (market['contract']) {
      type = market['linear'] ? 'future' : 'delivery';
    }
    //
    // notice the differences between trading futures and spot trading
    // the algorithms use different urls in step 1
    // delta caching and merging also differs in steps 4, 5, 6
    //
    // spot/margin
    // https://binance-docs.github.io/apidocs/spot/en/#how-to-manage-a-local-order-book-correctly
    //
    // 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
    // 2. Buffer the events you receive from the stream.
    // 3. Get a depth snapshot from https://www.binance.com/api/v1/depth?symbol=BNBBTC&limit=1000 .
    // 4. Drop any event where u is <= lastUpdateId in the snapshot.
    // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1.
    // 6. While listening to the stream, each new event's U should be equal to the previous event's u+1.
    // 7. The data in each event is the absolute quantity for a price level.
    // 8. If the quantity is 0, remove the price level.
    // 9. Receiving an event that removes a price level that is not in your local order book can happen and is normal.
    //
    // futures
    // https://binance-docs.github.io/apidocs/futures/en/#how-to-manage-a-local-order-book-correctly
    //
    // 1. Open a stream to wss://fstream.binance.com/stream?streams=btcusdt@depth.
    // 2. Buffer the events you receive from the stream. For same price, latest received update covers the previous one.
    // 3. Get a depth snapshot from https://fapi.binance.com/fapi/v1/depth?symbol=BTCUSDT&limit=1000 .
    // 4. Drop any event where u is < lastUpdateId in the snapshot.
    // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
    // 6. While listening to the stream, each new event's pu should be equal to the previous event's u, otherwise initialize the process from step 3.
    // 7. The data in each event is the absolute quantity for a price level.
    // 8. If the quantity is 0, remove the price level.
    // 9. Receiving an event that removes a price level that is not in your local order book can happen and is normal.
    //
    const name = 'depth';
    const messageHash = market['lowercaseId'] + '@' + name;
    const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
    const requestId = this.requestId(url);
    const watchOrderBookRate = this.safeString(this.options, 'watchOrderBookRate', '100');
    const request = {
      'method': 'SUBSCRIBE',
      'params': [messageHash + '@' + watchOrderBookRate + 'ms'],
      'id': requestId
    };
    const subscription = {
      'id': requestId.toString(),
      'messageHash': messageHash,
      'name': name,
      'symbol': market['symbol'],
      'method': this.handleOrderBookSubscription,
      'limit': limit,
      'type': type,
      'params': params
    };
    const message = this.extend(request, params);
    // 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
    const orderbook = await this.watch(url, messageHash, message, messageHash, subscription);
    return orderbook.limit();
  }
  async fetchOrderBookSnapshot(client, message, subscription) {
    const messageHash = this.safeString(subscription, 'messageHash');
    const symbol = this.safeString(subscription, 'symbol');
    try {
      const defaultLimit = this.safeInteger(this.options, 'watchOrderBookLimit', 1000);
      const type = this.safeValue(subscription, 'type');
      const limit = this.safeInteger(subscription, 'limit', defaultLimit);
      const params = this.safeValue(subscription, 'params');
      // 3. Get a depth snapshot from https://www.binance.com/api/v1/depth?symbol=BNBBTC&limit=1000 .
      // todo: this is a synch blocking call in ccxt.php - make it async
      // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000
      const snapshot = await this.fetchOrderBook(symbol, limit, params);
      const orderbook = this.safeValue(this.orderbooks, symbol);
      if (orderbook === undefined) {
        // if the orderbook is dropped before the snapshot is received
        return;
      }
      orderbook.reset(snapshot);
      // unroll the accumulated deltas
      const messages = orderbook.cache;
      for (let i = 0; i < messages.length; i++) {
        const message = messages[i];
        const U = this.safeInteger(message, 'U');
        const u = this.safeInteger(message, 'u');
        const pu = this.safeInteger(message, 'pu');
        if (type === 'future') {
          // 4. Drop any event where u is < lastUpdateId in the snapshot
          if (u < orderbook['nonce']) {
            continue;
          }
          // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
          if (U <= orderbook['nonce'] && u >= orderbook['nonce'] || pu === orderbook['nonce']) {
            this.handleOrderBookMessage(client, message, orderbook);
          }
        } else {
          // 4. Drop any event where u is <= lastUpdateId in the snapshot
          if (u <= orderbook['nonce']) {
            continue;
          }
          // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1
          if (U - 1 <= orderbook['nonce'] && u - 1 >= orderbook['nonce']) {
            this.handleOrderBookMessage(client, message, orderbook);
          }
        }
      }
      this.orderbooks[symbol] = orderbook;
      client.resolve(orderbook, messageHash);
    } catch (e) {
      delete client.subscriptions[messageHash];
      client.reject(e, messageHash);
    }
  }
  handleDelta(bookside, delta) {
    const price = this.safeFloat(delta, 0);
    const amount = this.safeFloat(delta, 1);
    bookside.store(price, amount);
  }
  handleDeltas(bookside, deltas) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(bookside, deltas[i]);
    }
  }
  handleOrderBookMessage(client, message, orderbook) {
    const u = this.safeInteger(message, 'u');
    this.handleDeltas(orderbook['asks'], this.safeValue(message, 'a', []));
    this.handleDeltas(orderbook['bids'], this.safeValue(message, 'b', []));
    orderbook['nonce'] = u;
    const timestamp = this.safeInteger(message, 'E');
    orderbook['timestamp'] = timestamp;
    orderbook['datetime'] = this.iso8601(timestamp);
    return orderbook;
  }
  handleOrderBook(client, message) {
    //
    // initial snapshot is fetched with ccxt's fetchOrderBook
    // the feed does not include a snapshot, just the deltas
    //
    //     {
    //         "e": "depthUpdate", // Event type
    //         "E": 1577554482280, // Event time
    //         "s": "BNBBTC", // Symbol
    //         "U": 157, // First update ID in event
    //         "u": 160, // Final update ID in event
    //         "b": [ // bids
    //             [ "0.0024", "10" ], // price, size
    //         ],
    //         "a": [ // asks
    //             [ "0.0026", "100" ], // price, size
    //         ]
    //     }
    //
    const index = client.url.indexOf('/stream');
    const marketType = index >= 0 ? 'spot' : 'contract';
    const marketId = this.safeString(message, 's');
    const market = this.safeMarket(marketId, undefined, undefined, marketType);
    const symbol = market['symbol'];
    const name = 'depth';
    const messageHash = market['lowercaseId'] + '@' + name;
    const orderbook = this.safeValue(this.orderbooks, symbol);
    if (orderbook === undefined) {
      //
      // https://github.com/ccxt/ccxt/issues/6672
      //
      // Sometimes Binance sends the first delta before the subscription
      // confirmation arrives. At that point the orderbook is not
      // initialized yet and the snapshot has not been requested yet
      // therefore it is safe to drop these premature messages.
      //
      return;
    }
    const nonce = this.safeInteger(orderbook, 'nonce');
    if (nonce === undefined) {
      // 2. Buffer the events you receive from the stream.
      orderbook.cache.push(message);
    } else {
      try {
        const U = this.safeInteger(message, 'U');
        const u = this.safeInteger(message, 'u');
        const pu = this.safeInteger(message, 'pu');
        if (pu === undefined) {
          // spot
          // 4. Drop any event where u is <= lastUpdateId in the snapshot
          if (u > orderbook['nonce']) {
            const timestamp = this.safeInteger(orderbook, 'timestamp');
            let conditional = undefined;
            if (timestamp === undefined) {
              // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1
              conditional = U - 1 <= orderbook['nonce'] && u - 1 >= orderbook['nonce'];
            } else {
              // 6. While listening to the stream, each new event's U should be equal to the previous event's u+1.
              conditional = U - 1 === orderbook['nonce'];
            }
            if (conditional) {
              this.handleOrderBookMessage(client, message, orderbook);
              if (nonce < orderbook['nonce']) {
                client.resolve(orderbook, messageHash);
              }
            } else {
              // todo: client.reject from handleOrderBookMessage properly
              throw new _errors.ExchangeError(this.id + ' handleOrderBook received an out-of-order nonce');
            }
          }
        } else {
          // future
          // 4. Drop any event where u is < lastUpdateId in the snapshot
          if (u >= orderbook['nonce']) {
            // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
            // 6. While listening to the stream, each new event's pu should be equal to the previous event's u, otherwise initialize the process from step 3
            if (U <= orderbook['nonce'] || pu === orderbook['nonce']) {
              this.handleOrderBookMessage(client, message, orderbook);
              if (nonce <= orderbook['nonce']) {
                client.resolve(orderbook, messageHash);
              }
            } else {
              // todo: client.reject from handleOrderBookMessage properly
              throw new _errors.ExchangeError(this.id + ' handleOrderBook received an out-of-order nonce');
            }
          }
        }
      } catch (e) {
        delete this.orderbooks[symbol];
        delete client.subscriptions[messageHash];
        client.reject(e, messageHash);
      }
    }
  }
  handleOrderBookSubscription(client, message, subscription) {
    const defaultLimit = this.safeInteger(this.options, 'watchOrderBookLimit', 1000);
    const symbol = this.safeString(subscription, 'symbol');
    const limit = this.safeInteger(subscription, 'limit', defaultLimit);
    if (symbol in this.orderbooks) {
      delete this.orderbooks[symbol];
    }
    this.orderbooks[symbol] = this.orderBook({}, limit);
    // fetch the snapshot in a separate async call
    this.spawn(this.fetchOrderBookSnapshot, client, message, subscription);
  }
  handleSubscriptionStatus(client, message) {
    //
    //     {
    //         "result": null,
    //         "id": 1574649734450
    //     }
    //
    const id = this.safeString(message, 'id');
    const subscriptionsById = this.indexBy(client.subscriptions, 'id');
    const subscription = this.safeValue(subscriptionsById, id, {});
    const method = this.safeValue(subscription, 'method');
    if (method !== undefined) {
      method.call(this, client, message, subscription);
    }
    return message;
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#watchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const options = this.safeValue(this.options, 'watchTrades', {});
    const name = this.safeString(options, 'name', 'trade');
    const messageHash = market['lowercaseId'] + '@' + name;
    let type = market['type'];
    if (market['contract']) {
      type = market['linear'] ? 'future' : 'delivery';
    }
    const query = this.omit(params, 'type');
    const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
    const requestId = this.requestId(url);
    const request = {
      'method': 'SUBSCRIBE',
      'params': [messageHash],
      'id': requestId
    };
    const subscribe = {
      'id': requestId
    };
    const trades = await this.watch(url, messageHash, this.extend(request, query), messageHash, subscribe);
    if (this.newUpdates) {
      limit = trades.getLimit(market['symbol'], limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  parseTrade(trade, market = undefined) {
    //
    // public watchTrades
    //
    //     {
    //         e: 'trade',       // event type
    //         E: 1579481530911, // event time
    //         s: 'ETHBTC',      // symbol
    //         t: 158410082,     // trade id
    //         p: '0.01914100',  // price
    //         q: '0.00700000',  // quantity
    //         b: 586187049,     // buyer order id
    //         a: 586186710,     // seller order id
    //         T: 1579481530910, // trade time
    //         m: false,         // is the buyer the market maker
    //         M: true           // binance docs say it should be ignored
    //     }
    //
    //     {
    //        "e": "aggTrade",  // Event type
    //        "E": 123456789,   // Event time
    //        "s": "BNBBTC",    // Symbol
    //        "a": 12345,       // Aggregate trade ID
    //        "p": "0.001",     // Price
    //        "q": "100",       // Quantity
    //        "f": 100,         // First trade ID
    //        "l": 105,         // Last trade ID
    //        "T": 123456785,   // Trade time
    //        "m": true,        // Is the buyer the market maker?
    //        "M": true         // Ignore
    //     }
    //
    // private watchMyTrades spot
    //
    //     {
    //         e: 'executionReport',
    //         E: 1611063861489,
    //         s: 'BNBUSDT',
    //         c: 'm4M6AD5MF3b1ERe65l4SPq',
    //         S: 'BUY',
    //         o: 'MARKET',
    //         f: 'GTC',
    //         q: '2.00000000',
    //         p: '0.00000000',
    //         P: '0.00000000',
    //         F: '0.00000000',
    //         g: -1,
    //         C: '',
    //         x: 'TRADE',
    //         X: 'PARTIALLY_FILLED',
    //         r: 'NONE',
    //         i: 1296882607,
    //         l: '0.33200000',
    //         z: '0.33200000',
    //         L: '46.86600000',
    //         n: '0.00033200',
    //         N: 'BNB',
    //         T: 1611063861488,
    //         t: 109747654,
    //         I: 2696953381,
    //         w: false,
    //         m: false,
    //         M: true,
    //         O: 1611063861488,
    //         Z: '15.55951200',
    //         Y: '15.55951200',
    //         Q: '0.00000000'
    //     }
    //
    // private watchMyTrades future/delivery
    //
    //     {
    //         s: 'BTCUSDT',
    //         c: 'pb2jD6ZQHpfzSdUac8VqMK',
    //         S: 'SELL',
    //         o: 'MARKET',
    //         f: 'GTC',
    //         q: '0.001',
    //         p: '0',
    //         ap: '33468.46000',
    //         sp: '0',
    //         x: 'TRADE',
    //         X: 'FILLED',
    //         i: 13351197194,
    //         l: '0.001',
    //         z: '0.001',
    //         L: '33468.46',
    //         n: '0.00027086',
    //         N: 'BNB',
    //         T: 1612095165362,
    //         t: 458032604,
    //         b: '0',
    //         a: '0',
    //         m: false,
    //         R: false,
    //         wt: 'CONTRACT_PRICE',
    //         ot: 'MARKET',
    //         ps: 'BOTH',
    //         cp: false,
    //         rp: '0.00335000',
    //         pP: false,
    //         si: 0,
    //         ss: 0
    //     }
    //
    const executionType = this.safeString(trade, 'x');
    const isTradeExecution = executionType === 'TRADE';
    if (!isTradeExecution) {
      return super.parseTrade(trade, market);
    }
    const id = this.safeString2(trade, 't', 'a');
    const timestamp = this.safeInteger(trade, 'T');
    const price = this.safeString2(trade, 'L', 'p');
    let amount = this.safeString(trade, 'q');
    if (isTradeExecution) {
      amount = this.safeString(trade, 'l', amount);
    }
    let cost = this.safeString(trade, 'Y');
    if (cost === undefined) {
      if (price !== undefined && amount !== undefined) {
        cost = _Precise.Precise.stringMul(price, amount);
      }
    }
    const marketId = this.safeString(trade, 's');
    const marketType = 'ps' in trade ? 'contract' : 'spot';
    const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
    let side = this.safeStringLower(trade, 'S');
    let takerOrMaker = undefined;
    const orderId = this.safeString(trade, 'i');
    if ('m' in trade) {
      if (side === undefined) {
        side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally
      }

      takerOrMaker = trade['m'] ? 'maker' : 'taker';
    }
    let fee = undefined;
    const feeCost = this.safeString(trade, 'n');
    if (feeCost !== undefined) {
      const feeCurrencyId = this.safeString(trade, 'N');
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': feeCost,
        'currency': feeCurrencyCode
      };
    }
    const type = this.safeStringLower(trade, 'o');
    return this.safeTrade({
      'info': trade,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'id': id,
      'order': orderId,
      'type': type,
      'takerOrMaker': takerOrMaker,
      'side': side,
      'price': price,
      'amount': amount,
      'cost': cost,
      'fee': fee
    });
  }
  handleTrade(client, message) {
    // the trade streams push raw trade information in real-time
    // each trade has a unique buyer and seller
    const index = client.url.indexOf('/stream');
    const marketType = index >= 0 ? 'spot' : 'contract';
    const marketId = this.safeString(message, 's');
    const market = this.safeMarket(marketId, undefined, undefined, marketType);
    const symbol = market['symbol'];
    const lowerCaseId = this.safeStringLower(message, 's');
    const event = this.safeString(message, 'e');
    const messageHash = lowerCaseId + '@' + event;
    const trade = this.parseTrade(message, market);
    let tradesArray = this.safeValue(this.trades, symbol);
    if (tradesArray === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      tradesArray = new _Cache.ArrayCache(limit);
    }
    tradesArray.append(trade);
    this.trades[symbol] = tradesArray;
    client.resolve(tradesArray, messageHash);
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    let marketId = market['lowercaseId'];
    const interval = this.safeString(this.timeframes, timeframe, timeframe);
    const options = this.safeValue(this.options, 'watchOHLCV', {});
    const nameOption = this.safeString(options, 'name', 'kline');
    const name = this.safeString(params, 'name', nameOption);
    if (name === 'indexPriceKline') {
      // weird behavior for index price kline we can't use the perp suffix
      marketId = marketId.replace('_perp', '');
    }
    params = this.omit(params, 'name');
    const messageHash = marketId + '@' + name + '_' + interval;
    let type = market['type'];
    if (market['contract']) {
      type = market['linear'] ? 'future' : 'delivery';
    }
    const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
    const requestId = this.requestId(url);
    const request = {
      'method': 'SUBSCRIBE',
      'params': [messageHash],
      'id': requestId
    };
    const subscribe = {
      'id': requestId
    };
    const ohlcv = await this.watch(url, messageHash, this.extend(request, params), messageHash, subscribe);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    //
    //     {
    //         e: 'kline',
    //         E: 1579482921215,
    //         s: 'ETHBTC',
    //         k: {
    //             t: 1579482900000,
    //             T: 1579482959999,
    //             s: 'ETHBTC',
    //             i: '1m',
    //             f: 158411535,
    //             L: 158411550,
    //             o: '0.01913200',
    //             c: '0.01913500',
    //             h: '0.01913700',
    //             l: '0.01913200',
    //             v: '5.08400000',
    //             n: 16,
    //             x: false,
    //             q: '0.09728060',
    //             V: '3.30200000',
    //             Q: '0.06318500',
    //             B: '0'
    //         }
    //     }
    //
    let event = this.safeString(message, 'e');
    const eventMap = {
      'indexPrice_kline': 'indexPriceKline',
      'markPrice_kline': 'markPriceKline'
    };
    event = this.safeString(eventMap, event, event);
    const kline = this.safeValue(message, 'k');
    let marketId = this.safeString2(kline, 's', 'ps');
    if (event === 'indexPriceKline') {
      // indexPriceKline doesn't have the _PERP suffix
      marketId = this.safeString(message, 'ps');
    }
    const lowercaseMarketId = marketId.toLowerCase();
    const interval = this.safeString(kline, 'i');
    // use a reverse lookup in a static map instead
    const timeframe = this.findTimeframe(interval);
    const messageHash = lowercaseMarketId + '@' + event + '_' + interval;
    const parsed = [this.safeInteger(kline, 't'), this.safeFloat(kline, 'o'), this.safeFloat(kline, 'h'), this.safeFloat(kline, 'l'), this.safeFloat(kline, 'c'), this.safeFloat(kline, 'v')];
    const index = client.url.indexOf('/stream');
    const marketType = index >= 0 ? 'spot' : 'contract';
    const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
    this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
    let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
      stored = new _Cache.ArrayCacheByTimestamp(limit);
      this.ohlcvs[symbol][timeframe] = stored;
    }
    stored.append(parsed);
    client.resolve(stored, messageHash);
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name binance#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the binance api endpoint
     * @param {string} params.name stream to use can be ticker or bookTicker
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const marketId = market['lowercaseId'];
    let type = market['type'];
    if (market['contract']) {
      type = market['linear'] ? 'future' : 'delivery';
    }
    const options = this.safeValue(this.options, 'watchTicker', {});
    let name = this.safeString(options, 'name', 'ticker');
    name = this.safeString(params, 'name', name);
    params = this.omit(params, 'name');
    const messageHash = marketId + '@' + name;
    const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
    const requestId = this.requestId(url);
    const request = {
      'method': 'SUBSCRIBE',
      'params': [messageHash],
      'id': requestId
    };
    const subscribe = {
      'id': requestId
    };
    return await this.watch(url, messageHash, this.extend(request, params), messageHash, subscribe);
  }
  async watchTickers(symbols = undefined, params = {}) {
    /**
     * @method
     * @name binance#watchTickers
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @param {[string]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const marketIds = this.marketIds(symbols);
    let market = undefined;
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('watchTickers', market, params);
    if (marketIds !== undefined) {
      market = this.safeMarket(marketIds[0], undefined, undefined, type);
    }
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('watchTickers', market, params);
    if (this.isLinear(type, subType)) {
      type = 'future';
    } else if (this.isInverse(type, subType)) {
      type = 'delivery';
    }
    const options = this.safeValue(this.options, 'watchTickers', {});
    let name = this.safeString(options, 'name', 'ticker');
    name = this.safeString(params, 'name', name);
    const oriParams = params;
    params = this.omit(params, 'name');
    let wsParams = [];
    const messageHash = '!' + name + '@arr';
    if (name === 'bookTicker') {
      if (marketIds === undefined) {
        throw new _errors.ArgumentsRequired(this.id + ' watchTickers() requires symbols for bookTicker');
      }
      // simulate watchTickers with subscribe multiple individual bookTicker topic
      for (let i = 0; i < marketIds.length; i++) {
        wsParams.push(marketIds[i].toLowerCase() + '@bookTicker');
      }
    } else {
      wsParams = [messageHash];
    }
    const url = this.urls['api']['ws'][type] + '/' + this.stream(type, messageHash);
    const requestId = this.requestId(url);
    const request = {
      'method': 'SUBSCRIBE',
      'params': wsParams,
      'id': requestId
    };
    const subscribe = {
      'id': requestId
    };
    const tickers = await this.watch(url, messageHash, this.extend(request, params), messageHash, subscribe);
    const result = {};
    for (let i = 0; i < tickers.length; i++) {
      const ticker = tickers[i];
      const tickerSymbol = ticker['symbol'];
      if (symbols === undefined || this.inArray(tickerSymbol, symbols)) {
        result[tickerSymbol] = ticker;
      }
    }
    const resultKeys = Object.keys(result);
    const resultKeysLength = resultKeys.length;
    if (resultKeysLength > 0) {
      if (this.newUpdates) {
        return result;
      }
      return this.filterByArray(this.tickers, 'symbol', symbols);
    }
    return await this.watchTickers(symbols, oriParams);
  }
  parseWsTicker(message, marketType) {
    //
    // ticker
    //     {
    //         e: '24hrTicker',      // event type
    //         E: 1579485598569,     // event time
    //         s: 'ETHBTC',          // symbol
    //         p: '-0.00004000',     // price change
    //         P: '-0.209',          // price change percent
    //         w: '0.01920495',      // weighted average price
    //         x: '0.01916500',      // the price of the first trade before the 24hr rolling window
    //         c: '0.01912500',      // last (closing) price
    //         Q: '0.10400000',      // last quantity
    //         b: '0.01912200',      // best bid
    //         B: '4.10400000',      // best bid quantity
    //         a: '0.01912500',      // best ask
    //         A: '0.00100000',      // best ask quantity
    //         o: '0.01916500',      // open price
    //         h: '0.01956500',      // high price
    //         l: '0.01887700',      // low price
    //         v: '173518.11900000', // base volume
    //         q: '3332.40703994',   // quote volume
    //         O: 1579399197842,     // open time
    //         C: 1579485597842,     // close time
    //         F: 158251292,         // first trade id
    //         L: 158414513,         // last trade id
    //         n: 163222,            // total number of trades
    //     }
    //
    // miniTicker
    //     {
    //         e: '24hrMiniTicker',
    //         E: 1671617114585,
    //         s: 'MOBBUSD',
    //         c: '0.95900000',
    //         o: '0.91200000',
    //         h: '1.04000000',
    //         l: '0.89400000',
    //         v: '2109995.32000000',
    //         q: '2019254.05788000'
    //     }
    //
    let event = this.safeString(message, 'e', 'bookTicker');
    if (event === '24hrTicker') {
      event = 'ticker';
    }
    let timestamp = undefined;
    const now = this.milliseconds();
    if (event === 'bookTicker') {
      // take the event timestamp, if available, for spot tickers it is not
      timestamp = this.safeInteger(message, 'E', now);
    } else {
      // take the timestamp of the closing price for candlestick streams
      timestamp = this.safeInteger(message, 'C', now);
    }
    const marketId = this.safeString(message, 's');
    const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
    const last = this.safeFloat(message, 'c');
    const ticker = {
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.safeFloat(message, 'h'),
      'low': this.safeFloat(message, 'l'),
      'bid': this.safeFloat(message, 'b'),
      'bidVolume': this.safeFloat(message, 'B'),
      'ask': this.safeFloat(message, 'a'),
      'askVolume': this.safeFloat(message, 'A'),
      'vwap': this.safeFloat(message, 'w'),
      'open': this.safeFloat(message, 'o'),
      'close': last,
      'last': last,
      'previousClose': this.safeFloat(message, 'x'),
      'change': this.safeFloat(message, 'p'),
      'percentage': this.safeFloat(message, 'P'),
      'average': undefined,
      'baseVolume': this.safeFloat(message, 'v'),
      'quoteVolume': this.safeFloat(message, 'q'),
      'info': message
    };
    return ticker;
  }
  handleTicker(client, message) {
    //
    // 24hr rolling window ticker statistics for a single symbol
    // These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs
    // Update Speed 1000ms
    //
    //     {
    //         e: '24hrTicker',      // event type
    //         E: 1579485598569,     // event time
    //         s: 'ETHBTC',          // symbol
    //         p: '-0.00004000',     // price change
    //         P: '-0.209',          // price change percent
    //         w: '0.01920495',      // weighted average price
    //         x: '0.01916500',      // the price of the first trade before the 24hr rolling window
    //         c: '0.01912500',      // last (closing) price
    //         Q: '0.10400000',      // last quantity
    //         b: '0.01912200',      // best bid
    //         B: '4.10400000',      // best bid quantity
    //         a: '0.01912500',      // best ask
    //         A: '0.00100000',      // best ask quantity
    //         o: '0.01916500',      // open price
    //         h: '0.01956500',      // high price
    //         l: '0.01887700',      // low price
    //         v: '173518.11900000', // base volume
    //         q: '3332.40703994',   // quote volume
    //         O: 1579399197842,     // open time
    //         C: 1579485597842,     // close time
    //         F: 158251292,         // first trade id
    //         L: 158414513,         // last trade id
    //         n: 163222,            // total number of trades
    //     }
    //
    let event = this.safeString(message, 'e', 'bookTicker');
    if (event === '24hrTicker') {
      event = 'ticker';
    } else if (event === '24hrMiniTicker') {
      event = 'miniTicker';
    }
    const wsMarketId = this.safeStringLower(message, 's');
    const messageHash = wsMarketId + '@' + event;
    const index = client.url.indexOf('/stream');
    const marketType = index >= 0 ? 'spot' : 'contract';
    const result = this.parseWsTicker(message, marketType);
    const symbol = result['symbol'];
    this.tickers[symbol] = result;
    client.resolve(result, messageHash);
    if (event === 'bookTicker') {
      // watch bookTickers
      client.resolve([result], '!' + 'bookTicker@arr');
    }
  }
  handleTickers(client, message) {
    let event = undefined;
    const index = client.url.indexOf('/stream');
    const marketType = index >= 0 ? 'spot' : 'contract';
    for (let i = 0; i < message.length; i++) {
      const ticker = message[i];
      event = this.safeString(ticker, 'e');
      if (event === '24hrTicker') {
        event = 'ticker';
      } else if (event === '24hrMiniTicker') {
        event = 'miniTicker';
      }
      const wsMarketId = this.safeStringLower(ticker, 's');
      const messageHash = wsMarketId + '@' + event;
      const result = this.parseWsTicker(ticker, marketType);
      const symbol = result['symbol'];
      this.tickers[symbol] = result;
      client.resolve(result, messageHash);
    }
    const values = Object.values(this.tickers);
    client.resolve(values, '!' + event + '@arr');
  }
  async authenticate(params = {}) {
    const time = this.milliseconds();
    let type = this.safeString2(this.options, 'defaultType', 'authenticate', 'spot');
    type = this.safeString(params, 'type', type);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('authenticate', undefined, params);
    if (this.isLinear(type, subType)) {
      type = 'future';
    } else if (this.isInverse(type, subType)) {
      type = 'delivery';
    }
    let marginMode = undefined;
    [marginMode, params] = this.handleMarginModeAndParams('authenticate', params);
    const isIsolatedMargin = marginMode === 'isolated';
    const isCrossMargin = marginMode === 'cross' || marginMode === undefined;
    const symbol = this.safeString(params, 'symbol');
    params = this.omit(params, 'symbol');
    const options = this.safeValue(this.options, type, {});
    const lastAuthenticatedTime = this.safeInteger(options, 'lastAuthenticatedTime', 0);
    const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
    const delay = this.sum(listenKeyRefreshRate, 10000);
    if (time - lastAuthenticatedTime > delay) {
      let method = 'publicPostUserDataStream';
      if (type === 'future') {
        method = 'fapiPrivatePostListenKey';
      } else if (type === 'delivery') {
        method = 'dapiPrivatePostListenKey';
      } else if (type === 'margin' && isCrossMargin) {
        method = 'sapiPostUserDataStream';
      } else if (isIsolatedMargin) {
        method = 'sapiPostUserDataStreamIsolated';
        if (symbol === undefined) {
          throw new _errors.ArgumentsRequired(this.id + ' authenticate() requires a symbol argument for isolated margin mode');
        }
        const marketId = this.marketId(symbol);
        params['symbol'] = marketId;
      }
      const response = await this[method](params);
      this.options[type] = this.extend(options, {
        'listenKey': this.safeString(response, 'listenKey'),
        'lastAuthenticatedTime': time
      });
      this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
    }
  }
  async keepAliveListenKey(params = {}) {
    // https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot
    let type = this.safeString2(this.options, 'defaultType', 'authenticate', 'spot');
    type = this.safeString(params, 'type', type);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('keepAliveListenKey', undefined, params);
    if (this.isLinear(type, subType)) {
      type = 'future';
    } else if (this.isInverse(type, subType)) {
      type = 'delivery';
    }
    const options = this.safeValue(this.options, type, {});
    const listenKey = this.safeString(options, 'listenKey');
    if (listenKey === undefined) {
      // A network error happened: we can't renew a listen key that does not exist.
      return;
    }
    let method = 'publicPutUserDataStream';
    if (type === 'future') {
      method = 'fapiPrivatePutListenKey';
    } else if (type === 'delivery') {
      method = 'dapiPrivatePutListenKey';
    } else if (type === 'margin') {
      method = 'sapiPutUserDataStream';
    }
    const request = {
      'listenKey': listenKey
    };
    const time = this.milliseconds();
    const sendParams = this.omit(params, 'type');
    try {
      await this[method](this.extend(request, sendParams));
    } catch (error) {
      const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
      const client = this.client(url);
      const messageHashes = Object.keys(client.futures);
      for (let i = 0; i < messageHashes.length; i++) {
        const messageHash = messageHashes[i];
        client.reject(error, messageHash);
      }
      this.options[type] = this.extend(options, {
        'listenKey': undefined,
        'lastAuthenticatedTime': 0
      });
      return;
    }
    this.options[type] = this.extend(options, {
      'listenKey': listenKey,
      'lastAuthenticatedTime': time
    });
    // whether or not to schedule another listenKey keepAlive request
    const clients = Object.values(this.clients);
    const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
    for (let i = 0; i < clients.length; i++) {
      const client = clients[i];
      const subscriptionKeys = Object.keys(client.subscriptions);
      for (let j = 0; j < subscriptionKeys.length; j++) {
        const subscribeType = subscriptionKeys[j];
        if (subscribeType === type) {
          return this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
        }
      }
    }
  }
  setBalanceCache(client, type) {
    if (type in client.subscriptions) {
      return undefined;
    }
    const options = this.safeValue(this.options, 'watchBalance');
    const fetchBalanceSnapshot = this.safeValue(options, 'fetchBalanceSnapshot', false);
    if (fetchBalanceSnapshot) {
      const messageHash = type + ':fetchBalanceSnapshot';
      if (!(messageHash in client.futures)) {
        client.future(messageHash);
        this.spawn(this.loadBalanceSnapshot, client, messageHash, type);
      }
    } else {
      this.balance[type] = {};
    }
  }
  async loadBalanceSnapshot(client, messageHash, type) {
    const response = await this.fetchBalance({
      'type': type
    });
    this.balance[type] = this.extend(response, this.safeValue(this.balance, type, {}));
    // don't remove the future from the .futures cache
    const future = client.futures[messageHash];
    future.resolve();
    client.resolve(this.balance[type], type + ':balance');
  }
  async watchBalance(params = {}) {
    /**
     * @method
     * @name binance#watchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    await this.authenticate(params);
    const defaultType = this.safeString(this.options, 'defaultType', 'spot');
    let type = this.safeString(params, 'type', defaultType);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('watchBalance', undefined, params);
    if (this.isLinear(type, subType)) {
      type = 'future';
    } else if (this.isInverse(type, subType)) {
      type = 'delivery';
    }
    const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
    const client = this.client(url);
    this.setBalanceCache(client, type);
    const options = this.safeValue(this.options, 'watchBalance');
    const fetchBalanceSnapshot = this.safeValue(options, 'fetchBalanceSnapshot', false);
    const awaitBalanceSnapshot = this.safeValue(options, 'awaitBalanceSnapshot', true);
    if (fetchBalanceSnapshot && awaitBalanceSnapshot) {
      await client.future(type + ':fetchBalanceSnapshot');
    }
    const messageHash = type + ':balance';
    const message = undefined;
    return await this.watch(url, messageHash, message, type);
  }
  handleBalance(client, message) {
    //
    // sent upon a balance update not related to orders
    //
    //     {
    //         e: 'balanceUpdate',
    //         E: 1629352505586,
    //         a: 'IOTX',
    //         d: '0.43750000',
    //         T: 1629352505585
    //     }
    //
    // sent upon creating or filling an order
    //
    //     {
    //         "e": "outboundAccountPosition", // Event type
    //         "E": 1564034571105,             // Event Time
    //         "u": 1564034571073,             // Time of last account update
    //         "B": [                          // Balances Array
    //             {
    //                 "a": "ETH",                 // Asset
    //                 "f": "10000.000000",        // Free
    //                 "l": "0.000000"             // Locked
    //             }
    //         ]
    //     }
    //
    // future/delivery
    //
    //     {
    //         "e": "ACCOUNT_UPDATE",            // Event Type
    //         "E": 1564745798939,               // Event Time
    //         "T": 1564745798938 ,              // Transaction
    //         "i": "SfsR",                      // Account Alias
    //         "a": {                            // Update Data
    //             "m":"ORDER",                  // Event reason type
    //             "B":[                         // Balances
    //                 {
    //                     "a":"BTC",                // Asset
    //                     "wb":"122624.12345678",   // Wallet Balance
    //                     "cw":"100.12345678"       // Cross Wallet Balance
    //                 },
    //             ],
    //             "P":[
    //                 {
    //                     "s":"BTCUSD_200925",      // Symbol
    //                     "pa":"0",                 // Position Amount
    //                     "ep":"0.0",               // Entry Price
    //                     "cr":"200",               // (Pre-fee) Accumulated Realized
    //                     "up":"0",                 // Unrealized PnL
    //                     "mt":"isolated",          // Margin Type
    //                     "iw":"0.00000000",        // Isolated Wallet (if isolated position)
    //                     "ps":"BOTH"               // Position Side
    //                 },
    //             ]
    //         }
    //     }
    //
    const wallet = this.safeValue(this.options, 'wallet', 'wb'); // cw for cross wallet
    // each account is connected to a different endpoint
    // and has exactly one subscriptionhash which is the account type
    const subscriptions = Object.keys(client.subscriptions);
    const accountType = subscriptions[0];
    const messageHash = accountType + ':balance';
    this.balance[accountType]['info'] = message;
    const event = this.safeString(message, 'e');
    if (event === 'balanceUpdate') {
      const currencyId = this.safeString(message, 'a');
      const code = this.safeCurrencyCode(currencyId);
      const account = this.account();
      const delta = this.safeString(message, 'd');
      if (code in this.balance[accountType]) {
        let previousValue = this.balance[accountType][code]['free'];
        if (typeof previousValue !== 'string') {
          previousValue = this.numberToString(previousValue);
        }
        account['free'] = _Precise.Precise.stringAdd(previousValue, delta);
      } else {
        account['free'] = delta;
      }
      this.balance[accountType][code] = account;
    } else {
      message = this.safeValue(message, 'a', message);
      const B = this.safeValue(message, 'B');
      for (let i = 0; i < B.length; i++) {
        const entry = B[i];
        const currencyId = this.safeString(entry, 'a');
        const code = this.safeCurrencyCode(currencyId);
        const account = this.account();
        account['free'] = this.safeString(entry, 'f');
        account['used'] = this.safeString(entry, 'l');
        account['total'] = this.safeString(entry, wallet);
        this.balance[accountType][code] = account;
      }
    }
    const timestamp = this.safeInteger(message, 'E');
    this.balance[accountType]['timestamp'] = timestamp;
    this.balance[accountType]['datetime'] = this.iso8601(timestamp);
    this.balance[accountType] = this.safeBalance(this.balance[accountType]);
    client.resolve(this.balance[accountType], messageHash);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#watchOrders
     * @description watches information on multiple orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let messageHash = 'orders';
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      messageHash += ':' + symbol;
      params['symbol'] = symbol; // needed inside authenticate for isolated margin
    }

    await this.authenticate(params);
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('watchOrders', market, params);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('watchOrders', market, params);
    if (this.isLinear(type, subType)) {
      type = 'future';
    } else if (this.isInverse(type, subType)) {
      type = 'delivery';
    }
    const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
    const client = this.client(url);
    this.setBalanceCache(client, type);
    const message = undefined;
    const orders = await this.watch(url, messageHash, message, type);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  parseWsOrder(order, market = undefined) {
    //
    // spot
    //
    //     {
    //         "e": "executionReport",        // Event type
    //         "E": 1499405658658,            // Event time
    //         "s": "ETHBTC",                 // Symbol
    //         "c": "mUvoqJxFIILMdfAW5iGSOW", // Client order ID
    //         "S": "BUY",                    // Side
    //         "o": "LIMIT",                  // Order type
    //         "f": "GTC",                    // Time in force
    //         "q": "1.00000000",             // Order quantity
    //         "p": "0.10264410",             // Order price
    //         "P": "0.00000000",             // Stop price
    //         "F": "0.00000000",             // Iceberg quantity
    //         "g": -1,                       // OrderListId
    //         "C": null,                     // Original client order ID; This is the ID of the order being canceled
    //         "x": "NEW",                    // Current execution type
    //         "X": "NEW",                    // Current order status
    //         "r": "NONE",                   // Order reject reason; will be an error code.
    //         "i": 4293153,                  // Order ID
    //         "l": "0.00000000",             // Last executed quantity
    //         "z": "0.00000000",             // Cumulative filled quantity
    //         "L": "0.00000000",             // Last executed price
    //         "n": "0",                      // Commission amount
    //         "N": null,                     // Commission asset
    //         "T": 1499405658657,            // Transaction time
    //         "t": -1,                       // Trade ID
    //         "I": 8641984,                  // Ignore
    //         "w": true,                     // Is the order on the book?
    //         "m": false,                    // Is this trade the maker side?
    //         "M": false,                    // Ignore
    //         "O": 1499405658657,            // Order creation time
    //         "Z": "0.00000000",             // Cumulative quote asset transacted quantity
    //         "Y": "0.00000000"              // Last quote asset transacted quantity (i.e. lastPrice * lastQty),
    //         "Q": "0.00000000"              // Quote Order Qty
    //     }
    //
    // future
    //
    //     {
    //         "s":"BTCUSDT",                 // Symbol
    //         "c":"TEST",                    // Client Order Id
    //                                        // special client order id:
    //                                        // starts with "autoclose-": liquidation order
    //                                        // "adl_autoclose": ADL auto close order
    //         "S":"SELL",                    // Side
    //         "o":"TRAILING_STOP_MARKET",    // Order Type
    //         "f":"GTC",                     // Time in Force
    //         "q":"0.001",                   // Original Quantity
    //         "p":"0",                       // Original Price
    //         "ap":"0",                      // Average Price
    //         "sp":"7103.04",                // Stop Price. Please ignore with TRAILING_STOP_MARKET order
    //         "x":"NEW",                     // Execution Type
    //         "X":"NEW",                     // Order Status
    //         "i":8886774,                   // Order Id
    //         "l":"0",                       // Order Last Filled Quantity
    //         "z":"0",                       // Order Filled Accumulated Quantity
    //         "L":"0",                       // Last Filled Price
    //         "N":"USDT",                    // Commission Asset, will not push if no commission
    //         "n":"0",                       // Commission, will not push if no commission
    //         "T":1568879465651,             // Order Trade Time
    //         "t":0,                         // Trade Id
    //         "b":"0",                       // Bids Notional
    //         "a":"9.91",                    // Ask Notional
    //         "m":false,                     // Is this trade the maker side?
    //         "R":false,                     // Is this reduce only
    //         "wt":"CONTRACT_PRICE",         // Stop Price Working Type
    //         "ot":"TRAILING_STOP_MARKET",   // Original Order Type
    //         "ps":"LONG",                   // Position Side
    //         "cp":false,                    // If Close-All, pushed with conditional order
    //         "AP":"7476.89",                // Activation Price, only puhed with TRAILING_STOP_MARKET order
    //         "cr":"5.0",                    // Callback Rate, only puhed with TRAILING_STOP_MARKET order
    //         "rp":"0"                       // Realized Profit of the trade
    //     }
    //
    const executionType = this.safeString(order, 'x');
    const orderId = this.safeString(order, 'i');
    const marketId = this.safeString(order, 's');
    const marketType = 'ps' in order ? 'contract' : 'spot';
    const symbol = this.safeSymbol(marketId, undefined, undefined, marketType);
    let timestamp = this.safeInteger(order, 'O');
    const T = this.safeInteger(order, 'T');
    let lastTradeTimestamp = undefined;
    if (executionType === 'NEW') {
      if (timestamp === undefined) {
        timestamp = T;
      }
    } else if (executionType === 'TRADE') {
      lastTradeTimestamp = T;
    }
    let fee = undefined;
    const feeCost = this.safeString(order, 'n');
    if (feeCost !== undefined && _Precise.Precise.stringGt(feeCost, '0')) {
      const feeCurrencyId = this.safeString(order, 'N');
      const feeCurrency = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': feeCost,
        'currency': feeCurrency
      };
    }
    const price = this.safeString(order, 'p');
    const amount = this.safeString(order, 'q');
    const side = this.safeStringLower(order, 'S');
    const type = this.safeStringLower(order, 'o');
    const filled = this.safeString(order, 'z');
    const cost = this.safeString(order, 'Z');
    const average = this.safeString(order, 'ap');
    const rawStatus = this.safeString(order, 'X');
    const status = this.parseOrderStatus(rawStatus);
    const trades = undefined;
    let clientOrderId = this.safeString(order, 'C');
    if (clientOrderId === undefined || clientOrderId.length === 0) {
      clientOrderId = this.safeString(order, 'c');
    }
    const stopPrice = this.safeString2(order, 'P', 'sp');
    let timeInForce = this.safeString(order, 'f');
    if (timeInForce === 'GTX') {
      // GTX means "Good Till Crossing" and is an equivalent way of saying Post Only
      timeInForce = 'PO';
    }
    return this.safeOrder({
      'info': order,
      'symbol': symbol,
      'id': orderId,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': undefined,
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': stopPrice,
      'amount': amount,
      'cost': cost,
      'average': average,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': fee,
      'trades': trades
    });
  }
  handleOrderUpdate(client, message) {
    //
    // spot
    //
    //     {
    //         "e": "executionReport",        // Event type
    //         "E": 1499405658658,            // Event time
    //         "s": "ETHBTC",                 // Symbol
    //         "c": "mUvoqJxFIILMdfAW5iGSOW", // Client order ID
    //         "S": "BUY",                    // Side
    //         "o": "LIMIT",                  // Order type
    //         "f": "GTC",                    // Time in force
    //         "q": "1.00000000",             // Order quantity
    //         "p": "0.10264410",             // Order price
    //         "P": "0.00000000",             // Stop price
    //         "F": "0.00000000",             // Iceberg quantity
    //         "g": -1,                       // OrderListId
    //         "C": null,                     // Original client order ID; This is the ID of the order being canceled
    //         "x": "NEW",                    // Current execution type
    //         "X": "NEW",                    // Current order status
    //         "r": "NONE",                   // Order reject reason; will be an error code.
    //         "i": 4293153,                  // Order ID
    //         "l": "0.00000000",             // Last executed quantity
    //         "z": "0.00000000",             // Cumulative filled quantity
    //         "L": "0.00000000",             // Last executed price
    //         "n": "0",                      // Commission amount
    //         "N": null,                     // Commission asset
    //         "T": 1499405658657,            // Transaction time
    //         "t": -1,                       // Trade ID
    //         "I": 8641984,                  // Ignore
    //         "w": true,                     // Is the order on the book?
    //         "m": false,                    // Is this trade the maker side?
    //         "M": false,                    // Ignore
    //         "O": 1499405658657,            // Order creation time
    //         "Z": "0.00000000",             // Cumulative quote asset transacted quantity
    //         "Y": "0.00000000"              // Last quote asset transacted quantity (i.e. lastPrice * lastQty),
    //         "Q": "0.00000000"              // Quote Order Qty
    //     }
    //
    // future
    //
    //     {
    //         "e":"ORDER_TRADE_UPDATE",           // Event Type
    //         "E":1568879465651,                  // Event Time
    //         "T":1568879465650,                  // Trasaction Time
    //         "o": {
    //             "s":"BTCUSDT",                  // Symbol
    //             "c":"TEST",                     // Client Order Id
    //                                             // special client order id:
    //                                             // starts with "autoclose-": liquidation order
    //                                             // "adl_autoclose": ADL auto close order
    //             "S":"SELL",                     // Side
    //             "o":"TRAILING_STOP_MARKET",     // Order Type
    //             "f":"GTC",                      // Time in Force
    //             "q":"0.001",                    // Original Quantity
    //             "p":"0",                        // Original Price
    //             "ap":"0",                       // Average Price
    //             "sp":"7103.04",                 // Stop Price. Please ignore with TRAILING_STOP_MARKET order
    //             "x":"NEW",                      // Execution Type
    //             "X":"NEW",                      // Order Status
    //             "i":8886774,                    // Order Id
    //             "l":"0",                        // Order Last Filled Quantity
    //             "z":"0",                        // Order Filled Accumulated Quantity
    //             "L":"0",                        // Last Filled Price
    //             "N":"USDT",                     // Commission Asset, will not push if no commission
    //             "n":"0",                        // Commission, will not push if no commission
    //             "T":1568879465651,              // Order Trade Time
    //             "t":0,                          // Trade Id
    //             "b":"0",                        // Bids Notional
    //             "a":"9.91",                     // Ask Notional
    //             "m":false,                      // Is this trade the maker side?
    //             "R":false,                      // Is this reduce only
    //             "wt":"CONTRACT_PRICE",          // Stop Price Working Type
    //             "ot":"TRAILING_STOP_MARKET",    // Original Order Type
    //             "ps":"LONG",                    // Position Side
    //             "cp":false,                     // If Close-All, pushed with conditional order
    //             "AP":"7476.89",                 // Activation Price, only puhed with TRAILING_STOP_MARKET order
    //             "cr":"5.0",                     // Callback Rate, only puhed with TRAILING_STOP_MARKET order
    //             "rp":"0"                        // Realized Profit of the trade
    //         }
    //     }
    //
    const e = this.safeString(message, 'e');
    if (e === 'ORDER_TRADE_UPDATE') {
      message = this.safeValue(message, 'o', message);
    }
    this.handleMyTrade(client, message);
    this.handleOrder(client, message);
  }
  async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name binance#watchMyTrades
     * @description watches information on multiple trades made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the binance api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    const defaultType = this.safeString2(this.options, 'watchMyTrades', 'defaultType', 'spot');
    let type = this.safeString(params, 'type', defaultType);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('watchMyTrades', undefined, params);
    if (this.isLinear(type, subType)) {
      type = 'future';
    } else if (this.isInverse(type, subType)) {
      type = 'delivery';
    }
    let messageHash = 'myTrades';
    if (symbol !== undefined) {
      symbol = this.symbol(symbol);
      messageHash += ':' + symbol;
      params['symbol'] = symbol;
    }
    await this.authenticate(params);
    const url = this.urls['api']['ws'][type] + '/' + this.options[type]['listenKey'];
    const client = this.client(url);
    this.setBalanceCache(client, type);
    const message = undefined;
    const trades = await this.watch(url, messageHash, message, type);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
  }
  handleMyTrade(client, message) {
    const messageHash = 'myTrades';
    const executionType = this.safeString(message, 'x');
    if (executionType === 'TRADE') {
      const trade = this.parseTrade(message);
      const orderId = this.safeString(trade, 'order');
      const tradeFee = this.safeValue(trade, 'fee');
      const symbol = this.safeString(trade, 'symbol');
      if (orderId !== undefined && tradeFee !== undefined && symbol !== undefined) {
        const cachedOrders = this.orders;
        if (cachedOrders !== undefined) {
          const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
          const order = this.safeValue(orders, orderId);
          if (order !== undefined) {
            // accumulate order fees
            const fees = this.safeValue(order, 'fees');
            const fee = this.safeValue(order, 'fee');
            if (fees !== undefined) {
              let insertNewFeeCurrency = true;
              for (let i = 0; i < fees.length; i++) {
                const orderFee = fees[i];
                if (orderFee['currency'] === tradeFee['currency']) {
                  const feeCost = this.sum(tradeFee['cost'], orderFee['cost']);
                  order['fees'][i]['cost'] = parseFloat(this.currencyToPrecision(tradeFee['currency'], feeCost));
                  insertNewFeeCurrency = false;
                  break;
                }
              }
              if (insertNewFeeCurrency) {
                order['fees'].push(tradeFee);
              }
            } else if (fee !== undefined) {
              if (fee['currency'] === tradeFee['currency']) {
                const feeCost = this.sum(fee['cost'], tradeFee['cost']);
                order['fee']['cost'] = parseFloat(this.currencyToPrecision(tradeFee['currency'], feeCost));
              } else if (fee['currency'] === undefined) {
                order['fee'] = tradeFee;
              } else {
                order['fees'] = [fee, tradeFee];
                order['fee'] = undefined;
              }
            } else {
              order['fee'] = tradeFee;
            }
            // save this trade in the order
            const orderTrades = this.safeValue(order, 'trades', []);
            orderTrades.push(trade);
            order['trades'] = orderTrades;
            // don't append twice cause it breaks newUpdates mode
            // this order already exists in the cache
          }
        }
      }

      if (this.myTrades === undefined) {
        const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
        this.myTrades = new _Cache.ArrayCacheBySymbolById(limit);
      }
      const myTrades = this.myTrades;
      myTrades.append(trade);
      client.resolve(this.myTrades, messageHash);
      const messageHashSymbol = messageHash + ':' + symbol;
      client.resolve(this.myTrades, messageHashSymbol);
    }
  }
  handleOrder(client, message) {
    const messageHash = 'orders';
    const parsed = this.parseWsOrder(message);
    const symbol = this.safeString(parsed, 'symbol');
    const orderId = this.safeString(parsed, 'id');
    if (symbol !== undefined) {
      if (this.orders === undefined) {
        const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
        this.orders = new _Cache.ArrayCacheBySymbolById(limit);
      }
      const cachedOrders = this.orders;
      const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
      const order = this.safeValue(orders, orderId);
      if (order !== undefined) {
        const fee = this.safeValue(order, 'fee');
        if (fee !== undefined) {
          parsed['fee'] = fee;
        }
        const fees = this.safeValue(order, 'fees');
        if (fees !== undefined) {
          parsed['fees'] = fees;
        }
        parsed['trades'] = this.safeValue(order, 'trades');
        parsed['timestamp'] = this.safeInteger(order, 'timestamp');
        parsed['datetime'] = this.safeString(order, 'datetime');
      }
      cachedOrders.append(parsed);
      client.resolve(this.orders, messageHash);
      const messageHashSymbol = messageHash + ':' + symbol;
      client.resolve(this.orders, messageHashSymbol);
    }
  }
  handleMessage(client, message) {
    const methods = {
      'depthUpdate': this.handleOrderBook,
      'trade': this.handleTrade,
      'aggTrade': this.handleTrade,
      'kline': this.handleOHLCV,
      'markPrice_kline': this.handleOHLCV,
      'indexPrice_kline': this.handleOHLCV,
      '24hrTicker@arr': this.handleTickers,
      '24hrMiniTicker@arr': this.handleTickers,
      '24hrTicker': this.handleTicker,
      '24hrMiniTicker': this.handleTicker,
      'bookTicker': this.handleTicker,
      'outboundAccountPosition': this.handleBalance,
      'balanceUpdate': this.handleBalance,
      'ACCOUNT_UPDATE': this.handleBalance,
      'executionReport': this.handleOrderUpdate,
      'ORDER_TRADE_UPDATE': this.handleOrderUpdate
    };
    let event = this.safeString(message, 'e');
    if (Array.isArray(message)) {
      const data = message[0];
      event = this.safeString(data, 'e') + '@arr';
    }
    const method = this.safeValue(methods, event);
    if (method === undefined) {
      const requestId = this.safeString(message, 'id');
      if (requestId !== undefined) {
        return this.handleSubscriptionStatus(client, message);
      }
      // special case for the real-time bookTicker, since it comes without an event identifier
      //
      //     {
      //         u: 7488717758,
      //         s: 'BTCUSDT',
      //         b: '28621.74000000',
      //         B: '1.43278800',
      //         a: '28621.75000000',
      //         A: '2.52500800'
      //     }
      //
      if (event === undefined) {
        this.handleTicker(client, message);
      }
    } else {
      return method.call(this, client, message);
    }
  }
}
exports.default = binance;

},{"../base/Precise.js":3,"../base/errors.js":5,"../base/ws/Cache.js":17,"../binance.js":24}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _binance = _interopRequireDefault(require("./binance.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class binancecoinm extends _binance.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'binancecoinm',
      'name': 'Binance COIN-M',
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg'
      },
      'options': {
        'fetchMarkets': ['inverse'],
        'defaultSubType': 'inverse'
      }
    });
  }
}
exports.default = binancecoinm;

},{"./binance.js":36}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _binance = _interopRequireDefault(require("./binance.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class binanceusdm extends _binance.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'binanceusdm',
      'name': 'Binance USDⓈ-M',
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg'
      },
      'options': {
        'fetchMarkets': ['linear'],
        'defaultSubType': 'linear'
      }
    });
  }
}
exports.default = binanceusdm;

},{"./binance.js":36}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bingx = _interopRequireDefault(require("../bingx.js"));
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bingx extends _bingx.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': false,
        'watchMyTrades': false,
        'watchOHLCV': false,
        'watchOrderBook': true,
        'watchOrders': true,
        'watchTicker': true,
        'watchTickers': false,
        'watchTrades': true,
        'watchPosition': undefined
      },
      'urls': {
        'api': {
          'ws': 'wss://ws-market-swap.we-api.com/ws',
          'ws2': 'wss://open-api-swap.bingx.com/swap-market'
        }
      },
      'options': {
        'wsTimeFrames': {
          '1m': '1min',
          '3m': '3min',
          '5m': '5min',
          '15m': '15min',
          '30m': '30min',
          '1h': '1hour',
          '2h': '2hour',
          '4h': '4hour',
          '6h': '6hour',
          '12h': '12hour',
          '1d': '1day',
          '1w': '1week',
          '1M': '1month'
        },
        'spot': {
          'timeframes': {
            '1m': '1m',
            '3m': '3m',
            '5m': '5m',
            '15m': '15m',
            '30m': '30m',
            '1h': '1h',
            '2h': '2h',
            '4h': '4h',
            '6h': '6h',
            '12h': '12h',
            '1d': '1d',
            '1w': '1w',
            '1M': '1M'
          }
        },
        'contract': {
          'timeframes': {
            '1m': '1',
            '3m': '3',
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '2h': '120',
            '4h': '240',
            '6h': '360',
            '12h': '720',
            '1d': 'D',
            '1w': 'W',
            '1M': 'M'
          }
        }
      },
      'streaming': {
        'ping': this.ping,
        'keepAlive': 20000
      },
      'exceptions': {
        'ws': {
          'exact': {}
        }
      }
    });
  }
  requestId() {
    const requestId = this.sum(this.safeInteger(this.options, 'requestId', 0), 1);
    this.options['requestId'] = requestId;
    return requestId;
  }
  cleanParams(params) {
    params = this.omit(params, ['type', 'subType', 'settle', 'defaultSettle', 'unifiedMargin']);
    return params;
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name bingx#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://bingx-exchange.github.io/docs/v5/websocket/public/orderbook
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return.
     * @param {object} params extra parameters specific to the bingx api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.urls['api']['ws'];
    params = this.cleanParams(params);
    const messageHash = 'orderbook' + ':' + symbol;
    if (limit === undefined) {
      limit = 100;
    } else {
      if (limit !== 5 && limit !== 10 && limit !== 20 && limit !== 50 && limit !== 100) {
        throw new _errors.BadRequest(this.id + ' watchOrderBook() can only use limit 1, 50, 200 and 500.');
      }
    }
    const topics = ['market.depth.' + market['id'] + '.step0.level' + limit.toString()];
    const orderbook = await this.watchTopics(url, messageHash, topics, params, false);
    // return orderbook.limit ();
    return orderbook;
  }
  handleOrderBook(client, message) {
    const data = this.safeValue(message, 'data', {});
    const dataType = this.safeValue(message, 'dataType', '');
    const parts = dataType.split('.');
    const marketId = this.safeString(parts, 2);
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const latestTrade = this.safeValue(data, 'latestTrade', {});
    const timestamp = this.safeInteger(latestTrade, 'rawTs');
    // let orderbook = this.safeValue (this.orderbooks, symbol);
    // if (orderbook === undefined) {
    //     orderbook = this.orderBook ({}, 100);
    // }
    const orderbook = this.orderBook();
    const asks = this.safeValue(data, 'asks', []);
    const bids = this.safeValue(data, 'bids', []);
    this.handleDeltas(orderbook['asks'], asks);
    this.handleDeltas(orderbook['bids'], bids);
    orderbook['timestamp'] = timestamp;
    orderbook['datetime'] = this.iso8601(timestamp);
    const messageHash = 'orderbook' + ':' + symbol;
    this.orderbooks[symbol] = orderbook;
    client.resolve(orderbook, messageHash);
  }
  handleDelta(bookside, delta) {
    const bidAsk = this.parseBidAsk(delta, 'price', 'volume');
    bookside.storeArray(bidAsk);
  }
  handleDeltas(bookside, deltas) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(bookside, deltas[i]);
    }
  }
  handleOHLCV(client, message) {
    // {
    //     "code": 0,
    //     "dataType": "market.kline.1INCH-USDT.1hour.trade.utc+8",
    //     "data": {
    //     "klineInfosVo": [
    //         {
    //             "time": 1683982800000,
    //             "statDate": "2023-05-13T21:00:00.000+0800",
    //             "open": 0.4107,
    //             "close": 0.4089,
    //             "high": 0.4119,
    //             "low": 0.4077,
    //             "volume": 936484,
    //             "fairPrice": 0
    //         }
    //     ]
    // }
    // }
    const data = this.safeValue(message, 'data', {});
    const topic = this.safeString(message, 'dataType');
    const parts = topic.split('.');
    const marketId = this.safeString(parts, 2);
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const candles = this.safeValue(data, 'klineInfosVo', []);
    const wsTimeFrame = this.safeString(parts, 3);
    const wsTimeFrames = this.safeValue(this.options, 'wsTimeFrames', {});
    const timeframe = this.findTimeframe(wsTimeFrame, wsTimeFrames);
    if (timeframe !== undefined) {
      const messageHash = 'ohlcv' + ':' + wsTimeFrame + ':' + symbol;
      const ohlcvs = this.parseOHLCVs(candles, market);
      this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
      let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
      if (stored === undefined) {
        const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
        stored = new _Cache.ArrayCacheByTimestamp(limit);
        this.ohlcvs[symbol][timeframe] = stored;
      }
      for (let i = 0; i < ohlcvs.length; i++) {
        const candle = ohlcvs[i];
        stored.append(candle);
      }
      client.resolve(stored, messageHash);
    }
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bingx#watchTrades
     * @description watches information on multiple trades made in a market
     * @see https://bingx-exchange.github.io/docs/v5/websocket/public/trade
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bingx api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.urls['api']['ws'];
    params = this.cleanParams(params);
    const wsTimeframe = this.safeValue(this.options['wsTimeFrames'], timeframe, '1hour');
    const messageHash = 'ohlcv' + ':' + wsTimeframe + ':' + symbol;
    const topic = 'market.kline.' + market['id'] + '.' + wsTimeframe + '.trade.utc+8';
    const ohlcv = await this.watchTopics(url, messageHash, [topic], params);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bingx#watchTrades
     * @description watches information on multiple trades made in a market
     * @see https://bingx-exchange.github.io/docs/v5/websocket/public/trade
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bingx api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.urls['api']['ws'];
    params = this.cleanParams(params);
    const messageHash = 'trade:' + symbol;
    const topic = 'market.trade.detail.' + market['id'];
    const trades = await this.watchTopics(url, messageHash, [topic], params, false);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    // since BingX always returns duplicate set of klines via ws, and we are not sending since from
    // ts client, emulate it
    let tradesSince = undefined;
    if (this.options['tradesSince'] !== undefined) {
      tradesSince = this.options['tradesSince'];
    }
    const newTrades = this.filterBySinceLimit(trades, tradesSince, limit, 'timestamp', true);
    this.options = this.extend(this.options, {
      'tradesSince': this.milliseconds() - 0
    });
    return newTrades;
  }
  handleTrades(client, message) {
    //
    //     {
    //         "topic": "publicTrade.BTCUSDT",
    //         "type": "snapshot",
    //         "ts": 1672304486868,
    //         "data": [
    //             {
    //                 "T": 1672304486865,
    //                 "s": "BTCUSDT",
    //                 "S": "Buy",
    //                 "v": "0.001",
    //                 "p": "16578.50",
    //                 "L": "PlusTick",
    //                 "i": "20f43950-d8dd-5b31-9112-a178eb6023af",
    //                 "BT": false
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(message, 'data', {});
    const topic = this.safeString(message, 'dataType');
    let trades = [];
    if (this.isArray(data.trades)) {
      trades = data.trades.reverse();
    }
    const parts = topic.split('.');
    const marketId = this.safeString(parts, 3);
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    let stored = this.safeValue(this.trades, symbol);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      stored = new _Cache.ArrayCache(limit);
      this.trades[symbol] = stored;
    }
    for (let j = 0; j < trades.length; j++) {
      const parsed = this.parseWsTrade(trades[j], market);
      stored.append(parsed);
    }
    const messageHash = 'trade' + ':' + symbol;
    client.resolve(stored, messageHash);
  }
  parseWsTrade(trade, market = undefined) {
    //
    // public
    //    {
    // makerSide
    // "Ask"
    // price
    // "27563.5"
    // time
    // "03:06:43"
    // volume
    // "0.2312"
    //     }
    //
    const symbol = market['symbol'];
    const timestamp = this.safeInteger(trade, 'rawTs');
    const id = '' + timestamp;
    const m = this.safeValue(trade, 'makerSide');
    const side = m ? 'Bid' : 'Ask';
    const price = this.safeString(trade, 'price');
    const amount = this.safeFloat(trade, 'volume');
    return this.safeTrade({
      'id': id,
      'info': trade,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'order': undefined,
      'type': undefined,
      'side': side,
      'takerOrMaker': 'taker',
      'price': price,
      'amount': amount * market['contractSize'],
      'cost': undefined,
      'fee': undefined
    }, market);
  }
  getPrivateType(url) {
    if (url.indexOf('spot') >= 0) {
      return 'spot';
    } else if (url.indexOf('v5/private') >= 0) {
      return 'unified';
    } else {
      return 'usdc';
    }
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bingx#watchOrders
     * @description watches information on multiple orders made by the user
     * @see https://bingx-exchange.github.io/docs/v5/websocket/private/order
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bingx api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    let messageHash = 'orders';
    if (symbol !== undefined) {
      symbol = this.symbol(symbol);
      messageHash += ':' + symbol;
    }
    const url = this.urls['api']['ws'];
    await this.authenticate();
    const topicsByMarket = {
      'spot': ['order', 'stopOrder'],
      'unified': ['order'],
      'usdc': ['user.openapi.perp.order']
    };
    const topics = this.safeValue(topicsByMarket, this.getPrivateType(url));
    const orders = await this.watchTopics(url, messageHash, topics, params);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  handleOrder(client, message, subscription = undefined) {
    //
    //     spot
    //     {
    //         "type": "snapshot",
    //         "topic": "order",
    //         "ts": "1662348310441",
    //         "data": [
    //             {
    //                 "e": "order",
    //                 "E": "1662348310441",
    //                 "s": "BTCUSDT",
    //                 "c": "spotx008",
    //                 "S": "BUY",
    //                 "o": "MARKET_OF_QUOTE",
    //                 "f": "GTC",
    //                 "q": "20",
    //                 "p": "0",
    //                 "X": "CANCELED",
    //                 "i": "1238261807653647872",
    //                 "M": "1238225004531834368",
    //                 "l": "0.001007",
    //                 "z": "0.001007",
    //                 "L": "19842.02",
    //                 "n": "0",
    //                 "N": "BTC",
    //                 "u": true,
    //                 "w": true,
    //                 "m": false,
    //                 "O": "1662348310368",
    //                 "Z": "19.98091414",
    //                 "A": "0",
    //                 "C": false,
    //                 "v": "0",
    //                 "d": "NO_LIQ",
    //                 "t": "2100000000002220938"
    //             }
    //         ]
    //     }
    // unified
    //     {
    //         "id": "5923240c6880ab-c59f-420b-9adb-3639adc9dd90",
    //         "topic": "order",
    //         "creationTime": 1672364262474,
    //         "data": [
    //             {
    //                 "symbol": "ETH-30DEC22-1400-C",
    //                 "orderId": "5cf98598-39a7-459e-97bf-76ca765ee020",
    //                 "side": "Sell",
    //                 "orderType": "Market",
    //                 "cancelType": "UNKNOWN",
    //                 "price": "72.5",
    //                 "qty": "1",
    //                 "orderIv": "",
    //                 "timeInForce": "IOC",
    //                 "orderStatus": "Filled",
    //                 "orderLinkId": "",
    //                 "lastPriceOnCreated": "",
    //                 "reduceOnly": false,
    //                 "leavesQty": "",
    //                 "leavesValue": "",
    //                 "cumExecQty": "1",
    //                 "cumExecValue": "75",
    //                 "avgPrice": "75",
    //                 "blockTradeId": "",
    //                 "positionIdx": 0,
    //                 "cumExecFee": "0.358635",
    //                 "createdTime": "1672364262444",
    //                 "updatedTime": "1672364262457",
    //                 "rejectReason": "EC_NoError",
    //                 "stopOrderType": "",
    //                 "triggerPrice": "",
    //                 "takeProfit": "",
    //                 "stopLoss": "",
    //                 "tpTriggerBy": "",
    //                 "slTriggerBy": "",
    //                 "triggerDirection": 0,
    //                 "triggerBy": "",
    //                 "closeOnTrigger": false,
    //                 "category": "option"
    //             }
    //         ]
    //     }
    //
    if (this.orders === undefined) {
      const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
      this.orders = new _Cache.ArrayCacheBySymbolById(limit);
    }
    const orders = this.orders;
    let rawOrders = [];
    let parser = undefined;
    parser = 'parseContractOrder';
    rawOrders = this.safeValue(message, 'data', []);
    rawOrders = this.safeValue(rawOrders, 'result', rawOrders);
    const symbols = {};
    for (let i = 0; i < rawOrders.length; i++) {
      const parsed = this[parser](rawOrders[i]);
      const symbol = parsed['symbol'];
      symbols[symbol] = true;
      orders.append(parsed);
    }
    const symbolsArray = Object.keys(symbols);
    for (let i = 0; i < symbolsArray.length; i++) {
      const messageHash = 'orders:' + symbolsArray[i];
      client.resolve(orders, messageHash);
    }
    const messageHash = 'orders';
    client.resolve(orders, messageHash);
  }
  async watchTopics(url, messageHash, topics = [], params = {}, shouldThrottle = true) {
    const request = {
      'id': '' + this.requestId(),
      'reqType': 'sub',
      'dataType': topics[0]
    };
    const message = this.extend(request, params);
    return await this.watch(url, messageHash, message, messageHash, shouldThrottle);
  }
  async authenticate(params = {}) {
    // this.checkRequiredCredentials ();
    // const messageHash = 'authenticated';
    // const url = this.urls['api']['ws'];
    // const client = this.client (url);
    // let future = this.safeValue (client.subscriptions, messageHash);
    // if (future === undefined) {
    //     const request = {
    //         'reqType': 'req',
    //         'id': this.uuid (),
    //         'dataType': 'account.user.auth',
    //         'data': {
    //             'token': this.apiKey + '.' + this.secret,
    //             'platformId': '30',
    //         },
    //     };
    //     const message = this.extend (request, params);
    //     future = this.watch (url, messageHash, message);
    //     client.subscriptions[messageHash] = future;
    // }
    // return future;
    const time = this.milliseconds();
    const lastAuthenticatedTime = this.safeInteger(this.options, 'lastAuthenticatedTime', 0);
    const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
    const delay = this.sum(listenKeyRefreshRate, 10000);
    if (time - lastAuthenticatedTime > delay) {
      const method = 'swap2OpenApiPrivatePostUserAuthUserDataStream';
      const response = await this[method](params);
      this.options = this.extend(this.options, {
        'listenKey': this.safeString(response, 'listenKey'),
        'lastAuthenticatedTime': time
      });
      this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
    }
  }
  async keepAliveListenKey(params = {}) {
    const listenKey = this.safeString(this.options, 'listenKey');
    if (listenKey === undefined) {
      // A network error happened: we can't renew a listen key that does not exist.
      return;
    }
    const method = 'swap2OpenApiPrivatePutUserAuthUserDataStream';
    const request = {
      'listenKey': listenKey
    };
    const time = this.milliseconds();
    const sendParams = this.omit(params, 'type');
    try {
      await this[method](this.extend(request, sendParams));
    } catch (error) {
      const url = this.urls['api']['ws2'] + '?' + this.options['listenKey'];
      const client = this.client(url);
      const messageHashes = Object.keys(client.futures);
      for (let i = 0; i < messageHashes.length; i++) {
        const messageHash = messageHashes[i];
        client.reject(error, messageHash);
      }
      this.options = this.extend(this.options, {
        'listenKey': undefined,
        'lastAuthenticatedTime': 0
      });
      return;
    }
    this.options = this.extend(this.options, {
      'listenKey': listenKey,
      'lastAuthenticatedTime': time
    });
    // whether or not to schedule another listenKey keepAlive request
    const listenKeyRefreshRate = this.safeInteger(this.options, 'listenKeyRefreshRate', 1200000);
    return this.delay(listenKeyRefreshRate, this.keepAliveListenKey, params);
  }
  handleErrorMessage(client, message) {
    //
    //   {
    //       success: false,
    //       ret_msg: 'error:invalid op',
    //       conn_id: '5e079fdd-9c7f-404d-9dbf-969d650838b5',
    //       request: { op: '', args: null }
    //   }
    //
    // auth error
    //
    //   {
    //       success: false,
    //       ret_msg: 'error:USVC1111',
    //       conn_id: 'e73770fb-a0dc-45bd-8028-140e20958090',
    //       request: {
    //         op: 'auth',
    //         args: [
    //           '9rFT6uR4uz9Imkw4Wx',
    //           '1653405853543',
    //           '542e71bd85597b4db0290f0ce2d13ed1fd4bb5df3188716c1e9cc69a879f7889'
    //         ]
    //   }
    //
    //   { code: '-10009', desc: 'Invalid period!' }
    //
    const code = this.safeInteger(message, 'code');
    try {
      if (code !== 0) {
        const feedback = this.id + ' ' + this.json(message);
        throw new _errors.ExchangeError(feedback);
      }
      const success = this.safeValue(message, 'success');
      if (success !== undefined && !success) {
        const ret_msg = this.safeString(message, 'ret_msg');
        const request = this.safeValue(message, 'request', {});
        const op = this.safeString(request, 'op');
        if (op === 'auth') {
          throw new _errors.AuthenticationError('Authentication failed: ' + ret_msg);
        } else {
          throw new _errors.ExchangeError(this.id + ' ' + ret_msg);
        }
      }
      return false;
    } catch (error) {
      if (error instanceof _errors.AuthenticationError) {
        const messageHash = 'authenticated';
        client.reject(error, messageHash);
        if (messageHash in client.subscriptions) {
          delete client.subscriptions[messageHash];
        }
      } else {
        client.reject(error);
      }
      return true;
    }
  }
  handleMessage(client, message) {
    // pong
    if (message === 'Ping' || this.safeString(message, 'ping', '') !== '') {
      return this.sendPong(client, message);
    }
    if (message === 'Pong' || this.safeString(message, 'pong', '') !== '') {
      return this.handlePong(client, message);
    }
    if (this.handleErrorMessage(client, message)) {
      return;
    }
    // const event = this.safeString (message, 'event');
    // if (event === 'sub') {
    //     this.handleSubscriptionStatus (client, message);
    //     return;
    // }
    const topic = this.safeString(message, 'dataType', '');
    const methods = {
      // 'market.depth.': this.handleOrderBook,
      // 'order': this.handleOrder,
      // 'stopOrder': this.handleOrder,
      // 'trade': this.handleTrades,
      // 'publicTrade': this.handleTrades,
      'market.depth.': this.handleOrderBook,
      'market.trade.detail.': this.handleTrades,
      'market.contracts': this.handleTicker,
      'market.kline': this.handleOHLCV
      // 'wallet': this.handleBalance,
      // 'outboundAccountInfo': this.handleBalance,
      // 'execution': this.handleMyTrades,
      // 'ticketInfo': this.handleMyTrades,
      // 'user.openapi.perp.trade': this.handleMyTrades,
    };

    const keys = Object.keys(methods);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (topic.indexOf(keys[i]) >= 0) {
        const method = methods[key];
        method.call(this, client, message);
        return;
      }
    }
    // unified auth acknowledgement
    // const type = this.safeString (message, 'type');
    // if ((op === 'auth') || (type === 'AUTH_RESP')) {
    //     this.handleAuthenticate (client, message);
    // }
  }

  ping(client) {
    this.client(this.urls['api']['ws']).send('Ping');
    return {
      'ping': this.uuid(),
      'time': this.iso8601(this.milliseconds())
    }; // XD
  }

  sendPong(client, message) {
    this.client(this.urls['api']['ws']).send('Pong');
    this.client(this.urls['api']['ws']).send(this.json({
      'ping': this.uuid(),
      'time': this.iso8601(this.milliseconds())
    }));
  }
  handleAuthenticate(client, message) {
    //
    //    {
    //        success: true,
    //        ret_msg: '',
    //        op: 'auth',
    //        conn_id: 'ce3dpomvha7dha97tvp0-2xh'
    //    }
    //
    const success = this.safeValue(message, 'success');
    const messageHash = 'authenticated';
    if (success) {
      client.resolve(message, messageHash);
    } else {
      const error = new _errors.AuthenticationError(this.id + ' ' + this.json(message));
      client.reject(error, messageHash);
      if (messageHash in client.subscriptions) {
        delete client.subscriptions[messageHash];
      }
    }
    return message;
  }
  handleSubscriptionStatus(client, message) {
    //
    //    {
    //        topic: 'kline',
    //        event: 'sub',
    //        params: {
    //          symbol: 'LTCUSDT',
    //          binary: 'false',
    //          klineType: '1m',
    //          symbolName: 'LTCUSDT'
    //        },
    //        code: '0',
    //        msg: 'Success'
    //    }
    //
    return message;
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name bybit#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/ticker
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/etp-ticker
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const messageHash = 'ticker:' + market['symbol'];
    const url = this.urls['api']['ws'];
    params = this.cleanParams(params);
    const topics = ['market.contracts'];
    return await this.watchTopics(url, messageHash, topics, params);
  }
  handleTicker(client, message) {
    const data = this.safeValue(message, 'data', {});
    const contracts = this.safeValue(data, 'contracts', []);
    for (let i = 0; i < contracts.length; i++) {
      let symbol = undefined;
      let parsed = undefined;
      parsed = this.parseTicker(contracts[i]);
      symbol = parsed['symbol'];
      const timestamp = this.milliseconds() - 0;
      parsed['timestamp'] = timestamp;
      parsed['datetime'] = this.iso8601(timestamp);
      this.tickers[symbol] = parsed;
      const messageHash = 'ticker:' + symbol;
      client.resolve(this.tickers[symbol], messageHash);
    }
  }
  parseTicker(ticker, market = undefined) {
    const timestamp = this.milliseconds() - 0;
    const marketId = this.safeString(ticker, 'symbol');
    market = this.safeMarket(marketId);
    const symbol = this.safeSymbol(marketId);
    const last = this.safeString(ticker, 'tradePrice');
    const mark = this.safeString(ticker, 'fairPrice');
    const open = this.safeString(ticker, 'open');
    const percentage = this.safeString(ticker, 'changePercentage');
    // const quoteVolume = this.safeString (ticker, 'volume2');
    // const baseVolume = this.safeString (ticker, 'volume');
    const bid = this.safeString(ticker, 'tradePrice');
    const ask = this.safeString(ticker, 'tradePrice');
    const high = this.safeString(ticker, 'high');
    const low = this.safeString(ticker, 'low');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': high,
      'low': low,
      'bid': bid,
      'bidVolume': this.safeString2(ticker, 'bidSize', 'bid1Size'),
      'ask': ask,
      'askVolume': this.safeString2(ticker, 'askSize', 'ask1Size'),
      'vwap': undefined,
      'open': open,
      'close': last,
      'last': last,
      'mark': mark,
      'previousClose': undefined,
      'change': undefined,
      'percentage': percentage,
      'average': undefined,
      'baseVolume': '0',
      'quoteVolume': '0',
      'info': ticker
    }, market);
  }
}
exports.default = bingx;

},{"../base/errors.js":5,"../base/ws/Cache.js":17,"../bingx.js":27}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bitget = _interopRequireDefault(require("../bitget.js"));
var _errors = require("../base/errors.js");
var _Precise = require("../base/Precise.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bitget extends _bitget.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': true,
        'watchMyTrades': true,
        'watchOHLCV': true,
        'watchOrderBook': true,
        'watchOrders': true,
        'watchTicker': true,
        'watchTickers': false,
        'watchTrades': true
      },
      'urls': {
        'api': {
          'ws': 'wss://ws.bitget.com/mix/v1/stream'
        }
      },
      'options': {
        'tradesLimit': 1000,
        'OHLCVLimit': 1000,
        // WS timeframes differ from REST timeframes
        'timeframes': {
          '1m': '1m',
          '5m': '5m',
          '15m': '15m',
          '30m': '30m',
          '1h': '1H',
          '4h': '4H',
          '12h': '12H',
          '1d': '1D',
          '1w': '1W'
        }
      },
      'streaming': {
        'ping': this.ping
      },
      'exceptions': {
        'ws': {
          'exact': {
            '30001': _errors.BadRequest,
            '30015': _errors.AuthenticationError // { event: 'error', code: 30015, msg: 'Invalid sign' }
          }
        }
      }
    });
  }

  getWsMarketId(market) {
    // WS don't use the same 'id'
    // as the rest version
    if (market['spot']) {
      return market['info']['symbolName'];
    } else {
      let formattedId = market['id'];
      const marketIdParts = formattedId.split('_');
      if (marketIdParts.length >= 2) {
        const prefix = marketIdParts[0];
        // const suffix = marketIdParts[1];
        formattedId = prefix;
      }
      return formattedId;
    }
  }
  getMarketIdFromArg(arg) {
    //
    // { arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' }
    //
    const instType = this.safeString(arg, 'instType');
    let marketId = this.safeString(arg, 'instId');
    if (instType === 'sp') {
      marketId += '_SPBL';
    } else if (marketId[0] === 'S' && marketId.length > 6 && marketId.slice(-5) === 'SPERP') {
      marketId = marketId + '_SCMCBL';
    } else if (marketId[0] === 'S' && marketId.length > 6 && marketId.slice(-5) === 'SUSDT') {
      marketId = marketId + '_SUMCBL';
    } else if (marketId[0] === 'S' && marketId.length > 6 && marketId.slice(-4) === 'SUSD') {
      marketId = marketId + '_SDMCBL';
    } else if (marketId.slice(-4) === 'PERP') {
      marketId = marketId + '_CMCBL';
    } else if (marketId.slice(-4) === 'USDT') {
      marketId = marketId + '_UMCBL';
    } else if (marketId.slice(-3) === 'USD') {
      marketId = marketId + '_DMCBL';
    }
    return marketId;
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name bitget#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {str} symbol unified symbol of the market to fetch the ticker for
     * @param {dict} params extra parameters specific to the bitget api endpoint
     * @returns {dict} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const messageHash = 'ticker:' + symbol;
    const instType = market['spot'] ? 'sp' : 'mc';
    const args = {
      'instType': instType,
      'channel': 'ticker',
      'instId': this.getWsMarketId(market)
    };
    return await this.watchPublic(messageHash, args, params);
  }
  handleTicker(client, message) {
    //
    //   {
    //       action: 'snapshot',
    //       arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' },
    //       data: [
    //         {
    //           instId: 'BTCUSDT',
    //           last: '21150.53',
    //           open24h: '20759.65',
    //           high24h: '21202.29',
    //           low24h: '20518.82',
    //           bestBid: '21150.500000',
    //           bestAsk: '21150.600000',
    //           baseVolume: '25402.1961',
    //           quoteVolume: '530452554.2156',
    //           ts: 1656408934044,
    //           labeId: 0
    //         }
    //       ]
    //   }
    //
    const ticker = this.parseWsTicker(message);
    const symbol = ticker['symbol'];
    this.tickers[symbol] = ticker;
    const messageHash = 'ticker:' + symbol;
    client.resolve(ticker, messageHash);
    return message;
  }
  parseWsTicker(message, market = undefined) {
    //
    // spot
    //     {
    //         action: 'snapshot',
    //         arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' },
    //         data: [
    //           {
    //             instId: 'BTCUSDT',
    //             last: '21150.53',
    //             open24h: '20759.65',
    //             high24h: '21202.29',
    //             low24h: '20518.82',
    //             bestBid: '21150.500000',
    //             bestAsk: '21150.600000',
    //             baseVolume: '25402.1961',
    //             quoteVolume: '530452554.2156',
    //             ts: 1656408934044,
    //             labeId: 0
    //           }
    //         ]
    //     }
    //
    // contract
    //
    //     {
    //         "action":"snapshot",
    //         "arg":{
    //            "instType":"mc",
    //            "channel":"ticker",
    //            "instId":"LTCUSDT"
    //         },
    //         "data":[
    //            {
    //               "instId":"LTCUSDT",
    //               "last":"52.77",
    //               "bestAsk":"52.78",
    //               "bestBid":"52.75",
    //               "high24h":"54.83",
    //               "low24h":"51.32",
    //               "priceChangePercent":"-0.02",
    //               "capitalRate":"-0.000100",
    //               "nextSettleTime":1656514800000,
    //               "systemTime":1656513146169,
    //               "markPrice":"52.77",
    //               "indexPrice":"52.80",
    //               "holding":"269813.9",
    //               "baseVolume":"75422.0",
    //               "quoteVolume":"3986579.8"
    //            }
    //         ]
    //     }
    //
    const arg = this.safeValue(message, 'arg', {});
    const data = this.safeValue(message, 'data', []);
    const ticker = this.safeValue(data, 0, {});
    const timestamp = this.safeInteger2(ticker, 'ts', 'systemTime');
    const marketId = this.getMarketIdFromArg(arg);
    market = this.safeMarket(marketId, market);
    const close = this.safeString(ticker, 'last');
    const mark = this.safeString(ticker, 'markPrice');
    const open = this.safeString(ticker, 'open24h');
    const high = this.safeString(ticker, 'high24h');
    const low = this.safeString(ticker, 'low24h');
    const baseVolume = this.safeString(ticker, 'baseVolume');
    const quoteVolume = this.safeString(ticker, 'quoteVolume');
    const bid = this.safeString(ticker, 'bestBid');
    const ask = this.safeString(ticker, 'bestAsk');
    return this.safeTicker({
      'symbol': market['symbol'],
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': high,
      'low': low,
      'bid': bid,
      'bidVolume': undefined,
      'ask': ask,
      'askVolume': undefined,
      'vwap': undefined,
      'open': open,
      'close': close,
      'last': close,
      'mark': mark,
      'previousClose': undefined,
      'change': undefined,
      'percentage': undefined,
      'average': undefined,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    }, market);
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @param {str} symbol unified symbol of the market to fetch OHLCV data for
     * @param {str} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {dict} params extra parameters specific to the bitget api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const timeframes = this.safeValue(this.options, 'timeframes');
    const interval = this.safeString(timeframes, timeframe);
    const messageHash = 'candles:' + timeframe + ':' + symbol;
    const instType = market['spot'] ? 'sp' : 'mc';
    const args = {
      'instType': instType,
      'channel': 'candle' + interval,
      'instId': this.getWsMarketId(market)
    };
    const ohlcv = await this.watchPublic(messageHash, args, params);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    //
    //   {
    //       "action":"snapshot",
    //       "arg":{
    //          "instType":"sp",
    //          "channel":"candle1W",
    //          "instId":"BTCUSDT"
    //       },
    //       "data":[
    //          [
    //             "1595779200000",
    //             "9960.05",
    //             "12099.95",
    //             "9839.7",
    //             "11088.68",
    //             "462484.9738"
    //          ],
    //          [
    //             "1596384000000",
    //             "11088.68",
    //             "11909.89",
    //             "10937.54",
    //             "11571.88",
    //             "547596.6484"
    //          ]
    //       ]
    //   }
    //
    const arg = this.safeValue(message, 'arg', {});
    const marketId = this.getMarketIdFromArg(arg);
    const channel = this.safeString(arg, 'channel');
    const interval = channel.replace('candle', '');
    const timeframes = this.safeValue(this.options, 'timeframes');
    const timeframe = this.findTimeframe(interval, timeframes);
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
    let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
      stored = new _Cache.ArrayCacheByTimestamp(limit);
      this.ohlcvs[symbol][timeframe] = stored;
    }
    const data = this.safeValue(message, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const parsed = this.parseWsOHLCV(data[i]);
      stored.append(parsed);
    }
    const messageHash = 'candles:' + timeframe + ':' + symbol;
    client.resolve(stored, messageHash);
  }
  parseWsOHLCV(ohlcv, market = undefined) {
    //
    //   [
    //      "1595779200000", // timestamp
    //      "9960.05", // open
    //      "12099.95", // high
    //      "9839.7", // low
    //      "11088.68", // close
    //      "462484.9738" // volume
    //   ]
    //
    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4)];
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {str} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {dict} params extra parameters specific to the bitget api endpoint
     * @returns {dict} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    // symbol = 'BTCUSD';
    const messageHash = 'orderbook' + ':' + symbol;
    const instType = market['spot'] ? 'sp' : 'mc';
    let channel = 'books';
    let incrementalFeed = true;
    if (limit === 5 || limit === 15) {
      channel += limit.toString();
      incrementalFeed = false;
    }
    const args = {
      'instType': instType,
      'channel': channel,
      'instId': this.getWsMarketId(market)
    };
    const orderbook = await this.watchPublic(messageHash, args, params, false);
    if (incrementalFeed) {
      return orderbook.limit();
    } else {
      return orderbook;
    }
  }
  handleOrderBook(client, message) {
    //
    //   {
    //       "action":"snapshot",
    //       "arg":{
    //          "instType":"sp",
    //          "channel":"books5",
    //          "instId":"BTCUSDT"
    //       },
    //       "data":[
    //          {
    //             "asks":[
    //                ["21041.11","0.0445"],
    //                ["21041.16","0.0411"],
    //                ["21041.21","0.0421"],
    //                ["21041.26","0.0811"],
    //                ["21041.65","1.9465"]
    //             ],
    //             "bids":[
    //                ["21040.76","0.0417"],
    //                ["21040.71","0.0434"],
    //                ["21040.66","0.1141"],
    //                ["21040.61","0.3004"],
    //                ["21040.60","1.3357"]
    //             ],
    //             "ts":"1656413855484"
    //          }
    //       ]
    //   }
    //
    const arg = this.safeValue(message, 'arg');
    const channel = this.safeString(arg, 'channel');
    const marketId = this.getMarketIdFromArg(arg);
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const messageHash = 'orderbook:' + symbol;
    const data = this.safeValue(message, 'data');
    const rawOrderBook = this.safeValue(data, 0);
    const timestamp = this.safeInteger(rawOrderBook, 'ts');
    const incrementalBook = channel === 'books';
    let storedOrderBook = undefined;
    if (incrementalBook) {
      storedOrderBook = this.safeValue(this.orderbooks, symbol);
      if (storedOrderBook === undefined) {
        storedOrderBook = this.countedOrderBook({});
      }
      const asks = this.safeValue(rawOrderBook, 'asks', []);
      const bids = this.safeValue(rawOrderBook, 'bids', []);
      this.handleDeltas(storedOrderBook['asks'], asks);
      this.handleDeltas(storedOrderBook['bids'], bids);
      storedOrderBook['timestamp'] = timestamp;
      storedOrderBook['datetime'] = this.iso8601(timestamp);
      const checksum = this.safeValue(this.options, 'checksum', true);
      if (checksum) {
        const storedAsks = storedOrderBook['asks'];
        const storedBids = storedOrderBook['bids'];
        const asksLength = storedAsks.length;
        const bidsLength = storedBids.length;
        const payloadArray = [];
        for (let i = 0; i < 25; i++) {
          if (i < bidsLength) {
            payloadArray.push(storedBids[i][2][0]);
            payloadArray.push(storedBids[i][2][1]);
          }
          if (i < asksLength) {
            payloadArray.push(storedAsks[i][2][0]);
            payloadArray.push(storedAsks[i][2][1]);
          }
        }
        const payload = payloadArray.join(':');
        const calculatedChecksum = this.crc32(payload, true);
        const responseChecksum = this.safeInteger(rawOrderBook, 'checksum');
        if (calculatedChecksum !== responseChecksum) {
          const error = new _errors.InvalidNonce(this.id + ' invalid checksum');
          client.reject(error, messageHash);
        }
      }
    } else {
      storedOrderBook = this.parseOrderBook(rawOrderBook, symbol, timestamp);
    }
    this.orderbooks[symbol] = storedOrderBook;
    client.resolve(storedOrderBook, messageHash);
  }
  handleDelta(bookside, delta) {
    const bidAsk = this.parseBidAsk(delta, 0, 1);
    // we store the string representations in the orderbook for checksum calculation
    // this simplifies the code for generating checksums as we do not need to do any complex number transformations
    bidAsk.push(delta);
    bookside.storeArray(bidAsk);
  }
  handleDeltas(bookside, deltas) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(bookside, deltas[i]);
    }
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#watchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {str} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {dict} params extra parameters specific to the bitget api endpoint
     * @returns {[dict]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const messageHash = 'trade:' + symbol;
    const instType = market['spot'] ? 'sp' : 'mc';
    const args = {
      'instType': instType,
      'channel': 'trade',
      'instId': this.getWsMarketId(market)
    };
    const trades = await this.watchPublic(messageHash, args, params, false);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  handleTrades(client, message) {
    //
    //    {
    //        action: 'snapshot',
    //        arg: { instType: 'sp', channel: 'trade', instId: 'BTCUSDT' },
    //        data: [
    //          [ '1656411148032', '21047.78', '2.2294', 'buy' ],
    //          [ '1656411142030', '21047.85', '2.1225', 'buy' ],
    //          [ '1656411133064', '21045.88', '1.7704', 'sell' ],
    //          [ '1656411126037', '21052.39', '2.6905', 'buy' ],
    //          [ '1656411118029', '21056.87', '1.2308', 'sell' ],
    //          [ '1656411108028', '21060.01', '1.7186', 'sell' ],
    //          [ '1656411100027', '21060.4', '1.3641', 'buy' ],
    //          [ '1656411093030', '21058.76', '1.5049', 'sell' ]
    //        ]
    //    }
    //
    const arg = this.safeValue(message, 'arg', {});
    const marketId = this.getMarketIdFromArg(arg);
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    let stored = this.safeValue(this.trades, symbol);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      stored = new _Cache.ArrayCache(limit);
      this.trades[symbol] = stored;
    }
    const data = this.safeValue(message, 'data', []);
    for (let j = 0; j < data.length; j++) {
      const rawTrade = data[j];
      const parsed = this.parseWsTrade(rawTrade, market);
      stored.append(parsed);
    }
    const messageHash = 'trade:' + symbol;
    client.resolve(stored, messageHash);
  }
  parseWsTrade(trade, market = undefined) {
    //
    // public trade
    //
    //   [
    //       '1656411148032', // timestamp
    //       '21047.78', // price
    //       '2.2294', // size
    //       'buy', // side
    //   ]
    //
    market = this.safeMarket(undefined, market);
    const timestamp = this.safeInteger(trade, 0);
    const side = this.safeString(trade, 3);
    const price = this.safeString(trade, 1);
    const amount = this.safeString(trade, 2);
    return this.safeTrade({
      'info': trade,
      'id': this.uuid(),
      'order': undefined,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': market['symbol'],
      'type': undefined,
      'side': side,
      'takerOrMaker': undefined,
      'price': price,
      'amount': amount,
      'cost': undefined,
      'fee': undefined
    }, market);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#watchOrders
     * @description watches information on multiple orders made by the user
     * @param {str} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {dict} params extra parameters specific to the bitget api endpoint
     * @returns {[dict]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure
     */
    await this.loadMarkets();
    let market = undefined;
    let marketId = undefined;
    let messageHash = 'order:';
    const subscriptionHash = 'order:trades';
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      marketId = market['id'];
      messageHash += market['symbol'];
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('watchOrders', market, params);
    if (type === 'spot' && symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' watchOrders requires a symbol argument for ' + type + ' markets.');
    }
    const instType = type === 'spot' ? 'spbl' : 'umcbl';
    const instId = type === 'spot' ? marketId : 'default'; // different from other streams here the 'rest' id is required for spot markets, contract markets require default here
    const args = {
      'instType': instType,
      'channel': 'orders',
      'instId': instId
    };
    const orders = await this.watchPrivate(messageHash, subscriptionHash, args, params);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  handleOrder(client, message, subscription = undefined) {
    //
    //
    // spot order
    //    {
    //        action: 'snapshot',
    //        arg: { instType: 'spbl', channel: 'orders', instId: 'LTCUSDT_SPBL' // instId='default' for contracts },
    //        data: [
    //          {
    //            instId: 'LTCUSDT_SPBL',
    //            ordId: '925999649898545152',
    //            clOrdId: '8b2aa69a-6a09-46c0-a50d-7ed50277394c',
    //            px: '20.00',
    //            sz: '0.3000',
    //            notional: '6.000000',
    //            ordType: 'limit',
    //            force: 'normal',
    //            side: 'buy',
    //            accFillSz: '0.0000',
    //            avgPx: '0.00',
    //            status: 'new',
    //            cTime: 1656501441454,
    //            uTime: 1656501441454,
    //            orderFee: []
    //          }
    //        ]
    //    }
    //
    const arg = this.safeValue(message, 'arg', {});
    const instType = this.safeString(arg, 'instType');
    const isContractUpdate = instType === 'umcbl';
    const data = this.safeValue(message, 'data', []);
    if (this.orders === undefined) {
      const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
      this.orders = new _Cache.ArrayCacheBySymbolById(limit);
    }
    const stored = this.orders;
    const marketSymbols = {};
    for (let i = 0; i < data.length; i++) {
      const order = data[i];
      const execType = this.safeString(order, 'execType');
      if (execType === 'T' && isContractUpdate) {
        // partial order updates have the trade info inside
        this.handleMyTrades(client, order);
      }
      const parsed = this.parseWsOrder(order);
      stored.append(parsed);
      const symbol = parsed['symbol'];
      marketSymbols[symbol] = true;
    }
    const keys = Object.keys(marketSymbols);
    for (let i = 0; i < keys.length; i++) {
      const symbol = keys[i];
      const messageHash = 'order:' + symbol;
      client.resolve(stored, messageHash);
    }
  }
  parseWsOrder(order, market = undefined) {
    //
    // spot order
    //     {
    //         instId: 'LTCUSDT_SPBL',
    //         ordId: '925999649898545152',
    //         clOrdId: '8b2aa69a-6a09-46c0-a50d-7ed50277394c',
    //         px: '20.00',
    //         sz: '0.3000',
    //         notional: '6.000000',
    //         ordType: 'limit',
    //         force: 'normal',
    //         side: 'buy',
    //         accFillSz: '0.0000',
    //         avgPx: '0.00',
    //         status: 'new',
    //         cTime: 1656501441454,
    //         uTime: 1656501441454,
    //         orderFee: []
    //     }
    // partial fill
    //
    //    {
    //        instId: 'LTCUSDT_SPBL',
    //        ordId: '926006174213914625',
    //        clOrdId: '7ce28714-0016-46d0-a971-9a713a9923c5',
    //        notional: '5.000000',
    //        ordType: 'market',
    //        force: 'normal',
    //        side: 'buy',
    //        fillPx: '52.11',
    //        tradeId: '926006174514073601',
    //        fillSz: '0.0959',
    //        fillTime: '1656502997043',
    //        fillFee: '-0.0000959',
    //        fillFeeCcy: 'LTC',
    //        execType: 'T',
    //        accFillSz: '0.0959',
    //        avgPx: '52.11',
    //        status: 'partial-fill',
    //        cTime: 1656502996972,
    //        uTime: 1656502997119,
    //        orderFee: [Array]
    //    }
    //
    // contract order
    //    {
    //        accFillSz: '0',
    //        cTime: 1656510642518,
    //        clOrdId: '926038241960431617',
    //        force: 'normal',
    //        instId: 'LTCUSDT_UMCBL',
    //        lever: '20',
    //        notionalUsd: '7.5',
    //        ordId: '926038241859768320',
    //        ordType: 'limit',
    //        orderFee: [
    //             {feeCcy: 'USDT', fee: '0'}
    //        ]
    //        posSide: 'long',
    //        px: '25',
    //        side: 'buy',
    //        status: 'new',
    //        sz: '0.3',
    //        tdMode: 'cross',
    //        tgtCcy: 'USDT',
    //        uTime: 1656510642518
    //    }
    //
    const marketId = this.safeString(order, 'instId');
    market = this.safeMarket(marketId, market);
    const id = this.safeString(order, 'ordId');
    const clientOrderId = this.safeString(order, 'clOrdId');
    const price = this.safeString(order, 'px');
    const filled = this.safeString(order, 'fillSz');
    const amount = this.safeString(order, 'sz');
    const cost = this.safeString2(order, 'notional', 'notionalUsd');
    const average = this.omitZero(this.safeString(order, 'avgPx'));
    const type = this.safeString(order, 'ordType');
    const timestamp = this.safeInteger(order, 'cTime');
    const symbol = market['symbol'];
    let side = this.safeString2(order, 'side', 'posSide');
    if (side === 'open_long' || side === 'close_short') {
      side = 'buy';
    } else if (side === 'close_long' || side === 'open_short') {
      side = 'sell';
    }
    const rawStatus = this.safeString(order, 'status', 'state');
    const timeInForce = this.safeString(order, 'force');
    const status = this.parseWsOrderStatus(rawStatus);
    const orderFee = this.safeValue(order, 'orderFee', []);
    const fee = this.safeValue(orderFee, 0);
    const feeAmount = this.safeString(fee, 'fee');
    let feeObject = undefined;
    if (feeAmount !== undefined) {
      const feeCurrency = this.safeString(fee, 'feeCcy');
      feeObject = {
        'cost': _Precise.Precise.stringAbs(feeAmount),
        'currency': this.safeCurrencyCode(feeCurrency)
      };
    }
    return this.safeOrder({
      'info': order,
      'symbol': symbol,
      'id': id,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': undefined,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': undefined,
      'side': side,
      'price': price,
      'stopPrice': undefined,
      'amount': amount,
      'cost': cost,
      'average': average,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': feeObject,
      'trades': undefined
    }, market);
  }
  parseWsOrderStatus(status) {
    const statuses = {
      'new': 'open',
      'partial-fill': 'open',
      'full-fill': 'closed',
      'filled': 'closed',
      'cancelled': 'canceled'
    };
    return this.safeString(statuses, status, status);
  }
  async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitget#watchMyTrades
     * @description watches trades made by the user
     * @param {str|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {dict} params extra parameters specific to the bitget api endpoint
     * @returns {[dict]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
     */
    // only contracts stream provides the trade info consistently in between order updates
    // the spot stream only provides on limit orders updates so we can't support it for spot
    await this.loadMarkets();
    let market = undefined;
    let messageHash = 'myTrades';
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      messageHash = messageHash + ':' + symbol;
    }
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('watchMyTrades', market, params);
    if (type === 'spot') {
      throw new _errors.NotSupported(this.id + ' watchMyTrades is not supported for ' + type + ' markets.');
    }
    const subscriptionHash = 'order:trades';
    const args = {
      'instType': 'umcbl',
      'channel': 'orders',
      'instId': 'default'
    };
    const trades = await this.watchPrivate(messageHash, subscriptionHash, args, params);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
  }
  handleMyTrades(client, message) {
    //
    // order and trade mixin (contract)
    //
    //   {
    //       accFillSz: '0.1',
    //       avgPx: '52.81',
    //       cTime: 1656511777208,
    //       clOrdId: '926043001195237376',
    //       execType: 'T',
    //       fillFee: '-0.0031686',
    //       fillFeeCcy: 'USDT',
    //       fillNotionalUsd: '5.281',
    //       fillPx: '52.81',
    //       fillSz: '0.1',
    //       fillTime: '1656511777266',
    //       force: 'normal',
    //       instId: 'LTCUSDT_UMCBL',
    //       lever: '1',
    //       notionalUsd: '5.281',
    //       ordId: '926043001132322816',
    //       ordType: 'market',
    //       orderFee: [Array],
    //       pnl: '0.004',
    //       posSide: 'long',
    //       px: '0',
    //       side: 'sell',
    //       status: 'full-fill',
    //       sz: '0.1',
    //       tdMode: 'cross',
    //       tgtCcy: 'USDT',
    //       tradeId: '926043001438552105',
    //       uTime: 1656511777266
    //   }
    //
    if (this.myTrades === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      this.myTrades = new _Cache.ArrayCache(limit);
    }
    const stored = this.myTrades;
    const parsed = this.parseWsMyTrade(message);
    stored.append(parsed);
    const symbol = parsed['symbol'];
    const messageHash = 'myTrades';
    client.resolve(stored, messageHash);
    const symbolSpecificMessageHash = 'myTrades:' + symbol;
    client.resolve(stored, symbolSpecificMessageHash);
  }
  parseWsMyTrade(trade, market = undefined) {
    //
    // order and trade mixin (contract)
    //
    //   {
    //       accFillSz: '0.1',
    //       avgPx: '52.81',
    //       cTime: 1656511777208,
    //       clOrdId: '926043001195237376',
    //       execType: 'T',
    //       fillFee: '-0.0031686',
    //       fillFeeCcy: 'USDT',
    //       fillNotionalUsd: '5.281',
    //       fillPx: '52.81',
    //       fillSz: '0.1',
    //       fillTime: '1656511777266',
    //       force: 'normal',
    //       instId: 'LTCUSDT_UMCBL',
    //       lever: '1',
    //       notionalUsd: '5.281',
    //       ordId: '926043001132322816',
    //       ordType: 'market',
    //       orderFee: [Array],
    //       pnl: '0.004',
    //       posSide: 'long',
    //       px: '0',
    //       side: 'sell',
    //       status: 'full-fill',
    //       sz: '0.1',
    //       tdMode: 'cross',
    //       tgtCcy: 'USDT',
    //       tradeId: '926043001438552105',
    //       uTime: 1656511777266
    //   }
    //
    const id = this.safeString(trade, 'tradeId');
    const orderId = this.safeString(trade, 'ordId');
    const marketId = this.safeString(trade, 'instId');
    market = this.safeMarket(marketId, market);
    const timestamp = this.safeInteger(trade, 'fillTime');
    const side = this.safeString(trade, 'side');
    const price = this.safeString(trade, 'fillPx');
    const amount = this.safeString(trade, 'fillSz');
    const type = this.safeString(trade, 'ordType');
    const cost = this.safeString(trade, 'notional');
    const feeCurrency = this.safeString(trade, 'fillFeeCcy');
    const feeAmount = _Precise.Precise.stringAbs(this.safeString(trade, 'fillFee'));
    const fee = {
      'code': this.safeCurrencyCode(feeCurrency),
      'cost': feeAmount
    };
    return this.safeTrade({
      'info': trade,
      'id': id,
      'order': orderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': market['symbol'],
      'type': type,
      'side': side,
      'takerOrMaker': undefined,
      'price': price,
      'amount': amount,
      'cost': cost,
      'fee': fee
    }, market);
  }
  async watchBalance(params = {}) {
    /**
     * @method
     * @name bitget#watchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {dict} params extra parameters specific to the bitget api endpoint
     * @param {str|undefined} params.type spot or contract if not provided this.options['defaultType'] is used
     * @returns {dict} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('watchOrders', undefined, params);
    const instType = type === 'spot' ? 'spbl' : 'umcbl';
    const args = {
      'instType': instType,
      'channel': 'account',
      'instId': 'default'
    };
    const messageHash = 'balance:' + instType;
    return await this.watchPrivate(messageHash, messageHash, args, params);
  }
  handleBalance(client, message) {
    //
    //    {
    //        action: 'snapshot',
    //        arg: { instType: 'spbl', channel: 'account', instId: 'default' },
    //        data: [
    //          { coinId: '5', coinName: 'LTC', available: '0.1060938000000000' },
    //          { coinId: '2', coinName: 'USDT', available: '13.4498240000000000' }
    //        ]
    //    }
    //
    const data = this.safeValue(message, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const rawBalance = data[i];
      const currencyId = this.safeString(rawBalance, 'coinName');
      const code = this.safeCurrencyCode(currencyId);
      const account = code in this.balance ? this.balance[code] : this.account();
      account['free'] = this.safeString(rawBalance, 'available');
      this.balance[code] = account;
    }
    this.balance = this.safeBalance(this.balance);
    const arg = this.safeValue(message, 'arg');
    const instType = this.safeStringLower(arg, 'instType');
    const messageHash = 'balance:' + instType;
    client.resolve(this.balance, messageHash);
  }
  async watchPublic(messageHash, args, params = {}, shouldThrottle = true) {
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [args]
    };
    const message = this.extend(request, params);
    return await this.watch(url, messageHash, message, messageHash, shouldThrottle);
  }
  async authenticate(params = {}) {
    this.checkRequiredCredentials();
    const url = this.urls['api']['ws'];
    const client = this.client(url);
    const future = client.future('authenticated');
    const messageHash = 'login';
    const authenticated = this.safeValue(client.subscriptions, messageHash);
    if (authenticated === undefined) {
      const timestamp = this.seconds().toString();
      const auth = timestamp + 'GET' + '/user/verify';
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
      const request = {
        'op': messageHash,
        'args': [{
          'apiKey': this.apiKey,
          'passphrase': this.password,
          'timestamp': timestamp,
          'sign': signature
        }]
      };
      this.spawn(this.watch, url, messageHash, this.extend(request, params), messageHash);
    }
    return await future;
  }
  async watchPrivate(messageHash, subscriptionHash, args, params = {}) {
    await this.authenticate();
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [args]
    };
    const message = this.extend(request, params);
    return await this.watch(url, messageHash, message, subscriptionHash);
  }
  handleAuthenticate(client, message) {
    //
    //  { event: 'login', code: 0 }
    //
    const future = client.futures['authenticated'];
    future.resolve(1);
    client.resolve(1, 'login');
    return message;
  }
  handleErrorMessage(client, message) {
    //
    //    { event: 'error', code: 30015, msg: 'Invalid sign' }
    //
    const event = this.safeString(message, 'event');
    try {
      if (event === 'error') {
        const code = this.safeString(message, 'code');
        const feedback = this.id + ' ' + this.json(message);
        this.throwExactlyMatchedException(this.exceptions['ws']['exact'], code, feedback);
      }
    } catch (e) {
      if (e instanceof _errors.AuthenticationError) {
        return false;
      }
    }
    return message;
  }
  handleMessage(client, message) {
    //
    //   {
    //       action: 'snapshot',
    //       arg: { instType: 'sp', channel: 'ticker', instId: 'BTCUSDT' },
    //       data: [
    //         {
    //           instId: 'BTCUSDT',
    //           last: '21150.53',
    //           open24h: '20759.65',
    //           high24h: '21202.29',
    //           low24h: '20518.82',
    //           bestBid: '21150.500000',
    //           bestAsk: '21150.600000',
    //           baseVolume: '25402.1961',
    //           quoteVolume: '530452554.2156',
    //           ts: 1656408934044,
    //           labeId: 0
    //         }
    //       ]
    //   }
    // pong message
    //    'pong'
    //
    // login
    //
    //     { event: 'login', code: 0 }
    //
    // subscribe
    //
    //    {
    //        event: 'subscribe',
    //        arg: { instType: 'spbl', channel: 'account', instId: 'default' }
    //    }
    //
    if (!this.handleErrorMessage(client, message)) {
      return;
    }
    const content = this.safeString(message, 'message');
    if (content === 'pong') {
      this.handlePong(client, message);
      return;
    }
    if (message === 'pong') {
      this.handlePong(client, message);
      return;
    }
    const event = this.safeString(message, 'event');
    if (event === 'login') {
      this.handleAuthenticate(client, message);
      return;
    }
    if (event === 'subscribe') {
      this.handleSubscriptionStatus(client, message);
      return;
    }
    const methods = {
      'ticker': this.handleTicker,
      'trade': this.handleTrades,
      'orders': this.handleOrder,
      'account': this.handleBalance
    };
    const arg = this.safeValue(message, 'arg', {});
    const topic = this.safeValue(arg, 'channel', '');
    const method = this.safeValue(methods, topic);
    if (method !== undefined) {
      method.call(this, client, message);
    }
    if (topic.indexOf('candle') >= 0) {
      this.handleOHLCV(client, message);
    }
    if (topic.indexOf('books') >= 0) {
      this.handleOrderBook(client, message);
    }
  }
  ping(client) {
    return 'ping';
  }
  handleSubscriptionStatus(client, message) {
    //
    //    {
    //        event: 'subscribe',
    //        arg: { instType: 'spbl', channel: 'account', instId: 'default' }
    //    }
    //
    return message;
  }
}
exports.default = bitget;

},{"../base/Precise.js":3,"../base/errors.js":5,"../base/ws/Cache.js":17,"../bitget.js":28}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bitmex = _interopRequireDefault(require("../bitmex.js"));
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bitmex extends _bitmex.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': true,
        'watchMyTrades': true,
        'watchOHLCV': true,
        'watchOrderBook': true,
        'watchOrders': true,
        'watchTicker': true,
        'watchTickers': false,
        'watchTrades': true
      },
      'urls': {
        'test': {
          'ws': 'wss://ws.testnet.bitmex.com/realtime'
        },
        'api': {
          'ws': 'wss://ws.bitmex.com/realtime'
        }
      },
      // 'versions': {
      //     'ws': '0.2.0',
      // },
      'options': {
        'watchOrderBookLevel': 'orderBookL2',
        'tradesLimit': 1000,
        'OHLCVLimit': 1000
      },
      'exceptions': {
        'ws': {
          'exact': {},
          'broad': {
            'Rate limit exceeded': _errors.RateLimitExceeded
          }
        }
      }
    });
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name bitmex#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const name = 'instrument';
    const messageHash = name + ':' + market['id'];
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [messageHash]
    };
    return await this.watch(url, messageHash, this.extend(request, params), messageHash);
  }
  handleTicker(client, message) {
    //
    //     {
    //         table: 'instrument',
    //         action: 'partial',
    //         keys: [ 'symbol' ],
    //         types: {
    //             symbol: 'symbol',
    //             rootSymbol: 'symbol',
    //             state: 'symbol',
    //             typ: 'symbol',
    //             listing: 'timestamp',
    //             front: 'timestamp',
    //             expiry: 'timestamp',
    //             settle: 'timestamp',
    //             relistInterval: 'timespan',
    //             inverseLeg: 'symbol',
    //             sellLeg: 'symbol',
    //             buyLeg: 'symbol',
    //             optionStrikePcnt: 'float',
    //             optionStrikeRound: 'float',
    //             optionStrikePrice: 'float',
    //             optionMultiplier: 'float',
    //             positionCurrency: 'symbol',
    //             underlying: 'symbol',
    //             quoteCurrency: 'symbol',
    //             underlyingSymbol: 'symbol',
    //             reference: 'symbol',
    //             referenceSymbol: 'symbol',
    //             calcInterval: 'timespan',
    //             publishInterval: 'timespan',
    //             publishTime: 'timespan',
    //             maxOrderQty: 'long',
    //             maxPrice: 'float',
    //             lotSize: 'long',
    //             tickSize: 'float',
    //             multiplier: 'long',
    //             settlCurrency: 'symbol',
    //             underlyingToPositionMultiplier: 'long',
    //             underlyingToSettleMultiplier: 'long',
    //             quoteToSettleMultiplier: 'long',
    //             isQuanto: 'boolean',
    //             isInverse: 'boolean',
    //             initMargin: 'float',
    //             maintMargin: 'float',
    //             riskLimit: 'long',
    //             riskStep: 'long',
    //             limit: 'float',
    //             capped: 'boolean',
    //             taxed: 'boolean',
    //             deleverage: 'boolean',
    //             makerFee: 'float',
    //             takerFee: 'float',
    //             settlementFee: 'float',
    //             insuranceFee: 'float',
    //             fundingBaseSymbol: 'symbol',
    //             fundingQuoteSymbol: 'symbol',
    //             fundingPremiumSymbol: 'symbol',
    //             fundingTimestamp: 'timestamp',
    //             fundingInterval: 'timespan',
    //             fundingRate: 'float',
    //             indicativeFundingRate: 'float',
    //             rebalanceTimestamp: 'timestamp',
    //             rebalanceInterval: 'timespan',
    //             openingTimestamp: 'timestamp',
    //             closingTimestamp: 'timestamp',
    //             sessionInterval: 'timespan',
    //             prevClosePrice: 'float',
    //             limitDownPrice: 'float',
    //             limitUpPrice: 'float',
    //             bankruptLimitDownPrice: 'float',
    //             bankruptLimitUpPrice: 'float',
    //             prevTotalVolume: 'long',
    //             totalVolume: 'long',
    //             volume: 'long',
    //             volume24h: 'long',
    //             prevTotalTurnover: 'long',
    //             totalTurnover: 'long',
    //             turnover: 'long',
    //             turnover24h: 'long',
    //             homeNotional24h: 'float',
    //             foreignNotional24h: 'float',
    //             prevPrice24h: 'float',
    //             vwap: 'float',
    //             highPrice: 'float',
    //             lowPrice: 'float',
    //             lastPrice: 'float',
    //             lastPriceProtected: 'float',
    //             lastTickDirection: 'symbol',
    //             lastChangePcnt: 'float',
    //             bidPrice: 'float',
    //             midPrice: 'float',
    //             askPrice: 'float',
    //             impactBidPrice: 'float',
    //             impactMidPrice: 'float',
    //             impactAskPrice: 'float',
    //             hasLiquidity: 'boolean',
    //             openInterest: 'long',
    //             openValue: 'long',
    //             fairMethod: 'symbol',
    //             fairBasisRate: 'float',
    //             fairBasis: 'float',
    //             fairPrice: 'float',
    //             markMethod: 'symbol',
    //             markPrice: 'float',
    //             indicativeTaxRate: 'float',
    //             indicativeSettlePrice: 'float',
    //             optionUnderlyingPrice: 'float',
    //             settledPrice: 'float',
    //             timestamp: 'timestamp'
    //         },
    //         foreignKeys: {
    //             inverseLeg: 'instrument',
    //             sellLeg: 'instrument',
    //             buyLeg: 'instrument'
    //         },
    //         attributes: { symbol: 'unique' },
    //         filter: { symbol: 'XBTUSD' },
    //         data: [
    //             {
    //                 symbol: 'XBTUSD',
    //                 rootSymbol: 'XBT',
    //                 state: 'Open',
    //                 typ: 'FFWCSX',
    //                 listing: '2016-05-13T12:00:00.000Z',
    //                 front: '2016-05-13T12:00:00.000Z',
    //                 expiry: null,
    //                 settle: null,
    //                 relistInterval: null,
    //                 inverseLeg: '',
    //                 sellLeg: '',
    //                 buyLeg: '',
    //                 optionStrikePcnt: null,
    //                 optionStrikeRound: null,
    //                 optionStrikePrice: null,
    //                 optionMultiplier: null,
    //                 positionCurrency: 'USD',
    //                 underlying: 'XBT',
    //                 quoteCurrency: 'USD',
    //                 underlyingSymbol: 'XBT=',
    //                 reference: 'BMEX',
    //                 referenceSymbol: '.BXBT',
    //                 calcInterval: null,
    //                 publishInterval: null,
    //                 publishTime: null,
    //                 maxOrderQty: 10000000,
    //                 maxPrice: 1000000,
    //                 lotSize: 1,
    //                 tickSize: 0.5,
    //                 multiplier: -100000000,
    //                 settlCurrency: 'XBt',
    //                 underlyingToPositionMultiplier: null,
    //                 underlyingToSettleMultiplier: -100000000,
    //                 quoteToSettleMultiplier: null,
    //                 isQuanto: false,
    //                 isInverse: true,
    //                 initMargin: 0.01,
    //                 maintMargin: 0.005,
    //                 riskLimit: 20000000000,
    //                 riskStep: 10000000000,
    //                 limit: null,
    //                 capped: false,
    //                 taxed: true,
    //                 deleverage: true,
    //                 makerFee: -0.00025,
    //                 takerFee: 0.00075,
    //                 settlementFee: 0,
    //                 insuranceFee: 0,
    //                 fundingBaseSymbol: '.XBTBON8H',
    //                 fundingQuoteSymbol: '.USDBON8H',
    //                 fundingPremiumSymbol: '.XBTUSDPI8H',
    //                 fundingTimestamp: '2020-01-29T12:00:00.000Z',
    //                 fundingInterval: '2000-01-01T08:00:00.000Z',
    //                 fundingRate: 0.000597,
    //                 indicativeFundingRate: 0.000652,
    //                 rebalanceTimestamp: null,
    //                 rebalanceInterval: null,
    //                 openingTimestamp: '2020-01-29T11:00:00.000Z',
    //                 closingTimestamp: '2020-01-29T12:00:00.000Z',
    //                 sessionInterval: '2000-01-01T01:00:00.000Z',
    //                 prevClosePrice: 9063.96,
    //                 limitDownPrice: null,
    //                 limitUpPrice: null,
    //                 bankruptLimitDownPrice: null,
    //                 bankruptLimitUpPrice: null,
    //                 prevTotalVolume: 1989881049026,
    //                 totalVolume: 1990196740950,
    //                 volume: 315691924,
    //                 volume24h: 4491824765,
    //                 prevTotalTurnover: 27865497128425564,
    //                 totalTurnover: 27868891594857150,
    //                 turnover: 3394466431587,
    //                 turnover24h: 48863390064843,
    //                 homeNotional24h: 488633.9006484273,
    //                 foreignNotional24h: 4491824765,
    //                 prevPrice24h: 9091,
    //                 vwap: 9192.8663,
    //                 highPrice: 9440,
    //                 lowPrice: 8886,
    //                 lastPrice: 9287,
    //                 lastPriceProtected: 9287,
    //                 lastTickDirection: 'PlusTick',
    //                 lastChangePcnt: 0.0216,
    //                 bidPrice: 9286,
    //                 midPrice: 9286.25,
    //                 askPrice: 9286.5,
    //                 impactBidPrice: 9285.9133,
    //                 impactMidPrice: 9286.75,
    //                 impactAskPrice: 9287.6382,
    //                 hasLiquidity: true,
    //                 openInterest: 967826984,
    //                 openValue: 10432207060536,
    //                 fairMethod: 'FundingRate',
    //                 fairBasisRate: 0.6537149999999999,
    //                 fairBasis: 0.33,
    //                 fairPrice: 9277.2,
    //                 markMethod: 'FairPrice',
    //                 markPrice: 9277.2,
    //                 indicativeTaxRate: 0,
    //                 indicativeSettlePrice: 9276.87,
    //                 optionUnderlyingPrice: null,
    //                 settledPrice: null,
    //                 timestamp: '2020-01-29T11:31:37.114Z'
    //             }
    //         ]
    //     }
    //
    const table = this.safeString(message, 'table');
    const data = this.safeValue(message, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const update = data[i];
      const marketId = this.safeValue(update, 'symbol');
      const market = this.safeMarket(marketId);
      const symbol = market['symbol'];
      const messageHash = table + ':' + marketId;
      let ticker = this.safeValue(this.tickers, symbol, {});
      const info = this.safeValue(ticker, 'info', {});
      ticker = this.parseTicker(this.extend(info, update), market);
      this.tickers[symbol] = ticker;
      client.resolve(ticker, messageHash);
    }
    return message;
  }
  async watchBalance(params = {}) {
    /**
     * @method
     * @name bitmex#watchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    await this.authenticate();
    const messageHash = 'margin';
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [messageHash]
    };
    return await this.watch(url, messageHash, this.extend(request, params), messageHash);
  }
  handleBalance(client, message) {
    //
    //     {
    //         table: 'margin',
    //         action: 'partial',
    //         keys: [ 'account' ],
    //         types: {
    //             account: 'long',
    //             currency: 'symbol',
    //             riskLimit: 'long',
    //             prevState: 'symbol',
    //             state: 'symbol',
    //             action: 'symbol',
    //             amount: 'long',
    //             pendingCredit: 'long',
    //             pendingDebit: 'long',
    //             confirmedDebit: 'long',
    //             prevRealisedPnl: 'long',
    //             prevUnrealisedPnl: 'long',
    //             grossComm: 'long',
    //             grossOpenCost: 'long',
    //             grossOpenPremium: 'long',
    //             grossExecCost: 'long',
    //             grossMarkValue: 'long',
    //             riskValue: 'long',
    //             taxableMargin: 'long',
    //             initMargin: 'long',
    //             maintMargin: 'long',
    //             sessionMargin: 'long',
    //             targetExcessMargin: 'long',
    //             varMargin: 'long',
    //             realisedPnl: 'long',
    //             unrealisedPnl: 'long',
    //             indicativeTax: 'long',
    //             unrealisedProfit: 'long',
    //             syntheticMargin: 'long',
    //             walletBalance: 'long',
    //             marginBalance: 'long',
    //             marginBalancePcnt: 'float',
    //             marginLeverage: 'float',
    //             marginUsedPcnt: 'float',
    //             excessMargin: 'long',
    //             excessMarginPcnt: 'float',
    //             availableMargin: 'long',
    //             withdrawableMargin: 'long',
    //             timestamp: 'timestamp',
    //             grossLastValue: 'long',
    //             commission: 'float'
    //         },
    //         foreignKeys: {},
    //         attributes: { account: 'sorted' },
    //         filter: { account: 1455728 },
    //         data: [
    //             {
    //                 account: 1455728,
    //                 currency: 'XBt',
    //                 riskLimit: 1000000000000,
    //                 prevState: '',
    //                 state: '',
    //                 action: '',
    //                 amount: 263542,
    //                 pendingCredit: 0,
    //                 pendingDebit: 0,
    //                 confirmedDebit: 0,
    //                 prevRealisedPnl: 0,
    //                 prevUnrealisedPnl: 0,
    //                 grossComm: 0,
    //                 grossOpenCost: 0,
    //                 grossOpenPremium: 0,
    //                 grossExecCost: 0,
    //                 grossMarkValue: 0,
    //                 riskValue: 0,
    //                 taxableMargin: 0,
    //                 initMargin: 0,
    //                 maintMargin: 0,
    //                 sessionMargin: 0,
    //                 targetExcessMargin: 0,
    //                 varMargin: 0,
    //                 realisedPnl: 0,
    //                 unrealisedPnl: 0,
    //                 indicativeTax: 0,
    //                 unrealisedProfit: 0,
    //                 syntheticMargin: null,
    //                 walletBalance: 263542,
    //                 marginBalance: 263542,
    //                 marginBalancePcnt: 1,
    //                 marginLeverage: 0,
    //                 marginUsedPcnt: 0,
    //                 excessMargin: 263542,
    //                 excessMarginPcnt: 1,
    //                 availableMargin: 263542,
    //                 withdrawableMargin: 263542,
    //                 timestamp: '2020-08-03T12:01:01.246Z',
    //                 grossLastValue: 0,
    //                 commission: null
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(message, 'data');
    const balance = this.parseBalance(data);
    this.balance = this.extend(this.balance, balance);
    const messageHash = this.safeString(message, 'table');
    client.resolve(this.balance, messageHash);
  }
  handleTrades(client, message) {
    //
    // initial snapshot
    //
    //     {
    //         table: 'trade',
    //         action: 'partial',
    //         keys: [],
    //         types: {
    //             timestamp: 'timestamp',
    //             symbol: 'symbol',
    //             side: 'symbol',
    //             size: 'long',
    //             price: 'float',
    //             tickDirection: 'symbol',
    //             trdMatchID: 'guid',
    //             grossValue: 'long',
    //             homeNotional: 'float',
    //             foreignNotional: 'float'
    //         },
    //         foreignKeys: { symbol: 'instrument', side: 'side' },
    //         attributes: { timestamp: 'sorted', symbol: 'grouped' },
    //         filter: { symbol: 'XBTUSD' },
    //         data: [
    //             {
    //                 timestamp: '2020-01-30T17:03:07.854Z',
    //                 symbol: 'XBTUSD',
    //                 side: 'Buy',
    //                 size: 15000,
    //                 price: 9378,
    //                 tickDirection: 'ZeroPlusTick',
    //                 trdMatchID: '5b426e7f-83d1-2c80-295d-ee995b8ceb4a',
    //                 grossValue: 159945000,
    //                 homeNotional: 1.59945,
    //                 foreignNotional: 15000
    //             }
    //         ]
    //     }
    //
    // updates
    //
    //     {
    //         table: 'trade',
    //         action: 'insert',
    //         data: [
    //             {
    //                 timestamp: '2020-01-30T17:31:40.160Z',
    //                 symbol: 'XBTUSD',
    //                 side: 'Sell',
    //                 size: 37412,
    //                 price: 9521.5,
    //                 tickDirection: 'ZeroMinusTick',
    //                 trdMatchID: 'a4bfc6bc-6cf1-1a11-622e-270eef8ca5c7',
    //                 grossValue: 392938236,
    //                 homeNotional: 3.92938236,
    //                 foreignNotional: 37412
    //             }
    //         ]
    //     }
    //
    const table = 'trade';
    const data = this.safeValue(message, 'data', []);
    const dataByMarketIds = this.groupBy(data, 'symbol');
    const marketIds = Object.keys(dataByMarketIds);
    for (let i = 0; i < marketIds.length; i++) {
      const marketId = marketIds[i];
      const market = this.safeMarket(marketId);
      const messageHash = table + ':' + marketId;
      const symbol = market['symbol'];
      const trades = this.parseTrades(dataByMarketIds[marketId], market);
      let stored = this.safeValue(this.trades, symbol);
      if (stored === undefined) {
        const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
        stored = new _Cache.ArrayCache(limit);
        this.trades[symbol] = stored;
      }
      for (let j = 0; j < trades.length; j++) {
        stored.append(trades[j]);
      }
      client.resolve(stored, messageHash);
    }
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#watchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const table = 'trade';
    const messageHash = table + ':' + market['id'];
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [messageHash]
    };
    const trades = await this.watch(url, messageHash, this.extend(request, params), messageHash, false);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  async authenticate(params = {}) {
    const url = this.urls['api']['ws'];
    const client = this.client(url);
    const future = client.future('authenticated');
    const action = 'authKeyExpires';
    const authenticated = this.safeValue(client.subscriptions, action);
    if (authenticated === undefined) {
      try {
        this.checkRequiredCredentials();
        const timestamp = this.milliseconds();
        const message = 'GET' + '/realtime' + timestamp.toString();
        const signature = this.hmac(this.encode(message), this.encode(this.secret));
        const request = {
          'op': action,
          'args': [this.apiKey, timestamp, signature]
        };
        this.spawn(this.watch, url, action, request, action);
      } catch (e) {
        client.reject(e, 'authenticated');
        if (action in client.subscriptions) {
          delete client.subscriptions[action];
        }
      }
    }
    return future;
  }
  handleAuthenticationMessage(client, message) {
    const authenticated = this.safeValue(message, 'success', false);
    if (authenticated) {
      // we resolve the future here permanently so authentication only happens once
      client.resolve(message, 'authenticated');
    } else {
      const error = new _errors.AuthenticationError(this.json(message));
      client.reject(error, 'authenticated');
      // allows further authentication attempts
      const event = 'authKeyExpires';
      if (event in client.subscriptions) {
        delete client.subscriptions[event];
      }
    }
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#watchOrders
     * @description watches information on multiple orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    await this.authenticate();
    const name = 'order';
    const subscriptionHash = name;
    let messageHash = name;
    if (symbol !== undefined) {
      symbol = this.symbol(symbol);
      messageHash += ':' + symbol;
    }
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [subscriptionHash]
    };
    const orders = await this.watch(url, messageHash, request, subscriptionHash);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  handleOrders(client, message) {
    //
    //     {
    //         table: 'order',
    //         action: 'partial',
    //         keys: [ 'orderID' ],
    //         types: {
    //             orderID: 'guid',
    //             clOrdID: 'string',
    //             clOrdLinkID: 'symbol',
    //             account: 'long',
    //             symbol: 'symbol',
    //             side: 'symbol',
    //             simpleOrderQty: 'float',
    //             orderQty: 'long',
    //             price: 'float',
    //             displayQty: 'long',
    //             stopPx: 'float',
    //             pegOffsetValue: 'float',
    //             pegPriceType: 'symbol',
    //             currency: 'symbol',
    //             settlCurrency: 'symbol',
    //             ordType: 'symbol',
    //             timeInForce: 'symbol',
    //             execInst: 'symbol',
    //             contingencyType: 'symbol',
    //             exDestination: 'symbol',
    //             ordStatus: 'symbol',
    //             triggered: 'symbol',
    //             workingIndicator: 'boolean',
    //             ordRejReason: 'symbol',
    //             simpleLeavesQty: 'float',
    //             leavesQty: 'long',
    //             simpleCumQty: 'float',
    //             cumQty: 'long',
    //             avgPx: 'float',
    //             multiLegReportingType: 'symbol',
    //             text: 'string',
    //             transactTime: 'timestamp',
    //             timestamp: 'timestamp'
    //         },
    //         foreignKeys: { symbol: 'instrument', side: 'side', ordStatus: 'ordStatus' },
    //         attributes: {
    //             orderID: 'grouped',
    //             account: 'grouped',
    //             ordStatus: 'grouped',
    //             workingIndicator: 'grouped'
    //         },
    //         filter: { account: 1455728 },
    //         data: [
    //             {
    //                 orderID: '56222c7a-9956-413a-82cf-99f4812c214b',
    //                 clOrdID: '',
    //                 clOrdLinkID: '',
    //                 account: 1455728,
    //                 symbol: 'XBTUSD',
    //                 side: 'Sell',
    //                 simpleOrderQty: null,
    //                 orderQty: 1,
    //                 price: 40000,
    //                 displayQty: null,
    //                 stopPx: null,
    //                 pegOffsetValue: null,
    //                 pegPriceType: '',
    //                 currency: 'USD',
    //                 settlCurrency: 'XBt',
    //                 ordType: 'Limit',
    //                 timeInForce: 'GoodTillCancel',
    //                 execInst: '',
    //                 contingencyType: '',
    //                 exDestination: 'XBME',
    //                 ordStatus: 'New',
    //                 triggered: '',
    //                 workingIndicator: true,
    //                 ordRejReason: '',
    //                 simpleLeavesQty: null,
    //                 leavesQty: 1,
    //                 simpleCumQty: null,
    //                 cumQty: 0,
    //                 avgPx: null,
    //                 multiLegReportingType: 'SingleSecurity',
    //                 text: 'Submitted via API.',
    //                 transactTime: '2021-01-02T21:38:49.246Z',
    //                 timestamp: '2021-01-02T21:38:49.246Z'
    //             }
    //         ]
    //     }
    //
    //     {
    //         table: 'order',
    //         action: 'insert',
    //         data: [
    //             {
    //                 orderID: 'fa993d8e-f7e4-46ed-8097-04f8e9393585',
    //                 clOrdID: '',
    //                 clOrdLinkID: '',
    //                 account: 1455728,
    //                 symbol: 'XBTUSD',
    //                 side: 'Sell',
    //                 simpleOrderQty: null,
    //                 orderQty: 1,
    //                 price: 40000,
    //                 displayQty: null,
    //                 stopPx: null,
    //                 pegOffsetValue: null,
    //                 pegPriceType: '',
    //                 currency: 'USD',
    //                 settlCurrency: 'XBt',
    //                 ordType: 'Limit',
    //                 timeInForce: 'GoodTillCancel',
    //                 execInst: '',
    //                 contingencyType: '',
    //                 exDestination: 'XBME',
    //                 ordStatus: 'New',
    //                 triggered: '',
    //                 workingIndicator: true,
    //                 ordRejReason: '',
    //                 simpleLeavesQty: null,
    //                 leavesQty: 1,
    //                 simpleCumQty: null,
    //                 cumQty: 0,
    //                 avgPx: null,
    //                 multiLegReportingType: 'SingleSecurity',
    //                 text: 'Submitted via API.',
    //                 transactTime: '2021-01-02T23:49:02.286Z',
    //                 timestamp: '2021-01-02T23:49:02.286Z'
    //             }
    //         ]
    //     }
    //
    //
    //
    //     {
    //         table: 'order',
    //         action: 'update',
    //         data: [
    //             {
    //                 orderID: 'fa993d8e-f7e4-46ed-8097-04f8e9393585',
    //                 ordStatus: 'Canceled',
    //                 workingIndicator: false,
    //                 leavesQty: 0,
    //                 text: 'Canceled: Canceled via API.\nSubmitted via API.',
    //                 timestamp: '2021-01-02T23:50:51.272Z',
    //                 clOrdID: '',
    //                 account: 1455728,
    //                 symbol: 'XBTUSD'
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(message, 'data', []);
    const messageHash = 'order';
    // initial subscription response with multiple orders
    const dataLength = data.length;
    if (dataLength > 0) {
      if (this.orders === undefined) {
        const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
        this.orders = new _Cache.ArrayCacheBySymbolById(limit);
      }
      const stored = this.orders;
      const symbols = {};
      for (let i = 0; i < dataLength; i++) {
        const currentOrder = data[i];
        const orderId = this.safeString(currentOrder, 'orderID');
        const previousOrder = this.safeValue(stored.hashmap, orderId);
        let rawOrder = currentOrder;
        if (previousOrder !== undefined) {
          rawOrder = this.extend(previousOrder['info'], currentOrder);
        }
        const order = this.parseOrder(rawOrder);
        stored.append(order);
        const symbol = order['symbol'];
        symbols[symbol] = true;
      }
      client.resolve(this.orders, messageHash);
      const keys = Object.keys(symbols);
      for (let i = 0; i < keys.length; i++) {
        const symbol = keys[i];
        client.resolve(this.orders, messageHash + ':' + symbol);
      }
    }
  }
  async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#watchMyTrades
     * @description watches information on multiple trades made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    await this.authenticate();
    const name = 'execution';
    const subscriptionHash = name;
    let messageHash = name;
    if (symbol !== undefined) {
      symbol = this.symbol(symbol);
      messageHash += ':' + symbol;
    }
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [subscriptionHash]
    };
    const trades = await this.watch(url, messageHash, request, subscriptionHash);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
  }
  handleMyTrades(client, message) {
    //
    //     {
    //         "table":"execution",
    //         "action":"insert",
    //         "data":[
    //             {
    //                 "execID":"0193e879-cb6f-2891-d099-2c4eb40fee21",
    //                 "orderID":"00000000-0000-0000-0000-000000000000",
    //                 "clOrdID":"",
    //                 "clOrdLinkID":"",
    //                 "account":2,
    //                 "symbol":"XBTUSD",
    //                 "side":"Sell",
    //                 "lastQty":1,
    //                 "lastPx":1134.37,
    //                 "underlyingLastPx":null,
    //                 "lastMkt":"XBME",
    //                 "lastLiquidityInd":"RemovedLiquidity",
    //                 "simpleOrderQty":null,
    //                 "orderQty":1,
    //                 "price":1134.37,
    //                 "displayQty":null,
    //                 "stopPx":null,
    //                 "pegOffsetValue":null,
    //                 "pegPriceType":"",
    //                 "currency":"USD",
    //                 "settlCurrency":"XBt",
    //                 "execType":"Trade",
    //                 "ordType":"Limit",
    //                 "timeInForce":"ImmediateOrCancel",
    //                 "execInst":"",
    //                 "contingencyType":"",
    //                 "exDestination":"XBME",
    //                 "ordStatus":"Filled",
    //                 "triggered":"",
    //                 "workingIndicator":false,
    //                 "ordRejReason":"",
    //                 "simpleLeavesQty":0,
    //                 "leavesQty":0,
    //                 "simpleCumQty":0.001,
    //                 "cumQty":1,
    //                 "avgPx":1134.37,
    //                 "commission":0.00075,
    //                 "tradePublishIndicator":"DoNotPublishTrade",
    //                 "multiLegReportingType":"SingleSecurity",
    //                 "text":"Liquidation",
    //                 "trdMatchID":"7f4ab7f6-0006-3234-76f4-ae1385aad00f",
    //                 "execCost":88155,
    //                 "execComm":66,
    //                 "homeNotional":-0.00088155,
    //                 "foreignNotional":1,
    //                 "transactTime":"2017-04-04T22:07:46.035Z",
    //                 "timestamp":"2017-04-04T22:07:46.035Z"
    //             }
    //         ]
    //     }
    //
    const messageHash = this.safeString(message, 'table');
    const data = this.safeValue(message, 'data', []);
    const dataByExecType = this.groupBy(data, 'execType');
    const rawTrades = this.safeValue(dataByExecType, 'Trade', []);
    const trades = this.parseTrades(rawTrades);
    if (this.myTrades === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      this.myTrades = new _Cache.ArrayCacheBySymbolById(limit);
    }
    const stored = this.myTrades;
    const symbols = {};
    for (let j = 0; j < trades.length; j++) {
      const trade = trades[j];
      const symbol = trade['symbol'];
      stored.append(trade);
      symbols[symbol] = trade;
    }
    const numTrades = trades.length;
    if (numTrades > 0) {
      client.resolve(stored, messageHash);
    }
    const keys = Object.keys(symbols);
    for (let i = 0; i < keys.length; i++) {
      client.resolve(stored, messageHash + ':' + keys[i]);
    }
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    let table = undefined;
    if (limit === undefined) {
      table = this.safeString(this.options, 'watchOrderBookLevel', 'orderBookL2');
    } else if (limit === 25) {
      table = 'orderBookL2_25';
    } else if (limit === 10) {
      table = 'orderBookL10';
    } else {
      throw new _errors.ExchangeError(this.id + ' watchOrderBook limit argument must be undefined (L2), 25 (L2) or 10 (L3)');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const messageHash = table + ':' + market['id'];
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [messageHash]
    };
    const orderbook = await this.watch(url, messageHash, this.deepExtend(request, params), messageHash, false);
    return orderbook.limit();
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bitmex#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the bitmex api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const table = 'tradeBin' + this.safeString(this.timeframes, timeframe, timeframe);
    const messageHash = table + ':' + market['id'];
    const url = this.urls['api']['ws'];
    const request = {
      'op': 'subscribe',
      'args': [messageHash]
    };
    const ohlcv = await this.watch(url, messageHash, this.extend(request, params), messageHash);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    //
    //     {
    //         table: 'tradeBin1m',
    //         action: 'partial',
    //         keys: [],
    //         types: {
    //             timestamp: 'timestamp',
    //             symbol: 'symbol',
    //             open: 'float',
    //             high: 'float',
    //             low: 'float',
    //             close: 'float',
    //             trades: 'long',
    //             volume: 'long',
    //             vwap: 'float',
    //             lastSize: 'long',
    //             turnover: 'long',
    //             homeNotional: 'float',
    //             foreignNotional: 'float'
    //         },
    //         foreignKeys: { symbol: 'instrument' },
    //         attributes: { timestamp: 'sorted', symbol: 'grouped' },
    //         filter: { symbol: 'XBTUSD' },
    //         data: [
    //             {
    //                 timestamp: '2020-02-03T01:13:00.000Z',
    //                 symbol: 'XBTUSD',
    //                 open: 9395,
    //                 high: 9395.5,
    //                 low: 9394.5,
    //                 close: 9395,
    //                 trades: 221,
    //                 volume: 839204,
    //                 vwap: 9394.9643,
    //                 lastSize: 1874,
    //                 turnover: 8932641535,
    //                 homeNotional: 89.32641534999999,
    //                 foreignNotional: 839204
    //             }
    //         ]
    //     }
    //
    //
    //     {
    //         table: 'tradeBin1m',
    //         action: 'insert',
    //         data: [
    //             {
    //                 timestamp: '2020-02-03T18:28:00.000Z',
    //                 symbol: 'XBTUSD',
    //                 open: 9256,
    //                 high: 9256.5,
    //                 low: 9256,
    //                 close: 9256,
    //                 trades: 29,
    //                 volume: 79057,
    //                 vwap: 9256.688,
    //                 lastSize: 100,
    //                 turnover: 854077082,
    //                 homeNotional: 8.540770820000002,
    //                 foreignNotional: 79057
    //             }
    //         ]
    //     }
    //
    const table = this.safeString(message, 'table');
    const interval = table.replace('tradeBin', '');
    const timeframe = this.findTimeframe(interval);
    const duration = this.parseTimeframe(timeframe);
    const candles = this.safeValue(message, 'data', []);
    const results = {};
    for (let i = 0; i < candles.length; i++) {
      const candle = candles[i];
      const marketId = this.safeString(candle, 'symbol');
      const market = this.safeMarket(marketId);
      const symbol = market['symbol'];
      const messageHash = table + ':' + market['id'];
      const result = [this.parse8601(this.safeString(candle, 'timestamp')) - duration * 1000, this.safeFloat(candle, 'open'), this.safeFloat(candle, 'high'), this.safeFloat(candle, 'low'), this.safeFloat(candle, 'close'), this.safeFloat(candle, 'volume')];
      this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
      let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
      if (stored === undefined) {
        const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
        stored = new _Cache.ArrayCacheByTimestamp(limit);
        this.ohlcvs[symbol][timeframe] = stored;
      }
      stored.append(result);
      results[messageHash] = stored;
    }
    const messageHashes = Object.keys(results);
    for (let i = 0; i < messageHashes.length; i++) {
      const messageHash = messageHashes[i];
      client.resolve(results[messageHash], messageHash);
    }
  }
  async watchHeartbeat(params = {}) {
    await this.loadMarkets();
    const event = 'heartbeat';
    const url = this.urls['api']['ws'];
    return await this.watch(url, event);
  }
  handleOrderBook(client, message) {
    //
    // first snapshot
    //
    //     {
    //         table: 'orderBookL2',
    //         action: 'partial',
    //         keys: [ 'symbol', 'id', 'side' ],
    //         types: {
    //             symbol: 'symbol',
    //             id: 'long',
    //             side: 'symbol',
    //             size: 'long',
    //             price: 'float'
    //         },
    //         foreignKeys: { symbol: 'instrument', side: 'side' },
    //         attributes: { symbol: 'parted', id: 'sorted' },
    //         filter: { symbol: 'XBTUSD' },
    //         data: [
    //             { symbol: 'XBTUSD', id: 8700000100, side: 'Sell', size: 1, price: 999999 },
    //             { symbol: 'XBTUSD', id: 8700000200, side: 'Sell', size: 3, price: 999998 },
    //             { symbol: 'XBTUSD', id: 8716991250, side: 'Sell', size: 26, price: 830087.5 },
    //             { symbol: 'XBTUSD', id: 8728701950, side: 'Sell', size: 1720, price: 712980.5 },
    //         ]
    //     }
    //
    // subsequent updates
    //
    //     {
    //         table: 'orderBookL2',
    //         action: 'update',
    //         data: [
    //             { symbol: 'XBTUSD', id: 8799285100, side: 'Sell', size: 70590 },
    //             { symbol: 'XBTUSD', id: 8799285550, side: 'Sell', size: 217652 },
    //             { symbol: 'XBTUSD', id: 8799288950, side: 'Buy', size: 47552 },
    //             { symbol: 'XBTUSD', id: 8799289250, side: 'Buy', size: 78217 },
    //         ]
    //     }
    //
    const action = this.safeString(message, 'action');
    const table = this.safeString(message, 'table');
    const data = this.safeValue(message, 'data', []);
    // if it's an initial snapshot
    if (action === 'partial') {
      const filter = this.safeValue(message, 'filter', {});
      const marketId = this.safeValue(filter, 'symbol');
      const market = this.safeMarket(marketId);
      const symbol = market['symbol'];
      if (table === 'orderBookL2') {
        this.orderbooks[symbol] = this.indexedOrderBook();
      } else if (table === 'orderBookL2_25') {
        this.orderbooks[symbol] = this.indexedOrderBook({}, 25);
      } else if (table === 'orderBook10') {
        this.orderbooks[symbol] = this.indexedOrderBook({}, 10);
      }
      const orderbook = this.orderbooks[symbol];
      for (let i = 0; i < data.length; i++) {
        const price = this.safeFloat(data[i], 'price');
        const size = this.safeFloat(data[i], 'size');
        const id = this.safeString(data[i], 'id');
        let side = this.safeString(data[i], 'side');
        side = side === 'Buy' ? 'bids' : 'asks';
        const bookside = orderbook[side];
        bookside.store(price, size, id);
      }
      const messageHash = table + ':' + marketId;
      client.resolve(orderbook, messageHash);
    } else {
      const numUpdatesByMarketId = {};
      for (let i = 0; i < data.length; i++) {
        const marketId = this.safeValue(data[i], 'symbol');
        if (!(marketId in numUpdatesByMarketId)) {
          numUpdatesByMarketId[marketId] = 0;
        }
        numUpdatesByMarketId[marketId] = this.sum(numUpdatesByMarketId, 1);
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const orderbook = this.orderbooks[symbol];
        const price = this.safeFloat(data[i], 'price');
        const size = this.safeFloat(data[i], 'size', 0);
        const id = this.safeString(data[i], 'id');
        let side = this.safeString(data[i], 'side');
        side = side === 'Buy' ? 'bids' : 'asks';
        const bookside = orderbook[side];
        bookside.store(price, size, id);
      }
      const marketIds = Object.keys(numUpdatesByMarketId);
      for (let i = 0; i < marketIds.length; i++) {
        const marketId = marketIds[i];
        const messageHash = table + ':' + marketId;
        const market = this.safeMarket(marketId);
        const symbol = market['symbol'];
        const orderbook = this.orderbooks[symbol];
        client.resolve(orderbook, messageHash);
      }
    }
  }
  handleSystemStatus(client, message) {
    //
    // todo answer the question whether handleSystemStatus should be renamed
    // and unified as handleStatus for any usage pattern that
    // involves system status and maintenance updates
    //
    //     {
    //         info: 'Welcome to the BitMEX Realtime API.',
    //         version: '2019-11-22T00:24:37.000Z',
    //         timestamp: '2019-11-23T09:02:27.771Z',
    //         docs: 'https://www.bitmex.com/app/wsAPI',
    //         limit: { remaining: 39 }
    //     }
    //
    return message;
  }
  handleSubscriptionStatus(client, message) {
    //
    //     {
    //         success: true,
    //         subscribe: 'orderBookL2:XBTUSD',
    //         request: { op: 'subscribe', args: [ 'orderBookL2:XBTUSD' ] }
    //     }
    //
    return message;
  }
  handleErrorMessage(client, message) {
    //
    // generic error format
    //
    //     { "error": errorMessage }
    //
    // examples
    //
    //     {
    //         "status": 429,
    //         "error": "Rate limit exceeded, retry in 1 seconds.",
    //         "meta": { "retryAfter": 1 },
    //         "request": { "op": "subscribe", "args": "orderBook" },
    //     }
    //
    //     { "error": "Rate limit exceeded, retry in 29 seconds." }
    //
    const error = this.safeValue(message, 'error');
    if (error !== undefined) {
      const request = this.safeValue(message, 'request', {});
      const args = this.safeValue(request, 'args', []);
      const numArgs = args.length;
      if (numArgs > 0) {
        const messageHash = args[0];
        const broad = this.exceptions['ws']['broad'];
        const broadKey = this.findBroadlyMatchedKey(broad, error);
        let exception = undefined;
        if (broadKey === undefined) {
          exception = new _errors.ExchangeError(error);
        } else {
          exception = new broad[broadKey](error);
        }
        client.reject(exception, messageHash);
        return false;
      }
    }
    return true;
  }
  handleMessage(client, message) {
    //
    //     {
    //         info: 'Welcome to the BitMEX Realtime API.',
    //         version: '2019-11-22T00:24:37.000Z',
    //         timestamp: '2019-11-23T09:04:42.569Z',
    //         docs: 'https://www.bitmex.com/app/wsAPI',
    //         limit: { remaining: 38 }
    //     }
    //
    //     {
    //         success: true,
    //         subscribe: 'orderBookL2:XBTUSD',
    //         request: { op: 'subscribe', args: [ 'orderBookL2:XBTUSD' ] }
    //     }
    //
    //     {
    //         table: 'orderBookL2',
    //         action: 'update',
    //         data: [
    //             { symbol: 'XBTUSD', id: 8799284800, side: 'Sell', size: 721000 },
    //             { symbol: 'XBTUSD', id: 8799285100, side: 'Sell', size: 70590 },
    //             { symbol: 'XBTUSD', id: 8799285550, side: 'Sell', size: 217652 },
    //             { symbol: 'XBTUSD', id: 8799285850, side: 'Sell', size: 105578 },
    //             { symbol: 'XBTUSD', id: 8799286350, side: 'Sell', size: 172093 },
    //             { symbol: 'XBTUSD', id: 8799286650, side: 'Sell', size: 201125 },
    //             { symbol: 'XBTUSD', id: 8799288950, side: 'Buy', size: 47552 },
    //             { symbol: 'XBTUSD', id: 8799289250, side: 'Buy', size: 78217 },
    //             { symbol: 'XBTUSD', id: 8799289700, side: 'Buy', size: 193677 },
    //             { symbol: 'XBTUSD', id: 8799290000, side: 'Buy', size: 818161 },
    //             { symbol: 'XBTUSD', id: 8799290500, side: 'Buy', size: 218806 },
    //             { symbol: 'XBTUSD', id: 8799290800, side: 'Buy', size: 102946 }
    //         ]
    //     }
    //
    if (this.handleErrorMessage(client, message)) {
      const table = this.safeString(message, 'table');
      const methods = {
        'orderBookL2': this.handleOrderBook,
        'orderBookL2_25': this.handleOrderBook,
        'orderBook10': this.handleOrderBook,
        'instrument': this.handleTicker,
        'trade': this.handleTrades,
        'tradeBin1m': this.handleOHLCV,
        'tradeBin5m': this.handleOHLCV,
        'tradeBin1h': this.handleOHLCV,
        'tradeBin1d': this.handleOHLCV,
        'order': this.handleOrders,
        'execution': this.handleMyTrades,
        'margin': this.handleBalance
      };
      const method = this.safeValue(methods, table);
      if (method === undefined) {
        const request = this.safeValue(message, 'request', {});
        const op = this.safeValue(request, 'op');
        if (op === 'authKeyExpires') {
          return this.handleAuthenticationMessage.call(this, client, message);
        } else {
          return message;
        }
      } else {
        return method.call(this, client, message);
      }
    }
  }
}
exports.default = bitmex;

},{"../base/errors.js":5,"../base/ws/Cache.js":17,"../bitmex.js":29}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _blofin = _interopRequireDefault(require("../blofin.js"));
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
class blofin extends _blofin.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': false,
        'watchMyTrades': false,
        'watchOHLCV': true,
        'watchOrderBook': true,
        'watchOrders': false,
        'watchTicker': true,
        'watchTickers': true,
        'watchTrades': true
      },
      'urls': {
        'api': {
          'ws': {
            'public': 'wss://openapi.blofin.com/ws/public',
            'private': 'wss://openapi.blofin.com/ws/private'
          }
        },
        'test': {
          'ws': {
            'public': 'wss://openapi.blofin.com/ws/public',
            'private': 'wss://openapi.blofin.com/ws/private'
          }
        }
      },
      'requiredCredentials': {
        'apiKey': true,
        'secret': true,
        'uid': true
      },
      'options': {
        'watchOrderBook': {
          'depth': 'books'
        },
        'tradesLimit': 1000,
        'ordersLimit': 1000,
        'requestId': {}
      },
      'streaming': {
        'ping': this.ping,
        'keepAlive': 10000
      }
    });
  }
  requestId(url) {
    const options = this.safeValue(this.options, 'requestId', {});
    const previousValue = this.safeInteger(options, url, 0);
    const newValue = this.sum(previousValue, 1);
    this.options['requestId'][url] = newValue;
    return newValue;
  }
  async subscribe(access, channel, symbol, params = {}, shouldThrottle = true) {
    await this.loadMarkets();
    const url = this.urls['api']['ws'][access];
    let messageHash = channel;
    const firstArgument = {
      'channel': channel
    };
    if (symbol !== undefined) {
      const market = this.market(symbol);
      messageHash += ':' + market['id'];
      firstArgument['instId'] = market['id'];
    }
    const request = {
      'op': 'subscribe',
      'args': [firstArgument]
    };
    return await this.watch(url, messageHash, this.deepExtend(request, params), messageHash, shouldThrottle);
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    symbol = this.symbol(symbol);
    const trades = await this.subscribe('public', 'trades', symbol, params);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  handleTrades(client, message) {
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const data = this.safeValue(message, 'data', []);
    const tradesLimit = this.safeInteger(this.options, 'tradesLimit', 1000);
    for (let i = 0; i < data.length; i++) {
      const trade = this.parseTrade(data[i]);
      const symbol = trade['symbol'];
      const marketId = this.safeString(trade['info'], 'instId');
      const messageHash = channel + ':' + marketId;
      let stored = this.safeValue(this.trades, symbol);
      if (stored === undefined) {
        stored = new _Cache.ArrayCache(tradesLimit);
        this.trades[symbol] = stored;
      }
      stored.append(trade);
      client.resolve(stored, messageHash);
    }
    return message;
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name okx#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    return await this.subscribe('public', 'tickers', symbol, params);
  }
  handleTicker(client, message) {
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const data = this.safeValue(message, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const ticker = this.parseTicker(data[i]);
      const symbol = ticker['symbol'];
      const marketId = this.safeString(ticker['info'], 'instId');
      const messageHash = channel + ':' + marketId;
      this.tickers[symbol] = ticker;
      client.resolve(ticker, messageHash);
    }
    return message;
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    symbol = this.symbol(symbol);
    const interval = this.safeString(this.timeframes, timeframe, timeframe);
    const name = 'candle' + interval;
    const ohlcv = await this.subscribe('public', name, symbol, params);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const data = this.safeValue(message, 'data', []);
    const marketId = this.safeString(arg, 'instId');
    const market = this.safeMarket(marketId);
    const symbol = market['id'];
    const interval = channel.replace('candle', '');
    // use a reverse lookup in a static map instead
    const timeframe = this.findTimeframe(interval);
    for (let i = 0; i < data.length; i++) {
      const parsed = this.parseOHLCV(data[i], market);
      this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
      let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
      if (stored === undefined) {
        const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
        stored = new _Cache.ArrayCacheByTimestamp(limit);
        this.ohlcvs[symbol][timeframe] = stored;
      }
      stored.append(parsed);
      const messageHash = channel + ':' + marketId;
      client.resolve(stored, messageHash);
    }
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    const options = this.safeValue(this.options, 'watchOrderBook', {});
    // books, 400 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed every 100 ms when there is change in order book.
    // books5, 5 depth levels will be pushed every time. Data will be pushed every 100 ms when there is change in order book.
    // books50-l2-tbt, 50 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed tick by tick, i.e. whenever there is change in order book.
    // books-l2-tbt, 400 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed tick by tick, i.e. whenever there is change in order book.
    const depth = this.safeString(options, 'depth', 'books-l2-tbt');
    const orderbook = await this.subscribe('public', depth, symbol, params, false);
    return orderbook.limit(limit);
  }
  handleDelta(bookside, delta) {
    const price = this.safeFloat(delta, 0);
    const amount = this.safeFloat(delta, 1);
    bookside.store(price, amount);
  }
  handleDeltas(bookside, deltas) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(bookside, deltas[i]);
    }
  }
  handleOrderBookMessage(client, message, orderbook, messageHash) {
    const asks = this.safeValue(message, 'asks', []);
    const bids = this.safeValue(message, 'bids', []);
    const storedAsks = orderbook['asks'];
    const storedBids = orderbook['bids'];
    this.handleDeltas(storedAsks, asks);
    this.handleDeltas(storedBids, bids);
    const checksum = this.safeValue(this.options, 'checksum', true);
    if (checksum) {
      const asksLength = storedAsks.length;
      const bidsLength = storedBids.length;
      const payloadArray = [];
      for (let i = 0; i < 25; i++) {
        if (i < bidsLength) {
          payloadArray.push(this.numberToString(storedBids[i][0]));
          payloadArray.push(this.numberToString(storedBids[i][1]));
        }
        if (i < asksLength) {
          payloadArray.push(this.numberToString(storedAsks[i][0]));
          payloadArray.push(this.numberToString(storedAsks[i][1]));
        }
      }
      // const payload = payloadArray.join (':');
      // const responseChecksum = this.safeInteger (message, 'checksum');
      // const localChecksum = this.crc32 (payload, true);
      // if (responseChecksum !== localChecksum) {
      //     const error = new InvalidNonce (this.id + ' invalid checksum');
      //     client.reject (error, messageHash);
      // }
    }

    const timestamp = this.safeInteger(message, 'ts');
    orderbook['timestamp'] = timestamp;
    orderbook['datetime'] = this.iso8601(timestamp);
    return orderbook;
  }
  handleOrderBook(client, message) {
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const action = this.safeString(message, 'action');
    const data = this.safeValue(message, 'data', {});
    const marketId = this.safeString(arg, 'instId');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const depths = {
      'bbo-tbt': 1,
      'books': 400,
      'books5': 5,
      'books-l2-tbt': 400,
      'books50-l2-tbt': 50
    };
    const limit = this.safeInteger(depths, channel);
    const messageHash = channel + ':' + marketId;
    if (action === 'snapshot') {
      const update = data;
      const orderbook = this.orderBook({}, limit);
      this.orderbooks[symbol] = orderbook;
      orderbook['symbol'] = symbol;
      this.handleOrderBookMessage(client, update, orderbook, messageHash);
      client.resolve(orderbook, messageHash);
    } else if (action === 'update') {
      if (symbol in this.orderbooks) {
        const orderbook = this.orderbooks[symbol];
        const update = data;
        this.handleOrderBookMessage(client, update, orderbook, messageHash);
        client.resolve(orderbook, messageHash);
      }
    }
    //  else if ((channel === 'books5') || (channel === 'bbo-tbt')) {
    //     let orderbook = this.safeValue (this.orderbooks, symbol);
    //     if (orderbook === undefined) {
    //         orderbook = this.orderBook ({}, limit);
    //     }
    //     this.orderbooks[symbol] = orderbook;
    //     for (let i = 0; i < data.length; i++) {
    //         const update = data[i];
    //         const timestamp = this.safeInteger (update, 'ts');
    //         const snapshot = this.parseOrderBook (update, symbol, timestamp, 'bids', 'asks', 0, 1);
    //         orderbook.reset (snapshot);
    //         client.resolve (orderbook, messageHash);
    //     }
    // }
    return message;
  }
  checkRequiredUid() {
    // checkRequiredUid (error = true) {
    return true;
    // if (!this.uid) {
    //     if (error) {
    //         throw new AuthenticationError (this.id + ' requires `uid` credential');
    //     } else {
    //         return false;
    //     }
    // }
    // return true;
  }

  authenticate(params = {}) {
    this.checkRequiredCredentials();
    const url = this.urls['api']['ws']['private'] + '/' + this.uid;
    const client = this.client(url);
    const messageHash = 'authenticated';
    const event = 'auth';
    let future = this.safeValue(client.subscriptions, messageHash);
    if (future === undefined) {
      const ts = this.nonce().toString();
      const auth = '|' + ts;
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
      const request = {
        'event': event,
        'params': {
          'apikey': this.apiKey,
          'sign': signature,
          'timestamp': ts
        }
      };
      const message = this.extend(request, params);
      future = this.watch(url, messageHash, message);
      client.subscriptions[messageHash] = future;
    }
    return future;
  }
  async watchPrivate(messageHash, message, params = {}) {
    await this.authenticate(params);
    const url = this.urls['api']['ws']['private'] + '/' + this.uid;
    const requestId = this.requestId(url);
    const subscribe = {
      'id': requestId
    };
    const request = this.extend(subscribe, message);
    return await this.watch(url, messageHash, request, messageHash, subscribe);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const topic = 'executionreport';
    let messageHash = topic;
    if (symbol !== undefined) {
      const market = this.market(symbol);
      symbol = market['symbol'];
      messageHash += ':' + symbol;
    }
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const orders = await this.watchPrivate(messageHash, message);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  parseWsOrder(order, market = undefined) {
    return this.parseOrder(order, market);
  }
  handleOrderUpdate(client, message) {
    //
    //     {
    //         topic: 'executionreport',
    //         ts: 1657515556799,
    //         data: {
    //             symbol: 'PERP_BTC_USDT',
    //             clientOrderId: 0,
    //             orderId: 52952826,
    //             type: 'LIMIT',
    //             side: 'SELL',
    //             quantity: 0.01,
    //             price: 22000,
    //             tradeId: 0,
    //             executedPrice: 0,
    //             executedQuantity: 0,
    //             fee: 0,
    //             feeAsset: 'USDT',
    //             totalExecutedQuantity: 0,
    //             status: 'NEW',
    //             reason: '',
    //             orderTag: 'default',
    //             totalFee: 0,
    //             visible: 0.01,
    //             timestamp: 1657515556799,
    //             reduceOnly: false,
    //             maker: false
    //         }
    //     }
    //
    const order = this.safeValue(message, 'data');
    this.handleOrder(client, order);
  }
  handleOrder(client, message) {
    const topic = 'executionreport';
    const parsed = this.parseWsOrder(message);
    const symbol = this.safeString(parsed, 'symbol');
    const orderId = this.safeString(parsed, 'id');
    if (symbol !== undefined) {
      if (this.orders === undefined) {
        const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
        this.orders = new _Cache.ArrayCacheBySymbolById(limit);
      }
      const cachedOrders = this.orders;
      const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
      const order = this.safeValue(orders, orderId);
      if (order !== undefined) {
        const fee = this.safeValue(order, 'fee');
        if (fee !== undefined) {
          parsed['fee'] = fee;
        }
        const fees = this.safeValue(order, 'fees');
        if (fees !== undefined) {
          parsed['fees'] = fees;
        }
        parsed['trades'] = this.safeValue(order, 'trades');
        parsed['timestamp'] = this.safeInteger(order, 'timestamp');
        parsed['datetime'] = this.safeString(order, 'datetime');
      }
      cachedOrders.append(parsed);
      client.resolve(this.orders, topic);
      const messageHashSymbol = topic + ':' + symbol;
      client.resolve(this.orders, messageHashSymbol);
    }
  }
  handleMessage(client, message) {
    if (!this.handleErrorMessage(client, message)) {
      return;
    }
    //
    //     { event: 'subscribe', arg: { channel: 'tickers', instId: 'BTC-USDT' } }
    //     { event: 'login', msg: '', code: '0' }
    //
    //     {
    //         arg: { channel: 'tickers', instId: 'BTC-USDT' },
    //         data: [
    //             {
    //                 instType: 'SPOT',
    //                 instId: 'BTC-USDT',
    //                 last: '31500.1',
    //                 lastSz: '0.00001754',
    //                 askPx: '31500.1',
    //                 askSz: '0.00998144',
    //                 bidPx: '31500',
    //                 bidSz: '3.05652439',
    //                 open24h: '31697',
    //                 high24h: '32248',
    //                 low24h: '31165.6',
    //                 sodUtc0: '31385.5',
    //                 sodUtc8: '32134.9',
    //                 volCcy24h: '503403597.38138519',
    //                 vol24h: '15937.10781721',
    //                 ts: '1626526618762'
    //             }
    //         ]
    //     }
    //
    //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
    //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
    //     { event: 'error', msg: 'Invalid OK_ACCESS_KEY', code: '60005' }
    //     {
    //         event: 'error',
    //         msg: 'Illegal request: {"op":"login","args":["de89b035-b233-44b2-9a13-0ccdd00bda0e","7KUcc8YzQhnxBE3K","1626691289","H57N99mBt5NvW8U19FITrPdOxycAERFMaapQWRqLaSE="]}',
    //         code: '60012'
    //     }
    //
    //
    //
    if (message === 'pong') {
      return this.handlePong(client, message);
    }
    // const table = this.safeString (message, 'table');
    // if (table === undefined) {
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const methods = {
      'bbo-tbt': this.handleOrderBook,
      'books': this.handleOrderBook,
      'books5': this.handleOrderBook,
      'books50-l2-tbt': this.handleOrderBook,
      'books-l2-tbt': this.handleOrderBook,
      'tickers': this.handleTicker,
      'trades': this.handleTrades
    };
    const method = this.safeValue(methods, channel);
    if (method === undefined) {
      if ((channel === null || channel === void 0 ? void 0 : channel.indexOf('candle')) === 0) {
        this.handleOHLCV(client, message);
      } else {
        return message;
      }
    } else {
      return method.call(this, client, message);
    }
  }
  ping(client) {
    // okex does not support built-in ws protocol-level ping-pong
    // instead it requires custom text-based ping-pong
    return 'ping';
  }
  handlePong(client, message) {
    client.lastPong = this.milliseconds();
    return message;
  }
  handleErrorMessage(client, message) {
    //
    //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
    //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
    //
    const errorCode = this.safeInteger(message, 'code');
    try {
      if (errorCode) {
        const feedback = this.id + ' ' + this.json(message);
        this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        const messageString = this.safeValue2(message, 'message', 'msg');
        if (messageString !== undefined) {
          this.throwBroadlyMatchedException(this.exceptions['broad'], messageString, feedback);
        }
      }
    } catch (e) {
      if (e instanceof _errors.AuthenticationError) {
        const messageHash = 'authenticated';
        client.reject(e, messageHash);
        if (messageHash in client.subscriptions) {
          delete client.subscriptions[messageHash];
        }
        return false;
      }
    }
    return message;
  }
  handleSubscribe(client, message) {
    //
    //     {
    //         id: '666888',
    //         event: 'subscribe',
    //         success: true,
    //         ts: 1657117712212
    //     }
    //
    return message;
  }
  handleAuth(client, message) {
    //
    //     {
    //         event: 'auth',
    //         success: true,
    //         ts: 1657463158812
    //     }
    //
    const messageHash = 'authenticated';
    const success = this.safeValue(message, 'success');
    if (success) {
      client.resolve(message, messageHash);
    } else {
      const error = new _errors.AuthenticationError(this.json(message));
      client.reject(error, messageHash);
      // allows further authentication attempts
      if (messageHash in client.subscriptions) {
        delete client.subscriptions['authenticated'];
      }
    }
  }
}
exports.default = blofin;

},{"../base/errors.js":5,"../base/ws/Cache.js":17,"../blofin.js":30}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bybit = _interopRequireDefault(require("../bybit.js"));
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class bybit extends _bybit.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': true,
        'watchMyTrades': true,
        'watchOHLCV': true,
        'watchOrderBook': true,
        'watchOrders': true,
        'watchTicker': true,
        'watchTickers': false,
        'watchTrades': true,
        'watchPosition': undefined
      },
      'urls': {
        'api': {
          'ws': {
            'public': {
              'spot': 'wss://stream.{hostname}/v5/public/spot',
              'inverse': 'wss://stream.{hostname}/v5/public/inverse',
              'option': 'wss://stream.{hostname}/v5/public/option',
              'linear': 'wss://stream.{hostname}/v5/public/linear'
            },
            'private': {
              'spot': {
                'unified': 'wss://stream.{hostname}/v5/private',
                'nonUnified': 'wss://stream.{hostname}/spot/private/v3'
              },
              'contract': 'wss://stream.{hostname}/v5/private',
              'usdc': 'wss://stream.{hostname}/trade/option/usdc/private/v1'
            }
          }
        },
        'test': {
          'ws': {
            'public': {
              'spot': 'wss://stream-testnet.{hostname}/v5/public/spot',
              'inverse': 'wss://stream-testnet.{hostname}/v5/public/inverse',
              'linear': 'wss://stream-testnet.{hostname}/v5/public/linear',
              'option': 'wss://stream-testnet.{hostname}/v5/public/option'
            },
            'private': {
              'spot': {
                'unified': 'wss://stream-testnet.{hostname}/v5/private',
                'nonUnified': 'wss://stream-testnet.{hostname}/spot/private/v3'
              },
              'contract': 'wss://stream-testnet.{hostname}/v5/private',
              'usdc': 'wss://stream-testnet.{hostname}/trade/option/usdc/private/v1'
            }
          }
        }
      },
      'options': {
        'watchTicker': {
          'name': 'tickers' // 'tickers' for 24hr statistical ticker or 'tickers_lt' for leverage token ticker
        },

        'spot': {
          'timeframes': {
            '1m': '1m',
            '3m': '3m',
            '5m': '5m',
            '15m': '15m',
            '30m': '30m',
            '1h': '1h',
            '2h': '2h',
            '4h': '4h',
            '6h': '6h',
            '12h': '12h',
            '1d': '1d',
            '1w': '1w',
            '1M': '1M'
          }
        },
        'contract': {
          'timeframes': {
            '1m': '1',
            '3m': '3',
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '2h': '120',
            '4h': '240',
            '6h': '360',
            '12h': '720',
            '1d': 'D',
            '1w': 'W',
            '1M': 'M'
          }
        }
      },
      'streaming': {
        'ping': this.ping,
        'keepAlive': 20000
      },
      'exceptions': {
        'ws': {
          'exact': {}
        }
      }
    });
  }
  requestId() {
    const requestId = this.sum(this.safeInteger(this.options, 'requestId', 0), 1);
    this.options['requestId'] = requestId;
    return requestId;
  }
  getUrlByMarketType(symbol = undefined, isPrivate = false, method = undefined, params = {}) {
    const accessibility = isPrivate ? 'private' : 'public';
    let isUsdcSettled = undefined;
    let isSpot = undefined;
    let type = undefined;
    let market = undefined;
    let url = this.urls['api']['ws'];
    if (symbol !== undefined) {
      market = this.market(symbol);
      isUsdcSettled = market['settle'] === 'USDC';
      type = market['type'];
    } else {
      [type, params] = this.handleMarketTypeAndParams(method, undefined, params);
      let defaultSettle = this.safeString(this.options, 'defaultSettle');
      defaultSettle = this.safeString2(params, 'settle', 'defaultSettle', defaultSettle);
      isUsdcSettled = defaultSettle === 'USDC';
    }
    isSpot = type === 'spot';
    if (isPrivate) {
      url = isUsdcSettled ? url[accessibility]['usdc'] : url[accessibility]['contract'];
    } else {
      if (isSpot) {
        url = url[accessibility]['spot'];
      } else if (type === 'swap') {
        let subType = undefined;
        [subType, params] = this.handleSubTypeAndParams(method, market, params, 'linear');
        url = url[accessibility][subType];
      } else {
        // option
        url = url[accessibility]['option'];
      }
    }
    url = this.implodeHostname(url);
    return url;
  }
  cleanParams(params) {
    params = this.omit(params, ['type', 'subType', 'settle', 'defaultSettle', 'unifiedMargin']);
    return params;
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name bybit#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/ticker
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/etp-ticker
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const messageHash = 'ticker:' + market['symbol'];
    const url = this.getUrlByMarketType(symbol, false, params);
    params = this.cleanParams(params);
    const options = this.safeValue(this.options, 'watchTicker', {});
    let topic = this.safeString(options, 'name', 'tickers');
    if (!market['spot'] && topic !== 'tickers') {
      throw new _errors.BadRequest(this.id + ' watchTicker() only supports name tickers for contract markets');
    }
    topic += '.' + market['id'];
    const topics = [topic];
    return await this.watchTopics(url, messageHash, topics, params);
  }
  handleTicker(client, message) {
    //
    // linear
    //     {
    //         "topic": "tickers.BTCUSDT",
    //         "type": "snapshot",
    //         "data": {
    //             "symbol": "BTCUSDT",
    //             "tickDirection": "PlusTick",
    //             "price24hPcnt": "0.017103",
    //             "lastPrice": "17216.00",
    //             "prevPrice24h": "16926.50",
    //             "highPrice24h": "17281.50",
    //             "lowPrice24h": "16915.00",
    //             "prevPrice1h": "17238.00",
    //             "markPrice": "17217.33",
    //             "indexPrice": "17227.36",
    //             "openInterest": "68744.761",
    //             "openInterestValue": "1183601235.91",
    //             "turnover24h": "1570383121.943499",
    //             "volume24h": "91705.276",
    //             "nextFundingTime": "1673280000000",
    //             "fundingRate": "-0.000212",
    //             "bid1Price": "17215.50",
    //             "bid1Size": "84.489",
    //             "ask1Price": "17216.00",
    //             "ask1Size": "83.020"
    //         },
    //         "cs": 24987956059,
    //         "ts": 1673272861686
    //     }
    //
    // option
    //     {
    //         "id": "tickers.BTC-6JAN23-17500-C-2480334983-1672917511074",
    //         "topic": "tickers.BTC-6JAN23-17500-C",
    //         "ts": 1672917511074,
    //         "data": {
    //             "symbol": "BTC-6JAN23-17500-C",
    //             "bidPrice": "0",
    //             "bidSize": "0",
    //             "bidIv": "0",
    //             "askPrice": "10",
    //             "askSize": "5.1",
    //             "askIv": "0.514",
    //             "lastPrice": "10",
    //             "highPrice24h": "25",
    //             "lowPrice24h": "5",
    //             "markPrice": "7.86976724",
    //             "indexPrice": "16823.73",
    //             "markPriceIv": "0.4896",
    //             "underlyingPrice": "16815.1",
    //             "openInterest": "49.85",
    //             "turnover24h": "446802.8473",
    //             "volume24h": "26.55",
    //             "totalVolume": "86",
    //             "totalTurnover": "1437431",
    //             "delta": "0.047831",
    //             "gamma": "0.00021453",
    //             "vega": "0.81351067",
    //             "theta": "-19.9115368",
    //             "predictedDeliveryPrice": "0",
    //             "change24h": "-0.33333334"
    //         },
    //         "type": "snapshot"
    //     }
    //
    // spot
    //     {
    //         "topic": "tickers.BTCUSDT",
    //         "ts": 1673853746003,
    //         "type": "snapshot",
    //         "cs": 2588407389,
    //         "data": {
    //             "symbol": "BTCUSDT",
    //             "lastPrice": "21109.77",
    //             "highPrice24h": "21426.99",
    //             "lowPrice24h": "20575",
    //             "prevPrice24h": "20704.93",
    //             "volume24h": "6780.866843",
    //             "turnover24h": "141946527.22907118",
    //             "price24hPcnt": "0.0196",
    //             "usdIndexPrice": "21120.2400136"
    //         }
    //     }
    //
    // lt ticker
    //     {
    //         "topic": "tickers_lt.EOS3LUSDT",
    //         "ts": 1672325446847,
    //         "type": "snapshot",
    //         "data": {
    //             "symbol": "EOS3LUSDT",
    //             "lastPrice": "0.41477848043290448",
    //             "highPrice24h": "0.435285472510871305",
    //             "lowPrice24h": "0.394601507960931382",
    //             "prevPrice24h": "0.431502290172376349",
    //             "price24hPcnt": "-0.0388"
    //         }
    //     }
    //
    const topic = this.safeString(message, 'topic', '');
    const updateType = this.safeString(message, 'type', '');
    const data = this.safeValue(message, 'data', {});
    const isSpot = this.safeString(data, 's') !== undefined;
    let symbol = undefined;
    let parsed = undefined;
    if (updateType === 'snapshot' || isSpot) {
      parsed = this.parseTicker(data);
      symbol = parsed['symbol'];
    } else if (updateType === 'delta') {
      const topicParts = topic.split('.');
      const topicLength = topicParts.length;
      const marketId = this.safeString(topicParts, topicLength - 1);
      const market = this.market(marketId);
      symbol = market['symbol'];
      // update the info in place
      const ticker = this.safeValue(this.tickers, symbol, {});
      const rawTicker = this.safeValue(ticker, 'info', {});
      const merged = this.extend(rawTicker, data);
      parsed = this.parseTicker(merged);
    }
    const timestamp = this.safeInteger(message, 'ts');
    parsed['timestamp'] = timestamp;
    parsed['datetime'] = this.iso8601(timestamp);
    this.tickers[symbol] = parsed;
    const messageHash = 'ticker:' + symbol;
    client.resolve(this.tickers[symbol], messageHash);
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/kline
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/etp-kline
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.getUrlByMarketType(symbol, false, params);
    params = this.cleanParams(params);
    let ohlcv = undefined;
    const timeframeId = this.safeString(this.timeframes, timeframe, timeframe);
    const topics = ['kline.' + timeframeId + '.' + market['id']];
    const messageHash = 'kline' + ':' + timeframeId + ':' + symbol;
    ohlcv = await this.watchTopics(url, messageHash, topics, params);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    //
    //     {
    //         "topic": "kline.5.BTCUSDT",
    //         "data": [
    //             {
    //                 "start": 1672324800000,
    //                 "end": 1672325099999,
    //                 "interval": "5",
    //                 "open": "16649.5",
    //                 "close": "16677",
    //                 "high": "16677",
    //                 "low": "16608",
    //                 "volume": "2.081",
    //                 "turnover": "34666.4005",
    //                 "confirm": false,
    //                 "timestamp": 1672324988882
    //             }
    //         ],
    //         "ts": 1672324988882,
    //         "type": "snapshot"
    //     }
    //
    const data = this.safeValue(message, 'data', {});
    const topic = this.safeString(message, 'topic');
    const topicParts = topic.split('.');
    const topicLength = topicParts.length;
    const timeframeId = this.safeString(topicParts, 1);
    const marketId = this.safeString(topicParts, topicLength - 1);
    const isSpot = client.url.indexOf('spot') > -1;
    const marketType = isSpot ? 'spot' : 'contract';
    const market = this.safeMarket(marketId, undefined, undefined, marketType);
    const symbol = market['symbol'];
    const ohlcvsByTimeframe = this.safeValue(this.ohlcvs, symbol);
    if (ohlcvsByTimeframe === undefined) {
      this.ohlcvs[symbol] = {};
    }
    let stored = this.safeValue(ohlcvsByTimeframe, timeframeId);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
      stored = new _Cache.ArrayCacheByTimestamp(limit);
      this.ohlcvs[symbol][timeframeId] = stored;
    }
    for (let i = 0; i < data.length; i++) {
      const parsed = this.parseWsOHLCV(data[i]);
      stored.append(parsed);
    }
    const messageHash = 'kline' + ':' + timeframeId + ':' + symbol;
    client.resolve(stored, messageHash);
  }
  parseWsOHLCV(ohlcv) {
    //
    //     {
    //         "start": 1670363160000,
    //         "end": 1670363219999,
    //         "interval": "1",
    //         "open": "16987.5",
    //         "close": "16987.5",
    //         "high": "16988",
    //         "low": "16987.5",
    //         "volume": "23.511",
    //         "turnover": "399396.344",
    //         "confirm": false,
    //         "timestamp": 1670363219614
    //     }
    //
    return [this.safeInteger(ohlcv, 'timestamp'), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber2(ohlcv, 'volume', 'turnover')];
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return.
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.getUrlByMarketType(symbol, false, params);
    params = this.cleanParams(params);
    const messageHash = 'orderbook' + ':' + symbol;
    if (limit === undefined) {
      if (market['spot']) {
        limit = 50;
      } else {
        limit = 500;
      }
    } else {
      if (!market['spot']) {
        // bybit only support limit 1, 50, 200, 500 for contract
        if (limit !== 1 && limit !== 50 && limit !== 200 && limit !== 500) {
          throw new _errors.BadRequest(this.id + ' watchOrderBook() can only use limit 1, 50, 200 and 500.');
        }
      }
    }
    const topics = ['orderbook.' + limit.toString() + '.' + market['id']];
    const orderbook = await this.watchTopics(url, messageHash, topics, params);
    return orderbook.limit();
  }
  handleOrderBook(client, message) {
    //
    //     {
    //         "topic": "orderbook.50.BTCUSDT",
    //         "type": "snapshot",
    //         "ts": 1672304484978,
    //         "data": {
    //             "s": "BTCUSDT",
    //             "b": [
    //                 ...,
    //                 [
    //                     "16493.50",
    //                     "0.006"
    //                 ],
    //                 [
    //                     "16493.00",
    //                     "0.100"
    //                 ]
    //             ],
    //             "a": [
    //                 [
    //                     "16611.00",
    //                     "0.029"
    //                 ],
    //                 [
    //                     "16612.00",
    //                     "0.213"
    //                 ],
    //             ],
    //             "u": 18521288,
    //             "seq": 7961638724
    //         }
    //     }
    //
    const isSpot = client.url.indexOf('spot') >= 0;
    const type = this.safeString(message, 'type');
    const isSnapshot = type === 'snapshot';
    const data = this.safeValue(message, 'data', {});
    const marketId = this.safeString(data, 's');
    const marketType = isSpot ? 'spot' : 'contract';
    const market = this.safeMarket(marketId, undefined, undefined, marketType);
    const symbol = market['symbol'];
    const timestamp = this.safeInteger(message, 'ts');
    let orderbook = this.safeValue(this.orderbooks, symbol);
    if (orderbook === undefined) {
      orderbook = this.orderBook();
    }
    if (isSnapshot) {
      const snapshot = this.parseOrderBook(data, symbol, timestamp, 'b', 'a');
      orderbook.reset(snapshot);
    } else {
      const asks = this.safeValue(data, 'a', []);
      const bids = this.safeValue(data, 'b', []);
      this.handleDeltas(orderbook['asks'], asks);
      this.handleDeltas(orderbook['bids'], bids);
      orderbook['timestamp'] = timestamp;
      orderbook['datetime'] = this.iso8601(timestamp);
    }
    const messageHash = 'orderbook' + ':' + symbol;
    this.orderbooks[symbol] = orderbook;
    client.resolve(orderbook, messageHash);
  }
  handleDelta(bookside, delta) {
    const bidAsk = this.parseBidAsk(delta, 0, 1);
    bookside.storeArray(bidAsk);
  }
  handleDeltas(bookside, deltas) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(bookside, deltas[i]);
    }
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#watchTrades
     * @description watches information on multiple trades made in a market
     * @see https://bybit-exchange.github.io/docs/v5/websocket/public/trade
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.getUrlByMarketType(symbol, false, params);
    params = this.cleanParams(params);
    const messageHash = 'trade:' + symbol;
    const topic = 'publicTrade.' + market['id'];
    const trades = await this.watchTopics(url, messageHash, [topic], params);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  handleTrades(client, message) {
    //
    //     {
    //         "topic": "publicTrade.BTCUSDT",
    //         "type": "snapshot",
    //         "ts": 1672304486868,
    //         "data": [
    //             {
    //                 "T": 1672304486865,
    //                 "s": "BTCUSDT",
    //                 "S": "Buy",
    //                 "v": "0.001",
    //                 "p": "16578.50",
    //                 "L": "PlusTick",
    //                 "i": "20f43950-d8dd-5b31-9112-a178eb6023af",
    //                 "BT": false
    //             }
    //         ]
    //     }
    //
    const data = this.safeValue(message, 'data', {});
    const topic = this.safeString(message, 'topic');
    const trades = data;
    const parts = topic.split('.');
    const isSpot = client.url.indexOf('spot') >= 0;
    const marketType = isSpot ? 'spot' : 'contract';
    const marketId = this.safeString(parts, 1);
    const market = this.safeMarket(marketId, undefined, undefined, marketType);
    const symbol = market['symbol'];
    let stored = this.safeValue(this.trades, symbol);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      stored = new _Cache.ArrayCache(limit);
      this.trades[symbol] = stored;
    }
    for (let j = 0; j < trades.length; j++) {
      const parsed = this.parseWsTrade(trades[j], market);
      stored.append(parsed);
    }
    const messageHash = 'trade' + ':' + symbol;
    client.resolve(stored, messageHash);
  }
  parseWsTrade(trade, market = undefined) {
    //
    // public
    //    {
    //         "T": 1672304486865,
    //         "s": "BTCUSDT",
    //         "S": "Buy",
    //         "v": "0.001",
    //         "p": "16578.50",
    //         "L": "PlusTick",
    //         "i": "20f43950-d8dd-5b31-9112-a178eb6023af",
    //         "BT": false
    //     }
    //
    // spot private
    //     {
    //         "e": "ticketInfo",
    //         "E": "1662348310386",
    //         "s": "BTCUSDT",
    //         "q": "0.001007",
    //         "t": "1662348310373",
    //         "p": "19842.02",
    //         "T": "2100000000002220938",
    //         "o": "1238261807653647872",
    //         "c": "spotx008",
    //         "O": "1238225004531834368",
    //         "a": "533287",
    //         "A": "642908",
    //         "m": false,
    //         "S": "BUY"
    //     }
    //
    const id = this.safeStringN(trade, ['i', 'T', 'v']);
    const isContract = ('BT' in trade);
    let marketType = isContract ? 'contract' : 'spot';
    if (market !== undefined) {
      marketType = market['type'];
    }
    const marketId = this.safeString(trade, 's');
    market = this.safeMarket(marketId, market, undefined, marketType);
    const symbol = market['symbol'];
    const timestamp = this.safeInteger2(trade, 't', 'T');
    let side = this.safeStringLower(trade, 'S');
    let takerOrMaker = undefined;
    const m = this.safeValue(trade, 'm');
    if (side === undefined) {
      side = m ? 'buy' : 'sell';
    } else {
      // spot private
      takerOrMaker = m;
    }
    const price = this.safeString(trade, 'p');
    const amount = this.safeString2(trade, 'q', 'v');
    const orderId = this.safeString(trade, 'o');
    return this.safeTrade({
      'id': id,
      'info': trade,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'order': orderId,
      'type': undefined,
      'side': side,
      'takerOrMaker': takerOrMaker,
      'price': price,
      'amount': amount,
      'cost': undefined,
      'fee': undefined
    }, market);
  }
  getPrivateType(url) {
    if (url.indexOf('spot') >= 0) {
      return 'spot';
    } else if (url.indexOf('v5/private') >= 0) {
      return 'unified';
    } else {
      return 'usdc';
    }
  }
  async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#watchMyTrades
     * @description watches information on multiple trades made by the user
     * @see https://bybit-exchange.github.io/docs/v5/websocket/private/execution
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @param {boolean} params.unifiedMargin use unified margin account
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    const method = 'watchMyTrades';
    let messageHash = 'myTrades';
    await this.loadMarkets();
    if (symbol !== undefined) {
      symbol = this.symbol(symbol);
      messageHash += ':' + symbol;
    }
    const url = this.getUrlByMarketType(symbol, true, method, params);
    await this.authenticate(url);
    const topicByMarket = {
      'spot': 'ticketInfo',
      'unified': 'execution',
      'usdc': 'user.openapi.perp.trade'
    };
    const topic = this.safeValue(topicByMarket, this.getPrivateType(url));
    const trades = await this.watchTopics(url, messageHash, [topic], params);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  handleMyTrades(client, message) {
    //
    // spot
    //    {
    //        "type": "snapshot",
    //        "topic": "ticketInfo",
    //        "ts": "1662348310388",
    //        "data": [
    //            {
    //                "e": "ticketInfo",
    //                "E": "1662348310386",
    //                "s": "BTCUSDT",
    //                "q": "0.001007",
    //                "t": "1662348310373",
    //                "p": "19842.02",
    //                "T": "2100000000002220938",
    //                "o": "1238261807653647872",
    //                "c": "spotx008",
    //                "O": "1238225004531834368",
    //                "a": "533287",
    //                "A": "642908",
    //                "m": false,
    //                "S": "BUY"
    //            }
    //        ]
    //    }
    // unified
    //     {
    //         "id": "592324803b2785-26fa-4214-9963-bdd4727f07be",
    //         "topic": "execution",
    //         "creationTime": 1672364174455,
    //         "data": [
    //             {
    //                 "category": "linear",
    //                 "symbol": "XRPUSDT",
    //                 "execFee": "0.005061",
    //                 "execId": "7e2ae69c-4edf-5800-a352-893d52b446aa",
    //                 "execPrice": "0.3374",
    //                 "execQty": "25",
    //                 "execType": "Trade",
    //                 "execValue": "8.435",
    //                 "isMaker": false,
    //                 "feeRate": "0.0006",
    //                 "tradeIv": "",
    //                 "markIv": "",
    //                 "blockTradeId": "",
    //                 "markPrice": "0.3391",
    //                 "indexPrice": "",
    //                 "underlyingPrice": "",
    //                 "leavesQty": "0",
    //                 "orderId": "f6e324ff-99c2-4e89-9739-3086e47f9381",
    //                 "orderLinkId": "",
    //                 "orderPrice": "0.3207",
    //                 "orderQty": "25",
    //                 "orderType": "Market",
    //                 "stopOrderType": "UNKNOWN",
    //                 "side": "Sell",
    //                 "execTime": "1672364174443",
    //                 "isLeverage": "0"
    //             }
    //         ]
    //     }
    //
    const topic = this.safeString(message, 'topic');
    const spot = topic === 'ticketInfo';
    let data = this.safeValue(message, 'data', []);
    if (!Array.isArray(data)) {
      data = this.safeValue(data, 'result', []);
    }
    if (this.myTrades === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      this.myTrades = new _Cache.ArrayCacheBySymbolById(limit);
    }
    const trades = this.myTrades;
    const symbols = {};
    const method = spot ? 'parseWsTrade' : 'parseTrade';
    for (let i = 0; i < data.length; i++) {
      const rawTrade = data[i];
      const parsed = this[method](rawTrade);
      const symbol = parsed['symbol'];
      symbols[symbol] = true;
      trades.append(parsed);
    }
    const keys = Object.keys(symbols);
    for (let i = 0; i < keys.length; i++) {
      const messageHash = 'myTrades:' + keys[i];
      client.resolve(trades, messageHash);
    }
    // non-symbol specific
    const messageHash = 'myTrades';
    client.resolve(trades, messageHash);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name bybit#watchOrders
     * @description watches information on multiple orders made by the user
     * @see https://bybit-exchange.github.io/docs/v5/websocket/private/order
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    const method = 'watchOrders';
    let messageHash = 'orders';
    if (symbol !== undefined) {
      symbol = this.symbol(symbol);
      messageHash += ':' + symbol;
    }
    const url = this.getUrlByMarketType(symbol, true, method, params);
    await this.authenticate(url);
    const topicsByMarket = {
      'spot': ['order', 'stopOrder'],
      'unified': ['order'],
      'usdc': ['user.openapi.perp.order']
    };
    const topics = this.safeValue(topicsByMarket, this.getPrivateType(url));
    const orders = await this.watchTopics(url, messageHash, topics, params);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  handleOrder(client, message, subscription = undefined) {
    //
    //     spot
    //     {
    //         "type": "snapshot",
    //         "topic": "order",
    //         "ts": "1662348310441",
    //         "data": [
    //             {
    //                 "e": "order",
    //                 "E": "1662348310441",
    //                 "s": "BTCUSDT",
    //                 "c": "spotx008",
    //                 "S": "BUY",
    //                 "o": "MARKET_OF_QUOTE",
    //                 "f": "GTC",
    //                 "q": "20",
    //                 "p": "0",
    //                 "X": "CANCELED",
    //                 "i": "1238261807653647872",
    //                 "M": "1238225004531834368",
    //                 "l": "0.001007",
    //                 "z": "0.001007",
    //                 "L": "19842.02",
    //                 "n": "0",
    //                 "N": "BTC",
    //                 "u": true,
    //                 "w": true,
    //                 "m": false,
    //                 "O": "1662348310368",
    //                 "Z": "19.98091414",
    //                 "A": "0",
    //                 "C": false,
    //                 "v": "0",
    //                 "d": "NO_LIQ",
    //                 "t": "2100000000002220938"
    //             }
    //         ]
    //     }
    // unified
    //     {
    //         "id": "5923240c6880ab-c59f-420b-9adb-3639adc9dd90",
    //         "topic": "order",
    //         "creationTime": 1672364262474,
    //         "data": [
    //             {
    //                 "symbol": "ETH-30DEC22-1400-C",
    //                 "orderId": "5cf98598-39a7-459e-97bf-76ca765ee020",
    //                 "side": "Sell",
    //                 "orderType": "Market",
    //                 "cancelType": "UNKNOWN",
    //                 "price": "72.5",
    //                 "qty": "1",
    //                 "orderIv": "",
    //                 "timeInForce": "IOC",
    //                 "orderStatus": "Filled",
    //                 "orderLinkId": "",
    //                 "lastPriceOnCreated": "",
    //                 "reduceOnly": false,
    //                 "leavesQty": "",
    //                 "leavesValue": "",
    //                 "cumExecQty": "1",
    //                 "cumExecValue": "75",
    //                 "avgPrice": "75",
    //                 "blockTradeId": "",
    //                 "positionIdx": 0,
    //                 "cumExecFee": "0.358635",
    //                 "createdTime": "1672364262444",
    //                 "updatedTime": "1672364262457",
    //                 "rejectReason": "EC_NoError",
    //                 "stopOrderType": "",
    //                 "triggerPrice": "",
    //                 "takeProfit": "",
    //                 "stopLoss": "",
    //                 "tpTriggerBy": "",
    //                 "slTriggerBy": "",
    //                 "triggerDirection": 0,
    //                 "triggerBy": "",
    //                 "closeOnTrigger": false,
    //                 "category": "option"
    //             }
    //         ]
    //     }
    //
    const type = this.safeString(message, 'type', '');
    if (this.orders === undefined) {
      const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
      this.orders = new _Cache.ArrayCacheBySymbolById(limit);
    }
    const orders = this.orders;
    let rawOrders = [];
    let parser = undefined;
    if (type === 'snapshot') {
      rawOrders = this.safeValue(message, 'data', []);
      parser = 'parseWsSpotOrder';
    } else {
      parser = 'parseContractOrder';
      rawOrders = this.safeValue(message, 'data', []);
      rawOrders = this.safeValue(rawOrders, 'result', rawOrders);
    }
    const symbols = {};
    for (let i = 0; i < rawOrders.length; i++) {
      const parsed = this[parser](rawOrders[i]);
      const symbol = parsed['symbol'];
      symbols[symbol] = true;
      orders.append(parsed);
    }
    const symbolsArray = Object.keys(symbols);
    for (let i = 0; i < symbolsArray.length; i++) {
      const messageHash = 'orders:' + symbolsArray[i];
      client.resolve(orders, messageHash);
    }
    const messageHash = 'orders';
    client.resolve(orders, messageHash);
  }
  parseWsSpotOrder(order, market = undefined) {
    //
    //    {
    //        e: 'executionReport',
    //        E: '1653297251061', // timestamp
    //        s: 'LTCUSDT', // symbol
    //        c: '1653297250740', // user id
    //        S: 'SELL', // side
    //        o: 'MARKET_OF_BASE', // order type
    //        f: 'GTC', // time in force
    //        q: '0.16233', // quantity
    //        p: '0', // price
    //        X: 'NEW', // status
    //        i: '1162336018974750208', // order id
    //        M: '0',
    //        l: '0', // last filled
    //        z: '0', // total filled
    //        L: '0', // last traded price
    //        n: '0', // trading fee
    //        N: '', // fee asset
    //        u: true,
    //        w: true,
    //        m: false, // is limit_maker
    //        O: '1653297251042', // order creation
    //        Z: '0', // total filled
    //        A: '0', // account id
    //        C: false, // is close
    //        v: '0', // leverage
    //        d: 'NO_LIQ'
    //    }
    //
    const id = this.safeString(order, 'i');
    const marketId = this.safeString(order, 's');
    const symbol = this.safeSymbol(marketId, market, undefined, 'spot');
    const timestamp = this.safeInteger(order, 'O');
    let price = this.safeString(order, 'p');
    if (price === '0') {
      price = undefined; // market orders
    }

    const filled = this.safeString(order, 'z');
    const status = this.parseOrderStatus(this.safeString(order, 'X'));
    const side = this.safeStringLower(order, 'S');
    const lastTradeTimestamp = this.safeString(order, 'E');
    const timeInForce = this.safeString(order, 'f');
    let amount = undefined;
    const cost = this.safeString(order, 'Z');
    const q = this.safeString(order, 'q');
    let type = this.safeStringLower(order, 'o');
    if (type.indexOf('quote') >= 0) {
      amount = filled;
    } else {
      amount = q;
    }
    if (type.indexOf('market') >= 0) {
      type = 'market';
    }
    let fee = undefined;
    const feeCost = this.safeString(order, 'n');
    if (feeCost !== undefined && feeCost !== '0') {
      const feeCurrencyId = this.safeString(order, 'N');
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': feeCost,
        'currency': feeCurrencyCode
      };
    }
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': this.safeString(order, 'c'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': undefined,
      'side': side,
      'price': price,
      'stopPrice': undefined,
      'triggerPrice': undefined,
      'amount': amount,
      'cost': cost,
      'average': undefined,
      'filled': filled,
      'remaining': undefined,
      'status': status,
      'fee': fee
    }, market);
  }
  async watchBalance(params = {}) {
    /**
     * @method
     * @name bybit#watchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://bybit-exchange.github.io/docs/v5/websocket/private/wallet
     * @param {object} params extra parameters specific to the bybit api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const method = 'watchBalance';
    let messageHash = 'balances';
    let type = undefined;
    [type, params] = this.handleMarketTypeAndParams('watchBalance', undefined, params);
    let subType = undefined;
    [subType, params] = this.handleSubTypeAndParams('watchBalance', undefined, params);
    const unified = await this.isUnifiedEnabled();
    const isUnifiedMargin = this.safeValue(unified, 0, false);
    const isUnifiedAccount = this.safeValue(unified, 1, false);
    const url = this.getUrlByMarketType(undefined, true, method, params);
    await this.authenticate(url);
    const topicByMarket = {
      'spot': 'outboundAccountInfo',
      'unified': 'wallet'
    };
    if (isUnifiedAccount) {
      // unified account
      if (subType === 'inverse') {
        messageHash += ':contract';
      } else {
        messageHash += ':unified';
      }
    }
    if (!isUnifiedMargin && !isUnifiedAccount) {
      // normal account using v5
      if (type === 'spot') {
        messageHash += ':spot';
      } else {
        messageHash += ':contract';
      }
    }
    if (isUnifiedMargin) {
      // unified margin account using v5
      if (type === 'spot') {
        messageHash += ':spot';
      } else {
        if (subType === 'linear') {
          messageHash += ':unified';
        } else {
          messageHash += ':contract';
        }
      }
    }
    const topics = [this.safeValue(topicByMarket, this.getPrivateType(url))];
    return await this.watchTopics(url, messageHash, topics, params);
  }
  handleBalance(client, message) {
    //
    // spot
    //    {
    //        "type": "snapshot",
    //        "topic": "outboundAccountInfo",
    //        "ts": "1662107217641",
    //        "data": [
    //            {
    //                "e": "outboundAccountInfo",
    //                "E": "1662107217640",
    //                "T": true,
    //                "W": true,
    //                "D": true,
    //                "B": [
    //                    {
    //                        "a": "USDT",
    //                        "f": "176.81254174",
    //                        "l": "201.575"
    //                    }
    //                ]
    //            }
    //        ]
    //    }
    // unified
    //     {
    //         "id": "5923242c464be9-25ca-483d-a743-c60101fc656f",
    //         "topic": "wallet",
    //         "creationTime": 1672364262482,
    //         "data": [
    //             {
    //                 "accountIMRate": "0.016",
    //                 "accountMMRate": "0.003",
    //                 "totalEquity": "12837.78330098",
    //                 "totalWalletBalance": "12840.4045924",
    //                 "totalMarginBalance": "12837.78330188",
    //                 "totalAvailableBalance": "12632.05767702",
    //                 "totalPerpUPL": "-2.62129051",
    //                 "totalInitialMargin": "205.72562486",
    //                 "totalMaintenanceMargin": "39.42876721",
    //                 "coin": [
    //                     {
    //                         "coin": "USDC",
    //                         "equity": "200.62572554",
    //                         "usdValue": "200.62572554",
    //                         "walletBalance": "201.34882644",
    //                         "availableToWithdraw": "0",
    //                         "availableToBorrow": "1500000",
    //                         "borrowAmount": "0",
    //                         "accruedInterest": "0",
    //                         "totalOrderIM": "0",
    //                         "totalPositionIM": "202.99874213",
    //                         "totalPositionMM": "39.14289747",
    //                         "unrealisedPnl": "74.2768991",
    //                         "cumRealisedPnl": "-209.1544627",
    //                         "bonus": "0"
    //                     },
    //                     {
    //                         "coin": "BTC",
    //                         "equity": "0.06488393",
    //                         "usdValue": "1023.08402268",
    //                         "walletBalance": "0.06488393",
    //                         "availableToWithdraw": "0.06488393",
    //                         "availableToBorrow": "2.5",
    //                         "borrowAmount": "0",
    //                         "accruedInterest": "0",
    //                         "totalOrderIM": "0",
    //                         "totalPositionIM": "0",
    //                         "totalPositionMM": "0",
    //                         "unrealisedPnl": "0",
    //                         "cumRealisedPnl": "0",
    //                         "bonus": "0"
    //                     },
    //                     {
    //                         "coin": "ETH",
    //                         "equity": "0",
    //                         "usdValue": "0",
    //                         "walletBalance": "0",
    //                         "availableToWithdraw": "0",
    //                         "availableToBorrow": "26",
    //                         "borrowAmount": "0",
    //                         "accruedInterest": "0",
    //                         "totalOrderIM": "0",
    //                         "totalPositionIM": "0",
    //                         "totalPositionMM": "0",
    //                         "unrealisedPnl": "0",
    //                         "cumRealisedPnl": "0",
    //                         "bonus": "0"
    //                     },
    //                     {
    //                         "coin": "USDT",
    //                         "equity": "11726.64664904",
    //                         "usdValue": "11613.58597018",
    //                         "walletBalance": "11728.54414904",
    //                         "availableToWithdraw": "11723.92075829",
    //                         "availableToBorrow": "2500000",
    //                         "borrowAmount": "0",
    //                         "accruedInterest": "0",
    //                         "totalOrderIM": "0",
    //                         "totalPositionIM": "2.72589075",
    //                         "totalPositionMM": "0.28576575",
    //                         "unrealisedPnl": "-1.8975",
    //                         "cumRealisedPnl": "0.64782276",
    //                         "bonus": "0"
    //                     },
    //                     {
    //                         "coin": "EOS3L",
    //                         "equity": "215.0570412",
    //                         "usdValue": "0",
    //                         "walletBalance": "215.0570412",
    //                         "availableToWithdraw": "215.0570412",
    //                         "availableToBorrow": "0",
    //                         "borrowAmount": "0",
    //                         "accruedInterest": "",
    //                         "totalOrderIM": "0",
    //                         "totalPositionIM": "0",
    //                         "totalPositionMM": "0",
    //                         "unrealisedPnl": "0",
    //                         "cumRealisedPnl": "0",
    //                         "bonus": "0"
    //                     },
    //                     {
    //                         "coin": "BIT",
    //                         "equity": "1.82",
    //                         "usdValue": "0.48758257",
    //                         "walletBalance": "1.82",
    //                         "availableToWithdraw": "1.82",
    //                         "availableToBorrow": "0",
    //                         "borrowAmount": "0",
    //                         "accruedInterest": "",
    //                         "totalOrderIM": "0",
    //                         "totalPositionIM": "0",
    //                         "totalPositionMM": "0",
    //                         "unrealisedPnl": "0",
    //                         "cumRealisedPnl": "0",
    //                         "bonus": "0"
    //                     }
    //                 ],
    //                 "accountType": "UNIFIED"
    //             }
    //         ]
    //     }
    //
    if (this.balance === undefined) {
      this.balance = {};
    }
    let messageHash = 'balance';
    const topic = this.safeValue(message, 'topic');
    let info = undefined;
    let rawBalances = [];
    let account = undefined;
    if (topic === 'outboundAccountInfo') {
      account = 'spot';
      const data = this.safeValue(message, 'data', []);
      for (let i = 0; i < data.length; i++) {
        const B = this.safeValue(data[i], 'B', []);
        rawBalances = this.arrayConcat(rawBalances, B);
      }
      info = rawBalances;
    }
    if (topic === 'wallet') {
      const data = this.safeValue(message, 'data', {});
      for (let i = 0; i < data.length; i++) {
        const result = this.safeValue(data, 0, {});
        account = this.safeStringLower(result, 'accountType');
        rawBalances = this.arrayConcat(rawBalances, this.safeValue(result, 'coin', []));
      }
      info = data;
    }
    for (let i = 0; i < rawBalances.length; i++) {
      this.parseWsBalance(rawBalances[i], account);
    }
    if (account !== undefined) {
      if (this.safeValue(this.balance, account) === undefined) {
        this.balance[account] = {};
      }
      this.balance[account]['info'] = info;
      const timestamp = this.safeInteger(message, 'ts');
      this.balance[account]['timestamp'] = timestamp;
      this.balance[account]['datetime'] = this.iso8601(timestamp);
      this.balance[account] = this.safeBalance(this.balance[account]);
      messageHash = 'balances:' + account;
      client.resolve(this.balance[account], messageHash);
    } else {
      this.balance['info'] = info;
      const timestamp = this.safeInteger(message, 'ts');
      this.balance['timestamp'] = timestamp;
      this.balance['datetime'] = this.iso8601(timestamp);
      this.balance = this.safeBalance(this.balance);
      messageHash = 'balances';
      client.resolve(this.balance, messageHash);
    }
  }
  parseWsBalance(balance, accountType = undefined) {
    //
    // spot
    //    {
    //        "a": "USDT",
    //        "f": "176.81254174",
    //        "l": "201.575"
    //    }
    // unified
    //     {
    //         "coin": "BTC",
    //         "equity": "0.06488393",
    //         "usdValue": "1023.08402268",
    //         "walletBalance": "0.06488393",
    //         "availableToWithdraw": "0.06488393",
    //         "availableToBorrow": "2.5",
    //         "borrowAmount": "0",
    //         "accruedInterest": "0",
    //         "totalOrderIM": "0",
    //         "totalPositionIM": "0",
    //         "totalPositionMM": "0",
    //         "unrealisedPnl": "0",
    //         "cumRealisedPnl": "0",
    //         "bonus": "0"
    //     }
    //
    const account = this.account();
    const currencyId = this.safeString2(balance, 'a', 'coin');
    const code = this.safeCurrencyCode(currencyId);
    account['free'] = this.safeStringN(balance, ['availableToWithdraw', 'f', 'free', 'availableToWithdraw']);
    account['used'] = this.safeString2(balance, 'l', 'locked');
    account['total'] = this.safeString(balance, 'walletBalance');
    if (accountType !== undefined) {
      if (this.safeValue(this.balance, accountType) === undefined) {
        this.balance[accountType] = {};
      }
      this.balance[accountType][code] = account;
    } else {
      this.balance[code] = account;
    }
  }
  async watchTopics(url, messageHash, topics = [], params = {}) {
    const request = {
      'op': 'subscribe',
      'req_id': this.requestId(),
      'args': topics
    };
    const message = this.extend(request, params);
    return await this.watch(url, messageHash, message, messageHash);
  }
  authenticate(url, params = {}) {
    this.checkRequiredCredentials();
    const messageHash = 'authenticated';
    const client = this.client(url);
    let future = this.safeValue(client.subscriptions, messageHash);
    if (future === undefined) {
      const expiresInt = this.milliseconds() + 10000;
      const expires = expiresInt.toString();
      const path = 'GET/realtime';
      const auth = path + expires;
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'hex');
      const request = {
        'op': 'auth',
        'args': [this.apiKey, expires, signature]
      };
      const message = this.extend(request, params);
      future = this.watch(url, messageHash, message);
      client.subscriptions[messageHash] = future;
    }
    return future;
  }
  handleErrorMessage(client, message) {
    //
    //   {
    //       success: false,
    //       ret_msg: 'error:invalid op',
    //       conn_id: '5e079fdd-9c7f-404d-9dbf-969d650838b5',
    //       request: { op: '', args: null }
    //   }
    //
    // auth error
    //
    //   {
    //       success: false,
    //       ret_msg: 'error:USVC1111',
    //       conn_id: 'e73770fb-a0dc-45bd-8028-140e20958090',
    //       request: {
    //         op: 'auth',
    //         args: [
    //           '9rFT6uR4uz9Imkw4Wx',
    //           '1653405853543',
    //           '542e71bd85597b4db0290f0ce2d13ed1fd4bb5df3188716c1e9cc69a879f7889'
    //         ]
    //   }
    //
    //   { code: '-10009', desc: 'Invalid period!' }
    //
    const code = this.safeString2(message, 'code', 'ret_code');
    try {
      if (code !== undefined) {
        const feedback = this.id + ' ' + this.json(message);
        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);
      }
      const success = this.safeValue(message, 'success');
      if (success !== undefined && !success) {
        const ret_msg = this.safeString(message, 'ret_msg');
        const request = this.safeValue(message, 'request', {});
        const op = this.safeString(request, 'op');
        if (op === 'auth') {
          throw new _errors.AuthenticationError('Authentication failed: ' + ret_msg);
        } else {
          throw new _errors.ExchangeError(this.id + ' ' + ret_msg);
        }
      }
      return false;
    } catch (error) {
      if (error instanceof _errors.AuthenticationError) {
        const messageHash = 'authenticated';
        client.reject(error, messageHash);
        if (messageHash in client.subscriptions) {
          delete client.subscriptions[messageHash];
        }
      } else {
        client.reject(error);
      }
      return true;
    }
  }
  handleMessage(client, message) {
    if (this.handleErrorMessage(client, message)) {
      return;
    }
    // contract pong
    const ret_msg = this.safeString(message, 'ret_msg');
    if (ret_msg === 'pong') {
      this.handlePong(client, message);
      return;
    }
    // spot pong
    const pong = this.safeInteger(message, 'pong');
    if (pong !== undefined) {
      this.handlePong(client, message);
      return;
    }
    // pong
    const op = this.safeString(message, 'op');
    if (op === 'pong') {
      this.handlePong(client, message);
      return;
    }
    const event = this.safeString(message, 'event');
    if (event === 'sub') {
      this.handleSubscriptionStatus(client, message);
      return;
    }
    const topic = this.safeString(message, 'topic', '');
    const methods = {
      'orderbook': this.handleOrderBook,
      'kline': this.handleOHLCV,
      'order': this.handleOrder,
      'stopOrder': this.handleOrder,
      'ticker': this.handleTicker,
      'trade': this.handleTrades,
      'publicTrade': this.handleTrades,
      'depth': this.handleOrderBook,
      'wallet': this.handleBalance,
      'outboundAccountInfo': this.handleBalance,
      'execution': this.handleMyTrades,
      'ticketInfo': this.handleMyTrades,
      'user.openapi.perp.trade': this.handleMyTrades
    };
    const exacMethod = this.safeValue(methods, topic);
    if (exacMethod !== undefined) {
      exacMethod.call(this, client, message);
      return;
    }
    const keys = Object.keys(methods);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (topic.indexOf(keys[i]) >= 0) {
        const method = methods[key];
        method.call(this, client, message);
        return;
      }
    }
    // unified auth acknowledgement
    const type = this.safeString(message, 'type');
    if (op === 'auth' || type === 'AUTH_RESP') {
      this.handleAuthenticate(client, message);
    }
  }
  ping(client) {
    return {
      'req_id': this.requestId(),
      'op': 'ping'
    };
  }
  handlePong(client, message) {
    //
    //   {
    //       success: true,
    //       ret_msg: 'pong',
    //       conn_id: 'db3158a0-8960-44b9-a9de-ac350ee13158',
    //       request: { op: 'ping', args: null }
    //   }
    //
    //   { pong: 1653296711335 }
    //
    client.lastPong = this.safeInteger(message, 'pong');
    return message;
  }
  handleAuthenticate(client, message) {
    //
    //    {
    //        success: true,
    //        ret_msg: '',
    //        op: 'auth',
    //        conn_id: 'ce3dpomvha7dha97tvp0-2xh'
    //    }
    //
    const success = this.safeValue(message, 'success');
    const messageHash = 'authenticated';
    if (success) {
      client.resolve(message, messageHash);
    } else {
      const error = new _errors.AuthenticationError(this.id + ' ' + this.json(message));
      client.reject(error, messageHash);
      if (messageHash in client.subscriptions) {
        delete client.subscriptions[messageHash];
      }
    }
    return message;
  }
  handleSubscriptionStatus(client, message) {
    //
    //    {
    //        topic: 'kline',
    //        event: 'sub',
    //        params: {
    //          symbol: 'LTCUSDT',
    //          binary: 'false',
    //          klineType: '1m',
    //          symbolName: 'LTCUSDT'
    //        },
    //        code: '0',
    //        msg: 'Success'
    //    }
    //
    return message;
  }
}
exports.default = bybit;

},{"../base/errors.js":5,"../base/ws/Cache.js":17,"../bybit.js":31}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _okx = _interopRequireDefault(require("./okx.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class okex extends _okx.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'alias': true,
      'id': 'okex'
    });
  }
}
exports.default = okex;

},{"./okx.js":45}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _okx = _interopRequireDefault(require("../okx.js"));
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class okx extends _okx.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchTicker': true,
        // 'watchTickers': false, // for now
        'watchOrderBook': true,
        'watchTrades': true,
        'watchBalance': true,
        'watchOHLCV': true,
        'watchOrders': true
      },
      'urls': {
        'api': {
          'ws': {
            'public': 'wss://ws.okx.com:8443/ws/v5/public',
            'private': 'wss://ws.okx.com:8443/ws/v5/private' // wss://wsaws.okx.com:8443/ws/v5/private
          }
        },

        'test': {
          'ws': {
            'public': 'wss://wspap.okx.com:8443/ws/v5/public?brokerId=9999',
            'private': 'wss://wspap.okx.com:8443/ws/v5/private?brokerId=9999'
          }
        }
      },
      'options': {
        'watchOrderBook': {
          //
          // bbo-tbt
          // 1. Newly added channel that sends tick-by-tick Level 1 data
          // 2. All API users can subscribe
          // 3. Public depth channel, verification not required
          //
          // books-l2-tbt
          // 1. Only users who're VIP5 and above can subscribe
          // 2. Identity verification required before subscription
          //
          // books50-l2-tbt
          // 1. Only users who're VIP4 and above can subscribe
          // 2. Identity verification required before subscription
          //
          // books
          // 1. All API users can subscribe
          // 2. Public depth channel, verification not required
          //
          // books5
          // 1. All API users can subscribe
          // 2. Public depth channel, verification not required
          // 3. Data feeds will be delivered every 100ms (vs. every 200ms now)
          //
          'depth': 'books'
        },
        'watchBalance': 'spot',
        'ws': {
          // 'inflate': true,
        },
        'checksum': true
      },
      'streaming': {
        // okex does not support built-in ws protocol-level ping-pong
        // instead it requires a custom text-based ping-pong
        'ping': this.ping,
        'keepAlive': 20000
      }
    });
  }
  async subscribe(access, channel, symbol, params = {}) {
    await this.loadMarkets();
    const url = this.urls['api']['ws'][access];
    let messageHash = channel;
    const firstArgument = {
      'channel': channel
    };
    if (symbol !== undefined) {
      const market = this.market(symbol);
      messageHash += ':' + market['id'];
      firstArgument['instId'] = market['id'];
    }
    const request = {
      'op': 'subscribe',
      'args': [this.deepExtend(firstArgument, params)]
    };
    return await this.watch(url, messageHash, request, messageHash);
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#watchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    symbol = this.symbol(symbol);
    const trades = await this.subscribe('public', 'trades', symbol, params);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  handleTrades(client, message) {
    //
    //     {
    //         arg: { channel: 'trades', instId: 'BTC-USDT' },
    //         data: [
    //             {
    //                 instId: 'BTC-USDT',
    //                 tradeId: '216970876',
    //                 px: '31684.5',
    //                 sz: '0.00001186',
    //                 side: 'buy',
    //                 ts: '1626531038288'
    //             }
    //         ]
    //     }
    //
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const data = this.safeValue(message, 'data', []);
    const tradesLimit = this.safeInteger(this.options, 'tradesLimit', 1000);
    for (let i = 0; i < data.length; i++) {
      const trade = this.parseTrade(data[i]);
      const symbol = trade['symbol'];
      const marketId = this.safeString(trade['info'], 'instId');
      const messageHash = channel + ':' + marketId;
      let stored = this.safeValue(this.trades, symbol);
      if (stored === undefined) {
        stored = new _Cache.ArrayCache(tradesLimit);
        this.trades[symbol] = stored;
      }
      stored.append(trade);
      client.resolve(stored, messageHash);
    }
    return message;
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name okx#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    return await this.subscribe('public', 'tickers', symbol, params);
  }
  handleTicker(client, message) {
    //
    //     {
    //         arg: { channel: 'tickers', instId: 'BTC-USDT' },
    //         data: [
    //             {
    //                 instType: 'SPOT',
    //                 instId: 'BTC-USDT',
    //                 last: '31500.1',
    //                 lastSz: '0.00001754',
    //                 askPx: '31500.1',
    //                 askSz: '0.00998144',
    //                 bidPx: '31500',
    //                 bidSz: '3.05652439',
    //                 open24h: '31697',
    //                 high24h: '32248',
    //                 low24h: '31165.6',
    //                 sodUtc0: '31385.5',
    //                 sodUtc8: '32134.9',
    //                 volCcy24h: '503403597.38138519',
    //                 vol24h: '15937.10781721',
    //                 ts: '1626526618762'
    //             }
    //         ]
    //     }
    //
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const data = this.safeValue(message, 'data', []);
    for (let i = 0; i < data.length; i++) {
      const ticker = this.parseTicker(data[i]);
      const symbol = ticker['symbol'];
      const marketId = this.safeString(ticker['info'], 'instId');
      const messageHash = channel + ':' + marketId;
      this.tickers[symbol] = ticker;
      client.resolve(ticker, messageHash);
    }
    return message;
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    symbol = this.symbol(symbol);
    const interval = this.safeString(this.timeframes, timeframe, timeframe);
    const name = 'candle' + interval;
    const ohlcv = await this.subscribe('public', name, symbol, params);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    //
    //     {
    //         arg: { channel: 'candle1m', instId: 'BTC-USDT' },
    //         data: [
    //             [
    //                 '1626690720000',
    //                 '31334',
    //                 '31334',
    //                 '31334',
    //                 '31334',
    //                 '0.0077',
    //                 '241.2718'
    //             ]
    //         ]
    //     }
    //
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const data = this.safeValue(message, 'data', []);
    const marketId = this.safeString(arg, 'instId');
    const market = this.safeMarket(marketId);
    const symbol = market['id'];
    const interval = channel.replace('candle', '');
    // use a reverse lookup in a static map instead
    const timeframe = this.findTimeframe(interval);
    for (let i = 0; i < data.length; i++) {
      const parsed = this.parseOHLCV(data[i], market);
      this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
      let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
      if (stored === undefined) {
        const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
        stored = new _Cache.ArrayCacheByTimestamp(limit);
        this.ohlcvs[symbol][timeframe] = stored;
      }
      stored.append(parsed);
      const messageHash = channel + ':' + marketId;
      client.resolve(stored, messageHash);
    }
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    const options = this.safeValue(this.options, 'watchOrderBook', {});
    //
    // bbo-tbt
    // 1. Newly added channel that sends tick-by-tick Level 1 data
    // 2. All API users can subscribe
    // 3. Public depth channel, verification not required
    //
    // books-l2-tbt
    // 1. Only users who're VIP5 and above can subscribe
    // 2. Identity verification required before subscription
    //
    // books50-l2-tbt
    // 1. Only users who're VIP4 and above can subscribe
    // 2. Identity verification required before subscription
    //
    // books
    // 1. All API users can subscribe
    // 2. Public depth channel, verification not required
    //
    // books5
    // 1. All API users can subscribe
    // 2. Public depth channel, verification not required
    // 3. Data feeds will be delivered every 100ms (vs. every 200ms now)
    //
    const depth = this.safeString(options, 'depth', 'books');
    if (depth === 'books-l2-tbt' || depth === 'books50-l2-tbt') {
      await this.authenticate({
        'access': 'public'
      });
    }
    const orderbook = await this.subscribe('public', depth, symbol, params);
    return orderbook.limit();
  }
  handleDelta(bookside, delta) {
    //
    //     [
    //         '31685', // price
    //         '0.78069158', // amount
    //         '0', // liquidated orders
    //         '17' // orders
    //     ]
    //
    const price = this.safeFloat(delta, 0);
    const amount = this.safeFloat(delta, 1);
    bookside.store(price, amount);
  }
  handleDeltas(bookside, deltas) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(bookside, deltas[i]);
    }
  }
  handleOrderBookMessage(client, message, orderbook, messageHash) {
    //
    //     {
    //         asks: [
    //             [ '31738.3', '0.05973179', '0', '3' ],
    //             [ '31738.5', '0.11035404', '0', '2' ],
    //             [ '31739.6', '0.01', '0', '1' ],
    //         ],
    //         bids: [
    //             [ '31738.2', '0.67557666', '0', '9' ],
    //             [ '31738', '0.02466947', '0', '2' ],
    //             [ '31736.3', '0.01705046', '0', '2' ],
    //         ],
    //         instId: 'BTC-USDT',
    //         ts: '1626537446491'
    //     }
    //
    const asks = this.safeValue(message, 'asks', []);
    const bids = this.safeValue(message, 'bids', []);
    const storedAsks = orderbook['asks'];
    const storedBids = orderbook['bids'];
    this.handleDeltas(storedAsks, asks);
    this.handleDeltas(storedBids, bids);
    const checksum = this.safeValue(this.options, 'checksum', true);
    if (checksum) {
      const asksLength = storedAsks.length;
      const bidsLength = storedBids.length;
      const payloadArray = [];
      for (let i = 0; i < 25; i++) {
        if (i < bidsLength) {
          payloadArray.push(this.numberToString(storedBids[i][0]));
          payloadArray.push(this.numberToString(storedBids[i][1]));
        }
        if (i < asksLength) {
          payloadArray.push(this.numberToString(storedAsks[i][0]));
          payloadArray.push(this.numberToString(storedAsks[i][1]));
        }
      }
      const payload = payloadArray.join(':');
      const responseChecksum = this.safeInteger(message, 'checksum');
      const localChecksum = this.crc32(payload, true);
      if (responseChecksum !== localChecksum) {
        const error = new _errors.InvalidNonce(this.id + ' invalid checksum');
        client.reject(error, messageHash);
      }
    }
    const timestamp = this.safeInteger(message, 'ts');
    orderbook['timestamp'] = timestamp;
    orderbook['datetime'] = this.iso8601(timestamp);
    return orderbook;
  }
  handleOrderBook(client, message) {
    //
    // snapshot
    //
    //     {
    //         arg: { channel: 'books-l2-tbt', instId: 'BTC-USDT' },
    //         action: 'snapshot',
    //         data: [
    //             {
    //                 asks: [
    //                     [ '31685', '0.78069158', '0', '17' ],
    //                     [ '31685.1', '0.0001', '0', '1' ],
    //                     [ '31685.6', '0.04543165', '0', '1' ],
    //                 ],
    //                 bids: [
    //                     [ '31684.9', '0.01', '0', '1' ],
    //                     [ '31682.9', '0.0001', '0', '1' ],
    //                     [ '31680.7', '0.01', '0', '1' ],
    //                 ],
    //                 ts: '1626532416403',
    //                 checksum: -1023440116
    //             }
    //         ]
    //     }
    //
    // update
    //
    //     {
    //         arg: { channel: 'books-l2-tbt', instId: 'BTC-USDT' },
    //         action: 'update',
    //         data: [
    //             {
    //                 asks: [
    //                     [ '31657.7', '0', '0', '0' ],
    //                     [ '31659.7', '0.01', '0', '1' ],
    //                     [ '31987.3', '0.01', '0', '1' ]
    //                 ],
    //                 bids: [
    //                     [ '31642.9', '0.50296385', '0', '4' ],
    //                     [ '31639.9', '0', '0', '0' ],
    //                     [ '31638.7', '0.01', '0', '1' ],
    //                 ],
    //                 ts: '1626535709008',
    //                 checksum: 830931827
    //             }
    //         ]
    //     }
    //
    // books5
    //
    //     {
    //         arg: { channel: 'books5', instId: 'BTC-USDT' },
    //         data: [
    //             {
    //                 asks: [
    //                     [ '31738.3', '0.05973179', '0', '3' ],
    //                     [ '31738.5', '0.11035404', '0', '2' ],
    //                     [ '31739.6', '0.01', '0', '1' ],
    //                 ],
    //                 bids: [
    //                     [ '31738.2', '0.67557666', '0', '9' ],
    //                     [ '31738', '0.02466947', '0', '2' ],
    //                     [ '31736.3', '0.01705046', '0', '2' ],
    //                 ],
    //                 instId: 'BTC-USDT',
    //                 ts: '1626537446491'
    //             }
    //         ]
    //     }
    //
    // bbo-tbt
    //
    //     {
    //         "arg":{
    //             "channel":"bbo-tbt",
    //             "instId":"BTC-USDT"
    //         },
    //         "data":[
    //             {
    //                 "asks":[["36232.2","1.8826134","0","17"]],
    //                 "bids":[["36232.1","0.00572212","0","2"]],
    //                 "ts":"1651826598363"
    //             }
    //         ]
    //     }
    //
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const action = this.safeString(message, 'action');
    const data = this.safeValue(message, 'data', []);
    const marketId = this.safeString(arg, 'instId');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const depths = {
      'bbo-tbt': 1,
      'books': 400,
      'books5': 5,
      'books-l2-tbt': 400,
      'books50-l2-tbt': 50
    };
    const limit = this.safeInteger(depths, channel);
    const messageHash = channel + ':' + marketId;
    if (action === 'snapshot') {
      for (let i = 0; i < data.length; i++) {
        const update = data[i];
        const orderbook = this.orderBook({}, limit);
        this.orderbooks[symbol] = orderbook;
        orderbook['symbol'] = symbol;
        this.handleOrderBookMessage(client, update, orderbook, messageHash);
        client.resolve(orderbook, messageHash);
      }
    } else if (action === 'update') {
      if (symbol in this.orderbooks) {
        const orderbook = this.orderbooks[symbol];
        for (let i = 0; i < data.length; i++) {
          const update = data[i];
          this.handleOrderBookMessage(client, update, orderbook, messageHash);
          client.resolve(orderbook, messageHash);
        }
      }
    } else if (channel === 'books5' || channel === 'bbo-tbt') {
      let orderbook = this.safeValue(this.orderbooks, symbol);
      if (orderbook === undefined) {
        orderbook = this.orderBook({}, limit);
      }
      this.orderbooks[symbol] = orderbook;
      for (let i = 0; i < data.length; i++) {
        const update = data[i];
        const timestamp = this.safeInteger(update, 'ts');
        const snapshot = this.parseOrderBook(update, symbol, timestamp, 'bids', 'asks', 0, 1);
        orderbook.reset(snapshot);
        client.resolve(orderbook, messageHash);
      }
    }
    return message;
  }
  authenticate(params = {}) {
    this.checkRequiredCredentials();
    const access = this.safeString(params, 'access', 'private');
    params = this.omit(params, ['access']);
    const url = this.urls['api']['ws'][access];
    const messageHash = 'authenticated';
    const client = this.client(url);
    let future = this.safeValue(client.subscriptions, messageHash);
    if (future === undefined) {
      const timestamp = this.seconds().toString();
      const method = 'GET';
      const path = '/users/self/verify';
      const auth = timestamp + method + path;
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
      const operation = 'login';
      const request = {
        'op': operation,
        'args': [{
          'apiKey': this.apiKey,
          'passphrase': this.password,
          'timestamp': timestamp,
          'sign': signature
        }]
      };
      const message = this.extend(request, params);
      future = this.watch(url, messageHash, message);
      client.subscriptions[messageHash] = future;
    }
    return future;
  }
  async watchBalance(params = {}) {
    /**
     * @method
     * @name okx#watchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the okx api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    await this.authenticate();
    return await this.subscribe('private', 'account', undefined, params);
  }
  handleBalance(client, message) {
    //
    //     {
    //         arg: { channel: 'account' },
    //         data: [
    //             {
    //                 adjEq: '',
    //                 details: [
    //                     {
    //                         availBal: '',
    //                         availEq: '8.21009913',
    //                         cashBal: '8.21009913',
    //                         ccy: 'USDT',
    //                         coinUsdPrice: '0.99994',
    //                         crossLiab: '',
    //                         disEq: '8.2096065240522',
    //                         eq: '8.21009913',
    //                         eqUsd: '8.2096065240522',
    //                         frozenBal: '0',
    //                         interest: '',
    //                         isoEq: '0',
    //                         isoLiab: '',
    //                         liab: '',
    //                         maxLoan: '',
    //                         mgnRatio: '',
    //                         notionalLever: '0',
    //                         ordFrozen: '0',
    //                         twap: '0',
    //                         uTime: '1621927314996',
    //                         upl: '0'
    //                     },
    //                 ],
    //                 imr: '',
    //                 isoEq: '0',
    //                 mgnRatio: '',
    //                 mmr: '',
    //                 notionalUsd: '',
    //                 ordFroz: '',
    //                 totalEq: '22.1930992296832',
    //                 uTime: '1626692120916'
    //             }
    //         ]
    //     }
    //
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const type = 'spot';
    const balance = this.parseTradingBalance(message);
    const oldBalance = this.safeValue(this.balance, type, {});
    const newBalance = this.deepExtend(oldBalance, balance);
    this.balance[type] = this.safeBalance(newBalance);
    client.resolve(this.balance[type], channel);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name okx#watchOrders
     * @description watches information on multiple orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the okx api endpoint
     * @param {bool} params.stop true if fetching trigger or conditional orders
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    await this.authenticate();
    //
    //     {
    //         "op": "subscribe",
    //         "args": [
    //             {
    //                 "channel": "orders",
    //                 "instType": "FUTURES",
    //                 "uly": "BTC-USD",
    //                 "instId": "BTC-USD-200329"
    //             }
    //         ]
    //     }
    //
    const options = this.safeValue(this.options, 'watchOrders', {});
    // By default, receive order updates from any instrument type
    let type = this.safeString(options, 'type', 'ANY');
    type = this.safeString(params, 'type', type);
    const isStop = this.safeValue(params, 'stop', false);
    params = this.omit(params, ['type', 'stop']);
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      type = market['type'];
    }
    if (type === 'future') {
      type = 'futures';
    }
    const uppercaseType = type.toUpperCase();
    const request = {
      'instType': uppercaseType
    };
    const channel = isStop ? 'orders-algo' : 'orders';
    const orders = await this.subscribe('private', channel, symbol, this.extend(request, params));
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  handleOrders(client, message, subscription = undefined) {
    //
    //     {
    //         "arg":{
    //             "channel":"orders",
    //             "instType":"SPOT"
    //         },
    //         "data":[
    //             {
    //                 "accFillSz":"0",
    //                 "amendResult":"",
    //                 "avgPx":"",
    //                 "cTime":"1634548275191",
    //                 "category":"normal",
    //                 "ccy":"",
    //                 "clOrdId":"e847386590ce4dBC330547db94a08ba0",
    //                 "code":"0",
    //                 "execType":"",
    //                 "fee":"0",
    //                 "feeCcy":"USDT",
    //                 "fillFee":"0",
    //                 "fillFeeCcy":"",
    //                 "fillNotionalUsd":"",
    //                 "fillPx":"",
    //                 "fillSz":"0",
    //                 "fillTime":"",
    //                 "instId":"ETH-USDT",
    //                 "instType":"SPOT",
    //                 "lever":"",
    //                 "msg":"",
    //                 "notionalUsd":"451.4516256",
    //                 "ordId":"370257534141235201",
    //                 "ordType":"limit",
    //                 "pnl":"0",
    //                 "posSide":"",
    //                 "px":"60000",
    //                 "rebate":"0",
    //                 "rebateCcy":"ETH",
    //                 "reqId":"",
    //                 "side":"sell",
    //                 "slOrdPx":"",
    //                 "slTriggerPx":"",
    //                 "state":"live",
    //                 "sz":"0.007526",
    //                 "tag":"",
    //                 "tdMode":"cash",
    //                 "tgtCcy":"",
    //                 "tpOrdPx":"",
    //                 "tpTriggerPx":"",
    //                 "tradeId":"",
    //                 "uTime":"1634548275191"
    //             }
    //         ]
    //     }
    //
    const arg = this.safeValue(message, 'arg', {});
    const channel = this.safeString(arg, 'channel');
    const orders = this.safeValue(message, 'data', []);
    const ordersLength = orders.length;
    if (ordersLength > 0) {
      const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
      if (this.orders === undefined) {
        this.orders = new _Cache.ArrayCacheBySymbolById(limit);
      }
      const stored = this.orders;
      const marketIds = [];
      const parsed = this.parseOrders(orders);
      for (let i = 0; i < parsed.length; i++) {
        const order = parsed[i];
        stored.append(order);
        const symbol = order['symbol'];
        const market = this.market(symbol);
        marketIds.push(market['id']);
      }
      client.resolve(this.orders, channel);
      for (let i = 0; i < marketIds.length; i++) {
        const messageHash = channel + ':' + marketIds[i];
        client.resolve(this.orders, messageHash);
      }
    }
  }
  handleSubscriptionStatus(client, message) {
    //
    //     { event: 'subscribe', arg: { channel: 'tickers', instId: 'BTC-USDT' } }
    //
    // const channel = this.safeString (message, 'channel');
    // client.subscriptions[channel] = message;
    return message;
  }
  handleAuthenticate(client, message) {
    //
    //     { event: 'login', success: true }
    //
    client.resolve(message, 'authenticated');
  }
  ping(client) {
    // okex does not support built-in ws protocol-level ping-pong
    // instead it requires custom text-based ping-pong
    return 'ping';
  }
  handlePong(client, message) {
    client.lastPong = this.milliseconds();
    return message;
  }
  handleErrorMessage(client, message) {
    //
    //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
    //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
    //
    const errorCode = this.safeInteger(message, 'code');
    try {
      if (errorCode) {
        const feedback = this.id + ' ' + this.json(message);
        this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
        const messageString = this.safeValue(message, 'message');
        if (messageString !== undefined) {
          this.throwBroadlyMatchedException(this.exceptions['broad'], messageString, feedback);
        }
      }
    } catch (e) {
      if (e instanceof _errors.AuthenticationError) {
        const messageHash = 'authenticated';
        client.reject(e, messageHash);
        if (messageHash in client.subscriptions) {
          delete client.subscriptions[messageHash];
        }
        return false;
      }
    }
    return message;
  }
  handleMessage(client, message) {
    if (!this.handleErrorMessage(client, message)) {
      return;
    }
    //
    //     { event: 'subscribe', arg: { channel: 'tickers', instId: 'BTC-USDT' } }
    //     { event: 'login', msg: '', code: '0' }
    //
    //     {
    //         arg: { channel: 'tickers', instId: 'BTC-USDT' },
    //         data: [
    //             {
    //                 instType: 'SPOT',
    //                 instId: 'BTC-USDT',
    //                 last: '31500.1',
    //                 lastSz: '0.00001754',
    //                 askPx: '31500.1',
    //                 askSz: '0.00998144',
    //                 bidPx: '31500',
    //                 bidSz: '3.05652439',
    //                 open24h: '31697',
    //                 high24h: '32248',
    //                 low24h: '31165.6',
    //                 sodUtc0: '31385.5',
    //                 sodUtc8: '32134.9',
    //                 volCcy24h: '503403597.38138519',
    //                 vol24h: '15937.10781721',
    //                 ts: '1626526618762'
    //             }
    //         ]
    //     }
    //
    //     { event: 'error', msg: 'Illegal request: {"op":"subscribe","args":["spot/ticker:BTC-USDT"]}', code: '60012' }
    //     { event: 'error', msg: "channel:ticker,instId:BTC-USDT doesn't exist", code: '60018' }
    //     { event: 'error', msg: 'Invalid OK_ACCESS_KEY', code: '60005' }
    //     {
    //         event: 'error',
    //         msg: 'Illegal request: {"op":"login","args":["de89b035-b233-44b2-9a13-0ccdd00bda0e","7KUcc8YzQhnxBE3K","1626691289","H57N99mBt5NvW8U19FITrPdOxycAERFMaapQWRqLaSE="]}',
    //         code: '60012'
    //     }
    //
    //
    //
    if (message === 'pong') {
      return this.handlePong(client, message);
    }
    // const table = this.safeString (message, 'table');
    // if (table === undefined) {
    const event = this.safeString(message, 'event');
    if (event !== undefined) {
      const methods = {
        // 'info': this.handleSystemStatus,
        // 'book': 'handleOrderBook',
        'login': this.handleAuthenticate,
        'subscribe': this.handleSubscriptionStatus
      };
      const method = this.safeValue(methods, event);
      if (method === undefined) {
        return message;
      } else {
        return method.call(this, client, message);
      }
    } else {
      const arg = this.safeValue(message, 'arg', {});
      const channel = this.safeString(arg, 'channel');
      const methods = {
        'bbo-tbt': this.handleOrderBook,
        'books': this.handleOrderBook,
        'books5': this.handleOrderBook,
        'books50-l2-tbt': this.handleOrderBook,
        'books-l2-tbt': this.handleOrderBook,
        'tickers': this.handleTicker,
        'trades': this.handleTrades,
        'account': this.handleBalance,
        // 'margin_account': this.handleBalance,
        'orders': this.handleOrders,
        'orders-algo': this.handleOrders
      };
      const method = this.safeValue(methods, channel);
      if (method === undefined) {
        if (channel.indexOf('candle') === 0) {
          this.handleOHLCV(client, message);
        } else {
          return message;
        }
      } else {
        return method.call(this, client, message);
      }
    }
  }
}
exports.default = okx;

},{"../base/errors.js":5,"../base/ws/Cache.js":17,"../okx.js":34}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _phemex = _interopRequireDefault(require("../phemex.js"));
var _Precise = require("../base/Precise.js");
var _Cache = require("../base/ws/Cache.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  ---------------------------------------------------------------------------

//  ---------------------------------------------------------------------------
class phemex extends _phemex.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchTicker': true,
        'watchTickers': false,
        'watchTrades': true,
        'watchMyTrades': true,
        'watchOrders': true,
        'watchOrderBook': true,
        'watchOHLCV': true
      },
      'urls': {
        'test': {
          'ws': 'wss://testnet.phemex.com/ws'
        },
        'api': {
          'ws': 'wss://ws.phemex.com/'
        }
      },
      'options': {
        'tradesLimit': 1000,
        'OHLCVLimit': 1000
      },
      'streaming': {
        'keepAlive': 20000
      }
    });
  }
  fromEn(en, scale) {
    if (en === undefined) {
      return undefined;
    }
    const precise = new _Precise.Precise(en);
    precise.decimals = this.sum(precise.decimals, scale);
    precise.reduce();
    return precise.toString();
  }
  fromEp(ep, market = undefined) {
    if (ep === undefined || market === undefined) {
      return ep;
    }
    return this.fromEn(ep, this.safeInteger(market, 'priceScale'));
  }
  fromEv(ev, market = undefined) {
    if (ev === undefined || market === undefined) {
      return ev;
    }
    return this.fromEn(ev, this.safeInteger(market, 'valueScale'));
  }
  fromEr(er, market = undefined) {
    if (er === undefined || market === undefined) {
      return er;
    }
    return this.fromEn(er, this.safeInteger(market, 'ratioScale'));
  }
  requestId() {
    const requestId = this.sum(this.safeInteger(this.options, 'requestId', 0), 1);
    this.options['requestId'] = requestId;
    return requestId;
  }
  parseUsdtTicker(ticker, market = undefined) {
    // [
    //     "BTCUSDT",
    //     "28262.2",   open
    //     "28505.9",   high
    //     "27505.5",   low
    //     "28218.6",   close
    //     "27175.609",
    //     "760874852.225",
    //     "1183.968",
    //     "28245.61",   index
    //     "28227.262",  mark
    //     "0.0001",
    //     "0.0001"
    // ]
    const marketId = this.safeString(ticker, 0);
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const timestamp = this.milliseconds();
    const open = this.safeNumber(ticker, 1);
    const high = this.safeNumber(ticker, 2);
    const low = this.safeNumber(ticker, 3);
    const last = this.safeNumber(ticker, 4);
    const index = this.safeNumber(ticker, 8);
    const mark = this.safeNumber(ticker, 9);
    const change = this.safeNumber(ticker, 7);
    const average = this.sum(open, last) / 2;
    const baseVolume = this.safeNumber(ticker, 5);
    const quoteVolume = this.safeNumber(ticker, 6);
    const result = {
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': high,
      'low': low,
      'bid': undefined,
      'bidVolume': undefined,
      'ask': undefined,
      'askVolume': undefined,
      'vwap': undefined,
      'open': open,
      'close': last,
      'last': last,
      'previousClose': undefined,
      'change': change,
      'percentage': undefined,
      'average': average,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker,
      'index': index,
      'mark': mark
    };
    return result;
  }
  parseSwapTicker(ticker, market = undefined) {
    //
    //     {
    //         close: 442800,
    //         fundingRate: 10000,
    //         high: 445400,
    //         indexPrice: 442621,
    //         low: 428400,
    //         markPrice: 442659,
    //         open: 432200,
    //         openInterest: 744183,
    //         predFundingRate: 10000,
    //         symbol: 'LTCUSD',
    //         turnover: 8133238294,
    //         volume: 934292
    //     }
    //
    const marketId = this.safeString(ticker, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const timestamp = this.safeIntegerProduct(ticker, 'timestamp', 0.000001);
    const lastString = this.fromEp(this.safeString(ticker, 'close'), market);
    const last = this.parseNumber(lastString);
    const quoteVolume = this.parseNumber(this.fromEv(this.safeString(ticker, 'turnover'), market));
    const baseVolume = this.parseNumber(this.fromEv(this.safeString(ticker, 'volume'), market));
    let change = undefined;
    let percentage = undefined;
    let average = undefined;
    const openString = this.omitZero(this.fromEp(this.safeString(ticker, 'open'), market));
    const open = this.parseNumber(openString);
    if (openString !== undefined && lastString !== undefined) {
      change = this.parseNumber(_Precise.Precise.stringSub(lastString, openString));
      average = this.parseNumber(_Precise.Precise.stringDiv(_Precise.Precise.stringAdd(lastString, openString), '2'));
      percentage = this.parseNumber(_Precise.Precise.stringMul(_Precise.Precise.stringSub(_Precise.Precise.stringDiv(lastString, openString), '1'), '100'));
    }
    const result = {
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.parseNumber(this.fromEp(this.safeString(ticker, 'high'), market)),
      'low': this.parseNumber(this.fromEp(this.safeString(ticker, 'low'), market)),
      'bid': undefined,
      'bidVolume': undefined,
      'ask': undefined,
      'askVolume': undefined,
      'vwap': undefined,
      'open': open,
      'close': last,
      'last': last,
      'previousClose': undefined,
      'change': change,
      'percentage': percentage,
      'average': average,
      'baseVolume': baseVolume,
      'quoteVolume': quoteVolume,
      'info': ticker
    };
    return result;
  }
  handlePackedTickers(client, message) {
    // {
    //     data: [
    //         [ 'ARBUSDT', '1.2836', '1.2853', '1.1097', '1.1336', '67516998', '80802821.8848', '927730', '1.13333999', '1.133479632', '0.0001', '0.0001' ],
    //         [ 'VGXUSDT', '0.347', '0.351', '0.319', '0.319', '3993395', '1341385.4816', '331386', '0.32088837', '0.320870637', '0.0001', '0.0001' ],
    //         ...
    //     ];
    // }
    const tickers = this.safeValue(message, 'data', []);
    for (let i = 0; i < tickers.length; i++) {
      const ticker = tickers[i];
      const result = this.parseUsdtTicker(ticker);
      const symbol = result['symbol'];
      const messageHash = 'perp_market24h_pack_p' + ':' + symbol;
      const timestamp = this.safeIntegerProduct(message, 'timestamp', 0.000001);
      result['timestamp'] = timestamp;
      result['datetime'] = this.iso8601(timestamp);
      this.tickers[symbol] = result;
      client.resolve(result, messageHash);
    }
  }
  handleTicker(client, message) {
    //
    //     {
    //         spot_market24h: {
    //             askEp: 958148000000,
    //             bidEp: 957884000000,
    //             highEp: 962000000000,
    //             lastEp: 958220000000,
    //             lowEp: 928049000000,
    //             openEp: 935597000000,
    //             symbol: 'sBTCUSDT',
    //             turnoverEv: 146074214388978,
    //             volumeEv: 15492228900
    //         },
    //         timestamp: 1592847265888272100
    //     }
    //
    // swap
    //
    //     {
    //         market24h: {
    //             close: 442800,
    //             fundingRate: 10000,
    //             high: 445400,
    //             indexPrice: 442621,
    //             low: 428400,
    //             markPrice: 442659,
    //             open: 432200,
    //             openInterest: 744183,
    //             predFundingRate: 10000,
    //             symbol: 'LTCUSD',
    //             turnover: 8133238294,
    //             volume: 934292
    //         },
    //         timestamp: 1592845585373374500
    //     }
    //
    let name = 'spot_market24h';
    let ticker = this.safeValue(message, name);
    let result = undefined;
    if (ticker === undefined) {
      name = 'market24h';
      ticker = this.safeValue(message, name);
      result = this.parseSwapTicker(ticker);
    } else {
      result = this.parseTicker(ticker);
    }
    const symbol = result['symbol'];
    const messageHash = name + ':' + symbol;
    const timestamp = this.safeIntegerProduct(message, 'timestamp', 0.000001);
    result['timestamp'] = timestamp;
    result['datetime'] = this.iso8601(timestamp);
    this.tickers[symbol] = result;
    client.resolve(result, messageHash);
  }
  async watchBalance(params = {}) {
    /**
     * @method
     * @name phemex#watchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const [type, query] = this.handleMarketTypeAndParams('watchBalance', undefined, params);
    const messageHash = type + ':balance';
    return await this.subscribePrivate(type, messageHash, query);
  }
  handleBalance(type, client, message) {
    // spot
    //    [
    //       {
    //           balanceEv: 0,
    //           currency: 'BTC',
    //           lastUpdateTimeNs: '1650442638722099092',
    //           lockedTradingBalanceEv: 0,
    //           lockedWithdrawEv: 0,
    //           userID: 2647224
    //         },
    //         {
    //           balanceEv: 1154232337,
    //           currency: 'USDT',
    //           lastUpdateTimeNs: '1650442617610017597',
    //           lockedTradingBalanceEv: 0,
    //           lockedWithdrawEv: 0,
    //           userID: 2647224
    //         }
    //    ]
    //
    // swap
    //    [
    //         {
    //           accountBalanceEv: 0,
    //           accountID: 26472240001,
    //           bonusBalanceEv: 0,
    //           currency: 'BTC',
    //           totalUsedBalanceEv: 0,
    //           userID: 2647224
    //         }
    //    ]
    //
    this.balance['info'] = message;
    for (let i = 0; i < message.length; i++) {
      const balance = message[i];
      const currencyId = this.safeString(balance, 'currency');
      const code = this.safeCurrencyCode(currencyId);
      const currency = this.safeValue(this.currencies, code, {});
      const scale = this.safeInteger(currency, 'valueScale', 8);
      const account = this.account();
      let usedEv = this.safeString(balance, 'totalUsedBalanceEv');
      if (usedEv === undefined) {
        const lockedTradingBalanceEv = this.safeString(balance, 'lockedTradingBalanceEv');
        const lockedWithdrawEv = this.safeString(balance, 'lockedWithdrawEv');
        usedEv = _Precise.Precise.stringAdd(lockedTradingBalanceEv, lockedWithdrawEv);
      }
      const totalEv = this.safeString2(balance, 'accountBalanceEv', 'balanceEv');
      account['used'] = this.fromEn(usedEv, scale);
      account['total'] = this.fromEn(totalEv, scale);
      this.balance[code] = account;
      this.balance = this.safeBalance(this.balance);
    }
    const messageHash = type + ':balance';
    client.resolve(this.balance, messageHash);
  }
  handleTrades(client, message) {
    //
    //     {
    //         sequence: 1795484727,
    //         symbol: 'sBTCUSDT',
    //         trades: [
    //             [ 1592891002064516600, 'Buy', 964020000000, 1431000 ],
    //             [ 1592890978987934500, 'Sell', 963704000000, 1401800 ],
    //             [ 1592890972918701800, 'Buy', 963938000000, 2018600 ],
    //         ],
    //         type: 'snapshot'
    //     }
    //
    const name = 'trade';
    const marketId = this.safeString(message, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const messageHash = name + ':' + symbol;
    let stored = this.safeValue(this.trades, symbol);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      stored = new _Cache.ArrayCache(limit);
      this.trades[symbol] = stored;
    }
    const trades = this.safeValue(message, 'trades', []);
    const parsed = this.parseTrades(trades, market);
    for (let i = 0; i < parsed.length; i++) {
      stored.append(parsed[i]);
    }
    client.resolve(stored, messageHash);
  }
  handleOHLCV(client, message) {
    //
    //     {
    //         kline: [
    //             [ 1592905200, 60, 960688000000, 960709000000, 960709000000, 960400000000, 960400000000, 848100, 8146756046 ],
    //             [ 1592905140, 60, 960718000000, 960716000000, 960717000000, 960560000000, 960688000000, 4284900, 41163743512 ],
    //             [ 1592905080, 60, 960513000000, 960684000000, 960718000000, 960684000000, 960718000000, 4880500, 46887494349 ],
    //         ],
    //         sequence: 1804401474,
    //         symbol: 'sBTCUSDT',
    //         type: 'snapshot'
    //     }
    //
    let name = 'kline';
    const marketId = this.safeString(message, 'symbol');
    const market = this.safeMarket(marketId);
    if (market['settle'] === 'USDT') {
      name = 'kline_p';
    }
    const symbol = market['symbol'];
    const candles = this.safeValue(message, name, []);
    const first = this.safeValue(candles, 0, []);
    const interval = this.safeString(first, 1);
    const timeframe = this.findTimeframe(interval);
    if (timeframe !== undefined) {
      const messageHash = name + ':' + timeframe + ':' + symbol;
      const ohlcvs = this.parseOHLCVs(candles, market);
      this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
      let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
      if (stored === undefined) {
        const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
        stored = new _Cache.ArrayCacheByTimestamp(limit);
        this.ohlcvs[symbol][timeframe] = stored;
      }
      for (let i = 0; i < ohlcvs.length; i++) {
        const candle = ohlcvs[i];
        stored.append(candle);
      }
      client.resolve(stored, messageHash);
    }
  }
  async watchTicker(symbol, params = {}) {
    /**
     * @method
     * @name phemex#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    let name = undefined;
    if (market['spot']) {
      name = 'spot_market24h';
    } else if (market['settle'] === 'USDT') {
      name = 'perp_market24h_pack_p';
    } else {
      name = 'market24h';
    }
    const url = this.urls['api']['ws'];
    const requestId = this.requestId();
    const subscriptionHash = name + '.subscribe';
    const messageHash = name + ':' + symbol;
    const subscribe = {
      'method': subscriptionHash,
      'id': requestId,
      'params': []
    };
    const request = this.deepExtend(subscribe, params);
    return await this.watch(url, messageHash, request, subscriptionHash);
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#watchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.urls['api']['ws'];
    const requestId = this.requestId();
    const quote = market['quote'];
    let name = 'trade_p';
    if (quote.toUpperCase() !== 'USDT') {
      name = 'trade';
    }
    const messageHash = name + ':' + symbol;
    const method = name + '.subscribe';
    const subscribe = {
      'method': method,
      'id': requestId,
      'params': [market['id']]
    };
    const request = this.deepExtend(subscribe, params);
    const trades = await this.watch(url, messageHash, request, messageHash);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(trades, since, limit, 'timestamp', true);
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.urls['api']['ws'];
    const requestId = this.requestId();
    let name = 'book';
    if (market['settle'] === 'USDT') {
      name = 'orderbook_p';
    }
    const messageHash = name + ':' + symbol;
    const method = name + '.subscribe';
    const subscribe = {
      'method': method,
      'id': requestId,
      'params': [market['id'], true]
    };
    const request = this.deepExtend(subscribe, params);
    const orderbook = await this.watch(url, messageHash, request, messageHash);
    return orderbook.limit();
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
     * @param {int|undefined} limit the maximum amount of candles to fetch
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    symbol = market['symbol'];
    const url = this.urls['api']['ws'];
    const requestId = this.requestId();
    let name = 'kline';
    if (market['settle'] === 'USDT') {
      name = 'kline_p';
    }
    const messageHash = name + ':' + timeframe + ':' + symbol;
    const method = name + '.subscribe';
    const subscribe = {
      'method': method,
      'id': requestId,
      'params': [market['id'], this.safeInteger(this.timeframes, timeframe)]
    };
    const request = this.deepExtend(subscribe, params);
    const ohlcv = await this.watch(url, messageHash, request, messageHash);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(symbol, limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleDelta(bookside, delta, market = undefined) {
    const bidAsk = this.parseBidAsk(delta, 0, 1, market);
    bookside.storeArray(bidAsk);
  }
  handleDeltas(bookside, deltas, market = undefined) {
    for (let i = 0; i < deltas.length; i++) {
      this.handleDelta(bookside, deltas[i], market);
    }
  }
  handleOrderBook(client, message) {
    //
    //     {
    //         book: {
    //             asks: [
    //                 [ 960316000000, 6993800 ],
    //                 [ 960318000000, 13183000 ],
    //                 [ 960319000000, 9170200 ],
    //             ],
    //             bids: [
    //                 [ 959941000000, 8385300 ],
    //                 [ 959939000000, 10296600 ],
    //                 [ 959930000000, 3672400 ],
    //             ]
    //         },
    //         depth: 30,
    //         sequence: 1805784701,
    //         symbol: 'sBTCUSDT',
    //         timestamp: 1592908460404461600,
    //         type: 'snapshot'
    //     }
    //
    const marketId = this.safeString(message, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const type = this.safeString(message, 'type');
    const depth = this.safeInteger(message, 'depth');
    let name = 'book';
    if (market['settle'] === 'USDT') {
      name = 'orderbook_p';
    }
    const messageHash = name + ':' + symbol;
    const nonce = this.safeInteger(message, 'sequence');
    const timestamp = this.safeIntegerProduct(message, 'timestamp', 0.000001);
    if (type === 'snapshot') {
      const book = this.safeValue2(message, 'book', 'orderbook_p', {});
      const snapshot = this.customParseOrderBook(book, symbol, timestamp, 'bids', 'asks', 0, 1, market);
      snapshot['nonce'] = nonce;
      const orderbook = this.orderBook(snapshot, depth);
      this.orderbooks[symbol] = orderbook;
      client.resolve(orderbook, messageHash);
    } else {
      const orderbook = this.safeValue(this.orderbooks, symbol);
      if (orderbook !== undefined) {
        const changes = this.safeValue2(message, 'book', 'orderbook_p', {});
        const asks = this.safeValue(changes, 'asks', []);
        const bids = this.safeValue(changes, 'bids', []);
        this.handleDeltas(orderbook['asks'], asks, market);
        this.handleDeltas(orderbook['bids'], bids, market);
        orderbook['nonce'] = nonce;
        orderbook['timestamp'] = timestamp;
        orderbook['datetime'] = this.iso8601(timestamp);
        this.orderbooks[symbol] = orderbook;
        client.resolve(orderbook, messageHash);
      }
    }
  }
  async watchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#watchMyTrades
     * @description watches information on multiple trades made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
     */
    await this.loadMarkets();
    let messageHash = 'trades';
    let market = undefined;
    let type = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      messageHash = messageHash + ':' + market['symbol'];
    }
    [type, params] = this.handleMarketTypeAndParams('watchMyTrades', market, params);
    if (symbol === undefined) {
      messageHash = messageHash + ':' + type;
    }
    const trades = await this.subscribePrivate(type, messageHash, params);
    if (this.newUpdates) {
      limit = trades.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
  }
  handleMyTrades(client, message) {
    //
    // [
    //    {
    //       "avgPriceEp":4138763000000,
    //       "baseCurrency":"BTC",
    //       "baseQtyEv":0,
    //       "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
    //       "execBaseQtyEv":30100,
    //       "execFeeEv":31,
    //       "execID":"d3b10cfa-84e3-5752-828e-78a79617e598",
    //       "execPriceEp":4138763000000,
    //       "execQuoteQtyEv":1245767663,
    //       "feeCurrency":"BTC",
    //       "lastLiquidityInd":"RemovedLiquidity",
    //       "ordType":"Market",
    //       "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
    //       "priceEp":4549022000000,
    //       "qtyType":"ByQuote",
    //       "quoteCurrency":"USDT",
    //       "quoteQtyEv":1248000000,
    //       "side":"Buy",
    //       "symbol":"sBTCUSDT",
    //       "tradeType":"Trade",
    //       "transactTimeNs":"1650442617609928764",
    //       "userID":2647224
    //    }
    //  ]
    //
    const channel = 'trades';
    const tradesLength = message.length;
    if (tradesLength === 0) {
      return;
    }
    let cachedTrades = this.myTrades;
    if (cachedTrades === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      cachedTrades = new _Cache.ArrayCacheBySymbolById(limit);
    }
    const marketIds = {};
    let type = undefined;
    for (let i = 0; i < message.length; i++) {
      const rawTrade = message[i];
      const marketId = this.safeString(rawTrade, 'symbol');
      const market = this.safeMarket(marketId);
      const parsed = this.parseTrade(rawTrade);
      cachedTrades.append(parsed);
      const symbol = parsed['symbol'];
      if (type === undefined) {
        type = market['type'];
      }
      marketIds[symbol] = true;
    }
    const keys = Object.keys(marketIds);
    for (let i = 0; i < keys.length; i++) {
      const market = keys[i];
      const hash = channel + ':' + market;
      client.resolve(cachedTrades, hash);
    }
    // generic subscription
    const messageHash = channel + ':' + type;
    client.resolve(cachedTrades, messageHash);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name phemex#watchOrders
     * @description watches information on multiple orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the phemex api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    let messageHash = 'orders';
    let market = undefined;
    let type = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
      messageHash = messageHash + ':' + market['symbol'];
    }
    [type, params] = this.handleMarketTypeAndParams('watchOrders', market, params);
    if (symbol === undefined) {
      messageHash = messageHash + ':' + type;
    }
    const orders = await this.subscribePrivate(type, messageHash, params);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  handleOrders(client, message) {
    // spot update
    // {
    //        "closed":[
    //           {
    //              "action":"New",
    //              "avgPriceEp":4138763000000,
    //              "baseCurrency":"BTC",
    //              "baseQtyEv":0,
    //              "bizError":0,
    //              "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
    //              "createTimeNs":"1650442617606017583",
    //              "cumBaseQtyEv":30100,
    //              "cumFeeEv":31,
    //              "cumQuoteQtyEv":1245767663,
    //              "cxlRejReason":0,
    //              "feeCurrency":"BTC",
    //              "leavesBaseQtyEv":0,
    //              "leavesQuoteQtyEv":0,
    //              "ordStatus":"Filled",
    //              "ordType":"Market",
    //              "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
    //              "pegOffsetValueEp":0,
    //              "priceEp":4549022000000,
    //              "qtyType":"ByQuote",
    //              "quoteCurrency":"USDT",
    //              "quoteQtyEv":1248000000,
    //              "side":"Buy",
    //              "stopPxEp":0,
    //              "symbol":"sBTCUSDT",
    //              "timeInForce":"ImmediateOrCancel",
    //              "tradeType":"Trade",
    //              "transactTimeNs":"1650442617609928764",
    //              "triggerTimeNs":0,
    //              "userID":2647224
    //           }
    //        ],
    //        "fills":[
    //           {
    //              "avgPriceEp":4138763000000,
    //              "baseCurrency":"BTC",
    //              "baseQtyEv":0,
    //              "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
    //              "execBaseQtyEv":30100,
    //              "execFeeEv":31,
    //              "execID":"d3b10cfa-84e3-5752-828e-78a79617e598",
    //              "execPriceEp":4138763000000,
    //              "execQuoteQtyEv":1245767663,
    //              "feeCurrency":"BTC",
    //              "lastLiquidityInd":"RemovedLiquidity",
    //              "ordType":"Market",
    //              "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
    //              "priceEp":4549022000000,
    //              "qtyType":"ByQuote",
    //              "quoteCurrency":"USDT",
    //              "quoteQtyEv":1248000000,
    //              "side":"Buy",
    //              "symbol":"sBTCUSDT",
    //              "tradeType":"Trade",
    //              "transactTimeNs":"1650442617609928764",
    //              "userID":2647224
    //           }
    //        ],
    //        "open":[
    //           {
    //              "action":"New",
    //              "avgPriceEp":0,
    //              "baseCurrency":"LTC",
    //              "baseQtyEv":0,
    //              "bizError":0,
    //              "clOrdID":"2c0e5eb5-efb7-60d3-2e5f-df175df412ef",
    //              "createTimeNs":"1650446670073853755",
    //              "cumBaseQtyEv":0,
    //              "cumFeeEv":0,
    //              "cumQuoteQtyEv":0,
    //              "cxlRejReason":0,
    //              "feeCurrency":"LTC",
    //              "leavesBaseQtyEv":0,
    //              "leavesQuoteQtyEv":1000000000,
    //              "ordStatus":"New",
    //              "ordType":"Limit",
    //              "orderID":"d2aad92f-50f5-441a-957b-8184b146e3fb",
    //              "pegOffsetValueEp":0,
    //              "priceEp":5000000000,
    //              "qtyType":"ByQuote",
    //              "quoteCurrency":"USDT",
    //              "quoteQtyEv":1000000000,
    //              "side":"Buy",
    //            }
    //        ]
    //  },
    //
    let trades = [];
    const parsedOrders = [];
    if ('closed' in message || 'fills' in message || 'open' in message) {
      const closed = this.safeValue(message, 'closed', []);
      const open = this.safeValue(message, 'open', []);
      const orders = this.arrayConcat(open, closed);
      const ordersLength = orders.length;
      if (ordersLength === 0) {
        return;
      }
      trades = this.safeValue(message, 'fills', []);
      for (let i = 0; i < orders.length; i++) {
        const rawOrder = orders[i];
        const parsedOrder = this.parseOrder(rawOrder);
        parsedOrders.push(parsedOrder);
      }
    } else {
      for (let i = 0; i < message.length; i++) {
        const update = message[i];
        const action = this.safeString(update, 'action');
        if (action !== undefined && action !== 'Cancel') {
          // order + trade info together
          trades.push(update);
        }
        const parsedOrder = this.parseWSSwapOrder(update);
        parsedOrders.push(parsedOrder);
      }
    }
    this.handleMyTrades(client, trades);
    const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
    const marketIds = {};
    if (this.orders === undefined) {
      this.orders = new _Cache.ArrayCacheBySymbolById(limit);
    }
    let type = undefined;
    const stored = this.orders;
    for (let i = 0; i < parsedOrders.length; i++) {
      const parsed = parsedOrders[i];
      stored.append(parsed);
      const symbol = parsed['symbol'];
      const market = this.market(symbol);
      if (type === undefined) {
        type = market['type'];
      }
      marketIds[symbol] = true;
    }
    const keys = Object.keys(marketIds);
    for (let i = 0; i < keys.length; i++) {
      const messageHash = 'orders' + ':' + keys[i];
      client.resolve(this.orders, messageHash);
    }
    // resolve generic subscription (spot or swap)
    const messageHash = 'orders:' + type;
    client.resolve(this.orders, messageHash);
  }
  parseWSSwapOrder(order, market = undefined) {
    //
    // {
    //     "accountID":26472240002,
    //     "action":"Cancel",
    //     "actionBy":"ByUser",
    //     "actionTimeNs":"1650450096104760797",
    //     "addedSeq":26975849309,
    //     "bonusChangedAmountEv":0,
    //     "clOrdID":"d9675963-5e4e-6fc8-898a-ec8b934c1c61",
    //     "closedPnlEv":0,
    //     "closedSize":0,
    //     "code":0,
    //     "cumQty":0,
    //     "cumValueEv":0,
    //     "curAccBalanceEv":400079,
    //     "curAssignedPosBalanceEv":0,
    //     "curBonusBalanceEv":0,
    //     "curLeverageEr":0,
    //     "curPosSide":"None",
    //     "curPosSize":0,
    //     "curPosTerm":1,
    //     "curPosValueEv":0,
    //     "curRiskLimitEv":5000000000,
    //     "currency":"USD",
    //     "cxlRejReason":0,
    //     "displayQty":0,
    //     "execFeeEv":0,
    //     "execID":"00000000-0000-0000-0000-000000000000",
    //     "execPriceEp":0,
    //     "execQty":1,
    //     "execSeq":26975862338,
    //     "execStatus":"Canceled",
    //     "execValueEv":0,
    //     "feeRateEr":0,
    //     "leavesQty":0,
    //     "leavesValueEv":0,
    //     "message":"No error",
    //     "ordStatus":"Canceled",
    //     "ordType":"Limit",
    //     "orderID":"8141deb9-8f94-48f6-9421-a4e3a791537b",
    //     "orderQty":1,
    //     "pegOffsetValueEp":0,
    //     "priceEp":9521,
    //     "relatedPosTerm":1,
    //     "relatedReqNum":4,
    //     "side":"Buy",
    //     "slTrigger":"ByMarkPrice",
    //     "stopLossEp":0,
    //     "stopPxEp":0,
    //     "symbol":"ADAUSD",
    //     "takeProfitEp":0,
    //     "timeInForce":"GoodTillCancel",
    //     "tpTrigger":"ByLastPrice",
    //     "transactTimeNs":"1650450096108143014",
    //     "userID":2647224
    //  }
    //
    const id = this.safeString(order, 'orderID');
    let clientOrderId = this.safeString(order, 'clOrdID');
    if (clientOrderId !== undefined && clientOrderId.length < 1) {
      clientOrderId = undefined;
    }
    const marketId = this.safeString(order, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));
    const side = this.safeStringLower(order, 'side');
    const type = this.parseOrderType(this.safeString(order, 'ordType'));
    const price = this.parseNumber(this.fromEp(this.safeString(order, 'priceEp'), market));
    const amount = this.safeString(order, 'orderQty');
    const filled = this.safeString(order, 'cumQty');
    const remaining = this.safeString(order, 'leavesQty');
    const timestamp = this.safeIntegerProduct(order, 'actionTimeNs', 0.000001);
    const costEv = this.safeString(order, 'cumValueEv');
    const cost = this.fromEv(costEv, market);
    let lastTradeTimestamp = this.safeIntegerProduct(order, 'transactTimeNs', 0.000001);
    if (lastTradeTimestamp === 0) {
      lastTradeTimestamp = undefined;
    }
    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));
    const stopPrice = this.safeString(order, 'stopPx');
    const postOnly = timeInForce === 'PO';
    return this.safeOrder({
      'info': order,
      'id': id,
      'clientOrderId': clientOrderId,
      'datetime': this.iso8601(timestamp),
      'timestamp': timestamp,
      'lastTradeTimestamp': lastTradeTimestamp,
      'symbol': symbol,
      'type': type,
      'timeInForce': timeInForce,
      'postOnly': postOnly,
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': stopPrice,
      'amount': amount,
      'filled': filled,
      'remaining': remaining,
      'cost': cost,
      'average': undefined,
      'status': status,
      'fee': undefined,
      'trades': undefined
    }, market);
  }
  handleMessage(client, message) {
    // private spot update
    // {
    //     orders: { closed: [ ], fills: [ ], open: [] },
    //     sequence: 40435835,
    //     timestamp: '1650443245600839241',
    //     type: 'snapshot',
    //     wallets: [
    //       {
    //         balanceEv: 0,
    //         currency: 'BTC',
    //         lastUpdateTimeNs: '1650442638722099092',
    //         lockedTradingBalanceEv: 0,
    //         lockedWithdrawEv: 0,
    //         userID: 2647224
    //       },
    //       {
    //         balanceEv: 1154232337,
    //         currency: 'USDT',
    //         lastUpdateTimeNs: '1650442617610017597',
    //         lockedTradingBalanceEv: 0,
    //         lockedWithdrawEv: 0,
    //         userID: 2647224
    //       }
    //     ]
    // }
    // private swap update
    // {
    //     sequence: 83839628,
    //     timestamp: '1650382581827447829',
    //     type: 'snapshot',
    //     accounts: [
    //       {
    //         accountBalanceEv: 0,
    //         accountID: 26472240001,
    //         bonusBalanceEv: 0,
    //         currency: 'BTC',
    //         totalUsedBalanceEv: 0,
    //         userID: 2647224
    //       }
    //     ],
    //     orders: [],
    //     positions: [
    //       {
    //         accountID: 26472240001,
    //         assignedPosBalanceEv: 0,
    //         avgEntryPriceEp: 0,
    //         bankruptCommEv: 0,
    //         bankruptPriceEp: 0,
    //         buyLeavesQty: 0,
    //         buyLeavesValueEv: 0,
    //         buyValueToCostEr: 1150750,
    //         createdAtNs: 0,
    //         crossSharedBalanceEv: 0,
    //         cumClosedPnlEv: 0,
    //         cumFundingFeeEv: 0,
    //         cumTransactFeeEv: 0,
    //         curTermRealisedPnlEv: 0,
    //         currency: 'BTC',
    //         dataVer: 2,
    //         deleveragePercentileEr: 0,
    //         displayLeverageEr: 10000000000,
    //         estimatedOrdLossEv: 0,
    //         execSeq: 0,
    //         freeCostEv: 0,
    //         freeQty: 0,
    //         initMarginReqEr: 1000000,
    //         lastFundingTime: '1640601827712091793',
    //         lastTermEndTime: 0,
    //         leverageEr: 0,
    //         liquidationPriceEp: 0,
    //         maintMarginReqEr: 500000,
    //         makerFeeRateEr: 0,
    //         markPriceEp: 507806777,
    //         orderCostEv: 0,
    //         posCostEv: 0,
    //         positionMarginEv: 0,
    //         positionStatus: 'Normal',
    //         riskLimitEv: 10000000000,
    //         sellLeavesQty: 0,
    //         sellLeavesValueEv: 0,
    //         sellValueToCostEr: 1149250,
    //         side: 'None',
    //         size: 0,
    //         symbol: 'BTCUSD',
    //         takerFeeRateEr: 0,
    //         term: 1,
    //         transactTimeNs: 0,
    //         unrealisedPnlEv: 0,
    //         updatedAtNs: 0,
    //         usedBalanceEv: 0,
    //         userID: 2647224,
    //         valueEv: 0
    //       }
    //     ]
    // }
    const id = this.safeInteger(message, 'id');
    if (id !== undefined) {
      // not every method stores its subscription
      // as an object so we can't do indeById here
      const subs = client.subscriptions;
      const values = Object.values(subs);
      for (let i = 0; i < values.length; i++) {
        const subscription = values[i];
        if (subscription !== true) {
          const subId = this.safeInteger(subscription, 'id');
          if (subId !== undefined && subId === id) {
            const method = this.safeValue(subscription, 'method');
            if (method !== undefined) {
              method.call(this, client, message);
              return;
            }
          }
        }
      }
    }
    const method = this.safeValue(message, 'method', '');
    if (method === 'server.ping' || this.safeString(message, 'result') === 'pong') {
      this.handlePong(client, message);
    } else if ('spot_market24h' in message || 'market24h' in message) {
      return this.handleTicker(client, message);
    } else if (method.indexOf('perp_market24h_pack_p') >= 0) {
      return this.handlePackedTickers(client, message);
    } else if ('trades' in message) {
      return this.handleTrades(client, message);
    } else if ('kline' in message || 'kline_p' in message) {
      return this.handleOHLCV(client, message);
    } else if ('book' in message || 'orderbook_p' in message) {
      return this.handleOrderBook(client, message);
    }
    if ('orders' in message) {
      const orders = this.safeValue(message, 'orders', {});
      this.handleOrders(client, orders);
    }
    if ('accounts' in message || 'wallets' in message) {
      const type = 'accounts' in message ? 'swap' : 'spot';
      const accounts = this.safeValue2(message, 'accounts', 'wallets', []);
      this.handleBalance(type, client, accounts);
    }
  }
  handleAuthenticate(client, message) {
    //
    // {
    //     "error": null,
    //     "id": 1234,
    //     "result": {
    //       "status": "success"
    //     }
    // }
    //
    const future = client.futures['authenticated'];
    future.resolve(1);
    return message;
  }
  async subscribePrivate(type, messageHash, params = {}) {
    await this.loadMarkets();
    await this.authenticate();
    const url = this.urls['api']['ws'];
    const requestId = this.seconds();
    const channel = type === 'spot' ? 'wo.subscribe' : 'aop.subscribe';
    let request = {
      'id': requestId,
      'method': channel,
      'params': []
    };
    request = this.extend(request, params);
    const subscription = {
      'id': requestId,
      'messageHash': messageHash
    };
    return await this.watch(url, messageHash, request, channel, subscription);
  }
  async authenticate(params = {}) {
    this.checkRequiredCredentials();
    const url = this.urls['api']['ws'];
    const client = this.client(url);
    const time = this.seconds();
    const messageHash = 'authenticated';
    const future = client.future(messageHash);
    const authenticated = this.safeValue(client.subscriptions, messageHash);
    if (authenticated === undefined) {
      const expiryDelta = this.safeInteger(this.options, 'expires', 120);
      const expiration = this.seconds() + expiryDelta;
      const payload = this.apiKey + expiration.toString();
      const signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256');
      const request = {
        'method': 'user.auth',
        'params': ['API', this.apiKey, signature, expiration],
        'id': time
      };
      const subscription = {
        'id': time,
        'method': this.handleAuthenticate
      };
      this.spawn(this.watch, url, messageHash, request, messageHash, subscription);
    }
    return await future;
  }
  ping(client) {
    const requestId = this.requestId();
    const subscriptionHash = 'server.ping';
    return {
      'method': subscriptionHash,
      'id': requestId,
      'params': []
    };
  }
}
exports.default = phemex;

},{"../base/Precise.js":3,"../base/ws/Cache.js":17,"../phemex.js":35}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _woo = _interopRequireDefault(require("../woo.js"));
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
var _Precise = require("../base/Precise.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
class woo extends _woo.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': false,
        'watchMyTrades': false,
        'watchOHLCV': true,
        'watchOrderBook': true,
        'watchOrders': true,
        'watchTicker': true,
        'watchTickers': true,
        'watchTrades': true
      },
      'urls': {
        'api': {
          'ws': {
            'public': 'wss://wss.woo.org/ws/stream',
            'private': 'wss://wss.woo.network/v2/ws/private/stream'
          }
        },
        'test': {
          'ws': {
            'public': 'wss://wss.staging.woo.org/ws/stream',
            'private': 'wss://wss.staging.woo.org/v2/ws/private/stream'
          }
        }
      },
      'requiredCredentials': {
        'apiKey': true,
        'secret': true,
        'uid': true
      },
      'options': {
        'tradesLimit': 1000,
        'ordersLimit': 1000,
        'requestId': {}
      },
      'streaming': {
        'ping': this.ping,
        'keepAlive': 10000
      }
    });
  }
  requestId(url) {
    const options = this.safeValue(this.options, 'requestId', {});
    const previousValue = this.safeInteger(options, url, 0);
    const newValue = this.sum(previousValue, 1);
    this.options['requestId'][url] = newValue;
    return newValue;
  }
  async watchPublic(messageHash, message, shouldThrottle = true) {
    this.checkRequiredUid();
    // const url = this.urls['api']['ws']['public'] + '/' + this.uid;
    const url = this.urls['api']['ws']['public'] + '/' + 'OqdphuyCtYWxwzhxyLLjOWNdFP7sQt8RPWzmb5xY';
    const requestId = this.requestId(url);
    const subscribe = {
      'id': requestId
    };
    const request = this.extend(subscribe, message);
    return await this.watch(url, messageHash, request, messageHash, subscribe, shouldThrottle);
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    await this.loadMarkets();
    const name = 'orderbook';
    const market = this.market(symbol);
    const topic = market['id'] + '@' + name;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const orderbook = await this.watchPublic(topic, message, false);
    return orderbook.limit();
  }
  handleOrderBook(client, message) {
    //
    //     {
    //         topic: 'PERP_BTC_USDT@orderbook',
    //         ts: 1650121915308,
    //         data: {
    //             symbol: 'PERP_BTC_USDT',
    //             bids: [
    //                 [
    //                     0.30891,
    //                     2469.98
    //                 ]
    //             ],
    //             asks: [
    //                 [
    //                     0.31075,
    //                     2379.63
    //                 ]
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(message, 'data');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const topic = this.safeString(message, 'topic');
    let orderbook = this.safeValue(this.orderbooks, symbol);
    if (orderbook === undefined) {
      orderbook = this.orderBook({});
    }
    const timestamp = this.safeInteger(message, 'ts');
    const snapshot = this.parseOrderBook(data, symbol, timestamp, 'bids', 'asks');
    orderbook.reset(snapshot);
    client.resolve(orderbook, topic);
  }
  async watchTicker(symbol, params = {}) {
    await this.loadMarkets();
    const name = 'ticker';
    const market = this.market(symbol);
    const topic = market['id'] + '@' + name;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    return await this.watchPublic(topic, message);
  }
  parseWsTicker(ticker, market = undefined) {
    //
    //     {
    //         symbol: 'PERP_BTC_USDT',
    //         open: 19441.5,
    //         close: 20147.07,
    //         high: 20761.87,
    //         low: 19320.54,
    //         volume: 2481.103,
    //         amount: 50037935.0286,
    //         count: 3689
    //     }
    //
    const timestamp = this.safeInteger(ticker, 'date', this.milliseconds());
    return this.safeTicker({
      'symbol': this.safeSymbol(undefined, market),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.safeString(ticker, 'high'),
      'low': this.safeString(ticker, 'low'),
      'bid': undefined,
      'bidVolume': undefined,
      'ask': undefined,
      'askVolume': undefined,
      'vwap': undefined,
      'open': this.safeString(ticker, 'open'),
      'close': this.safeString(ticker, 'close'),
      'last': this.safeString(ticker, 'close'),
      'mark': this.safeString(ticker, 'close'),
      'previousClose': undefined,
      'change': undefined,
      'percentage': undefined,
      'average': undefined,
      'baseVolume': this.safeString(ticker, 'volume'),
      'quoteVolume': this.safeString(ticker, 'amount'),
      'info': ticker
    }, market);
  }
  handleTicker(client, message) {
    //
    //     {
    //         topic: 'PERP_BTC_USDT@ticker',
    //         ts: 1657120017000,
    //         data: {
    //             symbol: 'PERP_BTC_USDT',
    //             open: 19441.5,
    //             close: 20147.07,
    //             high: 20761.87,
    //             low: 19320.54,
    //             volume: 2481.103,
    //             amount: 50037935.0286,
    //             count: 3689
    //         }
    //     }
    //
    const data = this.safeValue(message, 'data');
    const topic = this.safeValue(message, 'topic');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const timestamp = this.safeInteger(message, 'ts');
    data['date'] = timestamp;
    const ticker = this.parseWsTicker(data, market);
    ticker['symbol'] = market['symbol'];
    this.tickers[market['symbol']] = ticker;
    client.resolve(ticker, topic);
    return message;
  }
  async watchTickers(symbols = undefined, params = {}) {
    await this.loadMarkets();
    const name = 'tickers';
    const topic = name;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const tickers = await this.watchPublic(topic, message);
    return this.filterByArray(tickers, 'symbol', symbols);
  }
  handleTickers(client, message) {
    //
    //     {
    //         "topic":"tickers",
    //         "ts":1618820615000,
    //         "data":[
    //             {
    //                 "symbol":"SPOT_OKB_USDT",
    //                 "open":16.297,
    //                 "close":17.183,
    //                 "high":24.707,
    //                 "low":11.997,
    //                 "volume":0,
    //                 "amount":0,
    //                 "count":0
    //             },
    //             {
    //                 "symbol":"SPOT_XRP_USDT",
    //                 "open":1.3515,
    //                 "close":1.43794,
    //                 "high":1.96674,
    //                 "low":0.39264,
    //                 "volume":750127.1,
    //                 "amount":985440.5122,
    //                 "count":396
    //             },
    //         ...
    //         ]
    //     }
    //
    const topic = this.safeValue(message, 'topic');
    const data = this.safeValue(message, 'data');
    const timestamp = this.safeInteger(message, 'ts');
    const result = [];
    for (let i = 0; i < data.length; i++) {
      const marketId = this.safeString(data[i], 'symbol');
      const market = this.safeMarket(marketId);
      const ticker = this.parseWsTicker(this.extend(data[i], {
        'date': timestamp
      }), market);
      this.tickers[market['symbol']] = ticker;
      result.push(ticker);
    }
    client.resolve(result, topic);
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    if (timeframe !== '1m' && timeframe !== '5m' && timeframe !== '15m' && timeframe !== '30m' && timeframe !== '1h' && timeframe !== '1d' && timeframe !== '1w' && timeframe !== '1M') {
      throw new _errors.ExchangeError(this.id + ' watchOHLCV timeframe argument must be 1m, 5m, 15m, 30m, 1h, 1d, 1w, 1M');
    }
    const market = this.market(symbol);
    const interval = this.safeString(this.timeframes, timeframe, timeframe);
    const name = 'kline';
    const topic = market['id'] + '@' + name + '_' + interval;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const ohlcv = await this.watchPublic(topic, message);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(market['symbol'], limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    //
    //     {
    //         "topic":"SPOT_BTC_USDT@kline_1m",
    //         "ts":1618822432146,
    //         "data":{
    //             "symbol":"SPOT_BTC_USDT",
    //             "type":"1m",
    //             "open":56948.97,
    //             "close":56891.76,
    //             "high":56948.97,
    //             "low":56889.06,
    //             "volume":44.00947568,
    //             "amount":2504584.9,
    //             "startTime":1618822380000,
    //             "endTime":1618822440000
    //         }
    //     }
    //
    const data = this.safeValue(message, 'data');
    const topic = this.safeValue(message, 'topic');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const interval = this.safeString(data, 'type');
    const timeframe = this.findTimeframe(interval);
    const parsed = [this.safeInteger(data, 'startTime'), this.safeFloat(data, 'open'), this.safeFloat(data, 'high'), this.safeFloat(data, 'low'), this.safeFloat(data, 'close'), this.safeFloat(data, 'volume')];
    this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
    let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
      stored = new _Cache.ArrayCacheByTimestamp(limit);
      this.ohlcvs[symbol][timeframe] = stored;
    }
    stored.append(parsed);
    client.resolve(stored, topic);
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const topic = market['id'] + '@trade';
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const trades = await this.watchPublic(topic, message, false);
    if (this.newUpdates) {
      limit = trades.getLimit(market['symbol'], limit);
    }
    return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
  }
  handleTrade(client, message) {
    //
    // {
    //     "topic":"SPOT_ADA_USDT@trade",
    //     "ts":1618820361552,
    //     "data":{
    //         "symbol":"SPOT_ADA_USDT",
    //         "price":1.27988,
    //         "size":300,
    //         "side":"BUY",
    //         "source":0
    //     }
    // }
    //
    const topic = this.safeString(message, 'topic');
    const timestamp = this.safeInteger(message, 'ts');
    const data = this.safeValue(message, 'data');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const trade = this.parseWsTrade(this.extend(data, {
      'timestamp': timestamp
    }), market);
    let tradesArray = this.safeValue(this.trades, symbol);
    if (tradesArray === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      tradesArray = new _Cache.ArrayCache(limit);
    }
    tradesArray.append(trade);
    this.trades[symbol] = tradesArray;
    client.resolve(tradesArray, topic);
  }
  parseWsTrade(trade, market = undefined) {
    //
    //     {
    //         "symbol":"SPOT_ADA_USDT",
    //         "timestamp":1618820361552,
    //         "price":1.27988,
    //         "size":300,
    //         "side":"BUY",
    //         "source":0
    //     }
    //
    const marketId = this.safeString(trade, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString(trade, 'price');
    const amount = this.safeString(trade, 'size');
    const cost = _Precise.Precise.stringMul(price, amount);
    const side = this.safeStringLower(trade, 'side');
    const timestamp = this.safeInteger(trade, 'timestamp');
    return this.safeTrade({
      'id': timestamp,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'side': side,
      'price': price,
      'amount': amount,
      'cost': cost,
      'order': undefined,
      'takerOrMaker': undefined,
      'type': undefined,
      'fee': undefined,
      'info': trade
    }, market);
  }
  checkRequiredUid() {
    // checkRequiredUid (error = true) {
    return true;
    // if (!this.uid) {
    //     if (error) {
    //         throw new AuthenticationError (this.id + ' requires `uid` credential');
    //     } else {
    //         return false;
    //     }
    // }
    // return true;
  }

  authenticate(params = {}) {
    this.checkRequiredCredentials();
    const url = this.urls['api']['ws']['private'] + '/' + this.uid;
    const client = this.client(url);
    const messageHash = 'authenticated';
    const event = 'auth';
    let future = this.safeValue(client.subscriptions, messageHash);
    if (future === undefined) {
      const ts = this.nonce().toString();
      const auth = '|' + ts;
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
      const request = {
        'event': event,
        'params': {
          'apikey': this.apiKey,
          'sign': signature,
          'timestamp': ts
        }
      };
      const message = this.extend(request, params);
      future = this.watch(url, messageHash, message);
      client.subscriptions[messageHash] = future;
    }
    return future;
  }
  async watchPrivate(messageHash, message, params = {}) {
    await this.authenticate(params);
    const url = this.urls['api']['ws']['private'] + '/' + this.uid;
    const requestId = this.requestId(url);
    const subscribe = {
      'id': requestId
    };
    const request = this.extend(subscribe, message);
    return await this.watch(url, messageHash, request, messageHash, subscribe);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const topic = 'executionreport';
    let messageHash = topic;
    if (symbol !== undefined) {
      const market = this.market(symbol);
      symbol = market['symbol'];
      messageHash += ':' + symbol;
    }
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const orders = await this.watchPrivate(messageHash, message);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  parseWsOrder(order, market = undefined) {
    const isAlgoOrder = ('algoType' in order);
    if (isAlgoOrder) {
      return this.parseAlgoOrder(order, market);
    } else {
      return this.parseRegularOrder(order, market);
    }
  }
  handleOrderUpdate(client, message) {
    //
    //     {
    //         topic: 'executionreport',
    //         ts: 1657515556799,
    //         data: {
    //             symbol: 'PERP_BTC_USDT',
    //             clientOrderId: 0,
    //             orderId: 52952826,
    //             type: 'LIMIT',
    //             side: 'SELL',
    //             quantity: 0.01,
    //             price: 22000,
    //             tradeId: 0,
    //             executedPrice: 0,
    //             executedQuantity: 0,
    //             fee: 0,
    //             feeAsset: 'USDT',
    //             totalExecutedQuantity: 0,
    //             status: 'NEW',
    //             reason: '',
    //             orderTag: 'default',
    //             totalFee: 0,
    //             visible: 0.01,
    //             timestamp: 1657515556799,
    //             reduceOnly: false,
    //             maker: false
    //         }
    //     }
    //
    const order = this.safeValue(message, 'data');
    this.handleOrder(client, order);
  }
  handleOrder(client, message) {
    const topic = 'executionreport';
    const parsed = this.parseWsOrder(message);
    const symbol = this.safeString(parsed, 'symbol');
    const orderId = this.safeString(parsed, 'id');
    if (symbol !== undefined) {
      if (this.orders === undefined) {
        const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
        this.orders = new _Cache.ArrayCacheBySymbolById(limit);
      }
      const cachedOrders = this.orders;
      const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
      const order = this.safeValue(orders, orderId);
      if (order !== undefined) {
        const fee = this.safeValue(order, 'fee');
        if (fee !== undefined) {
          parsed['fee'] = fee;
        }
        const fees = this.safeValue(order, 'fees');
        if (fees !== undefined) {
          parsed['fees'] = fees;
        }
        parsed['trades'] = this.safeValue(order, 'trades');
        parsed['timestamp'] = this.safeInteger(order, 'timestamp');
        parsed['datetime'] = this.safeString(order, 'datetime');
      }
      cachedOrders.append(parsed);
      client.resolve(this.orders, topic);
      const messageHashSymbol = topic + ':' + symbol;
      client.resolve(this.orders, messageHashSymbol);
    }
  }
  handleMessage(client, message) {
    const methods = {
      'ping': this.handlePing,
      'pong': this.handlePong,
      'subscribe': this.handleSubscribe,
      'orderbook': this.handleOrderBook,
      'ticker': this.handleTicker,
      'tickers': this.handleTickers,
      'kline': this.handleOHLCV,
      'auth': this.handleAuth,
      'executionreport': this.handleOrderUpdate,
      'trade': this.handleTrade
    };
    const event = this.safeString(message, 'event');
    let method = this.safeValue(methods, event);
    if (method !== undefined) {
      return method.call(this, client, message);
    }
    const topic = this.safeString(message, 'topic');
    if (topic !== undefined) {
      method = this.safeValue(methods, topic);
      if (method !== undefined) {
        return method.call(this, client, message);
      }
      const splitTopic = topic.split('@');
      const splitLength = splitTopic.length;
      if (splitLength === 2) {
        const name = this.safeString(splitTopic, 1);
        method = this.safeValue(methods, name);
        if (method !== undefined) {
          return method.call(this, client, message);
        }
        const splitName = name.split('_');
        const splitNameLength = splitTopic.length;
        if (splitNameLength === 2) {
          method = this.safeValue(methods, this.safeString(splitName, 0));
          if (method !== undefined) {
            return method.call(this, client, message);
          }
        }
      }
    }
    return message;
  }
  ping(client) {
    return {
      'event': 'ping'
    };
  }
  handlePing(client, message) {
    return {
      'event': 'pong'
    };
  }
  handlePong(client, message) {
    //
    // { event: 'pong', ts: 1657117026090 }
    //
    client.lastPong = this.milliseconds();
    return message;
  }
  handleSubscribe(client, message) {
    //
    //     {
    //         id: '666888',
    //         event: 'subscribe',
    //         success: true,
    //         ts: 1657117712212
    //     }
    //
    return message;
  }
  handleAuth(client, message) {
    //
    //     {
    //         event: 'auth',
    //         success: true,
    //         ts: 1657463158812
    //     }
    //
    const messageHash = 'authenticated';
    const success = this.safeValue(message, 'success');
    if (success) {
      client.resolve(message, messageHash);
    } else {
      const error = new _errors.AuthenticationError(this.json(message));
      client.reject(error, messageHash);
      // allows further authentication attempts
      if (messageHash in client.subscriptions) {
        delete client.subscriptions['authenticated'];
      }
    }
  }
}
exports.default = woo;

},{"../base/Precise.js":3,"../base/errors.js":5,"../base/ws/Cache.js":17,"../woo.js":87}],48:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _woofi = _interopRequireDefault(require("../woofi.js"));
var _errors = require("../base/errors.js");
var _Cache = require("../base/ws/Cache.js");
var _Precise = require("../base/Precise.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
class woofi extends _woofi.default {
  describe() {
    return this.deepExtend(super.describe(), {
      'has': {
        'ws': true,
        'watchBalance': false,
        'watchMyTrades': false,
        'watchOHLCV': true,
        'watchOrderBook': true,
        'watchOrders': true,
        'watchTicker': true,
        'watchTickers': true,
        'watchTrades': true
      },
      'urls': {
        'api': {
          'ws': {
            'public': 'wss://ws-evm.orderly.org/ws/stream',
            'private': 'wss://ws-private-evm.orderly.org/v2/ws/private/stream'
          }
        },
        'test': {
          'ws': {
            'public': 'wss://testnet-ws-evm.orderly.org/ws/stream',
            'private': 'wss://testnet-ws-private-evm.orderly.org/v2/ws/private/stream'
          }
        }
      },
      'requiredCredentials': {
        'apiKey': true,
        'secret': true,
        'uid': true
      },
      'options': {
        'tradesLimit': 1000,
        'ordersLimit': 1000,
        'requestId': {}
      },
      'streaming': {
        'ping': this.ping,
        'keepAlive': 10000
      }
    });
  }
  requestId(url) {
    const options = this.safeValue(this.options, 'requestId', {});
    const previousValue = this.safeInteger(options, url, 0);
    const newValue = this.sum(previousValue, 1);
    this.options['requestId'][url] = newValue;
    return newValue;
  }
  async watchPublic(messageHash, message, shouldThrottle = true) {
    this.checkRequiredUid();
    // const url = this.urls['api']['ws']['public'] + '/' + this.uid;
    const url = this.urls['api']['ws']['public'] + '/' + 'OqdphuyCtYWxwzhxyLLjOWNdFP7sQt8RPWzmb5xY';
    const requestId = this.requestId(url);
    const subscribe = {
      'id': requestId
    };
    const request = this.extend(subscribe, message);
    return await this.watch(url, messageHash, request, messageHash, subscribe, shouldThrottle);
  }
  async watchOrderBook(symbol, limit = undefined, params = {}) {
    await this.loadMarkets();
    const name = 'orderbook';
    const market = this.market(symbol);
    const topic = market['id'] + '@' + name;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const orderbook = await this.watchPublic(topic, message, false);
    return orderbook.limit();
  }
  handleOrderBook(client, message) {
    //
    //     {
    //         topic: 'PERP_BTC_USDT@orderbook',
    //         ts: 1650121915308,
    //         data: {
    //             symbol: 'PERP_BTC_USDT',
    //             bids: [
    //                 [
    //                     0.30891,
    //                     2469.98
    //                 ]
    //             ],
    //             asks: [
    //                 [
    //                     0.31075,
    //                     2379.63
    //                 ]
    //             ]
    //         }
    //     }
    //
    const data = this.safeValue(message, 'data');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const topic = this.safeString(message, 'topic');
    let orderbook = this.safeValue(this.orderbooks, symbol);
    if (orderbook === undefined) {
      orderbook = this.orderBook({});
    }
    const timestamp = this.safeInteger(message, 'ts');
    const snapshot = this.parseOrderBook(data, symbol, timestamp, 'bids', 'asks');
    orderbook.reset(snapshot);
    client.resolve(orderbook, topic);
  }
  async watchTicker(symbol, params = {}) {
    await this.loadMarkets();
    const name = 'ticker';
    const market = this.market(symbol);
    const topic = market['id'] + '@' + name;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    return await this.watchPublic(topic, message);
  }
  parseWsTicker(ticker, market = undefined) {
    //
    //     {
    //         symbol: 'PERP_BTC_USDT',
    //         open: 19441.5,
    //         close: 20147.07,
    //         high: 20761.87,
    //         low: 19320.54,
    //         volume: 2481.103,
    //         amount: 50037935.0286,
    //         count: 3689
    //     }
    //
    const timestamp = this.safeInteger(ticker, 'date', this.milliseconds());
    return this.safeTicker({
      'symbol': this.safeSymbol(undefined, market),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.safeString(ticker, 'high'),
      'low': this.safeString(ticker, 'low'),
      'bid': undefined,
      'bidVolume': undefined,
      'ask': undefined,
      'askVolume': undefined,
      'vwap': undefined,
      'open': this.safeString(ticker, 'open'),
      'close': this.safeString(ticker, 'close'),
      'last': this.safeString(ticker, 'close'),
      'mark': this.safeString(ticker, 'close'),
      'previousClose': undefined,
      'change': undefined,
      'percentage': undefined,
      'average': undefined,
      'baseVolume': this.safeString(ticker, 'volume'),
      'quoteVolume': this.safeString(ticker, 'amount'),
      'info': ticker
    }, market);
  }
  handleTicker(client, message) {
    //
    //     {
    //         topic: 'PERP_BTC_USDT@ticker',
    //         ts: 1657120017000,
    //         data: {
    //             symbol: 'PERP_BTC_USDT',
    //             open: 19441.5,
    //             close: 20147.07,
    //             high: 20761.87,
    //             low: 19320.54,
    //             volume: 2481.103,
    //             amount: 50037935.0286,
    //             count: 3689
    //         }
    //     }
    //
    const data = this.safeValue(message, 'data');
    const topic = this.safeValue(message, 'topic');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const timestamp = this.safeInteger(message, 'ts');
    data['date'] = timestamp;
    const ticker = this.parseWsTicker(data, market);
    ticker['symbol'] = market['symbol'];
    this.tickers[market['symbol']] = ticker;
    client.resolve(ticker, topic);
    return message;
  }
  async watchTickers(symbols = undefined, params = {}) {
    await this.loadMarkets();
    const name = 'tickers';
    const topic = name;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const tickers = await this.watchPublic(topic, message);
    return this.filterByArray(tickers, 'symbol', symbols);
  }
  handleTickers(client, message) {
    //
    //     {
    //         "topic":"tickers",
    //         "ts":1618820615000,
    //         "data":[
    //             {
    //                 "symbol":"SPOT_OKB_USDT",
    //                 "open":16.297,
    //                 "close":17.183,
    //                 "high":24.707,
    //                 "low":11.997,
    //                 "volume":0,
    //                 "amount":0,
    //                 "count":0
    //             },
    //             {
    //                 "symbol":"SPOT_XRP_USDT",
    //                 "open":1.3515,
    //                 "close":1.43794,
    //                 "high":1.96674,
    //                 "low":0.39264,
    //                 "volume":750127.1,
    //                 "amount":985440.5122,
    //                 "count":396
    //             },
    //         ...
    //         ]
    //     }
    //
    const topic = this.safeValue(message, 'topic');
    const data = this.safeValue(message, 'data');
    const timestamp = this.safeInteger(message, 'ts');
    const result = [];
    for (let i = 0; i < data.length; i++) {
      const marketId = this.safeString(data[i], 'symbol');
      const market = this.safeMarket(marketId);
      const ticker = this.parseWsTicker(this.extend(data[i], {
        'date': timestamp
      }), market);
      this.tickers[market['symbol']] = ticker;
      result.push(ticker);
    }
    client.resolve(result, topic);
  }
  async watchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    if (timeframe !== '1m' && timeframe !== '5m' && timeframe !== '15m' && timeframe !== '30m' && timeframe !== '1h' && timeframe !== '1d' && timeframe !== '1w' && timeframe !== '1M') {
      throw new _errors.ExchangeError(this.id + ' watchOHLCV timeframe argument must be 1m, 5m, 15m, 30m, 1h, 1d, 1w, 1M');
    }
    const market = this.market(symbol);
    const interval = this.safeString(this.timeframes, timeframe, timeframe);
    const name = 'kline';
    const topic = market['id'] + '@' + name + '_' + interval;
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const ohlcv = await this.watchPublic(topic, message);
    if (this.newUpdates) {
      limit = ohlcv.getLimit(market['symbol'], limit);
    }
    return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
  }
  handleOHLCV(client, message) {
    //
    //     {
    //         "topic":"SPOT_BTC_USDT@kline_1m",
    //         "ts":1618822432146,
    //         "data":{
    //             "symbol":"SPOT_BTC_USDT",
    //             "type":"1m",
    //             "open":56948.97,
    //             "close":56891.76,
    //             "high":56948.97,
    //             "low":56889.06,
    //             "volume":44.00947568,
    //             "amount":2504584.9,
    //             "startTime":1618822380000,
    //             "endTime":1618822440000
    //         }
    //     }
    //
    const data = this.safeValue(message, 'data');
    const topic = this.safeValue(message, 'topic');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const interval = this.safeString(data, 'type');
    const timeframe = this.findTimeframe(interval);
    const parsed = [this.safeInteger(data, 'startTime'), this.safeFloat(data, 'open'), this.safeFloat(data, 'high'), this.safeFloat(data, 'low'), this.safeFloat(data, 'close'), this.safeFloat(data, 'volume')];
    this.ohlcvs[symbol] = this.safeValue(this.ohlcvs, symbol, {});
    let stored = this.safeValue(this.ohlcvs[symbol], timeframe);
    if (stored === undefined) {
      const limit = this.safeInteger(this.options, 'OHLCVLimit', 1000);
      stored = new _Cache.ArrayCacheByTimestamp(limit);
      this.ohlcvs[symbol][timeframe] = stored;
    }
    stored.append(parsed);
    client.resolve(stored, topic);
  }
  async watchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const topic = market['id'] + '@trade';
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const trades = await this.watchPublic(topic, message, false);
    if (this.newUpdates) {
      limit = trades.getLimit(market['symbol'], limit);
    }
    return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
  }
  handleTrade(client, message) {
    //
    // {
    //     "topic":"SPOT_ADA_USDT@trade",
    //     "ts":1618820361552,
    //     "data":{
    //         "symbol":"SPOT_ADA_USDT",
    //         "price":1.27988,
    //         "size":300,
    //         "side":"BUY",
    //         "source":0
    //     }
    // }
    //
    const topic = this.safeString(message, 'topic');
    const timestamp = this.safeInteger(message, 'ts');
    const data = this.safeValue(message, 'data');
    const marketId = this.safeString(data, 'symbol');
    const market = this.safeMarket(marketId);
    const symbol = market['symbol'];
    const trade = this.parseWsTrade(this.extend(data, {
      'timestamp': timestamp
    }), market);
    let tradesArray = this.safeValue(this.trades, symbol);
    if (tradesArray === undefined) {
      const limit = this.safeInteger(this.options, 'tradesLimit', 1000);
      tradesArray = new _Cache.ArrayCache(limit);
    }
    tradesArray.append(trade);
    this.trades[symbol] = tradesArray;
    client.resolve(tradesArray, topic);
  }
  parseWsTrade(trade, market = undefined) {
    //
    //     {
    //         "symbol":"SPOT_ADA_USDT",
    //         "timestamp":1618820361552,
    //         "price":1.27988,
    //         "size":300,
    //         "side":"BUY",
    //         "source":0
    //     }
    //
    const marketId = this.safeString(trade, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString(trade, 'price');
    const amount = this.safeString(trade, 'size');
    const cost = _Precise.Precise.stringMul(price, amount);
    const side = this.safeStringLower(trade, 'side');
    const timestamp = this.safeInteger(trade, 'timestamp');
    return this.safeTrade({
      'id': timestamp,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'side': side,
      'price': price,
      'amount': amount,
      'cost': cost,
      'order': undefined,
      'takerOrMaker': undefined,
      'type': undefined,
      'fee': undefined,
      'info': trade
    }, market);
  }
  checkRequiredUid() {
    // checkRequiredUid (error = true) {
    return true;
    // if (!this.uid) {
    //     if (error) {
    //         throw new AuthenticationError (this.id + ' requires `uid` credential');
    //     } else {
    //         return false;
    //     }
    // }
    // return true;
  }

  authenticate(params = {}) {
    this.checkRequiredCredentials();
    const url = this.urls['api']['ws']['private'] + '/' + this.uid;
    const client = this.client(url);
    const messageHash = 'authenticated';
    const event = 'auth';
    let future = this.safeValue(client.subscriptions, messageHash);
    if (future === undefined) {
      const ts = this.nonce().toString();
      const auth = '|' + ts;
      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
      const request = {
        'event': event,
        'params': {
          'apikey': this.apiKey,
          'sign': signature,
          'timestamp': ts
        }
      };
      const message = this.extend(request, params);
      future = this.watch(url, messageHash, message);
      client.subscriptions[messageHash] = future;
    }
    return future;
  }
  async watchPrivate(messageHash, message, params = {}) {
    await this.authenticate(params);
    const url = this.urls['api']['ws']['private'] + '/' + this.uid;
    const requestId = this.requestId(url);
    const subscribe = {
      'id': requestId
    };
    const request = this.extend(subscribe, message);
    return await this.watch(url, messageHash, request, messageHash, subscribe);
  }
  async watchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const topic = 'executionreport';
    let messageHash = topic;
    if (symbol !== undefined) {
      const market = this.market(symbol);
      symbol = market['symbol'];
      messageHash += ':' + symbol;
    }
    const request = {
      'event': 'subscribe',
      'topic': topic
    };
    const message = this.extend(request, params);
    const orders = await this.watchPrivate(messageHash, message);
    if (this.newUpdates) {
      limit = orders.getLimit(symbol, limit);
    }
    return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
  }
  parseWsOrder(order, market = undefined) {
    const isAlgoOrder = ('algoType' in order);
    if (isAlgoOrder) {
      return this.parseAlgoOrder(order, market);
    } else {
      return this.parseRegularOrder(order, market);
    }
  }
  handleOrderUpdate(client, message) {
    //
    //     {
    //         topic: 'executionreport',
    //         ts: 1657515556799,
    //         data: {
    //             symbol: 'PERP_BTC_USDT',
    //             clientOrderId: 0,
    //             orderId: 52952826,
    //             type: 'LIMIT',
    //             side: 'SELL',
    //             quantity: 0.01,
    //             price: 22000,
    //             tradeId: 0,
    //             executedPrice: 0,
    //             executedQuantity: 0,
    //             fee: 0,
    //             feeAsset: 'USDT',
    //             totalExecutedQuantity: 0,
    //             status: 'NEW',
    //             reason: '',
    //             orderTag: 'default',
    //             totalFee: 0,
    //             visible: 0.01,
    //             timestamp: 1657515556799,
    //             reduceOnly: false,
    //             maker: false
    //         }
    //     }
    //
    const order = this.safeValue(message, 'data');
    this.handleOrder(client, order);
  }
  handleOrder(client, message) {
    const topic = 'executionreport';
    const parsed = this.parseWsOrder(message);
    const symbol = this.safeString(parsed, 'symbol');
    const orderId = this.safeString(parsed, 'id');
    if (symbol !== undefined) {
      if (this.orders === undefined) {
        const limit = this.safeInteger(this.options, 'ordersLimit', 1000);
        this.orders = new _Cache.ArrayCacheBySymbolById(limit);
      }
      const cachedOrders = this.orders;
      const orders = this.safeValue(cachedOrders.hashmap, symbol, {});
      const order = this.safeValue(orders, orderId);
      if (order !== undefined) {
        const fee = this.safeValue(order, 'fee');
        if (fee !== undefined) {
          parsed['fee'] = fee;
        }
        const fees = this.safeValue(order, 'fees');
        if (fees !== undefined) {
          parsed['fees'] = fees;
        }
        parsed['trades'] = this.safeValue(order, 'trades');
        parsed['timestamp'] = this.safeInteger(order, 'timestamp');
        parsed['datetime'] = this.safeString(order, 'datetime');
      }
      cachedOrders.append(parsed);
      client.resolve(this.orders, topic);
      const messageHashSymbol = topic + ':' + symbol;
      client.resolve(this.orders, messageHashSymbol);
    }
  }
  handleMessage(client, message) {
    const methods = {
      'ping': this.handlePing,
      'pong': this.handlePong,
      'subscribe': this.handleSubscribe,
      'orderbook': this.handleOrderBook,
      'ticker': this.handleTicker,
      'tickers': this.handleTickers,
      'kline': this.handleOHLCV,
      'auth': this.handleAuth,
      'executionreport': this.handleOrderUpdate,
      'trade': this.handleTrade
    };
    const event = this.safeString(message, 'event');
    let method = this.safeValue(methods, event);
    if (method !== undefined) {
      return method.call(this, client, message);
    }
    const topic = this.safeString(message, 'topic');
    if (topic !== undefined) {
      method = this.safeValue(methods, topic);
      if (method !== undefined) {
        return method.call(this, client, message);
      }
      const splitTopic = topic.split('@');
      const splitLength = splitTopic.length;
      if (splitLength === 2) {
        const name = this.safeString(splitTopic, 1);
        method = this.safeValue(methods, name);
        if (method !== undefined) {
          return method.call(this, client, message);
        }
        const splitName = name.split('_');
        const splitNameLength = splitTopic.length;
        if (splitNameLength === 2) {
          method = this.safeValue(methods, this.safeString(splitName, 0));
          if (method !== undefined) {
            return method.call(this, client, message);
          }
        }
      }
    }
    return message;
  }
  ping(client) {
    return {
      'event': 'ping'
    };
  }
  handlePing(client, message) {
    return {
      'event': 'pong'
    };
  }
  handlePong(client, message) {
    //
    // { event: 'pong', ts: 1657117026090 }
    //
    client.lastPong = this.milliseconds();
    return message;
  }
  handleSubscribe(client, message) {
    //
    //     {
    //         id: '666888',
    //         event: 'subscribe',
    //         success: true,
    //         ts: 1657117712212
    //     }
    //
    return message;
  }
  handleAuth(client, message) {
    //
    //     {
    //         event: 'auth',
    //         success: true,
    //         ts: 1657463158812
    //     }
    //
    const messageHash = 'authenticated';
    const success = this.safeValue(message, 'success');
    if (success) {
      client.resolve(message, messageHash);
    } else {
      const error = new _errors.AuthenticationError(this.json(message));
      client.reject(error, messageHash);
      // allows further authentication attempts
      if (messageHash in client.subscriptions) {
        delete client.subscriptions['authenticated'];
      }
    }
  }
}
exports.default = woofi;

},{"../base/Precise.js":3,"../base/errors.js":5,"../base/ws/Cache.js":17,"../woofi.js":88}],49:[function(require,module,exports){
"use strict";
(function (module, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val)
            throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () { };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) {
            return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    // if (typeof module === 'object') {
    //     module.exports = BN;
    // } else {
    //     exports.BN = BN;
    // }
    var exports = {
        BN: BN
    };
    module.exports = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        Buffer = require('buffer').Buffer;
    }
    catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) {
            return true;
        }
        return num !== null && typeof num === 'object' &&
            num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
            return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
            return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
            return this._initNumber(number, base, endian);
        }
        if (typeof number === 'object') {
            return this._initArray(number, base, endian);
        }
        if (base === 'hex') {
            base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
        }
        if (base === 16) {
            this._parseHex(number, start);
        }
        else {
            this._parseBase(number, base, start);
        }
        if (number[0] === '-') {
            this.negative = 1;
        }
        this._strip();
        if (endian !== 'le')
            return;
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [number & 0x3ffffff];
            this.length = 1;
        }
        else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
            ];
            this.length = 2;
        }
        else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le')
            return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === 'be') {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                    off -= 26;
                    j++;
                }
            }
        }
        else if (endian === 'le') {
            for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                    off -= 26;
                    j++;
                }
            }
        }
        return this._strip();
    };
    function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        var z = 0;
        for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r <<= 4;
            var b;
            // 'a' - 'f'
            if (c >= 49 && c <= 54) {
                b = c - 49 + 0xa;
                // 'A' - 'F'
            }
            else if (c >= 17 && c <= 22) {
                b = c - 17 + 0xa;
                // '0' - '9'
            }
            else {
                b = c;
            }
            r |= b;
            z |= b;
        }
        assert(!(z & 0xf0), 'Invalid character in ' + str);
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
        }
        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
            w = parseHex(number, i, i + 6);
            this.words[j] |= (w << off) & 0x3ffffff;
            // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
            this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        if (i + 6 !== start) {
            w = parseHex(number, start, i + 6);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) {
                b = c - 49 + 0xa;
                // 'A'
            }
            else if (c >= 17) {
                b = c - 17 + 0xa;
                // '0' - '9'
            }
            else {
                b = c;
            }
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;
        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
            limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
            }
            else {
                this._iaddn(word);
            }
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for (i = 0; i < mod; i++) {
                pow *= base;
            }
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
            }
            else {
                this._iaddn(word);
            }
        }
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype._move = function _move(dest) {
        dest.words = this.words;
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
            this.words[this.length++] = 0;
        }
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
        }
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
        }
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    }
    else {
        BN.prototype.inspect = inspect;
    }
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */
    var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
    ];
    var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                    out = zeros[6 - word.length] + word + out;
                }
                else {
                    out = word + out;
                }
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) {
                out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
                out = '0' + out;
            }
            if (this.negative !== 0) {
                out = '-' + out;
            }
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) {
                    out = zeros[groupSize - r.length] + r + out;
                }
                else {
                    out = r + out;
                }
            }
            if (this.isZero()) {
                out = '0' + out;
            }
            while (out.length % padding !== 0) {
                out = '0' + out;
            }
            if (this.negative !== 0) {
                out = '-' + out;
            }
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
            ret += this.words[1] * 0x4000000;
        }
        else if (this.length === 3 && this.words[2] === 0x01) {
            // NOTE: at this stage it is known that the top bit is set
            ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        }
        else if (this.length > 2) {
            assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
            return this.toArrayLike(Buffer, endian, length);
        };
    }
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
            var word = (this.words[i] << shift) | carry;
            res[position++] = word & 0xff;
            if (position < res.length) {
                res[position++] = (word >> 8) & 0xff;
            }
            if (position < res.length) {
                res[position++] = (word >> 16) & 0xff;
            }
            if (shift === 6) {
                if (position < res.length) {
                    res[position++] = (word >> 24) & 0xff;
                }
                carry = 0;
                shift = 0;
            }
            else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
                res[position++] = 0;
            }
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
            var word = (this.words[i] << shift) | carry;
            res[position--] = word & 0xff;
            if (position >= 0) {
                res[position--] = (word >> 8) & 0xff;
            }
            if (position >= 0) {
                res[position--] = (word >> 16) & 0xff;
            }
            if (shift === 6) {
                if (position >= 0) {
                    res[position--] = (word >> 24) & 0xff;
                }
                carry = 0;
                shift = 0;
            }
            else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
                res[position--] = 0;
            }
        }
    };
    if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
        };
    }
    else {
        BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
            }
            if (t >= 0x40) {
                r += 7;
                t >>>= 7;
            }
            if (t >= 0x8) {
                r += 4;
                t >>>= 4;
            }
            if (t >= 0x02) {
                r += 2;
                t >>>= 2;
            }
            return r + t;
        };
    }
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0)
            return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) {
            r++;
        }
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
            var off = (bit / 26) | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] >>> wbit) & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
            return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26)
                break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
            this.negative ^= 1;
        }
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
            this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length)
            return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
            return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
            b = num;
        }
        else {
            b = this;
        }
        for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length)
            return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
            return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        }
        else {
            a = num;
            b = this;
        }
        for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
            for (; i < a.length; i++) {
                this.words[i] = a.words[i];
            }
        }
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
            return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
            return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
            bytesNeeded--;
        }
        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 0x3ffffff;
        }
        // Handle the residue
        if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
            this.words[off] = this.words[off] | (1 << wbit);
        }
        else {
            this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
            // positive + negative
        }
        else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        }
        else {
            a = num;
            b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
            // Copy the rest of the words
        }
        else if (a !== this) {
            for (; i < a.length; i++) {
                this.words[i] = a.words[i];
            }
        }
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        }
        else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length)
            return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
            // -this - num = -(this + num)
        }
        else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        }
        else {
            a = num;
            b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
                this.words[i] = a.words[i];
            }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
            this.negative = 1;
        }
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) {
            out.words[k] = carry | 0;
        }
        else {
            out.length--;
        }
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) {
        comb10MulTo = smallMulTo;
    }
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) {
            out.words[k] = carry;
        }
        else {
            out.length--;
        }
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
        }
        else if (len < 63) {
            res = smallMulTo(this, num, out);
        }
        else if (len < 1024) {
            res = bigMulTo(this, num, out);
        }
        else {
            res = jumboMulTo(this, num, out);
        }
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
        }
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
            return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
            rb |= (x & 1) << (l - i - 1);
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for (var j = 0; j < s; j++) {
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */
                    if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
        }
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
            return;
        for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                Math.round(ws[2 * i] / N) +
                carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) {
                carry = 0;
            }
            else {
                carry = w / 0x4000000 | 0;
            }
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
            ph[i] = 0;
        }
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
            num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += (w / 0x4000000) | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
            return new BN(1);
        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0)
                break;
        }
        if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                if (w[i] === 0)
                    continue;
                res = res.mul(q);
            }
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;
        if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
                this.words[i] = 0;
            }
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
            h = (hint - (hint % 26)) / 26;
        }
        else {
            h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
        }
        if (s === 0) {
            // No-op, we should not move anything at all
        }
        else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
            }
        }
        else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = (carry << (26 - r)) | (word >>> r);
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s)
            return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) {
            return this;
        }
        if (r !== 0) {
            s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0)
            return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) {
                this.words[i + 1] = 1;
            }
            else {
                this.words[i + 1]++;
            }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0)
            return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        }
        else {
            // Carry
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
            }
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - ((right / 0x4000000) | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0)
            return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
            }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) {
                q.words[m] = 1;
            }
        }
        for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min((qj / bhi) | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                    a.negative ^= 1;
                }
            }
            if (q) {
                q.words[j] = qj;
            }
        }
        if (q) {
            q._strip();
        }
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) {
            a.iushrn(shift);
        }
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
            return {
                div: new BN(0),
                mod: new BN(0)
            };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') {
                div = res.div.neg();
            }
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                    mod.iadd(num);
                }
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') {
                div = res.div.neg();
            }
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                    mod.isub(num);
                }
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
            return {
                div: new BN(0),
                mod: this
            };
        }
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') {
                return {
                    div: this.divn(num.words[0]),
                    mod: null
                };
            }
            if (mode === 'mod') {
                return {
                    div: null,
                    mod: new BN(this.modrn(num.words[0]))
                };
            }
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero())
            return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0))
            return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
            num = -num;
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
            num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = (w / num) | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
            x = x.umod(p);
        }
        else {
            x = x.clone();
        }
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
            if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
            if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            }
            else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
            a = a.umod(p);
        }
        else {
            a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                ;
            if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                    if (x1.isOdd()) {
                        x1.iadd(delta);
                    }
                    x1.iushrn(1);
                }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
            if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                    if (x2.isOdd()) {
                        x2.iadd(delta);
                    }
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            }
            else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) {
            res = x1;
        }
        else {
            res = x2;
        }
        if (res.cmpn(0) < 0) {
            res.iadd(p);
        }
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
            return num.abs();
        if (num.isZero())
            return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while (a.isEven()) {
                a.iushrn(1);
            }
            while (b.isEven()) {
                b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            }
            else if (r === 0 || b.cmpn(1) === 0) {
                break;
            }
            a.isub(b);
        } while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
            return -1;
        if (this.negative === 0 && negative)
            return 1;
        this._strip();
        var res;
        if (this.length > 1) {
            res = 1;
        }
        else {
            if (negative) {
                num = -num;
            }
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
            return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
            return -1;
        if (this.negative === 0 && num.negative !== 0)
            return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
            return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length)
            return 1;
        if (this.length < num.length)
            return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b)
                continue;
            if (a < b) {
                res = -1;
            }
            else if (a > b) {
                res = 1;
            }
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        }
        else if (cmp > 0) {
            r.isub(this.p);
        }
        else {
            r._strip();
        }
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
            input.length -= 10;
        }
        else {
            input.length -= 9;
        }
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
                num.length--;
            }
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) {
            num.words[num.length++] = carry;
        }
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name])
            return primes[name];
        var prime;
        if (name === 'k256') {
            prime = new K256();
        }
        else if (name === 'p224') {
            prime = new P224();
        }
        else if (name === 'p192') {
            prime = new P192();
        }
        else if (name === 'p25519') {
            prime = new P25519();
        }
        else {
            throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        }
        else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime)
            return this.prime.ireduce(a)._forceRed(this);
        a.umod(this.m)._forceRed(this)._move(a);
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
            return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
        }
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
        }
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
            res.iadd(this.m);
        }
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
            res.iadd(this.m);
        }
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
            return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
            }
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        }
        else {
            return this.imod(inv);
        }
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
            return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
            return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
            start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                    res = this.sqr(res);
                }
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0))
                    continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
            this.shift += 26 - (this.shift % 26);
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
        }
        else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
        }
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
            return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
        }
        else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
        }
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":98}],50:[function(require,module,exports){
"use strict";
;
(function (root, factory) {
    if (typeof exports === "object") {
        // CommonJS
        module.exports = exports = factory();
    }
    else if (typeof define === "function" && define.amd) {
        // AMD
        define([], factory);
    }
    else {
        // Global (browser)
        root.CryptoJS = factory();
    }
}(this, function () {
    /**
     * CryptoJS core components.
     */
    var CryptoJS = CryptoJS || (function (Math, undefined) {
        /*
         * Local polyfil of Object.create
         */
        var create = Object.create || (function () {
            function F() { }
            ;
            return function (obj) {
                var subtype;
                F.prototype = obj;
                subtype = new F();
                F.prototype = null;
                return subtype;
            };
        }());
        /**
         * CryptoJS namespace.
         */
        var C = {};
        /**
         * Library namespace.
         */
        var C_lib = C.lib = {};
        /**
         * Base object for prototypal inheritance.
         */
        var Base = C_lib.Base = (function () {
            return {
                /**
                 * Creates a new object that inherits from this object.
                 *
                 * @param {Object} overrides Properties to copy into the new object.
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         field: 'value',
                 *
                 *         method: function () {
                 *         }
                 *     });
                 */
                extend: function (overrides) {
                    // Spawn
                    var subtype = create(this);
                    // Augment
                    if (overrides) {
                        subtype.mixIn(overrides);
                    }
                    // Create default initializer
                    if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                        subtype.init = function () {
                            subtype.$super.init.apply(this, arguments);
                        };
                    }
                    // Initializer's prototype is the subtype object
                    subtype.init.prototype = subtype;
                    // Reference supertype
                    subtype.$super = this;
                    return subtype;
                },
                /**
                 * Extends this object and runs the init method.
                 * Arguments to create() will be passed to init().
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var instance = MyType.create();
                 */
                create: function () {
                    var instance = this.extend();
                    instance.init.apply(instance, arguments);
                    return instance;
                },
                /**
                 * Initializes a newly created object.
                 * Override this method to add some logic when your objects are created.
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         init: function () {
                 *             // ...
                 *         }
                 *     });
                 */
                init: function () {
                },
                /**
                 * Copies properties into this object.
                 *
                 * @param {Object} properties The properties to mix in.
                 *
                 * @example
                 *
                 *     MyType.mixIn({
                 *         field: 'value'
                 *     });
                 */
                mixIn: function (properties) {
                    for (var propertyName in properties) {
                        if (properties.hasOwnProperty(propertyName)) {
                            this[propertyName] = properties[propertyName];
                        }
                    }
                    // IE won't copy toString using the loop above
                    if (properties.hasOwnProperty('toString')) {
                        this.toString = properties.toString;
                    }
                },
                /**
                 * Creates a copy of this object.
                 *
                 * @return {Object} The clone.
                 *
                 * @example
                 *
                 *     var clone = instance.clone();
                 */
                clone: function () {
                    return this.init.prototype.extend(this);
                }
            };
        }());
        /**
         * An array of 32-bit words.
         *
         * @property {Array} words The array of 32-bit words.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */
        var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: function (words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined) {
                    this.sigBytes = sigBytes;
                }
                else {
                    this.sigBytes = words.length * 4;
                }
            },
            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: function (encoder) {
                return (encoder || Hex).stringify(this);
            },
            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: function (wordArray) {
                // Shortcuts
                var thisWords = this.words;
                var thatWords = wordArray.words;
                var thisSigBytes = this.sigBytes;
                var thatSigBytes = wordArray.sigBytes;
                // Clamp excess bits
                this.clamp();
                // Concat
                if (thisSigBytes % 4) {
                    // Copy one byte at a time
                    for (var i = 0; i < thatSigBytes; i++) {
                        var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                        thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
                    }
                }
                else {
                    // Copy one word at a time
                    for (var i = 0; i < thatSigBytes; i += 4) {
                        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
                    }
                }
                this.sigBytes += thatSigBytes;
                // Chainable
                return this;
            },
            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: function () {
                // Shortcuts
                var words = this.words;
                var sigBytes = this.sigBytes;
                // Clamp
                words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
                words.length = Math.ceil(sigBytes / 4);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: function () {
                var clone = Base.clone.call(this);
                clone.words = this.words.slice(0);
                return clone;
            },
            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: function (nBytes) {
                var words = [];
                var r = (function (m_w) {
                    var m_w = m_w;
                    var m_z = 0x3ade68b1;
                    var mask = 0xffffffff;
                    return function () {
                        m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
                        m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
                        var result = ((m_z << 0x10) + m_w) & mask;
                        result /= 0x100000000;
                        result += 0.5;
                        return result * (Math.random() > .5 ? 1 : -1);
                    };
                });
                for (var i = 0, rcache; i < nBytes; i += 4) {
                    var _r = r((rcache || Math.random()) * 0x100000000);
                    rcache = _r() * 0x3ade67b7;
                    words.push((_r() * 0x100000000) | 0);
                }
                return new WordArray.init(words, nBytes);
            }
        });
        /**
         * Encoder namespace.
         */
        var C_enc = C.enc = {};
        /**
         * Hex encoding strategy.
         */
        var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var hexChars = [];
                for (var i = 0; i < sigBytes; i++) {
                    var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    hexChars.push((bite >>> 4).toString(16));
                    hexChars.push((bite & 0x0f).toString(16));
                }
                return hexChars.join('');
            },
            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: function (hexStr) {
                // Shortcut
                var hexStrLength = hexStr.length;
                // Convert
                var words = [];
                for (var i = 0; i < hexStrLength; i += 2) {
                    words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
                }
                return new WordArray.init(words, hexStrLength / 2);
            }
        };
        /**
         * Latin1 encoding strategy.
         */
        var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var latin1Chars = [];
                for (var i = 0; i < sigBytes; i++) {
                    var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    latin1Chars.push(String.fromCharCode(bite));
                }
                return latin1Chars.join('');
            },
            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: function (latin1Str) {
                // Shortcut
                var latin1StrLength = latin1Str.length;
                // Convert
                var words = [];
                for (var i = 0; i < latin1StrLength; i++) {
                    words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
                }
                return new WordArray.init(words, latin1StrLength);
            }
        };
        /**
         * UTF-8 encoding strategy.
         */
        var Utf8 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: function (wordArray) {
                try {
                    return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                }
                catch (e) {
                    throw new Error('Malformed UTF-8 data');
                }
            },
            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: function (utf8Str) {
                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
        };
        /**
         * Abstract buffered block algorithm template.
         *
         * The property blockSize must be implemented in a concrete subtype.
         *
         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
         */
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: function () {
                // Initial values
                this._data = new WordArray.init();
                this._nDataBytes = 0;
            },
            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: function (data) {
                // Convert string to WordArray, else assume WordArray already
                if (typeof data == 'string') {
                    data = Utf8.parse(data);
                }
                // Append
                this._data.concat(data);
                this._nDataBytes += data.sigBytes;
            },
            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: function (doFlush) {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var dataSigBytes = data.sigBytes;
                var blockSize = this.blockSize;
                var blockSizeBytes = blockSize * 4;
                // Count blocks ready
                var nBlocksReady = dataSigBytes / blockSizeBytes;
                if (doFlush) {
                    // Round up to include partial blocks
                    nBlocksReady = Math.ceil(nBlocksReady);
                }
                else {
                    // Round down to include only full blocks,
                    // less the number of blocks that must remain in the buffer
                    nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                }
                // Count words ready
                var nWordsReady = nBlocksReady * blockSize;
                // Count bytes ready
                var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
                // Process blocks
                if (nWordsReady) {
                    for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                        // Perform concrete-algorithm logic
                        this._doProcessBlock(dataWords, offset);
                    }
                    // Remove processed words
                    var processedWords = dataWords.splice(0, nWordsReady);
                    data.sigBytes -= nBytesReady;
                }
                // Return processed words
                return new WordArray.init(processedWords, nBytesReady);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: function () {
                var clone = Base.clone.call(this);
                clone._data = this._data.clone();
                return clone;
            },
            _minBufferSize: 0
        });
        /**
         * Abstract hasher template.
         *
         * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
         */
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),
            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: function (cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);
                // Set initial values
                this.reset();
            },
            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: function () {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);
                // Perform concrete-hasher logic
                this._doReset();
            },
            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: function (messageUpdate) {
                // Append
                this._append(messageUpdate);
                // Update the hash
                this._process();
                // Chainable
                return this;
            },
            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: function (messageUpdate) {
                // Final message update
                if (messageUpdate) {
                    this._append(messageUpdate);
                }
                // Perform concrete-hasher logic
                var hash = this._doFinalize();
                return hash;
            },
            blockSize: 512 / 32,
            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: function (hasher) {
                return function (message, cfg) {
                    return new hasher.init(cfg).finalize(message);
                };
            },
            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: function (hasher) {
                return function (message, key) {
                    return new C_algo.HMAC.init(hasher, key).finalize(message);
                };
            }
        });
        /**
         * Algorithm namespace.
         */
        var C_algo = C.algo = {};
        return C;
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
         * Base64 encoding strategy.
         */
        var Base64 = C_enc.Base64 = {
            /**
             * Converts a word array to a Base64 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Base64 string.
             *
             * @static
             *
             * @example
             *
             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                var map = this._map;
                // Clamp excess bits
                wordArray.clamp();
                // Convert
                var base64Chars = [];
                for (var i = 0; i < sigBytes; i += 3) {
                    var byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
                    var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;
                    var triplet = (byte1 << 16) | (byte2 << 8) | byte3;
                    for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
                        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
                    }
                }
                // Add padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    while (base64Chars.length % 4) {
                        base64Chars.push(paddingChar);
                    }
                }
                return base64Chars.join('');
            },
            /**
             * Converts a Base64 string to a word array.
             *
             * @param {string} base64Str The Base64 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
             */
            parse: function (base64Str) {
                // Shortcuts
                var base64StrLength = base64Str.length;
                var map = this._map;
                var reverseMap = this._reverseMap;
                if (!reverseMap) {
                    reverseMap = this._reverseMap = [];
                    for (var j = 0; j < map.length; j++) {
                        reverseMap[map.charCodeAt(j)] = j;
                    }
                }
                // Ignore padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    var paddingIndex = base64Str.indexOf(paddingChar);
                    if (paddingIndex !== -1) {
                        base64StrLength = paddingIndex;
                    }
                }
                // Convert
                return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for (var i = 0; i < base64StrLength; i++) {
                if (i % 4) {
                    var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
                    var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
                    nBytes++;
                }
            }
            return WordArray.create(words, nBytes);
        }
    }());
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Constants table
        var T = [];
        // Compute constants
        (function () {
            for (var i = 0; i < 64; i++) {
                T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
            }
        }());
        /**
         * MD5 hash algorithm.
         */
        var MD5 = C_algo.MD5 = Hasher.extend({
            _doReset: function () {
                this._hash = new WordArray.init([
                    0x67452301, 0xefcdab89,
                    0x98badcfe, 0x10325476
                ]);
            },
            _doProcessBlock: function (M, offset) {
                // Swap endian
                for (var i = 0; i < 16; i++) {
                    // Shortcuts
                    var offset_i = offset + i;
                    var M_offset_i = M[offset_i];
                    M[offset_i] = ((((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                        (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00));
                }
                // Shortcuts
                var H = this._hash.words;
                var M_offset_0 = M[offset + 0];
                var M_offset_1 = M[offset + 1];
                var M_offset_2 = M[offset + 2];
                var M_offset_3 = M[offset + 3];
                var M_offset_4 = M[offset + 4];
                var M_offset_5 = M[offset + 5];
                var M_offset_6 = M[offset + 6];
                var M_offset_7 = M[offset + 7];
                var M_offset_8 = M[offset + 8];
                var M_offset_9 = M[offset + 9];
                var M_offset_10 = M[offset + 10];
                var M_offset_11 = M[offset + 11];
                var M_offset_12 = M[offset + 12];
                var M_offset_13 = M[offset + 13];
                var M_offset_14 = M[offset + 14];
                var M_offset_15 = M[offset + 15];
                // Working varialbes
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                // Computation
                a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                b = FF(b, c, d, a, M_offset_15, 22, T[15]);
                a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                b = GG(b, c, d, a, M_offset_12, 20, T[31]);
                a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                b = HH(b, c, d, a, M_offset_2, 23, T[47]);
                a = II(a, b, c, d, M_offset_0, 6, T[48]);
                d = II(d, a, b, c, M_offset_7, 10, T[49]);
                c = II(c, d, a, b, M_offset_14, 15, T[50]);
                b = II(b, c, d, a, M_offset_5, 21, T[51]);
                a = II(a, b, c, d, M_offset_12, 6, T[52]);
                d = II(d, a, b, c, M_offset_3, 10, T[53]);
                c = II(c, d, a, b, M_offset_10, 15, T[54]);
                b = II(b, c, d, a, M_offset_1, 21, T[55]);
                a = II(a, b, c, d, M_offset_8, 6, T[56]);
                d = II(d, a, b, c, M_offset_15, 10, T[57]);
                c = II(c, d, a, b, M_offset_6, 15, T[58]);
                b = II(b, c, d, a, M_offset_13, 21, T[59]);
                a = II(a, b, c, d, M_offset_4, 6, T[60]);
                d = II(d, a, b, c, M_offset_11, 10, T[61]);
                c = II(c, d, a, b, M_offset_2, 15, T[62]);
                b = II(b, c, d, a, M_offset_9, 21, T[63]);
                // Intermediate hash value
                H[0] = (H[0] + a) | 0;
                H[1] = (H[1] + b) | 0;
                H[2] = (H[2] + c) | 0;
                H[3] = (H[3] + d) | 0;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
                var nBitsTotalL = nBitsTotal;
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = ((((nBitsTotalH << 8) | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
                    (((nBitsTotalH << 24) | (nBitsTotalH >>> 8)) & 0xff00ff00));
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = ((((nBitsTotalL << 8) | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
                    (((nBitsTotalL << 24) | (nBitsTotalL >>> 8)) & 0xff00ff00));
                data.sigBytes = (dataWords.length + 1) * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var hash = this._hash;
                var H = hash.words;
                // Swap endian
                for (var i = 0; i < 4; i++) {
                    // Shortcut
                    var H_i = H[i];
                    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                        (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                }
                // Return final computed hash
                return hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        function FF(a, b, c, d, x, s, t) {
            var n = a + ((b & c) | (~b & d)) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        function GG(a, b, c, d, x, s, t) {
            var n = a + ((b & d) | (c & ~d)) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        function HH(a, b, c, d, x, s, t) {
            var n = a + (b ^ c ^ d) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        function II(a, b, c, d, x, s, t) {
            var n = a + (c ^ (b | ~d)) + x + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        }
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.MD5('message');
         *     var hash = CryptoJS.MD5(wordArray);
         */
        C.MD5 = Hasher._createHelper(MD5);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacMD5(message, key);
         */
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Reusable object
        var W = [];
        /**
         * SHA-1 hash algorithm.
         */
        var SHA1 = C_algo.SHA1 = Hasher.extend({
            _doReset: function () {
                this._hash = new WordArray.init([
                    0x67452301, 0xefcdab89,
                    0x98badcfe, 0x10325476,
                    0xc3d2e1f0
                ]);
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var H = this._hash.words;
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                // Computation
                for (var i = 0; i < 80; i++) {
                    if (i < 16) {
                        W[i] = M[offset + i] | 0;
                    }
                    else {
                        var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                        W[i] = (n << 1) | (n >>> 31);
                    }
                    var t = ((a << 5) | (a >>> 27)) + e + W[i];
                    if (i < 20) {
                        t += ((b & c) | (~b & d)) + 0x5a827999;
                    }
                    else if (i < 40) {
                        t += (b ^ c ^ d) + 0x6ed9eba1;
                    }
                    else if (i < 60) {
                        t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
                    }
                    else /* if (i < 80) */ {
                        t += (b ^ c ^ d) - 0x359d3e2a;
                    }
                    e = d;
                    d = c;
                    c = (b << 30) | (b >>> 2);
                    b = a;
                    a = t;
                }
                // Intermediate hash value
                H[0] = (H[0] + a) | 0;
                H[1] = (H[1] + b) | 0;
                H[2] = (H[2] + c) | 0;
                H[3] = (H[3] + d) | 0;
                H[4] = (H[4] + e) | 0;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Return final computed hash
                return this._hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA1('message');
         *     var hash = CryptoJS.SHA1(wordArray);
         */
        C.SHA1 = Hasher._createHelper(SHA1);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA1(message, key);
         */
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
    }());
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Initialization and round constants tables
        var H = [];
        var K = [];
        // Compute constants
        (function () {
            function isPrime(n) {
                var sqrtN = Math.sqrt(n);
                for (var factor = 2; factor <= sqrtN; factor++) {
                    if (!(n % factor)) {
                        return false;
                    }
                }
                return true;
            }
            function getFractionalBits(n) {
                return ((n - (n | 0)) * 0x100000000) | 0;
            }
            var n = 2;
            var nPrime = 0;
            while (nPrime < 64) {
                if (isPrime(n)) {
                    if (nPrime < 8) {
                        H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
                    }
                    K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
                    nPrime++;
                }
                n++;
            }
        }());
        // Reusable object
        var W = [];
        /**
         * SHA-256 hash algorithm.
         */
        var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: function () {
                this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var H = this._hash.words;
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                var f = H[5];
                var g = H[6];
                var h = H[7];
                // Computation
                for (var i = 0; i < 64; i++) {
                    if (i < 16) {
                        W[i] = M[offset + i] | 0;
                    }
                    else {
                        var gamma0x = W[i - 15];
                        var gamma0 = ((gamma0x << 25) | (gamma0x >>> 7)) ^
                            ((gamma0x << 14) | (gamma0x >>> 18)) ^
                            (gamma0x >>> 3);
                        var gamma1x = W[i - 2];
                        var gamma1 = ((gamma1x << 15) | (gamma1x >>> 17)) ^
                            ((gamma1x << 13) | (gamma1x >>> 19)) ^
                            (gamma1x >>> 10);
                        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                    }
                    var ch = (e & f) ^ (~e & g);
                    var maj = (a & b) ^ (a & c) ^ (b & c);
                    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
                    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));
                    var t1 = h + sigma1 + ch + K[i] + W[i];
                    var t2 = sigma0 + maj;
                    h = g;
                    g = f;
                    f = e;
                    e = (d + t1) | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = (t1 + t2) | 0;
                }
                // Intermediate hash value
                H[0] = (H[0] + a) | 0;
                H[1] = (H[1] + b) | 0;
                H[2] = (H[2] + c) | 0;
                H[3] = (H[3] + d) | 0;
                H[4] = (H[4] + e) | 0;
                H[5] = (H[5] + f) | 0;
                H[6] = (H[6] + g) | 0;
                H[7] = (H[7] + h) | 0;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Return final computed hash
                return this._hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA256('message');
         *     var hash = CryptoJS.SHA256(wordArray);
         */
        C.SHA256 = Hasher._createHelper(SHA256);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA256(message, key);
         */
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
         * UTF-16 BE encoding strategy.
         */
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
            /**
             * Converts a word array to a UTF-16 BE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 BE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var utf16Chars = [];
                for (var i = 0; i < sigBytes; i += 2) {
                    var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
                    utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join('');
            },
            /**
             * Converts a UTF-16 BE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 BE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
             */
            parse: function (utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;
                // Convert
                var words = [];
                for (var i = 0; i < utf16StrLength; i++) {
                    words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
                }
                return WordArray.create(words, utf16StrLength * 2);
            }
        };
        /**
         * UTF-16 LE encoding strategy.
         */
        C_enc.Utf16LE = {
            /**
             * Converts a word array to a UTF-16 LE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 LE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
             */
            stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var utf16Chars = [];
                for (var i = 0; i < sigBytes; i += 2) {
                    var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
                    utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join('');
            },
            /**
             * Converts a UTF-16 LE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 LE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
             */
            parse: function (utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;
                // Convert
                var words = [];
                for (var i = 0; i < utf16StrLength; i++) {
                    words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
                }
                return WordArray.create(words, utf16StrLength * 2);
            }
        };
        function swapEndian(word) {
            return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
        }
    }());
    (function () {
        // Check if typed arrays are supported
        if (typeof ArrayBuffer != 'function') {
            return;
        }
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        // Reference original init
        var superInit = WordArray.init;
        // Augment WordArray.init to handle typed arrays
        var subInit = WordArray.init = function (typedArray) {
            // Convert buffers to uint8
            if (typedArray instanceof ArrayBuffer) {
                typedArray = new Uint8Array(typedArray);
            }
            // Convert other array views to uint8
            if (typedArray instanceof Int8Array ||
                (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
                typedArray instanceof Int16Array ||
                typedArray instanceof Uint16Array ||
                typedArray instanceof Int32Array ||
                typedArray instanceof Uint32Array ||
                typedArray instanceof Float32Array ||
                typedArray instanceof Float64Array) {
                typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
            }
            // Handle Uint8Array
            if (typedArray instanceof Uint8Array) {
                // Shortcut
                var typedArrayByteLength = typedArray.byteLength;
                // Extract bytes
                var words = [];
                for (var i = 0; i < typedArrayByteLength; i++) {
                    words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
                }
                // Initialize this word array
                superInit.call(this, words, typedArrayByteLength);
            }
            else {
                // Else call normal init
                superInit.apply(this, arguments);
            }
        };
        subInit.prototype = WordArray;
    }());
    /** @preserve
    (c) 2012 by Cédric Mesnil. All rights reserved.

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

        - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Constants table
        var _zl = WordArray.create([
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
            1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ]);
        var _zr = WordArray.create([
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
            6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
            8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ]);
        var _sl = WordArray.create([
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
            7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
            11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
            11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
            9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ]);
        var _sr = WordArray.create([
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
            9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
            9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
            15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
            8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ]);
        var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
        var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);
        /**
         * RIPEMD160 hash algorithm.
         */
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
            _doReset: function () {
                this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
            },
            _doProcessBlock: function (M, offset) {
                // Swap endian
                for (var i = 0; i < 16; i++) {
                    // Shortcuts
                    var offset_i = offset + i;
                    var M_offset_i = M[offset_i];
                    // Swap
                    M[offset_i] = ((((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                        (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00));
                }
                // Shortcut
                var H = this._hash.words;
                var hl = _hl.words;
                var hr = _hr.words;
                var zl = _zl.words;
                var zr = _zr.words;
                var sl = _sl.words;
                var sr = _sr.words;
                // Working variables
                var al, bl, cl, dl, el;
                var ar, br, cr, dr, er;
                ar = al = H[0];
                br = bl = H[1];
                cr = cl = H[2];
                dr = dl = H[3];
                er = el = H[4];
                // Computation
                var t;
                for (var i = 0; i < 80; i += 1) {
                    t = (al + M[offset + zl[i]]) | 0;
                    if (i < 16) {
                        t += f1(bl, cl, dl) + hl[0];
                    }
                    else if (i < 32) {
                        t += f2(bl, cl, dl) + hl[1];
                    }
                    else if (i < 48) {
                        t += f3(bl, cl, dl) + hl[2];
                    }
                    else if (i < 64) {
                        t += f4(bl, cl, dl) + hl[3];
                    }
                    else { // if (i<80) {
                        t += f5(bl, cl, dl) + hl[4];
                    }
                    t = t | 0;
                    t = rotl(t, sl[i]);
                    t = (t + el) | 0;
                    al = el;
                    el = dl;
                    dl = rotl(cl, 10);
                    cl = bl;
                    bl = t;
                    t = (ar + M[offset + zr[i]]) | 0;
                    if (i < 16) {
                        t += f5(br, cr, dr) + hr[0];
                    }
                    else if (i < 32) {
                        t += f4(br, cr, dr) + hr[1];
                    }
                    else if (i < 48) {
                        t += f3(br, cr, dr) + hr[2];
                    }
                    else if (i < 64) {
                        t += f2(br, cr, dr) + hr[3];
                    }
                    else { // if (i<80) {
                        t += f1(br, cr, dr) + hr[4];
                    }
                    t = t | 0;
                    t = rotl(t, sr[i]);
                    t = (t + er) | 0;
                    ar = er;
                    er = dr;
                    dr = rotl(cr, 10);
                    cr = br;
                    br = t;
                }
                // Intermediate hash value
                t = (H[1] + cl + dr) | 0;
                H[1] = (H[2] + dl + er) | 0;
                H[2] = (H[3] + el + ar) | 0;
                H[3] = (H[4] + al + br) | 0;
                H[4] = (H[0] + bl + cr) | 0;
                H[0] = t;
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = ((((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
                    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00));
                data.sigBytes = (dataWords.length + 1) * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var hash = this._hash;
                var H = hash.words;
                // Swap endian
                for (var i = 0; i < 5; i++) {
                    // Shortcut
                    var H_i = H[i];
                    // Swap
                    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                        (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                }
                // Return final computed hash
                return hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        function f1(x, y, z) {
            return ((x) ^ (y) ^ (z));
        }
        function f2(x, y, z) {
            return (((x) & (y)) | ((~x) & (z)));
        }
        function f3(x, y, z) {
            return (((x) | (~(y))) ^ (z));
        }
        function f4(x, y, z) {
            return (((x) & (z)) | ((y) & (~(z))));
        }
        function f5(x, y, z) {
            return ((x) ^ ((y) | (~(z))));
        }
        function rotl(x, n) {
            return (x << n) | (x >>> (32 - n));
        }
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.RIPEMD160('message');
         *     var hash = CryptoJS.RIPEMD160(wordArray);
         */
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
         */
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        /**
         * HMAC algorithm.
         */
        var HMAC = C_algo.HMAC = Base.extend({
            /**
             * Initializes a newly created HMAC.
             *
             * @param {Hasher} hasher The hash algorithm to use.
             * @param {WordArray|string} key The secret key.
             *
             * @example
             *
             *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
             */
            init: function (hasher, key) {
                // Init hasher
                hasher = this._hasher = new hasher.init();
                // Convert string to WordArray, else assume WordArray already
                if (typeof key == 'string') {
                    key = Utf8.parse(key);
                }
                // Shortcuts
                var hasherBlockSize = hasher.blockSize;
                var hasherBlockSizeBytes = hasherBlockSize * 4;
                // Allow arbitrary length keys
                if (key.sigBytes > hasherBlockSizeBytes) {
                    key = hasher.finalize(key);
                }
                // Clamp excess bits
                key.clamp();
                // Clone key for inner and outer pads
                var oKey = this._oKey = key.clone();
                var iKey = this._iKey = key.clone();
                // Shortcuts
                var oKeyWords = oKey.words;
                var iKeyWords = iKey.words;
                // XOR keys with pad constants
                for (var i = 0; i < hasherBlockSize; i++) {
                    oKeyWords[i] ^= 0x5c5c5c5c;
                    iKeyWords[i] ^= 0x36363636;
                }
                oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
                // Set initial values
                this.reset();
            },
            /**
             * Resets this HMAC to its initial state.
             *
             * @example
             *
             *     hmacHasher.reset();
             */
            reset: function () {
                // Shortcut
                var hasher = this._hasher;
                // Reset
                hasher.reset();
                hasher.update(this._iKey);
            },
            /**
             * Updates this HMAC with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {HMAC} This HMAC instance.
             *
             * @example
             *
             *     hmacHasher.update('message');
             *     hmacHasher.update(wordArray);
             */
            update: function (messageUpdate) {
                this._hasher.update(messageUpdate);
                // Chainable
                return this;
            },
            /**
             * Finalizes the HMAC computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The HMAC.
             *
             * @example
             *
             *     var hmac = hmacHasher.finalize();
             *     var hmac = hmacHasher.finalize('message');
             *     var hmac = hmacHasher.finalize(wordArray);
             */
            finalize: function (messageUpdate) {
                // Shortcut
                var hasher = this._hasher;
                // Compute HMAC
                var innerHash = hasher.finalize(messageUpdate);
                hasher.reset();
                var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
                return hmac;
            }
        });
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        /**
         * Password-Based Key Derivation Function 2 algorithm.
         */
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hasher to use. Default: SHA1
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
                keySize: 128 / 32,
                hasher: SHA1,
                iterations: 1
            }),
            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.PBKDF2.create();
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
             */
            init: function (cfg) {
                this.cfg = this.cfg.extend(cfg);
            },
            /**
             * Computes the Password-Based Key Derivation Function 2.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function (password, salt) {
                // Shortcut
                var cfg = this.cfg;
                // Init HMAC
                var hmac = HMAC.create(cfg.hasher, password);
                // Initial values
                var derivedKey = WordArray.create();
                var blockIndex = WordArray.create([0x00000001]);
                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var blockIndexWords = blockIndex.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;
                // Generate key
                while (derivedKeyWords.length < keySize) {
                    var block = hmac.update(salt).finalize(blockIndex);
                    hmac.reset();
                    // Shortcuts
                    var blockWords = block.words;
                    var blockWordsLength = blockWords.length;
                    // Iterations
                    var intermediate = block;
                    for (var i = 1; i < iterations; i++) {
                        intermediate = hmac.finalize(intermediate);
                        hmac.reset();
                        // Shortcut
                        var intermediateWords = intermediate.words;
                        // XOR intermediate with block
                        for (var j = 0; j < blockWordsLength; j++) {
                            blockWords[j] ^= intermediateWords[j];
                        }
                    }
                    derivedKey.concat(block);
                    blockIndexWords[0]++;
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
            }
        });
        /**
         * Computes the Password-Based Key Derivation Function 2.
         *
         * @param {WordArray|string} password The password.
         * @param {WordArray|string} salt A salt.
         * @param {Object} cfg (Optional) The configuration options to use for this computation.
         *
         * @return {WordArray} The derived key.
         *
         * @static
         *
         * @example
         *
         *     var key = CryptoJS.PBKDF2(password, salt);
         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
         */
        C.PBKDF2 = function (password, salt, cfg) {
            return PBKDF2.create(cfg).compute(password, salt);
        };
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        /**
         * This key derivation function is meant to conform with EVP_BytesToKey.
         * www.openssl.org/docs/crypto/EVP_BytesToKey.html
         */
        var EvpKDF = C_algo.EvpKDF = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hash algorithm to use. Default: MD5
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
                keySize: 128 / 32,
                hasher: MD5,
                iterations: 1
            }),
            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.EvpKDF.create();
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
             */
            init: function (cfg) {
                this.cfg = this.cfg.extend(cfg);
            },
            /**
             * Derives a key from a password.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function (password, salt) {
                // Shortcut
                var cfg = this.cfg;
                // Init hasher
                var hasher = cfg.hasher.create();
                // Initial values
                var derivedKey = WordArray.create();
                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;
                // Generate key
                while (derivedKeyWords.length < keySize) {
                    if (block) {
                        hasher.update(block);
                    }
                    var block = hasher.update(password).finalize(salt);
                    hasher.reset();
                    // Iterations
                    for (var i = 1; i < iterations; i++) {
                        block = hasher.finalize(block);
                        hasher.reset();
                    }
                    derivedKey.concat(block);
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
            }
        });
        /**
         * Derives a key from a password.
         *
         * @param {WordArray|string} password The password.
         * @param {WordArray|string} salt A salt.
         * @param {Object} cfg (Optional) The configuration options to use for this computation.
         *
         * @return {WordArray} The derived key.
         *
         * @static
         *
         * @example
         *
         *     var key = CryptoJS.EvpKDF(password, salt);
         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
         */
        C.EvpKDF = function (password, salt, cfg) {
            return EvpKDF.create(cfg).compute(password, salt);
        };
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        /**
         * SHA-224 hash algorithm.
         */
        var SHA224 = C_algo.SHA224 = SHA256.extend({
            _doReset: function () {
                this._hash = new WordArray.init([
                    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
                ]);
            },
            _doFinalize: function () {
                var hash = SHA256._doFinalize.call(this);
                hash.sigBytes -= 4;
                return hash;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA224('message');
         *     var hash = CryptoJS.SHA224(wordArray);
         */
        C.SHA224 = SHA256._createHelper(SHA224);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA224(message, key);
         */
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
    }());
    (function (undefined) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        /**
         * x64 namespace.
         */
        var C_x64 = C.x64 = {};
        /**
         * A 64-bit word.
         */
        var X64Word = C_x64.Word = Base.extend({
            /**
             * Initializes a newly created 64-bit word.
             *
             * @param {number} high The high 32 bits.
             * @param {number} low The low 32 bits.
             *
             * @example
             *
             *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
             */
            init: function (high, low) {
                this.high = high;
                this.low = low;
            }
            /**
             * Bitwise NOTs this word.
             *
             * @return {X64Word} A new x64-Word object after negating.
             *
             * @example
             *
             *     var negated = x64Word.not();
             */
            // not: function () {
            // var high = ~this.high;
            // var low = ~this.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise ANDs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to AND with this word.
             *
             * @return {X64Word} A new x64-Word object after ANDing.
             *
             * @example
             *
             *     var anded = x64Word.and(anotherX64Word);
             */
            // and: function (word) {
            // var high = this.high & word.high;
            // var low = this.low & word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise ORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to OR with this word.
             *
             * @return {X64Word} A new x64-Word object after ORing.
             *
             * @example
             *
             *     var ored = x64Word.or(anotherX64Word);
             */
            // or: function (word) {
            // var high = this.high | word.high;
            // var low = this.low | word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise XORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to XOR with this word.
             *
             * @return {X64Word} A new x64-Word object after XORing.
             *
             * @example
             *
             *     var xored = x64Word.xor(anotherX64Word);
             */
            // xor: function (word) {
            // var high = this.high ^ word.high;
            // var low = this.low ^ word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Shifts this word n bits to the left.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftL(25);
             */
            // shiftL: function (n) {
            // if (n < 32) {
            // var high = (this.high << n) | (this.low >>> (32 - n));
            // var low = this.low << n;
            // } else {
            // var high = this.low << (n - 32);
            // var low = 0;
            // }
            // return X64Word.create(high, low);
            // },
            /**
             * Shifts this word n bits to the right.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftR(7);
             */
            // shiftR: function (n) {
            // if (n < 32) {
            // var low = (this.low >>> n) | (this.high << (32 - n));
            // var high = this.high >>> n;
            // } else {
            // var low = this.high >>> (n - 32);
            // var high = 0;
            // }
            // return X64Word.create(high, low);
            // },
            /**
             * Rotates this word n bits to the left.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotL(25);
             */
            // rotL: function (n) {
            // return this.shiftL(n).or(this.shiftR(64 - n));
            // },
            /**
             * Rotates this word n bits to the right.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotR(7);
             */
            // rotR: function (n) {
            // return this.shiftR(n).or(this.shiftL(64 - n));
            // },
            /**
             * Adds this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to add with this word.
             *
             * @return {X64Word} A new x64-Word object after adding.
             *
             * @example
             *
             *     var added = x64Word.add(anotherX64Word);
             */
            // add: function (word) {
            // var low = (this.low + word.low) | 0;
            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
            // var high = (this.high + word.high + carry) | 0;
            // return X64Word.create(high, low);
            // }
        });
        /**
         * An array of 64-bit words.
         *
         * @property {Array} words The array of CryptoJS.x64.Word objects.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */
        var X64WordArray = C_x64.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.x64.WordArray.create();
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ]);
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ], 10);
             */
            init: function (words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined) {
                    this.sigBytes = sigBytes;
                }
                else {
                    this.sigBytes = words.length * 8;
                }
            },
            /**
             * Converts this 64-bit word array to a 32-bit word array.
             *
             * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
             *
             * @example
             *
             *     var x32WordArray = x64WordArray.toX32();
             */
            toX32: function () {
                // Shortcuts
                var x64Words = this.words;
                var x64WordsLength = x64Words.length;
                // Convert
                var x32Words = [];
                for (var i = 0; i < x64WordsLength; i++) {
                    var x64Word = x64Words[i];
                    x32Words.push(x64Word.high);
                    x32Words.push(x64Word.low);
                }
                return X32WordArray.create(x32Words, this.sigBytes);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {X64WordArray} The clone.
             *
             * @example
             *
             *     var clone = x64WordArray.clone();
             */
            clone: function () {
                var clone = Base.clone.call(this);
                // Clone "words" array
                var words = clone.words = this.words.slice(0);
                // Clone each X64Word object
                var wordsLength = words.length;
                for (var i = 0; i < wordsLength; i++) {
                    words[i] = words[i].clone();
                }
                return clone;
            }
        });
    }());
    (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        // Constants tables
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        // Compute Constants
        (function () {
            // Compute rho offset constants
            var x = 1, y = 0;
            for (var t = 0; t < 24; t++) {
                RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;
                var newX = y % 5;
                var newY = (2 * x + 3 * y) % 5;
                x = newX;
                y = newY;
            }
            // Compute pi index constants
            for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                    PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
                }
            }
            // Compute round constants
            var LFSR = 0x01;
            for (var i = 0; i < 24; i++) {
                var roundConstantMsw = 0;
                var roundConstantLsw = 0;
                for (var j = 0; j < 7; j++) {
                    if (LFSR & 0x01) {
                        var bitPosition = (1 << j) - 1;
                        if (bitPosition < 32) {
                            roundConstantLsw ^= 1 << bitPosition;
                        }
                        else /* if (bitPosition >= 32) */ {
                            roundConstantMsw ^= 1 << (bitPosition - 32);
                        }
                    }
                    // Compute next LFSR
                    if (LFSR & 0x80) {
                        // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                        LFSR = (LFSR << 1) ^ 0x71;
                    }
                    else {
                        LFSR <<= 1;
                    }
                }
                ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
            }
        }());
        // Reusable objects for temporary values
        var T = [];
        (function () {
            for (var i = 0; i < 25; i++) {
                T[i] = X64Word.create();
            }
        }());
        /**
         * SHA-3 hash algorithm.
         */
        var SHA3 = C_algo.SHA3 = Hasher.extend({
            /**
             * Configuration options.
             *
             * @property {number} outputLength
             *   The desired number of bits in the output hash.
             *   Only values permitted are: 224, 256, 384, 512.
             *   Default: 512
             */
            cfg: Hasher.cfg.extend({
                outputLength: 512
            }),
            _doReset: function () {
                var state = this._state = [];
                for (var i = 0; i < 25; i++) {
                    state[i] = new X64Word.init();
                }
                this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function (M, offset) {
                // Shortcuts
                var state = this._state;
                var nBlockSizeLanes = this.blockSize / 2;
                // Absorb
                for (var i = 0; i < nBlockSizeLanes; i++) {
                    // Shortcuts
                    var M2i = M[offset + 2 * i];
                    var M2i1 = M[offset + 2 * i + 1];
                    // Swap endian
                    M2i = ((((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff) |
                        (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00));
                    M2i1 = ((((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff) |
                        (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00));
                    // Absorb message into state
                    var lane = state[i];
                    lane.high ^= M2i1;
                    lane.low ^= M2i;
                }
                // Rounds
                for (var round = 0; round < 24; round++) {
                    // Theta
                    for (var x = 0; x < 5; x++) {
                        // Mix column lanes
                        var tMsw = 0, tLsw = 0;
                        for (var y = 0; y < 5; y++) {
                            var lane = state[x + 5 * y];
                            tMsw ^= lane.high;
                            tLsw ^= lane.low;
                        }
                        // Temporary values
                        var Tx = T[x];
                        Tx.high = tMsw;
                        Tx.low = tLsw;
                    }
                    for (var x = 0; x < 5; x++) {
                        // Shortcuts
                        var Tx4 = T[(x + 4) % 5];
                        var Tx1 = T[(x + 1) % 5];
                        var Tx1Msw = Tx1.high;
                        var Tx1Lsw = Tx1.low;
                        // Mix surrounding columns
                        var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
                        var tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
                        for (var y = 0; y < 5; y++) {
                            var lane = state[x + 5 * y];
                            lane.high ^= tMsw;
                            lane.low ^= tLsw;
                        }
                    }
                    // Rho Pi
                    for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                        // Shortcuts
                        var lane = state[laneIndex];
                        var laneMsw = lane.high;
                        var laneLsw = lane.low;
                        var rhoOffset = RHO_OFFSETS[laneIndex];
                        // Rotate lanes
                        if (rhoOffset < 32) {
                            var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
                            var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
                        }
                        else /* if (rhoOffset >= 32) */ {
                            var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
                            var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
                        }
                        // Transpose lanes
                        var TPiLane = T[PI_INDEXES[laneIndex]];
                        TPiLane.high = tMsw;
                        TPiLane.low = tLsw;
                    }
                    // Rho pi at x = y = 0
                    var T0 = T[0];
                    var state0 = state[0];
                    T0.high = state0.high;
                    T0.low = state0.low;
                    // Chi
                    for (var x = 0; x < 5; x++) {
                        for (var y = 0; y < 5; y++) {
                            // Shortcuts
                            var laneIndex = x + 5 * y;
                            var lane = state[laneIndex];
                            var TLane = T[laneIndex];
                            var Tx1Lane = T[((x + 1) % 5) + 5 * y];
                            var Tx2Lane = T[((x + 2) % 5) + 5 * y];
                            // Mix rows
                            lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
                            lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);
                        }
                    }
                    // Iota
                    var lane = state[0];
                    var roundConstant = ROUND_CONSTANTS[round];
                    lane.high ^= roundConstant.high;
                    lane.low ^= roundConstant.low;
                    ;
                }
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                var blockSizeBits = this.blockSize * 32;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
                dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var state = this._state;
                var outputLengthBytes = this.cfg.outputLength / 8;
                var outputLengthLanes = outputLengthBytes / 8;
                // Squeeze
                var hashWords = [];
                for (var i = 0; i < outputLengthLanes; i++) {
                    // Shortcuts
                    var lane = state[i];
                    var laneMsw = lane.high;
                    var laneLsw = lane.low;
                    // Swap endian
                    laneMsw = ((((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff) |
                        (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00));
                    laneLsw = ((((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff) |
                        (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00));
                    // Squeeze state to retrieve hash
                    hashWords.push(laneLsw);
                    hashWords.push(laneMsw);
                }
                // Return final computed hash
                return new WordArray.init(hashWords, outputLengthBytes);
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                var state = clone._state = this._state.slice(0);
                for (var i = 0; i < 25; i++) {
                    state[i] = state[i].clone();
                }
                return clone;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA3('message');
         *     var hash = CryptoJS.SHA3(wordArray);
         */
        C.SHA3 = Hasher._createHelper(SHA3);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA3(message, key);
         */
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
    }(Math));
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
            return X64Word.create.apply(X64Word, arguments);
        }
        // Constants
        var K = [
            X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
            X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
            X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
            X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
            X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
            X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
            X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
            X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
            X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
            X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
            X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
            X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
            X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
            X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
            X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
            X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
            X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
            X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
            X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
            X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
            X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
            X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
            X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
            X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
            X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
            X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
            X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
            X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
            X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
            X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
            X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
            X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
            X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
            X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
            X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
            X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
            X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
            X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
            X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
            X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
        ];
        // Reusable objects
        var W = [];
        (function () {
            for (var i = 0; i < 80; i++) {
                W[i] = X64Word_create();
            }
        }());
        /**
         * SHA-512 hash algorithm.
         */
        var SHA512 = C_algo.SHA512 = Hasher.extend({
            _doReset: function () {
                this._hash = new X64WordArray.init([
                    new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
                    new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
                    new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
                    new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
                ]);
            },
            _doProcessBlock: function (M, offset) {
                // Shortcuts
                var H = this._hash.words;
                var H0 = H[0];
                var H1 = H[1];
                var H2 = H[2];
                var H3 = H[3];
                var H4 = H[4];
                var H5 = H[5];
                var H6 = H[6];
                var H7 = H[7];
                var H0h = H0.high;
                var H0l = H0.low;
                var H1h = H1.high;
                var H1l = H1.low;
                var H2h = H2.high;
                var H2l = H2.low;
                var H3h = H3.high;
                var H3l = H3.low;
                var H4h = H4.high;
                var H4l = H4.low;
                var H5h = H5.high;
                var H5l = H5.low;
                var H6h = H6.high;
                var H6l = H6.low;
                var H7h = H7.high;
                var H7l = H7.low;
                // Working variables
                var ah = H0h;
                var al = H0l;
                var bh = H1h;
                var bl = H1l;
                var ch = H2h;
                var cl = H2l;
                var dh = H3h;
                var dl = H3l;
                var eh = H4h;
                var el = H4l;
                var fh = H5h;
                var fl = H5l;
                var gh = H6h;
                var gl = H6l;
                var hh = H7h;
                var hl = H7l;
                // Rounds
                for (var i = 0; i < 80; i++) {
                    // Shortcut
                    var Wi = W[i];
                    // Extend message
                    if (i < 16) {
                        var Wih = Wi.high = M[offset + i * 2] | 0;
                        var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                    }
                    else {
                        // Gamma0
                        var gamma0x = W[i - 15];
                        var gamma0xh = gamma0x.high;
                        var gamma0xl = gamma0x.low;
                        var gamma0h = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
                        var gamma0l = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
                        // Gamma1
                        var gamma1x = W[i - 2];
                        var gamma1xh = gamma1x.high;
                        var gamma1xl = gamma1x.low;
                        var gamma1h = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
                        var gamma1l = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
                        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                        var Wi7 = W[i - 7];
                        var Wi7h = Wi7.high;
                        var Wi7l = Wi7.low;
                        var Wi16 = W[i - 16];
                        var Wi16h = Wi16.high;
                        var Wi16l = Wi16.low;
                        var Wil = gamma0l + Wi7l;
                        var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
                        var Wil = Wil + gamma1l;
                        var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
                        var Wil = Wil + Wi16l;
                        var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);
                        Wi.high = Wih;
                        Wi.low = Wil;
                    }
                    var chh = (eh & fh) ^ (~eh & gh);
                    var chl = (el & fl) ^ (~el & gl);
                    var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
                    var majl = (al & bl) ^ (al & cl) ^ (bl & cl);
                    var sigma0h = ((ah >>> 28) | (al << 4)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
                    var sigma0l = ((al >>> 28) | (ah << 4)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
                    var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
                    var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));
                    // t1 = h + sigma1 + ch + K[i] + W[i]
                    var Ki = K[i];
                    var Kih = Ki.high;
                    var Kil = Ki.low;
                    var t1l = hl + sigma1l;
                    var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
                    var t1l = t1l + chl;
                    var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
                    var t1l = t1l + Kil;
                    var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
                    var t1l = t1l + Wil;
                    var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);
                    // t2 = sigma0 + maj
                    var t2l = sigma0l + majl;
                    var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);
                    // Update working variables
                    hh = gh;
                    hl = gl;
                    gh = fh;
                    gl = fl;
                    fh = eh;
                    fl = el;
                    el = (dl + t1l) | 0;
                    eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
                    dh = ch;
                    dl = cl;
                    ch = bh;
                    cl = bl;
                    bh = ah;
                    bl = al;
                    al = (t1l + t2l) | 0;
                    ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
                }
                // Intermediate hash value
                H0l = H0.low = (H0l + al);
                H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
                H1l = H1.low = (H1l + bl);
                H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
                H2l = H2.low = (H2l + cl);
                H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
                H3l = H3.low = (H3l + dl);
                H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
                H4l = H4.low = (H4l + el);
                H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
                H5l = H5.low = (H5l + fl);
                H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
                H6l = H6.low = (H6l + gl);
                H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
                H7l = H7.low = (H7l + hl);
                H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
            },
            _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Convert hash to 32-bit word array before returning
                var hash = this._hash.toX32();
                // Return final computed hash
                return hash;
            },
            clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            },
            blockSize: 1024 / 32
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA512('message');
         *     var hash = CryptoJS.SHA512(wordArray);
         */
        C.SHA512 = Hasher._createHelper(SHA512);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA512(message, key);
         */
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        /**
         * SHA-384 hash algorithm.
         */
        var SHA384 = C_algo.SHA384 = SHA512.extend({
            _doReset: function () {
                this._hash = new X64WordArray.init([
                    new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
                    new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
                    new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
                    new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
                ]);
            },
            _doFinalize: function () {
                var hash = SHA512._doFinalize.call(this);
                hash.sigBytes -= 16;
                return hash;
            }
        });
        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA384('message');
         *     var hash = CryptoJS.SHA384(wordArray);
         */
        C.SHA384 = SHA512._createHelper(SHA384);
        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA384(message, key);
         */
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
    }());
    /**
     * Cipher core components.
     */
    CryptoJS.lib.Cipher || (function (undefined) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        /**
         * Abstract base cipher template.
         *
         * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
         * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
         * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
         * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
         */
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             *
             * @property {WordArray} iv The IV to use for this operation.
             */
            cfg: Base.extend(),
            /**
             * Creates this cipher in encryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
             */
            createEncryptor: function (key, cfg) {
                return this.create(this._ENC_XFORM_MODE, key, cfg);
            },
            /**
             * Creates this cipher in decryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
             */
            createDecryptor: function (key, cfg) {
                return this.create(this._DEC_XFORM_MODE, key, cfg);
            },
            /**
             * Initializes a newly created cipher.
             *
             * @param {number} xformMode Either the encryption or decryption transormation mode constant.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
             */
            init: function (xformMode, key, cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);
                // Store transform mode and key
                this._xformMode = xformMode;
                this._key = key;
                // Set initial values
                this.reset();
            },
            /**
             * Resets this cipher to its initial state.
             *
             * @example
             *
             *     cipher.reset();
             */
            reset: function () {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);
                // Perform concrete-cipher logic
                this._doReset();
            },
            /**
             * Adds data to be encrypted or decrypted.
             *
             * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
             *
             * @return {WordArray} The data after processing.
             *
             * @example
             *
             *     var encrypted = cipher.process('data');
             *     var encrypted = cipher.process(wordArray);
             */
            process: function (dataUpdate) {
                // Append
                this._append(dataUpdate);
                // Process available blocks
                return this._process();
            },
            /**
             * Finalizes the encryption or decryption process.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
             *
             * @return {WordArray} The data after final processing.
             *
             * @example
             *
             *     var encrypted = cipher.finalize();
             *     var encrypted = cipher.finalize('data');
             *     var encrypted = cipher.finalize(wordArray);
             */
            finalize: function (dataUpdate) {
                // Final data update
                if (dataUpdate) {
                    this._append(dataUpdate);
                }
                // Perform concrete-cipher logic
                var finalProcessedData = this._doFinalize();
                return finalProcessedData;
            },
            keySize: 128 / 32,
            ivSize: 128 / 32,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            /**
             * Creates shortcut functions to a cipher's object interface.
             *
             * @param {Cipher} cipher The cipher to create a helper for.
             *
             * @return {Object} An object with encrypt and decrypt shortcut functions.
             *
             * @static
             *
             * @example
             *
             *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
             */
            _createHelper: (function () {
                function selectCipherStrategy(key) {
                    if (typeof key == 'string') {
                        return PasswordBasedCipher;
                    }
                    else {
                        return SerializableCipher;
                    }
                }
                return function (cipher) {
                    return {
                        encrypt: function (message, key, cfg) {
                            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                        },
                        decrypt: function (ciphertext, key, cfg) {
                            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                        }
                    };
                };
            }())
        });
        /**
         * Abstract base stream cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
         */
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
            _doFinalize: function () {
                // Process partial blocks
                var finalProcessedBlocks = this._process(!!'flush');
                return finalProcessedBlocks;
            },
            blockSize: 1
        });
        /**
         * Mode namespace.
         */
        var C_mode = C.mode = {};
        /**
         * Abstract base block cipher mode template.
         */
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
            /**
             * Creates this mode for encryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
             */
            createEncryptor: function (cipher, iv) {
                return this.Encryptor.create(cipher, iv);
            },
            /**
             * Creates this mode for decryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
             */
            createDecryptor: function (cipher, iv) {
                return this.Decryptor.create(cipher, iv);
            },
            /**
             * Initializes a newly created mode.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
             */
            init: function (cipher, iv) {
                this._cipher = cipher;
                this._iv = iv;
            }
        });
        /**
         * Cipher Block Chaining mode.
         */
        var CBC = C_mode.CBC = (function () {
            /**
             * Abstract base CBC mode.
             */
            var CBC = BlockCipherMode.extend();
            /**
             * CBC encryptor.
             */
            CBC.Encryptor = CBC.extend({
                /**
                 * Processes the data block at offset.
                 *
                 * @param {Array} words The data words to operate on.
                 * @param {number} offset The offset where the block starts.
                 *
                 * @example
                 *
                 *     mode.processBlock(data.words, offset);
                 */
                processBlock: function (words, offset) {
                    // Shortcuts
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    // XOR and encrypt
                    xorBlock.call(this, words, offset, blockSize);
                    cipher.encryptBlock(words, offset);
                    // Remember this block to use with next block
                    this._prevBlock = words.slice(offset, offset + blockSize);
                }
            });
            /**
             * CBC decryptor.
             */
            CBC.Decryptor = CBC.extend({
                /**
                 * Processes the data block at offset.
                 *
                 * @param {Array} words The data words to operate on.
                 * @param {number} offset The offset where the block starts.
                 *
                 * @example
                 *
                 *     mode.processBlock(data.words, offset);
                 */
                processBlock: function (words, offset) {
                    // Shortcuts
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    // Remember this block to use with next block
                    var thisBlock = words.slice(offset, offset + blockSize);
                    // Decrypt and XOR
                    cipher.decryptBlock(words, offset);
                    xorBlock.call(this, words, offset, blockSize);
                    // This block becomes the previous block
                    this._prevBlock = thisBlock;
                }
            });
            function xorBlock(words, offset, blockSize) {
                // Shortcut
                var iv = this._iv;
                // Choose mixing block
                if (iv) {
                    var block = iv;
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                else {
                    var block = this._prevBlock;
                }
                // XOR blocks
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= block[i];
                }
            }
            return CBC;
        }());
        /**
         * Padding namespace.
         */
        var C_pad = C.pad = {};
        /**
         * PKCS #5/7 padding strategy.
         */
        var Pkcs7 = C_pad.Pkcs7 = {
            /**
             * Pads data using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to pad.
             * @param {number} blockSize The multiple that the data should be padded to.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
             */
            pad: function (data, blockSize) {
                // Shortcut
                var blockSizeBytes = blockSize * 4;
                // Count padding bytes
                var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                // Create padding word
                var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;
                // Create padding
                var paddingWords = [];
                for (var i = 0; i < nPaddingBytes; i += 4) {
                    paddingWords.push(paddingWord);
                }
                var padding = WordArray.create(paddingWords, nPaddingBytes);
                // Add padding
                data.concat(padding);
            },
            /**
             * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to unpad.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.unpad(wordArray);
             */
            unpad: function (data) {
                // Get number of padding bytes from last byte
                var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
                // Remove padding
                data.sigBytes -= nPaddingBytes;
            }
        };
        /**
         * Abstract base block cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
         */
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
            /**
             * Configuration options.
             *
             * @property {Mode} mode The block mode to use. Default: CBC
             * @property {Padding} padding The padding strategy to use. Default: Pkcs7
             */
            cfg: Cipher.cfg.extend({
                mode: CBC,
                padding: Pkcs7
            }),
            reset: function () {
                // Reset cipher
                Cipher.reset.call(this);
                // Shortcuts
                var cfg = this.cfg;
                var iv = cfg.iv;
                var mode = cfg.mode;
                // Reset block mode
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    var modeCreator = mode.createEncryptor;
                }
                else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                    var modeCreator = mode.createDecryptor;
                    // Keep at least one block in the buffer for unpadding
                    this._minBufferSize = 1;
                }
                if (this._mode && this._mode.__creator == modeCreator) {
                    this._mode.init(this, iv && iv.words);
                }
                else {
                    this._mode = modeCreator.call(mode, this, iv && iv.words);
                    this._mode.__creator = modeCreator;
                }
            },
            _doProcessBlock: function (words, offset) {
                this._mode.processBlock(words, offset);
            },
            _doFinalize: function () {
                // Shortcut
                var padding = this.cfg.padding;
                // Finalize
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    // Pad data
                    padding.pad(this._data, this.blockSize);
                    // Process final blocks
                    var finalProcessedBlocks = this._process(!!'flush');
                }
                else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                    // Process final blocks
                    var finalProcessedBlocks = this._process(!!'flush');
                    // Unpad data
                    padding.unpad(finalProcessedBlocks);
                }
                return finalProcessedBlocks;
            },
            blockSize: 128 / 32
        });
        /**
         * A collection of cipher parameters.
         *
         * @property {WordArray} ciphertext The raw ciphertext.
         * @property {WordArray} key The key to this ciphertext.
         * @property {WordArray} iv The IV used in the ciphering operation.
         * @property {WordArray} salt The salt used with a key derivation function.
         * @property {Cipher} algorithm The cipher algorithm.
         * @property {Mode} mode The block mode used in the ciphering operation.
         * @property {Padding} padding The padding scheme used in the ciphering operation.
         * @property {number} blockSize The block size of the cipher.
         * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
         */
        var CipherParams = C_lib.CipherParams = Base.extend({
            /**
             * Initializes a newly created cipher params object.
             *
             * @param {Object} cipherParams An object with any of the possible cipher parameters.
             *
             * @example
             *
             *     var cipherParams = CryptoJS.lib.CipherParams.create({
             *         ciphertext: ciphertextWordArray,
             *         key: keyWordArray,
             *         iv: ivWordArray,
             *         salt: saltWordArray,
             *         algorithm: CryptoJS.algo.AES,
             *         mode: CryptoJS.mode.CBC,
             *         padding: CryptoJS.pad.PKCS7,
             *         blockSize: 4,
             *         formatter: CryptoJS.format.OpenSSL
             *     });
             */
            init: function (cipherParams) {
                this.mixIn(cipherParams);
            },
            /**
             * Converts this cipher params object to a string.
             *
             * @param {Format} formatter (Optional) The formatting strategy to use.
             *
             * @return {string} The stringified cipher params.
             *
             * @throws Error If neither the formatter nor the default formatter is set.
             *
             * @example
             *
             *     var string = cipherParams + '';
             *     var string = cipherParams.toString();
             *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
             */
            toString: function (formatter) {
                return (formatter || this.formatter).stringify(this);
            }
        });
        /**
         * Format namespace.
         */
        var C_format = C.format = {};
        /**
         * OpenSSL formatting strategy.
         */
        var OpenSSLFormatter = C_format.OpenSSL = {
            /**
             * Converts a cipher params object to an OpenSSL-compatible string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The OpenSSL-compatible string.
             *
             * @static
             *
             * @example
             *
             *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
             */
            stringify: function (cipherParams) {
                // Shortcuts
                var ciphertext = cipherParams.ciphertext;
                var salt = cipherParams.salt;
                // Format
                if (salt) {
                    var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
                }
                else {
                    var wordArray = ciphertext;
                }
                return wordArray.toString(Base64);
            },
            /**
             * Converts an OpenSSL-compatible string to a cipher params object.
             *
             * @param {string} openSSLStr The OpenSSL-compatible string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
             */
            parse: function (openSSLStr) {
                // Parse base64
                var ciphertext = Base64.parse(openSSLStr);
                // Shortcut
                var ciphertextWords = ciphertext.words;
                // Test for salt
                if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                    // Extract salt
                    var salt = WordArray.create(ciphertextWords.slice(2, 4));
                    // Remove salt from ciphertext
                    ciphertextWords.splice(0, 4);
                    ciphertext.sigBytes -= 16;
                }
                return CipherParams.create({ ciphertext: ciphertext, salt: salt });
            }
        };
        /**
         * A cipher wrapper that returns ciphertext as a serializable cipher params object.
         */
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
            /**
             * Configuration options.
             *
             * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
             */
            cfg: Base.extend({
                format: OpenSSLFormatter
            }),
            /**
             * Encrypts a message.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            encrypt: function (cipher, message, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Encrypt
                var encryptor = cipher.createEncryptor(key, cfg);
                var ciphertext = encryptor.finalize(message);
                // Shortcut
                var cipherCfg = encryptor.cfg;
                // Create and return serializable cipher params
                return CipherParams.create({
                    ciphertext: ciphertext,
                    key: key,
                    iv: cipherCfg.iv,
                    algorithm: cipher,
                    mode: cipherCfg.mode,
                    padding: cipherCfg.padding,
                    blockSize: cipher.blockSize,
                    formatter: cfg.format
                });
            },
            /**
             * Decrypts serialized ciphertext.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            decrypt: function (cipher, ciphertext, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);
                // Decrypt
                var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
                return plaintext;
            },
            /**
             * Converts serialized ciphertext to CipherParams,
             * else assumed CipherParams already and returns ciphertext unchanged.
             *
             * @param {CipherParams|string} ciphertext The ciphertext.
             * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
             *
             * @return {CipherParams} The unserialized ciphertext.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
             */
            _parse: function (ciphertext, format) {
                if (typeof ciphertext == 'string') {
                    return format.parse(ciphertext, this);
                }
                else {
                    return ciphertext;
                }
            }
        });
        /**
         * Key derivation function namespace.
         */
        var C_kdf = C.kdf = {};
        /**
         * OpenSSL key derivation function.
         */
        var OpenSSLKdf = C_kdf.OpenSSL = {
            /**
             * Derives a key and IV from a password.
             *
             * @param {string} password The password to derive from.
             * @param {number} keySize The size in words of the key to generate.
             * @param {number} ivSize The size in words of the IV to generate.
             * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
             *
             * @return {CipherParams} A cipher params object with the key, IV, and salt.
             *
             * @static
             *
             * @example
             *
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
             */
            execute: function (password, keySize, ivSize, salt) {
                // Generate random salt
                if (!salt) {
                    salt = WordArray.random(64 / 8);
                }
                // Derive key and IV
                var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
                // Separate key and IV
                var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                key.sigBytes = keySize * 4;
                // Return params
                return CipherParams.create({ key: key, iv: iv, salt: salt });
            }
        };
        /**
         * A serializable cipher wrapper that derives the key from a password,
         * and returns ciphertext as a serializable cipher params object.
         */
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
            /**
             * Configuration options.
             *
             * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
             */
            cfg: SerializableCipher.cfg.extend({
                kdf: OpenSSLKdf
            }),
            /**
             * Encrypts a message using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
             */
            encrypt: function (cipher, message, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
                // Add IV to config
                cfg.iv = derivedParams.iv;
                // Encrypt
                var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
                // Mix in derived params
                ciphertext.mixIn(derivedParams);
                return ciphertext;
            },
            /**
             * Decrypts serialized ciphertext using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
             */
            decrypt: function (cipher, ciphertext, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);
                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
                // Add IV to config
                cfg.iv = derivedParams.iv;
                // Decrypt
                var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
                return plaintext;
            }
        });
    }());
    /**
     * Cipher Feedback block mode.
     */
    CryptoJS.mode.CFB = (function () {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                // Remember this block to use with next block
                this._prevBlock = words.slice(offset, offset + blockSize);
            }
        });
        CFB.Decryptor = CFB.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                // Remember this block to use with next block
                var thisBlock = words.slice(offset, offset + blockSize);
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                // This block becomes the previous block
                this._prevBlock = thisBlock;
            }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
            // Shortcut
            var iv = this._iv;
            // Generate keystream
            if (iv) {
                var keystream = iv.slice(0);
                // Remove IV for subsequent blocks
                this._iv = undefined;
            }
            else {
                var keystream = this._prevBlock;
            }
            cipher.encryptBlock(keystream, 0);
            // Encrypt
            for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
            }
        }
        return CFB;
    }());
    /**
     * Electronic Codebook block mode.
     */
    CryptoJS.mode.ECB = (function () {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
            processBlock: function (words, offset) {
                this._cipher.encryptBlock(words, offset);
            }
        });
        ECB.Decryptor = ECB.extend({
            processBlock: function (words, offset) {
                this._cipher.decryptBlock(words, offset);
            }
        });
        return ECB;
    }());
    /**
     * ANSI X.923 padding strategy.
     */
    CryptoJS.pad.AnsiX923 = {
        pad: function (data, blockSize) {
            // Shortcuts
            var dataSigBytes = data.sigBytes;
            var blockSizeBytes = blockSize * 4;
            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
            // Compute last byte position
            var lastBytePos = dataSigBytes + nPaddingBytes - 1;
            // Pad
            data.clamp();
            data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
            data.sigBytes += nPaddingBytes;
        },
        unpad: function (data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
            // Remove padding
            data.sigBytes -= nPaddingBytes;
        }
    };
    /**
     * ISO 10126 padding strategy.
     */
    CryptoJS.pad.Iso10126 = {
        pad: function (data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;
            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            // Pad
            data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
                concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function (data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
            // Remove padding
            data.sigBytes -= nPaddingBytes;
        }
    };
    /**
     * ISO/IEC 9797-1 Padding Method 2.
     */
    CryptoJS.pad.Iso97971 = {
        pad: function (data, blockSize) {
            // Add 0x80 byte
            data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));
            // Zero pad the rest
            CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function (data) {
            // Remove zero padding
            CryptoJS.pad.ZeroPadding.unpad(data);
            // Remove one more byte -- the 0x80 byte
            data.sigBytes--;
        }
    };
    /**
     * Output Feedback block mode.
     */
    CryptoJS.mode.OFB = (function () {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var keystream = this._keystream;
                // Generate keystream
                if (iv) {
                    keystream = this._keystream = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                cipher.encryptBlock(keystream, 0);
                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
    }());
    /**
     * A noop padding strategy.
     */
    CryptoJS.pad.NoPadding = {
        pad: function () {
        },
        unpad: function () {
        }
    };
    (function (undefined) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
            /**
             * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The hexadecimally encoded string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
             */
            stringify: function (cipherParams) {
                return cipherParams.ciphertext.toString(Hex);
            },
            /**
             * Converts a hexadecimally encoded ciphertext string to a cipher params object.
             *
             * @param {string} input The hexadecimally encoded string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
             */
            parse: function (input) {
                var ciphertext = Hex.parse(input);
                return CipherParams.create({ ciphertext: ciphertext });
            }
        };
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        // Lookup tables
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        // Compute lookup tables
        (function () {
            // Compute double table
            var d = [];
            for (var i = 0; i < 256; i++) {
                if (i < 128) {
                    d[i] = i << 1;
                }
                else {
                    d[i] = (i << 1) ^ 0x11b;
                }
            }
            // Walk GF(2^8)
            var x = 0;
            var xi = 0;
            for (var i = 0; i < 256; i++) {
                // Compute sbox
                var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
                sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
                SBOX[x] = sx;
                INV_SBOX[sx] = x;
                // Compute multiplication
                var x2 = d[x];
                var x4 = d[x2];
                var x8 = d[x4];
                // Compute sub bytes, mix columns tables
                var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
                SUB_MIX_0[x] = (t << 24) | (t >>> 8);
                SUB_MIX_1[x] = (t << 16) | (t >>> 16);
                SUB_MIX_2[x] = (t << 8) | (t >>> 24);
                SUB_MIX_3[x] = t;
                // Compute inv sub bytes, inv mix columns tables
                var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
                INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
                INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
                INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);
                INV_SUB_MIX_3[sx] = t;
                // Compute next counter
                if (!x) {
                    x = xi = 1;
                }
                else {
                    x = x2 ^ d[d[d[x8 ^ x2]]];
                    xi ^= d[d[xi]];
                }
            }
        }());
        // Precomputed Rcon lookup
        var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
        /**
         * AES block cipher algorithm.
         */
        var AES = C_algo.AES = BlockCipher.extend({
            _doReset: function () {
                // Skip reset of nRounds has been set before and key did not change
                if (this._nRounds && this._keyPriorReset === this._key) {
                    return;
                }
                // Shortcuts
                var key = this._keyPriorReset = this._key;
                var keyWords = key.words;
                var keySize = key.sigBytes / 4;
                // Compute number of rounds
                var nRounds = this._nRounds = keySize + 6;
                // Compute number of key schedule rows
                var ksRows = (nRounds + 1) * 4;
                // Compute key schedule
                var keySchedule = this._keySchedule = [];
                for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                    if (ksRow < keySize) {
                        keySchedule[ksRow] = keyWords[ksRow];
                    }
                    else {
                        var t = keySchedule[ksRow - 1];
                        if (!(ksRow % keySize)) {
                            // Rot word
                            t = (t << 8) | (t >>> 24);
                            // Sub word
                            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                            // Mix Rcon
                            t ^= RCON[(ksRow / keySize) | 0] << 24;
                        }
                        else if (keySize > 6 && ksRow % keySize == 4) {
                            // Sub word
                            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                        }
                        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                    }
                }
                // Compute inv key schedule
                var invKeySchedule = this._invKeySchedule = [];
                for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                    var ksRow = ksRows - invKsRow;
                    if (invKsRow % 4) {
                        var t = keySchedule[ksRow];
                    }
                    else {
                        var t = keySchedule[ksRow - 4];
                    }
                    if (invKsRow < 4 || ksRow <= 4) {
                        invKeySchedule[invKsRow] = t;
                    }
                    else {
                        invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
                            INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                    }
                }
            },
            encryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
            },
            decryptBlock: function (M, offset) {
                // Swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
                this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                // Inv swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
            },
            _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                // Shortcut
                var nRounds = this._nRounds;
                // Get input, add round key
                var s0 = M[offset] ^ keySchedule[0];
                var s1 = M[offset + 1] ^ keySchedule[1];
                var s2 = M[offset + 2] ^ keySchedule[2];
                var s3 = M[offset + 3] ^ keySchedule[3];
                // Key schedule row counter
                var ksRow = 4;
                // Rounds
                for (var round = 1; round < nRounds; round++) {
                    // Shift rows, sub bytes, mix columns, add round key
                    var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                    var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                    var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                    var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                    // Update state
                    s0 = t0;
                    s1 = t1;
                    s2 = t2;
                    s3 = t3;
                }
                // Shift rows, sub bytes, add round key
                var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                // Set output
                M[offset] = t0;
                M[offset + 1] = t1;
                M[offset + 2] = t2;
                M[offset + 3] = t3;
            },
            keySize: 256 / 32
        });
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
         */
        C.AES = BlockCipher._createHelper(AES);
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        // Permuted Choice 1 constants
        var PC1 = [
            57, 49, 41, 33, 25, 17, 9, 1,
            58, 50, 42, 34, 26, 18, 10, 2,
            59, 51, 43, 35, 27, 19, 11, 3,
            60, 52, 44, 36, 63, 55, 47, 39,
            31, 23, 15, 7, 62, 54, 46, 38,
            30, 22, 14, 6, 61, 53, 45, 37,
            29, 21, 13, 5, 28, 20, 12, 4
        ];
        // Permuted Choice 2 constants
        var PC2 = [
            14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32
        ];
        // Cumulative bit shift constants
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        // SBOXes and round permutation constants
        var SBOX_P = [
            {
                0x0: 0x808200,
                0x10000000: 0x8000,
                0x20000000: 0x808002,
                0x30000000: 0x2,
                0x40000000: 0x200,
                0x50000000: 0x808202,
                0x60000000: 0x800202,
                0x70000000: 0x800000,
                0x80000000: 0x202,
                0x90000000: 0x800200,
                0xa0000000: 0x8200,
                0xb0000000: 0x808000,
                0xc0000000: 0x8002,
                0xd0000000: 0x800002,
                0xe0000000: 0x0,
                0xf0000000: 0x8202,
                0x8000000: 0x0,
                0x18000000: 0x808202,
                0x28000000: 0x8202,
                0x38000000: 0x8000,
                0x48000000: 0x808200,
                0x58000000: 0x200,
                0x68000000: 0x808002,
                0x78000000: 0x2,
                0x88000000: 0x800200,
                0x98000000: 0x8200,
                0xa8000000: 0x808000,
                0xb8000000: 0x800202,
                0xc8000000: 0x800002,
                0xd8000000: 0x8002,
                0xe8000000: 0x202,
                0xf8000000: 0x800000,
                0x1: 0x8000,
                0x10000001: 0x2,
                0x20000001: 0x808200,
                0x30000001: 0x800000,
                0x40000001: 0x808002,
                0x50000001: 0x8200,
                0x60000001: 0x200,
                0x70000001: 0x800202,
                0x80000001: 0x808202,
                0x90000001: 0x808000,
                0xa0000001: 0x800002,
                0xb0000001: 0x8202,
                0xc0000001: 0x202,
                0xd0000001: 0x800200,
                0xe0000001: 0x8002,
                0xf0000001: 0x0,
                0x8000001: 0x808202,
                0x18000001: 0x808000,
                0x28000001: 0x800000,
                0x38000001: 0x200,
                0x48000001: 0x8000,
                0x58000001: 0x800002,
                0x68000001: 0x2,
                0x78000001: 0x8202,
                0x88000001: 0x8002,
                0x98000001: 0x800202,
                0xa8000001: 0x202,
                0xb8000001: 0x808200,
                0xc8000001: 0x800200,
                0xd8000001: 0x0,
                0xe8000001: 0x8200,
                0xf8000001: 0x808002
            },
            {
                0x0: 0x40084010,
                0x1000000: 0x4000,
                0x2000000: 0x80000,
                0x3000000: 0x40080010,
                0x4000000: 0x40000010,
                0x5000000: 0x40084000,
                0x6000000: 0x40004000,
                0x7000000: 0x10,
                0x8000000: 0x84000,
                0x9000000: 0x40004010,
                0xa000000: 0x40000000,
                0xb000000: 0x84010,
                0xc000000: 0x80010,
                0xd000000: 0x0,
                0xe000000: 0x4010,
                0xf000000: 0x40080000,
                0x800000: 0x40004000,
                0x1800000: 0x84010,
                0x2800000: 0x10,
                0x3800000: 0x40004010,
                0x4800000: 0x40084010,
                0x5800000: 0x40000000,
                0x6800000: 0x80000,
                0x7800000: 0x40080010,
                0x8800000: 0x80010,
                0x9800000: 0x0,
                0xa800000: 0x4000,
                0xb800000: 0x40080000,
                0xc800000: 0x40000010,
                0xd800000: 0x84000,
                0xe800000: 0x40084000,
                0xf800000: 0x4010,
                0x10000000: 0x0,
                0x11000000: 0x40080010,
                0x12000000: 0x40004010,
                0x13000000: 0x40084000,
                0x14000000: 0x40080000,
                0x15000000: 0x10,
                0x16000000: 0x84010,
                0x17000000: 0x4000,
                0x18000000: 0x4010,
                0x19000000: 0x80000,
                0x1a000000: 0x80010,
                0x1b000000: 0x40000010,
                0x1c000000: 0x84000,
                0x1d000000: 0x40004000,
                0x1e000000: 0x40000000,
                0x1f000000: 0x40084010,
                0x10800000: 0x84010,
                0x11800000: 0x80000,
                0x12800000: 0x40080000,
                0x13800000: 0x4000,
                0x14800000: 0x40004000,
                0x15800000: 0x40084010,
                0x16800000: 0x10,
                0x17800000: 0x40000000,
                0x18800000: 0x40084000,
                0x19800000: 0x40000010,
                0x1a800000: 0x40004010,
                0x1b800000: 0x80010,
                0x1c800000: 0x0,
                0x1d800000: 0x4010,
                0x1e800000: 0x40080010,
                0x1f800000: 0x84000
            },
            {
                0x0: 0x104,
                0x100000: 0x0,
                0x200000: 0x4000100,
                0x300000: 0x10104,
                0x400000: 0x10004,
                0x500000: 0x4000004,
                0x600000: 0x4010104,
                0x700000: 0x4010000,
                0x800000: 0x4000000,
                0x900000: 0x4010100,
                0xa00000: 0x10100,
                0xb00000: 0x4010004,
                0xc00000: 0x4000104,
                0xd00000: 0x10000,
                0xe00000: 0x4,
                0xf00000: 0x100,
                0x80000: 0x4010100,
                0x180000: 0x4010004,
                0x280000: 0x0,
                0x380000: 0x4000100,
                0x480000: 0x4000004,
                0x580000: 0x10000,
                0x680000: 0x10004,
                0x780000: 0x104,
                0x880000: 0x4,
                0x980000: 0x100,
                0xa80000: 0x4010000,
                0xb80000: 0x10104,
                0xc80000: 0x10100,
                0xd80000: 0x4000104,
                0xe80000: 0x4010104,
                0xf80000: 0x4000000,
                0x1000000: 0x4010100,
                0x1100000: 0x10004,
                0x1200000: 0x10000,
                0x1300000: 0x4000100,
                0x1400000: 0x100,
                0x1500000: 0x4010104,
                0x1600000: 0x4000004,
                0x1700000: 0x0,
                0x1800000: 0x4000104,
                0x1900000: 0x4000000,
                0x1a00000: 0x4,
                0x1b00000: 0x10100,
                0x1c00000: 0x4010000,
                0x1d00000: 0x104,
                0x1e00000: 0x10104,
                0x1f00000: 0x4010004,
                0x1080000: 0x4000000,
                0x1180000: 0x104,
                0x1280000: 0x4010100,
                0x1380000: 0x0,
                0x1480000: 0x10004,
                0x1580000: 0x4000100,
                0x1680000: 0x100,
                0x1780000: 0x4010004,
                0x1880000: 0x10000,
                0x1980000: 0x4010104,
                0x1a80000: 0x10104,
                0x1b80000: 0x4000004,
                0x1c80000: 0x4000104,
                0x1d80000: 0x4010000,
                0x1e80000: 0x4,
                0x1f80000: 0x10100
            },
            {
                0x0: 0x80401000,
                0x10000: 0x80001040,
                0x20000: 0x401040,
                0x30000: 0x80400000,
                0x40000: 0x0,
                0x50000: 0x401000,
                0x60000: 0x80000040,
                0x70000: 0x400040,
                0x80000: 0x80000000,
                0x90000: 0x400000,
                0xa0000: 0x40,
                0xb0000: 0x80001000,
                0xc0000: 0x80400040,
                0xd0000: 0x1040,
                0xe0000: 0x1000,
                0xf0000: 0x80401040,
                0x8000: 0x80001040,
                0x18000: 0x40,
                0x28000: 0x80400040,
                0x38000: 0x80001000,
                0x48000: 0x401000,
                0x58000: 0x80401040,
                0x68000: 0x0,
                0x78000: 0x80400000,
                0x88000: 0x1000,
                0x98000: 0x80401000,
                0xa8000: 0x400000,
                0xb8000: 0x1040,
                0xc8000: 0x80000000,
                0xd8000: 0x400040,
                0xe8000: 0x401040,
                0xf8000: 0x80000040,
                0x100000: 0x400040,
                0x110000: 0x401000,
                0x120000: 0x80000040,
                0x130000: 0x0,
                0x140000: 0x1040,
                0x150000: 0x80400040,
                0x160000: 0x80401000,
                0x170000: 0x80001040,
                0x180000: 0x80401040,
                0x190000: 0x80000000,
                0x1a0000: 0x80400000,
                0x1b0000: 0x401040,
                0x1c0000: 0x80001000,
                0x1d0000: 0x400000,
                0x1e0000: 0x40,
                0x1f0000: 0x1000,
                0x108000: 0x80400000,
                0x118000: 0x80401040,
                0x128000: 0x0,
                0x138000: 0x401000,
                0x148000: 0x400040,
                0x158000: 0x80000000,
                0x168000: 0x80001040,
                0x178000: 0x40,
                0x188000: 0x80000040,
                0x198000: 0x1000,
                0x1a8000: 0x80001000,
                0x1b8000: 0x80400040,
                0x1c8000: 0x1040,
                0x1d8000: 0x80401000,
                0x1e8000: 0x400000,
                0x1f8000: 0x401040
            },
            {
                0x0: 0x80,
                0x1000: 0x1040000,
                0x2000: 0x40000,
                0x3000: 0x20000000,
                0x4000: 0x20040080,
                0x5000: 0x1000080,
                0x6000: 0x21000080,
                0x7000: 0x40080,
                0x8000: 0x1000000,
                0x9000: 0x20040000,
                0xa000: 0x20000080,
                0xb000: 0x21040080,
                0xc000: 0x21040000,
                0xd000: 0x0,
                0xe000: 0x1040080,
                0xf000: 0x21000000,
                0x800: 0x1040080,
                0x1800: 0x21000080,
                0x2800: 0x80,
                0x3800: 0x1040000,
                0x4800: 0x40000,
                0x5800: 0x20040080,
                0x6800: 0x21040000,
                0x7800: 0x20000000,
                0x8800: 0x20040000,
                0x9800: 0x0,
                0xa800: 0x21040080,
                0xb800: 0x1000080,
                0xc800: 0x20000080,
                0xd800: 0x21000000,
                0xe800: 0x1000000,
                0xf800: 0x40080,
                0x10000: 0x40000,
                0x11000: 0x80,
                0x12000: 0x20000000,
                0x13000: 0x21000080,
                0x14000: 0x1000080,
                0x15000: 0x21040000,
                0x16000: 0x20040080,
                0x17000: 0x1000000,
                0x18000: 0x21040080,
                0x19000: 0x21000000,
                0x1a000: 0x1040000,
                0x1b000: 0x20040000,
                0x1c000: 0x40080,
                0x1d000: 0x20000080,
                0x1e000: 0x0,
                0x1f000: 0x1040080,
                0x10800: 0x21000080,
                0x11800: 0x1000000,
                0x12800: 0x1040000,
                0x13800: 0x20040080,
                0x14800: 0x20000000,
                0x15800: 0x1040080,
                0x16800: 0x80,
                0x17800: 0x21040000,
                0x18800: 0x40080,
                0x19800: 0x21040080,
                0x1a800: 0x0,
                0x1b800: 0x21000000,
                0x1c800: 0x1000080,
                0x1d800: 0x40000,
                0x1e800: 0x20040000,
                0x1f800: 0x20000080
            },
            {
                0x0: 0x10000008,
                0x100: 0x2000,
                0x200: 0x10200000,
                0x300: 0x10202008,
                0x400: 0x10002000,
                0x500: 0x200000,
                0x600: 0x200008,
                0x700: 0x10000000,
                0x800: 0x0,
                0x900: 0x10002008,
                0xa00: 0x202000,
                0xb00: 0x8,
                0xc00: 0x10200008,
                0xd00: 0x202008,
                0xe00: 0x2008,
                0xf00: 0x10202000,
                0x80: 0x10200000,
                0x180: 0x10202008,
                0x280: 0x8,
                0x380: 0x200000,
                0x480: 0x202008,
                0x580: 0x10000008,
                0x680: 0x10002000,
                0x780: 0x2008,
                0x880: 0x200008,
                0x980: 0x2000,
                0xa80: 0x10002008,
                0xb80: 0x10200008,
                0xc80: 0x0,
                0xd80: 0x10202000,
                0xe80: 0x202000,
                0xf80: 0x10000000,
                0x1000: 0x10002000,
                0x1100: 0x10200008,
                0x1200: 0x10202008,
                0x1300: 0x2008,
                0x1400: 0x200000,
                0x1500: 0x10000000,
                0x1600: 0x10000008,
                0x1700: 0x202000,
                0x1800: 0x202008,
                0x1900: 0x0,
                0x1a00: 0x8,
                0x1b00: 0x10200000,
                0x1c00: 0x2000,
                0x1d00: 0x10002008,
                0x1e00: 0x10202000,
                0x1f00: 0x200008,
                0x1080: 0x8,
                0x1180: 0x202000,
                0x1280: 0x200000,
                0x1380: 0x10000008,
                0x1480: 0x10002000,
                0x1580: 0x2008,
                0x1680: 0x10202008,
                0x1780: 0x10200000,
                0x1880: 0x10202000,
                0x1980: 0x10200008,
                0x1a80: 0x2000,
                0x1b80: 0x202008,
                0x1c80: 0x200008,
                0x1d80: 0x0,
                0x1e80: 0x10000000,
                0x1f80: 0x10002008
            },
            {
                0x0: 0x100000,
                0x10: 0x2000401,
                0x20: 0x400,
                0x30: 0x100401,
                0x40: 0x2100401,
                0x50: 0x0,
                0x60: 0x1,
                0x70: 0x2100001,
                0x80: 0x2000400,
                0x90: 0x100001,
                0xa0: 0x2000001,
                0xb0: 0x2100400,
                0xc0: 0x2100000,
                0xd0: 0x401,
                0xe0: 0x100400,
                0xf0: 0x2000000,
                0x8: 0x2100001,
                0x18: 0x0,
                0x28: 0x2000401,
                0x38: 0x2100400,
                0x48: 0x100000,
                0x58: 0x2000001,
                0x68: 0x2000000,
                0x78: 0x401,
                0x88: 0x100401,
                0x98: 0x2000400,
                0xa8: 0x2100000,
                0xb8: 0x100001,
                0xc8: 0x400,
                0xd8: 0x2100401,
                0xe8: 0x1,
                0xf8: 0x100400,
                0x100: 0x2000000,
                0x110: 0x100000,
                0x120: 0x2000401,
                0x130: 0x2100001,
                0x140: 0x100001,
                0x150: 0x2000400,
                0x160: 0x2100400,
                0x170: 0x100401,
                0x180: 0x401,
                0x190: 0x2100401,
                0x1a0: 0x100400,
                0x1b0: 0x1,
                0x1c0: 0x0,
                0x1d0: 0x2100000,
                0x1e0: 0x2000001,
                0x1f0: 0x400,
                0x108: 0x100400,
                0x118: 0x2000401,
                0x128: 0x2100001,
                0x138: 0x1,
                0x148: 0x2000000,
                0x158: 0x100000,
                0x168: 0x401,
                0x178: 0x2100400,
                0x188: 0x2000001,
                0x198: 0x2100000,
                0x1a8: 0x0,
                0x1b8: 0x2100401,
                0x1c8: 0x100401,
                0x1d8: 0x400,
                0x1e8: 0x2000400,
                0x1f8: 0x100001
            },
            {
                0x0: 0x8000820,
                0x1: 0x20000,
                0x2: 0x8000000,
                0x3: 0x20,
                0x4: 0x20020,
                0x5: 0x8020820,
                0x6: 0x8020800,
                0x7: 0x800,
                0x8: 0x8020000,
                0x9: 0x8000800,
                0xa: 0x20800,
                0xb: 0x8020020,
                0xc: 0x820,
                0xd: 0x0,
                0xe: 0x8000020,
                0xf: 0x20820,
                0x80000000: 0x800,
                0x80000001: 0x8020820,
                0x80000002: 0x8000820,
                0x80000003: 0x8000000,
                0x80000004: 0x8020000,
                0x80000005: 0x20800,
                0x80000006: 0x20820,
                0x80000007: 0x20,
                0x80000008: 0x8000020,
                0x80000009: 0x820,
                0x8000000a: 0x20020,
                0x8000000b: 0x8020800,
                0x8000000c: 0x0,
                0x8000000d: 0x8020020,
                0x8000000e: 0x8000800,
                0x8000000f: 0x20000,
                0x10: 0x20820,
                0x11: 0x8020800,
                0x12: 0x20,
                0x13: 0x800,
                0x14: 0x8000800,
                0x15: 0x8000020,
                0x16: 0x8020020,
                0x17: 0x20000,
                0x18: 0x0,
                0x19: 0x20020,
                0x1a: 0x8020000,
                0x1b: 0x8000820,
                0x1c: 0x8020820,
                0x1d: 0x20800,
                0x1e: 0x820,
                0x1f: 0x8000000,
                0x80000010: 0x20000,
                0x80000011: 0x800,
                0x80000012: 0x8020020,
                0x80000013: 0x20820,
                0x80000014: 0x20,
                0x80000015: 0x8020000,
                0x80000016: 0x8000000,
                0x80000017: 0x8000820,
                0x80000018: 0x8020820,
                0x80000019: 0x8000020,
                0x8000001a: 0x8000800,
                0x8000001b: 0x0,
                0x8000001c: 0x20800,
                0x8000001d: 0x820,
                0x8000001e: 0x20020,
                0x8000001f: 0x8020800
            }
        ];
        // Masks that select the SBOX input
        var SBOX_MASK = [
            0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
            0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
        ];
        /**
         * DES block cipher algorithm.
         */
        var DES = C_algo.DES = BlockCipher.extend({
            _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                // Select 56 bits according to PC1
                var keyBits = [];
                for (var i = 0; i < 56; i++) {
                    var keyBitPos = PC1[i] - 1;
                    keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
                }
                // Assemble 16 subkeys
                var subKeys = this._subKeys = [];
                for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                    // Create subkey
                    var subKey = subKeys[nSubKey] = [];
                    // Shortcut
                    var bitShift = BIT_SHIFTS[nSubKey];
                    // Select 48 bits according to PC2
                    for (var i = 0; i < 24; i++) {
                        // Select from the left 28 key bits
                        subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);
                        // Select from the right 28 key bits
                        subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
                    }
                    // Since each subkey is applied to an expanded 32-bit input,
                    // the subkey can be broken into 8 values scaled to 32-bits,
                    // which allows the key to be used without expansion
                    subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
                    for (var i = 1; i < 7; i++) {
                        subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
                    }
                    subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
                }
                // Compute inverse subkeys
                var invSubKeys = this._invSubKeys = [];
                for (var i = 0; i < 16; i++) {
                    invSubKeys[i] = subKeys[15 - i];
                }
            },
            encryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._subKeys);
            },
            decryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._invSubKeys);
            },
            _doCryptBlock: function (M, offset, subKeys) {
                // Get input
                this._lBlock = M[offset];
                this._rBlock = M[offset + 1];
                // Initial permutation
                exchangeLR.call(this, 4, 0x0f0f0f0f);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeLR.call(this, 1, 0x55555555);
                // Rounds
                for (var round = 0; round < 16; round++) {
                    // Shortcuts
                    var subKey = subKeys[round];
                    var lBlock = this._lBlock;
                    var rBlock = this._rBlock;
                    // Feistel function
                    var f = 0;
                    for (var i = 0; i < 8; i++) {
                        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                    }
                    this._lBlock = rBlock;
                    this._rBlock = lBlock ^ f;
                }
                // Undo swap from last round
                var t = this._lBlock;
                this._lBlock = this._rBlock;
                this._rBlock = t;
                // Final permutation
                exchangeLR.call(this, 1, 0x55555555);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeLR.call(this, 4, 0x0f0f0f0f);
                // Set output
                M[offset] = this._lBlock;
                M[offset + 1] = this._rBlock;
            },
            keySize: 64 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
        });
        // Swap bits across the left and right words
        function exchangeLR(offset, mask) {
            var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
            this._rBlock ^= t;
            this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
            var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
            this._lBlock ^= t;
            this._rBlock ^= t << offset;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
         */
        C.DES = BlockCipher._createHelper(DES);
        /**
         * Triple-DES block cipher algorithm.
         */
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
            _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                // Create DES instances
                this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
                this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
                this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
            },
            encryptBlock: function (M, offset) {
                this._des1.encryptBlock(M, offset);
                this._des2.decryptBlock(M, offset);
                this._des3.encryptBlock(M, offset);
            },
            decryptBlock: function (M, offset) {
                this._des3.decryptBlock(M, offset);
                this._des2.encryptBlock(M, offset);
                this._des1.decryptBlock(M, offset);
            },
            keySize: 192 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
        });
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
         */
        C.TripleDES = BlockCipher._createHelper(TripleDES);
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        /**
         * RC4 stream cipher algorithm.
         */
        var RC4 = C_algo.RC4 = StreamCipher.extend({
            _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                var keySigBytes = key.sigBytes;
                // Init sbox
                var S = this._S = [];
                for (var i = 0; i < 256; i++) {
                    S[i] = i;
                }
                // Key setup
                for (var i = 0, j = 0; i < 256; i++) {
                    var keyByteIndex = i % keySigBytes;
                    var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;
                    j = (j + S[i] + keyByte) % 256;
                    // Swap
                    var t = S[i];
                    S[i] = S[j];
                    S[j] = t;
                }
                // Counters
                this._i = this._j = 0;
            },
            _doProcessBlock: function (M, offset) {
                M[offset] ^= generateKeystreamWord.call(this);
            },
            keySize: 256 / 32,
            ivSize: 0
        });
        function generateKeystreamWord() {
            // Shortcuts
            var S = this._S;
            var i = this._i;
            var j = this._j;
            // Generate keystream word
            var keystreamWord = 0;
            for (var n = 0; n < 4; n++) {
                i = (i + 1) % 256;
                j = (j + S[i]) % 256;
                // Swap
                var t = S[i];
                S[i] = S[j];
                S[j] = t;
                keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
            }
            // Update counters
            this._i = i;
            this._j = j;
            return keystreamWord;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
         */
        C.RC4 = StreamCipher._createHelper(RC4);
        /**
         * Modified RC4 stream cipher algorithm.
         */
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
            /**
             * Configuration options.
             *
             * @property {number} drop The number of keystream words to drop. Default 192
             */
            cfg: RC4.cfg.extend({
                drop: 192
            }),
            _doReset: function () {
                RC4._doReset.call(this);
                // Drop
                for (var i = this.cfg.drop; i > 0; i--) {
                    generateKeystreamWord.call(this);
                }
            }
        });
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
         */
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
    }());
    /** @preserve
     * Counter block mode compatible with  Dr Brian Gladman fileenc.c
     * derived from CryptoJS.mode.CTR
     * Jan Hruby jhruby.web@gmail.com
     */
    CryptoJS.mode.CTRGladman = (function () {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
            if (((word >> 24) & 0xff) === 0xff) { //overflow
                var b1 = (word >> 16) & 0xff;
                var b2 = (word >> 8) & 0xff;
                var b3 = word & 0xff;
                if (b1 === 0xff) // overflow b1
                 {
                    b1 = 0;
                    if (b2 === 0xff) {
                        b2 = 0;
                        if (b3 === 0xff) {
                            b3 = 0;
                        }
                        else {
                            ++b3;
                        }
                    }
                    else {
                        ++b2;
                    }
                }
                else {
                    ++b1;
                }
                word = 0;
                word += (b1 << 16);
                word += (b2 << 8);
                word += b3;
            }
            else {
                word += (0x01 << 24);
            }
            return word;
        }
        function incCounter(counter) {
            if ((counter[0] = incWord(counter[0])) === 0) {
                // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
                counter[1] = incWord(counter[1]);
            }
            return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;
                // Generate keystream
                if (iv) {
                    counter = this._counter = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                incCounter(counter);
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);
                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];
        /**
         * Rabbit stream cipher algorithm
         */
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
            _doReset: function () {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;
                // Swap endian
                for (var i = 0; i < 4; i++) {
                    K[i] = (((K[i] << 8) | (K[i] >>> 24)) & 0x00ff00ff) |
                        (((K[i] << 24) | (K[i] >>> 8)) & 0xff00ff00);
                }
                // Generate initial state values
                var X = this._X = [
                    K[0], (K[3] << 16) | (K[2] >>> 16),
                    K[1], (K[0] << 16) | (K[3] >>> 16),
                    K[2], (K[1] << 16) | (K[0] >>> 16),
                    K[3], (K[2] << 16) | (K[1] >>> 16)
                ];
                // Generate initial counter values
                var C = this._C = [
                    (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                    (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                    (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                    (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                ];
                // Carry bit
                this._b = 0;
                // Iterate the system four times
                for (var i = 0; i < 4; i++) {
                    nextState.call(this);
                }
                // Modify the counters
                for (var i = 0; i < 8; i++) {
                    C[i] ^= X[(i + 4) & 7];
                }
                // IV setup
                if (iv) {
                    // Shortcuts
                    var IV = iv.words;
                    var IV_0 = IV[0];
                    var IV_1 = IV[1];
                    // Generate four subvectors
                    var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                    var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                    var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                    var i3 = (i2 << 16) | (i0 & 0x0000ffff);
                    // Modify counter values
                    C[0] ^= i0;
                    C[1] ^= i1;
                    C[2] ^= i2;
                    C[3] ^= i3;
                    C[4] ^= i0;
                    C[5] ^= i1;
                    C[6] ^= i2;
                    C[7] ^= i3;
                    // Iterate the system four times
                    for (var i = 0; i < 4; i++) {
                        nextState.call(this);
                    }
                }
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var X = this._X;
                // Iterate the system
                nextState.call(this);
                // Generate four keystream words
                S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);
                for (var i = 0; i < 4; i++) {
                    // Swap endian
                    S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                        (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);
                    // Encrypt
                    M[offset + i] ^= S[i];
                }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
        });
        function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C;
            // Save old counter values
            for (var i = 0; i < 8; i++) {
                C_[i] = C[i];
            }
            // Calculate new counter values
            C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
            C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
            C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
            C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
            C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
            C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
            C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
            C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
            this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;
            // Calculate the g-values
            for (var i = 0; i < 8; i++) {
                var gx = X[i] + C[i];
                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;
                // Calculate high and low result of squaring
                var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);
                // High XOR low
                G[i] = gh ^ gl;
            }
            // Calculate new state values
            X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
            X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
            X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
            X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
            X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
            X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
            X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
            X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
         */
        C.Rabbit = StreamCipher._createHelper(Rabbit);
    }());
    /**
     * Counter block mode.
     */
    CryptoJS.mode.CTR = (function () {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;
                // Generate keystream
                if (iv) {
                    counter = this._counter = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);
                // Increment counter
                counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;
                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
    }());
    (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];
        /**
         * Rabbit stream cipher algorithm.
         *
         * This is a legacy version that neglected to convert the key to little-endian.
         * This error doesn't affect the cipher's security,
         * but it does affect its compatibility with other implementations.
         */
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
            _doReset: function () {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;
                // Generate initial state values
                var X = this._X = [
                    K[0], (K[3] << 16) | (K[2] >>> 16),
                    K[1], (K[0] << 16) | (K[3] >>> 16),
                    K[2], (K[1] << 16) | (K[0] >>> 16),
                    K[3], (K[2] << 16) | (K[1] >>> 16)
                ];
                // Generate initial counter values
                var C = this._C = [
                    (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                    (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                    (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                    (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                ];
                // Carry bit
                this._b = 0;
                // Iterate the system four times
                for (var i = 0; i < 4; i++) {
                    nextState.call(this);
                }
                // Modify the counters
                for (var i = 0; i < 8; i++) {
                    C[i] ^= X[(i + 4) & 7];
                }
                // IV setup
                if (iv) {
                    // Shortcuts
                    var IV = iv.words;
                    var IV_0 = IV[0];
                    var IV_1 = IV[1];
                    // Generate four subvectors
                    var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                    var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                    var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                    var i3 = (i2 << 16) | (i0 & 0x0000ffff);
                    // Modify counter values
                    C[0] ^= i0;
                    C[1] ^= i1;
                    C[2] ^= i2;
                    C[3] ^= i3;
                    C[4] ^= i0;
                    C[5] ^= i1;
                    C[6] ^= i2;
                    C[7] ^= i3;
                    // Iterate the system four times
                    for (var i = 0; i < 4; i++) {
                        nextState.call(this);
                    }
                }
            },
            _doProcessBlock: function (M, offset) {
                // Shortcut
                var X = this._X;
                // Iterate the system
                nextState.call(this);
                // Generate four keystream words
                S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);
                for (var i = 0; i < 4; i++) {
                    // Swap endian
                    S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                        (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);
                    // Encrypt
                    M[offset + i] ^= S[i];
                }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
        });
        function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C;
            // Save old counter values
            for (var i = 0; i < 8; i++) {
                C_[i] = C[i];
            }
            // Calculate new counter values
            C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
            C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
            C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
            C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
            C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
            C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
            C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
            C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
            this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;
            // Calculate the g-values
            for (var i = 0; i < 8; i++) {
                var gx = X[i] + C[i];
                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;
                // Calculate high and low result of squaring
                var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);
                // High XOR low
                G[i] = gh ^ gl;
            }
            // Calculate new state values
            X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
            X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
            X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
            X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
            X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
            X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
            X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
            X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
        }
        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
         */
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
    }());
    /**
     * Zero padding strategy.
     */
    CryptoJS.pad.ZeroPadding = {
        pad: function (data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;
            // Pad
            data.clamp();
            data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
        },
        unpad: function (data) {
            // Shortcut
            var dataWords = data.words;
            // Unpad
            var i = data.sigBytes - 1;
            while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
                i--;
            }
            data.sigBytes = i + 1;
        }
    };
    return CryptoJS;
}));

},{}],51:[function(require,module,exports){
'use strict';
var elliptic = exports;
// hello ladies ;)
function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () { };
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
}
elliptic.inherits = inherits;
elliptic.version = '6.5.0';
elliptic.utils = require('./elliptic/utils.cjs');
elliptic.curve = require('./elliptic/curve/index.cjs');
elliptic.curves = require('./elliptic/curves.cjs');
// Protocols
elliptic.ec = require('./elliptic/ec/index.cjs');
elliptic.eddsa = require('./elliptic/eddsa/index.cjs');

},{"./elliptic/curve/index.cjs":54,"./elliptic/curves.cjs":57,"./elliptic/ec/index.cjs":58,"./elliptic/eddsa/index.cjs":61,"./elliptic/utils.cjs":65}],52:[function(require,module,exports){
'use strict';
var BN = require('../../../../BN/bn.cjs');
var elliptic = require('../../elliptic.cjs');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
    }
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;
        for (var k = j + doubles.step - 1; k >= j; k--)
            nafW = (nafW << 1) + naf[k];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
            var nafW = repr[j];
            if (nafW === i)
                b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i)
                b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var k = 0; i >= 0 && naf[i] === 0; i--)
            k++;
        if (i >= 0)
            k++;
        acc = acc.dblp(k);
        if (i < 0)
            break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0)
                acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
            else
                acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        }
        else {
            // J +- J
            if (z > 0)
                acc = acc.add(wnd[(z - 1) >> 1]);
            else
                acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    for (var i = 0; i < len; i++) {
        var p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a]);
            naf[b] = getNAF(coeffs[b], wndWidth[b]);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            null,
            null,
            points[b] /* 7 */
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        }
        else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            -1,
            -5,
            -7,
            0,
            7,
            5,
            1,
            3 /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (var j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
            var zero = true;
            for (var j = 0; j < len; j++) {
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0)
                    zero = false;
            }
            if (!zero)
                break;
            k++;
            i--;
        }
        if (i >= 0)
            k++;
        acc = acc.dblp(k);
        if (i < 0)
            break;
        for (var j = 0; j < len; j++) {
            var z = tmp[j];
            var p;
            if (z === 0)
                continue;
            else if (z > 0)
                p = wnd[j][(z - 1) >> 1];
            else if (z < 0)
                p = wnd[j][(-z - 1) >> 1].neg();
            if (p.type === 'affine')
                acc = acc.mixedAdd(p);
            else
                acc = acc.add(p);
        }
    }
    // Zeroify references
    for (var i = 0; i < len; i++)
        wnd[i] = null;
    if (jacobianResult)
        return acc;
    else
        return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq( /*other*/) {
    throw new Error('Not implemented');
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
            assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
            assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    }
    else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
        bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact)
        return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
    return [0x04].concat(x, this.getY().toArray('be', len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
        return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
        return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
        return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
            acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
        r = r.dbl();
    return r;
};

},{"../../../../BN/bn.cjs":49,"../../elliptic.cjs":51}],53:[function(require,module,exports){
'use strict';
var curve = require('./index.cjs');
var elliptic = require('../../elliptic.cjs');
var BN = require('../../../../BN/bn.cjs');
var inherits = elliptic.inherits;
var Base = curve.base;
var assert = elliptic.utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
        return num.redNeg();
    else
        return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
        return num;
    else
        return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
        x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red)
        y = y.toRed(this.red);
    // x^2 = (y^2 - 1) / (d y^2 + 1)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.one);
    var rhs = y2.redMul(this.d).redAdd(this.one);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd)
            throw new Error('invalid point');
        else
            return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    if (x.isOdd() !== odd)
        x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
        return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    }
    else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
            this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne)
                this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
        this.y.cmp(this.z) === 0;
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
        // E = a * C
        var e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        }
        else {
            // H = Z1^2
            var h = this.z.redSqr();
            // J = F - 2 * H
            var j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    }
    else {
        // E = C + D
        var e = c.redAdd(d);
        // H = (c * Z1)^2
        var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
        // J = E - 2 * H
        var j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
        return this;
    // Double in extended coordinates
    if (this.curve.extended)
        return this._extDbl();
    else
        return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    }
    else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity())
        return p;
    if (p.isInfinity())
        return this;
    if (this.curve.extended)
        return this._extAdd(p);
    else
        return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
    else
        return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne)
        return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
        this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other ||
        this.getX().cmp(other.getX()) === 0 &&
            this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
        return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
            return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
            return true;
    }
    return false;
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../../../BN/bn.cjs":49,"../../elliptic.cjs":51,"./index.cjs":54}],54:[function(require,module,exports){
'use strict';
var curve = exports;
curve.base = require('./base.cjs');
curve.short = require('./short.cjs');
curve.mont = require('./mont.cjs');
curve.edwards = require('./edwards.cjs');

},{"./base.cjs":52,"./edwards.cjs":53,"./mont.cjs":55,"./short.cjs":56}],55:[function(require,module,exports){
'use strict';
var curve = require('./index.cjs');
var BN = require('../../../../BN/bn.cjs');
var inherits = require('../../elliptic.cjs').inherits;
var Base = curve.base;
var elliptic = require('../../elliptic.cjs');
var utils = elliptic.utils;
function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    }
    else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
    // No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
    for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
            a = a.diffAdd(b, c);
            // N * Q = 2 * ((N / 2) * Q + Q))
            b = b.dbl();
        }
        else {
            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
            b = a.diffAdd(b, c);
            // N * Q + Q = 2 * ((N / 2) * Q + Q)
            a = a.dbl();
        }
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"../../../../BN/bn.cjs":49,"../../elliptic.cjs":51,"./index.cjs":54}],56:[function(require,module,exports){
'use strict';
var curve = require('./index.cjs');
var elliptic = require('../../elliptic.cjs');
var BN = require('../../../../BN/bn.cjs');
var inherits = elliptic.inherits;
var Base = curve.base;
var assert = elliptic.utils.assert;
function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
    }
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
    }
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
        }
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
        basis = conf.basis.map(function (vec) {
            return {
                a: new BN(vec.a, 16),
                b: new BN(vec.b, 16)
            };
        });
    }
    else {
        basis = this._getEndoBasis(lambda);
    }
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [l1, l2];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        }
        else if (a1 && ++i === 2) {
            break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
        x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
        return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();
            if (split.k1.negative) {
                split.k1.ineg();
                p = p.neg(true);
            }
            if (split.k2.negative) {
                split.k2.ineg();
                beta = beta.neg(true);
            }
            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
        }
        return res;
    };
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    }
    else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
        return;
    var pre = this.precomputed;
    if (pre && pre.beta)
        return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function (p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
        return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
        obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
        return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
        return p;
    // P + O = P
    if (p.inf)
        return this;
    // P + P = 2P
    if (this.eq(p))
        return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p))
        return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf)
        return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
    else
        return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
    else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p ||
        this.inf === p.inf &&
            (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
        return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function (p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf)
        return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    }
    else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
        return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
        return p;
    // P + O = P
    if (p.isInfinity())
        return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
        else
            return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
        return p.toJ();
    // P + O = P
    if (p.isInfinity())
        return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
        else
            return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
        return this;
    if (this.isInfinity())
        return this;
    if (!pow)
        return this.dbl();
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (var i = 0; i < pow; i++)
            r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
            jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
        return this;
    if (this.curve.zeroA)
        return this._zeroDbl();
    else if (this.curve.threeA)
        return this._threeDbl();
    else
        return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    }
    else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    }
    else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
        return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
        return this.eq(p.toJ());
    if (this === p)
        return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
        return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
            return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
            return true;
    }
    return false;
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
        return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"../../../../BN/bn.cjs":49,"../../elliptic.cjs":51,"./index.cjs":54}],57:[function(require,module,exports){
'use strict';
var curves = exports;
var elliptic = require('../elliptic.cjs');
var assert = elliptic.utils.assert;
function PresetCurve(options) {
    if (options.type === 'short')
        this.curve = new elliptic.curve.short(options);
    else if (options.type === 'edwards')
        this.curve = new elliptic.curve.edwards(options);
    else
        this.curve = new elliptic.curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function () {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: 'SHA256',
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
    ]
});
defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: 'SHA256',
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
    ]
});
defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: 'SHA256',
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
    ]
});
defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
        '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
        'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: 'SHA384',
    gRed: false,
    g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
            '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
            '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
    ]
});
defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
        '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
        '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
        'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: 'SHA512',
    gRed: false,
    g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
            '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
            'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
            '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
            '3fad0761 353c7086 a272c240 88be9476 9fd16650'
    ]
});
defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: 'SHA256',
    gRed: false,
    g: [
        '9'
    ]
});
defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: 'SHA256',
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658'
    ]
});
var pre;
try {
    pre = require('./precomputed/secp256k1.cjs');
}
catch (e) {
    pre = undefined;
}
defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: 'SHA256',
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre
    ]
});

},{"../elliptic.cjs":51,"./precomputed/secp256k1.cjs":64}],58:[function(require,module,exports){
'use strict';
var BN = require('../../../../BN/bn.cjs');
var HmacDRBG = require('../../hmac-drbg/hmac-drbg.cjs');
var elliptic = require('../../elliptic.cjs');
var utils = elliptic.utils;
var assert = utils.assert;
var KeyPair = require('./key.cjs');
var Signature = require('./signature.cjs');
function EC(options) {
    if (!(this instanceof EC))
        return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);
        options = elliptic.curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof elliptic.curves.PresetCurve)
        options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
        options = {};
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || null,
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    do {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
            continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    } while (true);
};
EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
        msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
    else
        return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options)
        options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: options['extraEntropy'] ? bkey.concat(options['extraEntropy']) : bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; true; iter++) {
        var k = options.k ?
            options.k(iter) :
            new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
            continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
            continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
            continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
            continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
            (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
            return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    var p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
        return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
        r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null)
        return signature.recoveryParam;
    for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        }
        catch (e) {
            continue;
        }
        if (Qprime.eq(Q))
            return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

},{"../../../../BN/bn.cjs":49,"../../elliptic.cjs":51,"../../hmac-drbg/hmac-drbg.cjs":66,"./key.cjs":59,"./signature.cjs":60}],59:[function(require,module,exports){
'use strict';
var BN = require('../../../../BN/bn.cjs');
var elliptic = require('../../elliptic.cjs');
var utils = elliptic.utils;
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
        return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
        return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };
    return { result: true, reason: null };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
    if (!enc)
        return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
        return this.priv.toString(16, 2);
    else
        return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
            assert(key.x, 'Need x coordinate');
        }
        else if (this.ec.curve.type === 'short' ||
            this.ec.curve.type === 'edwards') {
            assert(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
        ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../../../BN/bn.cjs":49,"../../elliptic.cjs":51}],60:[function(require,module,exports){
'use strict';
var BN = require('../../../../BN/bn.cjs');
var elliptic = require('../../elliptic.cjs');
var utils = elliptic.utils;
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature)
        return options;
    //if (this._importDER(options, enc))
    //  return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined)
        this.recoveryParam = null;
    else
        this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

},{"../../../../BN/bn.cjs":49,"../../elliptic.cjs":51}],61:[function(require,module,exports){
'use strict';
var curves = require('../curves.cjs');
var utils = require('../utils.cjs');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key.cjs');
var Signature = require('./signature.cjs');
const BN = require('../../../../BN/bn.cjs');
const CryptoJS = require('../../../../crypto-js/crypto-js.cjs');
function byteArrayToWordArray(ba) {
    const wa = [];
    for (let i = 0; i < ba.length; i++) {
        wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);
    }
    return CryptoJS.lib.WordArray.create(wa, ba.length);
}
function EDDSA(curveName) {
    assert(curveName === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA))
        return new EDDSA(curveName);
    var curve = curves[curveName].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.byteArrayToWordArray = byteArrayToWordArray;
    //this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.secret(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message);
    s_ = s_.mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};
/**
 * @param {Array|String} message - message bytes
 * @param {Array|String|KeyPair} secret - secret bytes or a keypair
 * @returns {Signature} - signature
 */
EDDSA.prototype.signModified = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    // convert between curve25519 and ed25519 keys
    const secretLE = new BN(key.secret(), 16, 'le');
    const pubKey = this.encodePoint(this.g.mul(secretLE));
    const signBit = pubKey[31] & 0x80;
    var r = this.hashInt(key.secret(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    let s_ = this.hashInt(Rencoded, pubKey, message);
    s_ = s_.mul(secretLE);
    var S = r.add(s_).umod(this.curve.n);
    var Sencoded = S.toArray('le', 32);
    Sencoded[31] |= signBit;
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded, Sencoded: Sencoded });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    let toHash = Array.from(arguments).reduce((a, b) => a.concat(b));
    toHash = byteArrayToWordArray(toHash);
    const digest = CryptoJS['SHA512'](toHash).toString(CryptoJS.enc.Hex);
    return utils.intFromLE(digest).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
        return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"../../../../BN/bn.cjs":49,"../../../../crypto-js/crypto-js.cjs":50,"../curves.cjs":57,"../utils.cjs":65,"./key.cjs":62,"./signature.cjs":63}],62:[function(require,module,exports){
'use strict';
var utils = require('../utils.cjs');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
    else
        this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair)
        return pub;
    return new KeyPair(eddsa, { pub: pub });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair)
        return secret;
    return new KeyPair(eddsa, { secret: secret });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.signModified = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.signModified(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"../utils.cjs":65}],63:[function(require,module,exports){
'use strict';
var BN = require('../../../../BN/bn.cjs');
var utils = require('../utils.cjs');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object')
        sig = parseBytes(sig);
    if (Array.isArray(sig)) {
        sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength)
        };
    }
    assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R))
        this._R = sig.R;
    if (sig.S instanceof BN)
        this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = Signature;

},{"../../../../BN/bn.cjs":49,"../utils.cjs":65}],64:[function(require,module,exports){
"use strict";
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
            ]
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
            ]
        ]
    }
};

},{}],65:[function(require,module,exports){
'use strict';
var utils = exports;
var BN = require('../../../BN/bn.cjs');
utils.assert = function (condition, errorMessage) {
    if (!condition) {
        throw new Error(errorMessage);
    }
};
// Represent num in a w-NAF form
function getNAF(num, w) {
    var naf = [];
    var ws = 1 << (w + 1);
    var k = num.clone();
    while (k.cmpn(1) >= 0) {
        var z;
        if (k.isOdd()) {
            var mod = k.andln(ws - 1);
            if (mod > (ws >> 1) - 1)
                z = (ws >> 1) - mod;
            else
                z = mod;
            k.isubn(z);
        }
        else {
            z = 0;
        }
        naf.push(z);
        // Optimization, shift by word if possible
        var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
        for (var i = 1; i < shift; i++)
            naf.push(0);
        k.iushrn(shift);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        []
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
            m14 = -1;
        if (m24 === 3)
            m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
            u1 = 0;
        }
        else {
            var m8 = (k1.andln(7) + d1) & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
                u1 = -m14;
            else
                u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
            u2 = 0;
        }
        else {
            var m8 = (k2.andln(7) + d2) & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
                u2 = -m24;
            else
                u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
            this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;
// used to convert `CryptoJS` wordArrays into `crypto` hex buffers
function wordToByteArray(word, length) {
    var ba = [], xFF = 0xFF;
    if (length > 0)
        ba.push(word >>> 24);
    if (length > 1)
        ba.push((word >>> 16) & xFF);
    if (length > 2)
        ba.push((word >>> 8) & xFF);
    if (length > 3)
        ba.push(word & xFF);
    return ba;
}
function wordArrayToBuffer(wordArray) {
    let length = undefined;
    if (wordArray.hasOwnProperty("sigBytes") && wordArray.hasOwnProperty("words")) {
        length = wordArray.sigBytes;
        wordArray = wordArray.words;
    }
    else {
        throw Error('Argument not a wordArray');
    }
    const result = [];
    let bytes = [];
    let i = 0;
    while (length > 0) {
        bytes = wordToByteArray(wordArray[i], Math.min(4, length));
        length -= bytes.length;
        result.push(bytes);
        i++;
    }
    return [].concat.apply([], result);
}
utils.wordArrayToBuffer = wordArrayToBuffer;
// https://github.com/indutny/minimalistic-crypto-utils/blob/master/lib/utils.js
// moved here to remove the dep
function toArray(msg, enc) {
    if (Array.isArray(msg))
        return msg.slice();
    if (!msg)
        return [];
    var res = [];
    if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
            msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
    else {
        for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 0xff;
            if (hi)
                res.push(hi, lo);
            else
                res.push(lo);
        }
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1)
        return '0' + word;
    else
        return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
        return toHex(arr);
    else
        return arr;
};

},{"../../../BN/bn.cjs":49}],66:[function(require,module,exports){
'use strict';
var CryptoJS = require('../../../crypto-js/crypto-js.cjs');
var assert = require('../elliptic/utils.cjs').assert;
var utils = require('../elliptic/utils.cjs');
// some static stuff
const ONE = CryptoJS.enc.Utf8.parse('\x01');
const ZERO = CryptoJS.enc.Utf8.parse('\x00');
function byteArrayToWordArray(ba) {
    const wa = [];
    for (let i = 0; i < ba.length; i++) {
        wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);
    }
    return CryptoJS.lib.WordArray.create(wa, ba.length);
}
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.slice(3, 6); // only support SHAXXX hashes
    this.minEntropy = options.minEntropy || 192;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    this.byteArrayToWordArray = byteArrayToWordArray;
    var entropy = options.entropy;
    var nonce = options.nonce;
    var pers = [];
    assert(entropy.length >= (this.minEntropy / 8), 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = async function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new CryptoJS.lib.WordArray.init();
    this.V = new CryptoJS.lib.WordArray.init();
    const magicNumber = (1 << 24) + (1 << 16) + (1 << 8) + 1;
    this.V.words = Array(this.outLen / 32).fill(magicNumber);
    this.V.sigBytes = 32;
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new CryptoJS.lib.WordArray.init();
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac();
    kmac.concat(this.V);
    kmac.concat(ZERO);
    if (seed)
        kmac.concat(this.byteArrayToWordArray(seed));
    this.K = CryptoJS['Hmac' + this.hash](kmac, this.K);
    this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);
    if (!seed)
        return;
    kmac = this._hmac();
    kmac.concat(this.V);
    kmac.concat(ONE);
    kmac.concat(this.byteArrayToWordArray(seed));
    this.K = CryptoJS['Hmac' + this.hash](kmac, this.K);
    this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    //entropy = utils.toArray(entropy, entropyEnc);
    //add = utils.toArray(add, addEnc);
    assert(entropy.length >= (this.minEntropy / 8), 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = CryptoJS.enc.Utf8.parse(add);
        this._update(add);
    }
    var res = new CryptoJS.lib.WordArray.init();
    while (res.sigBytes < len) {
        this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);
        res.concat(this.V);
    }
    this._update(add);
    this._reseed++;
    return utils.wordArrayToBuffer(res);
};

},{"../../../crypto-js/crypto-js.cjs":50,"../elliptic/utils.cjs":65}],67:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
/*!
 * RSA library for Node.js
 *
 * Author: rzcoder
 * License MIT
 */
var rsa = require('./libs/rsa.cjs');
var _ = require('./utils.cjs')._;
var schemes = require('./schemes/schemes.cjs');
var formats = require('./formats/formats.cjs');
module.exports = (function () {
    var SUPPORTED_HASH_ALGORITHMS = {
        browser: ['md5', 'ripemd160', 'sha1', 'sha256', 'sha512']
    };
    var DEFAULT_ENCRYPTION_SCHEME = 'pkcs1';
    var DEFAULT_SIGNING_SCHEME = 'pkcs1';
    var EXPORT_FORMAT_ALIASES = {
        'private': 'pkcs1-private-pem',
        'private-der': 'pkcs1-private-der',
        'public': 'pkcs8-public-pem',
        'public-der': 'pkcs8-public-der',
    };
    /**
     * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}
     * @constructor
     */
    function NodeRSA(key, format, options = undefined) {
        if (!(this instanceof NodeRSA)) {
            return new NodeRSA(key, format, options);
        }
        if (_.isObject(format)) {
            options = format;
            format = undefined;
        }
        this.$options = {
            signingScheme: DEFAULT_SIGNING_SCHEME,
            signingSchemeOptions: {
                hash: 'sha256',
                saltLength: null
            },
            encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,
            encryptionSchemeOptions: {
                hash: 'sha1',
                label: null
            },
            environment: 'browser',
            rsaUtils: this
        };
        this.keyPair = new rsa.Key();
        this.$cache = {};
        if (Buffer.isBuffer(key) || _.isString(key)) {
            this.importKey(key, format);
        }
        else if (_.isObject(key)) {
            this.generateKeyPair(key.b, key.e);
        }
        this.setOptions(options);
    }
    /**
     * Set and validate options for key instance
     * @param options
     */
    NodeRSA.prototype.setOptions = function (options) {
        options = options || {};
        if (options.environment) {
            this.$options.environment = options.environment;
        }
        if (options.signingScheme) {
            if (_.isString(options.signingScheme)) {
                var signingScheme = options.signingScheme.toLowerCase().split('-');
                if (signingScheme.length == 1) {
                    if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {
                        this.$options.signingSchemeOptions = {
                            hash: signingScheme[0]
                        };
                        this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;
                    }
                    else {
                        this.$options.signingScheme = signingScheme[0];
                        this.$options.signingSchemeOptions = {
                            hash: null
                        };
                    }
                }
                else {
                    this.$options.signingSchemeOptions = {
                        hash: signingScheme[1]
                    };
                    this.$options.signingScheme = signingScheme[0];
                }
            }
            else if (_.isObject(options.signingScheme)) {
                this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;
                this.$options.signingSchemeOptions = _.omit(options.signingScheme, 'scheme');
            }
            if (!schemes.isSignature(this.$options.signingScheme)) {
                throw Error('Unsupported signing scheme');
            }
            if (this.$options.signingSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }
        if (options.encryptionScheme) {
            if (_.isString(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();
                this.$options.encryptionSchemeOptions = {};
            }
            else if (_.isObject(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;
                this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, 'scheme');
            }
            if (!schemes.isEncryption(this.$options.encryptionScheme)) {
                throw Error('Unsupported encryption scheme');
            }
            if (this.$options.encryptionSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }
        this.keyPair.setOptions(this.$options);
    };
    /**
     * Importing key
     * @param keyData {string|buffer|Object}
     * @param format {string}
     */
    NodeRSA.prototype.importKey = function (keyData, format) {
        if (!keyData) {
            throw Error("Empty key given");
        }
        if (format) {
            format = EXPORT_FORMAT_ALIASES[format] || format;
        }
        if (!formats.detectAndImport(this.keyPair, keyData, format) && format === undefined) {
            throw Error("Key format must be specified");
        }
        this.$cache = {};
        return this;
    };
    /**
     * Check if key pair contains private key
     */
    NodeRSA.prototype.isPrivate = function () {
        return this.keyPair.isPrivate();
    };
    /**
     * Check if key pair contains public key
     * @param [strict] {boolean} - public key only, return false if have private exponent
     */
    NodeRSA.prototype.isPublic = function (strict) {
        return this.keyPair.isPublic(strict);
    };
    /**
     * Check if key pair doesn't contains any data
     */
    NodeRSA.prototype.isEmpty = function (strict) {
        return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);
    };
    /**
     *  Signing data
     *
     * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {string|Buffer}
     */
    NodeRSA.prototype.sign = function (buffer, encoding, source_encoding) {
        if (!this.isPrivate()) {
            throw Error("This is not private key");
        }
        var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));
        if (encoding && encoding != 'buffer') {
            res = res.toString(encoding);
        }
        return res;
    };
    /**
     * Preparing given data for encrypting/signing. Just make new/return Buffer object.
     *
     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {Buffer}
     */
    NodeRSA.prototype.$getDataForEncrypt = function (buffer, encoding) {
        if (_.isString(buffer) || _.isNumber(buffer)) {
            return Buffer.from('' + buffer, encoding || 'utf8');
        }
        else if (Buffer.isBuffer(buffer)) {
            return buffer;
        }
        else if (_.isObject(buffer)) {
            return Buffer.from(JSON.stringify(buffer));
        }
        else {
            throw Error("Unexpected data type");
        }
    };
    return NodeRSA;
})();

}).call(this)}).call(this,require("buffer").Buffer)
},{"./formats/formats.cjs":74,"./libs/rsa.cjs":78,"./schemes/schemes.cjs":80,"./utils.cjs":81,"buffer":98}],68:[function(require,module,exports){
"use strict";
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
module.exports = {
    newInvalidAsn1Error: function (msg) {
        var e = new Error();
        e.name = 'InvalidAsn1Error';
        e.message = msg || '';
        return e;
    }
};

},{}],69:[function(require,module,exports){
"use strict";
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
var errors = require('./errors.cjs');
var types = require('./types.cjs');
var Reader = require('./reader.cjs');
// --- Exports
module.exports = {
    Reader: Reader,
};
for (var t in types) {
    if (types.hasOwnProperty(t))
        module.exports[t] = types[t];
}
for (var e in errors) {
    if (errors.hasOwnProperty(e))
        module.exports[e] = errors[e];
}

},{"./errors.cjs":68,"./reader.cjs":70,"./types.cjs":71}],70:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
var assert = require('assert');
// var Buffer = require('safer-buffer').Buffer;
var ASN1 = require('./types.cjs');
var errors = require('./errors.cjs');
// --- Globals
var newInvalidAsn1Error = errors.newInvalidAsn1Error;
// --- API
function Reader(data) {
    if (!data || !Buffer.isBuffer(data))
        throw new TypeError('data must be a node Buffer');
    this._buf = data;
    this._size = data.length;
    // These hold the "current" state
    this._len = 0;
    this._offset = 0;
}
Object.defineProperty(Reader.prototype, 'length', {
    enumerable: true,
    get: function () { return (this._len); }
});
Object.defineProperty(Reader.prototype, 'offset', {
    enumerable: true,
    get: function () { return (this._offset); }
});
Object.defineProperty(Reader.prototype, 'remain', {
    get: function () { return (this._size - this._offset); }
});
Object.defineProperty(Reader.prototype, 'buffer', {
    get: function () { return (this._buf.slice(this._offset)); }
});
/**
 * Reads a single byte and advances offset; you can pass in `true` to make this
 * a "peek" operation (i.e., get the byte, but don't advance the offset).
 *
 * @param {Boolean} peek true means don't move offset.
 * @return {Number} the next byte, null if not enough data.
 */
Reader.prototype.readByte = function (peek) {
    if (this._size - this._offset < 1)
        return null;
    var b = this._buf[this._offset] & 0xff;
    if (!peek)
        this._offset += 1;
    return b;
};
Reader.prototype.peek = function () {
    return this.readByte(true);
};
/**
 * Reads a (potentially) variable length off the BER buffer.  This call is
 * not really meant to be called directly, as callers have to manipulate
 * the internal buffer afterwards.
 *
 * As a result of this call, you can call `Reader.length`, until the
 * next thing called that does a readLength.
 *
 * @return {Number} the amount of offset to advance the buffer.
 * @throws {InvalidAsn1Error} on bad ASN.1
 */
Reader.prototype.readLength = function (offset) {
    if (offset === undefined)
        offset = this._offset;
    if (offset >= this._size)
        return null;
    var lenB = this._buf[offset++] & 0xff;
    if (lenB === null)
        return null;
    if ((lenB & 0x80) === 0x80) {
        lenB &= 0x7f;
        if (lenB === 0)
            throw newInvalidAsn1Error('Indefinite length not supported');
        if (lenB > 4)
            throw newInvalidAsn1Error('encoding too long');
        if (this._size - offset < lenB)
            return null;
        this._len = 0;
        for (var i = 0; i < lenB; i++)
            this._len = (this._len << 8) + (this._buf[offset++] & 0xff);
    }
    else {
        // Wasn't a variable length
        this._len = lenB;
    }
    return offset;
};
/**
 * Parses the next sequence in this BER buffer.
 *
 * To get the length of the sequence, call `Reader.length`.
 *
 * @return {Number} the sequence's tag.
 */
Reader.prototype.readSequence = function (tag) {
    var seq = this.peek();
    if (seq === null)
        return null;
    if (tag !== undefined && tag !== seq)
        throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
            ': got 0x' + seq.toString(16));
    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
        return null;
    this._offset = o;
    return seq;
};
Reader.prototype.readInt = function () {
    return this._readTag(ASN1.Integer);
};
Reader.prototype.readBoolean = function () {
    return (this._readTag(ASN1.Boolean) === 0 ? false : true);
};
Reader.prototype.readEnumeration = function () {
    return this._readTag(ASN1.Enumeration);
};
Reader.prototype.readString = function (tag, retbuf) {
    if (!tag)
        tag = ASN1.OctetString;
    var b = this.peek();
    if (b === null)
        return null;
    if (b !== tag)
        throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
            ': got 0x' + b.toString(16));
    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
        return null;
    if (this.length > this._size - o)
        return null;
    this._offset = o;
    if (this.length === 0)
        return retbuf ? Buffer.alloc(0) : '';
    var str = this._buf.slice(this._offset, this._offset + this.length);
    this._offset += this.length;
    return retbuf ? str : str.toString('utf8');
};
Reader.prototype.readOID = function (tag) {
    if (!tag)
        tag = ASN1.OID;
    var b = this.readString(tag, true);
    if (b === null)
        return null;
    var values = [];
    var value = 0;
    for (var i = 0; i < b.length; i++) {
        var byte = b[i] & 0xff;
        value <<= 7;
        value += byte & 0x7f;
        if ((byte & 0x80) === 0) {
            values.push(value);
            value = 0;
        }
    }
    value = values.shift();
    values.unshift(value % 40);
    values.unshift((value / 40) >> 0);
    return values.join('.');
};
Reader.prototype._readTag = function (tag) {
    assert.ok(tag !== undefined);
    var b = this.peek();
    if (b === null)
        return null;
    if (b !== tag)
        throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
            ': got 0x' + b.toString(16));
    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
        return null;
    if (this.length > 4)
        throw newInvalidAsn1Error('Integer too long: ' + this.length);
    if (this.length > this._size - o)
        return null;
    this._offset = o;
    var fb = this._buf[this._offset];
    var value = 0;
    for (var i = 0; i < this.length; i++) {
        value <<= 8;
        value |= (this._buf[this._offset++] & 0xff);
    }
    if ((fb & 0x80) === 0x80 && i !== 4)
        value -= (1 << (i * 8));
    return value >> 0;
};
// --- Exported API
module.exports = Reader;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./errors.cjs":68,"./types.cjs":71,"assert":94,"buffer":98}],71:[function(require,module,exports){
"use strict";
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
module.exports = {
    EOC: 0,
    Boolean: 1,
    Integer: 2,
    BitString: 3,
    OctetString: 4,
    Null: 5,
    OID: 6,
    ObjectDescriptor: 7,
    External: 8,
    Real: 9,
    Enumeration: 10,
    PDV: 11,
    Utf8String: 12,
    RelativeOID: 13,
    Sequence: 16,
    Set: 17,
    NumericString: 18,
    PrintableString: 19,
    T61String: 20,
    VideotexString: 21,
    IA5String: 22,
    UTCTime: 23,
    GeneralizedTime: 24,
    GraphicString: 25,
    VisibleString: 26,
    GeneralString: 28,
    UniversalString: 29,
    CharacterString: 30,
    BMPString: 31,
    Constructor: 32,
    Context: 128
};

},{}],72:[function(require,module,exports){
"use strict";
// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
// If you have no idea what ASN.1 or BER is, see this:
// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc
var Ber = require('./ber/index.cjs');
// --- Exported API
module.exports = {
    Ber: Ber,
    BerReader: Ber.Reader,
};

},{"./ber/index.cjs":69}],73:[function(require,module,exports){
"use strict";

var _ = require('../utils.cjs')._;
var utils = require('../utils.cjs');
module.exports = {
  privateExport: function (key, options) {
    return {
      n: key.n.toBuffer(),
      e: key.e,
      d: key.d.toBuffer(),
      p: key.p.toBuffer(),
      q: key.q.toBuffer(),
      dmp1: key.dmp1.toBuffer(),
      dmq1: key.dmq1.toBuffer(),
      coeff: key.coeff.toBuffer()
    };
  },
  privateImport: function (key, data, options) {
    if (data.n && data.e && data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
      key.setPrivate(data.n, data.e, data.d, data.p, data.q, data.dmp1, data.dmq1, data.coeff);
    } else {
      throw Error("Invalid key data");
    }
  },
  publicExport: function (key, options) {
    return {
      n: key.n.toBuffer(),
      e: key.e
    };
  },
  publicImport: function (key, data, options) {
    if (data.n && data.e) {
      key.setPublic(data.n, data.e);
    } else {
      throw Error("Invalid key data");
    }
  },
  /**
   * Trying autodetect and import key
   * @param key
   * @param data
   */
  autoImport: function (key, data) {
    if (data.n && data.e) {
      if (data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
        module.exports.privateImport(key, data);
        return true;
      } else {
        module.exports.publicImport(key, data);
        return true;
      }
    }
    return false;
  }
};

},{"../utils.cjs":81}],74:[function(require,module,exports){
"use strict";
var _ = require('../utils.cjs')._;
module.exports = {
    pkcs1: require('./pkcs1.cjs'),
    pkcs8: require('./pkcs8.cjs'),
    components: require('./components.cjs'),
    detectAndImport: function (key, data, format) {
        if (format === undefined) {
            for (var scheme in module.exports) {
                if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {
                    return true;
                }
            }
        }
        else if (format) {
            var fmt = formatParse(format);
            if (module.exports[fmt.scheme]) {
                if (fmt.keyType === 'private') {
                    module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);
                }
                else {
                    module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);
                }
            }
            else {
                throw Error('Unsupported key format');
            }
        }
        return false;
    },
};

},{"../utils.cjs":81,"./components.cjs":73,"./pkcs1.cjs":75,"./pkcs8.cjs":76}],75:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

var ber = require('../asn1/index.cjs').Ber;
var _ = require('../utils.cjs')._;
var utils = require('../utils.cjs');
const PRIVATE_OPENING_BOUNDARY = '-----BEGIN RSA PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END RSA PRIVATE KEY-----';
const PUBLIC_OPENING_BOUNDARY = '-----BEGIN RSA PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END RSA PUBLIC KEY-----';
module.exports = {
  privateExport: function (key, options) {
    options = options || {};
    var n = key.n.toBuffer();
    var d = key.d.toBuffer();
    var p = key.p.toBuffer();
    var q = key.q.toBuffer();
    var dmp1 = key.dmp1.toBuffer();
    var dmq1 = key.dmq1.toBuffer();
    var coeff = key.coeff.toBuffer();
    var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
    var writer = new ber.Writer({
      size: length
    });
    writer.startSequence();
    writer.writeInt(0);
    writer.writeBuffer(n, 2);
    writer.writeInt(key.e);
    writer.writeBuffer(d, 2);
    writer.writeBuffer(p, 2);
    writer.writeBuffer(q, 2);
    writer.writeBuffer(dmp1, 2);
    writer.writeBuffer(dmq1, 2);
    writer.writeBuffer(coeff, 2);
    writer.endSequence();
    if (options.type === 'der') {
      return writer.buffer;
    } else {
      return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
    }
  },
  privateImport: function (key, data, options) {
    options = options || {};
    var buffer;
    if (options.type !== 'der') {
      if (Buffer.isBuffer(data)) {
        data = data.toString('utf8');
      }
      if (_.isString(data)) {
        var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY).replace(/\s+|\n\r|\n|\r$/gm, '');
        buffer = Buffer.from(pem, 'base64');
      } else {
        throw Error('Unsupported key format');
      }
    } else if (Buffer.isBuffer(data)) {
      buffer = data;
    } else {
      throw Error('Unsupported key format');
    }
    var reader = new ber.Reader(buffer);
    reader.readSequence();
    reader.readString(2, true); // just zero
    key.setPrivate(reader.readString(2, true),
    // modulus
    reader.readString(2, true),
    // publicExponent
    reader.readString(2, true),
    // privateExponent
    reader.readString(2, true),
    // prime1
    reader.readString(2, true),
    // prime2
    reader.readString(2, true),
    // exponent1 -- d mod (p1)
    reader.readString(2, true),
    // exponent2 -- d mod (q-1)
    reader.readString(2, true) // coefficient -- (inverse of q) mod p
    );
  },

  publicExport: function (key, options) {
    options = options || {};
    var n = key.n.toBuffer();
    var length = n.length + 512; // magic
    var bodyWriter = new ber.Writer({
      size: length
    });
    bodyWriter.startSequence();
    bodyWriter.writeBuffer(n, 2);
    bodyWriter.writeInt(key.e);
    bodyWriter.endSequence();
    if (options.type === 'der') {
      return bodyWriter.buffer;
    } else {
      return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(bodyWriter.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
    }
  },
  publicImport: function (key, data, options) {
    options = options || {};
    var buffer;
    if (options.type !== 'der') {
      if (Buffer.isBuffer(data)) {
        data = data.toString('utf8');
      }
      if (_.isString(data)) {
        var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY).replace(/\s+|\n\r|\n|\r$/gm, '');
        buffer = Buffer.from(pem, 'base64');
      }
    } else if (Buffer.isBuffer(data)) {
      buffer = data;
    } else {
      throw Error('Unsupported key format');
    }
    var body = new ber.Reader(buffer);
    body.readSequence();
    key.setPublic(body.readString(0x02, true),
    // modulus
    body.readString(0x02, true) // publicExponent
    );
  },

  /**
   * Trying autodetect and import key
   * @param key
   * @param data
   */
  autoImport: function (key, data) {
    // [\S\s]* matches zero or more of any character
    if (/^[\S\s]*-----BEGIN RSA PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PRIVATE KEY-----[\S\s]*$/g.test(data)) {
      module.exports.privateImport(key, data);
      return true;
    }
    if (/^[\S\s]*-----BEGIN RSA PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PUBLIC KEY-----[\S\s]*$/g.test(data)) {
      module.exports.publicImport(key, data);
      return true;
    }
    return false;
  }
};

}).call(this)}).call(this,require("buffer").Buffer)
},{"../asn1/index.cjs":72,"../utils.cjs":81,"buffer":98}],76:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

var ber = require('../asn1/index.cjs').Ber;
var _ = require('../utils.cjs')._;
var PUBLIC_RSA_OID = '1.2.840.113549.1.1.1';
var utils = require('../utils.cjs');
const PRIVATE_OPENING_BOUNDARY = '-----BEGIN PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END PRIVATE KEY-----';
const PUBLIC_OPENING_BOUNDARY = '-----BEGIN PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END PUBLIC KEY-----';
module.exports = {
  privateExport: function (key, options) {
    options = options || {};
    var n = key.n.toBuffer();
    var d = key.d.toBuffer();
    var p = key.p.toBuffer();
    var q = key.q.toBuffer();
    var dmp1 = key.dmp1.toBuffer();
    var dmq1 = key.dmq1.toBuffer();
    var coeff = key.coeff.toBuffer();
    var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
    var bodyWriter = new ber.Writer({
      size: length
    });
    bodyWriter.startSequence();
    bodyWriter.writeInt(0);
    bodyWriter.writeBuffer(n, 2);
    bodyWriter.writeInt(key.e);
    bodyWriter.writeBuffer(d, 2);
    bodyWriter.writeBuffer(p, 2);
    bodyWriter.writeBuffer(q, 2);
    bodyWriter.writeBuffer(dmp1, 2);
    bodyWriter.writeBuffer(dmq1, 2);
    bodyWriter.writeBuffer(coeff, 2);
    bodyWriter.endSequence();
    var writer = new ber.Writer({
      size: length
    });
    writer.startSequence();
    writer.writeInt(0);
    writer.startSequence();
    writer.writeOID(PUBLIC_RSA_OID);
    writer.writeNull();
    writer.endSequence();
    writer.writeBuffer(bodyWriter.buffer, 4);
    writer.endSequence();
    if (options.type === 'der') {
      return writer.buffer;
    } else {
      return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
    }
  },
  privateImport: function (key, data, options) {
    options = options || {};
    var buffer;
    if (options.type !== 'der') {
      if (Buffer.isBuffer(data)) {
        data = data.toString('utf8');
      }
      if (_.isString(data)) {
        var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY).replace('-----END PRIVATE KEY-----', '').replace(/\s+|\n\r|\n|\r$/gm, '');
        buffer = Buffer.from(pem, 'base64');
      } else {
        throw Error('Unsupported key format');
      }
    } else if (Buffer.isBuffer(data)) {
      buffer = data;
    } else {
      throw Error('Unsupported key format');
    }
    var reader = new ber.Reader(buffer);
    reader.readSequence();
    reader.readInt(0);
    var header = new ber.Reader(reader.readString(0x30, true));
    if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
      throw Error('Invalid Public key format');
    }
    var body = new ber.Reader(reader.readString(0x04, true));
    body.readSequence();
    body.readString(2, true); // just zero
    key.setPrivate(body.readString(2, true),
    // modulus
    body.readString(2, true),
    // publicExponent
    body.readString(2, true),
    // privateExponent
    body.readString(2, true),
    // prime1
    body.readString(2, true),
    // prime2
    body.readString(2, true),
    // exponent1 -- d mod (p1)
    body.readString(2, true),
    // exponent2 -- d mod (q-1)
    body.readString(2, true) // coefficient -- (inverse of q) mod p
    );
  },

  publicExport: function (key, options) {
    options = options || {};
    var n = key.n.toBuffer();
    var length = n.length + 512; // magic
    var bodyWriter = new ber.Writer({
      size: length
    });
    bodyWriter.writeByte(0);
    bodyWriter.startSequence();
    bodyWriter.writeBuffer(n, 2);
    bodyWriter.writeInt(key.e);
    bodyWriter.endSequence();
    var writer = new ber.Writer({
      size: length
    });
    writer.startSequence();
    writer.startSequence();
    writer.writeOID(PUBLIC_RSA_OID);
    writer.writeNull();
    writer.endSequence();
    writer.writeBuffer(bodyWriter.buffer, 3);
    writer.endSequence();
    if (options.type === 'der') {
      return writer.buffer;
    } else {
      return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
    }
  },
  publicImport: function (key, data, options) {
    options = options || {};
    var buffer;
    if (options.type !== 'der') {
      if (Buffer.isBuffer(data)) {
        data = data.toString('utf8');
      }
      if (_.isString(data)) {
        var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY).replace(/\s+|\n\r|\n|\r$/gm, '');
        buffer = Buffer.from(pem, 'base64');
      }
    } else if (Buffer.isBuffer(data)) {
      buffer = data;
    } else {
      throw Error('Unsupported key format');
    }
    var reader = new ber.Reader(buffer);
    reader.readSequence();
    var header = new ber.Reader(reader.readString(0x30, true));
    if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
      throw Error('Invalid Public key format');
    }
    var body = new ber.Reader(reader.readString(0x03, true));
    body.readByte();
    body.readSequence();
    key.setPublic(body.readString(0x02, true),
    // modulus
    body.readString(0x02, true) // publicExponent
    );
  },

  /**
   * Trying autodetect and import key
   * @param key
   * @param data
   */
  autoImport: function (key, data) {
    if (/^[\S\s]*-----BEGIN PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PRIVATE KEY-----[\S\s]*$/g.test(data)) {
      module.exports.privateImport(key, data);
      return true;
    }
    if (/^[\S\s]*-----BEGIN PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PUBLIC KEY-----[\S\s]*$/g.test(data)) {
      module.exports.publicImport(key, data);
      return true;
    }
    return false;
  }
};

}).call(this)}).call(this,require("buffer").Buffer)
},{"../asn1/index.cjs":72,"../utils.cjs":81,"buffer":98}],77:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
/*
 * Basic JavaScript BN library - subset useful for RSA encryption.
 *
 * Copyright (c) 2003-2005  Tom Wu
 * ~BSD license~
 *
 * Added Node.js Buffers support
 * 2014 rzcoder
 *
 * Deleted some stuff to save bytes
 * frosty00
 */
var _ = require('../utils.cjs')._;
// Bits per digit
var dbits;
// (public) Constructor
function BigInteger(a, b) {
    if (a != null) {
        if ("number" == typeof a) {
            this.fromNumber(a, b);
        }
        else if (Buffer.isBuffer(a)) {
            this.fromBuffer(a);
        }
        else if (b == null && "string" != typeof a) {
            this.fromByteArray(a);
        }
        else {
            this.fromString(a, b);
        }
    }
}
// return new, unset BigInteger
function nbi() {
    return new BigInteger(null);
}
// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff, xh = x >> 14;
    while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
    }
    return c;
}
// We need to select the fastest one that works in this environment.
//if (j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
//	BigInteger.prototype.am = am2;
//	dbits = 30;
//} else if (j_lm && (navigator.appName != "Netscape")) {
//	BigInteger.prototype.am = am1;
//	dbits = 26;
//} else { // Mozilla/Netscape seems to prefer am3
//	BigInteger.prototype.am = am3;
//	dbits = 28;
//}
// For node.js, we pick am3 with max dbits to 28.
BigInteger.prototype.am = am3;
dbits = 28;
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1 << dbits) - 1);
BigInteger.prototype.DV = (1 << dbits);
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv)
    BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
    BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
    BI_RC[rr++] = vv;
function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c == null) ? -1 : c;
}
// (protected) copy this to r
function bnpCopyTo(r) {
    for (var i = this.t - 1; i >= 0; --i)
        r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
}
// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = (x < 0) ? -1 : 0;
    if (x > 0)
        this[0] = x;
    else if (x < -1)
        this[0] = x + DV;
    else
        this.t = 0;
}
// return bigint initialized to value
function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
}
// (protected) set from string and radix
function bnpFromString(data, radix, unsigned) {
    var k;
    switch (radix) {
        case 2:
            k = 1;
            break;
        case 4:
            k = 2;
            break;
        case 8:
            k = 3;
            break;
        case 16:
            k = 4;
            break;
        case 32:
            k = 5;
            break;
        case 256:
            k = 8;
            break;
        default:
            this.fromRadix(data, radix);
            return;
    }
    this.t = 0;
    this.s = 0;
    var i = data.length;
    var mi = false;
    var sh = 0;
    while (--i >= 0) {
        var x = (k == 8) ? data[i] & 0xff : intAt(data, i);
        if (x < 0) {
            if (data.charAt(i) == "-")
                mi = true;
            continue;
        }
        mi = false;
        if (sh === 0)
            this[this.t++] = x;
        else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
            this[this.t++] = (x >> (this.DB - sh));
        }
        else
            this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB)
            sh -= this.DB;
    }
    if ((!unsigned) && k == 8 && (data[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0)
            this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
    }
    this.clamp();
    if (mi)
        BigInteger.ZERO.subTo(this, this);
}
function bnpFromByteArray(a, unsigned) {
    this.fromString(a, 256, unsigned);
}
function bnpFromBuffer(a) {
    this.fromString(a, 256, true);
}
// (protected) clamp off excess high words
function bnpClamp() {
    var c = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == c)
        --this.t;
}
// (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0)
        return "-" + this.negate().toString(b);
    var k;
    if (b == 16)
        k = 4;
    else if (b == 8)
        k = 3;
    else if (b == 2)
        k = 1;
    else if (b == 32)
        k = 5;
    else if (b == 4)
        k = 2;
    else
        return this.toRadix(b);
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - (i * this.DB) % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while (i >= 0) {
            if (p < k) {
                d = (this[i] & ((1 << p) - 1)) << (k - p);
                d |= this[--i] >> (p += this.DB - k);
            }
            else {
                d = (this[i] >> (p -= k)) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0)
                m = true;
            if (m)
                r += int2char(d);
        }
    }
    return m ? r : "0";
}
// (public) -this
function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
}
// (public) |this|
function bnAbs() {
    return (this.s < 0) ? this.negate() : this;
}
// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0)
        return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0)
        return (this.s < 0) ? -r : r;
    while (--i >= 0)
        if ((r = this[i] - a[i]) != 0)
            return r;
    return 0;
}
// returns bit length of the integer x
function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
    }
    return r;
}
// (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0)
        return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
}
// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    var i;
    for (i = this.t - 1; i >= 0; --i)
        r[i + n] = this[i];
    for (i = n - 1; i >= 0; --i)
        r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
}
// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for (var i = n; i < this.t; ++i)
        r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
}
// (protected) r = this << n
function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;
    for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = (this[i] >> cbs) | c;
        c = (this[i] & bm) << bs;
    }
    for (i = ds - 1; i >= 0; --i)
        r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
}
// (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
    }
    if (bs > 0)
        r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
}
// (protected) r = this - a
function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1)
        r[i++] = this.DV + c;
    else if (c > 0)
        r[i++] = c;
    r.t = i;
    r.clamp();
}
// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0)
        r[i] = 0;
    for (i = 0; i < y.t; ++i)
        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s)
        BigInteger.ZERO.subTo(r, r);
}
// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while (--i >= 0)
        r[i] = 0;
    for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r[i + x.t] -= x.DV;
            r[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0)
        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
}
// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0)
        return;
    var pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null)
            q.fromInt(0);
        if (r != null)
            this.copyTo(r);
        return;
    }
    if (r == null)
        r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    }
    else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 === 0)
        return;
    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y); // "negative" y so we can replace sub with am later
    while (y.t < ys)
        y[y.t++] = 0;
    while (--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while (r[i] < --qd)
                r.subTo(t, r);
        }
    }
    if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms)
            BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0)
        r.rShiftTo(nsh, r); // Denormalize remainder
    if (ts < 0)
        BigInteger.ZERO.subTo(r, r);
}
// (public) this mod a
function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        a.subTo(r, r);
    return r;
}
// Modular reduction using "classic" algorithm
function Classic(m) {
    this.m = m;
}
function cConvert(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0)
        return x.mod(this.m);
    else
        return x;
}
function cRevert(x) {
    return x;
}
function cReduce(x) {
    x.divRemTo(this.m, null, x);
}
function cMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
function cSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;
// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1)
        return 0;
    var x = this[0];
    if ((x & 1) === 0)
        return 0;
    var y = x & 3; // y == 1/x mod 2^2
    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y > 0) ? this.DV - y : -y;
}
// Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << (m.DB - 15)) - 1;
    this.mt2 = 2 * m.t;
}
// xR mod m
function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        this.m.subTo(r, r);
    return r;
}
// x/R mod m
function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
}
// x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while (x.t <= this.mt2) // pad x so am has enough room later
        x[x.t++] = 0;
    for (var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while (x[j] >= x.DV) {
            x[j] -= x.DV;
            x[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
}
// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
// (protected) true iff this is even
function bnpIsEven() {
    return ((this.t > 0) ? (this[0] & 1) : this.s) === 0;
}
// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
    if (e > 0xffffffff || e < 1)
        return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
    g.copyTo(r);
    while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & (1 << i)) > 0)
            z.mulTo(r2, g, r);
        else {
            var t = r;
            r = r2;
            r2 = t;
        }
    }
    return z.revert(r);
}
// Copyright (c) 2005-2009  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.
// Extended JavaScript BN functions, required for RSA private ops.
// Version 1.1: new BigInteger("0", 10) returns "proper" zero
// Version 1.2: square() API, isProbablePrime fix
//(public)
function bnClone() {
    var r = nbi();
    this.copyTo(r);
    return r;
}
//(public) return value as integer
function bnIntValue() {
    if (this.s < 0) {
        if (this.t == 1)
            return this[0] - this.DV;
        else if (this.t === 0)
            return -1;
    }
    else if (this.t == 1)
        return this[0];
    else if (this.t === 0)
        return 0;
    // assumes 16 < DB < 32
    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
}
//(protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
}
//(public) 0 if this === 0, 1 if this > 0
function bnSigNum() {
    if (this.s < 0)
        return -1;
    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0))
        return 0;
    else
        return 1;
}
//(protected) convert to radix string
function bnpToRadix(b) {
    if (b == null)
        b = 10;
    if (this.signum() === 0 || b < 2 || b > 36)
        return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d, y, z);
    while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
    }
    return z.intValue().toString(b) + r;
}
//(protected) convert from radix string
function bnpFromRadix(s, b) {
    this.fromInt(0);
    if (b == null)
        b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
    for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-" && this.signum() === 0)
                mi = true;
            continue;
        }
        w = b * w + x;
        if (++j >= cs) {
            this.dMultiply(d);
            this.dAddOffset(w, 0);
            j = 0;
            w = 0;
        }
    }
    if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
    }
    if (mi)
        BigInteger.ZERO.subTo(this, this);
}
//(public) convert to bigendian byte array
function bnToByteArray() {
    var i = this.t, r = new Array();
    r[0] = this.s;
    var p = this.DB - (i * this.DB) % 8, d, k = 0;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
            r[k++] = d | (this.s << (this.DB - p));
        while (i >= 0) {
            if (p < 8) {
                d = (this[i] & ((1 << p) - 1)) << (8 - p);
                d |= this[--i] >> (p += this.DB - 8);
            }
            else {
                d = (this[i] >> (p -= 8)) & 0xff;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if ((d & 0x80) != 0)
                d |= -256;
            if (k === 0 && (this.s & 0x80) != (d & 0x80))
                ++k;
            if (k > 0 || d != this.s)
                r[k++] = d;
        }
    }
    return r;
}
/**
 * return Buffer object
 * @param trim {boolean} slice buffer if first element == 0
 * @returns {Buffer}
 */
function bnToBuffer(trimOrSize) {
    var res = Buffer.from(this.toByteArray());
    if (trimOrSize === true && res[0] === 0) {
        res = res.slice(1);
    }
    else if (_.isNumber(trimOrSize)) {
        if (res.length > trimOrSize) {
            for (var i = 0; i < res.length - trimOrSize; i++) {
                if (res[i] !== 0) {
                    return null;
                }
            }
            return res.slice(res.length - trimOrSize);
        }
        else if (res.length < trimOrSize) {
            var padded = Buffer.alloc(trimOrSize);
            padded.fill(0, 0, trimOrSize - res.length);
            res.copy(padded, trimOrSize - res.length);
            return padded;
        }
    }
    return res;
}
function bnEquals(a) {
    return (this.compareTo(a) == 0);
}
function bnMin(a) {
    return (this.compareTo(a) < 0) ? this : a;
}
function bnMax(a) {
    return (this.compareTo(a) > 0) ? this : a;
}
//(protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
    var i, f, m = Math.min(a.t, this.t);
    for (i = 0; i < m; ++i)
        r[i] = op(this[i], a[i]);
    if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i)
            r[i] = op(this[i], f);
        r.t = this.t;
    }
    else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i)
            r[i] = op(f, a[i]);
        r.t = a.t;
    }
    r.s = op(this.s, a.s);
    r.clamp();
}
//(public) this & a
function op_and(x, y) {
    return x & y;
}
function bnAnd(a) {
    var r = nbi();
    this.bitwiseTo(a, op_and, r);
    return r;
}
//(public) this | a
function op_or(x, y) {
    return x | y;
}
function bnOr(a) {
    var r = nbi();
    this.bitwiseTo(a, op_or, r);
    return r;
}
//(public) this ^ a
function op_xor(x, y) {
    return x ^ y;
}
function bnXor(a) {
    var r = nbi();
    this.bitwiseTo(a, op_xor, r);
    return r;
}
//(public) this & ~a
function op_andnot(x, y) {
    return x & ~y;
}
//(public) ~this
function bnNot() {
    var r = nbi();
    for (var i = 0; i < this.t; ++i)
        r[i] = this.DM & ~this[i];
    r.t = this.t;
    r.s = ~this.s;
    return r;
}
//return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
    if (x === 0)
        return -1;
    var r = 0;
    if ((x & 0xffff) === 0) {
        x >>= 16;
        r += 16;
    }
    if ((x & 0xff) === 0) {
        x >>= 8;
        r += 8;
    }
    if ((x & 0xf) === 0) {
        x >>= 4;
        r += 4;
    }
    if ((x & 3) === 0) {
        x >>= 2;
        r += 2;
    }
    if ((x & 1) === 0)
        ++r;
    return r;
}
//(public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
    for (var i = 0; i < this.t; ++i)
        if (this[i] != 0)
            return i * this.DB + lbit(this[i]);
    if (this.s < 0)
        return this.t * this.DB;
    return -1;
}
//return number of 1 bits in x
function cbit(x) {
    var r = 0;
    while (x != 0) {
        x &= x - 1;
        ++r;
    }
    return r;
}
//(protected) r = this + a
function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c += a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c > 0)
        r[i++] = c;
    else if (c < -1)
        r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
}
//(public) this + a
function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
}
//(public) this - a
function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
}
//(public) this * a
function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
}
// (public) this^2
function bnSquare() {
    var r = nbi();
    this.squareTo(r);
    return r;
}
//(public) this / a
function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
}
//(public) this % a
function bnRemainder(a) {
    var r = nbi();
    this.divRemTo(a, null, r);
    return r;
}
//(protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
}
//(protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
    if (n === 0)
        return;
    while (this.t <= w)
        this[this.t++] = 0;
    this[w] += n;
    while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t)
            this[this.t++] = 0;
        ++this[w];
    }
}
//A "null" reducer
function NullExp() {
}
function nNop(x) {
    return x;
}
function nMulTo(x, y, r) {
    x.multiplyTo(y, r);
}
function nSqrTo(x, r) {
    x.squareTo(r);
}
NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;
//(public) this^e
function bnPow(e) {
    return this.exp(e, new NullExp());
}
//(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    r.s = 0; // assumes a,this >= 0
    r.t = i;
    while (i > 0)
        r[--i] = 0;
    var j;
    for (j = r.t - this.t; i < j; ++i)
        r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
    for (j = Math.min(a.t, n); i < j; ++i)
        this.am(0, a[i], r, i, 0, n - i);
    r.clamp();
}
//(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
    --n;
    var i = r.t = this.t + a.t - n;
    r.s = 0; // assumes a,this >= 0
    while (--i >= 0)
        r[i] = 0;
    for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
    r.clamp();
    r.drShiftTo(1, r);
}
//Barrett modular reduction
function Barrett(m) {
    // setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
}
function barrettConvert(x) {
    if (x.s < 0 || x.t > 2 * this.m.t)
        return x.mod(this.m);
    else if (x.compareTo(this.m) < 0)
        return x;
    else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }
}
function barrettRevert(x) {
    return x;
}
//x = x mod m (HAC 14.42)
function barrettReduce(x) {
    x.drShiftTo(this.m.t - 1, this.r2);
    if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
    }
    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
    while (x.compareTo(this.r2) < 0)
        x.dAddOffset(1, this.m.t + 1);
    x.subTo(this.r2, x);
    while (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
}
//r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
//r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;
//(public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
    var i = e.bitLength(), k, r = nbv(1), z;
    if (i <= 0)
        return r;
    else if (i < 18)
        k = 1;
    else if (i < 48)
        k = 3;
    else if (i < 144)
        k = 4;
    else if (i < 768)
        k = 5;
    else
        k = 6;
    if (i < 8)
        z = new Classic(m);
    else if (m.isEven())
        z = new Barrett(m);
    else
        z = new Montgomery(m);
    // precomputation
    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }
    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e[j]) - 1;
    while (j >= 0) {
        if (i >= k1)
            w = (e[j] >> (i - k1)) & km;
        else {
            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
            if (j > 0)
                w |= e[j - 1] >> (this.DB + i - k1);
        }
        n = k;
        while ((w & 1) === 0) {
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) { // ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
        }
        else {
            while (n > 1) {
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0)
                z.sqrTo(r, r2);
            else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }
        while (j >= 0 && (e[j] & (1 << i)) === 0) {
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    return z.revert(r);
}
//(public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
    var x = (this.s < 0) ? this.negate() : this.clone();
    var y = (a.s < 0) ? a.negate() : a.clone();
    if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
    }
    var i = x.getLowestSetBit(), g = y.getLowestSetBit();
    if (g < 0)
        return x;
    if (i < g)
        g = i;
    if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
    }
    while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0)
            x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0)
            y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
            x.subTo(y, x);
            x.rShiftTo(1, x);
        }
        else {
            y.subTo(x, y);
            y.rShiftTo(1, y);
        }
    }
    if (g > 0)
        y.lShiftTo(g, y);
    return y;
}
// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.fromByteArray = bnpFromByteArray;
BigInteger.prototype.fromBuffer = bnpFromBuffer;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;
BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.toBuffer = bnToBuffer;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.int2char = int2char;
// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);
// JSBN-specific extension
BigInteger.prototype.square = bnSquare;
//BigInteger interfaces not implemented in jsbn:
//BigInteger(int signum, byte[] magnitude)
//double doubleValue()
//float floatValue()
//int hashCode()
//long longValue()
//static BigInteger valueOf(long val)
module.exports = BigInteger;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../utils.cjs":81,"buffer":98}],78:[function(require,module,exports){
"use strict";
/*
 * RSA Encryption / Decryption with PKCS1 v2 Padding.
 *
 * ~MIT License~
 * Contributors:
 * Tom Wu, rzcoder, frosty00
*/
var _ = require('../utils.cjs')._;
var BigInteger = require('./jsbn.cjs');
var utils = require('../utils.cjs');
var schemes = require('../schemes/schemes.cjs');
//exports.BigInteger = BigInteger;
module.exports.Key = (function () {
    /**
     * RSA key constructor
     *
     * n - modulus
     * e - publicExponent
     * d - privateExponent
     * p - prime1
     * q - prime2
     * dmp1 - exponent1 -- d mod (p1)
     * dmq1 - exponent2 -- d mod (q-1)
     * coeff - coefficient -- (inverse of q) mod p
     */
    function RSAKey() {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null;
    }
    RSAKey.prototype.setOptions = function (options) {
        var signingSchemeProvider = schemes[options.signingScheme];
        var encryptionSchemeProvider = schemes[options.encryptionScheme];
        if (signingSchemeProvider === encryptionSchemeProvider) {
            this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
        }
        else {
            this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
            this.signingScheme = signingSchemeProvider.makeScheme(this, options);
        }
    };
    /**
     * Set the private key fields N, e, d and CRT params from buffers
     *
     * @param N
     * @param E
     * @param D
     * @param P
     * @param Q
     * @param DP
     * @param DQ
     * @param C
     */
    RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {
        if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {
            this.n = new BigInteger(N);
            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
            this.d = new BigInteger(D);
            if (P && Q && DP && DQ && C) {
                this.p = new BigInteger(P);
                this.q = new BigInteger(Q);
                this.dmp1 = new BigInteger(DP);
                this.dmq1 = new BigInteger(DQ);
                this.coeff = new BigInteger(C);
            }
            else {
                // TODO: re-calculate any missing CRT params
            }
            this.$$recalculateCache();
        }
        else {
            throw Error("Invalid RSA private key");
        }
    };
    /**
     * private
     * Perform raw private operation on "x": return x^d (mod n)
     *
     * @param x
     * @returns {*}
     */
    RSAKey.prototype.$doPrivate = function (x) {
        if (this.p || this.q) {
            return x.modPow(this.d, this.n);
        }
        // TODO: re-calculate any missing CRT params
        var xp = x.mod(this.p).modPow(this.dmp1, this.p);
        var xq = x.mod(this.q).modPow(this.dmq1, this.q);
        while (xp.compareTo(xq) < 0) {
            xp = xp.add(this.p);
        }
        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
    };
    RSAKey.prototype.sign = function (buffer) {
        return this.signingScheme.sign.apply(this.signingScheme, arguments);
    };
    /**
     * Check if key pair contains private key
     */
    RSAKey.prototype.isPrivate = function () {
        return this.n && this.e && this.d || false;
    };
    Object.defineProperty(RSAKey.prototype, 'keySize', {
        get: function () {
            return this.cache.keyBitLength;
        }
    });
    Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {
        get: function () {
            return this.cache.keyByteLength;
        }
    });
    Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {
        get: function () {
            return this.encryptionScheme.maxMessageLength();
        }
    });
    /**
     * Caching key data
     */
    RSAKey.prototype.$$recalculateCache = function () {
        this.cache = this.cache || {};
        // Bit & byte length
        this.cache.keyBitLength = this.n.bitLength();
        this.cache.keyByteLength = (this.cache.keyBitLength + 6) >> 3;
    };
    return RSAKey;
})();

},{"../schemes/schemes.cjs":80,"../utils.cjs":81,"./jsbn.cjs":77}],79:[function(require,module,exports){
"use strict";
/**
 * PKCS1 padding and signature scheme
 */
var BigInteger = require('../libs/jsbn.cjs');
var CryptoJS = require('../../crypto-js/crypto-js.cjs');
var constants = { RSA_NO_PADDING: 3 };
var Buffer = require('buffer').Buffer;
// require('constants');
var SIGN_INFO_HEAD = {
    md2: Buffer.from('3020300c06082a864886f70d020205000410', 'hex'),
    md5: Buffer.from('3020300c06082a864886f70d020505000410', 'hex'),
    sha1: Buffer.from('3021300906052b0e03021a05000414', 'hex'),
    sha224: Buffer.from('302d300d06096086480165030402040500041c', 'hex'),
    sha256: Buffer.from('3031300d060960864801650304020105000420', 'hex'),
    sha384: Buffer.from('3041300d060960864801650304020205000430', 'hex'),
    sha512: Buffer.from('3051300d060960864801650304020305000440', 'hex'),
    ripemd160: Buffer.from('3021300906052b2403020105000414', 'hex'),
    rmd160: Buffer.from('3021300906052b2403020105000414', 'hex')
};
var SIGN_ALG_TO_HASH_ALIASES = {
    'ripemd160': 'rmd160'
};
var DEFAULT_HASH_FUNCTION = 'sha256';
module.exports = {
    isEncryption: true,
    isSignature: true
};
module.exports.makeScheme = function (key, options) {
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }
    Scheme.prototype.maxMessageLength = function () {
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            return this.key.encryptedDataLength;
        }
        return this.key.encryptedDataLength - 11;
    };
    /**
     * Unpad input Buffer and, if valid, return the Buffer object
     * alg: PKCS#1 (type 2, random)
     * @param buffer
     * @returns {Buffer}
     */
    Scheme.prototype.encUnPad = function (buffer, options) {
        options = options || {};
        var i = 0;
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING treated like JAVA left pad with zero character
            var unPad;
            if (typeof buffer.lastIndexOf == "function") { //patch for old node version
                unPad = buffer.slice(buffer.lastIndexOf('\0') + 1, buffer.length);
            }
            else {
                unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, '\0') + 1, buffer.length);
            }
            return unPad;
        }
        if (buffer.length < 4) {
            return null;
        }
        /* Type 1: zeros padding for private key decrypt */
        if (options.type === 1) {
            if (buffer[0] !== 0 && buffer[1] !== 1) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (buffer[i] != 0xFF || ++i >= buffer.length) {
                    return null;
                }
            }
        }
        else {
            /* random padding for public key decrypt */
            if (buffer[0] !== 0 && buffer[1] !== 2) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (++i >= buffer.length) {
                    return null;
                }
            }
        }
        return buffer.slice(i + 1, buffer.length);
    };
    Scheme.prototype.sign = function (buffer) {
        var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        if (this.options.environment === 'browser') {
            hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;
            var hasher = CryptoJS[hashAlgorithm.toUpperCase()](buffer.toString());
            var asBuffer = wordArrayToBuffer(hasher);
            var paddedHash = this.pkcs1pad(asBuffer, hashAlgorithm);
            var res = this.key.$doPrivate(new BigInteger(paddedHash)).toBuffer(this.key.encryptedDataLength);
            return res;
        }
        else {
            throw new Error('CCXT only supports browser mode :P');
        }
    };
    /**
     * PKCS#1 pad input buffer to max data length
     * @param hashBuf
     * @param hashAlgorithm
     * @returns {*}
     */
    Scheme.prototype.pkcs1pad = function (hashBuf, hashAlgorithm) {
        var digest = SIGN_INFO_HEAD[hashAlgorithm];
        if (!digest) {
            throw Error('Unsupported hash algorithm');
        }
        var data = Buffer.concat([digest, hashBuf]);
        if (data.length + 10 > this.key.encryptedDataLength) {
            throw Error('Key is too short for signing algorithm (' + hashAlgorithm + ')');
        }
        var filled = Buffer.alloc(this.key.encryptedDataLength - data.length - 1);
        filled.fill(0xff, 0, filled.length - 1);
        filled[0] = 1;
        filled[filled.length - 1] = 0;
        var res = Buffer.concat([filled, data]);
        return res;
    };
    return new Scheme(key, options);
};
// used to convert `CryptoJS` wordArrays into `crypto` hex buffers
function wordToByteArray(word, length) {
    var ba = [], xFF = 0xFF;
    if (length > 0)
        ba.push(word >>> 24);
    if (length > 1)
        ba.push((word >>> 16) & xFF);
    if (length > 2)
        ba.push((word >>> 8) & xFF);
    if (length > 3)
        ba.push(word & xFF);
    return ba;
}
function wordArrayToBuffer(wordArray) {
    let length = undefined;
    if (wordArray.hasOwnProperty("sigBytes") && wordArray.hasOwnProperty("words")) {
        length = wordArray.sigBytes;
        wordArray = wordArray.words;
    }
    else {
        throw Error('Argument not a wordArray');
    }
    const result = [];
    let bytes = [];
    let i = 0;
    while (length > 0) {
        bytes = wordToByteArray(wordArray[i], Math.min(4, length));
        length -= bytes.length;
        result.push(bytes);
        i++;
    }
    return new Buffer.from([].concat.apply([], result), 'hex');
}

},{"../../crypto-js/crypto-js.cjs":50,"../libs/jsbn.cjs":77,"buffer":98}],80:[function(require,module,exports){
"use strict";
module.exports = {
    pkcs1: require('./pkcs1.cjs'),
    /**
     * Check if scheme has padding methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isEncryption: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isEncryption;
    },
    /**
     * Check if scheme has sign/verify methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isSignature: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isSignature;
    }
};

},{"./pkcs1.cjs":79}],81:[function(require,module,exports){
"use strict";
/*
 * Utils functions
 *
 */
/**
 * Break string str each maxLen symbols
 * @param str
 * @param maxLen
 * @returns {string}
 */
module.exports.linebrk = function (str, maxLen) {
    var res = '';
    var i = 0;
    while (i + maxLen < str.length) {
        res += str.substring(i, i + maxLen) + "\n";
        i += maxLen;
    }
    return res + str.substring(i, str.length);
};
/**
 * Trying get a 32-bit unsigned integer from the partial buffer
 * @param buffer
 * @param offset
 * @returns {Number}
 */
module.exports.get32IntFromBuffer = function (buffer, offset) {
    offset = offset || 0;
    var size = 0;
    if ((size = buffer.length - offset) > 0) {
        if (size >= 4) {
            return buffer.readUInt32BE(offset);
        }
        else {
            var res = 0;
            for (var i = offset + size, d = 0; i > offset; i--, d += 2) {
                res += buffer[i - 1] * Math.pow(16, d);
            }
            return res;
        }
    }
    else {
        return NaN;
    }
};
module.exports._ = {
    isObject: function (value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    },
    isString: function (value) {
        return typeof value == 'string' || value instanceof String;
    },
    isNumber: function (value) {
        return typeof value == 'number' || !isNaN(parseFloat(value)) && isFinite(value);
    },
    /**
     * Returns copy of `obj` without `removeProp` field.
     * @param obj
     * @param removeProp
     * @returns Object
     */
    omit: function (obj, removeProp) {
        var newObj = {};
        for (var prop in obj) {
            if (!obj.hasOwnProperty(prop) || prop === removeProp) {
                continue;
            }
            newObj[prop] = obj[prop];
        }
        return newObj;
    }
};
/**
 * Strips everything around the opening and closing lines, including the lines
 * themselves.
 */
module.exports.trimSurroundingText = function (data, opening, closing) {
    var trimStartIndex = 0;
    var trimEndIndex = data.length;
    var openingBoundaryIndex = data.indexOf(opening);
    if (openingBoundaryIndex >= 0) {
        trimStartIndex = openingBoundaryIndex + opening.length;
    }
    var closingBoundaryIndex = data.indexOf(closing, openingBoundaryIndex);
    if (closingBoundaryIndex >= 0) {
        trimEndIndex = closingBoundaryIndex;
    }
    return data.substring(trimStartIndex, trimEndIndex);
};

},{}],82:[function(require,module,exports){
'use strict';
var replace = String.prototype.replace;
var percentTwenties = /%20/g;
module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

},{}],83:[function(require,module,exports){
'use strict';
var stringify = require('./stringify.cjs');
var parse = require('./parse.cjs');
var formats = require('./formats.cjs');
module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"./formats.cjs":82,"./parse.cjs":84,"./stringify.cjs":85}],84:[function(require,module,exports){
'use strict';
var utils = require('./utils.cjs');
var has = Object.prototype.hasOwnProperty;
var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
};
var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};
// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')
var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                }
                else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }
    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset);
            val = options.strictNullHandling ? null : '';
        }
        else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset);
            val = options.decoder(part.slice(pos + 1), defaults.decoder, charset);
        }
        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(val);
        }
        if (val && options.comma && val.indexOf(',') > -1) {
            val = val.split(',');
        }
        if (has.call(obj, key)) {
            obj[key] = utils.combine(obj[key], val);
        }
        else {
            obj[key] = val;
        }
    }
    return obj;
};
var parseObject = function (chain, val, options) {
    var leaf = val;
    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === '[]' && options.parseArrays) {
            obj = [].concat(leaf);
        }
        else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!options.parseArrays && cleanRoot === '') {
                obj = { 0: leaf };
            }
            else if (!isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)) {
                obj = [];
                obj[index] = leaf;
            }
            else {
                obj[cleanRoot] = leaf;
            }
        }
        leaf = obj;
    }
    return leaf;
};
var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }
    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;
    // The regex chunks
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    // Get the parent
    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    // Stash the parent if it exists
    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(parent);
    }
    // Loop through children appending to the array until we hit depth
    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }
    // If there's a remainder, just add whatever is left
    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }
    return parseObject(keys, val, options);
};
var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults;
    }
    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
    return {
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        depth: typeof opts.depth === 'number' ? opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function (str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    // Iterate over the keys and setup the new object
    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }
    return utils.compact(obj);
};

},{"./utils.cjs":86}],85:[function(require,module,exports){
'use strict';
var utils = require('./utils.cjs');
var formats = require('./formats.cjs');
var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};
var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};
var toISO = Date.prototype.toISOString;
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    formatter: formats.formatters[formats['default']],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};
var stringify = function stringify(// eslint-disable-line func-name-matching
object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    }
    else if (obj instanceof Date) {
        obj = serializeDate(obj);
    }
    else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = obj.join(',');
    }
    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset) : prefix;
        }
        obj = '';
    }
    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === 'undefined') {
        return values;
    }
    var objKeys;
    if (isArray(filter)) {
        objKeys = filter;
    }
    else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (skipNulls && obj[key] === null) {
            continue;
        }
        if (isArray(obj)) {
            pushToArray(values, stringify(obj[key], typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
        }
        else {
            pushToArray(values, stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
        }
    }
    return values;
};
var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }
    if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter = opts.filter;
    }
    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    }
    else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== 'object' || obj === null) {
        return '';
    }
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    }
    else if (opts && 'indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    }
    else {
        arrayFormat = 'indices';
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (!objKeys) {
        objKeys = Object.keys(obj);
    }
    if (options.sort) {
        objKeys.sort(options.sort);
    }
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.formatter, options.encodeValuesOnly, options.charset));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';
    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        }
        else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }
    return joined.length > 0 ? prefix + joined : '';
};

},{"./formats.cjs":82,"./utils.cjs":86}],86:[function(require,module,exports){
'use strict';
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }
    return array;
}());
var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
            var compacted = [];
            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }
            item.obj[item.prop] = compacted;
        }
    }
};
var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }
    return obj;
};
var merge = function merge(target, source, options) {
    if (!source) {
        return target;
    }
    if (typeof source !== 'object') {
        if (isArray(target)) {
            target.push(source);
        }
        else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        }
        else {
            return [target, source];
        }
        return target;
    }
    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }
    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                }
                else {
                    target.push(item);
                }
            }
            else {
                target[i] = item;
            }
        });
        return target;
    }
    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        }
        else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};
var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};
var decode = function (str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    }
    catch (e) {
        return strWithoutPlus;
    }
};
var encode = function encode(str, defaultEncoder, charset) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }
    var string = typeof str === 'string' ? str : String(str);
    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }
    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 0x2D // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }
        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }
        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }
        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }
        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }
    return out;
};
var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];
    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }
    compactQueue(queue);
    return value;
};
var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};
var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};
var combine = function combine(a, b) {
    return [].concat(a, b);
};
module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    merge: merge
};

},{}],87:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
var _number = require("./base/functions/number.js");
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class woo extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'woo',
      'name': 'WOO X',
      'countries': ['KY'],
      'rateLimit': 100,
      'version': 'v1',
      'certified': false,
      'pro': true,
      'hostname': 'woo.org',
      'has': {
        'CORS': undefined,
        'spot': true,
        'margin': true,
        'swap': true,
        'future': false,
        'option': false,
        'addMargin': false,
        'borrowMargin': false,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'cancelWithdraw': false,
        'createDepositAddress': false,
        'createMarketOrder': false,
        'createOrder': true,
        'createReduceOnlyOrder': true,
        'createStopLimitOrder': false,
        'createStopMarketOrder': false,
        'createStopOrder': false,
        'fetchAccounts': true,
        'fetchBalance': true,
        'fetchCanceledOrders': false,
        'fetchClosedOrder': false,
        'fetchClosedOrders': false,
        'fetchCurrencies': true,
        'fetchDepositAddress': false,
        'fetchDeposits': true,
        'fetchFundingHistory': true,
        'fetchFundingRate': true,
        'fetchFundingRateHistory': true,
        'fetchFundingRates': true,
        'fetchIndexOHLCV': false,
        'fetchLedger': true,
        'fetchLeverage': true,
        'fetchMarginMode': false,
        'fetchMarkets': true,
        'fetchMarkOHLCV': false,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenInterestHistory': false,
        'fetchOpenOrder': false,
        'fetchOpenOrders': false,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrders': true,
        'fetchOrderTrades': true,
        'fetchPosition': true,
        'fetchPositionMode': false,
        'fetchPositions': true,
        'fetchPremiumIndexOHLCV': false,
        'fetchStatus': false,
        'fetchTicker': false,
        'fetchTickers': false,
        'fetchTime': false,
        'fetchTrades': true,
        'fetchTradingFee': false,
        'fetchTradingFees': true,
        'fetchTransactions': true,
        'fetchTransfers': true,
        'fetchWithdrawals': true,
        'reduceMargin': false,
        'repayMargin': true,
        'setLeverage': true,
        'setMargin': false,
        'transfer': true,
        'withdraw': true // exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs: https://kronosresearch.github.io/wootrade-documents/#token-withdraw
      },

      'timeframes': {
        '1m': '1',
        '3m': '3',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '2h',
        '4h': '4h',
        '8h': '8h',
        '12h': '12h',
        '1d': '1D',
        '3d': '3D',
        '1w': '1W',
        '1M': '1M'
      },
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
        'api': {
          'pub': 'https://api-pub.woo.org',
          'public': 'https://api.{hostname}',
          'private': 'https://api.{hostname}'
        },
        'test': {
          'pub': 'https://api-pub.staging.woo.org',
          'public': 'https://api.staging.woo.org',
          'private': 'https://api.staging.woo.org'
        },
        'www': 'https://woo.org/',
        'doc': ['https://docs.woo.org/'],
        'fees': ['https://support.woo.org/hc/en-001/articles/4404611795353--Trading-Fees'],
        'referral': 'https://referral.woo.org/BAJS6oNmZb3vi3RGA'
      },
      'api': {
        'v1': {
          'pub': {
            'get': {
              'hist/kline': 10,
              'hist/trades': 1
            }
          },
          'public': {
            'get': {
              'info': 1,
              'info/{symbol}': 1,
              'system_info': 1,
              'kline': 1,
              'market_trades': 1,
              'token': 1,
              'token_network': 1,
              'funding_rates': 1,
              'funding_rate/{symbol}': 1,
              'funding_rate_history': 1,
              'futures': 1,
              'futures/{symbol}': 1,
              'tv/history': 1
            }
          },
          'private': {
            'get': {
              'client/token': 1,
              'order/{oid}': 1,
              'client/order/{client_order_id}': 1,
              'orders': 1,
              'orderbook/{symbol}': 1,
              'client/trade/{tid}': 1,
              'order/{oid}/trades': 1,
              'client/trades': 1,
              'client/info': 60,
              'asset/deposit': 10,
              'asset/history': 60,
              'sub_account/all': 60,
              'sub_account/assets': 60,
              'token_interest': 60,
              'token_interest/{token}': 60,
              'interest/history': 60,
              'interest/repay': 60,
              'funding_fee/history': 30,
              'positions': 3.33,
              'position/{symbol}': 3.33
            },
            'post': {
              'order': 5,
              'asset/main_sub_transfer': 30,
              'asset/withdraw': 30,
              'interest/repay': 60,
              'client/account_mode': 120,
              'client/leverage': 120
            },
            'delete': {
              'order': 1,
              'client/order': 1,
              'orders': 1,
              'asset/withdraw': 120 // implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
            }
          }
        },

        'v2': {
          'private': {
            'get': {
              'client/holding': 1
            }
          }
        },
        'v3': {
          'private': {
            'get': {
              'algo/order/{oid}': 1,
              'algo/orders': 1,
              'balances': 1,
              'accountinfo': 60,
              'positions': 3.33,
              'buypower': 1
            },
            'post': {
              'algo/order': 5
            },
            'put': {
              'order/{oid}': 2,
              'order/client/{oid}': 2,
              'algo/order/{oid}': 2,
              'algo/order/client/{oid}': 2
            },
            'delete': {
              'algo/order/{oid}': 1,
              'algo/orders/pending': 1,
              'algo/orders/pending/{symbol}': 1,
              'orders/pending': 1
            }
          }
        }
      },
      'fees': {
        'trading': {
          'tierBased': true,
          'percentage': true,
          'maker': this.parseNumber('0.0002'),
          'taker': this.parseNumber('0.0005')
        }
      },
      'options': {
        'createMarketBuyOrderRequiresPrice': true,
        // these network aliases require manual mapping here
        'network-aliases-for-tokens': {
          'HT': 'ERC20',
          'OMG': 'ERC20',
          'UATOM': 'ATOM',
          'ZRX': 'ZRX'
        },
        'networks': {
          'TRX': 'TRON',
          'TRC20': 'TRON',
          'ERC20': 'ETH',
          'BEP20': 'BSC'
        },
        // override defaultNetworkCodePriorities for a specific currency
        'defaultNetworkCodeForCurrencies': {
          // 'USDT': 'TRC20',
          // 'BTC': 'BTC',
        },
        'transfer': {
          'fillResponseFromRequest': true
        },
        'brokerId': 'ab82cb09-cfec-4473-80a3-b740779d0644'
      },
      'commonCurrencies': {},
      'exceptions': {
        'exact': {
          '-1000': _errors.ExchangeError,
          '-1001': _errors.AuthenticationError,
          '-1002': _errors.AuthenticationError,
          '-1003': _errors.RateLimitExceeded,
          '-1004': _errors.BadRequest,
          '-1005': _errors.BadRequest,
          '-1006': _errors.BadRequest,
          '-1007': _errors.BadRequest,
          '-1008': _errors.InvalidOrder,
          '-1009': _errors.BadRequest,
          '-1011': _errors.ExchangeError,
          '-1012': _errors.BadRequest,
          '-1101': _errors.InvalidOrder,
          '-1102': _errors.InvalidOrder,
          '-1103': _errors.InvalidOrder,
          '-1104': _errors.InvalidOrder,
          '-1105': _errors.InvalidOrder // { "code": -1105,  "message": "Price is X% too high or X% too low from the mid price." }
        },

        'broad': {
          'symbol must not be blank': _errors.BadRequest,
          'The token is not supported': _errors.BadRequest,
          'Your order and symbol are not valid or already canceled': _errors.BadRequest,
          'Insufficient WOO. Please enable margin trading for leverage trading': _errors.BadRequest // when selling insufficent token [-1012]
        }
      },

      'precisionMode': _number.TICK_SIZE
    });
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name woo#fetchMarkets
     * @description retrieves data on all markets for woo
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    const response = await this.v1PublicGetInfo(params);
    //
    // {
    //     rows: [
    //         {
    //             symbol: "SPOT_AAVE_USDT",
    //             quote_min: 0,
    //             quote_max: 100000,
    //             quote_tick: 0.01,
    //             base_min: 0.01,
    //             base_max: 7284,
    //             base_tick: 0.0001,
    //             min_notional: 10,
    //             price_range: 0.1,
    //             created_time: "0",
    //             updated_time: "1639107647.988",
    //             is_stable: 0
    //         },
    //         ...
    //     success: true
    // }
    //
    const result = [];
    const data = this.safeValue(response, 'rows', []);
    for (let i = 0; i < data.length; i++) {
      const market = data[i];
      const marketId = this.safeString(market, 'symbol');
      const parts = marketId.split('_');
      let marketType = this.safeStringLower(parts, 0);
      const isSpot = marketType === 'spot';
      const isSwap = marketType === 'perp';
      const baseId = this.safeString(parts, 1);
      const quoteId = this.safeString(parts, 2);
      const base = this.safeCurrencyCode(baseId);
      const quote = this.safeCurrencyCode(quoteId);
      let settleId = undefined;
      let settle = undefined;
      let symbol = base + '/' + quote;
      let contractSize = undefined;
      let linear = undefined;
      if (isSpot) {
        continue;
      }
      if (isSwap) {
        settleId = this.safeString(parts, 2);
        settle = this.safeCurrencyCode(settleId);
        symbol = base + '/' + quote + ':' + settle;
        contractSize = this.parseNumber('1');
        marketType = 'swap';
        linear = true;
      }
      result.push({
        'id': marketId,
        'symbol': symbol,
        'base': base,
        'quote': quote,
        'settle': settle,
        'baseId': baseId,
        'quoteId': quoteId,
        'settleId': settleId,
        'type': marketType,
        'spot': isSpot,
        'margin': true,
        'swap': isSwap,
        'future': false,
        'option': false,
        'active': undefined,
        'contract': isSwap,
        'linear': linear,
        'inverse': undefined,
        'contractSize': contractSize,
        'expiry': undefined,
        'expiryDatetime': undefined,
        'strike': undefined,
        'optionType': undefined,
        'precision': {
          'amount': this.safeNumber(market, 'base_tick'),
          'price': this.safeNumber(market, 'quote_tick')
        },
        'limits': {
          'leverage': {
            'min': undefined,
            'max': undefined
          },
          'amount': {
            'min': this.safeNumber(market, 'base_min'),
            'max': this.safeNumber(market, 'base_max')
          },
          'price': {
            'min': this.safeNumber(market, 'quote_min'),
            'max': this.safeNumber(market, 'quote_max')
          },
          'cost': {
            'min': this.safeNumber(market, 'min_notional'),
            'max': undefined
          }
        },
        'info': market
      });
    }
    return result;
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchTrades() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.v1PublicGetMarketTrades(this.extend(request, params));
    //
    // {
    //     success: true,
    //     rows: [
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "SELL",
    //             executed_price: 46222.35,
    //             executed_quantity: 0.0012,
    //             executed_timestamp: "1641241162.329"
    //         },
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "SELL",
    //             executed_price: 46222.35,
    //             executed_quantity: 0.0012,
    //             executed_timestamp: "1641241162.329"
    //         },
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "BUY",
    //             executed_price: 46224.32,
    //             executed_quantity: 0.00039,
    //             executed_timestamp: "1641241162.287"
    //         },
    //         ...
    //      ]
    // }
    //
    const resultResponse = this.safeValue(response, 'rows', {});
    return this.parseTrades(resultResponse, market, since, limit);
  }
  parseTrade(trade, market = undefined) {
    //
    // public/market_trades
    //
    //     {
    //         symbol: "SPOT_BTC_USDT",
    //         side: "SELL",
    //         executed_price: 46222.35,
    //         executed_quantity: 0.0012,
    //         executed_timestamp: "1641241162.329"
    //     }
    //
    // fetchOrderTrades, fetchOrder
    //
    //     {
    //         id: '99119876',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641481113.084',
    //         order_id: '87001234',
    //         order_tag: 'default', <-- this param only in "fetchOrderTrades"
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //     }
    //
    const isFromFetchOrder = ('id' in trade);
    const timestamp = this.safeTimestamp(trade, 'executed_timestamp');
    const marketId = this.safeString(trade, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString(trade, 'executed_price');
    const amount = this.safeString(trade, 'executed_quantity');
    const order_id = this.safeString(trade, 'order_id');
    const fee = this.parseTokenAndFeeTemp(trade, 'fee_asset', 'fee');
    const cost = _Precise.Precise.stringMul(price, amount);
    const side = this.safeStringLower(trade, 'side');
    const id = this.safeString(trade, 'id');
    let takerOrMaker = undefined;
    if (isFromFetchOrder) {
      const isMaker = this.safeString(trade, 'is_maker') === '1';
      takerOrMaker = isMaker ? 'maker' : 'taker';
    }
    return this.safeTrade({
      'id': id,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'side': side,
      'price': price,
      'amount': amount,
      'cost': cost,
      'order': order_id,
      'takerOrMaker': takerOrMaker,
      'type': undefined,
      'fee': fee,
      'info': trade
    }, market);
  }
  parseTokenAndFeeTemp(item, feeTokenKey, feeAmountKey) {
    const feeCost = this.safeString(item, feeAmountKey);
    let fee = undefined;
    if (feeCost !== undefined) {
      const feeCurrencyId = this.safeString(item, feeTokenKey);
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': feeCost,
        'currency': feeCurrencyCode
      };
    }
    return fee;
  }
  async fetchTradingFees(params = {}) {
    /**
     * @method
     * @name woo#fetchTradingFees
     * @description fetch the trading fees for multiple markets
     * @see https://docs.woo.org/#get-account-information-new
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const response = await this.v3PrivateGetAccountinfo(params);
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "applicationId": "dsa",
    //             "account": "dsa",
    //             "alias": "haha",
    //             "accountMode": "MARGIN",
    //             "leverage": 1,
    //             "takerFeeRate": 1,
    //             "makerFeeRate": 1,
    //             "interestRate": 1,
    //             "futuresTakerFeeRate": 1,
    //             "futuresMakerFeeRate": 1,
    //             "otpauth": true,
    //             "marginRatio": 1,
    //             "openMarginRatio": 1,
    //             "initialMarginRatio": 1,
    //             "maintenanceMarginRatio": 1,
    //             "totalCollateral": 1,
    //             "freeCollateral": 1,
    //             "totalAccountValue": 1,
    //             "totalVaultValue": 1,
    //             "totalStakingValue": 1
    //         },
    //         "timestamp": 1673323685109
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    const maker = this.safeString(data, 'makerFeeRate');
    const taker = this.safeString(data, 'takerFeeRate');
    const result = {};
    for (let i = 0; i < this.symbols.length; i++) {
      const symbol = this.symbols[i];
      result[symbol] = {
        'info': response,
        'symbol': symbol,
        'maker': this.parseNumber(_Precise.Precise.stringDiv(maker, '10000')),
        'taker': this.parseNumber(_Precise.Precise.stringDiv(taker, '10000')),
        'percentage': true,
        'tierBased': true
      };
    }
    return result;
  }
  async fetchCurrencies(params = {}) {
    /**
     * @method
     * @name woo#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an associative dictionary of currencies
     */
    const result = {};
    const tokenResponse = await this.v1PublicGetToken(params);
    //
    // {
    //     rows: [
    //         {
    //             token: "ETH_USDT",
    //             fullname: "Tether",
    //             decimals: 6,
    //             balance_token: "USDT",
    //             created_time: "0",
    //             updated_time: "0"
    //         },
    //         {
    //             token: "BSC_USDT",
    //             fullname: "Tether",
    //             decimals: 18,
    //             balance_token: "USDT",
    //             created_time: "0",
    //             updated_time: "0"
    //         },
    //         {
    //             token: "ZEC",
    //             fullname: "ZCash",
    //             decimals: 8,
    //             balance_token: "ZEC",
    //             created_time: "0",
    //             updated_time: "0"
    //         },
    //         ...
    //     ],
    //     success: true
    // }
    //
    // only make one request for currrencies...
    // const tokenNetworkResponse = await this.v1PublicGetTokenNetwork (params);
    //
    // {
    //     rows: [
    //         {
    //             protocol: "ERC20",
    //             token: "USDT",
    //             name: "Ethereum",
    //             minimum_withdrawal: 30,
    //             withdrawal_fee: 25,
    //             allow_deposit: 1,
    //             allow_withdraw: 1
    //         },
    //         {
    //             protocol: "TRC20",
    //             token: "USDT",
    //             name: "Tron",
    //             minimum_withdrawal: 30,
    //             withdrawal_fee: 1,
    //             allow_deposit: 1,
    //             allow_withdraw: 1
    //         },
    //         ...
    //     ],
    //     success: true
    // }
    //
    const tokenRows = this.safeValue(tokenResponse, 'rows', []);
    const networksByCurrencyId = this.groupBy(tokenRows, 'balance_token');
    const currencyIds = Object.keys(networksByCurrencyId);
    for (let i = 0; i < currencyIds.length; i++) {
      const currencyId = currencyIds[i];
      const networks = networksByCurrencyId[currencyId];
      const code = this.safeCurrencyCode(currencyId);
      let name = undefined;
      let minPrecision = undefined;
      const resultingNetworks = {};
      for (let j = 0; j < networks.length; j++) {
        const network = networks[j];
        name = this.safeString(network, 'fullname');
        const networkId = this.safeString(network, 'token');
        const splitted = networkId.split('_');
        const unifiedNetwork = splitted[0];
        const precision = this.parsePrecision(this.safeString(network, 'decimals'));
        if (precision !== undefined) {
          minPrecision = minPrecision === undefined ? precision : _Precise.Precise.stringMin(precision, minPrecision);
        }
        resultingNetworks[unifiedNetwork] = {
          'id': networkId,
          'network': unifiedNetwork,
          'limits': {
            'withdraw': {
              'min': undefined,
              'max': undefined
            },
            'deposit': {
              'min': undefined,
              'max': undefined
            }
          },
          'active': undefined,
          'deposit': undefined,
          'withdraw': undefined,
          'fee': undefined,
          'precision': this.parseNumber(precision),
          'info': network
        };
      }
      result[code] = {
        'id': currencyId,
        'name': name,
        'code': code,
        'precision': this.parseNumber(minPrecision),
        'active': undefined,
        'fee': undefined,
        'networks': resultingNetworks,
        'deposit': undefined,
        'withdraw': undefined,
        'limits': {
          'deposit': {
            'min': undefined,
            'max': undefined
          },
          'withdraw': {
            'min': undefined,
            'max': undefined
          }
        },
        'info': networks
      };
    }
    return result;
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name woo#createOrder
     * @description create a trade order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    // quick order:
    //
    // BTC/USDT:USDT
    // limit
    // buy
    // 4.0
    // 29116.0
    // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
    //
    // limit order:
    //
    // BTC/USDT:USDT
    // limit
    // buy
    // 4.0
    // 28520.0
    // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
    //
    // no post = 'timeInForce': 'GTC',
    //
    // SL
    //
    // BTC/USDT:USDT
    // stop
    // sell
    // 20.0
    // None
    // {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    //
    // TP
    //
    // BTC/USDT:USDT
    // stop
    // sell
    // 20.0
    // None
    // {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    //
    // LIMIT TP
    //
    // BTC/USDT:USDT
    // stopLimit
    // sell
    // 4.0
    // 33000.0
    // {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    const reduceOnly = this.safeValue2(params, 'reduceOnly', 'close');
    const orderType = type.toUpperCase();
    if (orderType === 'STOP' || orderType === 'STOPLIMIT') {
      await this.loadMarkets();
      const market = this.market(symbol);
      const orderSide = side.toUpperCase();
      let algoOrderType = 'MARKET';
      if (orderType !== 'STOP') {
        algoOrderType = 'LIMIT';
      }
      const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
      const request = {
        'symbol': market['id'],
        'algoType': 'STOP',
        'type': algoOrderType,
        'side': orderSide
      };
      if (reduceOnly) {
        request['reduceOnly'] = reduceOnly;
      }
      if (price !== undefined) {
        request['price'] = this.priceToPrecision(symbol, price);
      }
      request['triggerPrice'] = triggerPrice;
      request['quantity'] = this.amountToPrecision(symbol, amount);
      params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
      // const response = await (this as any).v3PrivatePostAlgoOrder (this.extend (request, params));
      const brokerId = this.safeString(this.options, 'brokerId');
      if (brokerId !== undefined) {
        request['brokerId'] = brokerId;
      }
      const response = await this.v3PrivatePostAlgoOrder(request);
      // {
      //     success: true,
      //     timestamp: '1641383206.489',
      //     order_id: '86980774',
      //     order_type: 'LIMIT',
      //     order_price: '1', // null for 'MARKET' order
      //     order_quantity: '12', // null for 'MARKET' order
      //     order_amount: null, // NOT-null for 'MARKET' order
      //     client_order_id: '0'
      // }
      // response -> data -> rows -> [0]
      const data = this.safeValue(response, 'data');
      const rows = this.safeValue(data, 'rows', []);
      // return this.extend (
      //     this.parseOrder (rows[0], market),
      //     { 'type': type }
      // );
      return this.extend(this.parseOrder(rows[0], market), {
        'status': 'open'
      });
    } else {
      await this.loadMarkets();
      const market = this.market(symbol);
      const orderSide = side.toUpperCase();
      const request = {
        'symbol': market['id'],
        'order_type': orderType,
        'side': orderSide
      };
      const isMarket = orderType === 'MARKET';
      const timeInForce = this.safeStringLower(params, 'timeInForce');
      const postOnly = this.isPostOnly(isMarket, undefined, params);
      if (postOnly) {
        request['order_type'] = 'POST_ONLY';
      } else if (timeInForce === 'fok') {
        request['order_type'] = 'FOK';
      } else if (timeInForce === 'ioc') {
        request['order_type'] = 'IOC';
      }
      if (reduceOnly) {
        request['reduce_only'] = reduceOnly;
      }
      if (price !== undefined) {
        request['order_price'] = this.priceToPrecision(symbol, price);
      }
      request['order_quantity'] = this.amountToPrecision(symbol, amount);
      const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
      if (clientOrderId !== undefined) {
        request['client_order_id'] = clientOrderId;
      }
      const brokerId = this.safeString(this.options, 'brokerId');
      if (brokerId !== undefined) {
        request['broker_id'] = brokerId;
      }
      params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
      const response = await this.v1PrivatePostOrder(this.extend(request, params));
      // {
      //     success: true,
      //     timestamp: '1641383206.489',
      //     order_id: '86980774',
      //     order_type: 'LIMIT',
      //     order_price: '1', // null for 'MARKET' order
      //     order_quantity: '12', // null for 'MARKET' order
      //     order_amount: null, // NOT-null for 'MARKET' order
      //     client_order_id: '0'
      // }
      return this.extend(this.parseOrder(response, market), {
        'type': type,
        'status': 'open'
      });
    }
  }
  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name woo#editOrder
     * @description edit a trade order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'oid': id
      // 'quantity': this.amountToPrecision (symbol, amount),
      // 'price': this.priceToPrecision (symbol, price),
    };

    if (price !== undefined && type !== 'stop') {
      request['price'] = this.priceToPrecision(symbol, price);
    }
    const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
    if (triggerPrice !== undefined) {
      request['triggerPrice'] = triggerPrice;
    }
    if (amount !== undefined) {
      request['quantity'] = this.amountToPrecision(symbol, amount);
    }
    let method = 'v3PrivatePutOrderOid';
    if (this.maybeAlgoOrderId(id)) {
      method = 'v3PrivatePutAlgoOrderOid';
    }
    const response = await this[method](this.extend(request, params));
    //
    //     {
    //         "code": 0,
    //         "data": {
    //             "status": "string",
    //             "success": true
    //         },
    //         "message": "string",
    //         "success": true,
    //         "timestamp": 0
    //     }
    //
    const data = this.safeValue(response, 'data', {});
    return this.parseOrder(data, market);
  }
  maybeAlgoOrderId(id) {
    const stringId = this.numberToString(id);
    if (stringId.length < 9) {
      return true;
    }
    return false;
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    if (this.maybeAlgoOrderId(id)) {
      return this.cancelAlgoOrder(id, symbol, params);
    } else {
      return this.cancelRegularOrder(id, symbol, params);
    }
  }
  async cancelAlgoOrder(id, symbol = undefined, params = {}) {
    const request = {};
    request['oid'] = id;
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    request['symbol'] = market['id'];
    const response = await this.v3PrivateDeleteAlgoOrderOid(this.extend(request, params));
    //
    // { success: true, status: 'CANCEL_SENT' }
    //
    const extendParams = {
      'symbol': symbol
    };
    extendParams['id'] = id;
    return this.extend(this.parseOrder(response), extendParams);
  }
  async cancelRegularOrder(id, symbol = undefined, params = {}) {
    const request = {};
    const clientOrderIdUnified = this.safeString2(params, 'clOrdID', 'clientOrderId');
    const clientOrderIdExchangeSpecific = this.safeString2(params, 'client_order_id', clientOrderIdUnified);
    const isByClientOrder = clientOrderIdExchangeSpecific !== undefined;
    if (isByClientOrder) {
      request['client_order_id'] = clientOrderIdExchangeSpecific;
      params = this.omit(params, ['clOrdID', 'clientOrderId', 'client_order_id']);
    } else {
      request['order_id'] = id;
    }
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    request['symbol'] = market['id'];
    const response = await this.v1PrivateDeleteOrder(this.extend(request, params));
    //
    // { success: true, status: 'CANCEL_SENT' }
    //
    const extendParams = {
      'symbol': symbol
    };
    if (isByClientOrder) {
      extendParams['client_order_id'] = clientOrderIdExchangeSpecific;
    } else {
      extendParams['id'] = id;
    }
    return this.extend(this.parseOrder(response), extendParams);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#cancelAllOrders
     * @description cancel all open orders in a market
     * @param {string|undefined} symbol unified market symbol
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' canelOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PrivateDeleteOrders(this.extend(request, params));
    await this.v3PrivateDeleteAlgoOrdersPending(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "status":"CANCEL_ALL_SENT"
    //     }
    //
    return response;
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string|undefined} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = symbol !== undefined ? this.market(symbol) : undefined;
    const request = {};
    const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
    let chosenSpotMethod = undefined;
    if (this.maybeAlgoOrderId(id)) {
      chosenSpotMethod = 'v3PrivateDeleteAlgoOrderOid';
    } else if (clientOrderId) {
      chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
      request['client_order_id'] = clientOrderId;
    } else {
      chosenSpotMethod = 'v1PrivateGetOrderOid';
      request['oid'] = id;
    }
    const response = await this[chosenSpotMethod](this.extend(request, params));
    //
    // {
    //     success: true,
    //     symbol: 'SPOT_WOO_USDT',
    //     status: 'FILLED', // FILLED, NEW
    //     side: 'BUY',
    //     created_time: '1641480933.000',
    //     order_id: '87541111',
    //     order_tag: 'default',
    //     price: '1',
    //     type: 'LIMIT',
    //     quantity: '12',
    //     amount: null,
    //     visible: '12',
    //     executed: '12', // or any partial amount
    //     total_fee: '0.0024',
    //     fee_asset: 'WOO',
    //     client_order_id: null,
    //     average_executed_price: '1',
    //     Transactions: [
    //       {
    //         id: '99111647',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641482113.084',
    //         order_id: '87541111',
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //       }
    //     ]
    // }
    //
    return this.parseOrder(response, market);
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    request['size'] = 500;
    request['status'] = 'INCOMPLETE';
    const ordersResponse = await this.v1PrivateGetOrders(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "meta":{
    //             "total":1,
    //             "records_per_page":100,
    //             "current_page":1
    //         },
    //         "rows":[
    //             {
    //                 "symbol":"PERP_BTC_USDT",
    //                 "status":"FILLED",
    //                 "side":"SELL",
    //                 "created_time":"1611617776.000",
    //                 "updated_time":"1611617776.000",
    //                 "order_id":52121167,
    //                 "order_tag":"default",
    //                 "price":null,
    //                 "type":"MARKET",
    //                 "quantity":0.002,
    //                 "amount":null,
    //                 "visible":0,
    //                 "executed":0.002,
    //                 "total_fee":0.01732885,
    //                 "fee_asset":"USDT",
    //                 "client_order_id":null,
    //                 "average_executed_price":28881.41
    //             }
    //         ]
    //     }
    //
    const ordersData = this.safeValue(ordersResponse, 'rows');
    let total = 0;
    let algoOrdersRows = [];
    for (let i = 0; i < 50; i++) {
      request['size'] = 50;
      request['page'] = i + 1;
      const algoOrdersResponse = await this.v3PrivateGetAlgoOrders(this.extend(request, params));
      const algoOrdersData = this.safeValue(algoOrdersResponse, 'data');
      const algoOrdersMeta = this.safeValue(algoOrdersData, 'meta');
      const newRows = this.safeValue(algoOrdersData, 'rows');
      total = total + newRows.length;
      algoOrdersRows = this.arrayConcat(algoOrdersRows, newRows);
      const knownTotal = this.safeInteger(algoOrdersMeta, 'total');
      if (total >= knownTotal) {
        break;
      }
    }
    const allOrdersData = this.arrayConcat(ordersData, algoOrdersRows);
    return this.parseOrders(allOrdersData, market, since, limit, params);
  }
  parseTimeInForce(timeInForce) {
    const timeInForces = {
      'ioc': 'IOC',
      'fok': 'FOK',
      'post_only': 'PO'
    };
    return this.safeString(timeInForces, timeInForce, undefined);
  }
  parseOrderType(type, algoType = undefined) {
    if (algoType !== undefined) {
      if (algoType === 'take_profit') {
        if (type === 'market') {
          return 'stop';
        } else {
          return 'stopLimit';
        }
      }
    }
    // LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE
    const types = {
      'limit': 'limit',
      'market': 'market',
      'post_only': 'limit',
      'ioc': 'limit',
      'fok': 'limit',
      'liquidate': 'limit'
      // 'stop_market': 'stop',
      // 'take_profit_market': 'stop',
      // 'take_profit_limit': 'stopLimit',
      // 'trigger_limit': 'stopLimit',
      // 'trigger_market': 'stop',
    };

    return this.safeStringLower(types, type, type);
  }
  parseOrder(order, market = undefined) {
    const isAlgoOrder = ('algoType' in order);
    if (isAlgoOrder) {
      return this.parseAlgoOrder(order, market);
    } else {
      return this.parseRegularOrder(order, market);
    }
  }
  parseRegularOrder(order, market = undefined) {
    //
    // Possible input functions:
    // * createOrder
    // * cancelOrder
    // * fetchOrder
    // * fetchOrders
    // const isFromFetchOrder = ('order_tag' in order); TO_DO
    const timestamp = this.safeTimestamp2(order, 'timestamp', 'created_time');
    const orderId = this.safeString2(order, 'order_id', 'orderId');
    const clientOrderId = this.safeString2(order, 'client_order_id', 'clientOrderId'); // Somehow, this always returns 0 for limit order
    const marketId = this.safeString(order, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString2(order, 'order_price', 'price');
    const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
    const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
    const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'));
    const status = this.safeValue(order, 'status');
    const side = this.safeStringLower(order, 'side');
    const type = this.safeStringUpper(order, 'type');
    const postOnly = type === 'POST_ONLY';
    const filled = this.safeValue(order, 'executed');
    const average = this.safeString2(order, 'average_executed_price', 'executedPrice');
    const remaining = _Precise.Precise.stringSub(cost, filled);
    const fee = this.safeValue2(order, 'total_fee', 'totalFee');
    const feeCurrency = this.safeString2(order, 'fee_asset', 'feeAsset');
    const transactions = this.safeValue(order, 'Transactions');
    return this.safeOrder({
      'id': orderId,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': undefined,
      'status': this.parseOrderStatus(status),
      'symbol': symbol,
      'type': orderType,
      'timeInForce': this.parseTimeInForce(orderType),
      'postOnly': postOnly,
      'reduceOnly': this.safeValue(order, 'reduce_only'),
      'side': side,
      'price': price,
      'stopPrice': undefined,
      'triggerPrice': undefined,
      'average': average,
      'amount': amount,
      'filled': filled,
      'remaining': remaining,
      'cost': cost,
      'trades': transactions,
      'fee': {
        'cost': fee,
        'currency': feeCurrency
      },
      'info': order
    }, market);
  }
  parseAlgoOrder(order, market = undefined) {
    //
    // Possible input functions:
    // * createOrder
    // * cancelOrder
    // * fetchOrder
    // * fetchOrders
    // const isFromFetchOrder = ('order_tag' in order); TO_DO
    const timestamp = this.safeTimestamp2(order, 'timestamp', 'createdTime');
    const orderId = this.safeString(order, 'algoOrderId');
    const clientOrderId = this.safeString(order, 'clientOrderId'); // Somehow, this always returns 0 for limit order
    const marketId = this.safeString(order, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString2(order, 'price', 'triggerPrice');
    const stopPrice = this.safeString2(order, 'triggerPrice', 'price');
    const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
    const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
    const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'), this.safeStringLower(order, 'algoType'));
    let tsOrderType = orderType;
    if (orderType === 'market') {
      tsOrderType = 'stop';
    }
    const status = this.safeValue(order, 'algoStatus');
    const side = this.safeStringLower(order, 'side');
    const filled = this.safeValue(order, 'executed');
    const average = this.safeString(order, 'average_executed_price');
    const remaining = _Precise.Precise.stringSub(cost, filled);
    const fee = this.safeValue(order, 'totalFee');
    const feeCurrency = this.safeString(order, 'feeAsset');
    const transactions = this.safeValue(order, 'Transactions');
    return this.safeOrder({
      'id': orderId,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'lastTradeTimestamp': undefined,
      'status': this.parseOrderStatus(status),
      'symbol': symbol,
      'type': tsOrderType,
      'timeInForce': this.parseTimeInForce(orderType),
      'postOnly': undefined,
      'reduceOnly': this.safeValue(order, 'reduceOnly'),
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': undefined,
      'average': average,
      'amount': amount,
      'filled': filled,
      'remaining': remaining,
      'cost': cost,
      'trades': transactions,
      'fee': {
        'cost': fee,
        'currency': feeCurrency
      },
      'info': order,
      // TEALSTREET
      'reduce': this.safeValue(order, 'reduceOnly'),
      'trigger': 'Mark'
      // we don't know this from api
      // 'close': this.safeValue (order, 'closeOnTrigger'),
      // TEALSTREET
    }, market);
  }
  parseOrderStatus(status) {
    if (status !== undefined) {
      const statuses = {
        'NEW': 'open',
        'FILLED': 'closed',
        'CANCEL_SENT': 'canceled',
        'CANCEL_ALL_SENT': 'canceled',
        'CANCELLED': 'canceled',
        'PARTIAL_FILLED': 'open',
        'REJECTED': 'rejected',
        'INCOMPLETE': 'open',
        'REPLACED': 'open',
        'COMPLETED': 'closed'
      };
      return this.safeString(statuses, status, status);
    }
    return status;
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      limit = Math.min(limit, 1000);
      request['max_level'] = limit;
    }
    const response = await this.v1PrivateGetOrderbookSymbol(this.extend(request, params));
    //
    // {
    //   success: true,
    //   timestamp: '1641562961192',
    //   asks: [
    //     { price: '0.921', quantity: '76.01' },
    //     { price: '0.933', quantity: '477.10' },
    //     ...
    //   ],
    //   bids: [
    //     { price: '0.940', quantity: '13502.47' },
    //     { price: '0.932', quantity: '43.91' },
    //     ...
    //   ]
    // }
    //
    const timestamp = this.safeInteger(response, 'timestamp');
    return this.parseOrderBook(response, symbol, timestamp, 'bids', 'asks', 'price', 'quantity');
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'resolution': this.timeframes[timeframe],
      'from': since / 1000
    };
    const parsedTimeFrame = this.parseTimeframe(timeframe);
    const duration = parsedTimeFrame * 1000 * limit;
    const to = this.sum(since, duration);
    request['to'] = to / 1000;
    const response = await this.v1PublicGetTvHistory(this.extend(request, params));
    const res = [];
    if (response.s === 'ok') {
      const length = response.t.length;
      for (let i = 0; i < length; i++) {
        res.push([response.t[i] * 1000, response.o[i], response.h[i], response.l[i], response.c[i], response.v[i]]);
      }
    } else {
      throw response.s;
    }
    return res;
  }
  parseOHLCV(ohlcv, market = undefined) {
    // example response in fetchOHLCV
    return [this.safeInteger(ohlcv, 'start_timestamp'), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'volume')];
  }
  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @param {string} id order id
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    const request = {
      'oid': id
    };
    const response = await this.v1PrivateGetOrderOidTrades(this.extend(request, params));
    // {
    //     success: true,
    //     rows: [
    //       {
    //         id: '99111647',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641482113.084',
    //         order_id: '87541111',
    //         order_tag: 'default',
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //       }
    //     ]
    // }
    const trades = this.safeValue(response, 'rows', []);
    return this.parseTrades(trades, market, since, limit, params);
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    const response = await this.v1PrivateGetClientTrades(this.extend(request, params));
    // {
    //     "success": true,
    //     "meta": {
    //         "records_per_page": 25,
    //         "current_page": 1
    //     },
    //     "rows": [
    //         {
    //             "id": 5,
    //             "symbol": "SPOT_BTC_USDT",
    //             "order_id": 211,
    //             "order_tag": "default",
    //             "executed_price": 10892.84,
    //             "executed_quantity": 0.002,
    //             "is_maker": 0,
    //             "side": "SELL",
    //             "fee": 0,
    //             "fee_asset": "USDT",
    //             "executed_timestamp": "1566264290.250"
    //         },
    //         ...
    //     ]
    // }
    const trades = this.safeValue(response, 'rows', []);
    return this.parseTrades(trades, market, since, limit, params);
  }
  async fetchAccounts(params = {}) {
    /**
     * @method
     * @name woo#fetchAccounts
     * @description fetch all the accounts associated with a profile
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
     */
    const response = await this.v1PrivateGetSubAccountAssets(params);
    //
    //     {
    //         rows: [{
    //                 application_id: '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
    //                 account: 'Main',
    //                 usdt_balance: '4.0'
    //             },
    //             {
    //                 application_id: '432952aa-a401-4e26-aff6-972920aebba3',
    //                 account: 'subaccount',
    //                 usdt_balance: '1.0'
    //             }
    //         ],
    //         success: true
    //     }
    //
    const rows = this.safeValue(response, 'rows', []);
    return this.parseAccounts(rows, params);
  }
  parseAccount(account) {
    //
    //     {
    //         application_id: '336952aa-a401-4e26-aff6-972920aebba3',
    //         account: 'subaccount',
    //         usdt_balance: '1.0',
    //     }
    //
    const accountId = this.safeString(account, 'account');
    return {
      'info': account,
      'id': this.safeString(account, 'application_id'),
      'name': accountId,
      'code': undefined,
      'type': accountId === 'Main' ? 'main' : 'subaccount'
    };
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name woo#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://docs.woo.org/#get-current-holding-get-balance-new
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const response = await this.v3PrivateGetBalances(params);
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "holding": [
    //                 {
    //                     "token": "0_token",
    //                     "holding": 1,
    //                     "frozen": 0,
    //                     "staked": 0,
    //                     "unbonding": 0,
    //                     "vault": 0,
    //                     "interest": 0,
    //                     "pendingShortQty": 0,
    //                     "pendingLongQty": 0,
    //                     "availableBalance": 0,
    //                     "updatedTime": 312321.121
    //                 }
    //             ]
    //         },
    //         "timestamp": 1673323746259
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseBalance(data);
  }
  parseBalance(response) {
    const result = {
      'info': response
    };
    const balances = this.safeValue(response, 'holding', []);
    for (let i = 0; i < balances.length; i++) {
      const balance = balances[i];
      const code = this.safeCurrencyCode(this.safeString(balance, 'token'));
      const account = this.account();
      account['total'] = this.safeString(balance, 'holding');
      account['free'] = this.safeString(balance, 'availableBalance');
      result[code] = account;
    }
    return this.safeBalance(result);
  }
  async fetchDepositAddress(code, params = {}) {
    /**
     * @method
     * @name woo#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @param {string} code unified currency code
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    // this method is TODO because of networks unification
    await this.loadMarkets();
    const currency = this.currency(code);
    const networkCodeDefault = this.defaultNetworkCodeForCurrency(code);
    const networkCode = this.safeString(params, 'network', networkCodeDefault);
    params = this.omit(params, 'network');
    const codeForExchange = networkCode + '_' + currency['code'];
    const request = {
      'token': codeForExchange
    };
    const response = await this.v1PrivateGetAssetDeposit(this.extend(request, params));
    // {
    //     success: true,
    //     address: '3Jmtjx5544T4smrit9Eroe4PCrRkpDeKjP',
    //     extra: ''
    // }
    const tag = this.safeString(response, 'extra');
    const address = this.safeString(response, 'address');
    this.checkAddress(address);
    return {
      'currency': code,
      'address': address,
      'tag': tag,
      'network': networkCode,
      'info': response
    };
  }
  async getAssetHistoryRows(code = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    let currency = undefined;
    if (code !== undefined) {
      currency = this.currency(code);
      request['balance_token'] = currency['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    if (limit !== undefined) {
      request['pageSize'] = limit;
    }
    const transactionType = this.safeString(params, 'type');
    params = this.omit(params, 'type');
    if (transactionType !== undefined) {
      request['type'] = transactionType;
    }
    const response = await this.v1PrivateGetAssetHistory(this.extend(request, params));
    // {
    //     rows: [
    //       {
    //         id: '22010508193900165',
    //         token: 'TRON_USDT',
    //         extra: '',
    //         amount: '13.75848500',
    //         status: 'COMPLETED',
    //         account: null,
    //         description: null,
    //         user_id: '42222',
    //         application_id: '6ad2b303-f354-45c0-8105-9f5f19d0e335',
    //         external_id: '220105081900134',
    //         target_address: 'TXnyFSnAYad3YCaqtwMw9jvXKkeU39NLnK',
    //         source_address: 'TYDzsYUEpvnYmQk4zGP9sWWcTEd2MiAtW6',
    //         type: 'BALANCE',
    //         token_side: 'DEPOSIT',
    //         tx_id: '35b0004022f6b3ad07f39a0b7af199f6b258c2c3e2c7cdc93c67efa74fd625ee',
    //         fee_token: '',
    //         fee_amount: '0.00000000',
    //         created_time: '1641370779.442',
    //         updated_time: '1641370779.465',
    //         is_new_target_address: null,
    //         confirmed_number: '29',
    //         confirming_threshold: '27',
    //         audit_tag: '1',
    //         audit_result: '0',
    //         balance_token: null, // TODO -write to support, that this seems broken. here should be the token id
    //         network_name: null // TODO -write to support, that this seems broken. here should be the network id
    //       }
    //     ],
    //     meta: { total: '1', records_per_page: '25', current_page: '1' },
    //     success: true
    // }
    return [currency, this.safeValue(response, 'rows', {})];
  }
  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
     * @param {string|undefined} code unified currency code, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
     * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    const [currency, rows] = await this.getAssetHistoryRows(code, since, limit, params);
    return this.parseLedger(rows, currency, since, limit, params);
  }
  parseLedgerEntry(item, currency = undefined) {
    const networkizedCode = this.safeString(item, 'token');
    const currencyDefined = this.getCurrencyFromChaincode(networkizedCode, currency);
    const code = currencyDefined['code'];
    const amount = this.safeNumber(item, 'amount');
    const side = this.safeString(item, 'token_side');
    const direction = side === 'DEPOSIT' ? 'in' : 'out';
    const timestamp = this.safeTimestamp(item, 'created_time');
    const fee = this.parseTokenAndFeeTemp(item, 'fee_token', 'fee_amount');
    return {
      'id': this.safeString(item, 'id'),
      'currency': code,
      'account': this.safeString(item, 'account'),
      'referenceAccount': undefined,
      'referenceId': this.safeString(item, 'tx_id'),
      'status': this.parseTransactionStatus(this.safeString(item, 'status')),
      'amount': amount,
      'before': undefined,
      'after': undefined,
      'fee': fee,
      'direction': direction,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'type': this.parseLedgerEntryType(this.safeString(item, 'type')),
      'info': item
    };
  }
  parseLedgerEntryType(type) {
    const types = {
      'BALANCE': 'transaction',
      'COLLATERAL': 'transfer' // Funds moved between portfolios
    };

    return this.safeString(types, type, type);
  }
  getCurrencyFromChaincode(networkizedCode, currency) {
    if (currency !== undefined) {
      return currency;
    } else {
      const parts = networkizedCode.split('_');
      const partsLength = parts.length;
      const firstPart = this.safeString(parts, 0);
      let currencyId = this.safeString(parts, 1, firstPart);
      if (partsLength > 2) {
        currencyId += '_' + this.safeString(parts, 2);
      }
      currency = this.safeCurrency(currencyId);
    }
    return currency;
  }
  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchDeposits
     * @description fetch all deposits made to an account
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch deposits for
     * @param {int|undefined} limit the maximum number of deposits structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    const request = {
      'token_side': 'DEPOSIT'
    };
    return await this.fetchTransactions(code, since, limit, this.extend(request, params));
  }
  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchWithdrawals
     * @description fetch all withdrawals made from an account
     * @param {string|undefined} code unified currency code
     * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
     * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    const request = {
      'token_side': 'WITHDRAW'
    };
    return await this.fetchTransactions(code, since, limit, this.extend(request, params));
  }
  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchTransactions
     * @description fetch history of deposits and withdrawals
     * @param {string|undefined} code unified currency code for the currency of the transactions, default is undefined
     * @param {int|undefined} since timestamp in ms of the earliest transaction, default is undefined
     * @param {int|undefined} limit max number of transactions to return, default is undefined
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    const request = {
      'type': 'BALANCE'
    };
    const [currency, rows] = await this.getAssetHistoryRows(code, since, limit, this.extend(request, params));
    //
    //     {
    //         "rows":[],
    //         "meta":{
    //             "total":0,
    //             "records_per_page":25,
    //             "current_page":1
    //         },
    //         "success":true
    //     }
    //
    return this.parseTransactions(rows, currency, since, limit, params);
  }
  parseTransaction(transaction, currency = undefined) {
    // example in fetchLedger
    const networkizedCode = this.safeString(transaction, 'token');
    const currencyDefined = this.getCurrencyFromChaincode(networkizedCode, currency);
    const code = currencyDefined['code'];
    let movementDirection = this.safeStringLower(transaction, 'token_side');
    if (movementDirection === 'withdraw') {
      movementDirection = 'withdrawal';
    }
    const fee = this.parseTokenAndFeeTemp(transaction, 'fee_token', 'fee_amount');
    const addressTo = this.safeString(transaction, 'target_address');
    const addressFrom = this.safeString(transaction, 'source_address');
    const timestamp = this.safeTimestamp(transaction, 'created_time');
    return {
      'id': this.safeString2(transaction, 'id', 'withdraw_id'),
      'txid': this.safeString(transaction, 'tx_id'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'address': undefined,
      'addressFrom': addressFrom,
      'addressTo': addressTo,
      'tag': this.safeString(transaction, 'extra'),
      'type': movementDirection,
      'amount': this.safeNumber(transaction, 'amount'),
      'currency': code,
      'status': this.parseTransactionStatus(this.safeString(transaction, 'status')),
      'updated': this.safeTimestamp(transaction, 'updated_time'),
      'fee': fee,
      'info': transaction
    };
  }
  parseTransactionStatus(status) {
    const statuses = {
      'NEW': 'pending',
      'CONFIRMING': 'pending',
      'PROCESSING': 'pending',
      'COMPLETED': 'ok',
      'CANCELED': 'canceled'
    };
    return this.safeString(statuses, status, status);
  }
  async transfer(code, amount, fromAccount, toAccount, params = {}) {
    /**
     * @method
     * @name woo#transfer
     * @description transfer currency internally between wallets on the same account
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount account to transfer from
     * @param {string} toAccount account to transfer to
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    await this.loadMarkets();
    const currency = this.currency(code);
    const request = {
      'token': currency['id'],
      'amount': this.parseNumber(amount),
      'from_application_id': fromAccount,
      'to_application_id': toAccount
    };
    const response = await this.v1PrivatePostAssetMainSubTransfer(this.extend(request, params));
    //
    //     {
    //         "success": true,
    //         "id": 200
    //     }
    //
    const transfer = this.parseTransfer(response, currency);
    const transferOptions = this.safeValue(this.options, 'transfer', {});
    const fillResponseFromRequest = this.safeValue(transferOptions, 'fillResponseFromRequest', true);
    if (fillResponseFromRequest) {
      transfer['amount'] = amount;
      transfer['fromAccount'] = fromAccount;
      transfer['toAccount'] = toAccount;
    }
    return transfer;
  }
  async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchTransfers
     * @description fetch a history of internal transfers made on an account
     * @param {string|undefined} code unified currency code of the currency transferred
     * @param {int|undefined} since the earliest time in ms to fetch transfers for
     * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    const request = {
      'type': 'COLLATERAL'
    };
    const [currency, rows] = await this.getAssetHistoryRows(code, since, limit, this.extend(request, params));
    return this.parseTransfers(rows, currency, since, limit, params);
  }
  parseTransfer(transfer, currency = undefined) {
    //
    //    getAssetHistoryRows
    //        {
    //            "created_time": "1579399877.041",  // Unix epoch time in seconds
    //            "updated_time": "1579399877.041",  // Unix epoch time in seconds
    //            "id": "202029292829292",
    //            "external_id": "202029292829292",
    //            "application_id": null,
    //            "token": "ETH",
    //            "target_address": "0x31d64B3230f8baDD91dE1710A65DF536aF8f7cDa",
    //            "source_address": "0x70fd25717f769c7f9a46b319f0f9103c0d887af0",
    //            "extra": "",
    //            "type": "BALANCE",
    //            "token_side": "DEPOSIT",
    //            "amount": 1000,
    //            "tx_id": "0x8a74c517bc104c8ebad0c3c3f64b1f302ed5f8bca598ae4459c63419038106b6",
    //            "fee_token": null,
    //            "fee_amount": null,
    //            "status": "CONFIRMING"
    //        }
    //
    //    v1PrivatePostAssetMainSubTransfer
    //        {
    //            "success": true,
    //            "id": 200
    //        }
    //
    const networkizedCode = this.safeString(transfer, 'token');
    const currencyDefined = this.getCurrencyFromChaincode(networkizedCode, currency);
    const code = currencyDefined['code'];
    let movementDirection = this.safeStringLower(transfer, 'token_side');
    if (movementDirection === 'withdraw') {
      movementDirection = 'withdrawal';
    }
    let fromAccount = undefined;
    let toAccount = undefined;
    if (movementDirection === 'withdraw') {
      fromAccount = undefined;
      toAccount = 'spot';
    } else if (movementDirection === 'deposit') {
      fromAccount = 'spot';
      toAccount = undefined;
    }
    const timestamp = this.safeTimestamp(transfer, 'created_time');
    const success = this.safeValue(transfer, 'success');
    let status = undefined;
    if (success !== undefined) {
      status = success ? 'ok' : 'failed';
    }
    return {
      'id': this.safeString(transfer, 'id'),
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'currency': code,
      'amount': this.safeNumber(transfer, 'amount'),
      'fromAccount': fromAccount,
      'toAccount': toAccount,
      'status': this.parseTransferStatus(this.safeString(transfer, 'status', status)),
      'info': transfer
    };
  }
  parseTransferStatus(status) {
    const statuses = {
      'NEW': 'pending',
      'CONFIRMING': 'pending',
      'PROCESSING': 'pending',
      'COMPLETED': 'ok',
      'CANCELED': 'canceled'
    };
    return this.safeString(statuses, status, status);
  }
  async withdraw(code, amount, address, tag = undefined, params = {}) {
    /**
     * @method
     * @name woo#withdraw
     * @description make a withdrawal
     * @param {string} code unified currency code
     * @param {float} amount the amount to withdraw
     * @param {string} address the address to withdraw to
     * @param {string|undefined} tag
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    [tag, params] = this.handleWithdrawTagAndParams(tag, params);
    await this.loadMarkets();
    this.checkAddress(address);
    const currency = this.currency(code);
    const request = {
      'amount': amount,
      'address': address
    };
    if (tag !== undefined) {
      request['extra'] = tag;
    }
    const networks = this.safeValue(this.options, 'networks', {});
    const currencyNetworks = this.safeValue(currency, 'networks', {});
    const network = this.safeStringUpper(params, 'network');
    const networkId = this.safeString(networks, network, network);
    const coinNetwork = this.safeValue(currencyNetworks, networkId, {});
    const coinNetworkId = this.safeString(coinNetwork, 'id');
    if (coinNetworkId === undefined) {
      throw new _errors.BadRequest(this.id + ' withdraw() require network parameter');
    }
    request['token'] = coinNetworkId;
    const response = await this.v1PrivatePostAssetWithdraw(this.extend(request, params));
    //
    //     {
    //         "success": true,
    //         "withdraw_id": "20200119145703654"
    //     }
    //
    return this.parseTransaction(response, currency);
  }
  async repayMargin(code, amount, symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#repayMargin
     * @description repay borrowed margin and interest
     * @see https://docs.woo.org/#repay-interest
     * @param {string} code unified currency code of the currency to repay
     * @param {float} amount the amount to repay
     * @param {string|undefined} symbol not used by woo.repayMargin ()
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      symbol = market['symbol'];
    }
    const currency = this.currency(code);
    const request = {
      'token': currency['id'],
      'amount': this.currencyToPrecision(code, amount)
    };
    const response = await this.v1PrivatePostInterestRepay(this.extend(request, params));
    //
    //     {
    //         "success": true,
    //     }
    //
    const transaction = this.parseMarginLoan(response, currency);
    return this.extend(transaction, {
      'amount': amount,
      'symbol': symbol
    });
  }
  parseMarginLoan(info, currency = undefined) {
    //
    //     {
    //         "success": true,
    //     }
    //
    return {
      'id': undefined,
      'currency': this.safeCurrencyCode(undefined, currency),
      'amount': undefined,
      'symbol': undefined,
      'timestamp': undefined,
      'datetime': undefined,
      'info': info
    };
  }
  nonce() {
    return this.milliseconds();
  }
  sign(path, section = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    const version = section[0];
    const access = section[1];
    const isUdfPath = path === 'tv/history';
    const pathWithParams = this.implodeParams(path, params);
    let url = this.implodeHostname(this.urls['api'][access]);
    if (isUdfPath) {
      url += '/';
    } else {
      url += '/' + version + '/';
    }
    params = this.omit(params, this.extractParams(path));
    params = this.keysort(params);
    if (access === 'public') {
      if (isUdfPath) {
        url += pathWithParams;
      } else {
        url += access + '/' + pathWithParams;
      }
      if (Object.keys(params).length) {
        url += '?' + this.urlencode(params);
      }
    } else if (access === 'pub') {
      url += pathWithParams;
      if (Object.keys(params).length) {
        url += '?' + this.urlencode(params);
      }
    } else {
      this.checkRequiredCredentials();
      let auth = '';
      const ts = this.nonce().toString();
      url += pathWithParams;
      headers = {
        'x-api-key': this.apiKey,
        'x-api-timestamp': ts
      };
      if (version === 'v3') {
        auth = ts + method + '/' + version + '/' + pathWithParams;
        if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
          body = this.json(params);
          auth += body;
        } else {
          if (Object.keys(params).length) {
            const query = this.urlencode(params);
            url += '?' + query;
            auth += '?' + query;
          }
        }
        headers['content-type'] = 'application/json';
      } else {
        auth = this.urlencode(params);
        if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
          body = auth;
        } else {
          url += '?' + auth;
        }
        auth += '|' + ts;
        headers['content-type'] = 'application/x-www-form-urlencoded';
      }
      headers['x-api-signature'] = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (!response) {
      return; // fallback to default error handler
    }
    //
    //     400 Bad Request {"success":false,"code":-1012,"message":"Amount is required for buy market orders when margin disabled."}
    //
    const success = this.safeValue(response, 'success');
    const errorCode = this.safeString(response, 'code');
    if (!success) {
      const feedback = this.id + ' ' + this.json(response);
      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);
      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
    }
  }
  parseIncome(income, market = undefined) {
    //
    //     {
    //         "id":666666,
    //         "symbol":"PERP_BTC_USDT",
    //         "funding_rate":0.00001198,
    //         "mark_price":28941.04000000,
    //         "funding_fee":0.00069343,
    //         "payment_type":"Pay",
    //         "status":"COMPLETED",
    //         "created_time":"1653616000.666",
    //         "updated_time":"1653616000.605"
    //     }
    //
    const marketId = this.safeString(income, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const amount = this.safeNumber(income, 'funding_fee');
    const code = this.safeCurrencyCode('USD');
    const id = this.safeString(income, 'id');
    const timestamp = this.safeTimestamp(income, 'updated_time');
    const rate = this.safeNumber(income, 'funding_rate');
    return {
      'info': income,
      'symbol': symbol,
      'code': code,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'id': id,
      'amount': amount,
      'rate': rate
    };
  }
  async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    const response = await this.v1PrivateGetFundingFeeHistory(this.extend(request, params));
    //
    //     {
    //         "rows":[
    //             {
    //                 "id":666666,
    //                 "symbol":"PERP_BTC_USDT",
    //                 "funding_rate":0.00001198,
    //                 "mark_price":28941.04000000,
    //                 "funding_fee":0.00069343,
    //                 "payment_type":"Pay",
    //                 "status":"COMPLETED",
    //                 "created_time":"1653616000.666",
    //                 "updated_time":"1653616000.605"
    //             }
    //         ],
    //         "meta":{
    //             "total":235,
    //             "records_per_page":25,
    //             "current_page":1
    //         },
    //         "success":true
    //     }
    //
    const result = this.safeValue(response, 'rows', []);
    return this.parseIncomes(result, market, since, limit);
  }
  parseFundingRate(fundingRate, market = undefined) {
    //
    //         {
    //             "symbol":"PERP_AAVE_USDT",
    //             "est_funding_rate":-0.00003447,
    //             "est_funding_rate_timestamp":1653633959001,
    //             "last_funding_rate":-0.00002094,
    //             "last_funding_rate_timestamp":1653631200000,
    //             "next_funding_time":1653634800000
    //         }
    //
    //
    const symbol = this.safeString(fundingRate, 'symbol');
    market = this.market(symbol);
    const nextFundingTimestamp = this.safeInteger(fundingRate, 'next_funding_time');
    const estFundingRateTimestamp = this.safeInteger(fundingRate, 'est_funding_rate_timestamp');
    const lastFundingRateTimestamp = this.safeInteger(fundingRate, 'last_funding_rate_timestamp');
    return {
      'info': fundingRate,
      'symbol': market['symbol'],
      'markPrice': undefined,
      'indexPrice': undefined,
      'interestRate': this.parseNumber('0'),
      'estimatedSettlePrice': undefined,
      'timestamp': estFundingRateTimestamp,
      'datetime': this.iso8601(estFundingRateTimestamp),
      'fundingRate': this.safeNumber(fundingRate, 'est_funding_rate'),
      'fundingTimestamp': nextFundingTimestamp,
      'fundingDatetime': this.iso8601(nextFundingTimestamp),
      'nextFundingRate': undefined,
      'nextFundingTimestamp': undefined,
      'nextFundingDatetime': undefined,
      'previousFundingRate': this.safeNumber(fundingRate, 'last_funding_rate'),
      'previousFundingTimestamp': lastFundingRateTimestamp,
      'previousFundingDatetime': this.iso8601(lastFundingRateTimestamp)
    };
  }
  async fetchFundingRate(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PublicGetFundingRateSymbol(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "timestamp":1653640572711,
    //         "symbol":"PERP_BTC_USDT",
    //         "est_funding_rate":0.00000738,
    //         "est_funding_rate_timestamp":1653640559003,
    //         "last_funding_rate":0.00000629,
    //         "last_funding_rate_timestamp":1653638400000,
    //         "next_funding_time":1653642000000
    //     }
    //
    return this.parseFundingRate(response, market);
  }
  async fetchFundingRates(symbols = undefined, params = {}) {
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const response = await this.v1PublicGetFundingRates(params);
    //
    //     {
    //         "success":true,
    //         "rows":[
    //             {
    //                 "symbol":"PERP_AAVE_USDT",
    //                 "est_funding_rate":-0.00003447,
    //                 "est_funding_rate_timestamp":1653633959001,
    //                 "last_funding_rate":-0.00002094,
    //                 "last_funding_rate_timestamp":1653631200000,
    //                 "next_funding_time":1653634800000
    //             }
    //         ],
    //         "timestamp":1653633985646
    //     }
    //
    const rows = this.safeValue(response, 'rows', {});
    const result = this.parseFundingRates(rows);
    return this.filterByArray(result, 'symbol', symbols);
  }
  async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    if (symbol !== undefined) {
      const market = this.market(symbol);
      symbol = market['symbol'];
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = this.parseToInt(since / 1000);
    }
    const response = await this.v1PublicGetFundingRateHistory(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "meta":{
    //             "total":2464,
    //             "records_per_page":25,
    //             "current_page":1
    //         },
    //         "rows":[
    //             {
    //                 "symbol":"PERP_BTC_USDT",
    //                 "funding_rate":0.00000629,
    //                 "funding_rate_timestamp":1653638400000,
    //                 "next_funding_time":1653642000000
    //             }
    //         ],
    //         "timestamp":1653640814885
    //     }
    //
    const result = this.safeValue(response, 'rows');
    const rates = [];
    for (let i = 0; i < result.length; i++) {
      const entry = result[i];
      const marketId = this.safeString(entry, 'symbol');
      const timestamp = this.safeInteger(entry, 'funding_rate_timestamp');
      rates.push({
        'info': entry,
        'symbol': this.safeSymbol(marketId),
        'fundingRate': this.safeNumber(entry, 'funding_rate'),
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp)
      });
    }
    const sorted = this.sortBy(rates, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  async fetchLeverage(symbol, params = {}) {
    await this.loadMarkets();
    const response = await this.v3PrivateGetAccountinfo(params);
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "applicationId": "dsa",
    //             "account": "dsa",
    //             "alias": "haha",
    //             "accountMode": "MARGIN",
    //             "leverage": 1,
    //             "takerFeeRate": 1,
    //             "makerFeeRate": 1,
    //             "interestRate": 1,
    //             "futuresTakerFeeRate": 1,
    //             "futuresMakerFeeRate": 1,
    //             "otpauth": true,
    //             "marginRatio": 1,
    //             "openMarginRatio": 1,
    //             "initialMarginRatio": 1,
    //             "maintenanceMarginRatio": 1,
    //             "totalCollateral": 1,
    //             "freeCollateral": 1,
    //             "totalAccountValue": 1,
    //             "totalVaultValue": 1,
    //             "totalStakingValue": 1
    //         },
    //         "timestamp": 1673323685109
    //     }
    //
    const result = this.safeValue(response, 'data');
    const leverage = this.safeNumber(result, 'leverage');
    return {
      'info': response,
      'leverage': leverage
    };
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    await this.loadMarkets();
    if (leverage !== 1 && leverage !== 2 && leverage !== 3 && leverage !== 4 && leverage !== 5 && leverage !== 10 && leverage !== 15 && leverage !== 20 && leverage !== 50) {
      throw new _errors.BadRequest(this.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
    }
    const request = {
      'leverage': leverage
    };
    return await this.v1PrivatePostClientLeverage(this.extend(request, params));
  }
  async fetchPosition(symbol = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PrivateGetPositionSymbol(this.extend(request, params));
    //
    //     {
    //         "symbol":"PERP_ETC_USDT",
    //         "holding":0.0,
    //         "pnl_24_h":0,
    //         "settle_price":0.0,
    //         "average_open_price":0,
    //         "success":true,
    //         "mark_price":22.6955,
    //         "pending_short_qty":0.0,
    //         "pending_long_qty":0.0,
    //         "fee_24_h":0,
    //         "timestamp":"1652231044.920"
    //     }
    //
    return this.parsePosition(response, market);
  }
  async fetchPositions(symbols = undefined, params = {}) {
    await this.loadMarkets();
    const response = await this.v3PrivateGetPositions(params);
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "positions": [
    //                 {
    //                     "symbol": "0_symbol",
    //                     "holding": 1,
    //                     "pendingLongQty": 0,
    //                     "pendingShortQty": 1,
    //                     "settlePrice": 1,
    //                     "averageOpenPrice": 1,
    //                     "pnl24H": 1,
    //                     "fee24H": 1,
    //                     "markPrice": 1,
    //                     "estLiqPrice": 1,
    //                     "timestamp": 12321321
    //                 }
    //             ]
    //         },
    //         "timestamp": 1673323880342
    //     }
    //
    const result = this.safeValue(response, 'data', {});
    const positions = this.safeValue(result, 'positions', []);
    return this.parsePositions(positions, symbols);
  }
  parsePosition(position, market = undefined) {
    //
    //     {
    //         "symbol": "0_symbol",
    //         "holding": 1,
    //         "pendingLongQty": 0,
    //         "pendingShortQty": 1,
    //         "settlePrice": 1,
    //         "averageOpenPrice": 1,
    //         "pnl24H": 1,
    //         "fee24H": 1,
    //         "markPrice": 1,
    //         "estLiqPrice": 1,
    //         "timestamp": 12321321
    //     }
    //
    const contract = this.safeString(position, 'symbol');
    market = this.safeMarket(contract, market);
    const size = this.safeString(position, 'holding');
    let side = undefined;
    if (_Precise.Precise.stringGt(size, '0')) {
      side = 'long';
    } else {
      side = 'short';
    }
    const contractSize = this.safeString(market, 'contractSize');
    const markPrice = this.safeString(position, 'markPrice');
    const timestamp = this.safeTimestamp(position, 'timestamp');
    const entryPrice = this.safeString(position, 'averageOpenPrice');
    const priceDifference = _Precise.Precise.stringSub(markPrice, entryPrice);
    const unrealisedPnl = _Precise.Precise.stringMul(priceDifference, size);
    return {
      'info': position,
      'id': market['symbol'] + ':' + side,
      'symbol': market['symbol'],
      'notional': undefined,
      'marginMode': 'cross',
      'liquidationPrice': this.safeNumber(position, 'estLiqPrice'),
      'entryPrice': this.parseNumber(entryPrice),
      'realizedPnl': this.safeString(position, 'pnl24H'),
      'unrealizedPnl': this.parseNumber(unrealisedPnl),
      'percentage': undefined,
      'contracts': this.parseNumber(size),
      'contractSize': this.parseNumber(contractSize),
      'markPrice': this.parseNumber(markPrice),
      'side': side,
      'hedged': false,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'maintenanceMargin': undefined,
      'maintenanceMarginPercentage': undefined,
      'collateral': undefined,
      'initialMargin': undefined,
      'initialMarginPercentage': undefined,
      'leverage': undefined,
      'marginRatio': undefined
    };
  }
  defaultNetworkCodeForCurrency(code) {
    const currencyItem = this.currency(code);
    const networks = currencyItem['networks'];
    const networkKeys = Object.keys(networks);
    for (let i = 0; i < networkKeys.length; i++) {
      const network = networkKeys[i];
      if (network === 'ETH') {
        return network;
      }
    }
    // if it was not returned according to above options, then return the first network of currency
    return this.safeValue(networkKeys, 0);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name woo#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the paymium api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PublicGetFuturesSymbol(this.extend(request, params));
    //
    // {
    //   "symbol": "BTC-USDT",
    //   "priceChange": "10.00",
    //   "priceChangePercent": "10",
    //   "lastPrice": "5738.23",
    //   "lastVolume": "31.21",
    //   "highPrice": "5938.23",
    //   "lowPrice": "5238.23",
    //   "volume": "23211231.13",
    //   "dayVolume": "213124412412.47",
    //   "openPrice": "5828.32"
    // }
    //
    const ticker = this.safeValue(response, 'info');
    return this.parseTicker(ticker, market);
  }
  parseTicker(ticker, market = undefined) {
    //
    // {
    //   "symbol": "PERP_BTC_USDT",
    //   "index_price": 56727.31344564,
    //   "mark_price": 56727.31344564,
    //   "est_funding_rate": 0.12345689,
    //   "last_funding_rate": 0.12345689,
    //   "next_funding_time": 1567411795000,
    //   "open_interest": 0.12345689,
    //   "24h_open": 0.16112,
    //   "24h_close": 0.32206,
    //   "24h_high": 0.33000,
    //   "24h_low": 0.14251,
    //   "24h_volume": 89040821.98,
    //   "24h_amount": 22493062.21
    // }
    //
    const symbol = this.safeSymbol(undefined, market);
    const timestamp = this.milliseconds();
    const baseVolume = this.safeString(ticker, '24h_volume');
    const openFloat = this.safeFloat(ticker, '24h_open');
    const currentFloat = this.safeFloat(ticker, 'index_price');
    const percentage = currentFloat / openFloat * 100;
    const last = this.safeString(ticker, 'index_price');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.safeString(ticker, '24h_high'),
      'low': this.safeString(ticker, '24h_low'),
      'bid': this.safeString(ticker, 'index_price'),
      'bidVolume': undefined,
      'ask': this.safeString(ticker, 'index_price'),
      'askVolume': undefined,
      'open': this.safeString(ticker, '24h_open'),
      'close': last,
      'last': last,
      'mark': last,
      'previousClose': undefined,
      'change': undefined,
      'percentage': this.numberToString(percentage),
      'average': undefined,
      'baseVolume': baseVolume,
      'info': ticker
    }, market);
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const leverageInfo = await this.fetchLeverage(market['id']);
    const leverage = this.safeInteger(leverageInfo, 'leverage');
    const accountConfig = {
      'marginMode': 'cross',
      'positionMode': 'oneway',
      'markets': {},
      'leverage': leverage
    };
    const leverageConfigs = accountConfig['markets'];
    leverageConfigs[market['symbol']] = {
      'leverage': leverage,
      'buyLeverage': leverage,
      'sellLeverage': leverage
    };
    return accountConfig;
  }
}
exports.default = woo;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/errors.js":5,"./base/functions/number.js":11}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exchange = require("./base/Exchange.js");
var _errors = require("./base/errors.js");
var _Precise = require("./base/Precise.js");
var _number = require("./base/functions/number.js");
var _Signer = require("./base/Signer.js");
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
class woofi extends _Exchange.Exchange {
  describe() {
    return this.deepExtend(super.describe(), {
      'id': 'woofi',
      'name': 'WOOFI',
      'countries': ['KY'],
      'rateLimit': 100,
      'version': 'v1',
      'certified': false,
      'pro': true,
      'hostname': 'dex.woo.org',
      'has': {
        'CORS': undefined,
        'spot': true,
        'margin': true,
        'swap': true,
        'future': false,
        'option': false,
        'addMargin': false,
        'borrowMargin': false,
        'cancelAllOrders': true,
        'cancelOrder': true,
        'cancelWithdraw': false,
        'createDepositAddress': false,
        'createMarketOrder': false,
        'createOrder': true,
        'createReduceOnlyOrder': true,
        'createStopLimitOrder': false,
        'createStopMarketOrder': false,
        'createStopOrder': false,
        'fetchAccounts': true,
        'fetchBalance': true,
        'fetchCanceledOrders': false,
        'fetchClosedOrder': false,
        'fetchClosedOrders': false,
        'fetchCurrencies': true,
        'fetchDepositAddress': false,
        'fetchDeposits': true,
        'fetchFundingHistory': true,
        'fetchFundingRate': true,
        'fetchFundingRateHistory': true,
        'fetchFundingRates': true,
        'fetchIndexOHLCV': false,
        'fetchLedger': true,
        'fetchLeverage': true,
        'fetchMarginMode': false,
        'fetchMarkets': true,
        'fetchMarkOHLCV': false,
        'fetchMyTrades': true,
        'fetchOHLCV': true,
        'fetchOpenInterestHistory': false,
        'fetchOpenOrder': false,
        'fetchOpenOrders': false,
        'fetchOrder': true,
        'fetchOrderBook': true,
        'fetchOrders': true,
        'fetchOrderTrades': true,
        'fetchPosition': true,
        'fetchPositionMode': false,
        'fetchPositions': true,
        'fetchPremiumIndexOHLCV': false,
        'fetchStatus': false,
        'fetchTicker': false,
        'fetchTickers': false,
        'fetchTime': false,
        'fetchTrades': true,
        'fetchTradingFee': false,
        'fetchTradingFees': false,
        'fetchTransactions': true,
        'fetchTransfers': true,
        'fetchWithdrawals': true,
        'reduceMargin': false,
        'repayMargin': true,
        'setLeverage': true,
        'setMargin': false,
        'transfer': true,
        'withdraw': true // exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs: https://kronosresearch.github.io/wootrade-documents/#token-withdraw
      },

      'timeframes': {
        '1m': '1',
        '3m': '3',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '2h',
        '4h': '4h',
        '8h': '8h',
        '12h': '12h',
        '1d': '1D',
        '3d': '3D',
        '1w': '1W',
        '1M': '1M'
      },
      'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
        'api': {
          'pub': 'https://api-evm.orderly.org',
          'public': 'https://api-evm.orderly.org',
          'private': 'https://api-evm.orderly.org'
        },
        'test': {
          'pub': 'https://testnet-api-evm.orderly.org',
          'public': 'https://testnet-api-evm.orderly.org',
          'private': 'https://testnet-api-evm.orderly.org'
        },
        'www': 'https://woo.org/',
        'doc': ['https://docs.woo.org/'],
        'fees': ['https://support.woo.org/hc/en-001/articles/4404611795353--Trading-Fees'],
        'referral': 'https://referral.woo.org/BAJS6oNmZb3vi3RGA'
      },
      'api': {
        'v1': {
          'pub': {
            'get': {
              'hist/kline': 10,
              'hist/trades': 1
            }
          },
          'public': {
            'get': {
              'info': 1,
              'info/{symbol}': 1,
              'system_info': 1,
              'kline': 1,
              'market_trades': 1,
              'token': 1,
              'token_network': 1,
              'funding_rates': 1,
              'funding_rate/{symbol}': 1,
              'funding_rate_history': 1,
              'futures': 1,
              'futures/{symbol}': 1,
              'tv/history': 1
            }
          },
          'private': {
            'get': {
              'client/token': 1,
              'order/{oid}': 1,
              'client/order/{client_order_id}': 1,
              'orders': 1,
              'orderbook/{symbol}': 1,
              'client/trade/{tid}': 1,
              'order/{oid}/trades': 1,
              'client/trades': 1,
              'client/info': 60,
              'asset/deposit': 10,
              'asset/history': 60,
              'sub_account/all': 60,
              'sub_account/assets': 60,
              'token_interest': 60,
              'token_interest/{token}': 60,
              'interest/history': 60,
              'interest/repay': 60,
              'funding_fee/history': 30,
              'positions': 3.33,
              'position/{symbol}': 3.33,
              'client/holding': 1,
              'algo/order/{oid}': 1,
              'algo/orders': 1,
              'balances': 1,
              'accountinfo': 60,
              'buypower': 1
            },
            'post': {
              'order': 5,
              'asset/main_sub_transfer': 30,
              'asset/withdraw': 30,
              'interest/repay': 60,
              'client/account_mode': 120,
              'client/leverage': 120,
              'algo/order': 5
            },
            'put': {
              'order': 2,
              'order/client/{oid}': 2,
              'algo/order': 2,
              'algo/order/client/{oid}': 2
            },
            'delete': {
              'order': 1,
              'client/order': 1,
              'orders': 1,
              'asset/withdraw': 120,
              'algo/order': 1,
              'algo/orders/pending': 1,
              'algo/orders/pending/{symbol}': 1,
              'orders/pending': 1
            }
          }
        }
      },
      'fees': {
        'trading': {
          'tierBased': true,
          'percentage': true,
          'maker': this.parseNumber('0.0002'),
          'taker': this.parseNumber('0.0005')
        }
      },
      'options': {
        'createMarketBuyOrderRequiresPrice': true,
        // these network aliases require manual mapping here
        'network-aliases-for-tokens': {
          'HT': 'ERC20',
          'OMG': 'ERC20',
          'UATOM': 'ATOM',
          'ZRX': 'ZRX'
        },
        'networks': {
          'TRX': 'TRON',
          'TRC20': 'TRON',
          'ERC20': 'ETH',
          'BEP20': 'BSC'
        },
        // override defaultNetworkCodePriorities for a specific currency
        'defaultNetworkCodeForCurrencies': {
          // 'USDT': 'TRC20',
          // 'BTC': 'BTC',
        },
        'transfer': {
          'fillResponseFromRequest': true
        },
        'brokerId': 'ab82cb09-cfec-4473-80a3-b740779d0644'
      },
      'commonCurrencies': {},
      'exceptions': {
        'exact': {
          '-1000': _errors.ExchangeError,
          '-1001': _errors.AuthenticationError,
          '-1002': _errors.AuthenticationError,
          '-1003': _errors.RateLimitExceeded,
          '-1004': _errors.BadRequest,
          '-1005': _errors.BadRequest,
          '-1006': _errors.BadRequest,
          '-1007': _errors.BadRequest,
          '-1008': _errors.InvalidOrder,
          '-1009': _errors.BadRequest,
          '-1011': _errors.ExchangeError,
          '-1012': _errors.BadRequest,
          '-1101': _errors.InvalidOrder,
          '-1102': _errors.InvalidOrder,
          '-1103': _errors.InvalidOrder,
          '-1104': _errors.InvalidOrder,
          '-1105': _errors.InvalidOrder // { "code": -1105,  "message": "Price is X% too high or X% too low from the mid price." }
        },

        'broad': {
          'symbol must not be blank': _errors.BadRequest,
          'The token is not supported': _errors.BadRequest,
          'Your order and symbol are not valid or already canceled': _errors.BadRequest,
          'Insufficient WOO. Please enable margin trading for leverage trading': _errors.BadRequest // when selling insufficent token [-1012]
        }
      },

      'precisionMode': _number.TICK_SIZE
    });
  }
  async fetchMarkets(params = {}) {
    /**
     * @method
     * @name woo#fetchMarkets
     * @description retrieves data on all markets for woo
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @returns {[object]} an array of objects representing market data
     */
    const response = await this.v1PublicGetInfo(params);
    //
    // {
    //     rows: [
    //         {
    //             symbol: "SPOT_AAVE_USDT",
    //             quote_min: 0,
    //             quote_max: 100000,
    //             quote_tick: 0.01,
    //             base_min: 0.01,
    //             base_max: 7284,
    //             base_tick: 0.0001,
    //             min_notional: 10,
    //             price_range: 0.1,
    //             created_time: "0",
    //             updated_time: "1639107647.988",
    //             is_stable: 0
    //         },
    //         ...
    //     success: true
    // }
    //
    const result = [];
    const data = this.safeValue(response, 'data', {});
    const rows = this.safeValue(data, 'rows', []);
    for (let i = 0; i < rows.length; i++) {
      const market = rows[i];
      const marketId = this.safeString(market, 'symbol');
      const parts = marketId.split('_');
      let marketType = this.safeStringLower(parts, 0);
      const isSpot = marketType === 'spot';
      const isSwap = marketType === 'perp';
      const baseId = this.safeString(parts, 1);
      const quoteId = this.safeString(parts, 2);
      const base = this.safeCurrencyCode(baseId);
      const quote = this.safeCurrencyCode(quoteId);
      let settleId = undefined;
      let settle = undefined;
      let symbol = base + '/' + quote;
      let contractSize = undefined;
      let linear = undefined;
      if (isSpot) {
        continue;
      }
      if (isSwap) {
        settleId = this.safeString(parts, 2);
        settle = this.safeCurrencyCode(settleId);
        symbol = base + '/' + quote + ':' + settle;
        contractSize = this.parseNumber('1');
        marketType = 'swap';
        linear = true;
      }
      result.push({
        'id': marketId,
        'symbol': symbol,
        'base': base,
        'quote': quote,
        'settle': settle,
        'baseId': baseId,
        'quoteId': quoteId,
        'settleId': settleId,
        'type': marketType,
        'spot': isSpot,
        'margin': true,
        'swap': isSwap,
        'future': false,
        'option': false,
        'active': undefined,
        'contract': isSwap,
        'linear': linear,
        'inverse': undefined,
        'contractSize': contractSize,
        'expiry': undefined,
        'expiryDatetime': undefined,
        'strike': undefined,
        'optionType': undefined,
        'precision': {
          'amount': this.safeNumber(market, 'base_tick'),
          'price': this.safeNumber(market, 'quote_tick')
        },
        'limits': {
          'leverage': {
            'min': undefined,
            'max': undefined
          },
          'amount': {
            'min': this.safeNumber(market, 'base_min'),
            'max': this.safeNumber(market, 'base_max')
          },
          'price': {
            'min': this.safeNumber(market, 'quote_min'),
            'max': this.safeNumber(market, 'quote_max')
          },
          'cost': {
            'min': this.safeNumber(market, 'min_notional'),
            'max': undefined
          }
        },
        'info': market
      });
    }
    return result;
  }
  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
     * @param {int|undefined} limit the maximum amount of trades to fetch
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' fetchTrades() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      request['limit'] = limit;
    }
    const response = await this.v1PublicGetMarketTrades(this.extend(request, params));
    //
    // {
    //     success: true,
    //     rows: [
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "SELL",
    //             executed_price: 46222.35,
    //             executed_quantity: 0.0012,
    //             executed_timestamp: "1641241162.329"
    //         },
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "SELL",
    //             executed_price: 46222.35,
    //             executed_quantity: 0.0012,
    //             executed_timestamp: "1641241162.329"
    //         },
    //         {
    //             symbol: "SPOT_BTC_USDT",
    //             side: "BUY",
    //             executed_price: 46224.32,
    //             executed_quantity: 0.00039,
    //             executed_timestamp: "1641241162.287"
    //         },
    //         ...
    //      ]
    // }
    //
    const resultResponse = this.safeValue(response, 'rows', {});
    return this.parseTrades(resultResponse, market, since, limit);
  }
  parseTrade(trade, market = undefined) {
    //
    // public/market_trades
    //
    //     {
    //         symbol: "SPOT_BTC_USDT",
    //         side: "SELL",
    //         executed_price: 46222.35,
    //         executed_quantity: 0.0012,
    //         executed_timestamp: "1641241162.329"
    //     }
    //
    // fetchOrderTrades, fetchOrder
    //
    //     {
    //         id: '99119876',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641481113.084',
    //         order_id: '87001234',
    //         order_tag: 'default', <-- this param only in "fetchOrderTrades"
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //     }
    //
    const isFromFetchOrder = ('id' in trade);
    const timestamp = this.safeTimestamp(trade, 'executed_timestamp');
    const marketId = this.safeString(trade, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString(trade, 'executed_price');
    const amount = this.safeString(trade, 'executed_quantity');
    const order_id = this.safeString(trade, 'order_id');
    const fee = this.parseTokenAndFeeTemp(trade, 'fee_asset', 'fee');
    const cost = _Precise.Precise.stringMul(price, amount);
    const side = this.safeStringLower(trade, 'side');
    const id = this.safeString(trade, 'id');
    let takerOrMaker = undefined;
    if (isFromFetchOrder) {
      const isMaker = this.safeString(trade, 'is_maker') === '1';
      takerOrMaker = isMaker ? 'maker' : 'taker';
    }
    return this.safeTrade({
      'id': id,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'symbol': symbol,
      'side': side,
      'price': price,
      'amount': amount,
      'cost': cost,
      'order': order_id,
      'takerOrMaker': takerOrMaker,
      'type': undefined,
      'fee': fee,
      'info': trade
    }, market);
  }
  parseTokenAndFeeTemp(item, feeTokenKey, feeAmountKey) {
    const feeCost = this.safeString(item, feeAmountKey);
    let fee = undefined;
    if (feeCost !== undefined) {
      const feeCurrencyId = this.safeString(item, feeTokenKey);
      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
      fee = {
        'cost': feeCost,
        'currency': feeCurrencyCode
      };
    }
    return fee;
  }
  async fetchCurrencies(params = {}) {
    /**
     * @method
     * @name woo#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an associative dictionary of currencies
     */
    const result = {};
    const tokenResponse = await this.v1PublicGetToken(params);
    //
    // {
    //     rows: [
    //         {
    //             token: "ETH_USDT",
    //             fullname: "Tether",
    //             decimals: 6,
    //             balance_token: "USDT",
    //             created_time: "0",
    //             updated_time: "0"
    //         },
    //         {
    //             token: "BSC_USDT",
    //             fullname: "Tether",
    //             decimals: 18,
    //             balance_token: "USDT",
    //             created_time: "0",
    //             updated_time: "0"
    //         },
    //         {
    //             token: "ZEC",
    //             fullname: "ZCash",
    //             decimals: 8,
    //             balance_token: "ZEC",
    //             created_time: "0",
    //             updated_time: "0"
    //         },
    //         ...
    //     ],
    //     success: true
    // }
    //
    // only make one request for currrencies...
    // const tokenNetworkResponse = await this.v1PublicGetTokenNetwork (params);
    //
    // {
    //     rows: [
    //         {
    //             protocol: "ERC20",
    //             token: "USDT",
    //             name: "Ethereum",
    //             minimum_withdrawal: 30,
    //             withdrawal_fee: 25,
    //             allow_deposit: 1,
    //             allow_withdraw: 1
    //         },
    //         {
    //             protocol: "TRC20",
    //             token: "USDT",
    //             name: "Tron",
    //             minimum_withdrawal: 30,
    //             withdrawal_fee: 1,
    //             allow_deposit: 1,
    //             allow_withdraw: 1
    //         },
    //         ...
    //     ],
    //     success: true
    // }
    //
    const tokenRows = this.safeValue(tokenResponse, 'rows', []);
    const networksByCurrencyId = this.groupBy(tokenRows, 'balance_token');
    const currencyIds = Object.keys(networksByCurrencyId);
    for (let i = 0; i < currencyIds.length; i++) {
      const currencyId = currencyIds[i];
      const networks = networksByCurrencyId[currencyId];
      const code = this.safeCurrencyCode(currencyId);
      let name = undefined;
      let minPrecision = undefined;
      const resultingNetworks = {};
      for (let j = 0; j < networks.length; j++) {
        const network = networks[j];
        name = this.safeString(network, 'fullname');
        const networkId = this.safeString(network, 'token');
        const splitted = networkId.split('_');
        const unifiedNetwork = splitted[0];
        const precision = this.parsePrecision(this.safeString(network, 'decimals'));
        if (precision !== undefined) {
          minPrecision = minPrecision === undefined ? precision : _Precise.Precise.stringMin(precision, minPrecision);
        }
        resultingNetworks[unifiedNetwork] = {
          'id': networkId,
          'network': unifiedNetwork,
          'limits': {
            'withdraw': {
              'min': undefined,
              'max': undefined
            },
            'deposit': {
              'min': undefined,
              'max': undefined
            }
          },
          'active': undefined,
          'deposit': undefined,
          'withdraw': undefined,
          'fee': undefined,
          'precision': this.parseNumber(precision),
          'info': network
        };
      }
      result[code] = {
        'id': currencyId,
        'name': name,
        'code': code,
        'precision': this.parseNumber(minPrecision),
        'active': undefined,
        'fee': undefined,
        'networks': resultingNetworks,
        'deposit': undefined,
        'withdraw': undefined,
        'limits': {
          'deposit': {
            'min': undefined,
            'max': undefined
          },
          'withdraw': {
            'min': undefined,
            'max': undefined
          }
        },
        'info': networks
      };
    }
    return result;
  }
  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
    /**
     * @method
     * @name woo#createOrder
     * @description create a trade order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    // quick order:
    //
    // BTC/USDT:USDT
    // limit
    // buy
    // 4.0
    // 29116.0
    // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
    //
    // limit order:
    //
    // BTC/USDT:USDT
    // limit
    // buy
    // 4.0
    // 28520.0
    // {'positionMode': 'unknown', 'timeInForce': 'PO', 'reduceOnly': False}
    //
    // no post = 'timeInForce': 'GTC',
    //
    // SL
    //
    // BTC/USDT:USDT
    // stop
    // sell
    // 20.0
    // None
    // {'positionMode': 'unknown', 'stopPrice': 27663.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    //
    // TP
    //
    // BTC/USDT:USDT
    // stop
    // sell
    // 20.0
    // None
    // {'positionMode': 'unknown', 'stopPrice': 30150.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    //
    // LIMIT TP
    //
    // BTC/USDT:USDT
    // stopLimit
    // sell
    // 4.0
    // 33000.0
    // {'positionMode': 'unknown', 'stopPrice': 32000.0, 'timeInForce': 'GTC', 'trigger': 'Last', 'close': True, 'basePrice': 29024.0}
    const reduceOnly = this.safeValue2(params, 'reduceOnly', 'close');
    const orderType = type.toUpperCase();
    if (orderType === 'STOP' || orderType === 'STOPLIMIT') {
      await this.loadMarkets();
      const market = this.market(symbol);
      const orderSide = side.toUpperCase();
      let algoOrderType = 'MARKET';
      if (orderType !== 'STOP') {
        algoOrderType = 'LIMIT';
      }
      const triggerPrice = this.safeValue2(params, 'stopPrice', 'triggerPrice');
      const request = {
        'symbol': market['id'],
        'algo_type': 'STOP',
        'type': algoOrderType,
        'side': orderSide
      };
      if (reduceOnly) {
        request['reduce_only'] = reduceOnly;
      }
      // if (price !== undefined) {
      //     request['price'] = this.priceToPrecision (symbol, price);
      // }
      request['trigger_price'] = triggerPrice;
      request['trigger_price_type'] = 'MARK_PRICE';
      request['quantity'] = this.amountToPrecision(symbol, amount);
      params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
      // const response = await (this as any).v1PrivatePostAlgoOrder (this.extend (request, params));
      request['order_tag'] = 'TEALSTREET';
      const response = await this.v1PrivatePostAlgoOrder(request);
      // {
      //     success: true,
      //     timestamp: '1641383206.489',
      //     order_id: '86980774',
      //     order_type: 'LIMIT',
      //     order_price: '1', // null for 'MARKET' order
      //     order_quantity: '12', // null for 'MARKET' order
      //     order_amount: null, // NOT-null for 'MARKET' order
      //     client_order_id: '0'
      // }
      // response -> data -> rows -> [0]
      const data = this.safeValue(response, 'data');
      const rows = this.safeValue(data, 'rows', []);
      // return this.extend (
      //     this.parseOrder (rows[0], market),
      //     { 'type': type }
      // );
      return this.extend(this.parseOrder(rows[0], market), {
        'status': 'open'
      });
    } else {
      await this.loadMarkets();
      const market = this.market(symbol);
      const orderSide = side.toUpperCase();
      const request = {
        'symbol': market['id'],
        'order_type': orderType,
        'side': orderSide
      };
      const isMarket = orderType === 'MARKET';
      const timeInForce = this.safeStringLower(params, 'timeInForce');
      const postOnly = this.isPostOnly(isMarket, undefined, params);
      if (postOnly) {
        request['order_type'] = 'POST_ONLY';
      } else if (timeInForce === 'fok') {
        request['order_type'] = 'FOK';
      } else if (timeInForce === 'ioc') {
        request['order_type'] = 'IOC';
      }
      if (reduceOnly) {
        request['reduce_only'] = reduceOnly;
      }
      if (price !== undefined) {
        request['order_price'] = this.priceToPrecision(symbol, price);
      }
      request['order_quantity'] = this.amountToPrecision(symbol, amount);
      const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
      if (clientOrderId !== undefined) {
        request['client_order_id'] = clientOrderId;
      }
      request['order_tag'] = 'TEALSTREET';
      params = this.omit(params, ['clOrdID', 'clientOrderId', 'postOnly', 'timeInForce']);
      const response = await this.v1PrivatePostOrder(this.extend(request, params));
      // {
      //     success: true,
      //     timestamp: '1641383206.489',
      //     order_id: '86980774',
      //     order_type: 'LIMIT',
      //     order_price: '1', // null for 'MARKET' order
      //     order_quantity: '12', // null for 'MARKET' order
      //     order_amount: null, // NOT-null for 'MARKET' order
      //     client_order_id: '0'
      // }
      return this.extend(this.parseOrder(response, market), {
        'type': type,
        'status': 'open'
      });
    }
  }
  async cancelOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#cancelOrder
     * @description cancels an open order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');
    }
    await this.loadMarkets();
    if (params['type'] === 'stop') {
      return this.cancelAlgoOrder(id, symbol, params);
    } else {
      return this.cancelRegularOrder(id, symbol, params);
    }
  }
  async cancelAlgoOrder(id, symbol = undefined, params = {}) {
    const request = {};
    request['order_id'] = id;
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    request['symbol'] = market['id'];
    const response = await this.v1PrivateDeleteAlgoOrder(this.extend(request, params));
    //
    // { success: true, status: 'CANCEL_SENT' }
    //
    const extendParams = {
      'symbol': symbol
    };
    extendParams['id'] = id;
    return this.extend(this.parseOrder(response), extendParams);
  }
  async cancelRegularOrder(id, symbol = undefined, params = {}) {
    const request = {};
    const clientOrderIdUnified = this.safeString2(params, 'clOrdID', 'clientOrderId');
    const clientOrderIdExchangeSpecific = this.safeString2(params, 'client_order_id', clientOrderIdUnified);
    const isByClientOrder = clientOrderIdExchangeSpecific !== undefined;
    if (isByClientOrder) {
      request['client_order_id'] = clientOrderIdExchangeSpecific;
      params = this.omit(params, ['clOrdID', 'clientOrderId', 'client_order_id', 'type']);
    } else {
      params = this.omit(params, ['type']);
      request['order_id'] = id;
    }
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    request['symbol'] = market['id'];
    const response = await this.v1PrivateDeleteOrder(this.extend(request, params));
    //
    // { success: true, status: 'CANCEL_SENT' }
    //
    const extendParams = {
      'symbol': symbol
    };
    // if (isByClientOrder) {
    //     extendParams['client_order_id'] = clientOrderIdExchangeSpecific;
    // } else {
    extendParams['id'] = id;
    // }
    return this.extend(this.parseOrder(response), extendParams);
  }
  async cancelAllOrders(symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#cancelAllOrders
     * @description cancel all open orders in a market
     * @param {string|undefined} symbol unified market symbol
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    if (symbol === undefined) {
      throw new _errors.ArgumentsRequired(this.id + ' canelOrders() requires a symbol argument');
    }
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PrivateDeleteOrders(this.extend(request, params));
    await this.v1PrivateDeleteAlgoOrdersPending(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "status":"CANCEL_ALL_SENT"
    //     }
    //
    return response;
  }
  async fetchOrder(id, symbol = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrder
     * @description fetches information on an order made by the user
     * @param {string|undefined} symbol unified symbol of the market the order was made in
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const market = symbol !== undefined ? this.market(symbol) : undefined;
    const request = {};
    const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');
    let chosenSpotMethod = undefined;
    if (clientOrderId) {
      chosenSpotMethod = 'v1PrivateGetClientOrderClientOrderId';
      request['client_order_id'] = clientOrderId;
    } else {
      chosenSpotMethod = 'v1PrivateGetOrderOid';
      request['oid'] = id;
    }
    const response = await this[chosenSpotMethod](this.extend(request, params));
    //
    // {
    //     success: true,
    //     symbol: 'SPOT_WOO_USDT',
    //     status: 'FILLED', // FILLED, NEW
    //     side: 'BUY',
    //     created_time: '1641480933.000',
    //     order_id: '87541111',
    //     order_tag: 'default',
    //     price: '1',
    //     type: 'LIMIT',
    //     quantity: '12',
    //     amount: null,
    //     visible: '12',
    //     executed: '12', // or any partial amount
    //     total_fee: '0.0024',
    //     fee_asset: 'WOO',
    //     client_order_id: null,
    //     average_executed_price: '1',
    //     Transactions: [
    //       {
    //         id: '99111647',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641482113.084',
    //         order_id: '87541111',
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //       }
    //     ]
    // }
    //
    return this.parseOrder(response, market);
  }
  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @param {string|undefined} symbol unified market symbol of the market orders were made in
     * @param {int|undefined} since the earliest time in ms to fetch orders for
     * @param {int|undefined} limit the maximum number of  orde structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    request['size'] = 500;
    request['status'] = 'INCOMPLETE';
    const ordersResponse = await this.v1PrivateGetOrders(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "meta":{
    //             "total":1,
    //             "records_per_page":100,
    //             "current_page":1
    //         },
    //         "rows":[
    //             {
    //                 "symbol":"PERP_BTC_USDT",
    //                 "status":"FILLED",
    //                 "side":"SELL",
    //                 "created_time":"1611617776.000",
    //                 "updated_time":"1611617776.000",
    //                 "order_id":52121167,
    //                 "order_tag":"default",
    //                 "price":null,
    //                 "type":"MARKET",
    //                 "quantity":0.002,
    //                 "amount":null,
    //                 "visible":0,
    //                 "executed":0.002,
    //                 "total_fee":0.01732885,
    //                 "fee_asset":"USDT",
    //                 "client_order_id":null,
    //                 "average_executed_price":28881.41
    //             }
    //         ]
    //     }
    //
    const ordersData = this.safeValue(ordersResponse, 'data', {});
    const ordersRows = this.safeValue(ordersData, 'rows', []);
    let total = 0;
    let algoOrdersRows = [];
    for (let i = 0; i < 50; i++) {
      request['size'] = 50;
      request['page'] = i + 1;
      request['algo_type'] = 'STOP';
      const algoOrdersResponse = await this.v1PrivateGetAlgoOrders(this.extend(request, params));
      const algoOrdersData = this.safeValue(algoOrdersResponse, 'data');
      const algoOrdersMeta = this.safeValue(algoOrdersData, 'meta');
      const newRows = this.safeValue(algoOrdersData, 'rows');
      total = total + newRows.length;
      algoOrdersRows = this.arrayConcat(algoOrdersRows, newRows);
      const knownTotal = this.safeInteger(algoOrdersMeta, 'total');
      if (total >= knownTotal) {
        break;
      }
    }
    const allOrdersData = this.arrayConcat(ordersRows, algoOrdersRows);
    return this.parseOrders(allOrdersData, market, since, limit, params);
  }
  parseTimeInForce(timeInForce) {
    const timeInForces = {
      'ioc': 'IOC',
      'fok': 'FOK',
      'post_only': 'PO'
    };
    return this.safeString(timeInForces, timeInForce, undefined);
  }
  parseOrderType(type, algoType = undefined) {
    if (algoType !== undefined) {
      if (algoType === 'take_profit') {
        if (type === 'market') {
          return 'stop';
        } else {
          return 'stopLimit';
        }
      }
    }
    // LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE
    const types = {
      'limit': 'limit',
      'market': 'market',
      'post_only': 'limit',
      'ioc': 'limit',
      'fok': 'limit',
      'liquidate': 'limit'
      // 'stop_market': 'stop',
      // 'take_profit_market': 'stop',
      // 'take_profit_limit': 'stopLimit',
      // 'trigger_limit': 'stopLimit',
      // 'trigger_market': 'stop',
    };

    return this.safeStringLower(types, type, type);
  }
  parseOrder(order, market = undefined) {
    const isAlgoOrder = ('algo_type' in order);
    if (isAlgoOrder) {
      return this.parseAlgoOrder(order, market);
    } else {
      return this.parseRegularOrder(order, market);
    }
  }
  parseRegularOrder(order, market = undefined) {
    //
    // Possible input functions:
    // * createOrder
    // * cancelOrder
    // * fetchOrder
    // * fetchOrders
    // const isFromFetchOrder = ('order_tag' in order); TO_DO
    const timestamp = this.safeTimestamp2(order, 'timestamp', 'created_time');
    const orderId = this.safeString2(order, 'order_id', 'orderId');
    const clientOrderId = this.safeString2(order, 'client_order_id', 'clientOrderId'); // Somehow, this always returns 0 for limit order
    const marketId = this.safeString(order, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString2(order, 'order_price', 'price');
    const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
    const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
    const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'));
    const status = this.safeValue(order, 'status');
    const side = this.safeStringLower(order, 'side');
    const type = this.safeStringUpper(order, 'type');
    const postOnly = type === 'POST_ONLY';
    const filled = this.safeValue(order, 'executed');
    const average = this.safeString2(order, 'average_executed_price', 'executedPrice');
    const remaining = _Precise.Precise.stringSub(cost, filled);
    const fee = this.safeValue2(order, 'total_fee', 'totalFee');
    const feeCurrency = this.safeString2(order, 'fee_asset', 'feeAsset');
    const transactions = this.safeValue(order, 'Transactions');
    return this.safeOrder({
      'id': orderId,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp ? timestamp / 1000 : undefined,
      'datetime': timestamp ? this.iso8601(timestamp / 1000) : undefined,
      'lastTradeTimestamp': undefined,
      'status': this.parseOrderStatus(status),
      'symbol': symbol,
      'type': orderType,
      'timeInForce': this.parseTimeInForce(orderType),
      'postOnly': postOnly,
      'reduceOnly': this.safeValue(order, 'reduce_only'),
      'side': side,
      'price': price,
      'stopPrice': undefined,
      'triggerPrice': undefined,
      'average': average,
      'amount': amount,
      'filled': filled,
      'remaining': remaining,
      'cost': cost,
      'trades': transactions,
      'fee': {
        'cost': fee,
        'currency': feeCurrency
      },
      'info': order
    }, market);
  }
  parseAlgoOrder(order, market = undefined) {
    //
    // Possible input functions:
    // * createOrder
    // * cancelOrder
    // * fetchOrder
    // * fetchOrders
    // const isFromFetchOrder = ('order_tag' in order); TO_DO
    const timestamp = this.safeTimestamp2(order, 'timestamp', 'created_time');
    const orderId = this.safeStringN(order, ['algo_order_id', 'algoOrderId']);
    const clientOrderId = this.safeStringN(order, ['algo_order_id', 'algoOrderId']); // Somehow, this always returns 0 for limit order
    const marketId = this.safeString(order, 'symbol');
    market = this.safeMarket(marketId, market);
    const symbol = market['symbol'];
    const price = this.safeString2(order, 'price', 'trigger_price');
    const stopPrice = this.safeString2(order, 'trigger_price', 'price');
    const amount = this.safeString2(order, 'order_quantity', 'quantity'); // This is base amount
    const cost = this.safeString2(order, 'order_amount', 'amount'); // This is quote amount
    const orderType = this.parseOrderType(this.safeStringLower2(order, 'order_type', 'type'), this.safeStringLower(order, 'algo_type'));
    let tsOrderType = orderType;
    if (orderType === 'market') {
      tsOrderType = 'stop';
    }
    const status = this.safeValue(order, 'algo_status');
    const side = this.safeStringLower(order, 'side');
    const filled = this.safeValue(order, 'executed');
    const average = this.safeString(order, 'average_executed_price');
    const remaining = _Precise.Precise.stringSub(cost, filled);
    const fee = this.safeValue(order, 'total_fee');
    const feeCurrency = this.safeString(order, 'fee_asset');
    // const transactions = this.safeValue (order, 'Transactions');
    return this.safeOrder({
      'id': orderId,
      'clientOrderId': clientOrderId,
      'timestamp': timestamp ? timestamp / 1000 : undefined,
      'datetime': timestamp ? this.iso8601(timestamp / 1000) : undefined,
      'lastTradeTimestamp': undefined,
      'status': this.parseOrderStatus(status),
      'symbol': symbol,
      'type': tsOrderType,
      'timeInForce': this.parseTimeInForce(orderType),
      'postOnly': undefined,
      'reduceOnly': this.safeValue(order, 'reduceOnly'),
      'side': side,
      'price': price,
      'stopPrice': stopPrice,
      'triggerPrice': undefined,
      'average': average,
      'amount': amount,
      'filled': filled,
      'remaining': remaining,
      'cost': cost,
      // 'trades': transactions,
      'fee': {
        'cost': fee,
        'currency': feeCurrency
      },
      'info': order,
      // TEALSTREET
      'reduce': this.safeValue(order, 'reduceOnly'),
      'trigger': 'Mark'
      // we don't know this from api
      // 'close': this.safeValue (order, 'closeOnTrigger'),
      // TEALSTREET
    }, market);
  }
  parseOrderStatus(status) {
    if (status !== undefined) {
      const statuses = {
        'NEW': 'open',
        'FILLED': 'closed',
        'CANCEL_SENT': 'canceled',
        'CANCEL_ALL_SENT': 'canceled',
        'CANCELLED': 'canceled',
        'PARTIAL_FILLED': 'open',
        'REJECTED': 'rejected',
        'INCOMPLETE': 'open',
        'REPLACED': 'open',
        'COMPLETED': 'closed'
      };
      return this.safeString(statuses, status, status);
    }
    return status;
  }
  async fetchOrderBook(symbol, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int|undefined} limit the maximum amount of order book entries to return
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    if (limit !== undefined) {
      limit = Math.min(limit, 1000);
      request['max_level'] = limit;
    }
    const response = await this.v1PrivateGetOrderbookSymbol(this.extend(request, params));
    //
    // {
    //   success: true,
    //   timestamp: '1641562961192',
    //   asks: [
    //     { price: '0.921', quantity: '76.01' },
    //     { price: '0.933', quantity: '477.10' },
    //     ...
    //   ],
    //   bids: [
    //     { price: '0.940', quantity: '13502.47' },
    //     { price: '0.932', quantity: '43.91' },
    //     ...
    //   ]
    // }
    //
    const timestamp = this.safeInteger(response, 'timestamp');
    return this.parseOrderBook(response, symbol, timestamp, 'bids', 'asks', 'price', 'quantity');
  }
  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id'],
      'resolution': this.timeframes[timeframe],
      'from': since / 1000
    };
    const parsedTimeFrame = this.parseTimeframe(timeframe);
    const duration = parsedTimeFrame * 1000 * limit;
    const to = this.sum(since, duration);
    request['to'] = to / 1000;
    const response = await this.v1PublicGetTvHistory(this.extend(request, params));
    const res = [];
    if (response.s === 'ok') {
      const length = response.t.length;
      for (let i = 0; i < length; i++) {
        res.push([response.t[i] * 1000, response.o[i], response.h[i], response.l[i], response.c[i], response.v[i]]);
      }
    } else {
      throw response.s;
    }
    return res;
  }
  parseOHLCV(ohlcv, market = undefined) {
    // example response in fetchOHLCV
    return [this.safeInteger(ohlcv, 'start_timestamp'), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'volume')];
  }
  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @param {string} id order id
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
    }
    const request = {
      'oid': id
    };
    const response = await this.v1PrivateGetOrderOidTrades(this.extend(request, params));
    // {
    //     success: true,
    //     rows: [
    //       {
    //         id: '99111647',
    //         symbol: 'SPOT_WOO_USDT',
    //         fee: '0.0024',
    //         side: 'BUY',
    //         executed_timestamp: '1641482113.084',
    //         order_id: '87541111',
    //         order_tag: 'default',
    //         executed_price: '1',
    //         executed_quantity: '12',
    //         fee_asset: 'WOO',
    //         is_maker: '1'
    //       }
    //     ]
    // }
    const trades = this.safeValue(response, 'rows', []);
    return this.parseTrades(trades, market, since, limit, params);
  }
  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    /**
     * @method
     * @name woo#fetchMyTrades
     * @description fetch all trades made by the user
     * @param {string|undefined} symbol unified market symbol
     * @param {int|undefined} since the earliest time in ms to fetch trades for
     * @param {int|undefined} limit the maximum number of trades structures to retrieve
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    const response = await this.v1PrivateGetClientTrades(this.extend(request, params));
    // {
    //     "success": true,
    //     "meta": {
    //         "records_per_page": 25,
    //         "current_page": 1
    //     },
    //     "rows": [
    //         {
    //             "id": 5,
    //             "symbol": "SPOT_BTC_USDT",
    //             "order_id": 211,
    //             "order_tag": "default",
    //             "executed_price": 10892.84,
    //             "executed_quantity": 0.002,
    //             "is_maker": 0,
    //             "side": "SELL",
    //             "fee": 0,
    //             "fee_asset": "USDT",
    //             "executed_timestamp": "1566264290.250"
    //         },
    //         ...
    //     ]
    // }
    const trades = this.safeValue(response, 'rows', []);
    return this.parseTrades(trades, market, since, limit, params);
  }
  async fetchAccounts(params = {}) {
    /**
     * @method
     * @name woo#fetchAccounts
     * @description fetch all the accounts associated with a profile
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
     */
    const response = await this.v1PrivateGetSubAccountAssets(params);
    //
    //     {
    //         rows: [{
    //                 application_id: '13e4fc34-e2ff-4cb7-b1e4-4c22fee7d365',
    //                 account: 'Main',
    //                 usdt_balance: '4.0'
    //             },
    //             {
    //                 application_id: '432952aa-a401-4e26-aff6-972920aebba3',
    //                 account: 'subaccount',
    //                 usdt_balance: '1.0'
    //             }
    //         ],
    //         success: true
    //     }
    //
    const rows = this.safeValue(response, 'rows', []);
    return this.parseAccounts(rows, params);
  }
  parseAccount(account) {
    //
    //     {
    //         application_id: '336952aa-a401-4e26-aff6-972920aebba3',
    //         account: 'subaccount',
    //         usdt_balance: '1.0',
    //     }
    //
    const accountId = this.safeString(account, 'account');
    return {
      'info': account,
      'id': this.safeString(account, 'application_id'),
      'name': accountId,
      'code': undefined,
      'type': accountId === 'Main' ? 'main' : 'subaccount'
    };
  }
  async fetchBalance(params = {}) {
    /**
     * @method
     * @name woo#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://docs.woo.org/#get-current-holding-get-balance-new
     * @param {object} params extra parameters specific to the woo api endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
     */
    await this.loadMarkets();
    const response = await this.v1PrivateGetClientHolding(params);
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "holding": [
    //                 {
    //                     "token": "0_token",
    //                     "holding": 1,
    //                     "frozen": 0,
    //                     "staked": 0,
    //                     "unbonding": 0,
    //                     "vault": 0,
    //                     "interest": 0,
    //                     "pendingShortQty": 0,
    //                     "pendingLongQty": 0,
    //                     "availableBalance": 0,
    //                     "updatedTime": 312321.121
    //                 }
    //             ]
    //         },
    //         "timestamp": 1673323746259
    //     }
    //
    const data = this.safeValue(response, 'data');
    return this.parseBalance(data);
  }
  parseBalance(response) {
    const result = {
      'info': response
    };
    const balances = this.safeValue(response, 'holding', []);
    for (let i = 0; i < balances.length; i++) {
      const balance = balances[i];
      const code = this.safeCurrencyCode(this.safeString(balance, 'token'));
      const account = this.account();
      account['total'] = this.safeString(balance, 'holding');
      account['free'] = this.safeString(balance, 'availableBalance');
      result[code] = account;
    }
    return this.safeBalance(result);
  }
  nonce() {
    return this.milliseconds();
  }
  sign(path, section = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
    const version = section[0];
    const access = section[1];
    const isUdfPath = path === 'tv/history';
    const pathWithParams = this.implodeParams(path, params);
    let url = this.implodeHostname(this.urls['api'][access]);
    if (isUdfPath) {
      url += '/';
    } else {
      url += '/' + version + '/';
    }
    params = this.omit(params, this.extractParams(path));
    params = this.keysort(params);
    if (access === 'public') {
      if (isUdfPath) {
        url += pathWithParams;
      } else {
        url += access + '/' + pathWithParams;
      }
      if (Object.keys(params).length) {
        url += '?' + this.urlencode(params);
      }
    } else if (access === 'pub') {
      url += pathWithParams;
      if (Object.keys(params).length) {
        url += '?' + this.urlencode(params);
      }
    } else {
      this.checkRequiredCredentials();
      let auth = '';
      const ts = this.nonce().toString();
      url += pathWithParams;
      headers = {
        'orderly-key': this.apiKey,
        'orderly-account-id': this.uid,
        'orderly-timestamp': ts
      };
      if (version === 'v1') {
        auth = ts + method + '/' + version + '/' + pathWithParams;
        if (method === 'POST' || method === 'PUT') {
          headers['content-type'] = 'application/x-www-form-urlencoded';
          body = this.json(params);
          auth += body;
        } else {
          if (Object.keys(params).length) {
            const query = this.urlencode(params);
            url += '?' + query;
            auth += '?' + query;
          }
        }
        if (method === 'DELETE') {
          headers['content-type'] = 'application/x-www-form-urlencoded';
        } else {
          headers['content-type'] = 'application/json';
        }
      } else {
        auth = this.urlencode(params);
        if (method === 'POST' || method === 'PUT') {
          body = auth;
        } else {
          url += '?' + auth;
        }
        auth += '|' + ts;
        headers['content-type'] = 'application/x-www-form-urlencoded';
      }
      // headers['orderly-signature'] = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256');
      const signer = new _Signer.Signer(this.uid, this.secret);
      headers['orderly-signature'] = signer.sign_request(auth);
    }
    return {
      'url': url,
      'method': method,
      'body': body,
      'headers': headers
    };
  }
  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
    if (!response) {
      return; // fallback to default error handler
    }
    //
    //     400 Bad Request {"success":false,"code":-1012,"message":"Amount is required for buy market orders when margin disabled."}
    //
    const success = this.safeValue(response, 'success');
    const errorCode = this.safeString(response, 'code');
    if (!success) {
      const feedback = this.id + ' ' + this.json(response);
      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);
      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);
    }
  }
  parseIncome(income, market = undefined) {
    //
    //     {
    //         "id":666666,
    //         "symbol":"PERP_BTC_USDT",
    //         "funding_rate":0.00001198,
    //         "mark_price":28941.04000000,
    //         "funding_fee":0.00069343,
    //         "payment_type":"Pay",
    //         "status":"COMPLETED",
    //         "created_time":"1653616000.666",
    //         "updated_time":"1653616000.605"
    //     }
    //
    const marketId = this.safeString(income, 'symbol');
    const symbol = this.safeSymbol(marketId, market);
    const amount = this.safeNumber(income, 'funding_fee');
    const code = this.safeCurrencyCode('USD');
    const id = this.safeString(income, 'id');
    const timestamp = this.safeTimestamp(income, 'updated_time');
    const rate = this.safeNumber(income, 'funding_rate');
    return {
      'info': income,
      'symbol': symbol,
      'code': code,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'id': id,
      'amount': amount,
      'rate': rate
    };
  }
  async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    let market = undefined;
    if (symbol !== undefined) {
      market = this.market(symbol);
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = since;
    }
    const response = await this.v1PrivateGetFundingFeeHistory(this.extend(request, params));
    //
    //     {
    //         "rows":[
    //             {
    //                 "id":666666,
    //                 "symbol":"PERP_BTC_USDT",
    //                 "funding_rate":0.00001198,
    //                 "mark_price":28941.04000000,
    //                 "funding_fee":0.00069343,
    //                 "payment_type":"Pay",
    //                 "status":"COMPLETED",
    //                 "created_time":"1653616000.666",
    //                 "updated_time":"1653616000.605"
    //             }
    //         ],
    //         "meta":{
    //             "total":235,
    //             "records_per_page":25,
    //             "current_page":1
    //         },
    //         "success":true
    //     }
    //
    const result = this.safeValue(response, 'rows', []);
    return this.parseIncomes(result, market, since, limit);
  }
  parseFundingRate(fundingRate, market = undefined) {
    //
    //         {
    //             "symbol":"PERP_AAVE_USDT",
    //             "est_funding_rate":-0.00003447,
    //             "est_funding_rate_timestamp":1653633959001,
    //             "last_funding_rate":-0.00002094,
    //             "last_funding_rate_timestamp":1653631200000,
    //             "next_funding_time":1653634800000
    //         }
    //
    //
    const symbol = this.safeString(fundingRate, 'symbol');
    market = this.market(symbol);
    const nextFundingTimestamp = this.safeInteger(fundingRate, 'next_funding_time');
    const estFundingRateTimestamp = this.safeInteger(fundingRate, 'est_funding_rate_timestamp');
    const lastFundingRateTimestamp = this.safeInteger(fundingRate, 'last_funding_rate_timestamp');
    return {
      'info': fundingRate,
      'symbol': market['symbol'],
      'markPrice': undefined,
      'indexPrice': undefined,
      'interestRate': this.parseNumber('0'),
      'estimatedSettlePrice': undefined,
      'timestamp': estFundingRateTimestamp,
      'datetime': this.iso8601(estFundingRateTimestamp),
      'fundingRate': this.safeNumber(fundingRate, 'est_funding_rate'),
      'fundingTimestamp': nextFundingTimestamp,
      'fundingDatetime': this.iso8601(nextFundingTimestamp),
      'nextFundingRate': undefined,
      'nextFundingTimestamp': undefined,
      'nextFundingDatetime': undefined,
      'previousFundingRate': this.safeNumber(fundingRate, 'last_funding_rate'),
      'previousFundingTimestamp': lastFundingRateTimestamp,
      'previousFundingDatetime': this.iso8601(lastFundingRateTimestamp)
    };
  }
  async fetchFundingRate(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PublicGetFundingRateSymbol(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "timestamp":1653640572711,
    //         "symbol":"PERP_BTC_USDT",
    //         "est_funding_rate":0.00000738,
    //         "est_funding_rate_timestamp":1653640559003,
    //         "last_funding_rate":0.00000629,
    //         "last_funding_rate_timestamp":1653638400000,
    //         "next_funding_time":1653642000000
    //     }
    //
    return this.parseFundingRate(response, market);
  }
  async fetchFundingRates(symbols = undefined, params = {}) {
    await this.loadMarkets();
    symbols = this.marketSymbols(symbols);
    const response = await this.v1PublicGetFundingRates(params);
    //
    //     {
    //         "success":true,
    //         "rows":[
    //             {
    //                 "symbol":"PERP_AAVE_USDT",
    //                 "est_funding_rate":-0.00003447,
    //                 "est_funding_rate_timestamp":1653633959001,
    //                 "last_funding_rate":-0.00002094,
    //                 "last_funding_rate_timestamp":1653631200000,
    //                 "next_funding_time":1653634800000
    //             }
    //         ],
    //         "timestamp":1653633985646
    //     }
    //
    const rows = this.safeValue(response, 'rows', {});
    const result = this.parseFundingRates(rows);
    return this.filterByArray(result, 'symbol', symbols);
  }
  async fetchFundingRateHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {
    await this.loadMarkets();
    const request = {};
    if (symbol !== undefined) {
      const market = this.market(symbol);
      symbol = market['symbol'];
      request['symbol'] = market['id'];
    }
    if (since !== undefined) {
      request['start_t'] = this.parseToInt(since / 1000);
    }
    const response = await this.v1PublicGetFundingRateHistory(this.extend(request, params));
    //
    //     {
    //         "success":true,
    //         "meta":{
    //             "total":2464,
    //             "records_per_page":25,
    //             "current_page":1
    //         },
    //         "rows":[
    //             {
    //                 "symbol":"PERP_BTC_USDT",
    //                 "funding_rate":0.00000629,
    //                 "funding_rate_timestamp":1653638400000,
    //                 "next_funding_time":1653642000000
    //             }
    //         ],
    //         "timestamp":1653640814885
    //     }
    //
    const result = this.safeValue(response, 'rows');
    const rates = [];
    for (let i = 0; i < result.length; i++) {
      const entry = result[i];
      const marketId = this.safeString(entry, 'symbol');
      const timestamp = this.safeInteger(entry, 'funding_rate_timestamp');
      rates.push({
        'info': entry,
        'symbol': this.safeSymbol(marketId),
        'fundingRate': this.safeNumber(entry, 'funding_rate'),
        'timestamp': timestamp,
        'datetime': this.iso8601(timestamp)
      });
    }
    const sorted = this.sortBy(rates, 'timestamp');
    return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
  }
  async fetchLeverage(symbol, params = {}) {
    await this.loadMarkets();
    const response = await this.v1PrivateGetClientInfo(params);
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "applicationId": "dsa",
    //             "account": "dsa",
    //             "alias": "haha",
    //             "accountMode": "MARGIN",
    //             "leverage": 1,
    //             "takerFeeRate": 1,
    //             "makerFeeRate": 1,
    //             "interestRate": 1,
    //             "futuresTakerFeeRate": 1,
    //             "futuresMakerFeeRate": 1,
    //             "otpauth": true,
    //             "marginRatio": 1,
    //             "openMarginRatio": 1,
    //             "initialMarginRatio": 1,
    //             "maintenanceMarginRatio": 1,
    //             "totalCollateral": 1,
    //             "freeCollateral": 1,
    //             "totalAccountValue": 1,
    //             "totalVaultValue": 1,
    //             "totalStakingValue": 1
    //         },
    //         "timestamp": 1673323685109
    //     }
    //
    const result = this.safeValue(response, 'data');
    const leverage = this.safeNumber(result, 'max_leverage');
    return {
      'info': response,
      'leverage': leverage
    };
  }
  async setLeverage(leverage, symbol = undefined, params = {}) {
    await this.loadMarkets();
    if (leverage !== 1 && leverage !== 2 && leverage !== 3 && leverage !== 4 && leverage !== 5 && leverage !== 10 && leverage !== 15 && leverage !== 20 && leverage !== 50) {
      throw new _errors.BadRequest(this.id + ' leverage should be 1, 2, 3, 4, 5, 10, 15, 20 or 50');
    }
    const request = {
      'leverage': leverage
    };
    return await this.v1PrivatePostClientLeverage(this.extend(request, params));
  }
  async fetchPosition(symbol = undefined, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PrivateGetPositionSymbol(this.extend(request, params));
    //
    //     {
    //         "symbol":"PERP_ETC_USDT",
    //         "holding":0.0,
    //         "pnl_24_h":0,
    //         "settle_price":0.0,
    //         "average_open_price":0,
    //         "success":true,
    //         "mark_price":22.6955,
    //         "pending_short_qty":0.0,
    //         "pending_long_qty":0.0,
    //         "fee_24_h":0,
    //         "timestamp":"1652231044.920"
    //     }
    //
    return this.parsePosition(response, market);
  }
  async fetchPositions(symbols = undefined, params = {}) {
    await this.loadMarkets();
    const response = await this.v1PrivateGetPositions(params);
    //
    //     {
    //         "success": true,
    //         "data": {
    //             "positions": [
    //                 {
    //                     "symbol": "0_symbol",
    //                     "holding": 1,
    //                     "pendingLongQty": 0,
    //                     "pendingShortQty": 1,
    //                     "settlePrice": 1,
    //                     "averageOpenPrice": 1,
    //                     "pnl24H": 1,
    //                     "fee24H": 1,
    //                     "markPrice": 1,
    //                     "estLiqPrice": 1,
    //                     "timestamp": 12321321
    //                 }
    //             ]
    //         },
    //         "timestamp": 1673323880342
    //     }
    //
    const result = this.safeValue(response, 'data', {});
    const positions = this.safeValue(result, 'rows', []);
    return this.parsePositions(positions, symbols);
  }
  parsePosition(position, market = undefined) {
    //
    //     {
    //         "symbol": "0_symbol",
    //         "holding": 1,
    //         "pendingLongQty": 0,
    //         "pendingShortQty": 1,
    //         "settlePrice": 1,
    //         "averageOpenPrice": 1,
    //         "pnl24H": 1,
    //         "fee24H": 1,
    //         "markPrice": 1,
    //         "estLiqPrice": 1,
    //         "timestamp": 12321321
    //     }
    //
    const contract = this.safeString(position, 'symbol');
    market = this.safeMarket(contract, market);
    const size = this.safeString(position, 'position_qty');
    let side = undefined;
    if (_Precise.Precise.stringGt(size, '0')) {
      side = 'long';
    } else {
      side = 'short';
    }
    const contractSize = this.safeString(market, 'contractSize');
    const markPrice = this.safeString(position, 'mark_price');
    const timestamp = this.safeTimestamp(position, 'timestamp');
    const entryPrice = this.safeString(position, 'average_open_price');
    const priceDifference = _Precise.Precise.stringSub(markPrice, entryPrice);
    const unrealisedPnl = _Precise.Precise.stringMul(priceDifference, size);
    return {
      'info': position,
      'id': market['symbol'] + ':' + side,
      'symbol': market['symbol'],
      'notional': undefined,
      'marginMode': 'cross',
      'liquidationPrice': this.safeNumber(position, 'est_liq_price'),
      'entryPrice': this.parseNumber(entryPrice),
      'realizedPnl': this.safeString(position, 'pnl_24_h'),
      'unrealizedPnl': this.parseNumber(unrealisedPnl),
      'percentage': undefined,
      'contracts': this.parseNumber(size),
      'contractSize': this.parseNumber(contractSize),
      'markPrice': this.parseNumber(markPrice),
      'side': side,
      'hedged': false,
      'timestamp': timestamp / 1000,
      'datetime': this.iso8601(timestamp / 1000),
      'maintenanceMargin': undefined,
      'maintenanceMarginPercentage': undefined,
      'collateral': undefined,
      'initialMargin': undefined,
      'initialMarginPercentage': undefined,
      'leverage': undefined,
      'marginRatio': undefined
    };
  }
  defaultNetworkCodeForCurrency(code) {
    const currencyItem = this.currency(code);
    const networks = currencyItem['networks'];
    const networkKeys = Object.keys(networks);
    for (let i = 0; i < networkKeys.length; i++) {
      const network = networkKeys[i];
      if (network === 'ETH') {
        return network;
      }
    }
    // if it was not returned according to above options, then return the first network of currency
    return this.safeValue(networkKeys, 0);
  }
  async fetchTicker(symbol, params = {}) {
    /**
     * @method
     * @name woo#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} params extra parameters specific to the paymium api endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    await this.loadMarkets();
    const market = this.market(symbol);
    const request = {
      'symbol': market['id']
    };
    const response = await this.v1PublicGetFuturesSymbol(this.extend(request, params));
    //
    // {
    //   "symbol": "BTC-USDT",
    //   "priceChange": "10.00",
    //   "priceChangePercent": "10",
    //   "lastPrice": "5738.23",
    //   "lastVolume": "31.21",
    //   "highPrice": "5938.23",
    //   "lowPrice": "5238.23",
    //   "volume": "23211231.13",
    //   "dayVolume": "213124412412.47",
    //   "openPrice": "5828.32"
    // }
    //
    const ticker = this.safeValue(response, 'info');
    return this.parseTicker(ticker, market);
  }
  parseTicker(ticker, market = undefined) {
    //
    // {
    //   "symbol": "PERP_BTC_USDT",
    //   "index_price": 56727.31344564,
    //   "mark_price": 56727.31344564,
    //   "est_funding_rate": 0.12345689,
    //   "last_funding_rate": 0.12345689,
    //   "next_funding_time": 1567411795000,
    //   "open_interest": 0.12345689,
    //   "24h_open": 0.16112,
    //   "24h_close": 0.32206,
    //   "24h_high": 0.33000,
    //   "24h_low": 0.14251,
    //   "24h_volume": 89040821.98,
    //   "24h_amount": 22493062.21
    // }
    //
    const symbol = this.safeSymbol(undefined, market);
    const timestamp = this.milliseconds();
    const baseVolume = this.safeString(ticker, '24h_volume');
    const openFloat = this.safeFloat(ticker, '24h_open');
    const currentFloat = this.safeFloat(ticker, 'index_price');
    const percentage = currentFloat / openFloat * 100;
    const last = this.safeString(ticker, 'index_price');
    return this.safeTicker({
      'symbol': symbol,
      'timestamp': timestamp,
      'datetime': this.iso8601(timestamp),
      'high': this.safeString(ticker, '24h_high'),
      'low': this.safeString(ticker, '24h_low'),
      'bid': this.safeString(ticker, 'index_price'),
      'bidVolume': undefined,
      'ask': this.safeString(ticker, 'index_price'),
      'askVolume': undefined,
      'open': this.safeString(ticker, '24h_open'),
      'close': last,
      'last': last,
      'mark': last,
      'previousClose': undefined,
      'change': undefined,
      'percentage': this.numberToString(percentage),
      'average': undefined,
      'baseVolume': baseVolume,
      'info': ticker
    }, market);
  }
  async fetchAccountConfiguration(symbol, params = {}) {
    await this.loadMarkets();
    const market = this.market(symbol);
    const leverageInfo = await this.fetchLeverage(market['id']);
    const leverage = this.safeInteger(leverageInfo, 'leverage');
    const accountConfig = {
      'marginMode': 'cross',
      'positionMode': 'oneway',
      'markets': {},
      'leverage': leverage
    };
    const leverageConfigs = accountConfig['markets'];
    leverageConfigs[market['symbol']] = {
      'leverage': leverage,
      'buyLeverage': leverage,
      'sellLeverage': leverage
    };
    return accountConfig;
  }
}
exports.default = woofi;

},{"./base/Exchange.js":2,"./base/Precise.js":3,"./base/Signer.js":4,"./base/errors.js":5,"./base/functions/number.js":11}],89:[function(require,module,exports){
(function (global){(function (){
'use strict';

var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? global : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],90:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],91:[function(require,module,exports){

},{}],92:[function(require,module,exports){
(function (process,Buffer){(function (){
'use strict';
/* eslint camelcase: "off" */

var assert = require('assert');

var Zstream = require('pako/lib/zlib/zstream');
var zlib_deflate = require('pako/lib/zlib/deflate.js');
var zlib_inflate = require('pako/lib/zlib/inflate.js');
var constants = require('pako/lib/zlib/constants');

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

var GZIP_HEADER_ID1 = 0x1f;
var GZIP_HEADER_ID2 = 0x8b;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
    throw new TypeError('Bad argument');
  }

  this.dictionary = null;
  this.err = 0;
  this.flush = 0;
  this.init_done = false;
  this.level = 0;
  this.memLevel = 0;
  this.mode = mode;
  this.strategy = 0;
  this.windowBits = 0;
  this.write_in_progress = false;
  this.pending_close = false;
  this.gzip_id_bytes_read = 0;
}

Zlib.prototype.close = function () {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }

  this.pending_close = false;

  assert(this.init_done, 'close before init');
  assert(this.mode <= exports.UNZIP);

  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
    zlib_inflate.inflateEnd(this.strm);
  }

  this.mode = exports.NONE;

  this.dictionary = null;
};

Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
  assert.equal(arguments.length, 8);

  assert(this.init_done, 'write before init');
  assert(this.mode !== exports.NONE, 'already finalized');
  assert.equal(false, this.write_in_progress, 'write already in progress');
  assert.equal(false, this.pending_close, 'close is pending');

  this.write_in_progress = true;

  assert.equal(false, flush === undefined, 'must provide flush value');

  this.write_in_progress = true;

  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
    throw new Error('Invalid flush value');
  }

  if (input == null) {
    input = Buffer.alloc(0);
    in_len = 0;
    in_off = 0;
  }

  this.strm.avail_in = in_len;
  this.strm.input = input;
  this.strm.next_in = in_off;
  this.strm.avail_out = out_len;
  this.strm.output = out;
  this.strm.next_out = out_off;
  this.flush = flush;

  if (!async) {
    // sync version
    this._process();

    if (this._checkError()) {
      return this._afterSync();
    }
    return;
  }

  // async version
  var self = this;
  process.nextTick(function () {
    self._process();
    self._after();
  });

  return this;
};

Zlib.prototype._afterSync = function () {
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  return [avail_in, avail_out];
};

Zlib.prototype._process = function () {
  var next_expected_header_byte = null;

  // If the avail_out is left at 0, then it means that it ran out
  // of room.  If there was avail_out left over, then it means
  // that all of the input was consumed.
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflate(this.strm, this.flush);
      break;
    case exports.UNZIP:
      if (this.strm.avail_in > 0) {
        next_expected_header_byte = this.strm.next_in;
      }

      switch (this.gzip_id_bytes_read) {
        case 0:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
            this.gzip_id_bytes_read = 1;
            next_expected_header_byte++;

            if (this.strm.avail_in === 1) {
              // The only available byte was already read.
              break;
            }
          } else {
            this.mode = exports.INFLATE;
            break;
          }

        // fallthrough
        case 1:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
            this.gzip_id_bytes_read = 2;
            this.mode = exports.GUNZIP;
          } else {
            // There is no actual difference between INFLATE and INFLATERAW
            // (after initialization).
            this.mode = exports.INFLATE;
          }

          break;
        default:
          throw new Error('invalid number of gzip magic number bytes read');
      }

    // fallthrough
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      this.err = zlib_inflate.inflate(this.strm, this.flush

      // If data was encoded with dictionary
      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {
        // Load it
        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
        if (this.err === exports.Z_OK) {
          // And try to decode again
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        } else if (this.err === exports.Z_DATA_ERROR) {
          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
          // Make it possible for After() to tell a bad dictionary from bad
          // input.
          this.err = exports.Z_NEED_DICT;
        }
      }
      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
        // Bytes remain in input buffer. Perhaps this is another compressed
        // member in the same archive, or just trailing garbage.
        // Trailing zero bytes are okay, though, since they are frequently
        // used for padding.

        this.reset();
        this.err = zlib_inflate.inflate(this.strm, this.flush);
      }
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }
};

Zlib.prototype._checkError = function () {
  // Acceptable error states depend on the type of zlib stream.
  switch (this.err) {
    case exports.Z_OK:
    case exports.Z_BUF_ERROR:
      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
        this._error('unexpected end of file');
        return false;
      }
      break;
    case exports.Z_STREAM_END:
      // normal statuses, not fatal
      break;
    case exports.Z_NEED_DICT:
      if (this.dictionary == null) {
        this._error('Missing dictionary');
      } else {
        this._error('Bad dictionary');
      }
      return false;
    default:
      // something else.
      this._error('Zlib error');
      return false;
  }

  return true;
};

Zlib.prototype._after = function () {
  if (!this._checkError()) {
    return;
  }

  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  // call the write() cb
  this.callback(avail_in, avail_out);

  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype._error = function (message) {
  if (this.strm.msg) {
    message = this.strm.msg;
  }
  this.onerror(message, this.err

  // no hope of rescue.
  );this.write_in_progress = false;
  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');

  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
  assert(level >= -1 && level <= 9, 'invalid compression level');

  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');

  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

  this._init(level, windowBits, memLevel, strategy, dictionary);
  this._setDictionary();
};

Zlib.prototype.params = function () {
  throw new Error('deflateParams Not supported');
};

Zlib.prototype.reset = function () {
  this._reset();
  this._setDictionary();
};

Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
  this.level = level;
  this.windowBits = windowBits;
  this.memLevel = memLevel;
  this.strategy = strategy;

  this.flush = exports.Z_NO_FLUSH;

  this.err = exports.Z_OK;

  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
    this.windowBits += 16;
  }

  if (this.mode === exports.UNZIP) {
    this.windowBits += 32;
  }

  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
    this.windowBits = -1 * this.windowBits;
  }

  this.strm = new Zstream();

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }

  if (this.err !== exports.Z_OK) {
    this._error('Init error');
  }

  this.dictionary = dictionary;

  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype._setDictionary = function () {
  if (this.dictionary == null) {
    return;
  }

  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to set dictionary');
  }
};

Zlib.prototype._reset = function () {
  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
    case exports.GZIP:
      this.err = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
    case exports.GUNZIP:
      this.err = zlib_inflate.inflateReset(this.strm);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to reset stream');
  }
};

exports.Zlib = Zlib;
}).call(this)}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":129,"assert":94,"buffer":98,"pako/lib/zlib/constants":120,"pako/lib/zlib/deflate.js":122,"pako/lib/zlib/inflate.js":124,"pako/lib/zlib/zstream":128}],93:[function(require,module,exports){
(function (process){(function (){
'use strict';

var Buffer = require('buffer').Buffer;
var Transform = require('stream').Transform;
var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;
var kMaxLength = require('buffer').kMaxLength;
var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
var bkeys = Object.keys(binding);
for (var bk = 0; bk < bkeys.length; bk++) {
  var bkey = bkeys[bk];
  if (bkey.match(/^Z/)) {
    Object.defineProperty(exports, bkey, {
      enumerable: true, value: binding[bkey], writable: false
    });
  }
}

// translation table for return codes.
var codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

var ckeys = Object.keys(codes);
for (var ck = 0; ck < ckeys.length; ck++) {
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
}

Object.defineProperty(exports, 'codes', {
  enumerable: true, value: Object.freeze(codes), writable: false
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function (o) {
  return new Deflate(o);
};

exports.createInflate = function (o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function (o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function (o) {
  return new InflateRaw(o);
};

exports.createGzip = function (o) {
  return new Gzip(o);
};

exports.createGunzip = function (o) {
  return new Gunzip(o);
};

exports.createUnzip = function (o) {
  return new Unzip(o);
};

// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function (buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function (buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function (buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf;
    var err = null;

    if (nread >= kMaxLength) {
      err = new RangeError(kRangeErrorMessage);
    } else {
      buf = Buffer.concat(buffers, nread);
    }

    buffers = [];
    engine.close();
    callback(err, buf);
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);

  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');

  var flushFlag = engine._finishFlushFlag;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}

// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}

// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}

// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}

function isValidFlushFlag(flag) {
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
}

// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  var _this = this;

  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush && !isValidFlushFlag(opts.flush)) {
    throw new Error('Invalid flush flag: ' + opts.flush);
  }
  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  }

  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._handle = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._handle.onerror = function (message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);

  Object.defineProperty(this, '_closed', {
    get: function () {
      return !_this._handle;
    },
    configurable: true,
    enumerable: true
  });
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function (level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () {
      assert(self._handle, 'zlib binding closed');
      self._handle.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function () {
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function (callback) {
  this._transform(Buffer.alloc(0), '', callback);
};

Zlib.prototype.flush = function (kind, callback) {
  var _this2 = this;

  var ws = this._writableState;

  if (typeof kind === 'function' || kind === undefined && !callback) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback) process.nextTick(callback);
  } else if (ws.ending) {
    if (callback) this.once('end', callback);
  } else if (ws.needDrain) {
    if (callback) {
      this.once('drain', function () {
        return _this2.flush(kind, callback);
      });
    }
  } else {
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  }
};

Zlib.prototype.close = function (callback) {
  _close(this, callback);
  process.nextTick(emitCloseNT, this);
};

function _close(engine, callback) {
  if (callback) process.nextTick(callback);

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) return;

  engine._handle.close();
  engine._handle = null;
}

function emitCloseNT(self) {
  self.emit('close');
}

Zlib.prototype._transform = function (chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));

  if (!this._handle) return cb(new Error('zlib binding closed'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last) flushFlag = this._finishFlushFlag;else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function (er) {
      error = er;
    });

    assert(this._handle, 'zlib binding closed');
    do {
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    if (nread >= kMaxLength) {
      _close(this);
      throw new RangeError(kRangeErrorMessage);
    }

    var buf = Buffer.concat(buffers, nread);
    _close(this);

    return buf;
  }

  assert(this._handle, 'zlib binding closed');
  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) {
      this.buffer = null;
      this.callback = null;
    }

    if (self._hadError) return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;

      if (!async) return true;

      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async) return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);
}).call(this)}).call(this,require('_process'))
},{"./binding":92,"_process":129,"assert":94,"buffer":98,"stream":131,"util":150}],94:[function(require,module,exports){
(function (global){(function (){
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":117,"util/":97}],95:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],96:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],97:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":96,"_process":129,"inherits":95}],98:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":90,"buffer":98,"ieee754":111}],99:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":100,"get-intrinsic":105}],100:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":104,"get-intrinsic":105}],101:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],102:[function(require,module,exports){
'use strict';

var isCallable = require('is-callable');

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;

},{"is-callable":114}],103:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],104:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":103}],105:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":104,"has":110,"has-symbols":107}],106:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"get-intrinsic":105}],107:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":108}],108:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],109:[function(require,module,exports){
'use strict';

var hasSymbols = require('has-symbols/shams');

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":108}],110:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":104}],111:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],112:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],113:[function(require,module,exports){
'use strict';

var hasToStringTag = require('has-tostringtag/shams')();
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"call-bind/callBound":99,"has-tostringtag/shams":109}],114:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};

},{}],115:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require('has-tostringtag/shams')();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};

},{"has-tostringtag/shams":109}],116:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('for-each');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();
var gOPD = require('gopd');

var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":89,"call-bind/callBound":99,"for-each":102,"gopd":106,"has-tostringtag/shams":109}],117:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],118:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],119:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],120:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],121:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],122:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":118,"./adler32":119,"./crc32":121,"./messages":126,"./trees":127}],123:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],124:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":118,"./adler32":119,"./crc32":121,"./inffast":123,"./inftrees":125}],125:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":118}],126:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],127:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":118}],128:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],129:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],130:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":98}],131:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":101,"inherits":112,"readable-stream/lib/_stream_duplex.js":133,"readable-stream/lib/_stream_passthrough.js":134,"readable-stream/lib/_stream_readable.js":135,"readable-stream/lib/_stream_transform.js":136,"readable-stream/lib/_stream_writable.js":137,"readable-stream/lib/internal/streams/end-of-stream.js":141,"readable-stream/lib/internal/streams/pipeline.js":143}],132:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],133:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":135,"./_stream_writable":137,"_process":129,"inherits":112}],134:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":136,"inherits":112}],135:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":132,"./_stream_duplex":133,"./internal/streams/async_iterator":138,"./internal/streams/buffer_list":139,"./internal/streams/destroy":140,"./internal/streams/from":142,"./internal/streams/state":144,"./internal/streams/stream":145,"_process":129,"buffer":98,"events":101,"inherits":112,"string_decoder/":146,"util":91}],136:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;
var _require$codes = require('../errors').codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":132,"./_stream_duplex":133,"inherits":112}],137:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":132,"./_stream_duplex":133,"./internal/streams/destroy":140,"./internal/streams/state":144,"./internal/streams/stream":145,"_process":129,"buffer":98,"inherits":112,"util-deprecate":147}],138:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":141,"_process":129}],139:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = require('buffer'),
  Buffer = _require.Buffer;
var _require2 = require('util'),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":98,"util":91}],140:[function(require,module,exports){
(function (process){(function (){
'use strict';

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":129}],141:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":132}],142:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],143:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":132,"./end-of-stream":141}],144:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":132}],145:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":101}],146:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":130}],147:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],148:[function(require,module,exports){
arguments[4][96][0].apply(exports,arguments)
},{"dup":96}],149:[function(require,module,exports){
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9

'use strict';

var isArgumentsObject = require('is-arguments');
var isGeneratorFunction = require('is-generator-function');
var whichTypedArray = require('which-typed-array');
var isTypedArray = require('is-typed-array');

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});

},{"is-arguments":113,"is-generator-function":115,"is-typed-array":116,"which-typed-array":151}],150:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require('./support/types');

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

}).call(this)}).call(this,require('_process'))
},{"./support/isBuffer":148,"./support/types":149,"_process":129,"inherits":112}],151:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('for-each');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var gOPD = require('gopd');

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();

var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = require('is-typed-array');

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":89,"call-bind/callBound":99,"for-each":102,"gopd":106,"has-tostringtag/shams":109,"is-typed-array":116}],152:[function(require,module,exports){
'use strict';

module.exports = function () {
  throw new Error(
    'ws does not work in the browser. Browser clients must use the native ' +
      'WebSocket object'
  );
};

},{}]},{},[1])(1)
});
