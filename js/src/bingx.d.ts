import { Exchange } from './base/Exchange.js';
import { OHLCV } from './base/types.js';
export default class bingx extends Exchange {
    describe(): any;
    switchIsolated(symbol: any, isIsolated: any, buyLeverage: any, sellLeverage: any, params?: {}): Promise<void>;
    setMarginMode(marginMode: any, symbol?: any, params?: {}): Promise<any>;
    setPositionMode(hedged: any, symbol?: string, params?: {}): Promise<any>;
    setLeverage(leverage: any, symbol?: string, params?: {}): Promise<any>;
    fetchAccountConfiguration(symbol: any, params?: {}): Promise<{
        marginMode: string;
        positionMode: string;
        markets: {};
    }>;
    parseAccountConfiguration(leverageData: any, marginTypeData: any, positionModeData: any, market: any): {
        marginMode: string;
        positionMode: string;
        markets: {};
    };
    fetchContractMarkets(params?: {}): Promise<any[]>;
    fetchMarkets(params?: {}): Promise<any[]>;
    parseBalance(response: any): import("./base/types.js").Balances;
    fetchBalance(params?: {}): Promise<import("./base/types.js").Balances>;
    fetchOrderBook(symbol: any, limit?: any, params?: {}): Promise<import("./base/types.js").OrderBook>;
    parseTicker(ticker: any, market?: any): import("./base/types.js").Ticker;
    fetchTicker(symbol: any, params?: {}): Promise<import("./base/types.js").Ticker>;
    parseTrade(trade: any, market?: any): import("./base/types.js").Trade;
    fetchTrades(symbol: any, since?: any, limit?: any, params?: {}): Promise<any[]>;
    fetchMyTrades(symbol?: any, since?: any, limit?: any, params?: {}): Promise<any>;
    parseMyTrades(trades: any, market?: any, since?: any, limit?: any, params?: {}): any;
    parseMyTrade(trade: any, market?: any): any;
    createOrder(symbol: any, type: any, side: any, amount: any, price?: any, params?: {}): Promise<any>;
    cancelAllOrders(symbol?: string, params?: {}): Promise<any>;
    cancelOrder(id: any, symbol?: any, params?: {}): Promise<any>;
    fetchPositions(symbols?: string[], params?: {}): Promise<any[]>;
    parsePosition(position: any, market?: any): {
        info: any;
        id: string;
        symbol: any;
        notional: any;
        marginMode: string;
        liquidationPrice: number;
        entryPrice: number;
        unrealizedPnl: number;
        realizedPnl: number;
        percentage: any;
        contracts: number;
        contractSize: number;
        side: string;
        hedged: boolean;
        timestamp: number;
        markPrice: number;
        datetime: string;
        maintenanceMargin: any;
        maintenanceMarginPercentage: any;
        collateral: number;
        initialMargin: number;
        initialMarginPercentage: any;
        leverage: number;
        marginRatio: any;
    };
    fetchOHLCV(symbol: any, timeframe?: string, since?: any, limit?: any, params?: {}): Promise<OHLCV[]>;
    parseOHLCVs(ohlcvs: object[], market?: string, timeframe?: string, since?: number, limit?: any): OHLCV[];
    parseOHLCV(ohlcv: any, market?: any): number[];
    parseOrderStatus(status: any): string;
    parseStopTrigger(status: any): string;
    parseOrderType(type: any): string;
    parseOrder(order: any, market?: any): any;
    fetchOpenOrdersV2(symbol?: string, since?: any, limit?: any, params?: {}): Promise<any[]>;
    fetchOrders(symbol?: string, since?: any, limit?: any, params?: {}): Promise<any[]>;
    sign(path: any, section?: string, method?: string, params?: {}, headers?: any, body?: any): {
        url: any;
        method: string;
        body: any;
        headers: any;
    };
    handleErrors(httpCode: any, reason: any, url: any, method: any, headers: any, body: any, response: any, requestHeaders: any, requestBody: any): void;
}
